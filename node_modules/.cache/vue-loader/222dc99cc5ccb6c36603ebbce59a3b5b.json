{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\StudyStringModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\StudyStringModal.vue","mtime":1745241596852},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["StudyStringModal.vue"],"names":[],"mappingsfile":"StudyStringModal.vue","sourceRoot":"src/components/modals","sourcesContent":["<script>\r\nimport { sha512_256 } from \"js-sha512\";\r\n\r\nimport ModalWrapperChoice from \"@/components/modals/ModalWrapperChoice\";\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\nimport StudyStringLine from \"@/components/modals/StudyStringLine\";\r\n\r\nimport StudyStringPreview from \"./time-study-modal-preview/StudyStringPreview\";\r\nimport StudyTreeInfo from \"./StudyTreeInfo\";\r\n\r\nlet savedImportString = \"\";\r\n\r\nexport default {\r\n  name: \"StudyStringModal\",\r\n  components: {\r\n    ModalWrapperChoice,\r\n    StudyStringLine,\r\n    PrimaryButton,\r\n    StudyStringPreview,\r\n    StudyTreeInfo\r\n  },\r\n  props: {\r\n    id: {\r\n      type: Number,\r\n      required: true,\r\n    },\r\n    deleting: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false,\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      input: \"\",\r\n      name: \"\",\r\n      respecAndLoad: false,\r\n      canEternity: false\r\n    };\r\n  },\r\n  computed: {\r\n    // This modal is used by both study importing and preset editing, but is given an id of -1 when importing\r\n    isImporting() {\r\n      return this.id === -1;\r\n    },\r\n    // This represents the state reached from importing into an empty tree\r\n    importedTree() {\r\n      if (!this.inputIsValidTree) return {};\r\n      const importedTree = new TimeStudyTree(this.truncatedInput);\r\n      const newStudiesArray = importedTree.purchasedStudies.map(s => this.studyString(s));\r\n      return {\r\n        timeTheorems: importedTree.spentTheorems[0],\r\n        spaceTheorems: importedTree.spentTheorems[1],\r\n        newStudies: makeEnumeration(newStudiesArray),\r\n        newStudiesArray,\r\n        invalidStudies: importedTree.invalidStudies,\r\n        firstPaths: makeEnumeration(importedTree.dimensionPaths),\r\n        secondPaths: makeEnumeration(importedTree.pacePaths),\r\n        ec: importedTree.ec,\r\n        startEC: importedTree.startEC,\r\n        hasInfo: makeEnumeration(importedTree.dimensionPaths) || importedTree.ec > 0,\r\n      };\r\n    },\r\n    // This is only shown when importing; when modifying a preset we assume that generally the current state of the\r\n    // tree is irrelevant because if it mattered then the player would simply import instead\r\n    combinedTree() {\r\n      if (!this.inputIsValidTree) return {};\r\n      const currentStudyTree = GameCache.currentStudyTree.value;\r\n      const combinedTree = this.combinedTreeObject;\r\n      const newStudiesArray = combinedTree.purchasedStudies\r\n        .filter(s => !currentStudyTree.purchasedStudies.includes(s)).map(s => this.studyString(s));\r\n      // To start an EC using the ! functionality, we want to make sure all the following are true:\r\n      // - The imported string needs to end with \"!\" (this is parsed out in time-study-tree.js and stored into the\r\n      //   canStart prop for tree objects)\r\n      // - We can unlock the EC in the string. This requires either no EC currently unlocked, or we coincidentally\r\n      //   already have it unlocked\r\n      // - The ECs in the tree object and the import string MUST match; the only EC we want to try to enter is the\r\n      //   one which is being imported, and the tree object will contain a different EC if we already have one\r\n      const stringEC = TimeStudyTree.getECFromString(this.truncatedInput);\r\n      const hasExclamationPoint = combinedTree.startEC;\r\n      const canUnlockEC = [0, stringEC].includes(player.challenge.eternity.current);\r\n      const hasECMismatch = combinedTree.ec !== stringEC;\r\n      return {\r\n        timeTheorems: combinedTree.spentTheorems[0] - currentStudyTree.spentTheorems[0],\r\n        spaceTheorems: combinedTree.spentTheorems[1] - currentStudyTree.spentTheorems[1],\r\n        newStudies: makeEnumeration(newStudiesArray),\r\n        newStudiesArray,\r\n        firstPaths: makeEnumeration(combinedTree.dimensionPaths),\r\n        secondPaths: makeEnumeration(combinedTree.pacePaths),\r\n        ec: combinedTree.ec,\r\n        startEC: hasExclamationPoint && canUnlockEC && !hasECMismatch,\r\n        hasInfo: makeEnumeration(combinedTree.dimensionPaths) || combinedTree.ec > 0,\r\n      };\r\n    },\r\n    combinedTreeObject() {\r\n      const combinedTree = new TimeStudyTree();\r\n      combinedTree.attemptBuyArray(TimeStudyTree.currentStudies, false);\r\n      combinedTree.attemptBuyArray(combinedTree.parseStudyImport(this.truncatedInput), true);\r\n      return combinedTree;\r\n    },\r\n    modalTitle() {\r\n      if (this.deleting) return `Deleting Study Preset \"${this.name}\"`;\r\n      return this.isImporting ? \"Input your tree\" : `Editing Study Preset \"${this.name}\"`;\r\n    },\r\n    invalidMessage() {\r\n      if (!this.inputIsValidTree || this.importedTree.invalidStudies.length === 0) return null;\r\n      // Pad the input with non-digits which we remove later in order to not cause erroneous extra matches within IDs\r\n      // and limit the string length to stop excessive UI stretch\r\n      let coloredString = `#${this.truncatedInput}#`;\r\n      if (coloredString.length > 300) coloredString = `${coloredString.slice(0, 297)}...`;\r\n\r\n      for (const study of this.importedTree.invalidStudies) {\r\n        const id = `${study}`.match(/(EC)?(\\d+)/u);\r\n        const num = parseInt(id[2], 10);\r\n        switch (id[1]) {\r\n          case \"EC\":\r\n            coloredString = coloredString.replaceAll(new RegExp(`\\\\|(${num})`, \"gu\"),\r\n              `|<span style=\"color: var(--color-bad);\">$1</span>`);\r\n            break;\r\n          default:\r\n            coloredString = coloredString.replaceAll(new RegExp(`(\\\\D)(${num})(\\\\D)`, \"gu\"),\r\n              `$1<span style=\"color: var(--color-bad);\">$2</span>$3`);\r\n            break;\r\n        }\r\n      }\r\n      return `Your import string has invalid study IDs: ${coloredString.replaceAll(\"#\", \"\").replaceAll(\",\", \", \")}\r\n        <br><br>`;\r\n    },\r\n    truncatedInput() {\r\n      return TimeStudyTree.truncateInput(this.input);\r\n    },\r\n    hasInput() {\r\n      return this.truncatedInput !== \"\";\r\n    },\r\n    inputIsValid() {\r\n      return this.inputIsValidTree || this.inputIsSecret;\r\n    },\r\n    inputIsValidTree() {\r\n      return TimeStudyTree.isValidImportString(this.truncatedInput);\r\n    },\r\n    inputIsSecret() {\r\n      // The button to open the modal and the actual modal itself display two different strings;\r\n      // we should allow either to unlock the secret achievement\r\n      const secretStrings = [\r\n        \"08b819f253b684773e876df530f95dcb85d2fb052046fa16ec321c65f3330608\",\r\n        \"bb450c2a3869bae412ed0b4304dc229521fc69f0fdcc95b3b61460aaf5658fc4\"\r\n      ];\r\n      return secretStrings.includes(sha512_256(this.input.toLowerCase()));\r\n    },\r\n    confirmText() {\r\n      if (this.deleting) return \"Delete\";\r\n      return this.isImporting ? \"Import\" : \"Save\";\r\n    }\r\n  },\r\n  watch: {\r\n    input(newInput) {\r\n      savedImportString = newInput;\r\n    }\r\n  },\r\n  // Needs to be assigned in created() or else they will end up being undefined when importing\r\n  created() {\r\n    const preset = player.timestudy.presets[this.id];\r\n    this.input = preset ? preset.studies : savedImportString;\r\n    this.name = preset ? preset.name : \"\";\r\n  },\r\n  mounted() {\r\n    this.$refs.input.select();\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.canEternity = Player.canEternity;\r\n    },\r\n    confirm() {\r\n      if (this.deleting) {\r\n        this.deletePreset();\r\n      } else if (this.isImporting) {\r\n        if (this.respecAndLoad && Player.canEternity) {\r\n          player.respec = true;\r\n          const tree = new TimeStudyTree(this.truncatedInput);\r\n          animateAndEternity(() => TimeStudyTree.commitToGameState(tree.purchasedStudies, false, tree.startEC));\r\n          return;\r\n        }\r\n        this.importTree();\r\n      } else {\r\n        this.savePreset();\r\n      }\r\n    },\r\n    convertInputShorthands() {\r\n      this.input = TimeStudyTree.formatStudyList(this.input);\r\n    },\r\n    importTree() {\r\n      if (!this.inputIsValid) return;\r\n      if (this.inputIsSecret) SecretAchievement(37).unlock();\r\n      savedImportString = \"\";\r\n      this.emitClose();\r\n      // We need to use a combined tree for committing to the game state, or else it won't buy studies in the imported\r\n      // tree are only reachable if the current tree is already bought\r\n      TimeStudyTree.commitToGameState(this.combinedTreeObject.purchasedStudies, false, this.combinedTree.startEC);\r\n    },\r\n    savePreset() {\r\n      if (this.inputIsValid) {\r\n        player.timestudy.presets[this.id].studies = this.input;\r\n        GameUI.notify.eternity(`Study Tree ${this.name} successfully edited.`);\r\n        this.emitClose();\r\n      }\r\n    },\r\n    deletePreset() {\r\n      const name = player.timestudy.presets[this.id].name;\r\n      const presetName = name ? `Study preset \"${name}\"` : \"Study preset\";\r\n      player.timestudy.presets[this.id].studies = \"\";\r\n      player.timestudy.presets[this.id].name = \"\";\r\n      GameUI.notify.eternity(`${presetName} deleted from slot ${this.id + 1}`);\r\n    },\r\n    studyString(study) {\r\n      return study instanceof ECTimeStudyState ? `EC${study.id}` : `${study.id}`;\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapperChoice\r\n    :show-cancel=\"!inputIsValid\"\r\n    :show-confirm=\"inputIsValid\"\r\n    class=\"c-modal-import-tree\"\r\n    @confirm=\"confirm\"\r\n  >\r\n    <template #header>\r\n      {{ modalTitle }}\r\n    </template>\r\n    <input\r\n      ref=\"input\"\r\n      v-model=\"input\"\r\n      type=\"text\"\r\n      maxlength=\"1500\"\r\n      class=\"c-modal-input c-modal-import-tree__input\"\r\n      :class=\"{ 'l-delete-input' : deleting }\"\r\n      :disabled=\"deleting\"\r\n      @keyup.enter=\"confirm\"\r\n      @keyup.esc=\"emitClose\"\r\n    >\r\n    <div class=\"c-two-column\">\r\n      <div class=\"c-study-info l-modal-import-tree__tree-info\">\r\n        <div v-if=\"inputIsSecret\">\r\n          ???\r\n        </div>\r\n        <template v-else-if=\"inputIsValidTree\">\r\n          <div\r\n            v-if=\"invalidMessage\"\r\n            class=\"l-modal-import-tree__tree-info-line\"\r\n            v-html=\"invalidMessage\"\r\n          />\r\n          <StudyStringLine\r\n            v-if=\"isImporting\"\r\n            :tree=\"combinedTree\"\r\n            :into-empty=\"false\"\r\n          />\r\n          <StudyStringLine\r\n            :tree=\"importedTree\"\r\n            :into-empty=\"true\"\r\n          />\r\n          <StudyTreeInfo\r\n            v-if=\"deleting && importedTree.hasInfo\"\r\n            header-text=\"Study Preset contains:\"\r\n            :tree-status=\"importedTree\"\r\n          />\r\n          <StudyTreeInfo\r\n            v-if=\"!deleting && !isImporting && importedTree.hasInfo\"\r\n            header-text=\"Status after loading with <b>no studies</b>:\"\r\n            :tree-status=\"importedTree\"\r\n          />\r\n          <StudyTreeInfo\r\n            v-if=\"!deleting && combinedTree.hasInfo\"\r\n            header-text=\"Status after loading with <b>current tree</b>:\"\r\n            :tree-status=\"combinedTree\"\r\n          />\r\n        </template>\r\n        <div v-if=\"!deleting && !inputIsValidTree && hasInput\">\r\n          Not a valid tree\r\n        </div>\r\n      </div>\r\n      <div class=\"c-study-preview\">\r\n        <StudyStringPreview\r\n          :show-preview=\"inputIsValidTree\"\r\n          :new-studies=\"!isImporting || (canEternity && respecAndLoad) ? importedTree.newStudiesArray\r\n            : combinedTree.newStudiesArray\"\r\n          :disregard-current-studies=\"!isImporting || (canEternity && respecAndLoad)\"\r\n        />\r\n      </div>\r\n    </div>\r\n    <div v-if=\"!isImporting && inputIsValidTree\">\r\n      <br>\r\n      <PrimaryButton\r\n        v-if=\"!deleting\"\r\n        v-tooltip=\"'This will format the study preset text, for example, changing \\'a,b,c|d\\' to \\'a, b, c | d\\'.'\"\r\n        @click=\"convertInputShorthands\"\r\n      >\r\n        Format Preset Text\r\n      </PrimaryButton>\r\n    </div>\r\n    <span v-if=\"isImporting\">\r\n      <br>\r\n      <div\r\n        v-tooltip=\"canEternity ? '' : 'You are currently unable to eternity, so this will only do a normal load.'\"\r\n        class=\"c-modal__confirmation-toggle\"\r\n        @click=\"respecAndLoad = !respecAndLoad\"\r\n      >\r\n        <div\r\n          :class=\"{\r\n            'c-modal__confirmation-toggle__checkbox': true,\r\n            'c-modal__confirmation-toggle__checkbox--active': respecAndLoad,\r\n          }\"\r\n        >\r\n          <span\r\n            v-if=\"respecAndLoad\"\r\n            class=\"fas fa-check\"\r\n          />\r\n        </div>\r\n        <span class=\"c-modal__confirmation-toggle__text\">\r\n          Also respec tree and eternity\r\n          <span\r\n            v-if=\"!canEternity\"\r\n            class=\"c-modal__confirmation-toggle__warning\"\r\n          >\r\n            !\r\n          </span>\r\n        </span>\r\n      </div>\r\n    </span>\r\n    <template #confirm-text>\r\n      {{ confirmText }}\r\n    </template>\r\n  </ModalWrapperChoice>\r\n</template>\r\n\r\n<style scoped>\r\n.c-two-column {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n}\r\n\r\n.c-study-info {\r\n  width: 30rem;\r\n  padding: 0 2rem;\r\n}\r\n\r\n.c-study-preview {\r\n  height: 100%;\r\n  margin-right: 3rem;\r\n}\r\n\r\n.l-delete-input {\r\n  color: var(--color-text);\r\n  background-color: var(--color-disabled);\r\n  pointer-events: none;\r\n  user-select: none;\r\n}\r\n\r\n.c-modal__confirmation-toggle__text {\r\n  opacity: 1;\r\n}\r\n\r\n.c-modal__confirmation-toggle__warning {\r\n  display: inline-flex;\r\n  /* stylelint-disable-next-line unit-allowed-list */\r\n  width: 1em;\r\n  /* stylelint-disable-next-line unit-allowed-list */\r\n  height: 1em;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: #332222;\r\n  background: var(--color-bad);\r\n  border-radius: 100%;\r\n  margin-left: 0.3rem;\r\n}\r\n</style>\r\n"]}]}