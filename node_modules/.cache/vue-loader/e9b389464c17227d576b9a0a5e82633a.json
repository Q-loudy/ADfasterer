{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\antimatter-dimensions\\AntimatterDimensionProgressBar.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\antimatter-dimensions\\AntimatterDimensionProgressBar.vue","mtime":1745241597018},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgeyBEQyB9IGZyb20gIkAvY29yZS9jb25zdGFudHMiOw0KDQpleHBvcnQgZGVmYXVsdCB7DQogIG5hbWU6ICJBbnRpbWF0dGVyRGltZW5zaW9uUHJvZ3Jlc3NCYXIiLA0KICBkYXRhKCkgew0KICAgIHJldHVybiB7DQogICAgICBmaWxsOiAwLA0KICAgICAgdG9vbHRpcDogIiIsDQogICAgICBkaXNwbGF5UGVyY2VudHM6ICIiLA0KICAgIH07DQogIH0sDQogIGNvbXB1dGVkOiB7DQogICAgcHJvZ3Jlc3NCYXJTdHlsZSgpIHsNCiAgICAgIHJldHVybiB7DQogICAgICAgIHdpZHRoOiBgJHsodGhpcy5maWxsICogMTAwKS50b0ZpeGVkKDIpfSVgDQogICAgICB9Ow0KICAgIH0NCiAgfSwNCiAgbWV0aG9kczogew0KICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5DQogICAgdXBkYXRlKCkgew0KICAgICAgdGhpcy5kaXNwbGF5UGVyY2VudHMgPSBmb3JtYXRQZXJjZW50cyh0aGlzLmZpbGwsIDIpOw0KICAgICAgY29uc3Qgc2V0UHJvZ3Jlc3MgPSAoY3VycmVudCwgZ29hbCwgdG9vbHRpcCkgPT4gew0KICAgICAgICB0aGlzLmZpbGwgPSBNYXRoLmNsYW1wTWF4KGN1cnJlbnQucExvZzEwKCkgLyBEZWNpbWFsLmxvZzEwKGdvYWwpLCAxKTsNCiAgICAgICAgdGhpcy50b29sdGlwID0gdG9vbHRpcDsNCiAgICAgIH07DQogICAgICBjb25zdCBzZXRMaW5lYXJQcm9ncmVzcyA9IChjdXJyZW50LCBnb2FsLCB0b29sdGlwKSA9PiB7DQogICAgICAgIHRoaXMuZmlsbCA9IE1hdGguY2xhbXBNYXgoY3VycmVudCAvIGdvYWwsIDEpOw0KICAgICAgICB0aGlzLnRvb2x0aXAgPSB0b29sdGlwOw0KICAgICAgfTsNCg0KICAgICAgLy8gR29hbHMgZm9yIGNoYWxsZW5nZXMgYW5kIGNoYWxsZW5nZS1saWtlIHJ1bnMgc2hvdWxkIGNvbWUgZmlyc3QgYmVjYXVzZSBudW1iZXJzIHdpbGwgYWx3YXlzIGJlIG11Y2ggc21hbGxlcg0KICAgICAgLy8gdGhhbiBub3JtYWwgYW5kIHRoZXJlZm9yZSBkZWZhdWx0IGZpbGxpbmcgd29uJ3QgYmUgbWVhbmluZ2Z1bC4gU2luY2UgY2hhbGxlbmdlcyBnZXQgY29tcGxldGVkIG9yIGFiYW5kb25lZCBmcm9tDQogICAgICAvLyB0aGUgaW5zaWRlIG91dHdhcmRzLCB3ZSBzaG93IHRoZSBnb2FscyBpbiB0aGF0IHByaW9yaXR5IGFzIHdlbGwuIEl0IG9ubHkgbWFrZXMgc2Vuc2UgdG8gY2hlY2sgY2VsNiBhbmQgbm90IHRoZQ0KICAgICAgLy8gb3RoZXJzIGJlY2F1c2UgcHJlLWNlbDMgY29tcGxldGlvbiBpdCdsbCBkZWZhdWx0IHRvIGU0MDAwIGFuZCBjZWw0LzUgZG9uJ3QgaGF2ZSBtZWFuaW5nZnVsIHNpbmdsZSBnb2Fscw0KICAgICAgY29uc3QgaW5TcGVjaWFsUnVuID0gUGxheWVyLmlzSW5BbnRpbWF0dGVyQ2hhbGxlbmdlIHx8IEV0ZXJuaXR5Q2hhbGxlbmdlLmlzUnVubmluZyB8fCBwbGF5ZXIuZGlsYXRpb24uYWN0aXZlIHx8DQogICAgICAgIExhaXRlbGEuaXNSdW5uaW5nOw0KICAgICAgaWYgKGluU3BlY2lhbFJ1bikgew0KICAgICAgICBpZiAoUGxheWVyLmlzSW5BbnRpbWF0dGVyQ2hhbGxlbmdlKSB7DQogICAgICAgICAgc2V0UHJvZ3Jlc3MoQ3VycmVuY3kuYW50aW1hdHRlci52YWx1ZSwgUGxheWVyLmFudGltYXR0ZXJDaGFsbGVuZ2UuZ29hbCwgIlBlcmNlbnRhZ2UgdG8gQ2hhbGxlbmdlIGdvYWwiKTsNCiAgICAgICAgfSBlbHNlIGlmIChFdGVybml0eUNoYWxsZW5nZS5pc1J1bm5pbmcpIHsNCiAgICAgICAgICBpZiAoUGVyay5zdHVkeUVDQnVsay5pc0JvdWdodCkgew0KICAgICAgICAgICAgLy8gTm90ZTogSWYgdGhlIEVDIGlzIGZ1bGx5IGNvbXBsZXRlLCB0aGlzIHByb3AgZG9lc24ndCBleGlzdA0KICAgICAgICAgICAgY29uc3QgZ29hbCA9IEV0ZXJuaXR5Q2hhbGxlbmdlLmN1cnJlbnQuZ2FpbmVkQ29tcGxldGlvblN0YXR1cy5uZXh0R29hbEF0Ow0KICAgICAgICAgICAgaWYgKGdvYWwpIHsNCiAgICAgICAgICAgICAgc2V0UHJvZ3Jlc3MoQ3VycmVuY3kuaW5maW5pdHlQb2ludHMudmFsdWUsIGdvYWwsICJQZXJjZW50YWdlIHRvIG5leHQgQ2hhbGxlbmdlIGNvbXBsZXRpb24iKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgIC8vIEluIGEgZnVsbHkgY29tcGxldGVkIEVDLCB0aGVyZSdzIG5vdGhpbmcgdXNlZnVsIHdlIGNhbiBzaG93IHNvIHdlIGp1c3QgcGluIGl0IGF0IDEwMCUgYW5kIHNheSBzbw0KICAgICAgICAgICAgICBzZXRQcm9ncmVzcyhDdXJyZW5jeS5pbmZpbml0eVBvaW50cy52YWx1ZSwgMTAsICJUaGlzIENoYWxsZW5nZSBpcyBhbHJlYWR5IGZ1bGx5IGNvbXBsZXRlZCEiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgc2V0UHJvZ3Jlc3MoQ3VycmVuY3kuaW5maW5pdHlQb2ludHMudmFsdWUsIFBsYXllci5ldGVybml0eUdvYWwsICJQZXJjZW50YWdlIHRvIEV0ZXJuaXR5IENoYWxsZW5nZSBnb2FsIik7DQogICAgICAgICAgfQ0KICAgICAgICB9IGVsc2UgaWYgKHBsYXllci5kaWxhdGlvbi5hY3RpdmUpIHsNCiAgICAgICAgICBpZiAocGxheWVyLmRpbGF0aW9uLmxhc3RFUC5ndCgwKSkgew0KICAgICAgICAgICAgc2V0UHJvZ3Jlc3MoQ3VycmVuY3kuYW50aW1hdHRlci52YWx1ZSwgZ2V0VGFjaHlvblJlcSgpLCAiUGVyY2VudGFnZSB0byBnYWluIG1vcmUgVFAgaW4gRGlsYXRpb24iKTsNCiAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgc2V0UHJvZ3Jlc3MoQ3VycmVuY3kuaW5maW5pdHlQb2ludHMudmFsdWUsIFBsYXllci5ldGVybml0eUdvYWwsICJQZXJjZW50YWdlIHRvIEV0ZXJuaXR5IGluIERpbGF0aW9uIik7DQogICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIC8vIExhaSd0ZWxhIGRlc3RhYmlsaXphdGlvbjsgc2luY2UgdGhlIHByb2dyZXNzIGJhciBpcyBsb2dhcml0aG1pY2FsbHktc2NhbGVkLCB3ZSBuZWVkIHRvIHBvdzEwIHRoZSBhcmd1bWVudHMNCiAgICAgICAgICBzZXRQcm9ncmVzcyhEZWNpbWFsLnBvdzEwKHBsYXllci5jZWxlc3RpYWxzLmxhaXRlbGEuZW50cm9weSksIDEwLCAiUGVyY2VudGFnZSB0byBEZXN0YWJpbGl6ZWQgUmVhbGl0eSIpOw0KICAgICAgICB9DQogICAgICB9IGVsc2UgaWYgKFBlbGxlLmlzRG9vbWVkKSB7DQogICAgICAgIGlmIChQZWxsZVJpZnRzLnJlY3Vyc2lvbi5taWxlc3RvbmVzWzJdLmNhbkJlQXBwbGllZCB8fCBHYWxheHlHZW5lcmF0b3Iuc3BlbnRHYWxheGllcyA+IDApIHsNCiAgICAgICAgICBzZXRQcm9ncmVzcyhDdXJyZW5jeS5pbmZpbml0eVBvaW50cy52YWx1ZSwgVGVzc2VyYWN0cy5uZXh0Q29zdCwgIlBlcmNlbnRhZ2UgdG8gbmV4dCBUZXNzZXJhY3QiKTsNCiAgICAgICAgfSBlbHNlIGlmIChQZWxsZVN0cmlrZXMuZGlsYXRpb24uaGFzU3RyaWtlKSB7DQogICAgICAgICAgc2V0UHJvZ3Jlc3MoQ3VycmVuY3kuZXRlcm5pdHlQb2ludHMudmFsdWUsIERDLkU0MDAwLCAiUGVyY2VudGFnZSB0byBHYWxheHkgR2VuZXJhdG9yIik7DQogICAgICAgIH0gZWxzZSBpZiAoUGVsbGVTdHJpa2VzLkVDcy5oYXNTdHJpa2UpIHsNCiAgICAgICAgICBzZXRMaW5lYXJQcm9ncmVzcygNCiAgICAgICAgICAgIChNYXRoLm1pbihDdXJyZW5jeS50aW1lVGhlb3JlbXMubWF4LnRvTnVtYmVyKCkgLyAxMjkwMCwgMSkgKw0KICAgICAgICAgICAgTWF0aC5taW4oRXRlcm5pdHlDaGFsbGVuZ2VzLmNvbXBsZXRpb25zIC8gNjAsIDEpKSAvIDIsDQogICAgICAgICAgICAxLCAiUGVyY2VudGFnZSB0byBmaWZ0aCBTdHJpa2UiKTsNCiAgICAgICAgfSBlbHNlIGlmIChQZWxsZVN0cmlrZXMuZXRlcm5pdHkuaGFzU3RyaWtlKSB7DQogICAgICAgICAgc2V0TGluZWFyUHJvZ3Jlc3MoQ3VycmVuY3kudGltZVRoZW9yZW1zLm1heC50b051bWJlcigpLCAxMTUsICJQZXJjZW50YWdlIHRvIGZvdXJ0aCBTdHJpa2UiKTsNCiAgICAgICAgfSBlbHNlIGlmIChQZWxsZVN0cmlrZXMucG93ZXJHYWxheGllcy5oYXNTdHJpa2UpIHsNCiAgICAgICAgICBzZXRQcm9ncmVzcyhDdXJyZW5jeS5pbmZpbml0eVBvaW50cy52YWx1ZSwgUGxheWVyLmV0ZXJuaXR5R29hbCwgIlBlcmNlbnRhZ2UgdG8gdGhpcmQgU3RyaWtlIik7DQogICAgICAgIH0gZWxzZSBpZiAoUGVsbGVTdHJpa2VzLmluZmluaXR5Lmhhc1N0cmlrZSkgew0KICAgICAgICAgIGlmIChwbGF5ZXIuYnJlYWspIHsNCiAgICAgICAgICAgIHNldFByb2dyZXNzKEN1cnJlbmN5LmluZmluaXR5UG9pbnRzLnZhbHVlLCA1ZTExLCAiUGVyY2VudGFnZSB0byBzZWNvbmQgU3RyaWtlIik7DQogICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHNldFByb2dyZXNzKEN1cnJlbmN5LmFudGltYXR0ZXIudmFsdWUsIERlY2ltYWwuTlVNQkVSX01BWF9WQUxVRSwgIlBlcmNlbnRhZ2UgdG8gSW5maW5pdHkiKTsNCiAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgc2V0UHJvZ3Jlc3MoQ3VycmVuY3kuYW50aW1hdHRlci52YWx1ZSwgRGVjaW1hbC5OVU1CRVJfTUFYX1ZBTFVFLCAiUGVyY2VudGFnZSB0byBmaXJzdCBTdHJpa2UiKTsNCiAgICAgICAgfQ0KICAgICAgfSBlbHNlIGlmIChFbnNsYXZlZC5pc0NvbXBsZXRlZCkgew0KICAgICAgICAvLyBTaG93IGFsbCBvdGhlciBnb2FscyBmcm9tIHRoZSB0b3AgZG93biwgc3RhcnRpbmcgYXQgZmVhdHVyZXMgaW4gdGhlIGhpZ2hlc3QgcHJlc3RpZ2UgbGF5ZXINCiAgICAgICAgc2V0UHJvZ3Jlc3MoQ3VycmVuY3kuaW5maW5pdHlQb2ludHMudmFsdWUsIFRlc3NlcmFjdHMubmV4dENvc3QsICJQZXJjZW50YWdlIHRvIG5leHQgVGVzc2VyYWN0Iik7DQogICAgICB9IGVsc2UgaWYgKFBsYXllclByb2dyZXNzLmRpbGF0aW9uVW5sb2NrZWQoKSkgew0KICAgICAgICBzZXRQcm9ncmVzcyhDdXJyZW5jeS5ldGVybml0eVBvaW50cy52YWx1ZSwgREMuRTQwMDAsICJQZXJjZW50YWdlIHRvIFJlYWxpdHkiKTsNCiAgICAgIH0gZWxzZSBpZiAoSW5maW5pdHlEaW1lbnNpb24oOCkuaXNVbmxvY2tlZCkgew0KICAgICAgICBzZXRQcm9ncmVzcyhDdXJyZW5jeS5pbmZpbml0eVBvaW50cy52YWx1ZSwgUGxheWVyLmV0ZXJuaXR5R29hbCwgIlBlcmNlbnRhZ2UgdG8gRXRlcm5pdHkiKTsNCiAgICAgIH0gZWxzZSBpZiAocGxheWVyLmJyZWFrKSB7DQogICAgICAgIGNvbnN0IHRleHQgPSBgUGVyY2VudGFnZSB0byB1bmxvY2sgYSBuZXcgJHtJbmZpbml0eURpbWVuc2lvbnMubmV4dCgpLmhhc0lQVW5sb2NrDQogICAgICAgICAgPyAidHlwZSBvZiBEaW1lbnNpb24iDQogICAgICAgICAgOiAiSW5maW5pdHkgRGltZW5zaW9uIn1gOw0KICAgICAgICBjb25zdCBuZXh0SUQgPSBJbmZpbml0eURpbWVuc2lvbnMubmV4dCgpOw0KICAgICAgICBpZiAobmV4dElELmlwUmVxdWlyZW1lbnRSZWFjaGVkKSB7DQogICAgICAgICAgc2V0UHJvZ3Jlc3MocGxheWVyLnJlY29yZHMudGhpc0V0ZXJuaXR5Lm1heEFNLCBuZXh0SUQuYW1SZXF1aXJlbWVudCwgdGV4dCk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgc2V0UHJvZ3Jlc3MocGxheWVyLmluZmluaXR5UG9pbnRzLCBuZXh0SUQuaXBSZXF1aXJlbWVudCwgdGV4dCk7DQogICAgICAgIH0NCiAgICAgIH0gZWxzZSB7DQogICAgICAgIHNldFByb2dyZXNzKEN1cnJlbmN5LmFudGltYXR0ZXIudmFsdWUsIERlY2ltYWwuTlVNQkVSX01BWF9WQUxVRSwgIlBlcmNlbnRhZ2UgdG8gSW5maW5pdHkiKTsNCiAgICAgIH0NCiAgICB9DQogIH0NCn07DQo="},{"version":3,"sources":["AntimatterDimensionProgressBar.vue"],"names":[],"mappingsfile":"AntimatterDimensionProgressBar.vue","sourceRoot":"src/components/tabs/antimatter-dimensions","sourcesContent":["<script>\r\nimport { DC } from \"@/core/constants\";\r\n\r\nexport default {\r\n  name: \"AntimatterDimensionProgressBar\",\r\n  data() {\r\n    return {\r\n      fill: 0,\r\n      tooltip: \"\",\r\n      displayPercents: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    progressBarStyle() {\r\n      return {\r\n        width: `${(this.fill * 100).toFixed(2)}%`\r\n      };\r\n    }\r\n  },\r\n  methods: {\r\n    // eslint-disable-next-line complexity\r\n    update() {\r\n      this.displayPercents = formatPercents(this.fill, 2);\r\n      const setProgress = (current, goal, tooltip) => {\r\n        this.fill = Math.clampMax(current.pLog10() / Decimal.log10(goal), 1);\r\n        this.tooltip = tooltip;\r\n      };\r\n      const setLinearProgress = (current, goal, tooltip) => {\r\n        this.fill = Math.clampMax(current / goal, 1);\r\n        this.tooltip = tooltip;\r\n      };\r\n\r\n      // Goals for challenges and challenge-like runs should come first because numbers will always be much smaller\r\n      // than normal and therefore default filling won't be meaningful. Since challenges get completed or abandoned from\r\n      // the inside outwards, we show the goals in that priority as well. It only makes sense to check cel6 and not the\r\n      // others because pre-cel3 completion it'll default to e4000 and cel4/5 don't have meaningful single goals\r\n      const inSpecialRun = Player.isInAntimatterChallenge || EternityChallenge.isRunning || player.dilation.active ||\r\n        Laitela.isRunning;\r\n      if (inSpecialRun) {\r\n        if (Player.isInAntimatterChallenge) {\r\n          setProgress(Currency.antimatter.value, Player.antimatterChallenge.goal, \"Percentage to Challenge goal\");\r\n        } else if (EternityChallenge.isRunning) {\r\n          if (Perk.studyECBulk.isBought) {\r\n            // Note: If the EC is fully complete, this prop doesn't exist\r\n            const goal = EternityChallenge.current.gainedCompletionStatus.nextGoalAt;\r\n            if (goal) {\r\n              setProgress(Currency.infinityPoints.value, goal, \"Percentage to next Challenge completion\");\r\n            } else {\r\n              // In a fully completed EC, there's nothing useful we can show so we just pin it at 100% and say so\r\n              setProgress(Currency.infinityPoints.value, 10, \"This Challenge is already fully completed!\");\r\n            }\r\n          } else {\r\n            setProgress(Currency.infinityPoints.value, Player.eternityGoal, \"Percentage to Eternity Challenge goal\");\r\n          }\r\n        } else if (player.dilation.active) {\r\n          if (player.dilation.lastEP.gt(0)) {\r\n            setProgress(Currency.antimatter.value, getTachyonReq(), \"Percentage to gain more TP in Dilation\");\r\n          } else {\r\n            setProgress(Currency.infinityPoints.value, Player.eternityGoal, \"Percentage to Eternity in Dilation\");\r\n          }\r\n        } else {\r\n          // Lai'tela destabilization; since the progress bar is logarithmically-scaled, we need to pow10 the arguments\r\n          setProgress(Decimal.pow10(player.celestials.laitela.entropy), 10, \"Percentage to Destabilized Reality\");\r\n        }\r\n      } else if (Pelle.isDoomed) {\r\n        if (PelleRifts.recursion.milestones[2].canBeApplied || GalaxyGenerator.spentGalaxies > 0) {\r\n          setProgress(Currency.infinityPoints.value, Tesseracts.nextCost, \"Percentage to next Tesseract\");\r\n        } else if (PelleStrikes.dilation.hasStrike) {\r\n          setProgress(Currency.eternityPoints.value, DC.E4000, \"Percentage to Galaxy Generator\");\r\n        } else if (PelleStrikes.ECs.hasStrike) {\r\n          setLinearProgress(\r\n            (Math.min(Currency.timeTheorems.max.toNumber() / 12900, 1) +\r\n            Math.min(EternityChallenges.completions / 60, 1)) / 2,\r\n            1, \"Percentage to fifth Strike\");\r\n        } else if (PelleStrikes.eternity.hasStrike) {\r\n          setLinearProgress(Currency.timeTheorems.max.toNumber(), 115, \"Percentage to fourth Strike\");\r\n        } else if (PelleStrikes.powerGalaxies.hasStrike) {\r\n          setProgress(Currency.infinityPoints.value, Player.eternityGoal, \"Percentage to third Strike\");\r\n        } else if (PelleStrikes.infinity.hasStrike) {\r\n          if (player.break) {\r\n            setProgress(Currency.infinityPoints.value, 5e11, \"Percentage to second Strike\");\r\n          } else {\r\n            setProgress(Currency.antimatter.value, Decimal.NUMBER_MAX_VALUE, \"Percentage to Infinity\");\r\n          }\r\n        } else {\r\n          setProgress(Currency.antimatter.value, Decimal.NUMBER_MAX_VALUE, \"Percentage to first Strike\");\r\n        }\r\n      } else if (Enslaved.isCompleted) {\r\n        // Show all other goals from the top down, starting at features in the highest prestige layer\r\n        setProgress(Currency.infinityPoints.value, Tesseracts.nextCost, \"Percentage to next Tesseract\");\r\n      } else if (PlayerProgress.dilationUnlocked()) {\r\n        setProgress(Currency.eternityPoints.value, DC.E4000, \"Percentage to Reality\");\r\n      } else if (InfinityDimension(8).isUnlocked) {\r\n        setProgress(Currency.infinityPoints.value, Player.eternityGoal, \"Percentage to Eternity\");\r\n      } else if (player.break) {\r\n        const text = `Percentage to unlock a new ${InfinityDimensions.next().hasIPUnlock\r\n          ? \"type of Dimension\"\r\n          : \"Infinity Dimension\"}`;\r\n        const nextID = InfinityDimensions.next();\r\n        if (nextID.ipRequirementReached) {\r\n          setProgress(player.records.thisEternity.maxAM, nextID.amRequirement, text);\r\n        } else {\r\n          setProgress(player.infinityPoints, nextID.ipRequirement, text);\r\n        }\r\n      } else {\r\n        setProgress(Currency.antimatter.value, Decimal.NUMBER_MAX_VALUE, \"Percentage to Infinity\");\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"c-progress-bar\">\r\n    <div\r\n      :style=\"progressBarStyle\"\r\n      class=\"c-progress-bar__fill\"\r\n    >\r\n      <span\r\n        v-tooltip=\"tooltip\"\r\n        class=\"c-progress-bar__percents\"\r\n      >\r\n        {{ displayPercents }}\r\n      </span>\r\n    </div>\r\n  </div>\r\n</template>\r\n"]}]}