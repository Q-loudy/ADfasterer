{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\glyphs\\GlyphLevelsAndWeights.vue?vue&type=style&index=0&id=46f618e8&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\glyphs\\GlyphLevelsAndWeights.vue","mtime":1745241597301},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmwtZ2x5cGgtbGV2ZWwtYW5kLXdlaWdodHMtbm90ZSB7DQogIGdyaWQtY29sdW1uOiAxIC8gNTsNCn0NCg=="},{"version":3,"sources":["GlyphLevelsAndWeights.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsjBA;AACA;AACA","file":"GlyphLevelsAndWeights.vue","sourceRoot":"src/components/tabs/glyphs","sourcesContent":["<script>\r\nimport SliderComponent from \"@/components/SliderComponent\";\r\nimport ToggleButton from \"@/components/ToggleButton\";\r\n\r\nexport default {\r\n  name: \"GlyphLevelsAndWeights\",\r\n  components: {\r\n    ToggleButton,\r\n    SliderComponent\r\n  },\r\n  data() {\r\n    return {\r\n      perkShopVisible: false,\r\n      penaltyVisible: false,\r\n      rowVisible: false,\r\n      achievementVisible: false,\r\n      showAutoAdjustWeights: false,\r\n      isAutoAdjustWeightsOn: false,\r\n      factors: getGlyphLevelInputs(),\r\n      shardsGained: 0,\r\n      weights: Object.assign({}, player.celestials.effarig.glyphWeights),\r\n      rows: 3,\r\n    };\r\n  },\r\n  computed: {\r\n    gridStyle() {\r\n      // Column specifications: {factor_name, math_operator, factor_value, weight_adjustment, padding}\r\n      const columns = this.adjustVisible ? \"30% 3% 17% 48% 2%\" : \"80% 5% 15%\";\r\n      return {\r\n        width: \"100%\",\r\n        \"-ms-grid-columns\": columns,\r\n        \"grid-template-columns\": columns,\r\n        \"grid-auto-rows\": \"1fr\",\r\n      };\r\n    },\r\n    adjustOutlineStyle() {\r\n      const rows = 5 + (this.showAutoAdjustWeights ? 1 : 0);\r\n      return `grid-row: 1 / ${rows + 1}; -ms-grid-row: 1; -ms-grid-row-span: ${rows};`;\r\n    },\r\n    formatPerkShop() {\r\n      return formatPercents(this.factors.perkShop - 1, 1);\r\n    },\r\n    sliderProps() {\r\n      return {\r\n        min: 0,\r\n        max: 100,\r\n        interval: 1,\r\n        disabled: this.isAutoAdjustWeightsOn,\r\n        \"dot-width\": \"2.2rem\",\r\n        \"dot-height\": \"1.6rem\",\r\n        width: \"13.5rem\",\r\n        tooltip: false,\r\n        \"value-in-dot\": true,\r\n        \"plus-minus-buttons\": true,\r\n        \"dot-class\": \"c-glyph-levels-and-weights__slider-handle\",\r\n        \"bg-class\": \"c-glyph-levels-and-weights__slider-bg\",\r\n        \"process-class\": \"c-glyph-levels-and-weights__slider-process\"\r\n      };\r\n    },\r\n    totalWeights() {\r\n      return this.weights.ep + this.weights.repl + this.weights.dt + this.weights.eternities;\r\n    },\r\n    // The order that elements gets pushed in this method determines the display order\r\n    visibleRows() {\r\n      const rows = [\"ep\", \"replicanti\", \"dt\"];\r\n      if (this.eternityVisible) rows.push(\"eternities\");\r\n      if (this.perkShopVisible) rows.push(\"perk shop\");\r\n      if (this.shardVisible) rows.push(\"shards\");\r\n      if (this.singularityVisible) rows.push(\"singularities\");\r\n      if (this.penaltyVisible) rows.push(\"instability\");\r\n      if (this.rowVisible) rows.push(\"upgrade rows\");\r\n      if (this.achievementVisible) rows.push(\"achievements\");\r\n      rows.push(\"level\");\r\n      rows.push(\"info\");\r\n      rows.push(\"info2\");\r\n      return rows;\r\n    },\r\n    adjustVisible() {\r\n      return EffarigUnlock.adjuster.isUnlocked;\r\n    },\r\n    eternityVisible() {\r\n      return RealityUpgrade(18).isBought;\r\n    },\r\n    shardVisible() {\r\n      return Ra.unlocks.relicShardGlyphLevelBoost.canBeApplied && this.shardsGained !== 0;\r\n    },\r\n    singularityVisible() {\r\n      return SingularityMilestone.glyphLevelFromSingularities.canBeApplied;\r\n    }\r\n  },\r\n  watch: {\r\n    isAutoAdjustWeightsOn(newValue) {\r\n      player.celestials.effarig.autoAdjustGlyphWeights = newValue;\r\n    }\r\n  },\r\n  created() {\r\n    this.glyphWeightFields = Object.keys(player.celestials.effarig.glyphWeights);\r\n    // Private data to deal with weight allocation\r\n    this.resetSavedWeights();\r\n    // Used to debounce this row disappearing\r\n    this.lastInstability = 0;\r\n    if (Glyphs.factorsOpen) this.$parent.$emit(\"openrequest\");\r\n  },\r\n  mounted() {\r\n    // Effarig unlock sets a flag to open this dropdown\r\n    if (this.$viewModel.tabs.reality.openGlyphWeights) {\r\n      this.$viewModel.tabs.reality.openGlyphWeights = false;\r\n      this.$parent.$emit(\"openrequest\");\r\n    }\r\n  },\r\n  destroyed() {\r\n    // Matches substring since there are states for opening in progress, all of which have \"open\" as a substring\r\n    Glyphs.factorsOpen = this.$parent.state.name.match(\"OPEN\") !== null;\r\n  },\r\n  methods: {\r\n    update() {\r\n      if (this.glyphWeightFields === undefined || this.$parent.state.name === \"CLOSED\") {\r\n        return;\r\n      }\r\n      const glyphFactors = getGlyphLevelInputs();\r\n      this.perkShopVisible = glyphFactors.perkShop !== 1;\r\n      this.rowVisible = glyphFactors.rowFactor > 0;\r\n      this.achievementVisible = glyphFactors.achievementFactor > 0;\r\n      if (glyphFactors.scalePenalty !== 1) {\r\n        this.penaltyVisible = true;\r\n        this.lastInstability = Date.now();\r\n      } else if (this.penaltyVisible) {\r\n        if (Date.now() - this.lastInstability > 2000) this.penaltyVisible = false;\r\n      }\r\n      this.rows = this.visibleRows.length;\r\n      if (this.adjustVisible && this.rows < 6) {\r\n        // Keep UI from getting crammed\r\n        this.rows = 6;\r\n      }\r\n      this.factors = glyphFactors;\r\n      this.shardsGained = Effarig.shardsGained;\r\n      let same = true;\r\n      this.glyphWeightFields.forEach(e => {\r\n        if (this.weights[e] !== player.celestials.effarig.glyphWeights[e]) same = false;\r\n        this.weights[e] = player.celestials.effarig.glyphWeights[e];\r\n      });\r\n      if (!same) {\r\n        // In this case, some other code reset the weights, probably (hopefully)\r\n        // the achievement reward that automatically adjusts weights.\r\n        this.resetSavedWeights();\r\n      }\r\n      this.showAutoAdjustWeights = Achievement(165).isUnlocked;\r\n      this.isAutoAdjustWeightsOn = player.celestials.effarig.autoAdjustGlyphWeights;\r\n    },\r\n    rowStyle(factor) {\r\n      const row = this.visibleRows.findIndex(r => r === factor) + 1;\r\n      // A bit of a hack, if we can't find the resource then factor is actually a number for the padding div\r\n      if (row === 0) return this.makeRowStyle(factor);\r\n      return this.makeRowStyle(row);\r\n    },\r\n    formatFactor(x) {\r\n      // Not applied to + perks since it's always whole; for factors < 1, the slice makes the\r\n      // factor be fixed point.\r\n      return Notations.current.isPainful || x > 1000\r\n        ? format(x, 2, 2)\r\n        : x.toPrecision(5).slice(0, 6);\r\n    },\r\n    formatLevel(x) {\r\n      return x > 1000\r\n        ? formatInt(Math.floor(x))\r\n        : format(x, 2, 4);\r\n    },\r\n    makeRowStyle(r) {\r\n      return {\r\n        \"grid-row\": r,\r\n        \"-ms-grid-row\": r,\r\n      };\r\n    },\r\n    resetWeightsButtonClass() {\r\n      return {\r\n        \"c-glyph-levels-and-weights__reset-btn\": true,\r\n        \"c-glyph-levels-and-weights__reset-btn-clickable\": !this.isAutoAdjustWeightsOn\r\n      };\r\n    },\r\n    resetWeights() {\r\n      this.glyphWeightFields.forEach(e => player.celestials.effarig.glyphWeights[e] = 25);\r\n      this.resetSavedWeights();\r\n    },\r\n    adjustSlider(which, value) {\r\n      if (this.weights[which] === value) return;\r\n      if (which !== this.lastAdjusted) {\r\n        this.resetSavedWeights();\r\n        // If we make the saved weight for the current adjustment be 0, there's less math to do later\r\n        this.savedWeights[which] = 0;\r\n        this.lastAdjusted = which;\r\n      }\r\n      const oldSum = this.weights.ep + this.weights.repl + this.weights.dt + this.weights.eternities;\r\n      const oldValue = this.weights[which];\r\n      const restSum = oldSum - oldValue;\r\n      if (restSum + value > 100) {\r\n        // We attempt to reduce other weights proportionally. But, we want to keep everything as\r\n        // integer values. So, a single increment will change just one other weight. In order for\r\n        // the sum to be 100:   100 == value + restSum * k   --->  k == (100-value)/restSum\r\n        // Except we use the saved values instead of the current ones:\r\n        const savedRestSum =\r\n          this.savedWeights.ep +\r\n          this.savedWeights.repl +\r\n          this.savedWeights.dt +\r\n          this.savedWeights.eternities;\r\n        const reduceRatio = (100 - value) / savedRestSum;\r\n        const newWeights = [];\r\n        this.glyphWeightFields.forEach(x => {\r\n          if (x !== which) {\r\n            newWeights.push(this.savedWeights[x] * reduceRatio);\r\n          }\r\n        });\r\n        roundPreservingSum(newWeights);\r\n        this.glyphWeightFields.forEach(x => {\r\n          if (x !== which) {\r\n            player.celestials.effarig.glyphWeights[x] = newWeights.shift();\r\n          }\r\n        });\r\n      }\r\n      player.celestials.effarig.glyphWeights[which] = value;\r\n    },\r\n    resetSavedWeights() {\r\n      this.savedWeights = Object.assign({}, player.celestials.effarig.glyphWeights);\r\n      this.lastAdjusted = null;\r\n    },\r\n    factorString(source) {\r\n      const name = this.adjustVisible ? source.name.substring(0, 4) : source.name;\r\n      return `${format(source.coeff, 2, 4)}×${name}^${format(source.exp, 2, 3)}`;\r\n    }\r\n  }\r\n};\r\n\r\n// This function takes an array of data (3 elements), which add up to an integer, but\r\n// may not be whole numbers themselves, and tries to round them so that the sum is the same\r\n// and so that the difference from the original is small. It does this by finding the one\r\n// that's closest to an integer, rounding it, and then distributing that error to the others.\r\nfunction roundPreservingSum(data) {\r\n  for (let idx = 0; idx < data.length; ++idx) {\r\n    // Find the thing that's not an integer but is closest to an integer:\r\n    let closest = -1;\r\n    let closestDistance = 1000;\r\n    let nonIntegers = 0;\r\n    for (let s = 0; s < data.length; ++s) {\r\n      const dist = Math.abs(data[s] - Math.round(data[s]));\r\n      if (dist !== 0) {\r\n        ++nonIntegers;\r\n        if (dist < closestDistance) {\r\n          closest = s;\r\n          closestDistance = dist;\r\n        }\r\n      }\r\n    }\r\n    // Everything is an integer\r\n    if (closest === -1) break;\r\n    let err = data[closest] - Math.round(data[closest]);\r\n    data[closest] = Math.round(data[closest]);\r\n    if (nonIntegers === 1) {\r\n      // Shouldn't happen, but a divide by 0 would be bad\r\n      break;\r\n    }\r\n    err /= (nonIntegers - 1);\r\n    for (let s = 0; s < data.length; ++s) {\r\n      if (data[s] !== Math.round(data[s])) {\r\n        // Closest is covered by this\r\n        data[s] += err;\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    ref=\"grid\"\r\n    :style=\"gridStyle\"\r\n    class=\"l-glyph-levels-and-weights c-glyph-levels-and-weights\"\r\n  >\r\n    <!-- Put down a placeholder div to keep the adjuster from getting cramped -->\r\n    <div\r\n      v-if=\"adjustVisible\"\r\n      :style=\"makeRowStyle(6)\"\r\n    />\r\n    <div\r\n      :style=\"rowStyle('ep')\"\r\n      class=\"l-glyph-levels-and-weights__factor\"\r\n    >\r\n      {{ factorString(factors.ep) }}\r\n    </div>\r\n    <div\r\n      :style=\"rowStyle('ep')\"\r\n      class=\"l-glyph-levels-and-weights__factor-val\"\r\n    >\r\n      {{ formatFactor(factors.ep.value) }}\r\n    </div>\r\n    <div\r\n      :style=\"rowStyle('replicanti')\"\r\n      class=\"l-glyph-levels-and-weights__factor\"\r\n    >\r\n      {{ factorString(factors.repl) }}\r\n    </div>\r\n    <div\r\n      :style=\"rowStyle('replicanti')\"\r\n      class=\"l-glyph-levels-and-weights__operator\"\r\n    >\r\n      ×\r\n    </div>\r\n    <div\r\n      :style=\"rowStyle('replicanti')\"\r\n      class=\"l-glyph-levels-and-weights__factor-val\"\r\n    >\r\n      {{ formatFactor(factors.repl.value) }}\r\n    </div>\r\n    <div\r\n      :style=\"rowStyle('dt')\"\r\n      class=\"l-glyph-levels-and-weights__factor\"\r\n    >\r\n      {{ factorString(factors.dt) }}\r\n    </div>\r\n    <div\r\n      :style=\"rowStyle('dt')\"\r\n      class=\"l-glyph-levels-and-weights__operator\"\r\n    >\r\n      ×\r\n    </div>\r\n    <div\r\n      :style=\"rowStyle('dt')\"\r\n      class=\"l-glyph-levels-and-weights__factor-val\"\r\n    >\r\n      {{ formatFactor(factors.dt.value) }}\r\n    </div>\r\n    <template v-if=\"eternityVisible\">\r\n      <div\r\n        :style=\"rowStyle('eternities')\"\r\n        class=\"l-glyph-levels-and-weights__factor\"\r\n      >\r\n        {{ factorString(factors.eter) }}\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('eternities')\"\r\n        class=\"l-glyph-levels-and-weights__operator\"\r\n      >\r\n        ×\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('eternities')\"\r\n        class=\"l-glyph-levels-and-weights__factor-val\"\r\n      >\r\n        {{ formatFactor(factors.eter.value) }}\r\n      </div>\r\n    </template>\r\n    <template v-if=\"perkShopVisible\">\r\n      <div\r\n        :style=\"rowStyle('perk shop')\"\r\n        class=\"l-glyph-levels-and-weights__factor\"\r\n      >\r\n        Teresa's Perk shop\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('perk shop')\"\r\n        class=\"l-glyph-levels-and-weights__operator\"\r\n      >\r\n        +\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('perk shop')\"\r\n        class=\"l-glyph-levels-and-weights__factor-val\"\r\n      >\r\n        {{ formatPerkShop }}\r\n      </div>\r\n    </template>\r\n    <template v-if=\"shardVisible\">\r\n      <div\r\n        :style=\"rowStyle('shards')\"\r\n        class=\"l-glyph-levels-and-weights__factor\"\r\n      >\r\n        {{ formatInt(100) }}×Shards{{ formatPow(2) }}\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('shards')\"\r\n        class=\"l-glyph-levels-and-weights__operator\"\r\n      >\r\n        +\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('shards')\"\r\n        class=\"l-glyph-levels-and-weights__factor-val\"\r\n      >\r\n        {{ formatFactor(factors.shardFactor) }}\r\n      </div>\r\n    </template>\r\n    <template v-if=\"singularityVisible\">\r\n      <div\r\n        :style=\"rowStyle('singularities')\"\r\n        class=\"l-glyph-levels-and-weights__factor\"\r\n      >\r\n        Singularities\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('singularities')\"\r\n        class=\"l-glyph-levels-and-weights__operator\"\r\n      >\r\n        ×\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('singularities')\"\r\n        class=\"l-glyph-levels-and-weights__factor-val\"\r\n      >\r\n        {{ formatFactor(factors.singularityEffect) }}\r\n      </div>\r\n    </template>\r\n    <template v-if=\"penaltyVisible\">\r\n      <div\r\n        :style=\"rowStyle('instability')\"\r\n        class=\"l-glyph-levels-and-weights__factor\"\r\n      >\r\n        Instability\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('instability')\"\r\n        class=\"l-glyph-levels-and-weights__operator\"\r\n      >\r\n        /\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('instability')\"\r\n        class=\"l-glyph-levels-and-weights__factor-val\"\r\n      >\r\n        {{ formatFactor(factors.scalePenalty) }}\r\n      </div>\r\n    </template>\r\n    <template v-if=\"rowVisible\">\r\n      <div\r\n        :style=\"rowStyle('upgrade rows')\"\r\n        class=\"l-glyph-levels-and-weights__factor\"\r\n      >\r\n        Upgrade Rows\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('upgrade rows')\"\r\n        class=\"l-glyph-levels-and-weights__operator\"\r\n      >\r\n        +\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('upgrade rows')\"\r\n        class=\"l-glyph-levels-and-weights__factor-val\"\r\n      >\r\n        {{ formatInt(factors.rowFactor) }}\r\n      </div>\r\n    </template>\r\n    <template v-if=\"achievementVisible\">\r\n      <div\r\n        :style=\"rowStyle('achievements')\"\r\n        class=\"l-glyph-levels-and-weights__factor\"\r\n      >\r\n        Achievements\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('achievements')\"\r\n        class=\"l-glyph-levels-and-weights__operator\"\r\n      >\r\n        +\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('achievements')\"\r\n        class=\"l-glyph-levels-and-weights__factor-val\"\r\n      >\r\n        {{ formatInt(factors.achievementFactor) }}\r\n      </div>\r\n    </template>\r\n    <div\r\n      :style=\"rowStyle('level')\"\r\n      class=\"l-glyph-levels-and-weights__factor\"\r\n    >\r\n      Final Level\r\n    </div>\r\n    <div\r\n      :style=\"rowStyle('level')\"\r\n      class=\"l-glyph-levels-and-weights__factor-val\"\r\n    >\r\n      {{ formatLevel(factors.actualLevel) }}\r\n    </div>\r\n    <div\r\n      :style=\"rowStyle('info')\"\r\n      class=\"l-glyph-levels-and-weights__factor l-glyph-level-and-weights-note\"\r\n    >\r\n      Note: All resources here are log10 of their actual values.\r\n    </div>\r\n    <div\r\n      :style=\"rowStyle('info2')\"\r\n      class=\"l-glyph-levels-and-weights__factor l-glyph-level-and-weights-note\"\r\n    >\r\n      EP, Replicanti, and DT use their highest values this Reality.\r\n    </div>\r\n    <template v-if=\"adjustVisible\">\r\n      <div\r\n        :style=\"adjustOutlineStyle\"\r\n        class=\"l-glyph-levels-and-weights__adjust-outline\"\r\n      />\r\n      <div class=\"l-glyph-levels-and-weights__adjust-label\">\r\n        Adjust weights\r\n        <div class=\"l-glyph-levels-and-weights__reset-btn-outer\">\r\n          <div\r\n            :class=\"resetWeightsButtonClass()\"\r\n            @click=\"resetWeights\"\r\n          >\r\n            Reset\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"l-glyph-levels-and-weights__adjust-auto\">\r\n        <ToggleButton\r\n          v-if=\"showAutoAdjustWeights\"\r\n          v-model=\"isAutoAdjustWeightsOn\"\r\n          class=\"c-glyph-levels-and-weights__auto-btn\"\r\n          label=\"Auto adjustment:\"\r\n        />\r\n      </div>\r\n      <div\r\n        class=\"l-glyph-levels-and-weights__slider\"\r\n        :style=\"rowStyle('ep')\"\r\n      >\r\n        <SliderComponent\r\n          v-bind=\"sliderProps\"\r\n          :value=\"weights.ep\"\r\n          :width=\"'100%'\"\r\n          @input=\"adjustSlider('ep', $event)\"\r\n        />\r\n      </div>\r\n      <div\r\n        class=\"l-glyph-levels-and-weights__slider\"\r\n        :style=\"rowStyle('replicanti')\"\r\n      >\r\n        <SliderComponent\r\n          v-bind=\"sliderProps\"\r\n          :value=\"weights.repl\"\r\n          :width=\"'100%'\"\r\n          @input=\"adjustSlider('repl', $event)\"\r\n        />\r\n      </div>\r\n      <div\r\n        class=\"l-glyph-levels-and-weights__slider\"\r\n        :style=\"rowStyle('dt')\"\r\n      >\r\n        <SliderComponent\r\n          v-bind=\"sliderProps\"\r\n          :value=\"weights.dt\"\r\n          :width=\"'100%'\"\r\n          @input=\"adjustSlider('dt', $event)\"\r\n        />\r\n      </div>\r\n      <div\r\n        class=\"l-glyph-levels-and-weights__slider\"\r\n        :style=\"rowStyle('eternities')\"\r\n      >\r\n        <SliderComponent\r\n          v-bind=\"sliderProps\"\r\n          :value=\"weights.eternities\"\r\n          :width=\"'100%'\"\r\n          @input=\"adjustSlider('eternities', $event)\"\r\n        />\r\n      </div>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.l-glyph-level-and-weights-note {\r\n  grid-column: 1 / 5;\r\n}\r\n</style>\r\n"]}]}