{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\automator\\AutomatorDocs.vue?vue&type=style&index=0&id=26257653&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\automator\\AutomatorDocs.vue","mtime":1745241597068},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmwtYXV0b21hdG9yX19leHBhbmQtY29ybmVyIHsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICByaWdodDogMDsNCn0NCg0KLmwtYXV0b21hdG9yX19zY3JpcHQtbmFtZXMgew0KICBmbGV4LWdyb3c6IDE7DQogIGRpc3BsYXk6IGZsZXg7DQogIGZsZXgtZGlyZWN0aW9uOiByb3c7DQogIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5Ow0KICBhbGlnbi1pdGVtczogY2VudGVyOw0KfQ0KDQoubC1hdXRvbWF0b3JfX3NjcmlwdHMtZHJvcGRvd24gew0KICB3aWR0aDogMTAwJTsNCiAgbWFyZ2luOiAwLjRyZW07DQogIHVzZXItc2VsZWN0OiBub25lOw0KfQ0KDQoubC1hdXRvbWF0b3JfX3JlbmFtZS1pbnB1dCB7DQogIHdpZHRoOiAxMDAlOw0KICBoZWlnaHQ6IGNhbGMoMnJlbSArIDFyZW0gLyAzIC0gdmFyKC0tdmFyLWJvcmRlci13aWR0aCwgMHJlbSkgKiAyKTsNCiAgYm9yZGVyOiB2YXIoLS12YXItYm9yZGVyLXdpZHRoLCAwLjJyZW0pIHNvbGlkIHZhcigtLWNvbG9yLXJlYWxpdHktbGlnaHQpOw0KICBib3JkZXItcmFkaXVzOiB2YXIoLS12YXItYm9yZGVyLXJhZGl1cywgMC4zcmVtKTsNCiAgbWFyZ2luOiAwLjRyZW07DQogIHBhZGRpbmc6IDAuNHJlbTsNCn0NCg0KLmMtYXV0b21hdG9yX19yZW5hbWUtaW5wdXQgew0KICBmb250LWZhbWlseTogVHlwZXdyaXRlcjsNCiAgZm9udC1zaXplOiAxLjJyZW07DQogIGNvbG9yOiB2YXIoLS1jb2xvci1hdXRvbWF0b3ItZG9jcy1mb250KTsNCiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3ItYXV0b21hdG9yLWNvbnRyb2xzLWFjdGl2ZSk7DQp9DQoNCi5jLWF1dG9tYXRvcl9fYnV0dG9uLS1hY3RpdmUgew0KICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvci1hdXRvbWF0b3ItY29udHJvbHMtYWN0aXZlKTsNCiAgYm9yZGVyLWNvbG9yOiB2YXIoLS1jb2xvci1yZWFsaXR5LWxpZ2h0KTsNCn0NCg0KLmMtYXV0b21hdG9yX19zdGF0dXMtdGV4dCB7DQogIGZvbnQtc2l6ZTogMS41cmVtOw0KICBmb250LXdlaWdodDogYm9sZDsNCiAgY29sb3I6IHZhcigtLWNvbG9yLXJlYWxpdHkpOw0KICBwYWRkaW5nOiAwIDAuNXJlbTsNCn0NCg0KLmMtYXV0b21hdG9yX19zdGF0dXMtdGV4dC0tc21hbGwgew0KICBmb250LXNpemU6IDEuMXJlbTsNCn0NCg0KLmMtYXV0b21hdG9yX19zdGF0dXMtdGV4dC0tZXJyb3Igew0KICBjb2xvcjogdmFyKC0tY29sb3ItYmFkKTsNCiAgY3Vyc29yOiBhdXRvOw0KfQ0KDQouYy1sb25nLW5hbWUtYm94IHsNCiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3ItYXV0b21hdG9yLWVycm9yLWJhY2tncm91bmQpOw0KICBib3JkZXItY29sb3I6IHZhcigtLWNvbG9yLWF1dG9tYXRvci1lcnJvci1vdXRsaW5lKTsNCn0NCg=="},{"version":3,"sources":["AutomatorDocs.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmXA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"AutomatorDocs.vue","sourceRoot":"src/components/tabs/automator","sourcesContent":["<script>\r\nimport { AUTOMATOR_TYPE } from \"@/core/automator/automator-backend\";\r\nimport AutomatorBlocks from \"./AutomatorBlocks\";\r\nimport AutomatorButton from \"./AutomatorButton\";\r\nimport AutomatorDataTransferPage from \"./AutomatorDataTransferPage\";\r\nimport AutomatorDefinePage from \"./AutomatorDefinePage\";\r\nimport AutomatorDocsCommandList from \"./AutomatorDocsCommandList\";\r\nimport AutomatorDocsIntroPage from \"./AutomatorDocsIntroPage\";\r\nimport AutomatorDocsTemplateList from \"./AutomatorDocsTemplateList\";\r\nimport AutomatorErrorPage from \"./AutomatorErrorPage\";\r\nimport AutomatorEventLog from \"./AutomatorEventLog\";\r\nimport AutomatorScriptDropdownEntryList from \"./AutomatorScriptDropdownEntryList\";\r\nimport ExpandingControlBox from \"@/components/ExpandingControlBox\";\r\n\r\nexport const AutomatorPanels = {\r\n  INTRO_PAGE: 0,\r\n  COMMANDS: 1,\r\n  ERRORS: 2,\r\n  EVENTS: 3,\r\n  DATA_TRANSFER: 4,\r\n  CONSTANTS: 5,\r\n  TEMPLATES: 6,\r\n  BLOCKS: 7\r\n};\r\n\r\nexport default {\r\n  name: \"AutomatorDocs\",\r\n  components: {\r\n    AutomatorButton,\r\n    AutomatorDocsCommandList,\r\n    AutomatorErrorPage,\r\n    AutomatorEventLog,\r\n    AutomatorDataTransferPage,\r\n    AutomatorBlocks,\r\n    AutomatorDocsIntroPage,\r\n    AutomatorDocsTemplateList,\r\n    AutomatorDefinePage,\r\n    AutomatorScriptDropdownEntryList,\r\n    ExpandingControlBox,\r\n  },\r\n  data() {\r\n    return {\r\n      isBlock: false,\r\n      infoPaneID: 1,\r\n      errorCount: 0,\r\n      editingName: false,\r\n      isNameTooLong: false,\r\n      scripts: [],\r\n      runningScriptID: 0,\r\n      totalChars: 0,\r\n      scriptCount: 0,\r\n      canMakeNewScript: true\r\n    };\r\n  },\r\n  computed: {\r\n    fullScreen: {\r\n      get() {\r\n        return this.$viewModel.tabs.reality.automator.fullScreen;\r\n      },\r\n      set(value) {\r\n        this.$viewModel.tabs.reality.automator.fullScreen = value;\r\n        AutomatorData.isEditorFullscreen = value;\r\n      }\r\n    },\r\n    fullScreenIconClass() {\r\n      return this.fullScreen ? \"fa-compress-arrows-alt\" : \"fa-expand-arrows-alt\";\r\n    },\r\n    fullScreenTooltip() {\r\n      return this.fullScreen ? \"Exit full screen\" : \"Expand to full screen\";\r\n    },\r\n    errorTooltip() {\r\n      return `Your script has ${quantify(\"error\", this.errorCount)}`;\r\n    },\r\n    nameTooltip() {\r\n      return this.isNameTooLong\r\n        ? `Names cannot be longer than ${formatInt(AutomatorData.MAX_ALLOWED_SCRIPT_NAME_LENGTH)} characters!`\r\n        : \"\";\r\n    },\r\n    currentScriptID: {\r\n      get() {\r\n        return this.$viewModel.tabs.reality.automator.editorScriptID;\r\n      },\r\n      set(value) {\r\n        this.$viewModel.tabs.reality.automator.editorScriptID = value;\r\n        if (AutomatorTextUI.editor) AutomatorTextUI.editor.performLint();\r\n      }\r\n    },\r\n    currentScriptContent() {\r\n      return player.reality.automator.scripts[this.currentScriptID].content;\r\n    },\r\n    currentScript() {\r\n      return CodeMirror.Doc(this.currentScriptContent, \"automato\").getValue();\r\n    },\r\n    errorStyle() {\r\n      return {\r\n        \"background-color\": this.errorCount === 0 ? \"\" : \"red\"\r\n      };\r\n    },\r\n    maxTotalChars() {\r\n      return AutomatorData.MAX_ALLOWED_TOTAL_CHARACTERS;\r\n    },\r\n    maxScriptCount() {\r\n      return AutomatorData.MAX_ALLOWED_SCRIPT_COUNT;\r\n    },\r\n    panelEnum() {\r\n      return AutomatorPanels;\r\n    },\r\n    importTooltip() {\r\n      return this.canMakeNewScript\r\n        ? \"Import single automator script or data\"\r\n        : \"You have too many scripts to import another!\";\r\n    },\r\n    currentEditorScriptName() {\r\n      return this.scripts.find(s => s.id === this.currentScriptID).name;\r\n    },\r\n  },\r\n  watch: {\r\n    infoPaneID(newValue) {\r\n      player.reality.automator.currentInfoPane = newValue;\r\n    }\r\n  },\r\n  created() {\r\n    this.on$(GAME_EVENT.GAME_LOAD, () => this.onGameLoad());\r\n    this.on$(GAME_EVENT.AUTOMATOR_SAVE_CHANGED, () => this.onGameLoad());\r\n    this.on$(GAME_EVENT.AUTOMATOR_TYPE_CHANGED, () => this.openMatchingAutomatorTypeDocs());\r\n    this.onGameLoad();\r\n  },\r\n  destroyed() {\r\n    this.fullScreen = false;\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isBlock = player.reality.automator.type === AUTOMATOR_TYPE.BLOCK;\r\n      this.infoPaneID = player.reality.automator.currentInfoPane;\r\n      this.errorCount = AutomatorData.currentErrors().length;\r\n      this.runningScriptID = AutomatorBackend.state.topLevelScript;\r\n      this.totalChars = AutomatorData.totalScriptCharacters();\r\n      this.scriptCount = Object.keys(player.reality.automator.scripts).length;\r\n      this.canMakeNewScript = this.scriptCount < this.maxScriptCount;\r\n      this.currentScriptID = player.reality.automator.state.editorScript;\r\n    },\r\n    exportScript() {\r\n      const toExport = AutomatorBackend.exportCurrentScriptContents();\r\n      if (toExport) {\r\n        copyToClipboard(toExport);\r\n        GameUI.notify.automator(\"Exported current Automator script to your clipboard\");\r\n      } else {\r\n        GameUI.notify.error(\"Could not export blank Automator script!\");\r\n      }\r\n    },\r\n    importScript() {\r\n      if (!this.canMakeNewScript) return;\r\n      Modal.importScriptData.show();\r\n    },\r\n    onGameLoad() {\r\n      this.updateCurrentScriptID();\r\n      this.updateScriptList();\r\n      this.fixAutomatorTypeDocs();\r\n    },\r\n    updateScriptList() {\r\n      this.scripts = Object.values(player.reality.automator.scripts).map(script => ({\r\n        id: script.id,\r\n        name: script.name,\r\n      }));\r\n    },\r\n    updateCurrentScriptID() {\r\n      AutomatorData.recalculateErrors();\r\n      const storedScripts = player.reality.automator.scripts;\r\n      this.currentScriptID = player.reality.automator.state.editorScript;\r\n      // This shouldn't happen if things are loaded in the right order, but might as well be sure.\r\n      if (storedScripts[this.currentScriptID] === undefined) {\r\n        this.currentScriptID = Number(Object.keys(storedScripts)[0]);\r\n        player.reality.automator.state.editorScript = this.currentScriptID;\r\n        AutomatorData.clearUndoData();\r\n      }\r\n\r\n      // This gets checked whenever the editor pane is foricibly changed to a different script, which may or may not\r\n      // have block-parsable commands. It additionally also gets checked on new script creation, where we need to\r\n      // suppress the error modal instead\r\n      if (this.isBlock && BlockAutomator.hasUnparsableCommands(this.currentScript) && this.currentScript !== \"\") {\r\n        AutomatorBackend.changeModes(this.currentScriptID);\r\n        Modal.message.show(\"Some script commands were unrecognizable - defaulting to text editor.\");\r\n      }\r\n\r\n      this.$nextTick(() => {\r\n        BlockAutomator.updateEditor(this.currentScript);\r\n        if (!this.isBlock && AutomatorTextUI.editor) AutomatorTextUI.editor.performLint();\r\n      });\r\n    },\r\n    fixAutomatorTypeDocs() {\r\n      const automator = player.reality.automator;\r\n      if (automator.currentInfoPane === AutomatorPanels.COMMANDS && automator.type === AUTOMATOR_TYPE.BLOCK) {\r\n        this.openMatchingAutomatorTypeDocs();\r\n      }\r\n      if (automator.currentInfoPane === AutomatorPanels.BLOCKS && automator.type === AUTOMATOR_TYPE.TEXT) {\r\n        this.openMatchingAutomatorTypeDocs();\r\n      }\r\n    },\r\n    openMatchingAutomatorTypeDocs() {\r\n      const automator = player.reality.automator;\r\n      automator.currentInfoPane = automator.type === AUTOMATOR_TYPE.BLOCK\r\n        ? AutomatorPanels.BLOCKS\r\n        : AutomatorPanels.COMMANDS;\r\n    },\r\n    rename() {\r\n      this.editingName = true;\r\n      this.$nextTick(() => {\r\n        this.updateCurrentScriptID();\r\n        this.$refs.renameInput.value = player.reality.automator.scripts[this.currentScriptID].name;\r\n        this.$refs.renameInput.focus();\r\n      });\r\n    },\r\n    deleteScript() {\r\n      Modal.automatorScriptDelete.show({ scriptID: this.currentScriptID });\r\n    },\r\n    nameEdited() {\r\n      // Trim off leading and trailing whitespace\r\n      const trimmed = this.$refs.renameInput.value.match(/^\\s*(.*?)\\s*$/u);\r\n      let newName = \"\";\r\n      if (trimmed.length === 2 && trimmed[1].length > 0) newName = trimmed[1];\r\n\r\n      if (newName.length > AutomatorData.MAX_ALLOWED_SCRIPT_NAME_LENGTH) {\r\n        this.isNameTooLong = true;\r\n        return;\r\n      }\r\n      this.isNameTooLong = false;\r\n      player.reality.automator.scripts[this.currentScriptID].name = newName;\r\n      this.updateScriptList();\r\n      this.$nextTick(() => this.editingName = false);\r\n    },\r\n    activePanelClass(id) {\r\n      return {\r\n        \"c-automator__button--active\": this.infoPaneID === id,\r\n      };\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-automator-pane\">\r\n    <div class=\"c-automator__controls l-automator__controls\">\r\n      <div class=\"l-automator-button-row\">\r\n        <AutomatorButton\r\n          v-tooltip=\"'Automator Introduction'\"\r\n          class=\"fa-circle-info\"\r\n          :class=\"activePanelClass(panelEnum.INTRO_PAGE)\"\r\n          @click=\"infoPaneID = panelEnum.INTRO_PAGE\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'Scripting Information'\"\r\n          class=\"fa-list\"\r\n          :class=\"activePanelClass(panelEnum.COMMANDS)\"\r\n          @click=\"infoPaneID = panelEnum.COMMANDS\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"errorTooltip\"\r\n          :style=\"errorStyle\"\r\n          class=\"fa-exclamation-triangle\"\r\n          :class=\"activePanelClass(panelEnum.ERRORS)\"\r\n          @click=\"infoPaneID = panelEnum.ERRORS\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'Extended Data Transfer'\"\r\n          class=\"fa-window-restore\"\r\n          :class=\"activePanelClass(panelEnum.DATA_TRANSFER)\"\r\n          @click=\"infoPaneID = panelEnum.DATA_TRANSFER\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'View recently executed commands'\"\r\n          class=\"fa-eye\"\r\n          :class=\"activePanelClass(panelEnum.EVENTS)\"\r\n          @click=\"infoPaneID = panelEnum.EVENTS\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'Modify defined constants'\"\r\n          class=\"fa-book\"\r\n          :class=\"activePanelClass(panelEnum.CONSTANTS)\"\r\n          @click=\"infoPaneID = panelEnum.CONSTANTS\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'Template Creator List'\"\r\n          class=\"fa-file-code\"\r\n          :class=\"activePanelClass(panelEnum.TEMPLATES)\"\r\n          @click=\"infoPaneID = panelEnum.TEMPLATES\"\r\n        />\r\n        <AutomatorButton\r\n          v-if=\"isBlock\"\r\n          v-tooltip=\"'Command menu for Block editor mode'\"\r\n          class=\"fa-cubes\"\r\n          :class=\"activePanelClass(panelEnum.BLOCKS)\"\r\n          @click=\"infoPaneID = panelEnum.BLOCKS\"\r\n        />\r\n        <span\r\n          v-if=\"fullScreen\"\r\n          class=\"c-automator__status-text c-automator__status-text--small\"\r\n          :class=\"{ 'c-automator__status-text--error' : totalChars > maxTotalChars }\"\r\n        >\r\n          Across all scripts: {{ formatInt(totalChars) }}/{{ formatInt(maxTotalChars) }}\r\n        </span>\r\n        <AutomatorButton\r\n          v-tooltip=\"fullScreenTooltip\"\r\n          :class=\"fullScreenIconClass\"\r\n          class=\"l-automator__expand-corner\"\r\n          @click=\"fullScreen = !fullScreen\"\r\n        />\r\n      </div>\r\n      <div class=\"l-automator-button-row\">\r\n        <AutomatorButton\r\n          v-tooltip=\"'Export single automator script'\"\r\n          class=\"fa-file-export\"\r\n          @click=\"exportScript\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"importTooltip\"\r\n          class=\"fa-file-import\"\r\n          :class=\"{ 'c-automator__status-text--error' : !canMakeNewScript }\"\r\n          @click=\"importScript\"\r\n        />\r\n        <div class=\"l-automator__script-names\">\r\n          <template v-if=\"!editingName\">\r\n            <ExpandingControlBox\r\n              class=\"l-automator__scripts-dropdown\"\r\n              :auto-close=\"true\"\r\n            >\r\n              <template #header>\r\n                <div class=\"c-automator-docs-script-select\">\r\n                  ▼ Current Script: {{ currentEditorScriptName }}\r\n                </div>\r\n              </template>\r\n              <template #dropdown>\r\n                <AutomatorScriptDropdownEntryList :key=\"scriptCount\" />\r\n              </template>\r\n            </ExpandingControlBox>\r\n            <AutomatorButton\r\n              v-tooltip=\"'Rename script'\"\r\n              class=\"far fa-edit\"\r\n              @click=\"rename\"\r\n            />\r\n          </template>\r\n          <input\r\n            v-else\r\n            ref=\"renameInput\"\r\n            v-tooltip=\"nameTooltip\"\r\n            class=\"l-automator__rename-input c-automator__rename-input\"\r\n            :class=\"{ 'c-long-name-box' : isNameTooLong }\"\r\n            @blur=\"nameEdited\"\r\n            @keyup.enter=\"$refs.renameInput.blur()\"\r\n          >\r\n        </div>\r\n        <AutomatorButton\r\n          v-tooltip=\"'Delete this script'\"\r\n          class=\"fas fa-trash\"\r\n          @click=\"deleteScript\"\r\n        />\r\n      </div>\r\n    </div>\r\n    <div class=\"c-automator-docs l-automator-pane__content\">\r\n      <AutomatorDocsIntroPage v-if=\"infoPaneID === panelEnum.INTRO_PAGE\" />\r\n      <AutomatorDocsCommandList v-else-if=\"infoPaneID === panelEnum.COMMANDS\" />\r\n      <AutomatorErrorPage v-else-if=\"infoPaneID === panelEnum.ERRORS\" />\r\n      <AutomatorEventLog v-else-if=\"infoPaneID === panelEnum.EVENTS\" />\r\n      <AutomatorDataTransferPage v-else-if=\"infoPaneID === panelEnum.DATA_TRANSFER\" />\r\n      <AutomatorDefinePage v-else-if=\"infoPaneID === panelEnum.CONSTANTS\" />\r\n      <AutomatorDocsTemplateList v-else-if=\"infoPaneID === panelEnum.TEMPLATES\" />\r\n      <AutomatorBlocks v-else-if=\"infoPaneID === panelEnum.BLOCKS\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.l-automator__expand-corner {\r\n  position: absolute;\r\n  right: 0;\r\n}\r\n\r\n.l-automator__script-names {\r\n  flex-grow: 1;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n}\r\n\r\n.l-automator__scripts-dropdown {\r\n  width: 100%;\r\n  margin: 0.4rem;\r\n  user-select: none;\r\n}\r\n\r\n.l-automator__rename-input {\r\n  width: 100%;\r\n  height: calc(2rem + 1rem / 3 - var(--var-border-width, 0rem) * 2);\r\n  border: var(--var-border-width, 0.2rem) solid var(--color-reality-light);\r\n  border-radius: var(--var-border-radius, 0.3rem);\r\n  margin: 0.4rem;\r\n  padding: 0.4rem;\r\n}\r\n\r\n.c-automator__rename-input {\r\n  font-family: Typewriter;\r\n  font-size: 1.2rem;\r\n  color: var(--color-automator-docs-font);\r\n  background-color: var(--color-automator-controls-active);\r\n}\r\n\r\n.c-automator__button--active {\r\n  background-color: var(--color-automator-controls-active);\r\n  border-color: var(--color-reality-light);\r\n}\r\n\r\n.c-automator__status-text {\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n  color: var(--color-reality);\r\n  padding: 0 0.5rem;\r\n}\r\n\r\n.c-automator__status-text--small {\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.c-automator__status-text--error {\r\n  color: var(--color-bad);\r\n  cursor: auto;\r\n}\r\n\r\n.c-long-name-box {\r\n  background-color: var(--color-automator-error-background);\r\n  border-color: var(--color-automator-error-outline);\r\n}\r\n</style>\r\n"]}]}