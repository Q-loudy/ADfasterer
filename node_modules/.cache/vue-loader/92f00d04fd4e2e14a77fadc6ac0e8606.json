{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\replicanti\\ReplicantiGainText.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\replicanti\\ReplicantiGainText.vue","mtime":1745241597429},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["ReplicantiGainText.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ReplicantiGainText.vue","sourceRoot":"src/components/tabs/replicanti","sourcesContent":["<script>\r\nexport default {\r\n  name: \"ReplicantiGainText\",\r\n  data() {\r\n    return {\r\n      remainingTimeText: \"\",\r\n      galaxyText: \"\"\r\n    };\r\n  },\r\n  methods: {\r\n    update() {\r\n      const updateRateMs = player.options.updateRate;\r\n      const ticksPerSecond = 1000 / updateRateMs;\r\n      const logGainFactorPerTick = Decimal.divide(getGameSpeedupForDisplay() * updateRateMs *\r\n        (Math.log(player.replicanti.chance + 1)), getReplicantiInterval());\r\n      const log10GainFactorPerTick = logGainFactorPerTick.dividedBy(Math.LN10);\r\n\r\n      // The uncapped factor is needed for galaxy speed calculations\r\n      const log10GainFactorPerTickUncapped = Decimal.divide(getGameSpeedupForDisplay() * updateRateMs *\r\n        (Math.log(player.replicanti.chance + 1)), getReplicantiInterval(false)).dividedBy(Math.LN10);\r\n\r\n      const replicantiAmount = Replicanti.amount;\r\n      const isAbove308 = Replicanti.isUncapped && replicantiAmount.log10() > LOG10_MAX_VALUE;\r\n\r\n      if (isAbove308) {\r\n        const postScale = Math.log10(ReplicantiGrowth.scaleFactor) / ReplicantiGrowth.scaleLog10;\r\n        const gainFactorPerSecond = logGainFactorPerTick\r\n          .times(postScale)\r\n          .plus(1)\r\n          .pow(ticksPerSecond / postScale);\r\n        // The calculations to estimate time to next milestone of OoM based on game state, assumes that uncapped\r\n        // replicanti growth scales as time^1/postScale, which turns out to be a reasonable approximation.\r\n        const milestoneStep = Pelle.isDoomed ? 100 : 1000;\r\n        const nextMilestone = Decimal.pow10(milestoneStep * Math.floor(replicantiAmount.log10() / milestoneStep + 1));\r\n        const coeff = Decimal.divide(updateRateMs / 1000, logGainFactorPerTick.times(postScale));\r\n        const timeToThousand = coeff.times(nextMilestone.divide(replicantiAmount).pow(postScale).minus(1));\r\n        // The calculation seems to choke and return zero if the time is too large, probably because of rounding issues\r\n        const timeEstimateText = timeToThousand.eq(0)\r\n          ? \"an extremely long time\"\r\n          : `${TimeSpan.fromSeconds(timeToThousand.toNumber())}`;\r\n        this.remainingTimeText = `You are gaining ${formatX(gainFactorPerSecond, 2, 1)} Replicanti per second` +\r\n          ` (${timeEstimateText} until ${format(nextMilestone)})`;\r\n      } else {\r\n        this.remainingTimeText = \"\";\r\n      }\r\n\r\n      const totalTime = LOG10_MAX_VALUE / (ticksPerSecond * log10GainFactorPerTick.toNumber());\r\n      let remainingTime = (LOG10_MAX_VALUE - replicantiAmount.log10()) /\r\n        (ticksPerSecond * log10GainFactorPerTick.toNumber());\r\n      if (remainingTime < 0) {\r\n        // If the cap is raised via Effarig Infinity but the player doesn't have TS192, this will be a negative number\r\n        remainingTime = 0;\r\n      }\r\n\r\n      const galaxiesPerSecond = log10GainFactorPerTickUncapped.times(ticksPerSecond / LOG10_MAX_VALUE);\r\n      const timeFromZeroRG = galaxies => 50 * Math.log((galaxies + 49.5) / 49.5);\r\n      let baseGalaxiesPerSecond, effectiveMaxRG, effectiveCurrentRG;\r\n      if (RealityUpgrade(6).isBought && !Pelle.isDoomed) {\r\n        baseGalaxiesPerSecond = galaxiesPerSecond.divide(RealityUpgrade(6).effectValue);\r\n        effectiveMaxRG = timeFromZeroRG(Replicanti.galaxies.max + Replicanti.galaxies.extra) -\r\n          timeFromZeroRG(Replicanti.galaxies.extra);\r\n        effectiveCurrentRG = timeFromZeroRG(Replicanti.galaxies.bought + Replicanti.galaxies.extra) -\r\n          timeFromZeroRG(Replicanti.galaxies.extra);\r\n      } else {\r\n        baseGalaxiesPerSecond = galaxiesPerSecond;\r\n        effectiveMaxRG = Replicanti.galaxies.max;\r\n        effectiveCurrentRG = Replicanti.galaxies.bought;\r\n      }\r\n      const secondsPerGalaxy = galaxiesPerSecond.reciprocal();\r\n\r\n      if (this.remainingTimeText === \"\") {\r\n        if (remainingTime === 0) {\r\n          this.remainingTimeText = `At Infinite Replicanti (normally takes\r\n            ${TimeSpan.fromSeconds(secondsPerGalaxy.toNumber())})`;\r\n        } else if (replicantiAmount.lt(100)) {\r\n          // Because of discrete replication, we add \"Approximately\" at very low amounts\r\n          this.remainingTimeText = `Approximately ${TimeSpan.fromSeconds(remainingTime)} remaining\r\n            until Infinite Replicanti`;\r\n        } else {\r\n          this.remainingTimeText = `${TimeSpan.fromSeconds(remainingTime)} remaining until Infinite Replicanti`;\r\n        }\r\n      }\r\n\r\n      // If the player can get RG, this text is redundant with text below. It denotes total time from 1 to e308\r\n      if (Replicanti.galaxies.max === 0 && !isAbove308) {\r\n        this.remainingTimeText += ` (${TimeSpan.fromSeconds(totalTime)} total)`;\r\n      }\r\n\r\n\r\n      if (Replicanti.galaxies.max > 0) {\r\n        // If the player has max RGs, don't display the \"You are gaining blah\" text\r\n        if (player.replicanti.galaxies === Replicanti.galaxies.max) {\r\n          this.galaxyText = \"You have reached the maximum amount of Replicanti Galaxies\";\r\n        } else {\r\n          this.galaxyText = `You are gaining a Replicanti Galaxy every\r\n            ${TimeSpan.fromSeconds(secondsPerGalaxy.toNumber())}`;\r\n          if (galaxiesPerSecond.gte(1)) {\r\n            this.galaxyText = `You are gaining ${quantify(\"Replicanti Galaxy\", galaxiesPerSecond, 2, 1)} per second`;\r\n          }\r\n          // Take the total time from zero replicanti to max RG + e308 replicanti and then subtract away the time which\r\n          // has already elapsed. The time elapsed is calculated from your current RG total (including the current one)\r\n          // and then subtracts away the time spent in the current RG so far.\r\n          const allGalaxyTime = Decimal.divide(effectiveMaxRG - effectiveCurrentRG, baseGalaxiesPerSecond).toNumber();\r\n\r\n          // Pending galaxy gain is here because the growth slows down significantly after\r\n          // 1e308 normally. However, the seconds per galaxy code is calculated as if\r\n          // uncapped since nobody would wait for 1e52345325 replicanti to buy an RG.\r\n          // To solve this problem, after 1e308, it uses the pending value as the basis of\r\n          // how \"\"close\"\" you are to the next galaxy instead of replicanti amount,\r\n          // which is a good enough best case approximation in my opinion.\r\n          // Note: This pending case ignores Reality Upgrade 6 but it's not really accurate anyway\r\n          // (basically assumes you'll get all your possible RGs now) so that's probably fine.\r\n          const pending = Replicanti.galaxies.gain;\r\n          let pendingTime = pending * secondsPerGalaxy.toNumber();\r\n          // If popular music is unlocked add the divide amount\r\n          if (Achievement(126).isUnlocked && !Pelle.isDoomed) {\r\n            const leftPercentAfterGalaxy = replicantiAmount.log10() / LOG10_MAX_VALUE - pending;\r\n            pendingTime += leftPercentAfterGalaxy * secondsPerGalaxy.toNumber();\r\n          }\r\n          const thisGalaxyTime = pending > 0 ? pendingTime : secondsPerGalaxy.toNumber() - remainingTime;\r\n          this.galaxyText += ` (all Replicanti Galaxies within\r\n            ${TimeSpan.fromSeconds(Math.clampMin(allGalaxyTime - thisGalaxyTime, 0))})`;\r\n        }\r\n      } else {\r\n        this.galaxyText = ``;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <p>{{ remainingTimeText }}<br>{{ galaxyText }}</p>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]}]}