{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\ImportFilterSingleType.vue?vue&type=style&index=0&id=a3b7b7f0&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\ImportFilterSingleType.vue","mtime":1745241596821},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouYy1zaW5nbGUtcm93IHsNCiAgZGlzcGxheTogZmxleDsNCiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogIG1hcmdpbjogLTIuMTVyZW0gMCAwIDNyZW07DQp9DQoNCi5jLXNlY29uZC1yb3cgew0KICBtYXJnaW46IDAgMCAwIC05cmVtOw0KfQ0KDQouby1jZWxsIHsNCiAgZGlzcGxheTogZmxleDsNCiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogIGJvcmRlcjogdmFyKC0tdmFyLWJvcmRlci13aWR0aCwgMC4ycmVtKSBzb2xpZDsNCiAgcGFkZGluZzogMC4xcmVtOw0KfQ0KDQouby1jZWxsLS1jaGFuZ2VkIHsNCiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3ItYWNjZW50KTsNCn0NCg0KLmMtcmFyaXR5IHsNCiAgd2lkdGg6IDEwcmVtOw0KfQ0KDQouYy1lZmZlY3RzLWNvdW50IHsNCiAgd2lkdGg6IDIwcmVtOw0KfQ0KDQouYy10YXJnZXQtc2NvcmUgew0KICB3aWR0aDogMThyZW07DQp9DQoNCi5jLXNpbmdsZS1zY29yZSB7DQogIHdpZHRoOiAxMnJlbTsNCn0NCg=="},{"version":3,"sources":["ImportFilterSingleType.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoJA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"ImportFilterSingleType.vue","sourceRoot":"src/components/modals","sourcesContent":["<script>\r\nexport default {\r\n  name: \"ImportFilterSingleType\",\r\n  props: {\r\n    type: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    currSettings: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n    newSettings: {\r\n      type: Object,\r\n      required: true,\r\n    }\r\n  },\r\n  computed: {\r\n    settingsChanged() {\r\n      return JSON.stringify(this.currSettings) !== JSON.stringify(this.newSettings);\r\n    },\r\n    symbol() {\r\n      return GLYPH_SYMBOLS[this.type];\r\n    },\r\n    capitalized() {\r\n      return `${this.type.charAt(0).toUpperCase()}${this.type.substring(1)}`;\r\n    },\r\n    rarityStr() {\r\n      return this.changedValue(this.currSettings.rarity, this.newSettings.rarity, x => formatPercents(x / 100));\r\n    },\r\n    effectStr() {\r\n      return this.changedValue(this.currSettings.effectCount, this.newSettings.effectCount, formatInt);\r\n    },\r\n    scoreStr() {\r\n      return this.changedValue(this.currSettings.score, this.newSettings.score, formatInt);\r\n    },\r\n    effectData() {\r\n      const changes = [];\r\n      for (let index = 0; index < this.currSettings.effectScores.length; index++) {\r\n        const bitmaskIndex = AutoGlyphProcessor.bitmaskIndexOffset(this.type) + index;\r\n        changes.push({\r\n          bitmaskIndex,\r\n          oldReq: (this.currSettings.specifiedMask & (1 << bitmaskIndex)) !== 0,\r\n          newReq: (this.newSettings.specifiedMask & (1 << bitmaskIndex)) !== 0,\r\n          oldScore: this.currSettings.effectScores[index],\r\n          newScore: this.newSettings.effectScores[index],\r\n        });\r\n      }\r\n      return changes;\r\n    }\r\n  },\r\n  methods: {\r\n    changedValue(oldVal, newVal, applyFn) {\r\n      if (oldVal === newVal) return applyFn(oldVal);\r\n      return `${applyFn(oldVal)}➜${applyFn(newVal)}`;\r\n    },\r\n    effectScoreStr(effectEntry) {\r\n      const fullStr = (isSelected, value) => {\r\n        const check = isSelected ? \"✔\" : \"✘\";\r\n        return `${check}${formatInt(value)}`;\r\n      };\r\n      const oldStr = fullStr(effectEntry.oldReq, effectEntry.oldScore);\r\n      const newStr = fullStr(effectEntry.newReq, effectEntry.newScore);\r\n\r\n      if (effectEntry.oldScore === effectEntry.newScore) return oldStr;\r\n      return `${oldStr}➜${newStr}`;\r\n    },\r\n    topLevelClassObject(key) {\r\n      return {\r\n        \"o-cell\": true,\r\n        \"o-cell--changed\": this.currSettings[key] !== this.newSettings[key],\r\n      };\r\n    },\r\n    effectClassObject(effectEntry) {\r\n      return {\r\n        \"o-cell\": true,\r\n        \"o-cell--changed\": effectEntry.oldReq !== effectEntry.newReq || effectEntry.oldScore !== effectEntry.newScore,\r\n      };\r\n    },\r\n    getEffectDesc(effectEntry) {\r\n      return GlyphEffects.all.find(e => e.bitmaskIndex === effectEntry.bitmaskIndex && e.isGenerated).genericDesc;\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    {{ symbol }}:\r\n    <span v-if=\"settingsChanged\">\r\n      <span class=\"c-single-row\">\r\n        <span\r\n          class=\"c-rarity\"\r\n          :class=\"topLevelClassObject('rarity')\"\r\n          ach-tooltip=\"Setting for Rarity Threshold and Specified Effect\"\r\n        >\r\n          {{ rarityStr }}\r\n        </span>\r\n        <span\r\n          class=\"c-effects-count\"\r\n          :class=\"topLevelClassObject('effectCount')\"\r\n          ach-tooltip=\"Number of effects in Specified Effect\"\r\n        >\r\n          Minimum Effects: {{ effectStr }}\r\n        </span>\r\n        <span\r\n          class=\"c-target-score\"\r\n          :class=\"topLevelClassObject('score')\"\r\n          ach-tooltip=\"Threshold for Effect Score\"\r\n        >\r\n          Score: {{ scoreStr }}\r\n        </span>\r\n      </span>\r\n      <br>\r\n      <span class=\"c-single-row\">\r\n        <span\r\n          v-for=\"effect in effectData.slice(0, 4)\"\r\n          :key=\"effect.bitmaskIndex\"\r\n          class=\"c-single-score\"\r\n          :class=\"effectClassObject(effect)\"\r\n          :ach-tooltip=\"getEffectDesc(effect)\"\r\n        >\r\n          {{ effectScoreStr(effect) }}\r\n        </span>\r\n      </span>\r\n      <span\r\n        v-if=\"effectData.length > 4\"\r\n        class=\"c-single-row c-second-row\"\r\n      >\r\n        <br>\r\n        <span\r\n          v-for=\"effect in effectData.slice(4)\"\r\n          :key=\"effect.bitmaskIndex\"\r\n          class=\"c-single-score o-cell\"\r\n          :class=\"effectClassObject(effect)\"\r\n          :ach-tooltip=\"getEffectDesc(effect)\"\r\n        >\r\n          {{ effectScoreStr(effect) }}\r\n        </span>\r\n      </span>\r\n    </span>\r\n    <span v-else>\r\n      (No changes)\r\n    </span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-single-row {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: -2.15rem 0 0 3rem;\r\n}\r\n\r\n.c-second-row {\r\n  margin: 0 0 0 -9rem;\r\n}\r\n\r\n.o-cell {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border: var(--var-border-width, 0.2rem) solid;\r\n  padding: 0.1rem;\r\n}\r\n\r\n.o-cell--changed {\r\n  background-color: var(--color-accent);\r\n}\r\n\r\n.c-rarity {\r\n  width: 10rem;\r\n}\r\n\r\n.c-effects-count {\r\n  width: 20rem;\r\n}\r\n\r\n.c-target-score {\r\n  width: 18rem;\r\n}\r\n\r\n.c-single-score {\r\n  width: 12rem;\r\n}\r\n</style>\r\n"]}]}