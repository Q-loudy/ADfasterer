{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\options\\glyph-appearance\\GlyphCustomization.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\options\\glyph-appearance\\GlyphCustomization.vue","mtime":1745241596963},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgR2x5cGhDb21wb25lbnQgZnJvbSAiQC9jb21wb25lbnRzL0dseXBoQ29tcG9uZW50IjsNCmltcG9ydCBHbHlwaEN1c3RvbWl6YXRpb25TaW5nbGVUeXBlIGZyb20gIkAvY29tcG9uZW50cy9tb2RhbHMvb3B0aW9ucy9nbHlwaC1hcHBlYXJhbmNlL0dseXBoQ3VzdG9taXphdGlvblNpbmdsZVR5cGUiOw0KaW1wb3J0IFByaW1hcnlCdXR0b24gZnJvbSAiQC9jb21wb25lbnRzL1ByaW1hcnlCdXR0b24iOw0KaW1wb3J0IFByaW1hcnlUb2dnbGVCdXR0b24gZnJvbSAiQC9jb21wb25lbnRzL1ByaW1hcnlUb2dnbGVCdXR0b24iOw0KDQpleHBvcnQgZGVmYXVsdCB7DQogIG5hbWU6ICJHbHlwaEN1c3RvbWl6YXRpb24iLA0KICBjb21wb25lbnRzOiB7DQogICAgR2x5cGhDdXN0b21pemF0aW9uU2luZ2xlVHlwZSwNCiAgICBQcmltYXJ5QnV0dG9uLA0KICAgIFByaW1hcnlUb2dnbGVCdXR0b24sDQogICAgR2x5cGhDb21wb25lbnQNCiAgfSwNCiAgZGF0YSgpIHsNCiAgICByZXR1cm4gew0KICAgICAgZW5hYmxlZDogZmFsc2UsDQogICAgICAvLyBUaGlzIGlzIGhlcmUgdG8gZm9yY2UgYSByZS1yZW5kZXIgaWYgdGhlIGFwcGVhcmFuY2UgaXMgc2V0IHRvIHRoZSBkZWZhdWx0IHZhbHVlcw0KICAgICAgZGVmYXVsdEtleVN3YXA6IGZhbHNlLA0KICAgICAgc2VsZWN0ZWRJbmRleDogMCwNCiAgICB9Ow0KICB9LA0KICBjb21wdXRlZDogew0KICAgIGNvc21ldGljVHlwZXMoKSB7DQogICAgICAvLyBXZSB3YW50IHRvIHNvcnQgdGhlIGJhc2UgdHlwZXMgaW4gYSB3YXkgY29uc2lzdGVudCB3aXRoIHR5cGUgb3JkZXJzIHdpdGhpbiBtb3N0IG9mIHRoZSByZXN0IG9mIHRoZSBnYW1lLiBXZQ0KICAgICAgLy8gY2FuIHNhZmVseSBzbGljZSB0aGUgZmlyc3QgNSBhbmQgaW5zZXJ0IHRoZW0gYmFjayBpbiB0aGUgY29ycmVjdCBvcmRlciBiZWNhdXNlIHRoZXknbGwgYWx3YXlzIGJlIHVubG9ja2VkLg0KICAgICAgY29uc3Qgbm9uQmFzZVR5cGVzID0gQ29zbWV0aWNHbHlwaFR5cGVzLmxpc3QuZmlsdGVyKHQgPT4gdC5jYW5DdXN0b21pemUpLm1hcCh0ID0+IHQuaWQpLnNsaWNlKDUpOw0KICAgICAgY29uc3Qgc29ydGVkQmFzZSA9IFsicG93ZXIiLCAiaW5maW5pdHkiLCAicmVwbGljYXRpb24iLCAidGltZSIsICJkaWxhdGlvbiJdOw0KICAgICAgcmV0dXJuIHNvcnRlZEJhc2UuY29uY2F0KG5vbkJhc2VUeXBlcyk7DQogICAgfSwNCiAgICBnbHlwaEljb25Qcm9wcygpIHsNCiAgICAgIHJldHVybiB7DQogICAgICAgIHNpemU6ICIyLjVyZW0iLA0KICAgICAgICAiZ2xvdy1ibHVyIjogIjAuM3JlbSIsDQogICAgICAgICJnbG93LXNwcmVhZCI6ICIwLjFyZW0iLA0KICAgICAgICAidGV4dC1wcm9wb3J0aW9uIjogMC43DQogICAgICB9Ow0KICAgIH0sDQogICAgaGFzQ3VzdG9tU2V0cygpIHsNCiAgICAgIHJldHVybiBHbHlwaEFwcGVhcmFuY2VIYW5kbGVyLnVubG9ja2VkU2V0cy5sZW5ndGggPiAwOw0KICAgIH0sDQogICAgaGFzU3BlY2lhbFR5cGVzKCkgew0KICAgICAgcmV0dXJuIEdseXBoQXBwZWFyYW5jZUhhbmRsZXIuYXZhaWxhYmxlVHlwZXMubGVuZ3RoID4gMDsNCiAgICB9DQogIH0sDQogIHdhdGNoOiB7DQogICAgZW5hYmxlZChuZXdWYWx1ZSkgew0KICAgICAgcGxheWVyLnJlYWxpdHkuZ2x5cGhzLmNvc21ldGljcy5hY3RpdmUgPSBuZXdWYWx1ZTsNCiAgICAgIEV2ZW50SHViLmRpc3BhdGNoKEdBTUVfRVZFTlQuR0xZUEhfVklTVUFMX0NIQU5HRSk7DQogICAgfSwNCiAgfSwNCiAgbWV0aG9kczogew0KICAgIHVwZGF0ZSgpIHsNCiAgICAgIHRoaXMuZW5hYmxlZCA9IHBsYXllci5yZWFsaXR5LmdseXBocy5jb3NtZXRpY3MuYWN0aXZlOw0KICAgICAgdGhpcy5kZWZhdWx0S2V5U3dhcCA9IHRydWU7DQogICAgfSwNCiAgICByZXNldEFsbCgpIHsNCiAgICAgIGNvbnN0IGNvc21ldGljcyA9IHBsYXllci5yZWFsaXR5LmdseXBocy5jb3NtZXRpY3M7DQogICAgICBjb3NtZXRpY3Muc3ltYm9sTWFwID0ge307DQogICAgICBjb3NtZXRpY3MuY29sb3JNYXAgPSB7fTsNCiAgICAgIHRoaXMuZGVmYXVsdEtleVN3YXAgPSBmYWxzZTsNCiAgICAgIEV2ZW50SHViLmRpc3BhdGNoKEdBTUVfRVZFTlQuR0xZUEhfVklTVUFMX0NIQU5HRSk7DQogICAgfSwNCiAgICByZXNldFNpbmdsZSgpIHsNCiAgICAgIGNvbnN0IGNvc21ldGljcyA9IHBsYXllci5yZWFsaXR5LmdseXBocy5jb3NtZXRpY3M7DQogICAgICBjb25zdCBjdXJyVHlwZSA9IHRoaXMuY29zbWV0aWNUeXBlc1t0aGlzLnNlbGVjdGVkSW5kZXhdOw0KICAgICAgY29zbWV0aWNzLnN5bWJvbE1hcFtjdXJyVHlwZV0gPSB1bmRlZmluZWQ7DQogICAgICBjb3NtZXRpY3MuY29sb3JNYXBbY3VyclR5cGVdID0gdW5kZWZpbmVkOw0KICAgICAgdGhpcy5kZWZhdWx0S2V5U3dhcCA9IGZhbHNlOw0KICAgICAgRXZlbnRIdWIuZGlzcGF0Y2goR0FNRV9FVkVOVC5HTFlQSF9WSVNVQUxfQ0hBTkdFKTsNCiAgICB9LA0KICAgIGZha2VHbHlwaCh0eXBlKSB7DQogICAgICBsZXQgdHlwZU5hbWUgPSAicG93ZXIiOw0KICAgICAgaWYgKHR5cGUgPT09ICJyZWFsaXR5IikgdHlwZU5hbWUgPSAicmVhbGl0eSI7DQogICAgICBpZiAodHlwZSA9PT0gImN1cnNlZCIpIHR5cGVOYW1lID0gImN1cnNlZCI7DQogICAgICByZXR1cm4gew0KICAgICAgICAvLyBUaGlzIGFyZSBqdXN0IGR1bW15IHZhbHVlcyB0byBtYWtlIHN1cmUgdGhhdCBHbHlwaENvbXBvbmVudCBkb2Vzbid0IHRocm93IGVycm9yczsgb25seSB0aGUgY29zbWV0aWMgYXNwZWN0cw0KICAgICAgICAvLyB3aWxsIGVuZCB1cCBiZWluZyB2aXNpYmxlIGluIHRoaXMgY2FzZSBhbnl3YXkgKGFzIHRoZXkgb3ZlcnJpZGUgYW55dGhpbmcgdHlwZSB3b3VsZCBvdGhlcndpc2Ugc2hvdykuIFR5cGUNCiAgICAgICAgLy8gbG9va3MgcGFydGljdWxhcmx5IG9kZCBiZWNhdXNlIHJlYWxpdHkgZ2x5cGhzIG5lZWQgdGhhdCBwYXNzZWQgaW4gZm9yIHRoZSBjb2xvciBhbmltYXRpb24sIGFuZCBjdXJzZWQgb25lcw0KICAgICAgICAvLyBhcmUgaW52ZXJ0ZWQsIGJ1dCBwb3dlciBpcyBhbiBva2F5IHBsYWNlaG9sZGVyIGZvciBhbnl0aGluZyBlbHNlLiBXZSBjYW4ndCBwYXNzIGluIHR5cGUgb3IgZWxzZSBpdCB3aWxsIGVycm9yDQogICAgICAgIC8vIG91dCB3aXRoIGNvc21ldGljIHR5cGVzLg0KICAgICAgICB0eXBlOiB0eXBlTmFtZSwNCiAgICAgICAgc3RyZW5ndGg6IDEsDQogICAgICAgIGNvc21ldGljOiB0eXBlLA0KICAgICAgfTsNCiAgICB9LA0KICAgIHR5cGVDbGFzcyhpbmRleCkgew0KICAgICAgcmV0dXJuIHsNCiAgICAgICAgImMtc2luZ2xlLXR5cGUiOiB0cnVlLA0KICAgICAgICAiby1kaXNhYmxlZC1jb3NtZXRpY3MiOiAhdGhpcy5lbmFibGVkLA0KICAgICAgICAiYy10eXBlLWN1cnJlbnQiOiB0aGlzLnNlbGVjdGVkSW5kZXggPT09IGluZGV4LA0KICAgICAgICAiYy10eXBlLW90aGVyIjogdGhpcy5zZWxlY3RlZEluZGV4ICE9PSBpbmRleCwNCiAgICAgIH07DQogICAgfSwNCiAgICByZXNldEluZGl2aWR1YWwoKSB7DQogICAgICBmb3IgKGNvbnN0IGdseXBoIG9mIEdseXBocy5hbGxHbHlwaHMpIHsNCiAgICAgICAgaWYgKCFnbHlwaC5maXhlZENvc21ldGljKSBnbHlwaC5jb3NtZXRpYyA9IHVuZGVmaW5lZDsNCiAgICAgIH0NCiAgICAgIHRoaXMuZGVmYXVsdEtleVN3YXAgPSBmYWxzZTsNCiAgICAgIEV2ZW50SHViLmRpc3BhdGNoKEdBTUVfRVZFTlQuR0xZUEhfVklTVUFMX0NIQU5HRSk7DQogICAgfSwNCiAgfQ0KfTsNCg=="},{"version":3,"sources":["GlyphCustomization.vue"],"names":[],"mappingsfile":"GlyphCustomization.vue","sourceRoot":"src/components/modals/options/glyph-appearance","sourcesContent":["<script>\r\nimport GlyphComponent from \"@/components/GlyphComponent\";\r\nimport GlyphCustomizationSingleType from \"@/components/modals/options/glyph-appearance/GlyphCustomizationSingleType\";\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\nimport PrimaryToggleButton from \"@/components/PrimaryToggleButton\";\r\n\r\nexport default {\r\n  name: \"GlyphCustomization\",\r\n  components: {\r\n    GlyphCustomizationSingleType,\r\n    PrimaryButton,\r\n    PrimaryToggleButton,\r\n    GlyphComponent\r\n  },\r\n  data() {\r\n    return {\r\n      enabled: false,\r\n      // This is here to force a re-render if the appearance is set to the default values\r\n      defaultKeySwap: false,\r\n      selectedIndex: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    cosmeticTypes() {\r\n      // We want to sort the base types in a way consistent with type orders within most of the rest of the game. We\r\n      // can safely slice the first 5 and insert them back in the correct order because they'll always be unlocked.\r\n      const nonBaseTypes = CosmeticGlyphTypes.list.filter(t => t.canCustomize).map(t => t.id).slice(5);\r\n      const sortedBase = [\"power\", \"infinity\", \"replication\", \"time\", \"dilation\"];\r\n      return sortedBase.concat(nonBaseTypes);\r\n    },\r\n    glyphIconProps() {\r\n      return {\r\n        size: \"2.5rem\",\r\n        \"glow-blur\": \"0.3rem\",\r\n        \"glow-spread\": \"0.1rem\",\r\n        \"text-proportion\": 0.7\r\n      };\r\n    },\r\n    hasCustomSets() {\r\n      return GlyphAppearanceHandler.unlockedSets.length > 0;\r\n    },\r\n    hasSpecialTypes() {\r\n      return GlyphAppearanceHandler.availableTypes.length > 0;\r\n    }\r\n  },\r\n  watch: {\r\n    enabled(newValue) {\r\n      player.reality.glyphs.cosmetics.active = newValue;\r\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\r\n    },\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.enabled = player.reality.glyphs.cosmetics.active;\r\n      this.defaultKeySwap = true;\r\n    },\r\n    resetAll() {\r\n      const cosmetics = player.reality.glyphs.cosmetics;\r\n      cosmetics.symbolMap = {};\r\n      cosmetics.colorMap = {};\r\n      this.defaultKeySwap = false;\r\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\r\n    },\r\n    resetSingle() {\r\n      const cosmetics = player.reality.glyphs.cosmetics;\r\n      const currType = this.cosmeticTypes[this.selectedIndex];\r\n      cosmetics.symbolMap[currType] = undefined;\r\n      cosmetics.colorMap[currType] = undefined;\r\n      this.defaultKeySwap = false;\r\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\r\n    },\r\n    fakeGlyph(type) {\r\n      let typeName = \"power\";\r\n      if (type === \"reality\") typeName = \"reality\";\r\n      if (type === \"cursed\") typeName = \"cursed\";\r\n      return {\r\n        // This are just dummy values to make sure that GlyphComponent doesn't throw errors; only the cosmetic aspects\r\n        // will end up being visible in this case anyway (as they override anything type would otherwise show). Type\r\n        // looks particularly odd because reality glyphs need that passed in for the color animation, and cursed ones\r\n        // are inverted, but power is an okay placeholder for anything else. We can't pass in type or else it will error\r\n        // out with cosmetic types.\r\n        type: typeName,\r\n        strength: 1,\r\n        cosmetic: type,\r\n      };\r\n    },\r\n    typeClass(index) {\r\n      return {\r\n        \"c-single-type\": true,\r\n        \"o-disabled-cosmetics\": !this.enabled,\r\n        \"c-type-current\": this.selectedIndex === index,\r\n        \"c-type-other\": this.selectedIndex !== index,\r\n      };\r\n    },\r\n    resetIndividual() {\r\n      for (const glyph of Glyphs.allGlyphs) {\r\n        if (!glyph.fixedCosmetic) glyph.cosmetic = undefined;\r\n      }\r\n      this.defaultKeySwap = false;\r\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"c-glyph-customization-group\">\r\n    <b>Custom Glyph Appearance</b>\r\n    <PrimaryToggleButton\r\n      v-model=\"enabled\"\r\n      class=\"o-primary-btn--subtab-option\"\r\n      on=\"Enabled\"\r\n      off=\"Disabled\"\r\n    />\r\n    <br>\r\n    <div v-if=\"hasCustomSets\">\r\n      Reset Appearances to Default:\r\n      <PrimaryButton\r\n        class=\"o-primary-btn--subtab-option\"\r\n        :class=\"{ 'o-primary-btn--disabled' : !enabled }\"\r\n        @click=\"resetAll\"\r\n      >\r\n        All Types\r\n      </PrimaryButton>\r\n      <PrimaryButton\r\n        class=\"o-primary-btn--subtab-option\"\r\n        :class=\"{ 'o-primary-btn--disabled' : !enabled }\"\r\n        @click=\"resetSingle\"\r\n      >\r\n        This Type\r\n      </PrimaryButton>\r\n      <br>\r\n      <i>This will not reset any individually-modified Glyphs.</i>\r\n      <br>\r\n      <br>\r\n      Glyph Type:\r\n      <br>\r\n      <div class=\"c-type-selection\">\r\n        <div\r\n          v-for=\"(type, index) in cosmeticTypes\"\r\n          :key=\"type\"\r\n          :class=\"typeClass(index)\"\r\n          @click=\"selectedIndex = index\"\r\n        >\r\n          <GlyphComponent\r\n            v-tooltip=\"type.capitalize()\"\r\n            v-bind=\"glyphIconProps\"\r\n            :glyph=\"fakeGlyph(type)\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <GlyphCustomizationSingleType\r\n        :key=\"selectedIndex + enabled + defaultKeySwap\"\r\n        :type=\"cosmeticTypes[selectedIndex]\"\r\n      />\r\n      Note: Some options may cause very poor color contrast or readability on certain themes with certain Glyph types.\r\n    </div>\r\n    <div v-else>\r\n      You currently have no available options for changing the default appearance of your Glyphs. To unlock some, visit\r\n      the Shop Tab or beat the game.\r\n      <br>\r\n      <br>\r\n      <span v-if=\"hasSpecialTypes\">\r\n        Enabling this setting will allow you to change individual Glyphs to special cosmetic types you have unlocked.\r\n      </span>\r\n      <span v-else>\r\n        Enabling or disabling this option will currently do nothing.\r\n      </span>\r\n    </div>\r\n    <PrimaryButton\r\n      class=\"o-primary-btn--subtab-option\"\r\n      @click=\"resetIndividual\"\r\n    >\r\n      Reset all individual Glyph cosmetics\r\n    </PrimaryButton>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-glyph-customization-group {\r\n  width: 100%;\r\n  margin-top: 0.5rem;\r\n  text-align: left;\r\n}\r\n\r\n.c-type-selection {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  margin-top: 0.5rem;\r\n}\r\n\r\n.o-disabled-cosmetics {\r\n  opacity: 0.5;\r\n}\r\n\r\n.c-single-type {\r\n  padding: 0.5rem;\r\n}\r\n\r\n.c-type-current {\r\n  border: 0.1rem solid var(--color-text);\r\n}\r\n\r\n.c-type-other {\r\n  padding: 0.6rem;\r\n}\r\n</style>\r\n"]}]}