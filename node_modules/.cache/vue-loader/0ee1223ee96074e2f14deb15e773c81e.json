{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\automator\\AutomatorDocsTemplateList.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\automator\\AutomatorDocsTemplateList.vue","mtime":1745241597071},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpleHBvcnQgZGVmYXVsdCB7DQogIG5hbWU6ICJBdXRvbWF0b3JEb2NzVGVtcGxhdGVMaXN0IiwNCiAgZGF0YSgpIHsNCiAgICByZXR1cm4gew0KICAgICAgaXNCbG9jazogZmFsc2UsDQogICAgICBibG9ja1RlbXBsYXRlczogW10sDQogICAgICBzZWxlY3RlZFRlbXBsYXRlSUQ6IC0xLA0KICAgIH07DQogIH0sDQogIGNvbXB1dGVkOiB7DQogICAgdGVtcGxhdGVzOiAoKSA9PiBHYW1lRGF0YWJhc2UucmVhbGl0eS5hdXRvbWF0b3IudGVtcGxhdGVzLnNjcmlwdHMsDQogICAgcGFzdGVUZXh0KCkgew0KICAgICAgcmV0dXJuIHRoaXMuaXNCbG9jaw0KICAgICAgICA/IGBjcmVhdGUgYSBzcGVjaWFsIGJsb2NrIHlvdSBjYW4gZHJhZyBpbnRvIHlvdXIgQXV0b21hdG9yIHdoZXJlIHlvdSB3b3VsZCBsaWtlIGl0IHRvIGJlIHBsYWNlZC4gSXQgd2lsbCB0aGVuDQogICAgICAgICAgYXV0b21hdGljYWxseSBmaWxsIGluIGFsbCBvZiB0aGUgaW5kaXZpZHVhbCBibG9ja3MgbmVlZGVkIGZvciB0aGUgdGVtcGxhdGVgDQogICAgICAgIDogYGNvcHkgdGhlIHRlbXBsYXRlIGFzIHRleHQgb250byB5b3VyIGNsaXBib2FyZC4gWW91IGNhbiBkaXJlY3RseSBwYXN0ZSB0aGUgdGVtcGxhdGUgdGV4dCBpbnRvIHlvdXIgQXV0b21hdG9yDQogICAgICAgICAgd2hlcmV2ZXIgeW91IHdvdWxkIGxpa2UgaXRgOw0KICAgIH0NCiAgfSwNCiAgbWV0aG9kczogew0KICAgIHVwZGF0ZSgpIHsNCiAgICAgIHRoaXMuaXNCbG9jayA9IHBsYXllci5yZWFsaXR5LmF1dG9tYXRvci50eXBlID09PSBBVVRPTUFUT1JfVFlQRS5CTE9DSzsNCiAgICAgIHRoaXMuYmxvY2tUZW1wbGF0ZXMgPSBBdXRvbWF0b3JEYXRhLmJsb2NrVGVtcGxhdGVzOw0KICAgIH0sDQogICAgc2hvd01vZGFsKHRlbXBsYXRlKSB7DQogICAgICBNb2RhbC5hdXRvbWF0b3JTY3JpcHRUZW1wbGF0ZS5zaG93KHRlbXBsYXRlKTsNCiAgICB9LA0KICAgIHVucGFja1RlbXBsYXRlQmxvY2tzKGV2ZW50KSB7DQogICAgICBjb25zdCB0ZW1wbGF0ZUJsb2NrcyA9IHRoaXMuYmxvY2tUZW1wbGF0ZXNbdGhpcy5zZWxlY3RlZFRlbXBsYXRlSURdLmJsb2NrczsNCiAgICAgIGNvbnN0IGJlZm9yZUJsb2NrcyA9IEJsb2NrQXV0b21hdG9yLmxpbmVzLnNsaWNlKDAsIGV2ZW50Lm5ld0luZGV4KTsNCiAgICAgIC8vIE5vdGUgdGhhdCBzbGljZSB3aWxsIGFsc28gcGljayB1cCB0aGUgVnVlIG9ic2VydmVyLCBzbyB3ZSBuZWVkIHRvIHJlbW92ZSB0aGF0IGFzIHdlbGwNCiAgICAgIGNvbnN0IGFmdGVyQmxvY2tzID0gQmxvY2tBdXRvbWF0b3IubGluZXMuc2xpY2UoZXZlbnQubmV3SW5kZXgpLmZpbHRlcihiID0+IGIuY21kKTsNCg0KICAgICAgLy8gUmVtYXAgSURzLCBpbiBjYXNlIHRoZSB0ZW1wbGF0ZSBnZXRzIGFkZGVkIG1vcmUgdGhhbiBvbmNlDQogICAgICBjb25zdCBtYXhFeGlzdGluZ0lEID0gTWF0aC5tYXgoLi4uQmxvY2tBdXRvbWF0b3IuX2lkQXJyYXkuZmlsdGVyKGlkID0+IGlkKSk7DQogICAgICBjb25zdCBtaW5UZW1wbGF0ZUlEID0gTWF0aC5taW4oLi4udGVtcGxhdGVCbG9ja3MubWFwKGIgPT4gYi5pZCkpOw0KICAgICAgY29uc3QgYmxvY2tzVG9BZGQgPSBbXTsNCiAgICAgIGZvciAoY29uc3QgYmxvY2sgb2YgdGVtcGxhdGVCbG9ja3MpIHsNCiAgICAgICAgYmxvY2tzVG9BZGQucHVzaCh7DQogICAgICAgICAgLi4uYmxvY2ssDQogICAgICAgICAgaWQ6IGJsb2NrLmlkICsgbWF4RXhpc3RpbmdJRCAtIG1pblRlbXBsYXRlSUQgKyAxDQogICAgICAgIH0pOw0KICAgICAgfQ0KICAgICAgQmxvY2tBdXRvbWF0b3IubGluZXMgPSBiZWZvcmVCbG9ja3M7DQogICAgICBCbG9ja0F1dG9tYXRvci5saW5lcy5wdXNoKC4uLmJsb2Nrc1RvQWRkKTsNCiAgICAgIEJsb2NrQXV0b21hdG9yLmxpbmVzLnB1c2goLi4uYWZ0ZXJCbG9ja3MpOw0KICAgICAgQmxvY2tBdXRvbWF0b3IudXBkYXRlSWRBcnJheSgpOw0KICAgIH0sDQogICAgc2V0SW5kZXgoaW5kZXgpIHsNCiAgICAgIHRoaXMuc2VsZWN0ZWRUZW1wbGF0ZUlEID0gaW5kZXg7DQogICAgfQ0KICB9DQp9Ow0K"},{"version":3,"sources":["AutomatorDocsTemplateList.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AutomatorDocsTemplateList.vue","sourceRoot":"src/components/tabs/automator","sourcesContent":["<script>\r\nexport default {\r\n  name: \"AutomatorDocsTemplateList\",\r\n  data() {\r\n    return {\r\n      isBlock: false,\r\n      blockTemplates: [],\r\n      selectedTemplateID: -1,\r\n    };\r\n  },\r\n  computed: {\r\n    templates: () => GameDatabase.reality.automator.templates.scripts,\r\n    pasteText() {\r\n      return this.isBlock\r\n        ? `create a special block you can drag into your Automator where you would like it to be placed. It will then\r\n          automatically fill in all of the individual blocks needed for the template`\r\n        : `copy the template as text onto your clipboard. You can directly paste the template text into your Automator\r\n          wherever you would like it`;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isBlock = player.reality.automator.type === AUTOMATOR_TYPE.BLOCK;\r\n      this.blockTemplates = AutomatorData.blockTemplates;\r\n    },\r\n    showModal(template) {\r\n      Modal.automatorScriptTemplate.show(template);\r\n    },\r\n    unpackTemplateBlocks(event) {\r\n      const templateBlocks = this.blockTemplates[this.selectedTemplateID].blocks;\r\n      const beforeBlocks = BlockAutomator.lines.slice(0, event.newIndex);\r\n      // Note that slice will also pick up the Vue observer, so we need to remove that as well\r\n      const afterBlocks = BlockAutomator.lines.slice(event.newIndex).filter(b => b.cmd);\r\n\r\n      // Remap IDs, in case the template gets added more than once\r\n      const maxExistingID = Math.max(...BlockAutomator._idArray.filter(id => id));\r\n      const minTemplateID = Math.min(...templateBlocks.map(b => b.id));\r\n      const blocksToAdd = [];\r\n      for (const block of templateBlocks) {\r\n        blocksToAdd.push({\r\n          ...block,\r\n          id: block.id + maxExistingID - minTemplateID + 1\r\n        });\r\n      }\r\n      BlockAutomator.lines = beforeBlocks;\r\n      BlockAutomator.lines.push(...blocksToAdd);\r\n      BlockAutomator.lines.push(...afterBlocks);\r\n      BlockAutomator.updateIdArray();\r\n    },\r\n    setIndex(index) {\r\n      this.selectedTemplateID = index;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    These templates will let you do some more common things within the Automator. They may be slightly slower than\r\n    manually-written scripts, but don't require you to have any previous programming experience to use. Clicking any\r\n    of these buttons will open up a prompt with some input fields, which will generate a template you can place into\r\n    your Automator.\r\n    <button\r\n      v-for=\"template in templates\"\r\n      :key=\"template.name\"\r\n      class=\"o-primary-btn c-automator-docs-template--button l-automator__button\"\r\n      @click=\"showModal(template)\"\r\n    >\r\n      Template: {{ template.name }}\r\n    </button>\r\n    Since you are currently in the {{ isBlock ? \"Block\" : \"Text\" }} editor, this panel will {{ pasteText }}.\r\n    <br>\r\n    <br>\r\n    <draggable\r\n      v-if=\"isBlock\"\r\n      :key=\"blockTemplates.length\"\r\n      class=\"template-container\"\r\n      :list=\"blockTemplates\"\r\n      :group=\"{ name: 'code-blocks', pull: 'clone', put: false }\"\r\n      :sort=\"false\"\r\n      @end=\"unpackTemplateBlocks\"\r\n    >\r\n      <div\r\n        v-for=\"(template, i) in blockTemplates\"\r\n        :key=\"i\"\r\n        class=\"o-automator-command o-automator-block-list draggable-blocks\"\r\n        @dragstart=\"setIndex(i)\"\r\n      >\r\n        {{ template.name }}\r\n      </div>\r\n    </draggable>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-automator-docs-template--button {\r\n  margin: 0.4rem;\r\n  border-radius: var(--var-border-radius, 0.4rem);\r\n  border-width: var(--var-border-width, 0.2rem);\r\n  cursor: pointer;\r\n}\r\n\r\n.template-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n</style>\r\n"]}]}