{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\options\\glyph-appearance\\GlyphCustomization.vue?vue&type=style&index=0&id=b946f972&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\options\\glyph-appearance\\GlyphCustomization.vue","mtime":1745241596963},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmMtZ2x5cGgtY3VzdG9taXphdGlvbi1ncm91cCB7DQogIHdpZHRoOiAxMDAlOw0KICBtYXJnaW4tdG9wOiAwLjVyZW07DQogIHRleHQtYWxpZ246IGxlZnQ7DQp9DQoNCi5jLXR5cGUtc2VsZWN0aW9uIHsNCiAgZGlzcGxheTogZmxleDsNCiAgZmxleC1kaXJlY3Rpb246IHJvdzsNCiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7DQogIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogIG1hcmdpbi10b3A6IDAuNXJlbTsNCn0NCg0KLm8tZGlzYWJsZWQtY29zbWV0aWNzIHsNCiAgb3BhY2l0eTogMC41Ow0KfQ0KDQouYy1zaW5nbGUtdHlwZSB7DQogIHBhZGRpbmc6IDAuNXJlbTsNCn0NCg0KLmMtdHlwZS1jdXJyZW50IHsNCiAgYm9yZGVyOiAwLjFyZW0gc29saWQgdmFyKC0tY29sb3ItdGV4dCk7DQp9DQoNCi5jLXR5cGUtb3RoZXIgew0KICBwYWRkaW5nOiAwLjZyZW07DQp9DQo="},{"version":3,"sources":["GlyphCustomization.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmLA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"GlyphCustomization.vue","sourceRoot":"src/components/modals/options/glyph-appearance","sourcesContent":["<script>\r\nimport GlyphComponent from \"@/components/GlyphComponent\";\r\nimport GlyphCustomizationSingleType from \"@/components/modals/options/glyph-appearance/GlyphCustomizationSingleType\";\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\nimport PrimaryToggleButton from \"@/components/PrimaryToggleButton\";\r\n\r\nexport default {\r\n  name: \"GlyphCustomization\",\r\n  components: {\r\n    GlyphCustomizationSingleType,\r\n    PrimaryButton,\r\n    PrimaryToggleButton,\r\n    GlyphComponent\r\n  },\r\n  data() {\r\n    return {\r\n      enabled: false,\r\n      // This is here to force a re-render if the appearance is set to the default values\r\n      defaultKeySwap: false,\r\n      selectedIndex: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    cosmeticTypes() {\r\n      // We want to sort the base types in a way consistent with type orders within most of the rest of the game. We\r\n      // can safely slice the first 5 and insert them back in the correct order because they'll always be unlocked.\r\n      const nonBaseTypes = CosmeticGlyphTypes.list.filter(t => t.canCustomize).map(t => t.id).slice(5);\r\n      const sortedBase = [\"power\", \"infinity\", \"replication\", \"time\", \"dilation\"];\r\n      return sortedBase.concat(nonBaseTypes);\r\n    },\r\n    glyphIconProps() {\r\n      return {\r\n        size: \"2.5rem\",\r\n        \"glow-blur\": \"0.3rem\",\r\n        \"glow-spread\": \"0.1rem\",\r\n        \"text-proportion\": 0.7\r\n      };\r\n    },\r\n    hasCustomSets() {\r\n      return GlyphAppearanceHandler.unlockedSets.length > 0;\r\n    },\r\n    hasSpecialTypes() {\r\n      return GlyphAppearanceHandler.availableTypes.length > 0;\r\n    }\r\n  },\r\n  watch: {\r\n    enabled(newValue) {\r\n      player.reality.glyphs.cosmetics.active = newValue;\r\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\r\n    },\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.enabled = player.reality.glyphs.cosmetics.active;\r\n      this.defaultKeySwap = true;\r\n    },\r\n    resetAll() {\r\n      const cosmetics = player.reality.glyphs.cosmetics;\r\n      cosmetics.symbolMap = {};\r\n      cosmetics.colorMap = {};\r\n      this.defaultKeySwap = false;\r\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\r\n    },\r\n    resetSingle() {\r\n      const cosmetics = player.reality.glyphs.cosmetics;\r\n      const currType = this.cosmeticTypes[this.selectedIndex];\r\n      cosmetics.symbolMap[currType] = undefined;\r\n      cosmetics.colorMap[currType] = undefined;\r\n      this.defaultKeySwap = false;\r\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\r\n    },\r\n    fakeGlyph(type) {\r\n      let typeName = \"power\";\r\n      if (type === \"reality\") typeName = \"reality\";\r\n      if (type === \"cursed\") typeName = \"cursed\";\r\n      return {\r\n        // This are just dummy values to make sure that GlyphComponent doesn't throw errors; only the cosmetic aspects\r\n        // will end up being visible in this case anyway (as they override anything type would otherwise show). Type\r\n        // looks particularly odd because reality glyphs need that passed in for the color animation, and cursed ones\r\n        // are inverted, but power is an okay placeholder for anything else. We can't pass in type or else it will error\r\n        // out with cosmetic types.\r\n        type: typeName,\r\n        strength: 1,\r\n        cosmetic: type,\r\n      };\r\n    },\r\n    typeClass(index) {\r\n      return {\r\n        \"c-single-type\": true,\r\n        \"o-disabled-cosmetics\": !this.enabled,\r\n        \"c-type-current\": this.selectedIndex === index,\r\n        \"c-type-other\": this.selectedIndex !== index,\r\n      };\r\n    },\r\n    resetIndividual() {\r\n      for (const glyph of Glyphs.allGlyphs) {\r\n        if (!glyph.fixedCosmetic) glyph.cosmetic = undefined;\r\n      }\r\n      this.defaultKeySwap = false;\r\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"c-glyph-customization-group\">\r\n    <b>Custom Glyph Appearance</b>\r\n    <PrimaryToggleButton\r\n      v-model=\"enabled\"\r\n      class=\"o-primary-btn--subtab-option\"\r\n      on=\"Enabled\"\r\n      off=\"Disabled\"\r\n    />\r\n    <br>\r\n    <div v-if=\"hasCustomSets\">\r\n      Reset Appearances to Default:\r\n      <PrimaryButton\r\n        class=\"o-primary-btn--subtab-option\"\r\n        :class=\"{ 'o-primary-btn--disabled' : !enabled }\"\r\n        @click=\"resetAll\"\r\n      >\r\n        All Types\r\n      </PrimaryButton>\r\n      <PrimaryButton\r\n        class=\"o-primary-btn--subtab-option\"\r\n        :class=\"{ 'o-primary-btn--disabled' : !enabled }\"\r\n        @click=\"resetSingle\"\r\n      >\r\n        This Type\r\n      </PrimaryButton>\r\n      <br>\r\n      <i>This will not reset any individually-modified Glyphs.</i>\r\n      <br>\r\n      <br>\r\n      Glyph Type:\r\n      <br>\r\n      <div class=\"c-type-selection\">\r\n        <div\r\n          v-for=\"(type, index) in cosmeticTypes\"\r\n          :key=\"type\"\r\n          :class=\"typeClass(index)\"\r\n          @click=\"selectedIndex = index\"\r\n        >\r\n          <GlyphComponent\r\n            v-tooltip=\"type.capitalize()\"\r\n            v-bind=\"glyphIconProps\"\r\n            :glyph=\"fakeGlyph(type)\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <GlyphCustomizationSingleType\r\n        :key=\"selectedIndex + enabled + defaultKeySwap\"\r\n        :type=\"cosmeticTypes[selectedIndex]\"\r\n      />\r\n      Note: Some options may cause very poor color contrast or readability on certain themes with certain Glyph types.\r\n    </div>\r\n    <div v-else>\r\n      You currently have no available options for changing the default appearance of your Glyphs. To unlock some, visit\r\n      the Shop Tab or beat the game.\r\n      <br>\r\n      <br>\r\n      <span v-if=\"hasSpecialTypes\">\r\n        Enabling this setting will allow you to change individual Glyphs to special cosmetic types you have unlocked.\r\n      </span>\r\n      <span v-else>\r\n        Enabling or disabling this option will currently do nothing.\r\n      </span>\r\n    </div>\r\n    <PrimaryButton\r\n      class=\"o-primary-btn--subtab-option\"\r\n      @click=\"resetIndividual\"\r\n    >\r\n      Reset all individual Glyph cosmetics\r\n    </PrimaryButton>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-glyph-customization-group {\r\n  width: 100%;\r\n  margin-top: 0.5rem;\r\n  text-align: left;\r\n}\r\n\r\n.c-type-selection {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  margin-top: 0.5rem;\r\n}\r\n\r\n.o-disabled-cosmetics {\r\n  opacity: 0.5;\r\n}\r\n\r\n.c-single-type {\r\n  padding: 0.5rem;\r\n}\r\n\r\n.c-type-current {\r\n  border: 0.1rem solid var(--color-text);\r\n}\r\n\r\n.c-type-other {\r\n  padding: 0.6rem;\r\n}\r\n</style>\r\n"]}]}