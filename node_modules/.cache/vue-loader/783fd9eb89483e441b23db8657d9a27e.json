{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\ModifySeedModal.vue?vue&type=style&index=0&id=12a9bbe9&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\ModifySeedModal.vue","mtime":1745241596832},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouby1zZWxlY3RlZCB7DQogIGNvbG9yOiB2YXIoLS1jb2xvci10ZXh0LWludmVydGVkKTsNCiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3ItZ29vZCk7DQp9DQo="},{"version":3,"sources":["ModifySeedModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiJA;AACA;AACA;AACA","file":"ModifySeedModal.vue","sourceRoot":"src/components/modals","sourcesContent":["<script>\r\nimport ModalWrapper from \"@/components/modals/ModalWrapper\";\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\n\r\nexport default {\r\n  name: \"ModifySeedModal\",\r\n  components: {\r\n    ModalWrapper,\r\n    PrimaryButton,\r\n  },\r\n  data() {\r\n    return {\r\n      mode: 0,\r\n      inputSeed: \"\",\r\n      seedText: \"\",\r\n      convertedInput: false,\r\n      seedValue: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    choiceEnum: () => SPEEDRUN_SEED_STATE,\r\n    officialSeed: () => Speedrun.officialFixedSeed,\r\n  },\r\n  created() {\r\n    this.seedValue = player.speedrun.initialSeed;\r\n    this.inputSeed = `${player.speedrun.initialSeed}`;\r\n    this.convertedInput = false;\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.mode = player.speedrun.seedSelection;\r\n      this.seedText = Speedrun.seedModeText();\r\n    },\r\n    handleSeedInput() {\r\n      if (this.inputSeed.match(/^-?\\d+$/gu)) {\r\n        const num = Number(this.inputSeed);\r\n        this.seedValue = Math.abs(num) > 9e15\r\n          ? this.hashStringToSeed(this.inputSeed)\r\n          : Number(this.inputSeed);\r\n      } else {\r\n        this.seedValue = this.hashStringToSeed(this.inputSeed);\r\n      }\r\n      this.convertedInput = this.seedValue !== Number(this.inputSeed);\r\n\r\n      if (this.seedValue === 0) this.setMode(this.choiceEnum.FIXED);\r\n      else this.setMode(this.choiceEnum.PLAYER, this.seedValue);\r\n    },\r\n    setMode(mode, seed) {\r\n      if (mode === this.choiceEnum.PLAYER && this.seedValue === 0) return;\r\n      Speedrun.modifySeed(mode, parseInt(seed, 10));\r\n    },\r\n    buttonClass(mode) {\r\n      return {\r\n        \"o-primary-btn--subtab-option\": true,\r\n        \"o-selected\": mode === this.mode,\r\n      };\r\n    },\r\n    // String-to-number hashing function, using a fixed numerical seed inspired by Number.MAX_VALUE\r\n    // See https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript\r\n    hashStringToSeed(str) {\r\n      const seed = 17977308;\r\n      let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\r\n      for (let i = 0, ch; i < str.length; i++) {\r\n        ch = str.charCodeAt(i);\r\n        h1 = Math.imul(h1 ^ ch, 2654435761);\r\n        h2 = Math.imul(h2 ^ ch, 1597334677);\r\n      }\r\n      h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);\r\n      h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);\r\n      return 4294967296 * (2097151 & h2) + (h1 >>> 0);\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapper>\r\n    <template #header>\r\n      Modifying Glyph RNG Seed\r\n    </template>\r\n    <div>\r\n      All Glyph options beyond the first Reality for an entire playthrough are randomly determined from the very\r\n      beginning, based on the value of an initial seed number. The role of this seed is that it chooses a single,\r\n      <i>particular</i> set of Glyph options for your playthrough. If you or anyone else chooses the same seed\r\n      in a different run, you will get the same options for Glyphs.\r\n      <br>\r\n      <br>\r\n      You can switch between these three options any point before you generate your first Glyph.\r\n      <br>\r\n      Current Setting: <b>{{ seedText }}</b>\r\n      <br>\r\n      <br>\r\n      <PrimaryButton\r\n        :class=\"buttonClass(choiceEnum.FIXED)\"\r\n        @click=\"setMode(choiceEnum.FIXED)\"\r\n      >\r\n        Official Preset Seed\r\n      </PrimaryButton>\r\n      <br>\r\n      This is the default option which chooses the seed <b>{{ officialSeed }}</b>. Anyone who\r\n      chooses to not modify the seed at all will get these Glyph options.\r\n      <br>\r\n      <br>\r\n      <PrimaryButton\r\n        :class=\"buttonClass(choiceEnum.RANDOM)\"\r\n        @click=\"setMode(choiceEnum.RANDOM)\"\r\n      >\r\n        Randomized Seed\r\n      </PrimaryButton>\r\n      <br>\r\n      This selects a completely randomized seed value, producing Glyph options which are very likely to be\r\n      different from anyone else's playthrough unless they intentionally choose the same value.\r\n      <br>\r\n      <br>\r\n      <PrimaryButton\r\n        v-tooltip=\"seedValue === 0 ? 'Input seed cannot be zero!' : ''\"\r\n        :class=\"buttonClass(choiceEnum.PLAYER)\"\r\n        @click=\"setMode(choiceEnum.PLAYER, seedValue)\"\r\n      >\r\n        Player-selected Seed:\r\n      </PrimaryButton>\r\n      <input\r\n        ref=\"inputSeed\"\r\n        v-model=\"inputSeed\"\r\n        type=\"text\"\r\n        class=\"c-modal-input\"\r\n        @input=\"handleSeedInput()\"\r\n      >\r\n      <br>\r\n      This option sets your seed to the value you type into the text box.\r\n      <br>\r\n      <span v-if=\"seedValue !== 0\">\r\n        Your current input will be {{ convertedInput ? \"converted to\" : \"used as\" }} the number <b>{{ seedValue }}</b>.\r\n      </span>\r\n      <span v-else>\r\n        Your current input {{ convertedInput ? \"converts to\" : \"is equal to\" }} <b>0</b>;\r\n        the seed will default to Official Preset.\r\n      </span>\r\n      <br>\r\n      For technical reasons, this value must be must be non-zero to be accepted.\r\n    </div>\r\n  </ModalWrapper>\r\n</template>\r\n\r\n<style scoped>\r\n.o-selected {\r\n  color: var(--color-text-inverted);\r\n  background-color: var(--color-good);\r\n}\r\n</style>\r\n"]}]}