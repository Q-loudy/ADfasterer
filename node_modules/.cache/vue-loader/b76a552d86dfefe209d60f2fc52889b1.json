{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\ImportFilterModal.vue?vue&type=style&index=0&id=faabd192&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\ImportFilterModal.vue","mtime":1745241596820},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmMtc2luZ2xlLXR5cGUgew0KICBsZWZ0OiAwOw0KICB0ZXh0LWFsaWduOiBsZWZ0Ow0KICBwYWRkaW5nOiAwLjVyZW07DQp9DQo="},{"version":3,"sources":["ImportFilterModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwJA;AACA;AACA;AACA;AACA","file":"ImportFilterModal.vue","sourceRoot":"src/components/modals","sourcesContent":["<script>\r\nimport ImportFilterSingleType from \"./ImportFilterSingleType\";\r\nimport ModalWrapperChoice from \"@/components/modals/ModalWrapperChoice\";\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\n\r\nexport default {\r\n  name: \"ImportFilterModal\",\r\n  components: {\r\n    ModalWrapperChoice,\r\n    PrimaryButton,\r\n    ImportFilterSingleType\r\n  },\r\n  data() {\r\n    return {\r\n      currentSettings: {},\r\n      input: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    inputIsValid() {\r\n      let decoded;\r\n      try {\r\n        decoded = GameSaveSerializer.decodeText(this.input, \"glyph filter\");\r\n        return decoded.length > 0 && decoded.match(/^[0-9,.|/-]*$/u) !== null;\r\n      } catch {\r\n        return false;\r\n      }\r\n    },\r\n    parsedSettings() {\r\n      if (!this.inputIsValid) return null;\r\n\r\n      const decoded = GameSaveSerializer.decodeText(this.input, \"glyph filter\");\r\n      const parts = decoded.split(\"|\");\r\n      const typeInfo = {};\r\n      let partIndex = 3;\r\n      for (const type of ALCHEMY_BASIC_GLYPH_TYPES) {\r\n        if (!type) continue;\r\n        const subparts = parts[partIndex].split(\",\");\r\n        typeInfo[type] = {\r\n          rarity: Number(subparts[0]),\r\n          score: Number(subparts[1]),\r\n          effectCount: Number(subparts[2]),\r\n          specifiedMask: Number(subparts[3]),\r\n          effectScores: subparts[4].split(\"/\").map(s => Number(s)),\r\n        };\r\n        partIndex++;\r\n      }\r\n\r\n      return {\r\n        select: Number(parts[0]),\r\n        simple: Number(parts[1]),\r\n        trash: Number(parts[2]),\r\n        types: typeInfo,\r\n      };\r\n    },\r\n    selectStr() {\r\n      return this.changedValue(this.parsedSettings.select, this.currentSettings.select,\r\n        x => AutoGlyphProcessor.filterModeName(x));\r\n    },\r\n    basicCountStr() {\r\n      return this.changedValue(this.parsedSettings.simple, this.currentSettings.simple, formatInt);\r\n    },\r\n    trashStr() {\r\n      return this.changedValue(this.parsedSettings.trash, this.currentSettings.trash,\r\n        x => AutoGlyphProcessor.trashModeDesc(x));\r\n    },\r\n    // Hide effarig if it hasn't been unlocked yet\r\n    availableTypes() {\r\n      return ALCHEMY_BASIC_GLYPH_TYPES.filter(t => !GlyphTypes.locked.map(e => e.id).includes(t));\r\n    },\r\n    settingTooltipText() {\r\n      return `Mouseover each box for more details. ✔ and ✘ symbols denote an effect\r\n        selected/unselected for Specified Effect mode.`;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$refs.input.select();\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.currentSettings = JSON.parse(JSON.stringify(player.reality.glyphs.filter));\r\n    },\r\n    changedValue(oldVal, newVal, applyFn) {\r\n      if (oldVal === newVal) return \"(No change)\";\r\n      return `${applyFn(oldVal)} ➜ ${applyFn(newVal)}`;\r\n    },\r\n    importFilter() {\r\n      if (this.parsedSettings === null) return;\r\n      this.emitClose();\r\n      player.reality.glyphs.filter = this.parsedSettings;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapperChoice\r\n    :show-cancel=\"!inputIsValid\"\r\n    :show-confirm=\"false\"\r\n  >\r\n    <template #header>\r\n      Import Glyph filter settings\r\n    </template>\r\n    Note: Importing Glyph filter options will overwrite settings\r\n    <br>\r\n    in all filter modes, not just the currently-selected one.\r\n    <input\r\n      ref=\"input\"\r\n      v-model=\"input\"\r\n      type=\"text\"\r\n      class=\"c-modal-input c-modal-import__input\"\r\n      @keyup.enter=\"importSave\"\r\n      @keyup.esc=\"emitClose\"\r\n    >\r\n    <div class=\"c-modal-import__save-info\">\r\n      <div v-if=\"!input\" />\r\n      <div v-else-if=\"inputIsValid\">\r\n        <b>Selection mode:</b> {{ selectStr }}\r\n        <br>\r\n        <b>Effect Count (\"Number of Effects\"):</b> {{ basicCountStr }}\r\n        <br>\r\n        <b>Rejected Glyphs:</b> {{ trashStr }}\r\n        <br>\r\n        <u><b>Type-specific Settings</b></u> <span :ach-tooltip=\"settingTooltipText\">\r\n          <i class=\"fas fa-question-circle\" />\r\n        </span>\r\n        <br>\r\n        <ImportFilterSingleType\r\n          v-for=\"type in availableTypes\"\r\n          :key=\"type\"\r\n          class=\"c-single-type\"\r\n          :type=\"type\"\r\n          :curr-settings=\"currentSettings.types[type]\"\r\n          :new-settings=\"parsedSettings.types[type]\"\r\n        />\r\n      </div>\r\n      <div v-else>\r\n        Not a valid Glyph filter string\r\n      </div>\r\n    </div>\r\n\r\n    <PrimaryButton\r\n      v-if=\"inputIsValid\"\r\n      class=\"o-primary-btn--width-medium c-modal-message__okay-btn c-modal__confirm-btn\"\r\n      @click=\"importFilter\"\r\n    >\r\n      Import\r\n    </PrimaryButton>\r\n  </ModalWrapperChoice>\r\n</template>\r\n\r\n<style scoped>\r\n.c-single-type {\r\n  left: 0;\r\n  text-align: left;\r\n  padding: 0.5rem;\r\n}\r\n</style>\r\n"]}]}