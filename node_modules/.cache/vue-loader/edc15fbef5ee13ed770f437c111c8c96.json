{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\glyphs\\sidebar\\GlyphFilterPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\glyphs\\sidebar\\GlyphFilterPanel.vue","mtime":1745241597316},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["GlyphFilterPanel.vue"],"names":[],"mappingsfile":"GlyphFilterPanel.vue","sourceRoot":"src/components/tabs/glyphs/sidebar","sourcesContent":["<script>\r\nimport AutoSacrificeAdvancedTab from \"./AutoSacrificeAdvancedTab\";\r\nimport AutoSacrificeEffectTab from \"./AutoSacrificeEffectTab\";\r\nimport GlyphComponent from \"@/components/GlyphComponent\";\r\nimport SliderComponent from \"@/components/SliderComponent\";\r\n\r\nexport default {\r\n  name: \"GlyphFilterPanel\",\r\n  components: {\r\n    AutoSacrificeEffectTab,\r\n    AutoSacrificeAdvancedTab,\r\n    SliderComponent,\r\n    GlyphComponent\r\n  },\r\n  data() {\r\n    return {\r\n      mode: AUTO_GLYPH_SCORE.LOWEST_SACRIFICE,\r\n      effectCount: 0,\r\n      lockedTypes: GlyphTypes.locked.map(e => e.id),\r\n      advancedType: GLYPH_TYPES[0],\r\n      alchemyUnlocked: false,\r\n      // Note: there are two units at play: strength is from 1..3.5+; rarity is 0..100\r\n      rarityThresholds: GLYPH_TYPES.mapToObject(e => e, () => 0),\r\n      autoRealityForFilter: player.options.autoRealityForFilter,\r\n    };\r\n  },\r\n  computed: {\r\n    modes() {\r\n      return AUTO_GLYPH_SCORE;\r\n    },\r\n    glyphTypes() {\r\n      return GlyphTypes.list.filter(e => !this.lockedTypes.includes(e.id));\r\n    },\r\n    raritySliderProps() {\r\n      return {\r\n        min: 0,\r\n        max: 100,\r\n        width: \"18rem\",\r\n        valueInDot: true,\r\n        tooltip: \"never\",\r\n        \"dot-width\": \"2.2rem\",\r\n        \"dot-height\": \"1.6rem\",\r\n        \"dot-class\": \"c-glyph-sacrifice-options__rarity-slider-handle\",\r\n        \"bg-class\": \"c-glyph-sacrifice-options__rarity-slider-bg\",\r\n        \"process-class\": \"c-glyph-sacrifice-options__rarity-slider-process\",\r\n        style: {\r\n          \"margin-left\": \"1rem\",\r\n        }\r\n      };\r\n    },\r\n    glyphIconProps() {\r\n      return {\r\n        size: \"3rem\",\r\n        \"glow-blur\": \"0.3rem\",\r\n        \"glow-spread\": \"0.1rem\",\r\n        \"text-proportion\": 0.66\r\n      };\r\n    },\r\n    questionmarkTooltip() {\r\n      return `All Glyph choices are given a score and compared to a threshold based on the chosen mode. \r\n        The Glyph with the highest score is picked, but will still be Sacrificed if below the threshold.\r\n        (click for more detail)`;\r\n    },\r\n    autoRealityTooltip() {\r\n      return `If Auto-Reality is on, ignore all other settings and immediately Reality if no upcoming\r\n        Glyphs would be kept`;\r\n    },\r\n    unlockedModes() {\r\n      return Object.values(this.modes).filter(idx => this.isUnlocked(idx));\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.effectCount = player.reality.glyphs.filter.simple;\r\n      this.mode = AutoGlyphProcessor.scoreMode;\r\n      for (const type of generatedTypes) {\r\n        this.rarityThresholds[type] = AutoGlyphProcessor.types[type].rarity;\r\n      }\r\n      this.lockedTypes = GlyphTypes.locked.map(e => e.id);\r\n      this.alchemyUnlocked = Ra.unlocks.unlockGlyphAlchemy.canBeApplied;\r\n    },\r\n    optionClass(idx) {\r\n      const icon = this.modeIcon(idx);\r\n      return [\r\n        \"c-glyph-sacrifice-options__option\",\r\n        idx === this.mode\r\n          ? \"c-glyph-sacrifice-options__option--active\"\r\n          : \"c-glyph-sacrifice-options__option--inactive\",\r\n        icon\r\n      ];\r\n    },\r\n    modeIcon(idx) {\r\n      switch (idx) {\r\n        case this.modes.LOWEST_SACRIFICE:\r\n          return \"fas fa-burn\";\r\n        case this.modes.EFFECT_COUNT:\r\n          return \"fas fa-list-ul\";\r\n        case this.modes.RARITY_THRESHOLD:\r\n          return \"fas fa-gem\";\r\n        case this.modes.SPECIFIED_EFFECT:\r\n          return \"fas fa-tasks\";\r\n        case this.modes.EFFECT_SCORE:\r\n          return \"fas fa-list-ol\";\r\n        case this.modes.LOWEST_ALCHEMY:\r\n          return \"fas fa-atom\";\r\n        case this.modes.ALCHEMY_VALUE:\r\n          return \"fas fa-flask\";\r\n        default:\r\n          throw Error(\"Unrecognized glyph filter mode\");\r\n      }\r\n    },\r\n    strengthThreshold(type) {\r\n      return rarityToStrength(this.rarityThresholds[type]);\r\n    },\r\n    advancedTypeSelectStyle(type) {\r\n      const color = GlyphAppearanceHandler.getBorderColor(type.id);\r\n      return type.id === this.advancedType ? {\r\n        color,\r\n        \"text-shadow\": `0 0 0.25rem ${color}, 0 0 0.5rem ${color}, 0 0 0.75rem ${color}, 0 0 1rem ${color}`,\r\n      } : {};\r\n    },\r\n    setMode(m) {\r\n      AutoGlyphProcessor.scoreMode = m;\r\n      player.reality.hasCheckedFilter = false;\r\n    },\r\n    setRarityThreshold(id, value) {\r\n      AutoGlyphProcessor.types[id].rarity = value;\r\n    },\r\n    setEffectCount(event) {\r\n      const inputValue = event.target.value;\r\n      if (!isNaN(inputValue)) {\r\n        this.effectCount = Math.clamp(inputValue, 0, 8);\r\n        player.reality.glyphs.filter.simple = this.effectCount;\r\n      }\r\n    },\r\n    filterMode(index) {\r\n      return AutoGlyphProcessor.filterModeName(index);\r\n    },\r\n    isUnlocked(index) {\r\n      switch (index) {\r\n        case this.modes.LOWEST_SACRIFICE:\r\n        case this.modes.EFFECT_COUNT:\r\n        case this.modes.RARITY_THRESHOLD:\r\n        case this.modes.SPECIFIED_EFFECT:\r\n        case this.modes.EFFECT_SCORE:\r\n          return true;\r\n        case this.modes.LOWEST_ALCHEMY:\r\n        case this.modes.ALCHEMY_VALUE:\r\n          return this.alchemyUnlocked;\r\n        default:\r\n          throw Error(\"Unrecognized glyph filter mode\");\r\n      }\r\n    },\r\n    // Clicking bumps the rarity over to adjacent thresholds between rarities; normal clicks move to the higher one\r\n    // and shift-clicks move to the lower one. There is a loop-around that makes 100 go to 0 next and vice versa\r\n    bumpRarity(type) {\r\n      const rarityThresholds = GlyphRarities.map(r => strengthToRarity(r.minStrength));\r\n      let newRarity;\r\n      if (ui.view.shiftDown) {\r\n        const lower = rarityThresholds.filter(s => s < this.rarityThresholds[type]);\r\n        newRarity = lower.length === 0 ? 100 : lower.max();\r\n      } else {\r\n        // Note: As the minimum of an empty array is zero, this wraps around to 0% again if clicked at 100% rarity\r\n        newRarity = rarityThresholds.filter(s => s > this.rarityThresholds[type]).min();\r\n      }\r\n      this.setRarityThreshold(type, newRarity);\r\n    },\r\n    showFilterHowTo() {\r\n      ui.view.h2pForcedTab = GameDatabase.h2p.tabs.filter(tab => tab.name === \"Advanced Glyph Mechanics\")[0];\r\n      Modal.h2p.show();\r\n    },\r\n    getSymbol(type) {\r\n      return CosmeticGlyphTypes[type].currentSymbol.symbol;\r\n    },\r\n    toggleAutoReality() {\r\n      player.options.autoRealityForFilter = !player.options.autoRealityForFilter;\r\n      this.autoRealityForFilter = player.options.autoRealityForFilter;\r\n      player.reality.hasCheckedFilter = false;\r\n    },\r\n    exportFilterSettings() {\r\n      const filter = player.reality.glyphs.filter;\r\n      const serializeType = settings => [settings.rarity, settings.score, settings.effectCount,\r\n        settings.specifiedMask, settings.effectScores.join(\"/\")].join(\",\");\r\n      const simpleData = [filter.select, filter.simple, filter.trash].join(\"|\");\r\n      const typeData = ALCHEMY_BASIC_GLYPH_TYPES.map(t => serializeType(filter.types[t])).join(\"|\");\r\n      copyToClipboard(GameSaveSerializer.encodeText(`${simpleData}|${typeData}`, \"glyph filter\"));\r\n      GameUI.notify.info(\"Filter settings copied to clipboard\");\r\n    },\r\n    importFilterSettings() {\r\n      Modal.importFilter.show();\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-glyph-sacrifice-options c-glyph-sacrifice-options l-glyph-sidebar-panel-size\">\r\n    <div class=\"c-glyph-sacrifice-options c-glyph-sacrifice-options-container\">\r\n      <div class=\"c-filter-extra-btns c-top-left\">\r\n        <i\r\n          v-tooltip=\"'Export filter settings'\"\r\n          class=\"fas fa-file-export l-top-left-btn\"\r\n          @click=\"exportFilterSettings\"\r\n        />\r\n        <i\r\n          v-tooltip=\"'Import filter settings'\"\r\n          class=\"fas fa-file-import l-top-left-btn\"\r\n          @click=\"importFilterSettings\"\r\n        />\r\n      </div>\r\n      <div class=\"c-filter-extra-btns c-top-right\">\r\n        <i\r\n          v-tooltip=\"autoRealityTooltip\"\r\n          class=\"fas fa-recycle l-top-right-btn\"\r\n          :class=\"{ 'o-quick-reality' : autoRealityForFilter }\"\r\n          @click=\"toggleAutoReality\"\r\n        />\r\n        <i\r\n          v-tooltip=\"questionmarkTooltip\"\r\n          class=\"fas fa-question-circle l-top-right-btn o-borderless\"\r\n          @click=\"showFilterHowTo\"\r\n        />\r\n      </div>\r\n      Current Filter Mode:\r\n      <br>\r\n      {{ filterMode(mode) }}\r\n      <br>\r\n      <div class=\"c-glyph-filter-mode-container\">\r\n        <div\r\n          v-for=\"index in unlockedModes\"\r\n          :key=\"index\"\r\n          :class=\"optionClass(index)\"\r\n          @click=\"setMode(index)\"\r\n        >\r\n          <div class=\"c-glyph-sacrifice-options__option__tooltip\">\r\n            {{ filterMode(index) }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div\r\n      v-if=\"mode === modes.LOWEST_SACRIFICE\"\r\n      class=\"c-glyph-sacrifice-options__advanced\"\r\n    >\r\n      <br>\r\n      Glyph score is assigned based on type. Priority is given to Glyphs belonging to the type of which you have\r\n      the least total Glyph Sacrifice value.\r\n      <br>\r\n      <br>\r\n      This mode never keeps Glyphs, but will instead always sacrifice the Glyph it chooses.\r\n    </div>\r\n    <div\r\n      v-if=\"mode === modes.EFFECT_COUNT\"\r\n      class=\" c-glyph-sacrifice-options__advanced\"\r\n    >\r\n      <br>\r\n      Glyphs must have at least\r\n      <input\r\n        ref=\"effectCount\"\r\n        type=\"number\"\r\n        min=\"0\"\r\n        max=\"8\"\r\n        class=\"c-auto-sac-effect-tab__input\"\r\n        :value=\"effectCount\"\r\n        @blur=\"setEffectCount\"\r\n      >\r\n      effects to be chosen. Rarer Glyphs are preferred in ties.\r\n    </div>\r\n    <div\r\n      v-if=\"mode === modes.RARITY_THRESHOLD\"\r\n      class=\"l-glyph-sacrifice-options__rarity-sliders\"\r\n    >\r\n      <span class=\"c-glyph-sacrifice-options__advanced\">\r\n        Any Glyphs with rarity below these thresholds will be sacrificed.\r\n      </span>\r\n      <div\r\n        v-for=\"type in glyphTypes\"\r\n        :key=\"type.id\"\r\n        class=\"l-glyph-sacrifice-options__rarity-slider-div\"\r\n      >\r\n        <span @click=\"bumpRarity(type.id)\">\r\n          <GlyphComponent\r\n            :glyph=\"{type: type.id, strength: strengthThreshold(type.id) }\"\r\n            v-bind=\"glyphIconProps\"\r\n            class=\"o-clickable\"\r\n          />\r\n        </span>\r\n        <SliderComponent\r\n          v-bind=\"raritySliderProps\"\r\n          :value=\"rarityThresholds[type.id]\"\r\n          :width=\"'100%'\"\r\n          @input=\"setRarityThreshold(type.id, $event)\"\r\n        />\r\n      </div>\r\n    </div>\r\n    <div\r\n      v-if=\"mode === modes.SPECIFIED_EFFECT\"\r\n      class=\"c-glyph-sacrifice-options__advanced\"\r\n    >\r\n      <div>\r\n        Glyph Type:\r\n        <span\r\n          v-for=\"type in glyphTypes\"\r\n          :key=\"type.id\"\r\n          v-tooltip=\"type.id.capitalize()\"\r\n          class=\"l-glyph-sacrifice-options__advanced-type-select c-glyph-sacrifice-options__advanced-type-select\"\r\n          :style=\"advancedTypeSelectStyle(type)\"\r\n          @click=\"advancedType=type.id\"\r\n        >\r\n          {{ getSymbol(type.id) }}\r\n        </span>\r\n      </div>\r\n      <br>\r\n      <div class=\"l-glyph-sacrifice-options__rarity-slider-div\">\r\n        <span @click=\"bumpRarity(advancedType)\">\r\n          <GlyphComponent\r\n            :glyph=\"{type: advancedType, strength: strengthThreshold(advancedType) }\"\r\n            v-bind=\"glyphIconProps\"\r\n            class=\"o-clickable\"\r\n          />\r\n        </span>\r\n        <SliderComponent\r\n          v-bind=\"raritySliderProps\"\r\n          :value=\"rarityThresholds[advancedType]\"\r\n          :width=\"'100%'\"\r\n          @input=\"setRarityThreshold(advancedType, $event)\"\r\n        />\r\n      </div>\r\n      <template v-for=\"type in glyphTypes\">\r\n        <AutoSacrificeEffectTab\r\n          v-show=\"type.id === advancedType\"\r\n          :key=\"type.id\"\r\n          :glyph-type=\"type.id\"\r\n        />\r\n      </template>\r\n    </div>\r\n    <div\r\n      v-if=\"mode === modes.EFFECT_SCORE\"\r\n      class=\"c-glyph-sacrifice-options__advanced\"\r\n    >\r\n      <div>\r\n        Glyph Type:\r\n        <span\r\n          v-for=\"type in glyphTypes\"\r\n          :key=\"type.id\"\r\n          v-tooltip=\"type.id.capitalize()\"\r\n          class=\"l-glyph-sacrifice-options__advanced-type-select c-glyph-sacrifice-options__advanced-type-select\"\r\n          :style=\"advancedTypeSelectStyle(type)\"\r\n          @click=\"advancedType=type.id\"\r\n        >\r\n          {{ getSymbol(type.id) }}\r\n        </span>\r\n      </div>\r\n      <br>\r\n      <template v-for=\"type in glyphTypes\">\r\n        <AutoSacrificeAdvancedTab\r\n          v-show=\"type.id === advancedType\"\r\n          :key=\"type.id\"\r\n          :glyph-type=\"type.id\"\r\n        />\r\n      </template>\r\n    </div>\r\n    <div\r\n      v-if=\"mode === modes.LOWEST_ALCHEMY\"\r\n      class=\"c-glyph-sacrifice-options__advanced\"\r\n    >\r\n      <br>\r\n      Glyph score is assigned based on current Alchemy Resource totals. Priority is given to the Glyph type with\r\n      the lowest associated alchemy resource total.\r\n      <br>\r\n      <br>\r\n      This mode never keeps Glyphs.\r\n    </div>\r\n    <div\r\n      v-if=\"mode === modes.ALCHEMY_VALUE\"\r\n      class=\"c-glyph-sacrifice-options__advanced\"\r\n    >\r\n      <br>\r\n      Glyphs will be assigned values based on <i>current</i> refinement value, accounting for the type-specific\r\n      resource caps. Priority is given to Glyphs which are worth the most alchemy resources; Glyphs which would\r\n      cause you to hit a cap are effectively worth less.\r\n      <br>\r\n      <br>\r\n      This mode never keeps Glyphs.\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.o-clickable {\r\n  cursor: pointer;\r\n}\r\n\r\n.c-filter-extra-btns {\r\n  position: absolute;\r\n  display: flex;\r\n  flex-direction: row;\r\n  top: 0;\r\n  z-index: 2;\r\n  font-size: 1.3rem;\r\n}\r\n\r\n.c-top-left {\r\n  right: calc(100% - 6rem);\r\n  color: var(--color-reality-dark);\r\n}\r\n\r\n.c-top-right {\r\n  left: calc(100% - 5rem);\r\n}\r\n\r\n.l-top-left-btn {\r\n  cursor: pointer;\r\n  border: var(--var-border-width, 0.2rem) solid;\r\n  width: 2.5rem;\r\n  margin: 0.5rem 0 0 0.5rem;\r\n  padding: 0.5rem;\r\n}\r\n\r\n.l-top-right-btn {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  border: var(--var-border-width, 0.2rem) solid;\r\n  width: 2rem;\r\n  height: 2rem;\r\n  margin: 0.5rem 0.5rem 0 0;\r\n  padding: 0.2rem;\r\n}\r\n\r\n.o-borderless {\r\n  border: none;\r\n}\r\n\r\n.o-quick-reality {\r\n  background: var(--color-good);\r\n}\r\n</style>\r\n"]}]}