{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\GlyphSetName.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\GlyphSetName.vue","mtime":1745241596774},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["GlyphSetName.vue"],"names":[],"mappingsfile":"GlyphSetName.vue","sourceRoot":"src/components","sourcesContent":["<script>\r\nconst GLYPH_NAMES = {\r\n  companion: {\r\n    adjective: \"Huggable\",\r\n    noun: \"Companion\"\r\n  },\r\n  reality: {\r\n    adjective: \"Real\",\r\n    noun: \"Reality\"\r\n  },\r\n  music: {\r\n    adjective: { high: \"Melodic\", mid: \"Chordal\", low: \"Tuned\" },\r\n    // This noun is only used in the case of a single companion reskinned as music (resulting in \"Huggable Music\");\r\n    // otherwise the set's noun will always come from an actual glyph type instead of music\r\n    noun: \"Music\"\r\n  },\r\n  effarig: {\r\n    adjective: { both: \"Meta\", glyph: \"Stable\", rm: \"Mechanical\", none: \"Fragmented\" },\r\n    noun: { both: \"Effarig\", glyph: \"Stability\", rm: \"Mechanism\", none: \"Fragmentation\" }\r\n  },\r\n  cursed: {\r\n    adjective: { high: \"Cursed\", mid: \"Hexed\", low: \"Jinxed\" },\r\n    noun: \"Curse\"\r\n  },\r\n  power: {\r\n    adjective: { high: \"Powerful\", mid: \"Mastered\", low: \"Potential\" },\r\n    noun: \"Power\"\r\n  },\r\n  infinity: {\r\n    adjective: { high: \"Infinite\", mid: \"Boundless\", low: \"Immense\" },\r\n    noun: \"Infinity\"\r\n  },\r\n  replication: {\r\n    adjective: { high: \"Replicated\", mid: \"Simulated\", low: \"Duplicated\" },\r\n    noun: \"Replication\"\r\n  },\r\n  time: {\r\n    adjective: { high: \"Temporal\", mid: \"Chronal\", low: \"Transient\" },\r\n    noun: \"Time\"\r\n  },\r\n  dilation: {\r\n    adjective: { high: \"Dilated\", mid: \"Attenuated\", low: \"Diluted\" },\r\n    noun: \"Dilation\"\r\n  },\r\n};\r\n\r\nexport default {\r\n  name: \"GlyphSetName\",\r\n  props: {\r\n    glyphSet: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    forceColor: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isColored: true,\r\n      // Adjectives are added in descending order of adjOrder (basic glyphs are handled together)\r\n      glyphTypeList: [\r\n        { type: \"power\", perc: 0, adjOrder: 1 },\r\n        { type: \"infinity\", perc: 0, adjOrder: 1 },\r\n        { type: \"replication\", perc: 0, adjOrder: 1 },\r\n        { type: \"time\", perc: 0, adjOrder: 1 },\r\n        { type: \"dilation\", perc: 0, adjOrder: 1 },\r\n        { type: \"effarig\", perc: 0, adjOrder: 2 },\r\n        { type: \"music\", perc: 0, adjOrder: 3 },\r\n        { type: \"reality\", perc: 0, adjOrder: 4 },\r\n        { type: \"companion\", perc: 0, adjOrder: 5 },\r\n        { type: \"cursed\", perc: 0, adjOrder: 6 },\r\n      ],\r\n      sortedGlyphs: [],\r\n      slotCount: 0\r\n    };\r\n  },\r\n  computed: {\r\n    isDoomed: () => Pelle.isDoomed,\r\n    setName() {\r\n      this.sortGlyphList();\r\n      if (this.sortedGlyphs.length === 0) return \"Void\";\r\n      if (this.sortedGlyphs.length === 1) return this.singletonName;\r\n\r\n      // Figure out the noun part of the name first. If we have basic glyphs, this is generated through examining those\r\n      // specifically. Otherwise, we take the lowest-priority special glyph and turn it into its noun form\r\n      let adjList, nounPhrase;\r\n      if (this.sortedGlyphs.some(t => t.adjOrder === 1)) {\r\n        adjList = this.sortedGlyphs.filter(t => t.adjOrder !== 1);\r\n        nounPhrase = this.basicTypePhrase;\r\n      } else {\r\n        adjList = [...this.sortedGlyphs];\r\n        nounPhrase = this.getNoun(adjList.pop());\r\n      }\r\n\r\n      const adjectives = [];\r\n      for (const listEntry of adjList) adjectives.push(this.getAdjective(listEntry));\r\n      return `${adjectives.join(\" \")} ${nounPhrase}`;\r\n    },\r\n    basicTypePhrase() {\r\n      const basicGlyphList = this.sortedGlyphs.filter(t => BASIC_GLYPH_TYPES.includes(t.type) && t.perc !== 0);\r\n      switch (basicGlyphList.length) {\r\n        case 1:\r\n          return GLYPH_NAMES[basicGlyphList[0].type].noun;\r\n        case 2:\r\n          // Call it a mixture if they're equal and apply adjectives of appropriate magnitude\r\n          if (basicGlyphList[0].perc === basicGlyphList[1].perc) {\r\n            return [this.getAdjective(basicGlyphList[0]),\r\n              this.getAdjective(basicGlyphList[1]),\r\n              \"Mixture\"\r\n            ].join(\" \");\r\n          }\r\n          // Otherwise, give it a noun from the largest component\r\n          return `${this.getAdjective(basicGlyphList[1])} ${this.getNoun(basicGlyphList[0])}`;\r\n        case 3:\r\n          // Give it a noun if there's a clear majority\r\n          if (basicGlyphList[0].perc > basicGlyphList[1].perc) {\r\n            return [this.getAdjective(basicGlyphList[1]),\r\n              this.getAdjective(basicGlyphList[2]),\r\n              this.getNoun(basicGlyphList[0]),\r\n            ].join(\" \");\r\n          }\r\n          // This is relatively rare; we have 1/1/1, which means that we may also already have 3 other adjectives.\r\n          // In this case we make an exception and shorten the name instead of providing another 4 words\r\n          if (basicGlyphList[0].perc === basicGlyphList[2].perc) return \"Mixed Irregularity\";\r\n          // The only case left is 2/2/1, where we have plenty of room for words\r\n          return [this.getAdjective(basicGlyphList[0]),\r\n            this.getAdjective(basicGlyphList[1]),\r\n            this.getAdjective(basicGlyphList[2]),\r\n            \"Irregularity\"\r\n          ].join(\" \");\r\n        case 4:\r\n          // Don't bother filling the name with excessive adjectives if we have an equal proportion (1/1/1/1),\r\n          // otherwise we take the largest component and ignore all the others (2/1/1/1)\r\n          if (basicGlyphList[0].perc === basicGlyphList[1].perc) return \"Irregular Jumble\";\r\n          return `${this.getAdjective(basicGlyphList[0])} Jumble`;\r\n        case 5:\r\n          // This is in reference to the achievement name, and can only occur with exactly one of every basic glyph.\r\n          // Due to music glyphs doubling-up contributions, this may result in a \"Melodic Royal Flush\" or similar\r\n          return \"Royal Flush\";\r\n        default:\r\n          throw new Error(\"Unexpected glyph set configuration in GlyphSetName\");\r\n      }\r\n    },\r\n    // Check for single-type sets and give them a special name based on how much of the full equipped slots they take up\r\n    singletonName() {\r\n      if (this.sortedGlyphs[0].type === \"effarig\") return GLYPH_NAMES.effarig.noun[this.getEffarigProp()];\r\n      const singleGlyphTypes = [\"reality\", \"companion\"];\r\n      for (const key of singleGlyphTypes) {\r\n        if (this.sortedGlyphs[0].type === key) return GLYPH_NAMES[key].noun;\r\n      }\r\n\r\n      // We want a bit of additional flavor for partially-filled sets\r\n      const word = GLYPH_NAMES[this.sortedGlyphs[0].type].noun;\r\n      const perc = this.sortedGlyphs[0].perc;\r\n      if (this.isDoomed) return `Doomed ${word}`;\r\n      if (perc === 100) return `Full ${word}`;\r\n      if (perc >= 75) return `Strengthened ${word}`;\r\n      if (perc >= 40) return `Partial ${word}`;\r\n      return `Weak ${word}`;\r\n    },\r\n    mainGlyphName() {\r\n      // This returns the type of Glyph that we want for color determinations.\r\n      // The priority is Empty > Cursed > Companion > Reality > 50% or more normal Glyphs > Effarig > any normal Glyph\r\n      if (this.sortedGlyphs.length === 0) return { id: \"none\", currentColor: { border: \"#888888\" } };\r\n      if (this.calculateGlyphPercent(\"cursed\")) return CosmeticGlyphTypes.cursed;\r\n      if (this.calculateGlyphPercent(\"companion\")) return CosmeticGlyphTypes.companion;\r\n      if (this.calculateGlyphPercent(\"reality\")) return CosmeticGlyphTypes.reality;\r\n      if (this.calculateGlyphPercent(\"music\") >= 50) return CosmeticGlyphTypes.music;\r\n      const primaryType = this.sortedGlyphs.filter(t => t.adjOrder === 1)[0];\r\n      if (primaryType?.perc >= 50) return CosmeticGlyphTypes[primaryType.type];\r\n      if (this.calculateGlyphPercent(\"effarig\")) return CosmeticGlyphTypes.effarig;\r\n      return CosmeticGlyphTypes[primaryType.type];\r\n    },\r\n    textColor() {\r\n      // If it's the singular equipped glyph in Doomed, we color it crimson\r\n      // If its cursed, we give it the celestial color because the default (without cosmetics) black is often unreadable\r\n      // If we have 3 types of Glyphs, and none of them have more than 30% total, lets get a copper color.\r\n      // And if we have none of the above (which is most common), lets get the color of the main Glyph.\r\n      if (this.isDoomed && this.glyphSet.length === 1) return \"var(--color-pelle--base)\";\r\n      if (this.mainGlyphName.id === \"cursed\") return \"var(--color-celestials)\";\r\n      if (this.mainGlyphName.id === \"music\") return CosmeticGlyphTypes.music.currentColor.border;\r\n      if (this.sortedGlyphs.length >= 3 && this.sortedGlyphs[0].perc <= 30) return \"#C46200\";\r\n      return this.mainGlyphName.currentColor.border;\r\n    },\r\n    textStyle() {\r\n      this.$recompute(\"mainGlyphName\");\r\n      // If you have the player option to not show color enabled, and this isn't a special case forcing color, return {}\r\n      if (!this.isColored && !this.forceColor) return {};\r\n      // Otherwise, lets set the shadow to be 4, each offset to a different corner, and bluring by 1px,\r\n      // then bluring by 3px with no offset with the same color as the text.\r\n      // If its a Reality Glyph, assign it Reality Glyph's animation.\r\n      return {\r\n        color: this.textColor,\r\n        \"text-shadow\": `-1px 1px 1px var(--color-text-base), 1px 1px 1px var(--color-text-base),\r\n                        -1px -1px 1px var(--color-text-base), 1px -1px 1px var(--color-text-base),\r\n                        0 0 3px ${this.textColor}`,\r\n        animation: this.mainGlyphName.id === \"reality\" ? \"a-reality-glyph-description-cycle 10s infinite\" : undefined,\r\n      };\r\n    }\r\n  },\r\n  created() {\r\n    this.on$(GAME_EVENT.GLYPHS_CHANGED, this.sortGlyphList);\r\n    this.sortGlyphList();\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isColored = player.options.glyphTextColors;\r\n      // Without max, Doomed may retroactively zero the slot count of older sets in records and mess up their names\r\n      // This can retroactively change names on old sets when gaining new slots in reality upgrades, but this is\r\n      // probably acceptable since the old names may have become unattainable with the new slot count anyway\r\n      this.slotCount = Math.max(Glyphs.activeSlotCount, this.glyphSet.length);\r\n    },\r\n    getEffarigProp() {\r\n      const effarigRM = this.glyphSet.some(i => getSingleGlyphEffectFromBitmask(\"effarigrm\", i));\r\n      const effarigGlyph = this.glyphSet.some(i => getSingleGlyphEffectFromBitmask(\"effarigglyph\", i));\r\n      if (effarigRM && effarigGlyph) return \"both\";\r\n      if (effarigRM) return \"rm\";\r\n      if (effarigGlyph) return \"glyph\";\r\n      return \"none\";\r\n    },\r\n    calculateGlyphPercent(name) {\r\n      const percentPerGlyph = this.slotCount ? 100 / this.slotCount : 0;\r\n      if (name === \"music\") return this.glyphSet.filter(i => Glyphs.isMusicGlyph(i)).length * percentPerGlyph;\r\n      // Take the amount of a type of glyph in the set, divide by the maximum number of glyphs, then * 100 to get %\r\n      return this.glyphSet.filter(i => i.type === name).length * percentPerGlyph;\r\n    },\r\n    sortGlyphList() {\r\n      this.$recompute(\"textColor\");\r\n      this.glyphTypeList.forEach(t => t.perc = this.calculateGlyphPercent(t.type));\r\n      this.sortedGlyphs = this.glyphTypeList.filter(t => t.perc !== 0);\r\n      // This composite function is required in order to ensure consistent names with equal percentages, as JS doesn't\r\n      // guarantee .sort() operations are stable sorts. Sorts by adjOrder, followed by perc, followed by alphabetical.\r\n      const sortFn = t => 100 * t.adjOrder + t.perc + t.type.charCodeAt(0) / 1000;\r\n      this.sortedGlyphs.sort((a, b) => sortFn(b) - sortFn(a));\r\n    },\r\n    getAdjective(listEntry) {\r\n      if (listEntry.type === \"effarig\") return GLYPH_NAMES.effarig.adjective[this.getEffarigProp()];\r\n      const adjFn = val => {\r\n        if (val >= 60) return \"high\";\r\n        if (val >= 40) return \"mid\";\r\n        return \"low\";\r\n      };\r\n      const adj = GLYPH_NAMES[listEntry.type].adjective;\r\n      return typeof adj === \"string\" ? adj : adj[adjFn(listEntry.perc)];\r\n    },\r\n    getNoun(listEntry) {\r\n      if (listEntry.type === \"effarig\") return GLYPH_NAMES.effarig.noun[this.getEffarigProp()];\r\n      return GLYPH_NAMES[listEntry.type].noun;\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <span\r\n      :style=\"textStyle\"\r\n      class=\"c-current-glyph-effects__header\"\r\n    >\r\n      {{ setName }}\r\n    </span>\r\n  </div>\r\n</template>\r\n"]}]}