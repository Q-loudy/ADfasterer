{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\glyphs\\TypeSacrifice.vue?vue&type=style&index=0&id=f28c0880&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\glyphs\\TypeSacrifice.vue","mtime":1745241597311},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouYy1zYWNyaWZpY2VkLWdseXBoc19fdHlwZS1zeW1ib2wgew0KICBtYXJnaW4tcmlnaHQ6IDAuN3JlbTsNCn0NCg=="},{"version":3,"sources":["TypeSacrifice.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyHA;AACA;AACA","file":"TypeSacrifice.vue","sourceRoot":"src/components/tabs/glyphs","sourcesContent":["<script>\r\nexport default {\r\n  name: \"TypeSacrifice\",\r\n  props: {\r\n    type: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    hasDragover: {\r\n      type: Boolean,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      amount: 0,\r\n      effectValue: 0,\r\n      isColored: true,\r\n      willSacrifice: false,\r\n    };\r\n  },\r\n  computed: {\r\n    typeConfig() {\r\n      return GlyphTypes[this.type];\r\n    },\r\n    sacConfig() {\r\n      return GlyphSacrifice[this.type].config;\r\n    },\r\n    style() {\r\n      if (!this.isColored) return { };\r\n      const color = GlyphAppearanceHandler.getBorderColor(this.type);\r\n      const animateReality = this.typeConfig.id === \"reality\" && !player.reality.glyphs.cosmetics.colorMap.reality;\r\n      return {\r\n        color,\r\n        \"text-shadow\": `-1px 1px 1px var(--color-text-base), 1px 1px 1px var(--color-text-base),\r\n                            -1px -1px 1px var(--color-text-base), 1px -1px 1px var(--color-text-base),\r\n                            0 0 3px ${color}`,\r\n        animation: animateReality ? \"a-reality-glyph-description-cycle 10s infinite\" : undefined,\r\n      };\r\n    },\r\n    symbol() {\r\n      return CosmeticGlyphTypes[this.type].currentSymbol.symbol;\r\n    },\r\n    formatAmount() {\r\n      return format(this.amount, 2, 2);\r\n    },\r\n    description() {\r\n      return this.sacConfig.description(this.effectValue);\r\n    },\r\n    newDescription() {\r\n      return this.sacConfig.description(this.sacConfig.effect(this.currentSacrifice.sacrificeValue));\r\n    },\r\n    currentSacrifice() {\r\n      const viewModel = this.$viewModel.tabs.reality;\r\n      return viewModel.mouseoverGlyphInfo.type === \"\"\r\n        ? viewModel.draggingGlyphInfo\r\n        : viewModel.mouseoverGlyphInfo;\r\n    },\r\n    showNewSacrifice() {\r\n      const matchType = this.currentSacrifice.type === this.type;\r\n      const validSac = this.willSacrifice && this.currentSacrifice.inInventory;\r\n      const keybindActive = ui.view.shiftDown;\r\n      return matchType && (this.hasDragover || (keybindActive && validSac));\r\n    },\r\n    formatNewAmount() {\r\n      return format(this.currentSacrifice.sacrificeValue, 2, 2);\r\n    },\r\n    formatTotalAmount() {\r\n      return format(this.amount + this.currentSacrifice.sacrificeValue, 2, 2);\r\n    },\r\n  },\r\n  created() {\r\n    this.on$(GAME_EVENT.GLYPH_VISUAL_CHANGE, () => {\r\n      this.$recompute(\"style\");\r\n    });\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.amount = player.reality.glyphs.sac[this.type];\r\n      this.effectValue = GlyphSacrifice[this.type].effectValue;\r\n      this.isColored = player.options.glyphTextColors;\r\n      this.willSacrifice = AutoGlyphProcessor.sacMode === AUTO_GLYPH_REJECT.SACRIFICE ||\r\n        (AutoGlyphProcessor.sacMode === AUTO_GLYPH_REJECT.REFINE_TO_CAP &&\r\n          this.currentSacrifice.refineValue === 0);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    v-if=\"amount > 0\"\r\n    :style=\"style\"\r\n  >\r\n    <div>\r\n      <div class=\"l-sacrificed-glyphs__type-symbol c-sacrificed-glyphs__type-symbol\">\r\n        {{ symbol }}\r\n      </div>\r\n      <div class=\"l-sacrificed-glyphs__type-amount c-sacrificed-glyphs__type-amount\">\r\n        {{ formatAmount }}\r\n        <span\r\n          v-if=\"showNewSacrifice\"\r\n          class=\"c-sacrificed-glyphs__type-new-amount\"\r\n        >\r\n          + {{ formatNewAmount }} âžœ {{ formatTotalAmount }}\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <span\r\n      v-if=\"showNewSacrifice\"\r\n      class=\"c-sacrificed-glyphs__type-new-amount\"\r\n    >\r\n      {{ newDescription }}\r\n    </span>\r\n    <span v-else>\r\n      {{ description }}\r\n    </span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-sacrificed-glyphs__type-symbol {\r\n  margin-right: 0.7rem;\r\n}\r\n</style>\r\n"]}]}