{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\AutomatorScriptTemplate.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\AutomatorScriptTemplate.vue","mtime":1745241596808},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgeyBibG9ja2lmeVRleHRBdXRvbWF0b3IgfSBmcm9tICJAL2NvcmUvYXV0b21hdG9yIjsNCmltcG9ydCBNb2RhbFdyYXBwZXIgZnJvbSAiQC9jb21wb25lbnRzL21vZGFscy9Nb2RhbFdyYXBwZXIiOw0KDQpleHBvcnQgZGVmYXVsdCB7DQogIG5hbWU6ICJBdXRvbWF0b3JTY3JpcHRUZW1wbGF0ZSIsDQogIGNvbXBvbmVudHM6IHsNCiAgICBNb2RhbFdyYXBwZXIsDQogIH0sDQogIHByb3BzOiB7DQogICAgd2FybmluZ3M6IHsNCiAgICAgIHR5cGU6IEZ1bmN0aW9uLA0KICAgICAgcmVxdWlyZWQ6IHRydWUsDQogICAgfSwNCiAgICBuYW1lOiB7DQogICAgICB0eXBlOiBTdHJpbmcsDQogICAgICByZXF1aXJlZDogdHJ1ZSwNCiAgICB9LA0KICAgIGRlc2NyaXB0aW9uOiB7DQogICAgICB0eXBlOiBTdHJpbmcsDQogICAgICByZXF1aXJlZDogdHJ1ZSwNCiAgICB9LA0KICAgIGlucHV0czogew0KICAgICAgdHlwZTogQXJyYXksDQogICAgICByZXF1aXJlZDogdHJ1ZSwNCiAgICB9DQogIH0sDQogIGRhdGEoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIHRlbXBsYXRlSW5wdXRzOiB7fSwNCiAgICAgIGJ1dHRvblRleHRTdHJpbmdzOiBbXSwNCiAgICAgIGludmFsaWRJbnB1dENvdW50OiAwLA0KICAgICAgdGVtcGxhdGVQcm9wczogbnVsbCwNCiAgICAgIGN1cnJlbnRQcmVzZXQ6ICIiLA0KICAgICAgaXNCbG9jazogZmFsc2UsDQogICAgfTsNCiAgfSwNCiAgY29tcHV0ZWQ6IHsNCiAgICBwcmVzZXRzOiAoKSA9PiBwbGF5ZXIudGltZXN0dWR5LnByZXNldHMsDQogICAgcGFyYW1zOiAoKSA9PiBHYW1lRGF0YWJhc2UucmVhbGl0eS5hdXRvbWF0b3IudGVtcGxhdGVzLnBhcmFtVHlwZXMsDQogICAgdmFsaWRXYXJuaW5ncygpIHsNCiAgICAgIHJldHVybiB0aGlzLmludmFsaWRJbnB1dENvdW50ID09PSAwDQogICAgICAgID8gdGhpcy53YXJuaW5ncygpLmNvbmNhdCh0aGlzLnRlbXBsYXRlU2NyaXB0Py53YXJuaW5ncykNCiAgICAgICAgOiB0aGlzLndhcm5pbmdzKCk7DQogICAgfSwNCiAgICB0ZW1wbGF0ZVNjcmlwdCgpIHsNCiAgICAgIGlmICh0aGlzLmludmFsaWRJbnB1dENvdW50ICE9PSAwKSByZXR1cm4gbnVsbDsNCiAgICAgIHJldHVybiBuZXcgU2NyaXB0VGVtcGxhdGUodGhpcy50ZW1wbGF0ZVByb3BzLCB0aGlzLm5hbWUpOw0KICAgIH0NCiAgfSwNCiAgLy8gTWFueSBwcm9wcyBpbiB0aGlzIGNvbXBvbmVudCBhcmUgZ2VuZXJhdGVkIGR5bmFtaWNhbGx5IGZyb20gYSBHYW1lREIgZW50cnksIGJ1dCBWdWUgY2FuIG9ubHkgZ2l2ZSByZWFjdGl2ZQ0KICAvLyBiZWhhdmlvciB0byBwcm9wcyB0aGF0IGV4aXN0IG9uIGRlY2xhcmF0aW9uLiBXZSBuZWVkIGFsbCB0aGUgZHluYW1pY2FsbHkgZ2VuZXJhdGVkIGlucHV0cyB0byBiZSByZWFjdGl2ZSwgc28gd2UNCiAgLy8gc3BlY2lmaWNhbGx5ICRzZXQgdGhlbSBoZXJlIG9uIGluaXRpYWxpemF0aW9uOyBhZGRpdGlvbmFsbHkgd2UgZ2l2ZSB0aGVtIGEgZGVmYXVsdCB2YWx1ZSBzbyB0aGF0IGxhdGVyIGZ1bmN0aW9uDQogIC8vIGNhbGxzIGRvbid0IGVycm9yIG91dCBmcm9tIHVuZGVmaW5lZCBpbnB1dHMuDQogIGNyZWF0ZWQoKSB7DQogICAgZm9yIChjb25zdCBpbnB1dCBvZiB0aGlzLmlucHV0cykgew0KICAgICAgY29uc3QgYm9vbFByb3AgPSB0aGlzLnBhcmFtVHlwZU9iamVjdChpbnB1dC50eXBlKS5ib29sRGlzcGxheTsNCiAgICAgIGlmIChib29sUHJvcCkgew0KICAgICAgICB0aGlzLiRzZXQodGhpcy50ZW1wbGF0ZUlucHV0cywgaW5wdXQubmFtZSwgZmFsc2UpOw0KICAgICAgICB0aGlzLmJ1dHRvblRleHRTdHJpbmdzW2lucHV0Lm5hbWVdID0gYm9vbFByb3BbMV07DQogICAgICB9IGVsc2Ugew0KICAgICAgICB0aGlzLiRzZXQodGhpcy50ZW1wbGF0ZUlucHV0cywgaW5wdXQubmFtZSwgIiIpOw0KICAgICAgICB0aGlzLmludmFsaWRJbnB1dENvdW50Kys7DQogICAgICB9DQogICAgfQ0KICB9LA0KICBtZXRob2RzOiB7DQogICAgdXBkYXRlKCkgew0KICAgICAgdGhpcy5pc0Jsb2NrID0gcGxheWVyLnJlYWxpdHkuYXV0b21hdG9yLnR5cGUgPT09IEFVVE9NQVRPUl9UWVBFLkJMT0NLOw0KICAgIH0sDQogICAgcGFyYW1UeXBlT2JqZWN0KG5hbWUpIHsNCiAgICAgIHJldHVybiB0aGlzLnBhcmFtcy5maW5kKHAgPT4gcC5uYW1lID09PSBuYW1lKTsNCiAgICB9LA0KICAgIGlzVmFsaWQoaW5wdXQpIHsNCiAgICAgIGNvbnN0IHR5cGVPYmplY3QgPSB0aGlzLnBhcmFtVHlwZU9iamVjdChpbnB1dC50eXBlKTsNCiAgICAgIHJldHVybiB0eXBlT2JqZWN0LmlzVmFsaWRTdHJpbmcgPyB0eXBlT2JqZWN0LmlzVmFsaWRTdHJpbmcodGhpcy50ZW1wbGF0ZUlucHV0c1tpbnB1dC5uYW1lXSkgOiB0cnVlOw0KICAgIH0sDQogICAgdmFsaWRpdHlDbGFzcyhpbnB1dCkgew0KICAgICAgaWYgKGlucHV0Lm5hbWUgPT09ICJ0cmVlU3R1ZGllcyIgJiYgdGhpcy5jdXJyZW50UHJlc2V0ICE9PSAiIikgew0KICAgICAgICByZXR1cm4gImMtYXV0b21hdG9yLXRlbXBsYXRlLXRleHRib3gtLXByZXNldCI7DQogICAgICB9DQogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKGlucHV0KQ0KICAgICAgICA/IHVuZGVmaW5lZA0KICAgICAgICA6ICJjLWF1dG9tYXRvci10ZW1wbGF0ZS10ZXh0Ym94LS1pbnZhbGlkIjsNCiAgICB9LA0KICAgIGxvYWRQcmVzZXQobmFtZSwgaWQpIHsNCiAgICAgIHRoaXMudGVtcGxhdGVJbnB1dHMudHJlZVN0dWRpZXMgPSBuYW1lID8gYE5BTUUgJHtuYW1lfWAgOiBgSUQgJHtpZH1gOw0KICAgICAgdGhpcy51cGRhdGVUZW1wbGF0ZVByb3BzKCk7DQogICAgfSwNCiAgICBsb2FkQ3VycmVudCgpIHsNCiAgICAgIHRoaXMudGVtcGxhdGVJbnB1dHMudHJlZVN0dWRpZXMgPSBHYW1lQ2FjaGUuY3VycmVudFN0dWR5VHJlZS52YWx1ZS5leHBvcnRTdHJpbmc7DQogICAgICB0aGlzLnVwZGF0ZVRlbXBsYXRlUHJvcHMoKTsNCiAgICB9LA0KICAgIHVwZGF0ZVRlbXBsYXRlUHJvcHMoKSB7DQogICAgICB0aGlzLnRlbXBsYXRlUHJvcHMgPSB7fTsNCiAgICAgIHRoaXMuaW52YWxpZElucHV0Q291bnQgPSAwOw0KICAgICAgZm9yIChjb25zdCBpbnB1dCBvZiB0aGlzLmlucHV0cykgew0KICAgICAgICBjb25zdCB0eXBlT2JqID0gdGhpcy5wYXJhbVR5cGVPYmplY3QoaW5wdXQudHlwZSk7DQogICAgICAgIGNvbnN0IG1hcEZuID0geCA9PiAodHlwZU9iai5tYXAgPyB0eXBlT2JqLm1hcCh4KSA6IHgpOw0KICAgICAgICB0aGlzLnRlbXBsYXRlUHJvcHNbaW5wdXQubmFtZV0gPSBtYXBGbih0aGlzLnRlbXBsYXRlSW5wdXRzW2lucHV0Lm5hbWVdKTsNCiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoaW5wdXQpKSB0aGlzLmludmFsaWRJbnB1dENvdW50Kys7DQogICAgICB9DQoNCiAgICAgIC8vIFdlIHRyZWF0IHRyZWVTdHVkaWVzIGFzIGEgc3BlY2lhbCBwcm9wIHdoaWNoIHdpbGwgc2V0IHRyZWVQcmVzZXQgaWYgaXQgbWF0Y2hlcyB0aGUgZm9ybWF0ICJOQU1FIFtuYW1lXSINCiAgICAgIGNvbnN0IG5hbWVNYXRjaCA9IHRoaXMudGVtcGxhdGVQcm9wcy50cmVlU3R1ZGllcy5tYXRjaCgvXk5BTUUgKC57MSw0fSkkL3UpOw0KICAgICAgY29uc3QgaWRNYXRjaCA9IHRoaXMudGVtcGxhdGVQcm9wcy50cmVlU3R1ZGllcy5tYXRjaCgvXklEIChcZCkkL3UpOw0KDQogICAgICBpZiAobmFtZU1hdGNoKSB7DQogICAgICAgIGNvbnN0IG5hbWVTdHIgPSBuYW1lTWF0Y2ggPyBuYW1lTWF0Y2hbMV0gOiAiIjsNCiAgICAgICAgdGhpcy5jdXJyZW50UHJlc2V0ID0gdGhpcy5wcmVzZXRzLmZpbmQoeCA9PiB4Lm5hbWUgPT09IG5hbWVTdHIpLm5hbWU7DQogICAgICB9IGVsc2UgaWYgKGlkTWF0Y2gpIHsNCiAgICAgICAgY29uc3QgaWRTdHIgPSBpZE1hdGNoID8gaWRNYXRjaFsxXSA6ICIiOw0KICAgICAgICB0aGlzLmN1cnJlbnRQcmVzZXQgPSB0aGlzLnByZXNldHMuc29tZSgoeCwgeSkgPT4geSA9PT0gaWRTdHIgLSAxKSA/IGlkU3RyIDogIiI7DQogICAgICB9DQoNCiAgICAgIHRoaXMudGVtcGxhdGVQcm9wcy50cmVlUHJlc2V0ID0gdGhpcy5jdXJyZW50UHJlc2V0ID09PSAiIiA/IG51bGwgOiB0aGlzLmN1cnJlbnRQcmVzZXQ7DQogICAgfSwNCiAgICB1cGRhdGVCdXR0b24oaW5wdXQpIHsNCiAgICAgIHRoaXMudGVtcGxhdGVJbnB1dHNbaW5wdXQubmFtZV0gPSAhdGhpcy50ZW1wbGF0ZUlucHV0c1tpbnB1dC5uYW1lXTsNCiAgICAgIGNvbnN0IGJvb2xQcm9wID0gdGhpcy5wYXJhbVR5cGVPYmplY3QoaW5wdXQudHlwZSkuYm9vbERpc3BsYXk7DQogICAgICB0aGlzLmJ1dHRvblRleHRTdHJpbmdzW2lucHV0Lm5hbWVdID0gYm9vbFByb3BbdGhpcy50ZW1wbGF0ZUlucHV0c1tpbnB1dC5uYW1lXSA/IDAgOiAxXTsNCiAgICAgIHRoaXMudXBkYXRlVGVtcGxhdGVQcm9wcygpOw0KICAgIH0sDQogICAgY29weUFuZENsb3NlKCkgew0KICAgICAgaWYgKHRoaXMuaXNCbG9jaykgew0KICAgICAgICBjb25zdCBuZXdUZW1wbGF0ZUJsb2NrID0gew0KICAgICAgICAgIG5hbWU6IGBUZW1wbGF0ZTogJHt0aGlzLm5hbWV9YCwNCiAgICAgICAgICBibG9ja3M6IGJsb2NraWZ5VGV4dEF1dG9tYXRvcih0aGlzLnRlbXBsYXRlU2NyaXB0LnNjcmlwdCkuYmxvY2tzDQogICAgICAgIH07DQogICAgICAgIEF1dG9tYXRvckRhdGEuYmxvY2tUZW1wbGF0ZXMucHVzaChuZXdUZW1wbGF0ZUJsb2NrKTsNCiAgICAgICAgR2FtZVVJLm5vdGlmeS5pbmZvKCJDdXN0b20gdGVtcGxhdGUgYmxvY2sgY3JlYXRlZCIpOw0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgY29weVRvQ2xpcGJvYXJkKHRoaXMudGVtcGxhdGVTY3JpcHQuc2NyaXB0KTsNCiAgICAgICAgR2FtZVVJLm5vdGlmeS5pbmZvKCJUZW1wbGF0ZSBjb3BpZWQgdG8gY2xpcGJvYXJkIik7DQogICAgICB9DQogICAgICB0aGlzLmVtaXRDbG9zZSgpOw0KICAgIH0NCiAgfQ0KfTsNCg=="},{"version":3,"sources":["AutomatorScriptTemplate.vue"],"names":[],"mappingsfile":"AutomatorScriptTemplate.vue","sourceRoot":"src/components/modals","sourcesContent":["<script>\r\nimport { blockifyTextAutomator } from \"@/core/automator\";\r\nimport ModalWrapper from \"@/components/modals/ModalWrapper\";\r\n\r\nexport default {\r\n  name: \"AutomatorScriptTemplate\",\r\n  components: {\r\n    ModalWrapper,\r\n  },\r\n  props: {\r\n    warnings: {\r\n      type: Function,\r\n      required: true,\r\n    },\r\n    name: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    inputs: {\r\n      type: Array,\r\n      required: true,\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      templateInputs: {},\r\n      buttonTextStrings: [],\r\n      invalidInputCount: 0,\r\n      templateProps: null,\r\n      currentPreset: \"\",\r\n      isBlock: false,\r\n    };\r\n  },\r\n  computed: {\r\n    presets: () => player.timestudy.presets,\r\n    params: () => GameDatabase.reality.automator.templates.paramTypes,\r\n    validWarnings() {\r\n      return this.invalidInputCount === 0\r\n        ? this.warnings().concat(this.templateScript?.warnings)\r\n        : this.warnings();\r\n    },\r\n    templateScript() {\r\n      if (this.invalidInputCount !== 0) return null;\r\n      return new ScriptTemplate(this.templateProps, this.name);\r\n    }\r\n  },\r\n  // Many props in this component are generated dynamically from a GameDB entry, but Vue can only give reactive\r\n  // behavior to props that exist on declaration. We need all the dynamically generated inputs to be reactive, so we\r\n  // specifically $set them here on initialization; additionally we give them a default value so that later function\r\n  // calls don't error out from undefined inputs.\r\n  created() {\r\n    for (const input of this.inputs) {\r\n      const boolProp = this.paramTypeObject(input.type).boolDisplay;\r\n      if (boolProp) {\r\n        this.$set(this.templateInputs, input.name, false);\r\n        this.buttonTextStrings[input.name] = boolProp[1];\r\n      } else {\r\n        this.$set(this.templateInputs, input.name, \"\");\r\n        this.invalidInputCount++;\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isBlock = player.reality.automator.type === AUTOMATOR_TYPE.BLOCK;\r\n    },\r\n    paramTypeObject(name) {\r\n      return this.params.find(p => p.name === name);\r\n    },\r\n    isValid(input) {\r\n      const typeObject = this.paramTypeObject(input.type);\r\n      return typeObject.isValidString ? typeObject.isValidString(this.templateInputs[input.name]) : true;\r\n    },\r\n    validityClass(input) {\r\n      if (input.name === \"treeStudies\" && this.currentPreset !== \"\") {\r\n        return \"c-automator-template-textbox--preset\";\r\n      }\r\n      return this.isValid(input)\r\n        ? undefined\r\n        : \"c-automator-template-textbox--invalid\";\r\n    },\r\n    loadPreset(name, id) {\r\n      this.templateInputs.treeStudies = name ? `NAME ${name}` : `ID ${id}`;\r\n      this.updateTemplateProps();\r\n    },\r\n    loadCurrent() {\r\n      this.templateInputs.treeStudies = GameCache.currentStudyTree.value.exportString;\r\n      this.updateTemplateProps();\r\n    },\r\n    updateTemplateProps() {\r\n      this.templateProps = {};\r\n      this.invalidInputCount = 0;\r\n      for (const input of this.inputs) {\r\n        const typeObj = this.paramTypeObject(input.type);\r\n        const mapFn = x => (typeObj.map ? typeObj.map(x) : x);\r\n        this.templateProps[input.name] = mapFn(this.templateInputs[input.name]);\r\n        if (!this.isValid(input)) this.invalidInputCount++;\r\n      }\r\n\r\n      // We treat treeStudies as a special prop which will set treePreset if it matches the format \"NAME [name]\"\r\n      const nameMatch = this.templateProps.treeStudies.match(/^NAME (.{1,4})$/u);\r\n      const idMatch = this.templateProps.treeStudies.match(/^ID (\\d)$/u);\r\n\r\n      if (nameMatch) {\r\n        const nameStr = nameMatch ? nameMatch[1] : \"\";\r\n        this.currentPreset = this.presets.find(x => x.name === nameStr).name;\r\n      } else if (idMatch) {\r\n        const idStr = idMatch ? idMatch[1] : \"\";\r\n        this.currentPreset = this.presets.some((x, y) => y === idStr - 1) ? idStr : \"\";\r\n      }\r\n\r\n      this.templateProps.treePreset = this.currentPreset === \"\" ? null : this.currentPreset;\r\n    },\r\n    updateButton(input) {\r\n      this.templateInputs[input.name] = !this.templateInputs[input.name];\r\n      const boolProp = this.paramTypeObject(input.type).boolDisplay;\r\n      this.buttonTextStrings[input.name] = boolProp[this.templateInputs[input.name] ? 0 : 1];\r\n      this.updateTemplateProps();\r\n    },\r\n    copyAndClose() {\r\n      if (this.isBlock) {\r\n        const newTemplateBlock = {\r\n          name: `Template: ${this.name}`,\r\n          blocks: blockifyTextAutomator(this.templateScript.script).blocks\r\n        };\r\n        AutomatorData.blockTemplates.push(newTemplateBlock);\r\n        GameUI.notify.info(\"Custom template block created\");\r\n      } else {\r\n        copyToClipboard(this.templateScript.script);\r\n        GameUI.notify.info(\"Template copied to clipboard\");\r\n      }\r\n      this.emitClose();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapper class=\"c-automator-template-container\">\r\n    <template #header>\r\n      {{ name }} Template\r\n    </template>\r\n    <div class=\"c-automator-template-description\">\r\n      {{ description }}\r\n    </div>\r\n    <div class=\"c-automator-template-inputs\">\r\n      <b>Required Information:</b>\r\n      <br>\r\n      Use a preset Study Tree:\r\n      <button\r\n        v-for=\"(preset, presetNumber) in presets\"\r\n        :key=\"preset.name\"\r\n        class=\"o-primary-btn o-load-preset-button-margin\"\r\n        @click=\"loadPreset(preset.name, presetNumber + 1)\"\r\n      >\r\n        {{ preset.name ? preset.name : presetNumber + 1 }}\r\n      </button>\r\n      <button\r\n        class=\"o-primary-btn o-load-preset-button-margin\"\r\n        @click=\"loadCurrent\"\r\n      >\r\n        <i>Current Tree</i>\r\n      </button>\r\n      <div\r\n        v-for=\"input in inputs\"\r\n        :key=\"input.name\"\r\n        class=\"c-automator-template-entry\"\r\n      >\r\n        {{ input.prompt }}:\r\n        <span v-if=\"paramTypeObject(input.type).boolDisplay\">\r\n          <button\r\n            class=\"o-primary-btn\"\r\n            @click=\"updateButton(input)\"\r\n          >\r\n            {{ buttonTextStrings[input.name] }}\r\n          </button>\r\n        </span>\r\n        <span v-else>\r\n          <input\r\n            ref=\"templateInputs[input.name]\"\r\n            v-model=\"templateInputs[input.name]\"\r\n            type=\"text\"\r\n            class=\"c-automator-template-textbox\"\r\n            :class=\"validityClass(input)\"\r\n            @input=\"updateTemplateProps\"\r\n          >\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div class=\"c-automator-template-warnings\">\r\n      <b>Possible things to consider:</b>\r\n      <div v-if=\"validWarnings.length !== 0\">\r\n        <div\r\n          v-for=\"warning in validWarnings\"\r\n          :key=\"warning\"\r\n          class=\"c-automator-template-entry\"\r\n        >\r\n          {{ warning }}\r\n        </div>\r\n      </div>\r\n      <div v-else>\r\n        (If something seems wrong with the template inputs, it will show up here)\r\n      </div>\r\n      <br>\r\n      <br>\r\n    </div>\r\n    <button\r\n      v-if=\"invalidInputCount === 0\"\r\n      class=\"o-primary-btn\"\r\n      @click=\"copyAndClose\"\r\n    >\r\n      {{ isBlock ? \"Create custom template block\" : \"Copy this template to your clipboard\" }} and close this modal\r\n    </button>\r\n    <button\r\n      v-else\r\n      class=\"o-primary-btn o-primary-btn--disabled\"\r\n    >\r\n      Cannot generate template (You have {{ quantifyInt(\"invalid input\", invalidInputCount) }})\r\n    </button>\r\n  </ModalWrapper>\r\n</template>\r\n\r\n<style scoped>\r\n.o-load-preset-button-margin {\r\n  margin-right: 0.3rem;\r\n}\r\n</style>\r\n"]}]}