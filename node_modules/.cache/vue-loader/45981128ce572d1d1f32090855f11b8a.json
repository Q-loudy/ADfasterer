{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\automator\\AutomatorBlockSingleRow.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\automator\\AutomatorBlockSingleRow.vue","mtime":1745241597062},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgZHJhZ2dhYmxlIGZyb20gInZ1ZWRyYWdnYWJsZSI7DQoNCmltcG9ydCBBdXRvbWF0b3JCbG9ja1NpbmdsZUlucHV0IGZyb20gIi4vQXV0b21hdG9yQmxvY2tTaW5nbGVJbnB1dCI7DQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgbmFtZTogIkF1dG9tYXRvckJsb2NrU2luZ2xlUm93IiwNCiAgY29tcG9uZW50czogew0KICAgIGRyYWdnYWJsZSwNCiAgICBBdXRvbWF0b3JCbG9ja1NpbmdsZUlucHV0DQogIH0sDQogIHByb3BzOiB7DQogICAgYmxvY2s6IHsNCiAgICAgIHR5cGU6IE9iamVjdCwNCiAgICAgIHJlcXVpcmVkOiB0cnVlDQogICAgfSwNCiAgICB1cGRhdGVCbG9jazogew0KICAgICAgdHlwZTogRnVuY3Rpb24sDQogICAgICByZXF1aXJlZDogdHJ1ZQ0KICAgIH0sDQogICAgZGVsZXRlQmxvY2s6IHsNCiAgICAgIHR5cGU6IEZ1bmN0aW9uLA0KICAgICAgcmVxdWlyZWQ6IHRydWUNCiAgICB9DQogIH0sDQogIGRhdGEoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIGI6IHt9LA0KICAgICAgYWN0aXZlTGluZTogLTEsDQogICAgICBldmVudExpbmU6IC0xLA0KICAgICAgZXJyb3JMaW5lOiAtMSwNCiAgICB9Ow0KICB9LA0KICBjb21wdXRlZDogew0KICAgIGxpbmVOdW1iZXIoKSB7DQogICAgICByZXR1cm4gQmxvY2tBdXRvbWF0b3IubGluZU51bWJlckZyb21CbG9ja0lEKHRoaXMuYi5pZCk7DQogICAgfSwNCiAgICBpc0FjdGl2ZUxpbmUoKSB7DQogICAgICByZXR1cm4gdGhpcy5saW5lTnVtYmVyID09PSB0aGlzLmFjdGl2ZUxpbmU7DQogICAgfSwNCiAgICBpc0V2ZW50TGluZSgpIHsNCiAgICAgIHJldHVybiB0aGlzLmxpbmVOdW1iZXIgPT09IHRoaXMuZXZlbnRMaW5lOw0KICAgIH0sDQogICAgaXNFcnJvckxpbmUoKSB7DQogICAgICByZXR1cm4gdGhpcy5saW5lTnVtYmVyID09PSB0aGlzLmVycm9yTGluZTsNCiAgICB9LA0KICB9LA0KICBjcmVhdGVkKCkgew0KICAgIHRoaXMucmVjYWxjdWxhdGVFcnJvckNvdW50KCk7DQogIH0sDQogIGRlc3Ryb3llZCgpIHsNCiAgICB0aGlzLnJlY2FsY3VsYXRlRXJyb3JDb3VudCgpOw0KICB9LA0KICBtb3VudGVkKCkgew0KICAgIHRoaXMuYiA9IHRoaXMuYmxvY2s7DQogIH0sDQogIG1ldGhvZHM6IHsNCiAgICB1cGRhdGUoKSB7DQogICAgICBjb25zdCBsaW5lcyA9IEF1dG9tYXRvckhpZ2hsaWdodGVyLmxpbmVzOw0KICAgICAgdGhpcy5hY3RpdmVMaW5lID0gbGluZXMuYWN0aXZlOw0KICAgICAgdGhpcy5ldmVudExpbmUgPSBsaW5lcy5ldmVudDsNCiAgICAgIHRoaXMuZXJyb3JMaW5lID0gbGluZXMuZXJyb3I7DQogICAgfSwNCiAgICBwYXJzZVJlcXVlc3QoKSB7DQogICAgICBCbG9ja0F1dG9tYXRvci5wYXJzZVRleHRGcm9tQmxvY2tzKCk7DQogICAgfSwNCiAgICBkZWxldGVCbG9ja0Zyb21OZXN0KGlkKSB7DQogICAgICBjb25zdCBpZHggPSB0aGlzLmIubmVzdC5maW5kSW5kZXgoeCA9PiB4LmlkID09PSBpZCk7DQogICAgICB0aGlzLmIubmVzdC5zcGxpY2UoaWR4LCAxKTsNCiAgICB9LA0KICAgIHVwZGF0ZUJsb2NrRnJvbU5lc3QoYmxvY2ssIGlkKSB7DQogICAgICB0aGlzLiRzZXQodGhpcy5iLm5lc3QsIHRoaXMuYi5uZXN0LmZpbmRJbmRleCh4ID0+IHguaWQgPT09IGlkKSwgYmxvY2spOw0KICAgICAgdGhpcy5wYXJzZVJlcXVlc3QoKTsNCiAgICB9LA0KDQogICAgLy8gTm90IGVudGlyZWx5IHN1cmUgd2h5LCBidXQgdXBkYXRpbmcgZXJyb3IgY291bnQgb25seSBzZWVtcyB0byB3b3JrIGlmIGl0J3MgZG9uZSBleGFjdGx5IGhlcmUgaW4gdGhlIGV4ZWN1dGlvbg0KICAgIC8vIHN0YWNrOyBtb3ZpbmcgaXQgdG8gdGhlIGRlZmluaXRpb24gb2YgdXBkYXRlQmxvY2sgc2VlbXMgdG8gc3RvcCBpdCBmcm9tIHdvcmtpbmcNCiAgICByZW1vdmVCbG9jayhibG9jaywgaWQpIHsNCiAgICAgIHRoaXMuZGVsZXRlQmxvY2soYmxvY2ssIGlkKTsNCiAgICAgIHRoaXMucmVjYWxjdWxhdGVFcnJvckNvdW50KCk7DQogICAgfSwNCg0KICAgIC8vIFRoaXMgZ2V0cyBjYWxsZWQgd2hlbmV2ZXIgYmxvY2tzIGFyZSBjaGFuZ2VkLCBidXQgd2UgYWxzbyBuZWVkIHRvIGhhbHQgZXhlY3V0aW9uIGlmIHRoZSBjdXJyZW50bHkgdmlzaWJsZSBzY3JpcHQNCiAgICAvLyBpcyBhbHNvIHRoZSBvbmUgYmVpbmcgcnVuDQogICAgcmVjYWxjdWxhdGVFcnJvckNvdW50KCkgew0KICAgICAgQXV0b21hdG9yRGF0YS5yZWNhbGN1bGF0ZUVycm9ycygpOw0KICAgICAgaWYgKEF1dG9tYXRvckJhY2tlbmQuY3VycmVudEVkaXRpbmdTY3JpcHQuaWQgPT09IEF1dG9tYXRvckJhY2tlbmQuY3VycmVudFJ1bm5pbmdTY3JpcHQuaWQpIHsNCiAgICAgICAgQXV0b21hdG9yQmFja2VuZC5zdG9wKCk7DQogICAgICB9DQogICAgfSwNCg0KICAgIGhpZ2hsaWdodENsYXNzKCkgew0KICAgICAgcmV0dXJuIHsNCiAgICAgICAgImMtYXV0b21hdG9yLWJsb2NrLXJvdy1hY3RpdmUiOiB0aGlzLmlzQWN0aXZlTGluZSwNCiAgICAgICAgImMtYXV0b21hdG9yLWJsb2NrLXJvdy1ldmVudCI6IHRoaXMuaXNFdmVudExpbmUsDQogICAgICAgICJjLWF1dG9tYXRvci1ibG9jay1yb3ctZXJyb3IiOiB0aGlzLmlzRXJyb3JMaW5lDQogICAgICB9Ow0KICAgIH0sDQogICAgLy8gVGhlIHRhcmdldCB2YWx1ZSBpcyBlaXRoZXIgYSBTdHJpbmcgb3Igc29tZSBraW5kIG9mIGEgbnVtYmVyIC0gd2UgbmVlZCB0byBmb3JjZSBpdCB0byBiZSBhIFN0cmluZyBmb3IgdGhlDQogICAgLy8gY29tcG9uZW50IHR5cGUtY2hlY2tpbmcgKE51bWJlcnMgYXJlIGltcGxpY2l0bHkgY2FzdCwgYnV0IERlY2ltYWxzIGFyZSBub3QpDQogICAgbmV4dFNlbGVjdGlvbigpIHsNCiAgICAgIGNvbnN0IHZhbCA9IHRoaXMuYi50YXJnZXRzID8gdGhpcy5iW3RoaXMuYi50YXJnZXRzWzBdXSA6ICIiOw0KICAgICAgcmV0dXJuIHZhbDsNCiAgICB9DQogIH0NCn07DQo="},{"version":3,"sources":["AutomatorBlockSingleRow.vue"],"names":[],"mappingsfile":"AutomatorBlockSingleRow.vue","sourceRoot":"src/components/tabs/automator","sourcesContent":["<script>\r\nimport draggable from \"vuedraggable\";\r\n\r\nimport AutomatorBlockSingleInput from \"./AutomatorBlockSingleInput\";\r\n\r\nexport default {\r\n  name: \"AutomatorBlockSingleRow\",\r\n  components: {\r\n    draggable,\r\n    AutomatorBlockSingleInput\r\n  },\r\n  props: {\r\n    block: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    updateBlock: {\r\n      type: Function,\r\n      required: true\r\n    },\r\n    deleteBlock: {\r\n      type: Function,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      b: {},\r\n      activeLine: -1,\r\n      eventLine: -1,\r\n      errorLine: -1,\r\n    };\r\n  },\r\n  computed: {\r\n    lineNumber() {\r\n      return BlockAutomator.lineNumberFromBlockID(this.b.id);\r\n    },\r\n    isActiveLine() {\r\n      return this.lineNumber === this.activeLine;\r\n    },\r\n    isEventLine() {\r\n      return this.lineNumber === this.eventLine;\r\n    },\r\n    isErrorLine() {\r\n      return this.lineNumber === this.errorLine;\r\n    },\r\n  },\r\n  created() {\r\n    this.recalculateErrorCount();\r\n  },\r\n  destroyed() {\r\n    this.recalculateErrorCount();\r\n  },\r\n  mounted() {\r\n    this.b = this.block;\r\n  },\r\n  methods: {\r\n    update() {\r\n      const lines = AutomatorHighlighter.lines;\r\n      this.activeLine = lines.active;\r\n      this.eventLine = lines.event;\r\n      this.errorLine = lines.error;\r\n    },\r\n    parseRequest() {\r\n      BlockAutomator.parseTextFromBlocks();\r\n    },\r\n    deleteBlockFromNest(id) {\r\n      const idx = this.b.nest.findIndex(x => x.id === id);\r\n      this.b.nest.splice(idx, 1);\r\n    },\r\n    updateBlockFromNest(block, id) {\r\n      this.$set(this.b.nest, this.b.nest.findIndex(x => x.id === id), block);\r\n      this.parseRequest();\r\n    },\r\n\r\n    // Not entirely sure why, but updating error count only seems to work if it's done exactly here in the execution\r\n    // stack; moving it to the definition of updateBlock seems to stop it from working\r\n    removeBlock(block, id) {\r\n      this.deleteBlock(block, id);\r\n      this.recalculateErrorCount();\r\n    },\r\n\r\n    // This gets called whenever blocks are changed, but we also need to halt execution if the currently visible script\r\n    // is also the one being run\r\n    recalculateErrorCount() {\r\n      AutomatorData.recalculateErrors();\r\n      if (AutomatorBackend.currentEditingScript.id === AutomatorBackend.currentRunningScript.id) {\r\n        AutomatorBackend.stop();\r\n      }\r\n    },\r\n\r\n    highlightClass() {\r\n      return {\r\n        \"c-automator-block-row-active\": this.isActiveLine,\r\n        \"c-automator-block-row-event\": this.isEventLine,\r\n        \"c-automator-block-row-error\": this.isErrorLine\r\n      };\r\n    },\r\n    // The target value is either a String or some kind of a number - we need to force it to be a String for the\r\n    // component type-checking (Numbers are implicitly cast, but Decimals are not)\r\n    nextSelection() {\r\n      const val = this.b.targets ? this.b[this.b.targets[0]] : \"\";\r\n      return val;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"c-automator-block-row--container\">\r\n    <div\r\n      class=\"c-automator-block-row\"\r\n      :class=\"highlightClass()\"\r\n    >\r\n      <AutomatorBlockSingleInput\r\n        :constant=\"b.alias ? b.alias : b.cmd\"\r\n        :block=\"b\"\r\n        :update-function=\"updateBlock\"\r\n      />\r\n      <AutomatorBlockSingleInput\r\n        v-if=\"b.canWait\"\r\n        :block=\"b\"\r\n        block-target=\"nowait\"\r\n        :initial-selection=\"b.nowait ? 'NOWAIT' : ''\"\r\n        :update-function=\"updateBlock\"\r\n      />\r\n      <AutomatorBlockSingleInput\r\n        v-if=\"b.canRespec\"\r\n        :block=\"b\"\r\n        block-target=\"respec\"\r\n        :initial-selection=\"b.respec ? 'RESPEC' : ''\"\r\n        :update-function=\"updateBlock\"\r\n      />\r\n      <AutomatorBlockSingleInput\r\n        v-if=\"b.allowedPatterns\"\r\n        :block=\"b\"\r\n        :block-target=\"b.targets[0]\"\r\n        :patterns=\"b.allowedPatterns\"\r\n        :initial-selection=\"nextSelection()\"\r\n        :update-function=\"updateBlock\"\r\n        :recursive=\"true\"\r\n      />\r\n      <div\r\n        class=\"o-automator-block-delete\"\r\n        @click=\"removeBlock(b.id)\"\r\n      >\r\n        X\r\n      </div>\r\n    </div>\r\n    <draggable\r\n      v-if=\"block.nested\"\r\n      v-model=\"block.nest\"\r\n      class=\"l-automator-nested-block\"\r\n      group=\"code-blocks\"\r\n    >\r\n      <AutomatorBlockSingleRow\r\n        v-for=\"subblock in block.nest\"\r\n        :key=\"subblock.id\"\r\n        :block=\"subblock\"\r\n        :update-block=\"updateBlockFromNest\"\r\n        :delete-block=\"deleteBlockFromNest\"\r\n      />\r\n    </draggable>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-automator-block-row--container {\r\n  margin: -0.002rem;\r\n  /* The only purpose of this is to prevent margin overlapping so the nested blocks can fit nicer */\r\n  padding: 0.002rem;\r\n}\r\n\r\n.l-automator-nested-block {\r\n  width: fit-content;\r\n  min-width: 30rem;\r\n  min-height: 3.65rem;\r\n  border: 0.1rem dotted #55ff55;\r\n  margin: -0.1rem 0 -0.1rem 3rem;\r\n  padding: 0 0.5rem;\r\n}\r\n</style>\r\n"]}]}