{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\celestial-pelle\\PelleRift.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\celestial-pelle\\PelleRift.vue","mtime":1745241597144},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgd29yZFNoaWZ0IGZyb20gIkAvY29yZS93b3JkLXNoaWZ0IjsNCg0KaW1wb3J0IFBlbGxlUmlmdEJhciBmcm9tICIuL1BlbGxlUmlmdEJhciI7DQppbXBvcnQgUGVsbGVTdHJpa2UgZnJvbSAiLi9QZWxsZVN0cmlrZSI7DQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgbmFtZTogIlBlbGxlUmlmdCIsDQogIGNvbXBvbmVudHM6IHsNCiAgICBQZWxsZVN0cmlrZSwNCiAgICBQZWxsZVJpZnRCYXINCiAgfSwNCiAgcHJvcHM6IHsNCiAgICBzdHJpa2U6IHsNCiAgICAgIHR5cGU6IE9iamVjdCwNCiAgICAgIHJlcXVpcmVkOiB0cnVlDQogICAgfSwNCiAgfSwNCiAgZGF0YSgpIHsNCiAgICByZXR1cm4gew0KICAgICAgaGFzU3RyaWtlOiBmYWxzZSwNCiAgICAgIGlzQWN0aXZlOiBmYWxzZSwNCiAgICAgIGlzTWF4ZWQ6IGZhbHNlLA0KICAgICAgdG90YWxGaWxsOiBuZXcgRGVjaW1hbCgpLA0KICAgICAgcmVzb3VyY2U6IG5ldyBEZWNpbWFsKCksDQogICAgICBoYXNFZmZlY3RpdmVGaWxsOiBmYWxzZSwNCiAgICAgIGVmZmVjdHM6IFtdDQogICAgfTsNCiAgfSwNCiAgY29tcHV0ZWQ6IHsNCiAgICByaWZ0KCkgew0KICAgICAgcmV0dXJuIHRoaXMuc3RyaWtlLnJpZnQ7DQogICAgfSwNCiAgICAvLyBXZSB0cmVhdCB0aGUgM3JkIHJpZnQgc2xpZ2h0bHkgZGlmZmVyZW50bHkgYmVjYXVzZSBpdCBkcmFpbnMgdGhlIDJuZCByaWZ0LCBtZWFuaW5nIGl0IG5lZWRzIHRoZSB3b3JkIGN5Y2xlDQogICAgLy8gYW5kIGEgYml0IG9mIGFkZGl0aW9uYWwgVUkgaW5mbw0KICAgIHNwZWNpYWxSaWZ0KCkgew0KICAgICAgcmV0dXJuIHRoaXMucmlmdC5pZCA9PT0gMzsNCiAgICB9LA0KICAgIGluZm9Ub29sdGlwKCkgew0KICAgICAgcmV0dXJuIGBUaGUgUmVwbGljYW50aSByZXF1aXJlbWVudCBmb3IgdGhlIDJuZCBSaWZ0IGlzIGJhc2VkIG9uIHRoZSB0b3RhbCBhbW91bnQgeW91IGhhdmUgZXZlciBmaWxsZWQsIGluY2x1ZGluZw0KICAgICAgICBhbnkgYW1vdW50IGRyYWluZWQgdG8gZmlsbCB0aGlzIFJpZnQuYDsNCiAgICB9DQogIH0sDQogIG1ldGhvZHM6IHsNCiAgICB1cGRhdGUoKSB7DQogICAgICB0aGlzLmhhc1N0cmlrZSA9IHRoaXMuc3RyaWtlLmhhc1N0cmlrZTsNCiAgICAgIGlmICghdGhpcy5oYXNTdHJpa2UpIHJldHVybjsNCiAgICAgIGNvbnN0IHJpZnQgPSB0aGlzLnJpZnQ7DQogICAgICB0aGlzLmVmZmVjdHMgPSB0aGlzLnJpZnQuZWZmZWN0czsNCiAgICAgIHRoaXMuaXNBY3RpdmUgPSByaWZ0LmlzQWN0aXZlOw0KICAgICAgdGhpcy5pc01heGVkID0gcmlmdC5pc01heGVkIHx8IFBlbGxlLmhhc0dhbGF4eUdlbmVyYXRvcjsNCiAgICAgIHRoaXMuc2V0VmFsdWUoInRvdGFsRmlsbCIsIHJpZnQudG90YWxGaWxsKTsNCiAgICAgIHRoaXMuc2V0VmFsdWUoInJlc291cmNlIiwgcmlmdC5maWxsQ3VycmVuY3kudmFsdWUpOw0KICAgICAgdGhpcy5oYXNFZmZlY3RpdmVGaWxsID0gcmlmdC5rZXkgPT09ICJkZWNheSIgJiYgUGVsbGVSaWZ0cy5jaGFvcy5taWxlc3RvbmVzWzBdLmNhbkJlQXBwbGllZDsNCiAgICB9LA0KICAgIC8vIE9uZSByaWZ0IGhhcyBhIG51bWJlciBhbmQgdGhlIG90aGVycyBhcmUgYWxsIERlY2ltYWxzOyB0aGlzIHJlZHVjZXMgYm9pbGVycGxhdGUgZm9yIHNldHRpbmcgbXVsdGlwbGUgdmFsdWVzDQogICAgc2V0VmFsdWUoa2V5LCB2YWx1ZSkgew0KICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gIm51bWJlciIpIHRoaXNba2V5XSA9IHZhbHVlOw0KICAgICAgZWxzZSB0aGlzW2tleV0uY29weUZyb20odmFsdWUpOw0KICAgIH0sDQogICAgLy8gT25lLW9mZiBmb3JtYXR0aW5nIGZ1bmN0aW9uOyBuZWVkcyB0byBmb3JtYXQgbGFyZ2UgRGVjaW1hbHMgYW5kIGEgc21hbGwgbnVtYmVyIGFzc3VtZWQgdG8gYmUgYSBwZXJjZW50YWdlDQogICAgZm9ybWF0UmlmdCh2YWx1ZSkgew0KICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gIm51bWJlciIgPyBgJHtmb3JtYXRJbnQoMTAwICogdmFsdWUpfSVgIDogZm9ybWF0KHZhbHVlLCAyKTsNCiAgICB9LA0KICAgIHJpZnROYW1lKCkgew0KICAgICAgcmV0dXJuIHdvcmRTaGlmdC53b3JkQ3ljbGUodGhpcy5yaWZ0Lm5hbWUsIHRydWUpOw0KICAgIH0sDQogICAgZHJhaW5SZXNvdXJjZSgpIHsNCiAgICAgIHJldHVybiB0aGlzLnNwZWNpYWxSaWZ0DQogICAgICAgID8gd29yZFNoaWZ0LndvcmRDeWNsZSh0aGlzLnJpZnQuZHJhaW5SZXNvdXJjZSkNCiAgICAgICAgOiB0aGlzLnJpZnQuZHJhaW5SZXNvdXJjZTsNCiAgICB9DQogIH0sDQp9Ow0K"},{"version":3,"sources":["PelleRift.vue"],"names":[],"mappings":";AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PelleRift.vue","sourceRoot":"src/components/tabs/celestial-pelle","sourcesContent":["<script>\r\nimport wordShift from \"@/core/word-shift\";\r\n\r\nimport PelleRiftBar from \"./PelleRiftBar\";\r\nimport PelleStrike from \"./PelleStrike\";\r\n\r\nexport default {\r\n  name: \"PelleRift\",\r\n  components: {\r\n    PelleStrike,\r\n    PelleRiftBar\r\n  },\r\n  props: {\r\n    strike: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      hasStrike: false,\r\n      isActive: false,\r\n      isMaxed: false,\r\n      totalFill: new Decimal(),\r\n      resource: new Decimal(),\r\n      hasEffectiveFill: false,\r\n      effects: []\r\n    };\r\n  },\r\n  computed: {\r\n    rift() {\r\n      return this.strike.rift;\r\n    },\r\n    // We treat the 3rd rift slightly differently because it drains the 2nd rift, meaning it needs the word cycle\r\n    // and a bit of additional UI info\r\n    specialRift() {\r\n      return this.rift.id === 3;\r\n    },\r\n    infoTooltip() {\r\n      return `The Replicanti requirement for the 2nd Rift is based on the total amount you have ever filled, including\r\n        any amount drained to fill this Rift.`;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.hasStrike = this.strike.hasStrike;\r\n      if (!this.hasStrike) return;\r\n      const rift = this.rift;\r\n      this.effects = this.rift.effects;\r\n      this.isActive = rift.isActive;\r\n      this.isMaxed = rift.isMaxed || Pelle.hasGalaxyGenerator;\r\n      this.setValue(\"totalFill\", rift.totalFill);\r\n      this.setValue(\"resource\", rift.fillCurrency.value);\r\n      this.hasEffectiveFill = rift.key === \"decay\" && PelleRifts.chaos.milestones[0].canBeApplied;\r\n    },\r\n    // One rift has a number and the others are all Decimals; this reduces boilerplate for setting multiple values\r\n    setValue(key, value) {\r\n      if (typeof value === \"number\") this[key] = value;\r\n      else this[key].copyFrom(value);\r\n    },\r\n    // One-off formatting function; needs to format large Decimals and a small number assumed to be a percentage\r\n    formatRift(value) {\r\n      return typeof value === \"number\" ? `${formatInt(100 * value)}%` : format(value, 2);\r\n    },\r\n    riftName() {\r\n      return wordShift.wordCycle(this.rift.name, true);\r\n    },\r\n    drainResource() {\r\n      return this.specialRift\r\n        ? wordShift.wordCycle(this.rift.drainResource)\r\n        : this.rift.drainResource;\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    v-if=\"hasStrike\"\r\n    class=\"c-pelle-single-bar\"\r\n  >\r\n    <div class=\"c-pelle-rift\">\r\n      <div class=\"c-pelle-rift-row\">\r\n        <div class=\"c-pelle-rift-column c-pelle-rift-status\">\r\n          <h2 class=\"c-pelle-rift-name-header\">\r\n            {{ riftName() }}\r\n          </h2>\r\n          <div class=\"c-pelle-rift-rift-info-container\">\r\n            <div\r\n              v-for=\"(effect, idx) in effects\"\r\n              :key=\"idx\"\r\n            >\r\n              {{ effect || \"\" }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"c-pelle-rift-column\">\r\n          <PelleStrike :strike=\"strike\" />\r\n          <PelleRiftBar :rift=\"rift\" />\r\n        </div>\r\n        <div class=\"c-pelle-rift-status\">\r\n          <div class=\"c-pelle-rift-fill-status\">\r\n            <h2 class=\"c-pelle-rift-name-header\">\r\n              {{ riftName() }}\r\n            </h2>\r\n            <div class=\"c-pelle-rift-rift-info-container\">\r\n              Drains {{ drainResource() }} to fill.\r\n              <span\r\n                v-if=\"specialRift\"\r\n                :ach-tooltip=\"infoTooltip\"\r\n              >\r\n                <i class=\"fas fa-question-circle\" />\r\n              </span>\r\n              <br>\r\n              <template v-if=\"!isMaxed\">\r\n                Current Amount: {{ formatRift(resource) }}\r\n              </template>\r\n              <br>\r\n              Total Filled: {{ formatRift(rift.totalFill) }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-pelle-single-bar {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n}\r\n\r\n.c-pelle-rift {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  border: var(--var-border-width, 0.2rem) solid var(--color-pelle--base);\r\n  border-radius: var(--var-border-radius, 0.5rem);\r\n\r\n  /* transparent crimson */\r\n  box-shadow: inset 0 0 1rem 0.1rem rgba(237, 20, 61, 45%), 0 0 1rem 0.1rem rgba(237, 20, 61, 45%);\r\n  margin-top: 1.2rem;\r\n  padding: 0.5rem;\r\n}\r\n\r\n.t-s1 .c-pelle-rift {\r\n  box-shadow: none;\r\n}\r\n\r\n.c-pelle-rift-row {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.c-pelle-rift-column {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.c-pelle-rift-rift-info-container {\r\n  height: 5rem;\r\n  font-weight: 400;\r\n  color: var(--color-text);\r\n}\r\n\r\n.c-pelle-rift-status {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 28rem;\r\n  align-items: center;\r\n}\r\n\r\n.c-pelle-rift-name-header {\r\n  font-weight: bold;\r\n  color: var(--color-pelle--base);\r\n  padding: 0.2rem;\r\n}\r\n</style>\r\n"]}]}