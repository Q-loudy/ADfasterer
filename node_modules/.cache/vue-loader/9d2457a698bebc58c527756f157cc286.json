{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\GlyphSetPreview.vue?vue&type=style&index=0&id=46c3175c&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\GlyphSetPreview.vue","mtime":1745241596775},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5sLXByZXZpZXcgew0KICBtYXJnaW46IDAuMnJlbTsNCn0NCg=="},{"version":3,"sources":["GlyphSetPreview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+JA;AACA;AACA","file":"GlyphSetPreview.vue","sourceRoot":"src/components","sourcesContent":["<script>\r\nimport GlyphComponent from \"@/components/GlyphComponent\";\r\nimport GlyphSetName from \"@/components/GlyphSetName\";\r\n\r\nexport default {\r\n  name: \"GlyphSetPreview\",\r\n  components: {\r\n    GlyphComponent,\r\n    GlyphSetName\r\n  },\r\n  props: {\r\n    text: {\r\n      type: String,\r\n      required: false,\r\n      default: \"\"\r\n    },\r\n    textHidden: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    },\r\n    glyphs: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    ignoreModifiedLevel: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    },\r\n    flipTooltip: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    },\r\n    isInModal: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    },\r\n    showName: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: true\r\n    },\r\n    forceNameColor: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: true\r\n    },\r\n    showSacrifice: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    },\r\n    noneText: {\r\n      type: String,\r\n      required: false,\r\n      default: \"(No Glyphs equipped)\"\r\n    },\r\n    sort: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      realityGlyphBoost: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    orderedGlyphs() {\r\n      if (!this.sort) return this.glyphs;\r\n      const standardOrder = [\"reality\", \"effarig\", \"power\", \"infinity\", \"replication\", \"time\", \"dilation\",\r\n        \"cursed\", \"companion\"];\r\n      const order = Glyphs.copyForRecords(this.glyphs);\r\n      // Technically doesn't stable sort between glyphs of the same type, probably fine though\r\n      order.sort((a, b) => standardOrder.indexOf(a.type) - standardOrder.indexOf(b.type));\r\n      return order;\r\n    },\r\n  },\r\n  watch: {\r\n    glyphs() {\r\n      this.$recompute(\"orderedGlyphs\");\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      // There should only be one reality glyph; this picks one pseudo-randomly if multiple are cheated/glitched in\r\n      const realityGlyph = this.glyphs.filter(g => g.type === \"reality\")[0];\r\n      this.realityGlyphBoost = realityGlyph\r\n        ? GlyphEffects.realityglyphlevel.effect(realityGlyph.level)\r\n        : 0;\r\n    },\r\n    showModal() {\r\n      if (this.isInModal) return;\r\n      Modal.glyphShowcasePanel.show({\r\n        name: this.text,\r\n        glyphSet: this.glyphs,\r\n        closeEvent: GAME_EVENT.GLYPH_SET_SAVE_CHANGE,\r\n        displaySacrifice: this.showSacrifice,\r\n      });\r\n    },\r\n    // Necessary to force a re-render for the set name if the set itself changes\r\n    glyphHash() {\r\n      return Glyphs.hash(this.glyphs);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <span v-if=\"text && !textHidden\">\r\n      {{ text }}\r\n      <br>\r\n    </span>\r\n    <span\r\n      v-if=\"glyphs.length !== 0\"\r\n      :class=\"{ 'l-glyph-set-preview': !isInModal}\"\r\n      @click=\"showModal\"\r\n    >\r\n      <GlyphSetName\r\n        v-if=\"showName\"\r\n        :key=\"glyphHash()\"\r\n        :glyph-set=\"glyphs\"\r\n        :force-color=\"forceNameColor\"\r\n      />\r\n      <GlyphComponent\r\n        v-for=\"(g, idx) in orderedGlyphs\"\r\n        :key=\"idx\"\r\n        class=\"l-preview\"\r\n        :glyph=\"g\"\r\n        :show-sacrifice=\"showSacrifice\"\r\n        :draggable=\"false\"\r\n        :circular=\"true\"\r\n        :ignore-modified-level=\"ignoreModifiedLevel\"\r\n        :reality-glyph-boost=\"realityGlyphBoost\"\r\n        :flip-tooltip=\"flipTooltip\"\r\n        :is-in-modal=\"isInModal\"\r\n        size=\"3rem\"\r\n        :text-proportion=\"0.5\"\r\n        glow-blur=\"0.2rem\"\r\n        glow-spread=\"0.1rem\"\r\n      />\r\n    </span>\r\n    <span v-else>\r\n      <GlyphSetName\r\n        v-if=\"showName\"\r\n        :glyph-set=\"glyphs\"\r\n        :force-color=\"forceNameColor\"\r\n      />\r\n      {{ noneText }}\r\n    </span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.l-preview {\r\n  margin: 0.2rem;\r\n}\r\n</style>\r\n"]}]}