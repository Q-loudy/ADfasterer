{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\GlyphTooltip.vue?vue&type=style&index=0&id=5aba8432&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\GlyphTooltip.vue","mtime":1745241596782},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouYy1nbHlwaC10b29sdGlwX19zYWNyaWZpY2Ugew0KICBmb250LXNpemU6IDFyZW07DQogIGZvbnQtd2VpZ2h0OiBub3JtYWw7DQp9DQo="},{"version":3,"sources":["GlyphTooltip.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmTA;AACA;AACA;AACA","file":"GlyphTooltip.vue","sourceRoot":"src/components","sourcesContent":["<script>\r\nimport GlyphTooltipEffect from \"@/components/GlyphTooltipEffect\";\r\n\r\nexport default {\r\n  name: \"GlyphTooltip\",\r\n  components: {\r\n    GlyphTooltipEffect\r\n  },\r\n  props: {\r\n    type: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    strength: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    level: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    effects: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    id: {\r\n      type: Number,\r\n      required: false,\r\n      default: 0,\r\n    },\r\n    sacrificeReward: {\r\n      type: Number,\r\n      required: false,\r\n      default: 0,\r\n    },\r\n    refineReward: {\r\n      type: Number,\r\n      required: false,\r\n      default: 0,\r\n    },\r\n    uncappedRefineReward: {\r\n      type: Number,\r\n      required: false,\r\n      default: 0,\r\n    },\r\n    currentAction: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    scoreMode: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    showDeletionText: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: true,\r\n    },\r\n    displayLevel: {\r\n      type: Number,\r\n      required: false,\r\n      default: 0,\r\n    },\r\n    changeWatcher: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      showChaosText: false,\r\n      chaosDescription: \"\"\r\n    };\r\n  },\r\n  computed: {\r\n    onTouchDevice() {\r\n      return GameUI.touchDevice;\r\n    },\r\n    effectiveLevel() {\r\n      return this.displayLevel ? this.displayLevel : this.level;\r\n    },\r\n    sortedEffects() {\r\n      return getGlyphEffectValuesFromBitmask(this.effects, this.effectiveLevel, this.strength, this.type)\r\n        .filter(effect =>\r\n          GlyphEffects[effect.id].isGenerated === generatedTypes.includes(this.type));\r\n    },\r\n    rarityInfo() {\r\n      return getRarity(this.strength);\r\n    },\r\n    // Values for baseColor and textColor will only ever be black or white\r\n    baseColor() {\r\n      return CosmeticGlyphTypes[this.type].currentColor.bg;\r\n    },\r\n    textColor() {\r\n      return this.baseColor === \"black\" ? \"white\" : \"black\";\r\n    },\r\n    mainBorderColor() {\r\n      return GlyphAppearanceHandler.getBorderColor(this.type);\r\n    },\r\n    descriptionStyle() {\r\n      const color = GlyphAppearanceHandler.getRarityColor(this.strength, this.type);\r\n      const cursedColor = GlyphAppearanceHandler.isLightBG ? \"white\" : \"black\";\r\n      return {\r\n        color: this.type === \"cursed\" ? cursedColor : color,\r\n        animation: this.type === \"reality\" ? \"a-reality-glyph-name-cycle 10s infinite\" : undefined\r\n      };\r\n    },\r\n    description() {\r\n      const glyphName = `${this.type.capitalize()}`;\r\n      switch (this.type) {\r\n        case \"companion\":\r\n          return \"Companion Glyph\";\r\n        case \"cursed\":\r\n          return \"Cursed Glyph\";\r\n        case \"reality\":\r\n          return `Pure Glyph of ${glyphName}`;\r\n        default:\r\n          return `${this.rarityInfo.name} Glyph of ${glyphName}`;\r\n      }\r\n    },\r\n    isLevelCapped() {\r\n      return this.displayLevel && this.displayLevel < this.level;\r\n    },\r\n    isLevelBoosted() {\r\n      return this.displayLevel && this.displayLevel > this.level;\r\n    },\r\n    rarityText() {\r\n      if (!GlyphTypes[this.type].hasRarity) return \"\";\r\n      const strength = Pelle.isDoomed ? Pelle.glyphStrength : this.strength;\r\n      return `| Rarity:\r\n        <span style=\"color: ${this.descriptionStyle.color}\">${formatRarity(strengthToRarity(strength))}</span>`;\r\n    },\r\n    levelText() {\r\n      if (this.type === \"companion\") return \"\";\r\n      // eslint-disable-next-line no-nested-ternary\r\n      const arrow = this.isLevelCapped\r\n        ? \"<i class='fas fa-sort-down'></i>\"\r\n        : (this.isLevelBoosted ? \"<i class='fas fa-sort-up'></i>\" : \"\");\r\n      // eslint-disable-next-line no-nested-ternary\r\n      const color = this.isLevelCapped\r\n        ? \"#ff4444\"\r\n        : (this.isLevelBoosted ? \"#44FF44\" : undefined);\r\n      return `Level: <span style=\"color: ${color}\">\r\n              ${arrow}${formatInt(this.effectiveLevel)}${arrow}\r\n              </span>`;\r\n    },\r\n    eventHandlers() {\r\n      return GameUI.touchDevice ? {\r\n        touchstart: this.touchStart,\r\n        dragstart: this.dragStart,\r\n        dragEnd: this.dragEnd,\r\n      } : {};\r\n    },\r\n    glyphTooltipStyle() {\r\n      // With computer mice, it's nice to just totally disable mouse events on the tooltip,\r\n      // which reduces the chances for stupidity\r\n      const borderColor = this.type === \"cursed\" ? this.textColor : GlyphAppearanceHandler.getBorderColor(this.type);\r\n      return {\r\n        \"pointer-events\": this.onTouchDevice ? undefined : \"none\",\r\n        \"border-color\": borderColor,\r\n        \"box-shadow\": `0 0 0.5rem ${borderColor}, 0 0 0.5rem ${borderColor} inset`,\r\n        animation: this.type === \"reality\" ? \"a-reality-glyph-tooltip-cycle 10s infinite\" : undefined,\r\n        color: this.textColor,\r\n        background: this.baseColor\r\n      };\r\n    },\r\n    glyphHeaderStyle() {\r\n      const isCursed = this.type === \"cursed\";\r\n      const isReality = this.type === \"reality\";\r\n\r\n      let color = GlyphAppearanceHandler.getRarityColor(this.strength, this.type);\r\n      if (isCursed) color = this.textColor;\r\n      if (this.type === \"companion\") color = GlyphAppearanceHandler.getBorderColor(this.type);\r\n      return {\r\n        \"border-color\": color,\r\n        \"box-shadow\": `0 0 0.5rem 0.1rem ${color}, 0 0 0.8rem ${color} inset`,\r\n        animation: isReality ? \"a-reality-glyph-tooltip-header-cycle 10s infinite\" : undefined,\r\n        color: this.textColor,\r\n        background: this.baseColor\r\n      };\r\n    }\r\n  },\r\n  watch: {\r\n    changeWatcher() {\r\n      this.$recompute(\"sortedEffects\");\r\n    }\r\n  },\r\n  mounted() {\r\n    // By attaching the tooltip to the body element, we make sure it ends up on top of anything\r\n    // else, with no z order shenanigans\r\n    document.body.appendChild(this.$el);\r\n  },\r\n  destroyed() {\r\n    try {\r\n      document.body.removeChild(this.$el);\r\n    } catch (e) {\r\n      // If the tooltip isn't visible, then it can't be removed on account of not being there in the first place.\r\n      // Trying to remove it anyway causes an exception to be thrown but otherwise nothing seems to actually affect\r\n      // the game. Nevertheless, including this try/catch no-op suppresses console error spam.\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.showChaosText = Pelle.specialGlyphEffect.isUnlocked;\r\n      if (this.showChaosText) {\r\n        this.chaosDescription = Pelle.getSpecialGlyphEffectDescription(this.type);\r\n      }\r\n    },\r\n    touchStart() {\r\n      // We _don't_ preventDefault here because we want the event to turn into a local\r\n      // dragstart that we can intercept\r\n      this.$parent.$emit(\"tooltip-touched\");\r\n    },\r\n    dragStart(ev) {\r\n      // Prevent dragging by tooltip on mobile\r\n      ev.preventDefault();\r\n      ev.stopPropagation();\r\n    },\r\n    dragEnd(ev) {\r\n      ev.preventDefault();\r\n      ev.stopPropagation();\r\n    },\r\n    removeGlyph() {\r\n      GlyphSacrificeHandler.removeGlyph(Glyphs.findById(this.id), false);\r\n    },\r\n    getFontColor() {\r\n      return Theme.current().isDark() ? \"#cccccc\" : \"black\";\r\n    },\r\n    sacrificeText() {\r\n      if (this.type === \"companion\" || this.type === \"cursed\") return \"\";\r\n      const powerText = `${format(this.sacrificeReward, 2, 2)}`;\r\n      const isCurrentAction = this.currentAction === \"sacrifice\";\r\n      return `<span style=\"font-weight: ${isCurrentAction ? \"bold\" : \"\"};\">\r\n              Sacrifice: ${powerText}\r\n              </span>`;\r\n    },\r\n    refineText() {\r\n      if (this.type === \"companion\" || this.type === \"cursed\" || this.type === \"reality\") return \"\";\r\n      if (!AlchemyResource[this.type].isUnlocked) return \"\";\r\n      let refinementText = `${format(this.uncappedRefineReward, 2, 2)} ${GLYPH_SYMBOLS[this.type]}`;\r\n      if (this.uncappedRefineReward !== this.refineReward) {\r\n        refinementText += ` (Actual value due to cap: ${format(this.refineReward, 2, 2)} ${GLYPH_SYMBOLS[this.type]})`;\r\n      }\r\n      const isCurrentAction = this.currentAction === \"refine\";\r\n      return `<span style=\"font-weight: ${isCurrentAction ? \"bold\" : \"\"};\">\r\n              Refine: ${refinementText}\r\n              </span>`;\r\n    },\r\n    scoreText() {\r\n      if (this.type === \"companion\" || this.type === \"cursed\" || this.type === \"reality\") return \"\";\r\n      const showFilterScoreModes = [AUTO_GLYPH_SCORE.SPECIFIED_EFFECT, AUTO_GLYPH_SCORE.EFFECT_SCORE];\r\n      if (!showFilterScoreModes.includes(this.scoreMode)) return \"\";\r\n      return `Score: ${format(AutoGlyphProcessor.filterValue(this.$parent.glyph), 1, 1)}`;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    class=\"l-glyph-tooltip c-glyph-tooltip\"\r\n    :style=\"glyphTooltipStyle\"\r\n    v-on=\"eventHandlers\"\r\n  >\r\n    <div\r\n      class=\"c-glyph-tooltip__header\"\r\n      :style=\"glyphHeaderStyle\"\r\n    >\r\n      <span\r\n        class=\"c-glyph-tooltip__description\"\r\n        :style=\"descriptionStyle\"\r\n        v-html=\"description\"\r\n      />\r\n      <span class=\"l-glyph-tooltip__info\">\r\n        <span v-html=\"levelText\" />\r\n        <span v-html=\"rarityText\" />\r\n      </span>\r\n      <span v-if=\"showDeletionText\">\r\n        <span\r\n          class=\"c-glyph-tooltip__sacrifice\"\r\n          v-on=\"onTouchDevice ? { click: removeGlyph } : {}\"\r\n        >\r\n          <span v-html=\"sacrificeText()\" />\r\n          <span v-if=\"sacrificeText() && refineText()\"> | </span>\r\n          <span v-html=\"refineText()\" />\r\n        </span>\r\n      </span>\r\n      <span class=\"c-glyph-tooltip__sacrifice\">{{ scoreText() }}</span>\r\n    </div>\r\n    <div class=\"l-glyph-tooltip__effects\">\r\n      <GlyphTooltipEffect\r\n        v-for=\"e in sortedEffects\"\r\n        :key=\"e.id + changeWatcher\"\r\n        :effect=\"e.id\"\r\n        :value=\"e.value\"\r\n      />\r\n      <div\r\n        v-if=\"showChaosText\"\r\n        class=\"pelle-current-glyph-effects c-glyph-tooltip__effect\"\r\n      >\r\n        {{ chaosDescription }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-glyph-tooltip__sacrifice {\r\n  font-size: 1rem;\r\n  font-weight: normal;\r\n}\r\n</style>\r\n"]}]}