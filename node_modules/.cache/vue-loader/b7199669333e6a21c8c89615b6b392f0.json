{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\EnslavedHintsModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\EnslavedHintsModal.vue","mtime":1745241596815},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgTW9kYWxXcmFwcGVyIGZyb20gIkAvY29tcG9uZW50cy9tb2RhbHMvTW9kYWxXcmFwcGVyIjsNCmltcG9ydCBQcmltYXJ5QnV0dG9uIGZyb20gIkAvY29tcG9uZW50cy9QcmltYXJ5QnV0dG9uIjsNCg0KZXhwb3J0IGRlZmF1bHQgew0KICBuYW1lOiAiRW5zbGF2ZWRIaW50c01vZGFsIiwNCiAgY29tcG9uZW50czogew0KICAgIE1vZGFsV3JhcHBlciwNCiAgICBQcmltYXJ5QnV0dG9uDQogIH0sDQogIGRhdGEoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIGN1cnJlbnRTdG9yZWQ6IDAsDQogICAgICBuZXh0SGludENvc3Q6IDAsDQogICAgICBjYW5HZXRIaW50OiBmYWxzZSwNCiAgICAgIHNob3duRW50cmllczogW10sDQogICAgICByZWFsaXR5SGludHNMZWZ0OiAwLA0KICAgICAgZ2x5cGhIaW50c0xlZnQ6IDAsDQogICAgICBoaW50czogMCwNCiAgICB9Ow0KICB9LA0KICBjb21wdXRlZDogew0KICAgIGhpbnRDb3N0KCkgew0KICAgICAgcmV0dXJuIGAke3F1YW50aWZ5KCJ5ZWFyIiwgVGltZVNwYW4uZnJvbU1pbGxpc2Vjb25kcyh0aGlzLm5leHRIaW50Q29zdCkudG90YWxZZWFycywgMil9YDsNCiAgICB9LA0KICAgIGZvcm1hdHRlZFN0b3JlZCgpIHsNCiAgICAgIHJldHVybiBgJHtxdWFudGlmeSgieWVhciIsIFRpbWVTcGFuLmZyb21NaWxsaXNlY29uZHModGhpcy5jdXJyZW50U3RvcmVkKS50b3RhbFllYXJzLCAyKX1gOw0KICAgIH0sDQogICAgaGFzUHJvZ3Jlc3MoaWQpIHsNCiAgICAgIHJldHVybiB0aGlzLnByb2dyZXNzRW50cmllcy5zb21lKGVudHJ5ID0+IGVudHJ5LmlkID09PSBpZCk7DQogICAgfSwNCiAgICAvLyBOb3RlOiBUaGlzIGNhbGN1bGF0aW9uIHNlZW1zIHRvIGJlaGF2ZSBleHRyZW1lbHkgcG9vcmx5IGlmIHRoZSBnb2FsIGhhcyBiZWVuIHJhaXNlZCBtb3JlIHRoYW4gMTIgaGludHMgd29ydGgNCiAgICAvLyBvZiBjb3N0IGJ1bXBzIGFuZCBJJ20gbm90IGVudGlyZWx5IHN1cmUgd2h5LiBUaGVyZSdzIHByb2JhYmx5IGEgbnVtZXJpY2FsIGlzc3VlIEkgY2FuJ3QgcXVpdGUgZmlndXJlIG91dCwgYnV0DQogICAgLy8gY29uc2lkZXJpbmcgdGhhdCBtdWNoIGNvc3QgcmFpc2luZyBjYW4ndCBoYXBwZW4gaW4gcHJhY3RpY2UgSSB0aGluayBJJ20ganVzdCBnb2luZyB0byBsZWF2ZSBpdCBiZS4NCiAgICB0aW1lRXN0aW1hdGUoKSB7DQogICAgICBpZiAodGhpcy5jdXJyZW50U3RvcmVkID49IHRoaXMubmV4dEhpbnRDb3N0KSByZXR1cm4gIiI7DQoNCiAgICAgIC8vIFJlbGV2YW50IHZhbHVlcyBhcmUgc3RvcmVkIGFzIG1pbGxpc2Vjb25kcywgc28gbXVsdGlwbHkgdGhlIHJhdGUgYnkgMTAwMCB0byBnZXQgdG8gc2Vjb25kcw0KICAgICAgY29uc3Qgc3RvcmVSYXRlID0gMTAwMCAqIChFbnNsYXZlZC5pc1N0b3JpbmdHYW1lVGltZQ0KICAgICAgICA/IEVuc2xhdmVkLmN1cnJlbnRCbGFja0hvbGVTdG9yZUFtb3VudFBlck1zDQogICAgICAgIDogZ2V0R2FtZVNwZWVkdXBGYWN0b3IoKSk7DQogICAgICBjb25zdCBhbHJlYWR5V2FpdGVkID0gdGhpcy5jdXJyZW50U3RvcmVkIC8gc3RvcmVSYXRlOw0KICAgICAgY29uc3QgZGVjYXlsZXNzVGltZSA9IHRoaXMubmV4dEhpbnRDb3N0IC8gc3RvcmVSYXRlOw0KDQogICAgICAvLyBDaGVjayBpZiBkZWNheSBpcyBpcnJlbGV2YW50IGFuZCBkb24ndCBkbyB0aGUgaGFyZCBjYWxjdWxhdGlvbnMgaWYgc28NCiAgICAgIGNvbnN0IG1pbkNvc3RFc3RpbWF0ZSA9IChUaW1lU3Bhbi5mcm9tWWVhcnMoMWU0MCkudG90YWxNaWxsaXNlY29uZHMgLSB0aGlzLmN1cnJlbnRTdG9yZWQpIC8gc3RvcmVSYXRlOw0KICAgICAgaWYgKFRpbWVTcGFuLmZyb21TZWNvbmRzKG1pbkNvc3RFc3RpbWF0ZSkudG90YWxEYXlzID4gdGhpcy5oaW50cykgew0KICAgICAgICByZXR1cm4gYCR7VGltZVNwYW4uZnJvbVNlY29uZHMobWluQ29zdEVzdGltYXRlKS50b1N0cmluZ1Nob3J0KHRydWUpfWA7DQogICAgICB9DQoNCiAgICAgIC8vIERlY2F5IGlzIDN4IHBlciBkYXksIGJ1dCB0aGUgbWF0aCBuZWVkcyBkZWNheSBwZXIgc2Vjb25kDQogICAgICBjb25zdCBLID0gTWF0aC5wb3coMywgMSAvIDg2NDAwKTsNCiAgICAgIGNvbnN0IHggPSBkZWNheWxlc3NUaW1lICogTWF0aC5sb2coSykgKiBNYXRoLnBvdyhLLCBhbHJlYWR5V2FpdGVkKTsNCiAgICAgIGNvbnN0IHRpbWVUb0dvYWwgPSBwcm9kdWN0TG9nKHgpIC8gTWF0aC5sb2coSykgLSBhbHJlYWR5V2FpdGVkOw0KICAgICAgcmV0dXJuIGAke1RpbWVTcGFuLmZyb21TZWNvbmRzKHRpbWVUb0dvYWwpLnRvU3RyaW5nU2hvcnQodHJ1ZSl9YDsNCiAgICB9DQogIH0sDQogIG1ldGhvZHM6IHsNCiAgICB1cGRhdGUoKSB7DQogICAgICB0aGlzLmN1cnJlbnRTdG9yZWQgPSBwbGF5ZXIuY2VsZXN0aWFscy5lbnNsYXZlZC5zdG9yZWQ7DQogICAgICB0aGlzLm5leHRIaW50Q29zdCA9IEVuc2xhdmVkLm5leHRIaW50Q29zdDsNCiAgICAgIHRoaXMuY2FuR2V0SGludCA9IHRoaXMuY3VycmVudFN0b3JlZCA+PSB0aGlzLm5leHRIaW50Q29zdDsNCiAgICAgIHRoaXMuc2hvd25FbnRyaWVzID0gW107DQoNCiAgICAgIHRoaXMucmVhbGl0eUhpbnRzTGVmdCA9IEVuc2xhdmVkUHJvZ3Jlc3MuYWxsLmxlbmd0aDsNCiAgICAgIGZvciAoY29uc3QgcHJvZyBvZiBFbnNsYXZlZFByb2dyZXNzLmFsbCkgew0KICAgICAgICBpZiAocHJvZy5oYXNIaW50KSB7DQogICAgICAgICAgdGhpcy5zaG93bkVudHJpZXMucHVzaChbZmFsc2UsIHByb2ddKTsNCiAgICAgICAgICB0aGlzLnJlYWxpdHlIaW50c0xlZnQtLTsNCiAgICAgICAgfQ0KICAgICAgfQ0KDQogICAgICBjb25zdCBnbHlwaEhpbnRDb3VudCA9IHBsYXllci5jZWxlc3RpYWxzLmVuc2xhdmVkLmdseXBoSGludHNHaXZlbjsNCiAgICAgIGZvciAobGV0IGhpbnROdW0gPSAwOyBoaW50TnVtIDwgZ2x5cGhIaW50Q291bnQ7IGhpbnROdW0rKykgew0KICAgICAgICB0aGlzLnNob3duRW50cmllcy5wdXNoKFt0cnVlLCBHYW1lRGF0YWJhc2UuY2VsZXN0aWFscy5lbnNsYXZlZC5nbHlwaEhpbnRzW2hpbnROdW1dXSk7DQogICAgICB9DQogICAgICB0aGlzLmdseXBoSGludHNMZWZ0ID0gR2FtZURhdGFiYXNlLmNlbGVzdGlhbHMuZW5zbGF2ZWQuZ2x5cGhIaW50cy5sZW5ndGggLSBnbHlwaEhpbnRDb3VudDsNCg0KICAgICAgdGhpcy5oaW50cyA9IEVuc2xhdmVkLmhpbnRDb3N0SW5jcmVhc2VzOw0KICAgIH0sDQogICAgZ2l2ZVJlYWxpdHlIaW50KGF2YWlsYWJsZSkgew0KICAgICAgaWYgKGF2YWlsYWJsZSA8PSAwIHx8ICFFbnNsYXZlZC5zcGVuZFRpbWVGb3JIaW50KCkpIHJldHVybjsNCiAgICAgIEVuc2xhdmVkUHJvZ3Jlc3MuYWxsLmZpbHRlcihwcm9nID0+ICFwcm9nLmhhc0hpbnQpLnJhbmRvbUVsZW1lbnQoKS51bmxvY2soKTsNCiAgICB9LA0KICAgIGdpdmVHbHlwaEhpbnQoYXZhaWxhYmxlKSB7DQogICAgICBpZiAoYXZhaWxhYmxlIDw9IDAgfHwgIUVuc2xhdmVkLnNwZW5kVGltZUZvckhpbnQoKSkgcmV0dXJuOw0KICAgICAgcGxheWVyLmNlbGVzdGlhbHMuZW5zbGF2ZWQuZ2x5cGhIaW50c0dpdmVuKys7DQogICAgfQ0KICB9LA0KDQp9Ow0K"},{"version":3,"sources":["EnslavedHintsModal.vue"],"names":[],"mappings":";AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"EnslavedHintsModal.vue","sourceRoot":"src/components/modals","sourcesContent":["<script>\r\nimport ModalWrapper from \"@/components/modals/ModalWrapper\";\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\n\r\nexport default {\r\n  name: \"EnslavedHintsModal\",\r\n  components: {\r\n    ModalWrapper,\r\n    PrimaryButton\r\n  },\r\n  data() {\r\n    return {\r\n      currentStored: 0,\r\n      nextHintCost: 0,\r\n      canGetHint: false,\r\n      shownEntries: [],\r\n      realityHintsLeft: 0,\r\n      glyphHintsLeft: 0,\r\n      hints: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    hintCost() {\r\n      return `${quantify(\"year\", TimeSpan.fromMilliseconds(this.nextHintCost).totalYears, 2)}`;\r\n    },\r\n    formattedStored() {\r\n      return `${quantify(\"year\", TimeSpan.fromMilliseconds(this.currentStored).totalYears, 2)}`;\r\n    },\r\n    hasProgress(id) {\r\n      return this.progressEntries.some(entry => entry.id === id);\r\n    },\r\n    // Note: This calculation seems to behave extremely poorly if the goal has been raised more than 12 hints worth\r\n    // of cost bumps and I'm not entirely sure why. There's probably a numerical issue I can't quite figure out, but\r\n    // considering that much cost raising can't happen in practice I think I'm just going to leave it be.\r\n    timeEstimate() {\r\n      if (this.currentStored >= this.nextHintCost) return \"\";\r\n\r\n      // Relevant values are stored as milliseconds, so multiply the rate by 1000 to get to seconds\r\n      const storeRate = 1000 * (Enslaved.isStoringGameTime\r\n        ? Enslaved.currentBlackHoleStoreAmountPerMs\r\n        : getGameSpeedupFactor());\r\n      const alreadyWaited = this.currentStored / storeRate;\r\n      const decaylessTime = this.nextHintCost / storeRate;\r\n\r\n      // Check if decay is irrelevant and don't do the hard calculations if so\r\n      const minCostEstimate = (TimeSpan.fromYears(1e40).totalMilliseconds - this.currentStored) / storeRate;\r\n      if (TimeSpan.fromSeconds(minCostEstimate).totalDays > this.hints) {\r\n        return `${TimeSpan.fromSeconds(minCostEstimate).toStringShort(true)}`;\r\n      }\r\n\r\n      // Decay is 3x per day, but the math needs decay per second\r\n      const K = Math.pow(3, 1 / 86400);\r\n      const x = decaylessTime * Math.log(K) * Math.pow(K, alreadyWaited);\r\n      const timeToGoal = productLog(x) / Math.log(K) - alreadyWaited;\r\n      return `${TimeSpan.fromSeconds(timeToGoal).toStringShort(true)}`;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.currentStored = player.celestials.enslaved.stored;\r\n      this.nextHintCost = Enslaved.nextHintCost;\r\n      this.canGetHint = this.currentStored >= this.nextHintCost;\r\n      this.shownEntries = [];\r\n\r\n      this.realityHintsLeft = EnslavedProgress.all.length;\r\n      for (const prog of EnslavedProgress.all) {\r\n        if (prog.hasHint) {\r\n          this.shownEntries.push([false, prog]);\r\n          this.realityHintsLeft--;\r\n        }\r\n      }\r\n\r\n      const glyphHintCount = player.celestials.enslaved.glyphHintsGiven;\r\n      for (let hintNum = 0; hintNum < glyphHintCount; hintNum++) {\r\n        this.shownEntries.push([true, GameDatabase.celestials.enslaved.glyphHints[hintNum]]);\r\n      }\r\n      this.glyphHintsLeft = GameDatabase.celestials.enslaved.glyphHints.length - glyphHintCount;\r\n\r\n      this.hints = Enslaved.hintCostIncreases;\r\n    },\r\n    giveRealityHint(available) {\r\n      if (available <= 0 || !Enslaved.spendTimeForHint()) return;\r\n      EnslavedProgress.all.filter(prog => !prog.hasHint).randomElement().unlock();\r\n    },\r\n    giveGlyphHint(available) {\r\n      if (available <= 0 || !Enslaved.spendTimeForHint()) return;\r\n      player.celestials.enslaved.glyphHintsGiven++;\r\n    }\r\n  },\r\n\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapper>\r\n    <template #header>\r\n      Cracks in The Nameless Ones' Reality\r\n    </template>\r\n    <div class=\"c-enslaved-hint-modal c-modal--short\">\r\n      <div>\r\n        This Reality seems to be resisting your efforts to complete it. So far you have done the following:\r\n      </div>\r\n      <br>\r\n      <div\r\n        v-for=\"(entry, index) in shownEntries\"\r\n        :key=\"index\"\r\n      >\r\n        <div v-if=\"!entry[0]\">\r\n          <span v-if=\"entry[1].hasHint && !entry[1].hasProgress\">\r\n            <i class=\"c-icon-wrapper fas fa-question-circle\" />\r\n            <b>You have not figured out what this hint means yet.</b>\r\n          </span>\r\n          <span v-else>\r\n            <i class=\"c-icon-wrapper fa-solid fa-house-crack\" />\r\n            <b>You have exposed a crack in the Reality:</b>\r\n          </span>\r\n          <br>\r\n          - {{ entry[1].hintInfo }}\r\n          <br>\r\n          - {{ entry[1].hasProgress ? entry[1].completedInfo : \"?????\" }}\r\n        </div>\r\n        <div v-else>\r\n          <i class=\"fa-solid fa-shapes\" /> <b>Glyph hint:</b>\r\n          <br>\r\n          {{ entry[1] }}\r\n        </div>\r\n        <br>\r\n      </div>\r\n      <div v-if=\"realityHintsLeft + glyphHintsLeft > 0\">\r\n        You can spend some time looking for some more cracks in the Reality, but every hint you spend Stored Time on\r\n        will increase the Stored Time needed for the next by a factor of {{ formatInt(3) }}. This cost bump will\r\n        gradually go away over {{ formatInt(24) }} hours and figuring out what the hint means will immediately\r\n        divide the cost by {{ formatInt(2) }}. The cost can't be reduced below {{ format(1e40) }} years.\r\n        <br><br>\r\n        The next hint will cost {{ hintCost }} of Stored Time. You currently have {{ formattedStored }}.\r\n        <span v-if=\"currentStored < nextHintCost\">\r\n          You will reach this if you charge your Black Hole for {{ timeEstimate }}.\r\n        </span>\r\n        <br><br>\r\n        <PrimaryButton\r\n          :enabled=\"realityHintsLeft > 0 && canGetHint\"\r\n          class=\"l-enslaved-hint-button\"\r\n          @click=\"giveRealityHint(realityHintsLeft)\"\r\n        >\r\n          Get a hint about the Reality itself ({{ formatInt(realityHintsLeft) }} left)\r\n        </PrimaryButton>\r\n        <br>\r\n        <PrimaryButton\r\n          :enabled=\"glyphHintsLeft > 0 && canGetHint\"\r\n          class=\"l-enslaved-hint-button\"\r\n          @click=\"giveGlyphHint(glyphHintsLeft)\"\r\n        >\r\n          Get a hint on what Glyphs to use ({{ formatInt(glyphHintsLeft) }} left)\r\n        </PrimaryButton>\r\n      </div>\r\n      <div v-else>\r\n        <b>There are no more hints left!</b>\r\n      </div>\r\n    </div>\r\n  </ModalWrapper>\r\n</template>\r\n\r\n<style scoped>\r\n.c-icon-wrapper {\r\n  margin-right: 1rem;\r\n}\r\n\r\n.l-enslaved-hint-button {\r\n  margin: 0.4rem 0;\r\n}\r\n</style>\r\n"]}]}