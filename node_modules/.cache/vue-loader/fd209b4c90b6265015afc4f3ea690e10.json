{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\automator\\AutomatorModeSwitch.vue?vue&type=style&index=0&id=1ce74ccf&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\automator\\AutomatorModeSwitch.vue","mtime":1745241597075},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5jLXNsaWRlci10b2dnbGUtYnV0dG9uIHsNCiAgZGlzcGxheTogZmxleDsNCiAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgcG9zaXRpb246IHJlbGF0aXZlOw0KICBhbGlnbi1pdGVtczogY2VudGVyOw0KICBjb2xvcjogdmFyKC0tY29sb3ItYXV0b21hdG9yLWRvY3MtZm9udCk7DQogIGJhY2tncm91bmQtY29sb3I6ICM2MjYyNjI7DQogIGJvcmRlcjogdmFyKC0tdmFyLWJvcmRlci13aWR0aCwgMC4ycmVtKSBzb2xpZCAjNzY3Njc2Ow0KICBib3JkZXItcmFkaXVzOiB2YXIoLS12YXItYm9yZGVyLXJhZGl1cywgMC4zcmVtKTsNCiAgbWFyZ2luOiAwLjNyZW0gMC40cmVtIDAuM3JlbSAwLjVyZW07DQogIHBhZGRpbmc6IDAuM3JlbSAwOw0KICBjdXJzb3I6IHBvaW50ZXI7DQp9DQoNCi5jLXNsaWRlci10b2dnbGUtYnV0dG9uIC5mYXMgew0KICB3aWR0aDogM3JlbTsNCiAgcG9zaXRpb246IHJlbGF0aXZlOw0KICB6LWluZGV4OiAxOw0KfQ0KDQouYy1zbGlkZXItdG9nZ2xlLWJ1dHRvbjo6YmVmb3JlIHsNCiAgY29udGVudDogIiI7DQogIHdpZHRoOiAzcmVtOw0KICBoZWlnaHQ6IDEwMCU7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgdG9wOiAwOw0KICBsZWZ0OiAwOw0KICB6LWluZGV4OiAwOw0KICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvci1hdXRvbWF0b3ItY29udHJvbHMtaW5hY3RpdmUpOw0KICBib3JkZXItcmFkaXVzOiB2YXIoLS12YXItYm9yZGVyLXJhZGl1cywgMC4zcmVtKTsNCiAgdHJhbnNpdGlvbjogMC4zcyBlYXNlIGFsbDsNCn0NCg0KLmMtc2xpZGVyLXRvZ2dsZS1idXR0b24tLXJpZ2h0OjpiZWZvcmUgew0KICBsZWZ0OiAzcmVtOw0KICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvci1hdXRvbWF0b3ItY29udHJvbHMtaW5hY3RpdmUpOw0KfQ0KDQoudHV0b3JpYWwtLWdsb3c6OmFmdGVyIHsNCiAgei1pbmRleDogMjsNCn0NCg=="},{"version":3,"sources":["AutomatorModeSwitch.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"AutomatorModeSwitch.vue","sourceRoot":"src/components/tabs/automator","sourcesContent":["<script>\r\nimport { blockifyTextAutomator } from \"@/core/automator\";\r\n\r\nexport default {\r\n  name: \"AutomatorModeSwitch\",\r\n  data() {\r\n    return {\r\n      automatorType: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    currentScriptID: {\r\n      get() {\r\n        return this.$viewModel.tabs.reality.automator.editorScriptID;\r\n      },\r\n      set(value) {\r\n        this.$viewModel.tabs.reality.automator.editorScriptID = value;\r\n      }\r\n    },\r\n    currentScriptContent() {\r\n      return player.reality.automator.scripts[this.currentScriptID].content;\r\n    },\r\n    currentScript() {\r\n      return CodeMirror.Doc(this.currentScriptContent, \"automato\").getValue();\r\n    },\r\n    isTextAutomator() {\r\n      return this.automatorType === AUTOMATOR_TYPE.TEXT;\r\n    },\r\n    automatorModeTooltip() {\r\n      if (this.automatorType === AUTOMATOR_TYPE.BLOCK) return \"Switch to the text editor\";\r\n      return \"Switch to the block editor\";\r\n    },\r\n    tutorialClass() {\r\n      return {\r\n        \"tutorial--glow\": ui.view.tutorialState === TUTORIAL_STATE.AUTOMATOR && ui.view.tutorialActive\r\n      };\r\n    },\r\n  },\r\n  created() {\r\n    this.on$(GAME_EVENT.GAME_LOAD, () => this.onGameLoad());\r\n    this.on$(GAME_EVENT.AUTOMATOR_SAVE_CHANGED, () => this.onGameLoad());\r\n    this.updateCurrentScriptID();\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.automatorType = player.reality.automator.type;\r\n    },\r\n    onGameLoad() {\r\n      this.updateCurrentScriptID();\r\n    },\r\n    updateCurrentScriptID() {\r\n      const storedScripts = player.reality.automator.scripts;\r\n      this.currentScriptID = player.reality.automator.state.editorScript;\r\n      // This shouldn't happen if things are loaded in the right order, but might as well be sure.\r\n      if (storedScripts[this.currentScriptID] === undefined) {\r\n        this.currentScriptID = Object.keys(storedScripts)[0];\r\n        player.reality.automator.state.editorScript = this.currentScriptID;\r\n        AutomatorData.clearUndoData();\r\n      }\r\n      if (BlockAutomator.hasUnparsableCommands(this.currentScript) &&\r\n        player.reality.automator.type === AUTOMATOR_TYPE.BLOCK) {\r\n        Modal.message.show(`Some script commands were unrecognizable - defaulting to text editor.`);\r\n        AutomatorBackend.changeModes(this.currentScriptID);\r\n      }\r\n      this.$nextTick(() => BlockAutomator.updateEditor(this.currentScript));\r\n    },\r\n    toggleAutomatorMode() {\r\n      const currScript = player.reality.automator.scripts[this.currentScriptID].content;\r\n      const hasTextErrors = this.automatorType === AUTOMATOR_TYPE.TEXT &&\r\n        (BlockAutomator.hasUnparsableCommands(currScript) || AutomatorData.currentErrors().length !== 0);\r\n\r\n      if (player.options.confirmations.switchAutomatorMode && (hasTextErrors || AutomatorBackend.isRunning)) {\r\n        const blockified = blockifyTextAutomator(currScript);\r\n\r\n        // We explicitly pass in 0 for lostBlocks if converting from block to text since nothing is ever lost in that\r\n        // conversion direction\r\n        const lostBlocks = this.automatorType === AUTOMATOR_TYPE.TEXT\r\n          ? blockified.validatedBlocks - blockified.visitedBlocks\r\n          : 0;\r\n        Modal.switchAutomatorEditorMode.show({\r\n          callBack: () => this.$recompute(\"currentScriptContent\"),\r\n          lostBlocks,\r\n        });\r\n      } else {\r\n        AutomatorBackend.changeModes(this.currentScriptID);\r\n      }\r\n      AutomatorData.clearUndoData();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <button\r\n    v-tooltip=\"{\r\n      content: automatorModeTooltip,\r\n      hideOnTargetClick: false\r\n    }\"\r\n    :class=\"{\r\n      'c-slider-toggle-button': true,\r\n      'c-slider-toggle-button--right': isTextAutomator,\r\n      ...tutorialClass\r\n    }\"\r\n    @click=\"toggleAutomatorMode\"\r\n  >\r\n    <i class=\"fas fa-cubes\" />\r\n    <i class=\"fas fa-code\" />\r\n  </button>\r\n</template>\r\n\r\n<style scoped>\r\n.c-slider-toggle-button {\r\n  display: flex;\r\n  overflow: hidden;\r\n  position: relative;\r\n  align-items: center;\r\n  color: var(--color-automator-docs-font);\r\n  background-color: #626262;\r\n  border: var(--var-border-width, 0.2rem) solid #767676;\r\n  border-radius: var(--var-border-radius, 0.3rem);\r\n  margin: 0.3rem 0.4rem 0.3rem 0.5rem;\r\n  padding: 0.3rem 0;\r\n  cursor: pointer;\r\n}\r\n\r\n.c-slider-toggle-button .fas {\r\n  width: 3rem;\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\n.c-slider-toggle-button::before {\r\n  content: \"\";\r\n  width: 3rem;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 0;\r\n  background-color: var(--color-automator-controls-inactive);\r\n  border-radius: var(--var-border-radius, 0.3rem);\r\n  transition: 0.3s ease all;\r\n}\r\n\r\n.c-slider-toggle-button--right::before {\r\n  left: 3rem;\r\n  background-color: var(--color-automator-controls-inactive);\r\n}\r\n\r\n.tutorial--glow::after {\r\n  z-index: 2;\r\n}\r\n</style>\r\n"]}]}