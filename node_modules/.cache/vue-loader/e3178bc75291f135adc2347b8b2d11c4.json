{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\automator\\AutomatorEditor.vue?vue&type=style&index=0&id=4a8c66f6&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\automator\\AutomatorEditor.vue","mtime":1745241597072},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouYy1zbGlkZXItdG9nZ2xlLWJ1dHRvbiB7DQogIGRpc3BsYXk6IGZsZXg7DQogIG92ZXJmbG93OiBoaWRkZW47DQogIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgY29sb3I6IGJsYWNrOw0KICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjI2MjYyOw0KICBib3JkZXI6IDAuMnJlbSBzb2xpZCAjNzY3Njc2Ow0KICBib3JkZXItcmFkaXVzOiAwLjJyZW07DQogIG1hcmdpbjogMC40cmVtOw0KICBwYWRkaW5nOiAwLjNyZW0gMDsNCiAgY3Vyc29yOiBwb2ludGVyOw0KfQ0KDQoucy5iYXNlLS1kYXJrIC5jLXNsaWRlci10b2dnbGUtYnV0dG9uIHsNCiAgYmFja2dyb3VuZC1jb2xvcjogIzYyNjI2MjsNCn0NCg0KLmMtc2xpZGVyLXRvZ2dsZS1idXR0b24gLmZhcyB7DQogIHdpZHRoOiAzcmVtOw0KICBwb3NpdGlvbjogcmVsYXRpdmU7DQogIHotaW5kZXg6IDE7DQp9DQoNCi5jLXNsaWRlci10b2dnbGUtYnV0dG9uOmJlZm9yZSB7DQogIGNvbnRlbnQ6ICIiOw0KICB3aWR0aDogM3JlbTsNCiAgaGVpZ2h0OiAxMDAlOw0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIHRvcDogMDsNCiAgbGVmdDogMDsNCiAgei1pbmRleDogMDsNCiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQogIGJvcmRlci1yYWRpdXM6IDAuMnJlbTsNCiAgdHJhbnNpdGlvbjogMC4zcyBlYXNlIGFsbDsNCn0NCg0KLmMtc2xpZGVyLXRvZ2dsZS1idXR0b24tLXJpZ2h0OmJlZm9yZSB7DQogIGxlZnQ6IDNyZW07DQogIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOw0KfQ0KDQoudHV0b3JpYWwtLWdsb3c6YWZ0ZXIgew0KICB6LWluZGV4OiAyOw0KfQ0K"},{"version":3,"sources":["AutomatorEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"AutomatorEditor.vue","sourceRoot":"src/components/tabs/automator","sourcesContent":["<script>\r\nimport AutomatorBlockEditor from \"./AutomatorBlockEditor\";\r\nimport AutomatorControls from \"./AutomatorControls\";\r\nimport AutomatorTextEditor from \"./AutomatorTextEditor\";\r\n\r\nexport default {\r\n  name: \"AutomatorEditor\",\r\n  components: {\r\n    AutomatorBlockEditor,\r\n    AutomatorTextEditor,\r\n    AutomatorControls,\r\n  },\r\n  data() {\r\n    return {\r\n      automatorType: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    currentScriptID: {\r\n      get() {\r\n        return this.$viewModel.tabs.reality.automator.editorScriptID;\r\n      },\r\n      set(value) {\r\n        this.$viewModel.tabs.reality.automator.editorScriptID = value;\r\n      }\r\n    },\r\n    currentScriptContent() {\r\n      return player.reality.automator.scripts[this.currentScriptID].content;\r\n    },\r\n    currentScript() {\r\n      return CodeMirror.Doc(this.currentScriptContent, \"automato\").getValue();\r\n    },\r\n    isTextAutomator() {\r\n      return this.automatorType === AUTOMATOR_TYPE.TEXT;\r\n    },\r\n  },\r\n  created() {\r\n    this.on$(GAME_EVENT.GAME_LOAD, () => this.onGameLoad());\r\n    this.on$(GAME_EVENT.AUTOMATOR_SAVE_CHANGED, () => this.onGameLoad());\r\n    this.updateCurrentScriptID();\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.automatorType = player.reality.automator.type;\r\n      if (!AutomatorBackend.isOn && AutomatorTextUI.editor && AutomatorData.needsRecompile) {\r\n        AutomatorTextUI.editor.performLint();\r\n      }\r\n    },\r\n    onGameLoad() {\r\n      this.updateCurrentScriptID();\r\n    },\r\n    updateCurrentScriptID() {\r\n      const storedScripts = player.reality.automator.scripts;\r\n      this.currentScriptID = player.reality.automator.state.editorScript;\r\n      // This shouldn't happen if things are loaded in the right order, but might as well be sure.\r\n      if (storedScripts[this.currentScriptID] === undefined) {\r\n        this.currentScriptID = Number(Object.keys(storedScripts)[0]);\r\n        player.reality.automator.state.editorScript = this.currentScriptID;\r\n        AutomatorData.clearUndoData();\r\n      }\r\n      // This may happen if the player has errored textmato scripts and switches to them while in blockmato mode\r\n      if (BlockAutomator.hasUnparsableCommands(this.currentScript) &&\r\n        player.reality.automator.type === AUTOMATOR_TYPE.BLOCK) {\r\n        Modal.message.show(`Some incomplete blocks were unrecognizable - defaulting to text editor.`);\r\n\r\n        // AutomatorBackend.changeModes initializes the new editor and savefile state from BlockAutomator.lines, which\r\n        // will be empty if this is running upon game load - this ends up wiping the entire script. So we instead set\r\n        // the new script content external to that method call to keep most of the script intact\r\n        const erroredScript = AutomatorData.currentScriptText();\r\n        AutomatorBackend.changeModes(this.currentScriptID);\r\n        player.reality.automator.scripts[this.currentScriptID].content = erroredScript;\r\n        this.automatorType = AUTOMATOR_TYPE.TEXT;\r\n      }\r\n      this.$nextTick(() => BlockAutomator.updateEditor(this.currentScript));\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-automator-pane\">\r\n    <AutomatorControls />\r\n    <AutomatorTextEditor\r\n      v-if=\"isTextAutomator\"\r\n      :current-script-id=\"currentScriptID\"\r\n    />\r\n    <AutomatorBlockEditor v-if=\"!isTextAutomator\" />\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-slider-toggle-button {\r\n  display: flex;\r\n  overflow: hidden;\r\n  position: relative;\r\n  align-items: center;\r\n  color: black;\r\n  background-color: #626262;\r\n  border: 0.2rem solid #767676;\r\n  border-radius: 0.2rem;\r\n  margin: 0.4rem;\r\n  padding: 0.3rem 0;\r\n  cursor: pointer;\r\n}\r\n\r\n.s.base--dark .c-slider-toggle-button {\r\n  background-color: #626262;\r\n}\r\n\r\n.c-slider-toggle-button .fas {\r\n  width: 3rem;\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\n.c-slider-toggle-button:before {\r\n  content: \"\";\r\n  width: 3rem;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 0;\r\n  background-color: white;\r\n  border-radius: 0.2rem;\r\n  transition: 0.3s ease all;\r\n}\r\n\r\n.c-slider-toggle-button--right:before {\r\n  left: 3rem;\r\n  background-color: white;\r\n}\r\n\r\n.tutorial--glow:after {\r\n  z-index: 2;\r\n}\r\n</style>\r\n"]}]}