{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\perks\\PerksTab.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\perks\\PerksTab.vue","mtime":1745241597418},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["PerksTab.vue"],"names":[],"mappings":";AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"PerksTab.vue","sourceRoot":"src/components/tabs/perks","sourcesContent":["<script>\r\nimport { DataSet, Network } from \"vis-network\";\r\n\r\nimport { PERK_FAMILY } from \"@/core/secret-formula\";\r\nimport PerkPointLabel from \"./PerkPointLabel\";\r\n\r\nexport default {\r\n  name: \"PerksTab\",\r\n  components: {\r\n    PerkPointLabel\r\n  },\r\n  computed: {\r\n    showHintText() {\r\n      return ui.view.shiftDown || player.options.showHintText.perks;\r\n    }\r\n  },\r\n  watch: {\r\n    showHintText(newValue) {\r\n      if (ui.view.theme === \"S9\") PerkNetwork.setLabelVisibility(false);\r\n      else PerkNetwork.setLabelVisibility(newValue);\r\n    }\r\n  },\r\n  created() {\r\n    EventHub.ui.on(GAME_EVENT.PERK_BOUGHT, () => PerkNetwork.updatePerkColor());\r\n  },\r\n  mounted() {\r\n    PerkNetwork.initialStabilization = false;\r\n    PerkNetwork.currentLayout = PerkLayouts[player.options.perkLayout];\r\n    PerkNetwork.initializeIfNeeded();\r\n    if (ui.view.theme === \"S9\") PerkNetwork.setLabelVisibility(false);\r\n    else PerkNetwork.setLabelVisibility(ui.view.shiftDown || player.options.showHintText.perks);\r\n    PerkNetwork.updatePerkColor();\r\n    PerkNetwork.updatePerkSize();\r\n    this.$refs.tab.appendChild(PerkNetwork.container);\r\n    PerkNetwork.moveToDefaultLayoutPositions(player.options.perkLayout);\r\n  }\r\n};\r\n\r\n// Primary is lifted from the study tree (mostly),\r\n// secondary is primary -15% l in hsl, apart from reality which is -10%\r\nconst perkColors = () => ({\r\n  [PERK_FAMILY.ANTIMATTER]: {\r\n    primary: \"#22aa48\",\r\n    secondary: \"#156a2d\"\r\n  },\r\n  [PERK_FAMILY.INFINITY]: {\r\n    primary: \"#b67f33\",\r\n    secondary: \"#7b5623\"\r\n  },\r\n  [PERK_FAMILY.ETERNITY]: {\r\n    primary: \"#b241e3\",\r\n    secondary: \"#8b1cba\"\r\n  },\r\n  [PERK_FAMILY.DILATION]: {\r\n    primary: \"#64dd17\",\r\n    secondary: \"#449810\"\r\n  },\r\n  [PERK_FAMILY.REALITY]: {\r\n    primary: \"#0b600e\",\r\n    secondary: \"#063207\"\r\n  },\r\n  [PERK_FAMILY.AUTOMATION]: {\r\n    primary: \"#ff0000\",\r\n    secondary: \"#b30000\"\r\n  },\r\n  [PERK_FAMILY.ACHIEVEMENT]: {\r\n    primary: \"#fdd835\",\r\n    secondary: \"#e3ba02\"\r\n  },\r\n});\r\n\r\n// Coordinate specifications are sometimes given in a grid index, so we need to spread them out to the proper scaling.\r\n// Positions with |x| < 20 and |y| < 12 will display well with a scale factor of 10.\r\n// When making new layouts, the grid coordinates need to be multiplied by 5\r\nfunction globalScale(vec, factor, widthFactor = 1) {\r\n  return vec.matrixTransform(factor * widthFactor, 0, 0, factor);\r\n}\r\n\r\nfunction positionNumToVector(num) {\r\n  const xPart = num % 400;\r\n  const yPart = Math.floor(num / 400);\r\n  return new Vector(5 * (xPart - 200), 5 * (yPart - 200));\r\n}\r\n\r\n// Specification for different starting layouts\r\nexport const PerkLayouts = [\r\n  {\r\n    buttonText: \"Default Untangled\",\r\n    position: config => positionNumToVector(config.layoutPosList[0]),\r\n  },\r\n  {\r\n    buttonText: \"Random Positions\",\r\n    position: () => new Vector(2000 * Math.random() - 1000, 1200 * Math.random() - 600),\r\n  },\r\n  {\r\n    // This is the perks laid out in the same way that they're laid out in the Android version\r\n    buttonText: \"Android Layout\",\r\n    position: config => globalScale(positionNumToVector(config.layoutPosList[1]), 20, 1.5),\r\n    centerOffset: new Vector(0, 120),\r\n    forcePhysics: false,\r\n    straightEdges: true,\r\n  },\r\n  {\r\n    buttonText: \"Square\",\r\n    position: config => globalScale(positionNumToVector(config.layoutPosList[2]), 27.5),\r\n    centerOffset: new Vector(0, 0),\r\n    forcePhysics: false,\r\n    straightEdges: true,\r\n  },\r\n  {\r\n    buttonText: \"Horizontal Grid\",\r\n    position: config => globalScale(positionNumToVector(config.layoutPosList[3]), 32.5),\r\n    centerOffset: new Vector(-60, 0),\r\n    forcePhysics: false,\r\n    straightEdges: true,\r\n  },\r\n  {\r\n    buttonText: \"Distance from START\",\r\n    position: config => globalScale(positionNumToVector(config.layoutPosList[4]), 17.5),\r\n    centerOffset: new Vector(0, 0),\r\n    forcePhysics: false,\r\n    straightEdges: true,\r\n  },\r\n  {\r\n    buttonText: \"Blob\",\r\n    position: config => positionNumToVector(config.layoutPosList[5]),\r\n    centerOffset: new Vector(50, 0),\r\n    forcePhysics: false,\r\n    straightEdges: true,\r\n    isUnlocked: () => Themes.available().map(t => t.name).includes(\"S11\"),\r\n  }\r\n];\r\n\r\nexport const PerkNetwork = {\r\n  container: undefined,\r\n  network: undefined,\r\n  nodes: undefined,\r\n  minScale: 0.2,\r\n  maxScale: 4,\r\n  lastPerkNotation: \"\",\r\n  pulseTimer: 0,\r\n  initialStabilization: false,\r\n  currentLayout: {},\r\n  initializeIfNeeded() {\r\n    const notation = Notations.current.name;\r\n    if (this.container !== undefined && notation === this.lastPerkNotation) return;\r\n    this.lastPerkNotation = notation;\r\n\r\n    this.makeNetwork();\r\n\r\n    this.network.on(\"click\", params => {\r\n      const id = params.nodes[0];\r\n      if (!isFinite(id)) return;\r\n      Perks.find(id).purchase();\r\n      this.updatePerkColor();\r\n      this.updatePerkSize();\r\n    });\r\n\r\n    this.network.on(\"dragStart\", () => {\r\n      const tooltip = this.container.getElementsByClassName(\"vis-tooltip\")[0];\r\n      if (tooltip !== undefined) {\r\n        tooltip.style.visibility = \"hidden\";\r\n      }\r\n      if (!this.initialStabilization) {\r\n        this.setPhysics(player.options.perkPhysicsEnabled);\r\n        this.initialStabilization = true;\r\n      }\r\n    });\r\n\r\n    // Change node side while dragging on Cancer theme, but skip the method otherwise because it's mildly intensive\r\n    this.network.on(\"dragging\", () => {\r\n      SecretAchievement(45).tryUnlock();\r\n      if (Theme.current().name === \"S4\") PerkNetwork.updatePerkSize();\r\n    });\r\n\r\n    this.network.on(\"zoom\", () => {\r\n      const scale = this.network.getScale();\r\n      const clampedScale = Math.clamp(scale, this.minScale, this.maxScale);\r\n      if (scale !== clampedScale) {\r\n        this.network.moveTo({ scale: clampedScale });\r\n      }\r\n    });\r\n\r\n    this.network.on(\"stabilizationIterationsDone\", () => {\r\n      // Centering the perk tree doesn't work until the physics-based movement has stopped after the initial creation\r\n      if (!this.initialStabilization) {\r\n        this.resetPosition(false);\r\n        this.initialStabilization = true;\r\n      }\r\n      this.setPhysics(player.options.perkPhysicsEnabled);\r\n    });\r\n  },\r\n  makeNetwork() {\r\n    // Need to do some html to be able to apply some css for when in doomed\r\n    function htmlTitle(html) {\r\n      const container = document.createElement(\"div\");\r\n      container.innerHTML = html;\r\n      return container;\r\n    }\r\n    // Just for a bit of fun, tangle it up a bit unless the player specifically chooses not to\r\n    const isDisabled = perk => Pelle.isDoomed && Pelle.uselessPerks.includes(perk.id);\r\n    const selectPos = config => PerkLayouts[player.options.perkLayout].position(config);\r\n    this.nodes = new DataSet(Perks.all.map(perk => ({\r\n      id: perk.id,\r\n      label: perk.config.label,\r\n      shape: perk.config.automatorPoints ? \"diamond\" : \"dot\",\r\n      // As far as I am aware, vis.js doesn't support arbitrary CSS styling; nevertheless, we still want the original\r\n      // description to be visible instead of being hidden by disable/lock text\r\n      title: (isDisabled(perk)\r\n        ? htmlTitle(\r\n          `<span style='text-decoration: line-through;'>${perk.config.description}</span>`\r\n        )\r\n        : `${perk.config.description} ${perk.config.automatorPoints && !isDisabled(perk)\r\n          ? `(+${formatInt(perk.config.automatorPoints)} AP)`\r\n          : \"\"}`\r\n      ),\r\n      x: selectPos(perk.config).x,\r\n      y: selectPos(perk.config).y,\r\n    })));\r\n\r\n    const edges = [];\r\n    for (const perk of Perks.all) {\r\n      for (const connectedPerk of perk.connectedPerks) {\r\n        const from = Math.min(perk.id, connectedPerk.id);\r\n        const to = Math.max(perk.id, connectedPerk.id);\r\n        if (edges.find(edge => edge.from === from && edge.to === to)) continue;\r\n        edges.push({ from, to });\r\n      }\r\n    }\r\n\r\n    const nodeData = {\r\n      nodes: this.nodes,\r\n      edges\r\n    };\r\n\r\n    const nodeOptions = {\r\n      interaction: {\r\n        hover: true,\r\n        hoverConnectedEdges: false,\r\n        selectConnectedEdges: false,\r\n        tooltipDelay: 0,\r\n      },\r\n      nodes: {\r\n        shape: \"dot\",\r\n        size: 18,\r\n        font: {\r\n          size: 0\r\n        },\r\n        borderWidth: 2,\r\n        shadow: true\r\n      },\r\n      edges: {\r\n        width: 4,\r\n        shadow: true,\r\n        hoverWidth: width => width,\r\n        selectionWidth: width => width,\r\n        color: {\r\n          inherit: \"both\"\r\n        },\r\n        hidden: ui.view.theme === \"S9\"\r\n      },\r\n    };\r\n\r\n    const container = document.createElement(\"div\");\r\n    container.className = \"c-wide-canvas-element vis-network c-perk-network\";\r\n    container.tabIndex = 900;\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.className = \"c-perk-network__canvas\";\r\n    container.appendChild(canvas);\r\n    this.container = container;\r\n\r\n    this.network = new Network(container, nodeData, nodeOptions);\r\n  },\r\n  setPhysics(state) {\r\n    const newState = this.currentLayout.forcePhysics === undefined ? state : this.currentLayout.forcePhysics;\r\n    this.network.setOptions({ physics: { enabled: newState } });\r\n  },\r\n  setEdgeCurve(state) {\r\n    const newState = this.currentLayout.straightEdges === undefined ? state : !this.currentLayout.straightEdges;\r\n    this.network.setOptions({ edges: { smooth: { enabled: newState } } });\r\n  },\r\n  moveToDefaultLayoutPositions(layoutIndex) {\r\n    // Things go wonky if we don't turn these off before moving\r\n    this.setPhysics(false);\r\n    this.setEdgeCurve(false);\r\n\r\n    for (const key of Object.keys(PerkNetwork.network.getPositions())) {\r\n      const id = Number(key);\r\n      const config = Perks.all.find(p => p.id === id).config;\r\n      const target = PerkLayouts[layoutIndex].position(config);\r\n      this.network.moveNode(id, target.x, target.y);\r\n    }\r\n\r\n    // Properly set attributes and window after all the movement\r\n    this.initialStabilization = false;\r\n    this.resetPosition(false);\r\n    this.setEdgeCurve(true);\r\n  },\r\n  forceNetworkRemake() {\r\n    this.container = undefined;\r\n    this.initializeIfNeeded();\r\n    // Tangled trees use physics to bring it to a semi-usable state; it gets set properly again after stabilization\r\n    this.setPhysics(true);\r\n  },\r\n  resetPosition(centerOnStart) {\r\n    const center = centerOnStart\r\n      ? PerkNetwork.network.body.nodes[GameDatabase.reality.perks.firstPerk.id]\r\n      : (PerkLayouts[player.options.perkLayout].centerOffset ?? new Vector(0, 0));\r\n    this.network.moveTo({ position: { x: center.x, y: center.y }, scale: 0.4, offset: { x: 0, y: 0 } });\r\n  },\r\n  setLabelVisibility(areVisible) {\r\n    const options = {\r\n      nodes: {\r\n        font: {\r\n          size: areVisible ? 20 : 0,\r\n          color: Theme.current().isDark() ? \"#DDDDDD\" : \"#222222\",\r\n        }\r\n      }\r\n    };\r\n    this.network.setOptions(options);\r\n  },\r\n  updatePerkColor() {\r\n    this.perkColorList = this.perkColorList ?? perkColors();\r\n    const perkColorList = this.perkColorList;\r\n\r\n    function nodeColor(perk) {\r\n      const perkColor = perkColorList[perk.config.family];\r\n      const primaryColor = perkColor.primary;\r\n      const secondaryColor = perkColor.secondary;\r\n\r\n      const pelleUseless = Pelle.isDoomed && Pelle.uselessPerks.includes(perk.id);\r\n      if (pelleUseless) {\r\n        const backgroundColor = \"#00bcd4\";\r\n        const hoverColor = \"crimson\";\r\n        const borderColor = secondaryColor;\r\n        return {\r\n          background: backgroundColor,\r\n          border: borderColor,\r\n          hover: {\r\n            background: hoverColor,\r\n            border: borderColor\r\n          },\r\n          highlight: {\r\n            background: backgroundColor,\r\n            border: borderColor\r\n          }\r\n        };\r\n      }\r\n      const canBeBought = perk.canBeBought;\r\n      const isBought = perk.isBought;\r\n\r\n      let backgroundColor;\r\n      if (canBeBought) {\r\n        if (Theme.current().isDark()) backgroundColor = \"#EEEEEE\";\r\n        else backgroundColor = \"#111111\";\r\n      } else if (isBought) backgroundColor = primaryColor;\r\n      else if (Theme.current().isDark()) backgroundColor = \"#333333\";\r\n      else backgroundColor = \"#CCCCCC\";\r\n\r\n      const hoverColor = canBeBought || isBought ? primaryColor : \"#656565\";\r\n      const borderColor = secondaryColor;\r\n\r\n      return {\r\n        background: backgroundColor,\r\n        border: borderColor,\r\n        hover: {\r\n          background: hoverColor,\r\n          border: borderColor\r\n        },\r\n        highlight: {\r\n          background: backgroundColor,\r\n          border: borderColor\r\n        }\r\n      };\r\n    }\r\n\r\n    const data = Perks.all\r\n      .map(perk => ({ id: perk.id, color: nodeColor(perk) }));\r\n    this.nodes.update(data);\r\n  },\r\n  updatePerkSize() {\r\n    function nodeSize(perk) {\r\n      PerkNetwork.pulseTimer += 0.1;\r\n      // Make the nodes pulse continuously on Cancer theme\r\n      const mod = Theme.current().name === \"S4\"\r\n        ? 10 * Math.sin(5 * PerkNetwork.pulseTimer + 0.1 * perk._config.id)\r\n        : 0;\r\n      if (perk._config.label === \"START\") return 35 + mod;\r\n      if (perk.isBought) return 25 + mod;\r\n      if (perk.canBeBought) return 20 + mod;\r\n      return 12 + mod;\r\n    }\r\n\r\n    const data = Perks.all\r\n      .map(perk => ({ id: perk.id, size: nodeSize(perk) }));\r\n    this.nodes.update(data);\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    ref=\"tab\"\r\n    class=\"c-perk-tab\"\r\n  >\r\n    <PerkPointLabel />\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]}]}