{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\GlyphShowcasePanelModal.vue?vue&type=style&index=0&id=3662e2ae&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\GlyphShowcasePanelModal.vue","mtime":1745241596818},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouYy1nbHlwaC1jaG9pY2UtY29udGFpbmVyIHsNCiAgZGlzcGxheTogZmxleDsNCiAgZmxleC1mbG93OiByb3cgd3JhcDsNCiAgd2lkdGg6IDc0cmVtOw0KfQ0KDQouYy1nbHlwaC1jaG9pY2UtY29udGFpbmVyLXNpbmdsZSB7DQogIHdpZHRoOiAzN3JlbTsNCn0NCg0KLmMtZ2x5cGgtY2hvaWNlLXNpbmdsZS1nbHlwaCB7DQogIGRpc3BsYXk6IGZsZXg7DQogIGZsZXgtZGlyZWN0aW9uOiByb3c7DQogIHdpZHRoOiAzNnJlbTsNCiAgaGVpZ2h0OiAxMnJlbTsNCiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7DQogIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogIGJvcmRlci1yYWRpdXM6IHZhcigtLXZhci1ib3JkZXItcmFkaXVzLCAwLjVyZW0pOw0KICBtYXJnaW46IDAuNXJlbTsNCn0NCg=="},{"version":3,"sources":["GlyphShowcasePanelModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6GA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GlyphShowcasePanelModal.vue","sourceRoot":"src/components/modals","sourcesContent":["<script>\r\nimport GlyphSetName from \"@/components/GlyphSetName\";\r\nimport GlyphShowcasePanelEntry from \"@/components/modals/GlyphShowcasePanelEntry\";\r\nimport ModalWrapper from \"@/components/modals/ModalWrapper\";\r\n\r\nexport default {\r\n  name: \"GlyphShowcasePanelModal\",\r\n  components: {\r\n    GlyphSetName,\r\n    ModalWrapper,\r\n    GlyphShowcasePanelEntry,\r\n  },\r\n  props: {\r\n    name: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    glyphSet: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    isGlyphSelection: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    showSetName: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    displaySacrifice: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      glyphs: [],\r\n      gainedLevel: 0,\r\n      canSacrifice: false,\r\n      realityGlyphBoost: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    maxGlyphEffects() {\r\n      let maxEffects = 1;\r\n      for (const glyph of this.glyphs) {\r\n        maxEffects = Math.max(getGlyphEffectsFromBitmask(glyph.effects).filter(e => e.isGenerated).length, maxEffects);\r\n      }\r\n      return maxEffects;\r\n    },\r\n    containerClass() {\r\n      return {\r\n        \"c-glyph-choice-container\": true,\r\n        \"c-glyph-choice-container-single\": this.glyphs.length === 1,\r\n      };\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.glyphs = this.isGlyphSelection\r\n        ? GlyphSelection.glyphList(GlyphSelection.choiceCount, gainedGlyphLevel(), { isChoosingGlyph: false })\r\n        : this.glyphSet.filter(x => x);\r\n      this.sortGlyphs();\r\n      this.gainedLevel = gainedGlyphLevel().actualLevel;\r\n      // There should only be one reality glyph; this picks one pseudo-randomly if multiple are cheated/glitched in\r\n      const realityGlyph = this.glyphs.filter(g => g.type === \"reality\")[0];\r\n      this.realityGlyphBoost = realityGlyph\r\n        ? GlyphEffects.realityglyphlevel.effect(realityGlyph.level)\r\n        : 0;\r\n    },\r\n    sortGlyphs() {\r\n      const standardOrder = [\"reality\", \"effarig\", \"power\", \"infinity\", \"replication\", \"time\", \"dilation\",\r\n        \"cursed\", \"companion\"];\r\n      this.glyphs.sort((a, b) => standardOrder.indexOf(a.type) - standardOrder.indexOf(b.type));\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapper>\r\n    <template #header>\r\n      {{ name }}\r\n    </template>\r\n    <div v-if=\"isGlyphSelection\">\r\n      Projected Glyph Level: {{ formatInt(gainedLevel) }}\r\n    </div>\r\n    <GlyphSetName\r\n      v-if=\"showSetName\"\r\n      :glyph-set=\"glyphs\"\r\n      :force-color=\"true\"\r\n    />\r\n    <div :class=\"containerClass\">\r\n      <GlyphShowcasePanelEntry\r\n        v-for=\"(glyph, idx) in glyphs\"\r\n        :key=\"idx\"\r\n        class=\"c-glyph-choice-single-glyph\"\r\n        :idx=\"idx\"\r\n        :glyph=\"glyph\"\r\n        :show-level=\"!isGlyphSelection\"\r\n        :reality-glyph-boost=\"realityGlyphBoost\"\r\n        :max-glyph-effects=\"maxGlyphEffects\"\r\n        :show-sacrifice=\"displaySacrifice\"\r\n      />\r\n    </div>\r\n  </ModalWrapper>\r\n</template>\r\n\r\n<style scoped>\r\n.c-glyph-choice-container {\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  width: 74rem;\r\n}\r\n\r\n.c-glyph-choice-container-single {\r\n  width: 37rem;\r\n}\r\n\r\n.c-glyph-choice-single-glyph {\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 36rem;\r\n  height: 12rem;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  border-radius: var(--var-border-radius, 0.5rem);\r\n  margin: 0.5rem;\r\n}\r\n</style>\r\n"]}]}