{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\options\\BackupEntry.vue?vue&type=style&index=0&id=08f1b6b4&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\options\\BackupEntry.vue","mtime":1745241596929},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5jLWJvcmRlcmVkLWVudHJ5IHsNCiAgZGlzcGxheTogZmxleDsNCiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsNCiAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgZm9udC1zaXplOiAxLjFyZW07DQogIGJvcmRlcjogdmFyKC0tdmFyLWJvcmRlci13aWR0aCwgMC4ycmVtKSBzb2xpZDsNCiAgYm9yZGVyLXJhZGl1czogdmFyKC0tdmFyLWJvcmRlci1yYWRpdXMsIDAuNHJlbSk7DQogIHBhZGRpbmc6IDAuNXJlbSAwLjNyZW07DQogIG1hcmdpbjogMC4zcmVtOw0KfQ0KDQouYy1maXhlZC1oZWlnaHQgew0KICBoZWlnaHQ6IDRyZW07DQp9DQo="},{"version":3,"sources":["BackupEntry.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"BackupEntry.vue","sourceRoot":"src/components/modals/options","sourcesContent":["<script>\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\n\r\nimport { BACKUP_SLOT_TYPE } from \"@/core/storage\";\r\n\r\nexport default {\r\n  name: \"BackupEntry\",\r\n  components: {\r\n    PrimaryButton\r\n  },\r\n  props: {\r\n    slotData: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      currTime: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    save() {\r\n      return GameStorage.loadFromBackup(this.slotData.id);\r\n    },\r\n    progressStr() {\r\n      if (!this.save) return \"(Empty)\";\r\n\r\n      // These will be checked in order; the first nonzero resource will be returned\r\n      const resources = [this.save.celestials.pelle.realityShards,\r\n        this.save.reality.iMCap,\r\n        this.save.reality.realityMachines,\r\n        this.save.eternityPoints,\r\n        this.save.infinityPoints,\r\n        this.save.antimatter\r\n      ];\r\n      const names = [\"Reality Shards\",\r\n        \"Imaginary Machine Cap\",\r\n        \"Reality Machines\",\r\n        \"Eternity Points\",\r\n        \"Infinity Points\",\r\n        \"Antimatter\"];\r\n\r\n      for (let index = 0; index < resources.length; index++) {\r\n        const val = new Decimal(resources[index]);\r\n        if (val.gt(0)) return `${names[index]}: ${formatPostBreak(val, 2)}`;\r\n      }\r\n\r\n      // In practice this should never happen, unless a save triggers on the same tick the very first AD1 is bought\r\n      return \"No resources\";\r\n    },\r\n    slotType() {\r\n      const formattedTime = this.slotData.intervalStr?.();\r\n      switch (this.slotData.type) {\r\n        case BACKUP_SLOT_TYPE.ONLINE:\r\n          return `Saves every ${formattedTime} online`;\r\n        case BACKUP_SLOT_TYPE.OFFLINE:\r\n          return `Saves after ${formattedTime} offline`;\r\n        case BACKUP_SLOT_TYPE.RESERVE:\r\n          return \"Pre-loading save\";\r\n        default:\r\n          throw new Error(\"Unrecognized backup save type\");\r\n      }\r\n    },\r\n    lastSaved() {\r\n      const lastSave = GameStorage.lastBackupTimes[this.slotData.id]?.date ?? 0;\r\n      return lastSave\r\n        ? `Last saved: ${TimeSpan.fromMilliseconds(this.currTime - lastSave)} ago`\r\n        : \"Slot not currently in use\";\r\n    },\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.currTime = Date.now();\r\n    },\r\n    load() {\r\n      if (!this.save) return;\r\n      // This seems to be the only way to properly hide the modal after the save is properly loaded,\r\n      // since the offline progress modal appears nearly immediately after clicking the button\r\n      Modal.hide();\r\n\r\n      // We still save to the reserve slot even if we're loading from it, so we temporarily store the\r\n      // save-to-be-loaded into a string in this scope so that it doesn't get overwritten by the current save\r\n      const toLoad = this.save;\r\n      GameStorage.saveToReserveSlot();\r\n\r\n      GameStorage.ignoreBackupTimer = true;\r\n      GameStorage.offlineEnabled = player.options.loadBackupWithoutOffline ? false : undefined;\r\n      GameStorage.oldBackupTimer = player.backupTimer;\r\n      GameStorage.loadPlayerObject(toLoad);\r\n      GameUI.notify.info(`Game loaded from backup slot #${this.slotData.id}`);\r\n      GameStorage.loadBackupTimes();\r\n      GameStorage.ignoreBackupTimer = false;\r\n      GameStorage.offlineEnabled = undefined;\r\n      GameStorage.resetBackupTimer();\r\n      GameStorage.save(true);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"c-bordered-entry\">\r\n    <h3>Slot #{{ slotData.id }}:</h3>\r\n    <span>{{ progressStr }}</span>\r\n    <span>\r\n      {{ slotType }}\r\n    </span>\r\n    <span class=\"c-fixed-height\">{{ lastSaved }}</span>\r\n    <PrimaryButton\r\n      class=\"o-primary-btn--width-medium\"\r\n      :class=\"{ 'o-primary-btn--disabled' : !save }\"\r\n      @click=\"load()\"\r\n    >\r\n      Load\r\n    </PrimaryButton>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-bordered-entry {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  font-size: 1.1rem;\r\n  border: var(--var-border-width, 0.2rem) solid;\r\n  border-radius: var(--var-border-radius, 0.4rem);\r\n  padding: 0.5rem 0.3rem;\r\n  margin: 0.3rem;\r\n}\r\n\r\n.c-fixed-height {\r\n  height: 4rem;\r\n}\r\n</style>\r\n"]}]}