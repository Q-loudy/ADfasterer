{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\autobuyers\\RealityAutobuyerBox.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\autobuyers\\RealityAutobuyerBox.vue","mtime":1745241597055},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgQXV0b2J1eWVyQm94IGZyb20gIi4vQXV0b2J1eWVyQm94IjsNCmltcG9ydCBBdXRvYnV5ZXJEcm9wZG93bkVudHJ5IGZyb20gIi4vQXV0b2J1eWVyRHJvcGRvd25FbnRyeSI7DQppbXBvcnQgQXV0b2J1eWVySW5wdXQgZnJvbSAiLi9BdXRvYnV5ZXJJbnB1dCI7DQppbXBvcnQgRXhwYW5kaW5nQ29udHJvbEJveCBmcm9tICJAL2NvbXBvbmVudHMvRXhwYW5kaW5nQ29udHJvbEJveCI7DQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgbmFtZTogIlJlYWxpdHlBdXRvYnV5ZXJCb3giLA0KICBjb21wb25lbnRzOiB7DQogICAgQXV0b2J1eWVyQm94LA0KICAgIEF1dG9idXllcklucHV0LA0KICAgIEV4cGFuZGluZ0NvbnRyb2xCb3gsDQogICAgQXV0b2J1eWVyRHJvcGRvd25FbnRyeQ0KICB9LA0KICBwcm9wczogew0KICAgIGlzTW9kYWw6IHsNCiAgICAgIHR5cGU6IEJvb2xlYW4sDQogICAgICByZXF1aXJlZDogZmFsc2UsDQogICAgICBkZWZhdWx0OiBmYWxzZQ0KICAgIH0NCiAgfSwNCiAgZGF0YSgpIHsNCiAgICByZXR1cm4gew0KICAgICAgbW9kZTogQVVUT19SRUFMSVRZX01PREUuUk0sDQogICAgICBsZXZlbENhcDogMCwNCiAgICAgIGlzT3ZlckNhcDogZmFsc2UsDQogICAgICBoYXNBbHRlcm5hdGVJbnB1dHM6IGZhbHNlLA0KICAgIH07DQogIH0sDQogIGNvbXB1dGVkOiB7DQogICAgYXV0b2J1eWVyOiAoKSA9PiBBdXRvYnV5ZXIucmVhbGl0eSwNCiAgICBoYXNSZWxpY01vZGU6ICgpID0+IFRlcmVzYVVubG9ja3MuZWZmYXJpZy5jYW5CZUFwcGxpZWQsDQogICAgbW9kZXMoKSB7DQogICAgICBjb25zdCBhdmFpbGFibGVNb2RlcyA9IFsNCiAgICAgICAgQVVUT19SRUFMSVRZX01PREUuUk0sDQogICAgICAgIEFVVE9fUkVBTElUWV9NT0RFLkdMWVBILA0KICAgICAgICBBVVRPX1JFQUxJVFlfTU9ERS5FSVRIRVIsDQogICAgICAgIEFVVE9fUkVBTElUWV9NT0RFLkJPVEgsDQogICAgICAgIEFVVE9fUkVBTElUWV9NT0RFLlRJTUUNCiAgICAgIF07DQogICAgICBpZiAodGhpcy5oYXNSZWxpY01vZGUpIGF2YWlsYWJsZU1vZGVzLnB1c2goQVVUT19SRUFMSVRZX01PREUuUkVMSUNfU0hBUkQpOw0KICAgICAgcmV0dXJuIGF2YWlsYWJsZU1vZGVzOw0KICAgIH0sDQogIH0sDQogIG1ldGhvZHM6IHsNCiAgICB1cGRhdGUoKSB7DQogICAgICB0aGlzLm1vZGUgPSB0aGlzLmF1dG9idXllci5tb2RlOw0KICAgICAgdGhpcy5sZXZlbENhcCA9IEdseXBocy5sZXZlbENhcDsNCiAgICAgIHRoaXMuaXNPdmVyQ2FwID0gdGhpcy5hdXRvYnV5ZXIuZ2x5cGggPiB0aGlzLmxldmVsQ2FwOw0KICAgICAgLy8gVGhlIGNvbnRhaW5lciBvbmx5IGhhcyByb29tIGZvciAyIHRleHRib3hlcywgc28gd2Ugc3dpdGNoIHdoYXQgdGhleSBnbyB0byBiYXNlZCBvbiB0aGUgY3VycmVudCBtb2RlDQogICAgICB0aGlzLmhhc0FsdGVybmF0ZUlucHV0cyA9IEF1dG9idXllci5yZWFsaXR5Lm1vZGUgPiBBVVRPX1JFQUxJVFlfTU9ERS5CT1RIOw0KICAgIH0sDQogICAgbW9kZU5hbWUobW9kZSkgew0KICAgICAgc3dpdGNoIChtb2RlKSB7DQogICAgICAgIGNhc2UgQVVUT19SRUFMSVRZX01PREUuUk06IHJldHVybiAiUmVhbGl0eSBNYWNoaW5lcyI7DQogICAgICAgIGNhc2UgQVVUT19SRUFMSVRZX01PREUuR0xZUEg6IHJldHVybiAiR2x5cGggbGV2ZWwiOw0KICAgICAgICBjYXNlIEFVVE9fUkVBTElUWV9NT0RFLkVJVEhFUjogcmV0dXJuICJSTSBPUiBMZXZlbCI7DQogICAgICAgIGNhc2UgQVVUT19SRUFMSVRZX01PREUuQk9USDogcmV0dXJuICJSTSBBTkQgTGV2ZWwiOw0KICAgICAgICBjYXNlIEFVVE9fUkVBTElUWV9NT0RFLlRJTUU6IHJldHVybiAiUmVhbC10aW1lIHNlY29uZHMiOw0KICAgICAgICBjYXNlIEFVVE9fUkVBTElUWV9NT0RFLlJFTElDX1NIQVJEOiByZXR1cm4gIlJlbGljIFNoYXJkcyI7DQogICAgICB9DQogICAgICB0aHJvdyBuZXcgRXJyb3IoIlVua25vd24gQXV0byBSZWFsaXR5IG1vZGUiKTsNCiAgICB9LA0KICB9DQp9Ow0K"},{"version":3,"sources":["RealityAutobuyerBox.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"RealityAutobuyerBox.vue","sourceRoot":"src/components/tabs/autobuyers","sourcesContent":["<script>\r\nimport AutobuyerBox from \"./AutobuyerBox\";\r\nimport AutobuyerDropdownEntry from \"./AutobuyerDropdownEntry\";\r\nimport AutobuyerInput from \"./AutobuyerInput\";\r\nimport ExpandingControlBox from \"@/components/ExpandingControlBox\";\r\n\r\nexport default {\r\n  name: \"RealityAutobuyerBox\",\r\n  components: {\r\n    AutobuyerBox,\r\n    AutobuyerInput,\r\n    ExpandingControlBox,\r\n    AutobuyerDropdownEntry\r\n  },\r\n  props: {\r\n    isModal: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      mode: AUTO_REALITY_MODE.RM,\r\n      levelCap: 0,\r\n      isOverCap: false,\r\n      hasAlternateInputs: false,\r\n    };\r\n  },\r\n  computed: {\r\n    autobuyer: () => Autobuyer.reality,\r\n    hasRelicMode: () => TeresaUnlocks.effarig.canBeApplied,\r\n    modes() {\r\n      const availableModes = [\r\n        AUTO_REALITY_MODE.RM,\r\n        AUTO_REALITY_MODE.GLYPH,\r\n        AUTO_REALITY_MODE.EITHER,\r\n        AUTO_REALITY_MODE.BOTH,\r\n        AUTO_REALITY_MODE.TIME\r\n      ];\r\n      if (this.hasRelicMode) availableModes.push(AUTO_REALITY_MODE.RELIC_SHARD);\r\n      return availableModes;\r\n    },\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.mode = this.autobuyer.mode;\r\n      this.levelCap = Glyphs.levelCap;\r\n      this.isOverCap = this.autobuyer.glyph > this.levelCap;\r\n      // The container only has room for 2 textboxes, so we switch what they go to based on the current mode\r\n      this.hasAlternateInputs = Autobuyer.reality.mode > AUTO_REALITY_MODE.BOTH;\r\n    },\r\n    modeName(mode) {\r\n      switch (mode) {\r\n        case AUTO_REALITY_MODE.RM: return \"Reality Machines\";\r\n        case AUTO_REALITY_MODE.GLYPH: return \"Glyph level\";\r\n        case AUTO_REALITY_MODE.EITHER: return \"RM OR Level\";\r\n        case AUTO_REALITY_MODE.BOTH: return \"RM AND Level\";\r\n        case AUTO_REALITY_MODE.TIME: return \"Real-time seconds\";\r\n        case AUTO_REALITY_MODE.RELIC_SHARD: return \"Relic Shards\";\r\n      }\r\n      throw new Error(\"Unknown Auto Reality mode\");\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <AutobuyerBox\r\n    :autobuyer=\"autobuyer\"\r\n    :is-modal=\"isModal\"\r\n    name=\"Automatic Reality\"\r\n  >\r\n    <template #intervalSlot>\r\n      <ExpandingControlBox :auto-close=\"true\">\r\n        <template #header>\r\n          <div class=\"o-primary-btn c-autobuyer-box__mode-select c-autobuyer-box__mode-select-header\">\r\n            ▼ Current Setting: ▼\r\n            <br>\r\n            {{ modeName(mode) }}\r\n          </div>\r\n        </template>\r\n        <template #dropdown>\r\n          <AutobuyerDropdownEntry\r\n            :autobuyer=\"autobuyer\"\r\n            :modes=\"modes\"\r\n            :mode-name-fn=\"modeName\"\r\n          />\r\n        </template>\r\n      </ExpandingControlBox>\r\n    </template>\r\n    <template #toggleSlot>\r\n      <div v-if=\"hasAlternateInputs\">\r\n        Target Time (seconds):\r\n      </div>\r\n      <div v-else>\r\n        Target Reality Machines:\r\n      </div>\r\n      <AutobuyerInput\r\n        :autobuyer=\"autobuyer\"\r\n        :type=\"hasAlternateInputs ? 'float' : 'decimal'\"\r\n        :property=\"hasAlternateInputs ? 'time' : 'rm'\"\r\n      />\r\n    </template>\r\n    <template #checkboxSlot>\r\n      <div v-if=\"hasAlternateInputs && hasRelicMode\">\r\n        Target Relic Shards:\r\n      </div>\r\n      <div v-else>\r\n        Target Glyph level:\r\n      </div>\r\n      <AutobuyerInput\r\n        :autobuyer=\"autobuyer\"\r\n        :type=\"(hasAlternateInputs && hasRelicMode) ? 'decimal' : 'int'\"\r\n        :property=\"(hasAlternateInputs && hasRelicMode) ? 'shard' : 'glyph'\"\r\n      />\r\n      <div v-if=\"isOverCap\">\r\n        Autobuyer will trigger at the Glyph level cap of {{ formatInt(levelCap) }}.\r\n      </div>\r\n    </template>\r\n  </AutobuyerBox>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]}]}