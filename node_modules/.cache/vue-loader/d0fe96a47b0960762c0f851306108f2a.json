{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\glyphs\\sidebar\\GlyphSetSavePanel.vue?vue&type=style&index=0&id=4a17b947&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\glyphs\\sidebar\\GlyphSetSavePanel.vue","mtime":1745241597333},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmwtZ2x5cGgtc2V0LXNhdmVfX2hlYWRlciB7DQogIG1hcmdpbjogLTEuNXJlbSAycmVtIDA7DQp9DQoNCi5jLWdseXBoLXNldC1zYXZlLWNvbnRhaW5lciB7DQogIGRpc3BsYXk6IGZsZXg7DQogIGZsZXgtd3JhcDogd3JhcDsNCiAgd2lkdGg6IDEwMCU7DQogIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KICBtYXJnaW46IDFyZW0gYXV0byAwOw0KfQ0KDQouYy1nbHlwaC1zaW5nbGUtc2V0LXNhdmUtZmxleGJveCB7DQogIHdpZHRoOiAxN3JlbTsNCn0NCg0KLmMtZ2x5cGgtc2V0LXByZXZpZXctYXJlYSB7DQogIHdpZHRoOiAxOHJlbTsNCn0NCg=="},{"version":3,"sources":["GlyphSetSavePanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsRA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"GlyphSetSavePanel.vue","sourceRoot":"src/components/tabs/glyphs/sidebar","sourcesContent":["<script>\r\nimport GlyphSetPreview from \"@/components/GlyphSetPreview\";\r\nimport ToggleButton from \"@/components/ToggleButton\";\r\n\r\nexport default {\r\n  name: \"GlyphSetSavePanel\",\r\n  components: {\r\n    ToggleButton,\r\n    GlyphSetPreview\r\n  },\r\n  data() {\r\n    return {\r\n      hasEquipped: true,\r\n      glyphSets: [],\r\n      names: [],\r\n      effects: false,\r\n      rarity: false,\r\n      level: false,\r\n    };\r\n  },\r\n  computed: {\r\n    questionmarkTooltip() {\r\n      return `Glyph Presets work like Time Study Loadouts, allowing you to equip a\r\n        full set of previously-saved Glyphs`;\r\n    },\r\n    noSet() {\r\n      return `No Glyph Preset saved in this slot`;\r\n    },\r\n  },\r\n  watch: {\r\n    effects(newValue) {\r\n      player.options.ignoreGlyphEffects = newValue;\r\n    },\r\n    rarity(newValue) {\r\n      player.options.ignoreGlyphRarity = newValue;\r\n    },\r\n    level(newValue) {\r\n      player.options.ignoreGlyphLevel = newValue;\r\n    },\r\n  },\r\n  created() {\r\n    this.on$(GAME_EVENT.GLYPHS_EQUIPPED_CHANGED, this.refreshGlyphSets);\r\n    this.on$(GAME_EVENT.GLYPH_SET_SAVE_CHANGE, this.refreshGlyphSets);\r\n    this.refreshGlyphSets();\r\n    for (let i = 0; i < player.reality.glyphs.sets.length; i++) {\r\n      this.names[i] = player.reality.glyphs.sets[i].name;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.hasEquipped = Glyphs.activeList.length > 0;\r\n      this.effects = player.options.ignoreGlyphEffects;\r\n      this.rarity = player.options.ignoreGlyphRarity;\r\n      this.level = player.options.ignoreGlyphLevel;\r\n    },\r\n    refreshGlyphSets() {\r\n      this.glyphSets = player.reality.glyphs.sets.map(g => Glyphs.copyForRecords(g.glyphs));\r\n    },\r\n    setName(id) {\r\n      const name = this.names[id] === \"\" ? \"\" : `: ${this.names[id]}`;\r\n      return `Glyph Preset #${id + 1}${name}`;\r\n    },\r\n    saveGlyphSet(id) {\r\n      if (!this.hasEquipped || player.reality.glyphs.sets[id].glyphs.length) return;\r\n      player.reality.glyphs.sets[id].glyphs = Glyphs.active.compact();\r\n      this.refreshGlyphSets();\r\n      EventHub.dispatch(GAME_EVENT.GLYPH_SET_SAVE_CHANGE);\r\n    },\r\n    // A proper full solution to this turns out to contain an NP-hard problem as a subproblem, so instead we do\r\n    // something which should work in most cases - we match greedily when it won't obviously lead to an incomplete\r\n    // preset match, and leniently when matching greedily may lead to an incomplete set being loaded\r\n    loadGlyphSet(set, id) {\r\n      if (!this.setLengthValid(set)) return;\r\n      let glyphsToLoad = [...set].sort((a, b) => -a.level * a.strength + b.level * b.strength);\r\n      const activeGlyphs = [...Glyphs.active.filter(g => g)];\r\n\r\n      // Create an array where each entry contains a single active glyph and all its matches in the preset which it\r\n      // could fill in for, based on the preset loading settings\r\n      const activeOptions = [];\r\n      for (const glyph of activeGlyphs) {\r\n        const options = Glyphs.findByValues(glyph, glyphsToLoad, {\r\n          level: this.level ? -1 : 0,\r\n          strength: this.rarity ? -1 : 0,\r\n          effects: this.effects ? -1 : 0\r\n        });\r\n        activeOptions.push({ glyph, options });\r\n      }\r\n\r\n      // Using the active glyphs one by one, select matching to-be-loaded preset glyphs to be removed from the list.\r\n      // This makes sure the inventory doesn't attempt to match a glyph which is already satisfied by an equipped one\r\n      const selectedFromActive = this.findSelectedGlyphs(activeOptions, 5);\r\n      for (const glyph of selectedFromActive) glyphsToLoad = glyphsToLoad.filter(g => g !== glyph);\r\n\r\n      // For the remaining glyphs to load from the preset, find all their appropriate matches within the inventory.\r\n      // This is largely the same as earlier with the equipped glyphs\r\n      const remainingOptions = [];\r\n      for (let index = 0; index < glyphsToLoad.length; index++) {\r\n        const glyph = glyphsToLoad[index];\r\n        const options = Glyphs.findByValues(glyph, Glyphs.sortedInventoryList, {\r\n          level: this.level ? 1 : 0,\r\n          strength: this.rarity ? 1 : 0,\r\n          effects: this.effects ? 1 : 0\r\n        });\r\n        remainingOptions[index] = { glyph, options };\r\n      }\r\n\r\n      // This is scanned through similarly to the active slot glyphs, except we need to make sure we don't try to\r\n      // match more glyphs than we have room for\r\n      const selectedFromInventory = this.findSelectedGlyphs(remainingOptions,\r\n        Glyphs.active.countWhere(g => g === null));\r\n      for (const glyph of selectedFromInventory) glyphsToLoad = glyphsToLoad.filter(g => g !== glyph);\r\n\r\n      // Actually equip the glyphs and then notify how successful (or not) the loading was\r\n      let missingGlyphs = glyphsToLoad.length;\r\n      for (const glyph of selectedFromInventory) {\r\n        const idx = Glyphs.active.indexOf(null);\r\n        if (idx !== -1) {\r\n          Glyphs.equip(glyph, idx);\r\n          missingGlyphs--;\r\n        }\r\n      }\r\n      if (missingGlyphs > 0) {\r\n        GameUI.notify.error(`Could not find or equip ${missingGlyphs} ${pluralize(\"Glyph\", missingGlyphs)} from\r\n          ${this.setName(id)}.`);\r\n      } else {\r\n        GameUI.notify.success(`Successfully loaded ${this.setName(id)}.`);\r\n      }\r\n    },\r\n    // Given a list of options for suitable matches to those glyphs and a maximum glyph count to match, returns the\r\n    // set of glyphs which should be loaded. This is a tricky matching process to do since on one hand we don't want\r\n    // early matches to prevent later ones, but on the other hand matching too leniently can cause any passed-on later\r\n    // requirements to be too strict (eg. preset 1234 and equipped 234 could match 123, leaving an unmatchable 4).\r\n    // The compromise solution here is to check how many choices the next-strictest option list has - if it only has\r\n    // one choice then we pick conservatively (the weakest glyph) - otherwise we pick greedily (the strongest glyph).\r\n    findSelectedGlyphs(optionList, maxGlyphs) {\r\n      // We do a weird composite function here in order to make sure that glyphs get treated by type individually; then\r\n      // within type they are generally ordered in strictest to most lenient in terms of matches. Note that the options\r\n      // are sorted internally starting with the strictest match first\r\n      const compFn = o => 1000 * (10 * o.glyph.type.length + o.glyph.type.codePointAt(0)) + o.options.length;\r\n      optionList.sort((a, b) => compFn(a) - compFn(b));\r\n\r\n      const toLoad = [];\r\n      let slotsLeft = maxGlyphs;\r\n      for (let index = 0; index < optionList.length; index++) {\r\n        if (slotsLeft === 0) break;\r\n        const entry = optionList[index];\r\n\r\n        const filteredOptions = entry.options.filter(g => !toLoad.includes(g));\r\n        if (filteredOptions.length === 0) continue;\r\n        const selectedGlyph = filteredOptions[filteredOptions.length - 1];\r\n        toLoad.push(selectedGlyph);\r\n        slotsLeft--;\r\n      }\r\n      return toLoad;\r\n    },\r\n    deleteGlyphSet(id) {\r\n      if (!player.reality.glyphs.sets[id].glyphs.length) return;\r\n      if (player.options.confirmations.deleteGlyphSetSave) Modal.glyphSetSaveDelete.show({ glyphSetId: id });\r\n      else {\r\n        player.reality.glyphs.sets[id].glyphs = [];\r\n        this.refreshGlyphSets();\r\n        EventHub.dispatch(GAME_EVENT.GLYPH_SET_SAVE_CHANGE);\r\n      }\r\n    },\r\n    nicknameBlur(event) {\r\n      player.reality.glyphs.sets[event.target.id].name = event.target.value.slice(0, 20);\r\n      this.names[event.target.id] = player.reality.glyphs.sets[event.target.id].name;\r\n      this.refreshGlyphSets();\r\n    },\r\n    setLengthValid(set) {\r\n      return set.length && set.length <= Glyphs.activeSlotCount;\r\n    },\r\n    loadingTooltip(set) {\r\n      return this.setLengthValid(set) && this.hasEquipped\r\n        ? \"This set may not load properly because you already have some Glyphs equipped\"\r\n        : null;\r\n    },\r\n    glyphSetKey(set, index) {\r\n      return `${index} ${Glyphs.hash(set)}`;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-glyph-sacrifice-options c-glyph-sacrifice-options l-glyph-sidebar-panel-size\">\r\n    <span\r\n      v-tooltip=\"questionmarkTooltip\"\r\n      class=\"l-glyph-sacrifice-options__help c-glyph-sacrifice-options__help o-questionmark\"\r\n    >\r\n      ?\r\n    </span>\r\n    <div class=\"l-glyph-set-save__header\">\r\n      When loading a preset, try to match the following attributes. \"Exact\" will only equip Glyphs\r\n      identical to the ones in the preset. The other settings will, loosely speaking, allow \"better\" Glyphs to be\r\n      equipped in their place.\r\n    </div>\r\n    <div class=\"c-glyph-set-save-container\">\r\n      <ToggleButton\r\n        v-model=\"effects\"\r\n        class=\"c-glyph-set-save-setting-button\"\r\n        label=\"Effects:\"\r\n        on=\"Including\"\r\n        off=\"Exact\"\r\n      />\r\n      <ToggleButton\r\n        v-model=\"level\"\r\n        class=\"c-glyph-set-save-setting-button\"\r\n        label=\"Level:\"\r\n        on=\"Increased\"\r\n        off=\"Exact\"\r\n      />\r\n      <ToggleButton\r\n        v-model=\"rarity\"\r\n        class=\"c-glyph-set-save-setting-button\"\r\n        label=\"Rarity:\"\r\n        on=\"Increased\"\r\n        off=\"Exact\"\r\n      />\r\n    </div>\r\n    <div\r\n      v-for=\"(set, id) in glyphSets\"\r\n      :key=\"id\"\r\n      class=\"c-glyph-single-set-save\"\r\n    >\r\n      <div class=\"c-glyph-set-preview-area\">\r\n        <GlyphSetPreview\r\n          :key=\"glyphSetKey(set, id)\"\r\n          :text=\"setName(id)\"\r\n          :text-hidden=\"true\"\r\n          :glyphs=\"set\"\r\n          :flip-tooltip=\"true\"\r\n          :none-text=\"noSet\"\r\n        />\r\n      </div>\r\n      <div class=\"c-glyph-single-set-save-flexbox\">\r\n        <div ach-tooltip=\"Set a custom name (up to 20 characters)\">\r\n          <input\r\n            :id=\"id\"\r\n            type=\"text\"\r\n            size=\"20\"\r\n            maxlength=\"20\"\r\n            placeholder=\"Custom set name\"\r\n            class=\"c-glyph-sets-save-name__input\"\r\n            :value=\"names[id]\"\r\n            @blur=\"nicknameBlur\"\r\n          >\r\n        </div>\r\n        <div class=\"c-glyph-single-set-save-flexbox-buttons\">\r\n          <button\r\n            class=\"c-glyph-set-save-button\"\r\n            :class=\"{'c-glyph-set-save-button--unavailable': !hasEquipped || set.length}\"\r\n            @click=\"saveGlyphSet(id)\"\r\n          >\r\n            Save\r\n          </button>\r\n          <button\r\n            v-tooltip=\"loadingTooltip(set)\"\r\n            class=\"c-glyph-set-save-button\"\r\n            :class=\"{'c-glyph-set-save-button--unavailable': !setLengthValid(set)}\"\r\n            @click=\"loadGlyphSet(set, id)\"\r\n          >\r\n            Load\r\n          </button>\r\n          <button\r\n            class=\"c-glyph-set-save-button\"\r\n            :class=\"{'c-glyph-set-save-button--unavailable': !set.length}\"\r\n            @click=\"deleteGlyphSet(id)\"\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.l-glyph-set-save__header {\r\n  margin: -1.5rem 2rem 0;\r\n}\r\n\r\n.c-glyph-set-save-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 100%;\r\n  justify-content: center;\r\n  margin: 1rem auto 0;\r\n}\r\n\r\n.c-glyph-single-set-save-flexbox {\r\n  width: 17rem;\r\n}\r\n\r\n.c-glyph-set-preview-area {\r\n  width: 18rem;\r\n}\r\n</style>\r\n"]}]}