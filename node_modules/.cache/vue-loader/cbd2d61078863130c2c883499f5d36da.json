{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\celestial-laitela\\SingularityPane.vue?vue&type=style&index=0&id=3375f1d8&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\celestial-laitela\\SingularityPane.vue","mtime":1745241597133},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmMtbGFpdGVsYS1zaW5ndWxhcml0eV9fY2FwLWNvbnRyb2wgew0KICBtYXJnaW46IDAgMC4zcmVtIDFyZW07DQp9DQo="},{"version":3,"sources":["SingularityPane.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+LA;AACA;AACA","file":"SingularityPane.vue","sourceRoot":"src/components/tabs/celestial-laitela","sourcesContent":["<script>\r\nexport default {\r\n  name: \"SingularityPane\",\r\n  data() {\r\n    return {\r\n      darkEnergy: 0,\r\n      darkEnergyGainPerSecond: 0,\r\n      singularities: 0,\r\n      singularityCapIncreases: 0,\r\n      canPerformSingularity: false,\r\n      unlockedBulkSingularity: false,\r\n      singularityCap: 0,\r\n      baseTimeToSingularity: 0,\r\n      currentTimeToSingularity: 0,\r\n      extraTimeAfterSingularity: 0,\r\n      singularitiesGained: 0,\r\n      autoSingularityFactor: 0,\r\n      perStepFactor: 0,\r\n      isAutoEnabled: false,\r\n      hasAutoSingularity: false,\r\n      nextLowerStep: 0,\r\n      willCondenseOnDecrease: false,\r\n    };\r\n  },\r\n  computed: {\r\n    isDoomed: () => Pelle.isDoomed,\r\n    singularityFormText() {\r\n      const formText = this.singularitiesGained === 1 ? \"all Dark Energy into a Singularity\"\r\n        : `all Dark Energy into ${quantify(\"Singularity\", this.singularitiesGained, 2)}`;\r\n      if (this.canPerformSingularity) {\r\n        return `Condense ${formText}`;\r\n      }\r\n      return `Reach ${format(this.singularityCap)} Dark Energy to condense ${formText}`;\r\n    },\r\n    singularityWaitText() {\r\n      let singularityTime = this.currentTimeToSingularity;\r\n      if (this.canPerformSingularity) {\r\n        singularityTime += this.extraTimeAfterSingularity;\r\n        if (!this.isAutoEnabled) return \"\";\r\n        return singularityTime > 0\r\n          ? `(Auto-condensing in ${TimeSpan.fromSeconds(singularityTime).toStringShort()})`\r\n          : \"(Will immediately auto-condense)\";\r\n      }\r\n      return `(Enough Dark Energy in ${TimeSpan.fromSeconds(singularityTime).toStringShort()})`;\r\n    },\r\n    baseSingularityTime() {\r\n      return TimeSpan.fromSeconds(this.baseTimeToSingularity).toStringShort();\r\n    },\r\n    additionalSingularityTime() {\r\n      return TimeSpan.fromSeconds(this.extraTimeAfterSingularity).toStringShort();\r\n    },\r\n    manualSingularityRate() {\r\n      const totalTime = this.baseTimeToSingularity;\r\n      return this.formatRate(this.singularitiesGained / totalTime);\r\n    },\r\n    autoSingularityRate() {\r\n      if (this.hasAutoSingularity && !this.isAutoEnabled) return \"Auto-Singularity is OFF\";\r\n      const totalTime = this.baseTimeToSingularity + this.extraTimeAfterSingularity;\r\n      return this.formatRate(this.singularitiesGained / totalTime);\r\n    },\r\n    decreaseTooltip() {\r\n      if (this.singularityCapIncreases === 0) return \"You cannot decrease the cap any further!\";\r\n      const singularities = this.singularitiesGained / this.perStepFactor;\r\n      return this.willCondenseOnDecrease\r\n        ? `Decreasing the cap will immediately auto-condense for\r\n          ${quantify(\"Singularity\", singularities, 2)}!`\r\n        : null;\r\n    },\r\n    increaseTooltip() {\r\n      return this.singularityCapIncreases >= 50\r\n        ? \"You cannot increase the cap any further!\"\r\n        : null;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      const laitela = player.celestials.laitela;\r\n      this.darkEnergy = Currency.darkEnergy.value;\r\n      this.darkEnergyGainPerSecond = Currency.darkEnergy.productionPerSecond;\r\n      this.singularities = Currency.singularities.value;\r\n      this.singularityCapIncreases = laitela.singularityCapIncreases;\r\n      this.canPerformSingularity = Singularity.capIsReached;\r\n      this.unlockedBulkSingularity = Currency.singularities.gte(10);\r\n      this.singularityCap = Singularity.cap;\r\n      this.baseTimeToSingularity = Singularity.timePerCondense;\r\n      this.currentTimeToSingularity = Singularity.timeUntilCap;\r\n      this.extraTimeAfterSingularity = Singularity.timeDelayFromAuto;\r\n      this.singularitiesGained = Singularity.singularitiesGained;\r\n      this.autoSingularityFactor = SingularityMilestone.autoCondense.effectOrDefault(Infinity);\r\n      this.perStepFactor = Singularity.gainPerCapIncrease;\r\n      this.isAutoEnabled = player.auto.singularity.isActive && SingularityMilestone.autoCondense.canBeApplied;\r\n      this.hasAutoSingularity = Number.isFinite(this.autoSingularityFactor);\r\n      this.nextLowerStep = this.singularityCap * this.autoSingularityFactor / 10;\r\n      this.willCondenseOnDecrease = this.isAutoEnabled && this.darkEnergy > this.nextLowerStep;\r\n    },\r\n    doSingularity() {\r\n      Singularity.perform();\r\n    },\r\n    increaseCap() {\r\n      Singularity.increaseCap();\r\n    },\r\n    decreaseCap() {\r\n      Singularity.decreaseCap();\r\n    },\r\n    formatRate(rate) {\r\n      if (rate < 1 / 60) return `${format(3600 * rate, 2, 3)} per hour`;\r\n      if (rate < 1) return `${format(60 * rate, 2, 3)} per minute`;\r\n      return `${format(rate, 2, 3)} per second`;\r\n    },\r\n    condenseClassObject() {\r\n      return {\r\n        \"c-laitela-singularity\": true,\r\n        \"c-laitela-singularity--active\": this.canPerformSingularity && !this.isDoomed,\r\n        \"o-pelle-disabled\": this.isDoomed,\r\n        \"o-pelle-disabled-pointer\": this.isDoomed,\r\n      };\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"c-laitela-singularity-container\">\r\n    <div>\r\n      <h2>\r\n        You have {{ quantify(\"Singularity\", singularities, 2) }}\r\n      </h2>\r\n      <button\r\n        :class=\"condenseClassObject()\"\r\n        @click=\"doSingularity\"\r\n      >\r\n        <h2>\r\n          {{ singularityFormText }}\r\n        </h2>\r\n        <br v-if=\"singularityWaitText !== ''\">\r\n        <h2>\r\n          {{ singularityWaitText }}\r\n        </h2>\r\n      </button>\r\n    </div>\r\n    <div v-if=\"singularities !== 0\">\r\n      <div class=\"o-laitela-matter-amount\">\r\n        You have {{ format(darkEnergy, 2, 4) }} Dark Energy. (+{{ format(darkEnergyGainPerSecond, 2, 4) }}/s)\r\n      </div>\r\n      <div v-if=\"unlockedBulkSingularity\">\r\n        <button\r\n          class=\"c-laitela-singularity__cap-control\"\r\n          :class=\"{ 'c-laitela-singularity__cap-control--available' : singularityCapIncreases > 0 }\"\r\n          :ach-tooltip=\"decreaseTooltip\"\r\n          @click=\"decreaseCap\"\r\n        >\r\n          Decrease Singularity cap.\r\n        </button>\r\n        <button\r\n          class=\"c-laitela-singularity__cap-control\"\r\n          :class=\"{ 'c-laitela-singularity__cap-control--available' : singularityCapIncreases < 50 }\"\r\n          :ach-tooltip=\"increaseTooltip\"\r\n          @click=\"increaseCap\"\r\n        >\r\n          Increase Singularity cap.\r\n        </button>\r\n        <br>\r\n        Each step increases the required Dark Energy by {{ formatX(10) }},\r\n        <br>\r\n        but also increases gained Singularities by {{ formatX(perStepFactor) }}.\r\n      </div>\r\n      <div v-else>\r\n        <br>\r\n        Reach {{ format(10) }} Singularities\r\n        <br>\r\n        to unlock Bulk Singularities.\r\n        <br>\r\n      </div>\r\n      <br>\r\n      Total time to <span v-if=\"hasAutoSingularity\">(auto-)</span>condense:\r\n      {{ baseSingularityTime }}\r\n      <span v-if=\"hasAutoSingularity && autoSingularityFactor !== 1\">\r\n        (+{{ additionalSingularityTime }})\r\n      </span>\r\n      <br>\r\n      <span v-if=\"hasAutoSingularity && autoSingularityFactor !== 1\">Manual </span>\r\n      Singularity gain rate: {{ manualSingularityRate }}\r\n      <br>\r\n      <span v-if=\"hasAutoSingularity && autoSingularityFactor !== 1\">\r\n        Automatic Singularity gain rate: {{ autoSingularityRate }}\r\n      </span>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-laitela-singularity__cap-control {\r\n  margin: 0 0.3rem 1rem;\r\n}\r\n</style>\r\n"]}]}