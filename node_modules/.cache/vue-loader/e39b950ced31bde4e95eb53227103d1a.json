{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\past-prestige-runs\\PastPrestigeRunsContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\past-prestige-runs\\PastPrestigeRunsContainer.vue","mtime":1745241597415},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["PastPrestigeRunsContainer.vue"],"names":[],"mappingsfile":"PastPrestigeRunsContainer.vue","sourceRoot":"src/components/tabs/past-prestige-runs","sourcesContent":["<script>\r\nfunction averageRun(allRuns) {\r\n  // Filter out all runs which have the default infinite value for time, but if we're left with no valid runs then we\r\n  // take just one entry so that the averages also have the same value and we don't get division by zero.\r\n  let runs = allRuns.filter(run => run[0] !== Number.MAX_VALUE);\r\n  if (runs.length === 0) runs = [allRuns[0]];\r\n\r\n  const longestRow = allRuns.map(r => r.length).max();\r\n  const avgAttr = [];\r\n  for (let index = 0; index < longestRow; index++) {\r\n    if (typeof runs[0][index] === \"string\") {\r\n      avgAttr.push(\"\");\r\n      continue;\r\n    }\r\n    const isNumber = typeof runs[0][index] === \"number\";\r\n    const total = runs.map(run => run[index]).reduce(isNumber ? Number.sumReducer : Decimal.sumReducer);\r\n    avgAttr.push(isNumber ? total / runs.length : Decimal.div(total, runs.length));\r\n  }\r\n  return avgAttr;\r\n}\r\n\r\nexport default {\r\n  name: \"PastPrestigeRunsContainer\",\r\n  props: {\r\n    layer: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isRealityUnlocked: false,\r\n      resourceType: false,\r\n      selectedResources: [],\r\n      resourceTitles: [],\r\n      showRealTime: false,\r\n      runs: [],\r\n      hasEmptyRecord: false,\r\n      shown: true,\r\n      hasChallenges: false,\r\n      longestRow: 0,\r\n      hasIM: false,\r\n    };\r\n  },\r\n  computed: {\r\n    averageRun() {\r\n      return averageRun(this.runs);\r\n    },\r\n    dropDownIconClass() {\r\n      return this.shown ? \"far fa-minus-square\" : \"far fa-plus-square\";\r\n    },\r\n    points() {\r\n      const rawText = this.layer.currency;\r\n      return rawText === \"RM\" && this.hasIM ? \"iM Cap\" : rawText;\r\n    },\r\n    condition() {\r\n      return this.layer.condition();\r\n    },\r\n    plural() {\r\n      return this.layer.plural;\r\n    },\r\n    singular() {\r\n      return this.layer.name;\r\n    },\r\n    getRuns() {\r\n      return this.layer.getRuns;\r\n    },\r\n    hasRealTime: () => PlayerProgress.seenAlteredSpeed(),\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.runs = this.clone(this.getRuns());\r\n      this.hasEmptyRecord = this.runs[0][0] === Number.MAX_VALUE;\r\n      this.runs.push(this.averageRun);\r\n      this.isRealityUnlocked = PlayerProgress.current.isRealityUnlocked;\r\n      this.shown = player.shownRuns[this.singular];\r\n      this.resourceType = player.options.statTabResources;\r\n      this.showRate = this.resourceType === RECENT_PRESTIGE_RESOURCE.RATE;\r\n      this.hasChallenges = this.runs.map(r => this.challengeText(r)).some(t => t);\r\n      this.hasIM = MachineHandler.currentIMCap > 0;\r\n\r\n      // We have 4 different \"useful\" stat pairings we could display, but this ends up being pretty boilerplatey\r\n      const names = [this.points, `${this.points} Rate`, this.plural, `${this.singular} Rate`];\r\n      switch (this.resourceType) {\r\n        case RECENT_PRESTIGE_RESOURCE.ABSOLUTE_GAIN:\r\n          this.selectedResources = [0, 2];\r\n          break;\r\n        case RECENT_PRESTIGE_RESOURCE.RATE:\r\n          this.selectedResources = [1, 3];\r\n          break;\r\n        case RECENT_PRESTIGE_RESOURCE.CURRENCY:\r\n          this.selectedResources = [0, 1];\r\n          break;\r\n        case RECENT_PRESTIGE_RESOURCE.PRESTIGE_COUNT:\r\n          this.selectedResources = [2, 3];\r\n          break;\r\n        default:\r\n          throw new Error(\"Unrecognized Statistics tab resource type\");\r\n      }\r\n      this.resourceTitles = [names[this.selectedResources[0]], names[this.selectedResources[1]]];\r\n\r\n      // Entries always have all values, but sometimes the trailing ones will be blank or zero which we want to hide\r\n      const lastIndex = arr => {\r\n        let val = arr.length;\r\n        while (val > 0) {\r\n          const curr = arr[val - 1];\r\n          if (typeof curr === \"string\" && curr !== \"\") return val;\r\n          if (typeof curr !== \"string\" && Decimal.neq(curr, 0)) return val;\r\n          val--;\r\n        }\r\n        return 0;\r\n      };\r\n      this.longestRow = this.runs.map(r => lastIndex(r)).max();\r\n    },\r\n    clone(runs) {\r\n      return runs.map(run =>\r\n        run.map(item =>\r\n          (item instanceof Decimal ? Decimal.fromDecimal(item) : item)\r\n        )\r\n      );\r\n    },\r\n    infoArray(run, index) {\r\n      let name;\r\n      if (index === 0) name = \"Last\";\r\n      else if (index === 10) name = \"Average\";\r\n      else name = `${formatInt(index + 1)} ago`;\r\n\r\n      const cells = [name, this.gameTime(run)];\r\n      if (this.hasRealTime) cells.push(this.realTime(run));\r\n\r\n      const resources = [this.prestigeCurrencyGain(run), this.prestigeCurrencyRate(run),\r\n        this.prestigeCountGain(run), this.prestigeCountRate(run)];\r\n      cells.push(resources[this.selectedResources[0]]);\r\n      cells.push(resources[this.selectedResources[1]]);\r\n\r\n      if (this.hasChallenges) cells.push(this.challengeText(run));\r\n      for (let i = 0; i < this.layer.extra?.length && cells.length <= this.longestRow; i++) {\r\n        if (!this.layer.showExtra[i]()) continue;\r\n        const formatFn = this.layer.formatExtra[i];\r\n        const val = run[i + 5] ?? 0;\r\n        if (this.layer.allowRate[i] && this.showRate) cells.push(this.rateText(run, run[i + 5]));\r\n        else cells.push(formatFn(val));\r\n      }\r\n\r\n      return cells;\r\n    },\r\n    infoCol() {\r\n      const cells = [\"Run\", this.hasRealTime ? \"Game Time\" : \"Time in Run\"];\r\n      if (this.hasRealTime) cells.push(\"Real Time\");\r\n      cells.push(...this.resourceTitles);\r\n      if (this.hasChallenges) cells.push(\"Challenge\");\r\n\r\n      for (let index = 0; index < this.layer.extra?.length && cells.length <= this.longestRow; index++) {\r\n        if (!this.layer.showExtra[index]()) continue;\r\n        cells.push((this.layer.allowRate[index] && this.showRate)\r\n          ? this.layer.rateString[index]\r\n          : this.layer.extra[index]);\r\n      }\r\n      return cells;\r\n    },\r\n    gameTime(run) {\r\n      return timeDisplayShort(run[0]);\r\n    },\r\n    realTime(run) {\r\n      return timeDisplayShort(run[1]);\r\n    },\r\n    prestigeCurrencyGain(run) {\r\n      if (this.hasIM && this.layer.name === \"Reality\") return `${format(run[7], 2)} iM`;\r\n      return `${format(run[2], 2)} ${this.points}`;\r\n    },\r\n    prestigeCountGain(run) {\r\n      return quantify(this.singular, run[3]);\r\n    },\r\n    prestigeCurrencyRate(run) {\r\n      if (this.hasIM && this.layer.name === \"Reality\") return \"N/A\";\r\n      return this.rateText(run, run[2]);\r\n    },\r\n    prestigeCountRate(run) {\r\n      return this.rateText(run, run[3]);\r\n    },\r\n    rateText(run, amount) {\r\n      const time = run[1];\r\n      const rpm = ratePerMinute(amount, time);\r\n      return Decimal.lt(rpm, 1)\r\n        ? `${format(Decimal.mul(rpm, 60), 2, 2)} per hour`\r\n        : `${format(rpm, 2, 2)} per min`;\r\n    },\r\n    challengeText(run) {\r\n      // Special-case Nameless reality in order to keep this column small and not force a linebreak\r\n      const rawText = run[4];\r\n      return rawText === \"The Nameless Ones\" ? \"Nameless\" : rawText;\r\n    },\r\n    toggleShown() {\r\n      player.shownRuns[this.singular] = !player.shownRuns[this.singular];\r\n    },\r\n    cellStyle(col, isHeader) {\r\n      let width;\r\n      switch (col) {\r\n        case 0:\r\n          // \"X ago\" is really short\r\n          width = \"7rem\";\r\n          break;\r\n        case 3:\r\n        case 4:\r\n          // Prestige currency is long, but the reality table can be shorter due to smaller numbers\r\n          width = this.layer.name === \"Reality\" ? \"15rem\" : \"20rem\";\r\n          break;\r\n        case 5:\r\n          // Challenges can potentially be very long, but this is glyph level in the reality table\r\n          width = this.layer.name === \"Reality\" ? \"10rem\" : \"20rem\";\r\n          break;\r\n        default:\r\n          width = \"13rem\";\r\n      }\r\n      return {\r\n        width,\r\n        border: \"0.05rem solid #999999\",\r\n        margin: \"-0.05rem\",\r\n        padding: \"0.2rem 0\",\r\n        \"border-bottom-width\": isHeader ? \"0.3rem\" : \"0.1rem\",\r\n        \"font-weight\": isHeader ? \"bold\" : null,\r\n        color: \"var(--color-text)\",\r\n      };\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div v-if=\"condition\">\r\n    <div\r\n      class=\"c-past-runs-header\"\r\n      @click=\"toggleShown\"\r\n    >\r\n      <span class=\"o-run-drop-down-icon\">\r\n        <i :class=\"dropDownIconClass\" />\r\n      </span>\r\n      <span>\r\n        <h3>Last {{ formatInt(10) }} {{ plural }}:</h3>\r\n      </span>\r\n    </div>\r\n    <div v-show=\"shown\">\r\n      <div class=\"c-row-container\">\r\n        <span\r\n          v-for=\"(entry, col) in infoCol()\"\r\n          :key=\"col\"\r\n          :style=\"cellStyle(col, true)\"\r\n        >\r\n          {{ entry }}\r\n        </span>\r\n      </div>\r\n      <div\r\n        v-for=\"(run, index) in runs\"\r\n        :key=\"index\"\r\n      >\r\n        <span\r\n          v-if=\"run[0] === Number.MAX_VALUE\"\r\n          class=\"c-empty-row\"\r\n        >\r\n          <i v-if=\"index === 10\">\r\n            An average cannot be calculated with no {{ plural }}.\r\n          </i>\r\n          <i v-else>\r\n            You have not done {{ formatInt(index + 1) }}\r\n            {{ index === 0 ? singular : plural }} yet.\r\n          </i>\r\n        </span>\r\n        <span\r\n          v-else\r\n          class=\"c-row-container\"\r\n        >\r\n          <span\r\n            v-for=\"(entry, col) in infoArray(run, index)\"\r\n            :key=\"10 * index + col\"\r\n            :style=\"cellStyle(col, false)\"\r\n          >\r\n            {{ entry }}\r\n          </span>\r\n        </span>\r\n      </div>\r\n      <br>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-row-container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 100%;\r\n}\r\n\r\n.c-empty-row {\r\n  display: block;\r\n  border: 0.05rem solid #999999;\r\n  color: var(--color-text);\r\n  width: 100%;\r\n  padding: 0.2rem 0;\r\n  margin: -0.1rem;\r\n}\r\n\r\n.l-no-records {\r\n  height: 5.4rem;\r\n}\r\n</style>"]}]}