{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\imaginary-upgrades\\ImaginaryUpgradesTab.vue?vue&type=style&index=0&id=63dfe588&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\imaginary-upgrades\\ImaginaryUpgradesTab.vue","mtime":1745241597365},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouYy1jYXAtdGV4dCB7DQogIGNvbG9yOiB2YXIoLS1jb2xvci10ZXh0KTsNCiAgZm9udC1zaXplOiAxLjVyZW07DQp9DQoNCi5jLWluZm8tdGV4dCB7DQogIGNvbG9yOiB2YXIoLS1jb2xvci10ZXh0KTsNCiAgbWFyZ2luOiAxLjVyZW07DQp9DQo="},{"version":3,"sources":["ImaginaryUpgradesTab.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"ImaginaryUpgradesTab.vue","sourceRoot":"src/components/tabs/imaginary-upgrades","sourcesContent":["<script>\r\nimport ImaginaryUpgradeButton from \"./ImaginaryUpgradeButton\";\r\n\r\nexport default {\r\n  name: \"ImaginaryUpgradesTab\",\r\n  components: {\r\n    ImaginaryUpgradeButton\r\n  },\r\n  data() {\r\n    return {\r\n      baseRMCap: new Decimal(),\r\n      capRM: new Decimal(),\r\n      scaleTime: 0,\r\n      capStr: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    upgrades: () => ImaginaryUpgrades.all,\r\n    lockTooltip: () => `Requirement locks only prevent manual and automated actions. Any related upgrades\r\n      will not be disabled and may still cause requirements to be failed.`,\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.baseRMCap.copyFrom(MachineHandler.baseRMCap);\r\n      this.capRM.copyFrom(MachineHandler.hardcapRM);\r\n      this.scaleTime = MachineHandler.scaleTimeForIM;\r\n      this.capStr = formatMachines(MachineHandler.hardcapRM, MachineHandler.currentIMCap);\r\n    },\r\n    id(row, column) {\r\n      return (row - 1) * 5 + column - 1;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-reality-upgrade-grid\">\r\n    <div class=\"c-cap-text\">\r\n      Your Machine cap is <span class=\"c-reality-tab__reality-machines\">{{ capStr }}</span>.\r\n    </div>\r\n    <div class=\"c-info-text\">\r\n      You have reached the limits of Reality and cannot hold more than {{ format(capRM) }} Reality Machines.\r\n      <br>\r\n      Machines gained in excess of {{ format(baseRMCap) }} will raise the maximum amount of Imaginary Machines\r\n      you can have.\r\n      <br>\r\n      Imaginary Machines are gained passively over time up to the cap, but gain slows down exponentially\r\n      as you approach the cap.\r\n      <br>\r\n      Every {{ formatInt(scaleTime) }} seconds the difference in iM between your current amount and the cap\r\n      will be cut in half.\r\n      <br>\r\n      <br>\r\n      The first two rows of upgrades can be purchased endlessly and the rest of the upgrades are one-time upgrades\r\n      with requirements.\r\n      <br>\r\n      Upgrades here have the same gameplay and visual behavior as Reality Upgrades, but cost Imaginary Machines instead.\r\n      <span :ach-tooltip=\"lockTooltip\">\r\n        <i class=\"fas fa-question-circle\" />\r\n      </span>\r\n    </div>\r\n    <div\r\n      v-for=\"row in 5\"\r\n      :key=\"row\"\r\n      class=\"l-reality-upgrade-grid__row\"\r\n    >\r\n      <ImaginaryUpgradeButton\r\n        v-for=\"column in 5\"\r\n        :key=\"id(row, column)\"\r\n        :upgrade=\"upgrades[id(row, column)]\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-cap-text {\r\n  color: var(--color-text);\r\n  font-size: 1.5rem;\r\n}\r\n\r\n.c-info-text {\r\n  color: var(--color-text);\r\n  margin: 1.5rem;\r\n}\r\n</style>\r\n"]}]}