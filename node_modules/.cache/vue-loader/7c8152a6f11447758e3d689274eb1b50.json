{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\automator\\AutomatorEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\automator\\AutomatorEditor.vue","mtime":1745241597072},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgQXV0b21hdG9yQmxvY2tFZGl0b3IgZnJvbSAiLi9BdXRvbWF0b3JCbG9ja0VkaXRvciI7DQppbXBvcnQgQXV0b21hdG9yQ29udHJvbHMgZnJvbSAiLi9BdXRvbWF0b3JDb250cm9scyI7DQppbXBvcnQgQXV0b21hdG9yVGV4dEVkaXRvciBmcm9tICIuL0F1dG9tYXRvclRleHRFZGl0b3IiOw0KDQpleHBvcnQgZGVmYXVsdCB7DQogIG5hbWU6ICJBdXRvbWF0b3JFZGl0b3IiLA0KICBjb21wb25lbnRzOiB7DQogICAgQXV0b21hdG9yQmxvY2tFZGl0b3IsDQogICAgQXV0b21hdG9yVGV4dEVkaXRvciwNCiAgICBBdXRvbWF0b3JDb250cm9scywNCiAgfSwNCiAgZGF0YSgpIHsNCiAgICByZXR1cm4gew0KICAgICAgYXV0b21hdG9yVHlwZTogMCwNCiAgICB9Ow0KICB9LA0KICBjb21wdXRlZDogew0KICAgIGN1cnJlbnRTY3JpcHRJRDogew0KICAgICAgZ2V0KCkgew0KICAgICAgICByZXR1cm4gdGhpcy4kdmlld01vZGVsLnRhYnMucmVhbGl0eS5hdXRvbWF0b3IuZWRpdG9yU2NyaXB0SUQ7DQogICAgICB9LA0KICAgICAgc2V0KHZhbHVlKSB7DQogICAgICAgIHRoaXMuJHZpZXdNb2RlbC50YWJzLnJlYWxpdHkuYXV0b21hdG9yLmVkaXRvclNjcmlwdElEID0gdmFsdWU7DQogICAgICB9DQogICAgfSwNCiAgICBjdXJyZW50U2NyaXB0Q29udGVudCgpIHsNCiAgICAgIHJldHVybiBwbGF5ZXIucmVhbGl0eS5hdXRvbWF0b3Iuc2NyaXB0c1t0aGlzLmN1cnJlbnRTY3JpcHRJRF0uY29udGVudDsNCiAgICB9LA0KICAgIGN1cnJlbnRTY3JpcHQoKSB7DQogICAgICByZXR1cm4gQ29kZU1pcnJvci5Eb2ModGhpcy5jdXJyZW50U2NyaXB0Q29udGVudCwgImF1dG9tYXRvIikuZ2V0VmFsdWUoKTsNCiAgICB9LA0KICAgIGlzVGV4dEF1dG9tYXRvcigpIHsNCiAgICAgIHJldHVybiB0aGlzLmF1dG9tYXRvclR5cGUgPT09IEFVVE9NQVRPUl9UWVBFLlRFWFQ7DQogICAgfSwNCiAgfSwNCiAgY3JlYXRlZCgpIHsNCiAgICB0aGlzLm9uJChHQU1FX0VWRU5ULkdBTUVfTE9BRCwgKCkgPT4gdGhpcy5vbkdhbWVMb2FkKCkpOw0KICAgIHRoaXMub24kKEdBTUVfRVZFTlQuQVVUT01BVE9SX1NBVkVfQ0hBTkdFRCwgKCkgPT4gdGhpcy5vbkdhbWVMb2FkKCkpOw0KICAgIHRoaXMudXBkYXRlQ3VycmVudFNjcmlwdElEKCk7DQogIH0sDQogIG1ldGhvZHM6IHsNCiAgICB1cGRhdGUoKSB7DQogICAgICB0aGlzLmF1dG9tYXRvclR5cGUgPSBwbGF5ZXIucmVhbGl0eS5hdXRvbWF0b3IudHlwZTsNCiAgICAgIGlmICghQXV0b21hdG9yQmFja2VuZC5pc09uICYmIEF1dG9tYXRvclRleHRVSS5lZGl0b3IgJiYgQXV0b21hdG9yRGF0YS5uZWVkc1JlY29tcGlsZSkgew0KICAgICAgICBBdXRvbWF0b3JUZXh0VUkuZWRpdG9yLnBlcmZvcm1MaW50KCk7DQogICAgICB9DQogICAgfSwNCiAgICBvbkdhbWVMb2FkKCkgew0KICAgICAgdGhpcy51cGRhdGVDdXJyZW50U2NyaXB0SUQoKTsNCiAgICB9LA0KICAgIHVwZGF0ZUN1cnJlbnRTY3JpcHRJRCgpIHsNCiAgICAgIGNvbnN0IHN0b3JlZFNjcmlwdHMgPSBwbGF5ZXIucmVhbGl0eS5hdXRvbWF0b3Iuc2NyaXB0czsNCiAgICAgIHRoaXMuY3VycmVudFNjcmlwdElEID0gcGxheWVyLnJlYWxpdHkuYXV0b21hdG9yLnN0YXRlLmVkaXRvclNjcmlwdDsNCiAgICAgIC8vIFRoaXMgc2hvdWxkbid0IGhhcHBlbiBpZiB0aGluZ3MgYXJlIGxvYWRlZCBpbiB0aGUgcmlnaHQgb3JkZXIsIGJ1dCBtaWdodCBhcyB3ZWxsIGJlIHN1cmUuDQogICAgICBpZiAoc3RvcmVkU2NyaXB0c1t0aGlzLmN1cnJlbnRTY3JpcHRJRF0gPT09IHVuZGVmaW5lZCkgew0KICAgICAgICB0aGlzLmN1cnJlbnRTY3JpcHRJRCA9IE51bWJlcihPYmplY3Qua2V5cyhzdG9yZWRTY3JpcHRzKVswXSk7DQogICAgICAgIHBsYXllci5yZWFsaXR5LmF1dG9tYXRvci5zdGF0ZS5lZGl0b3JTY3JpcHQgPSB0aGlzLmN1cnJlbnRTY3JpcHRJRDsNCiAgICAgICAgQXV0b21hdG9yRGF0YS5jbGVhclVuZG9EYXRhKCk7DQogICAgICB9DQogICAgICAvLyBUaGlzIG1heSBoYXBwZW4gaWYgdGhlIHBsYXllciBoYXMgZXJyb3JlZCB0ZXh0bWF0byBzY3JpcHRzIGFuZCBzd2l0Y2hlcyB0byB0aGVtIHdoaWxlIGluIGJsb2NrbWF0byBtb2RlDQogICAgICBpZiAoQmxvY2tBdXRvbWF0b3IuaGFzVW5wYXJzYWJsZUNvbW1hbmRzKHRoaXMuY3VycmVudFNjcmlwdCkgJiYNCiAgICAgICAgcGxheWVyLnJlYWxpdHkuYXV0b21hdG9yLnR5cGUgPT09IEFVVE9NQVRPUl9UWVBFLkJMT0NLKSB7DQogICAgICAgIE1vZGFsLm1lc3NhZ2Uuc2hvdyhgU29tZSBpbmNvbXBsZXRlIGJsb2NrcyB3ZXJlIHVucmVjb2duaXphYmxlIC0gZGVmYXVsdGluZyB0byB0ZXh0IGVkaXRvci5gKTsNCg0KICAgICAgICAvLyBBdXRvbWF0b3JCYWNrZW5kLmNoYW5nZU1vZGVzIGluaXRpYWxpemVzIHRoZSBuZXcgZWRpdG9yIGFuZCBzYXZlZmlsZSBzdGF0ZSBmcm9tIEJsb2NrQXV0b21hdG9yLmxpbmVzLCB3aGljaA0KICAgICAgICAvLyB3aWxsIGJlIGVtcHR5IGlmIHRoaXMgaXMgcnVubmluZyB1cG9uIGdhbWUgbG9hZCAtIHRoaXMgZW5kcyB1cCB3aXBpbmcgdGhlIGVudGlyZSBzY3JpcHQuIFNvIHdlIGluc3RlYWQgc2V0DQogICAgICAgIC8vIHRoZSBuZXcgc2NyaXB0IGNvbnRlbnQgZXh0ZXJuYWwgdG8gdGhhdCBtZXRob2QgY2FsbCB0byBrZWVwIG1vc3Qgb2YgdGhlIHNjcmlwdCBpbnRhY3QNCiAgICAgICAgY29uc3QgZXJyb3JlZFNjcmlwdCA9IEF1dG9tYXRvckRhdGEuY3VycmVudFNjcmlwdFRleHQoKTsNCiAgICAgICAgQXV0b21hdG9yQmFja2VuZC5jaGFuZ2VNb2Rlcyh0aGlzLmN1cnJlbnRTY3JpcHRJRCk7DQogICAgICAgIHBsYXllci5yZWFsaXR5LmF1dG9tYXRvci5zY3JpcHRzW3RoaXMuY3VycmVudFNjcmlwdElEXS5jb250ZW50ID0gZXJyb3JlZFNjcmlwdDsNCiAgICAgICAgdGhpcy5hdXRvbWF0b3JUeXBlID0gQVVUT01BVE9SX1RZUEUuVEVYVDsNCiAgICAgIH0NCiAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IEJsb2NrQXV0b21hdG9yLnVwZGF0ZUVkaXRvcih0aGlzLmN1cnJlbnRTY3JpcHQpKTsNCiAgICB9LA0KICB9DQp9Ow0K"},{"version":3,"sources":["AutomatorEditor.vue"],"names":[],"mappings":";AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AutomatorEditor.vue","sourceRoot":"src/components/tabs/automator","sourcesContent":["<script>\r\nimport AutomatorBlockEditor from \"./AutomatorBlockEditor\";\r\nimport AutomatorControls from \"./AutomatorControls\";\r\nimport AutomatorTextEditor from \"./AutomatorTextEditor\";\r\n\r\nexport default {\r\n  name: \"AutomatorEditor\",\r\n  components: {\r\n    AutomatorBlockEditor,\r\n    AutomatorTextEditor,\r\n    AutomatorControls,\r\n  },\r\n  data() {\r\n    return {\r\n      automatorType: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    currentScriptID: {\r\n      get() {\r\n        return this.$viewModel.tabs.reality.automator.editorScriptID;\r\n      },\r\n      set(value) {\r\n        this.$viewModel.tabs.reality.automator.editorScriptID = value;\r\n      }\r\n    },\r\n    currentScriptContent() {\r\n      return player.reality.automator.scripts[this.currentScriptID].content;\r\n    },\r\n    currentScript() {\r\n      return CodeMirror.Doc(this.currentScriptContent, \"automato\").getValue();\r\n    },\r\n    isTextAutomator() {\r\n      return this.automatorType === AUTOMATOR_TYPE.TEXT;\r\n    },\r\n  },\r\n  created() {\r\n    this.on$(GAME_EVENT.GAME_LOAD, () => this.onGameLoad());\r\n    this.on$(GAME_EVENT.AUTOMATOR_SAVE_CHANGED, () => this.onGameLoad());\r\n    this.updateCurrentScriptID();\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.automatorType = player.reality.automator.type;\r\n      if (!AutomatorBackend.isOn && AutomatorTextUI.editor && AutomatorData.needsRecompile) {\r\n        AutomatorTextUI.editor.performLint();\r\n      }\r\n    },\r\n    onGameLoad() {\r\n      this.updateCurrentScriptID();\r\n    },\r\n    updateCurrentScriptID() {\r\n      const storedScripts = player.reality.automator.scripts;\r\n      this.currentScriptID = player.reality.automator.state.editorScript;\r\n      // This shouldn't happen if things are loaded in the right order, but might as well be sure.\r\n      if (storedScripts[this.currentScriptID] === undefined) {\r\n        this.currentScriptID = Number(Object.keys(storedScripts)[0]);\r\n        player.reality.automator.state.editorScript = this.currentScriptID;\r\n        AutomatorData.clearUndoData();\r\n      }\r\n      // This may happen if the player has errored textmato scripts and switches to them while in blockmato mode\r\n      if (BlockAutomator.hasUnparsableCommands(this.currentScript) &&\r\n        player.reality.automator.type === AUTOMATOR_TYPE.BLOCK) {\r\n        Modal.message.show(`Some incomplete blocks were unrecognizable - defaulting to text editor.`);\r\n\r\n        // AutomatorBackend.changeModes initializes the new editor and savefile state from BlockAutomator.lines, which\r\n        // will be empty if this is running upon game load - this ends up wiping the entire script. So we instead set\r\n        // the new script content external to that method call to keep most of the script intact\r\n        const erroredScript = AutomatorData.currentScriptText();\r\n        AutomatorBackend.changeModes(this.currentScriptID);\r\n        player.reality.automator.scripts[this.currentScriptID].content = erroredScript;\r\n        this.automatorType = AUTOMATOR_TYPE.TEXT;\r\n      }\r\n      this.$nextTick(() => BlockAutomator.updateEditor(this.currentScript));\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-automator-pane\">\r\n    <AutomatorControls />\r\n    <AutomatorTextEditor\r\n      v-if=\"isTextAutomator\"\r\n      :current-script-id=\"currentScriptID\"\r\n    />\r\n    <AutomatorBlockEditor v-if=\"!isTextAutomator\" />\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-slider-toggle-button {\r\n  display: flex;\r\n  overflow: hidden;\r\n  position: relative;\r\n  align-items: center;\r\n  color: black;\r\n  background-color: #626262;\r\n  border: 0.2rem solid #767676;\r\n  border-radius: 0.2rem;\r\n  margin: 0.4rem;\r\n  padding: 0.3rem 0;\r\n  cursor: pointer;\r\n}\r\n\r\n.s.base--dark .c-slider-toggle-button {\r\n  background-color: #626262;\r\n}\r\n\r\n.c-slider-toggle-button .fas {\r\n  width: 3rem;\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\n.c-slider-toggle-button:before {\r\n  content: \"\";\r\n  width: 3rem;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 0;\r\n  background-color: white;\r\n  border-radius: 0.2rem;\r\n  transition: 0.3s ease all;\r\n}\r\n\r\n.c-slider-toggle-button--right:before {\r\n  left: 3rem;\r\n  background-color: white;\r\n}\r\n\r\n.tutorial--glow:after {\r\n  z-index: 2;\r\n}\r\n</style>\r\n"]}]}