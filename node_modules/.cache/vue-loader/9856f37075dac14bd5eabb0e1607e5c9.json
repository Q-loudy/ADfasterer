{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\glyphs\\EquippedGlyphs.vue?vue&type=style&index=0&id=61f0d2a6&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\glyphs\\EquippedGlyphs.vue","mtime":1745241597298},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouYy1lcXVpcHBlZC1nbHlwaCB7DQogIC13ZWJraXQtdXNlci1kcmFnOiBub25lOw0KfQ0KDQoubC1nbHlwaC1lcXVpcC1idXR0b24gew0KICB3aWR0aDogMTAwJTsNCiAgaGVpZ2h0OiAzLjVyZW07DQogIG1hcmdpbjogMC4yNXJlbSAwLjVyZW07DQp9DQoNCi5sLWdseXBoLWVxdWlwLWJ1dHRvbi1zaG9ydCB7DQogIHdpZHRoOiAxMDAlOw0KICBoZWlnaHQ6IDIuNXJlbTsNCiAgbWFyZ2luOiAwLjI1cmVtIDAuNXJlbTsNCn0NCg=="},{"version":3,"sources":["EquippedGlyphs.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"EquippedGlyphs.vue","sourceRoot":"src/components/tabs/glyphs","sourcesContent":["<script>\r\nimport GlyphComponent from \"@/components/GlyphComponent\";\r\n\r\nexport default {\r\n  name: \"EquippedGlyphs\",\r\n  components: {\r\n    GlyphComponent\r\n  },\r\n  data() {\r\n    return {\r\n      glyphs: [],\r\n      dragoverIndex: -1,\r\n      respec: player.reality.respec,\r\n      respecIntoProtected: player.options.respecIntoProtected,\r\n      undoSlotsAvailable: 0,\r\n      undoAvailable: false,\r\n      undoVisible: false,\r\n      cosmeticGlow: false,\r\n    };\r\n  },\r\n  computed: {\r\n    // Empty slots are bigger due to the enlarged drop zone\r\n    GLYPH_SIZE: () => 5,\r\n    slotCount() {\r\n      return this.glyphs.length;\r\n    },\r\n    arrangementRadius() {\r\n      if (this.slotCount === 0) return 0;\r\n      return this.slotCount + 1;\r\n    },\r\n    respecTooltip() {\r\n      const reset = Pelle.isDoomed ? \"Armageddon\" : \"Reality\";\r\n      return this.respec\r\n        ? `Respec is active and will place your currently - equipped Glyphs into your inventory after ${reset}.`\r\n        : `Your currently-equipped Glyphs will stay equipped on ${reset}.`;\r\n    },\r\n    undoTooltip() {\r\n      if (!this.undoSlotsAvailable) return \"You do not have available inventory space to unequip Glyphs to\";\r\n      return this.undoAvailable\r\n        ? (\"Unequip the last equipped Glyph and rewind Reality to when you equipped it.\" +\r\n          \" (Most resources will be fully reset)\")\r\n        : \"Undo is only available for Glyphs equipped during this Reality\";\r\n    },\r\n    unequipText() {\r\n      if (Pelle.isDoomed) return \"Unequip Glyphs on Armageddon\";\r\n      return \"Unequip Glyphs on Reality\";\r\n    },\r\n    isDoomed() {\r\n      return Pelle.isDoomed;\r\n    },\r\n    glyphRespecStyle() {\r\n      if (this.respec) {\r\n        return {\r\n          color: \"var(--color-reality-light)\",\r\n          \"background-color\": \"var(--color-reality)\",\r\n          \"border-color\": \"#094e0b\",\r\n          cursor: \"pointer\",\r\n        };\r\n      }\r\n      return {\r\n        cursor: \"pointer\",\r\n      };\r\n    },\r\n    // \"Armageddon\" causes the button to have text overflow, so we conditionally make the button taller; this doesn't\r\n    // cause container overflow due to another button being removed entirely when doomed\r\n    unequipClass() {\r\n      return {\r\n        \"l-glyph-equip-button\": this.isDoomed,\r\n        \"l-glyph-equip-button-short\": !this.isDoomed,\r\n      };\r\n    }\r\n  },\r\n  created() {\r\n    this.on$(GAME_EVENT.GLYPHS_EQUIPPED_CHANGED, this.glyphsChanged);\r\n    this.glyphsChanged();\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.respec = player.reality.respec;\r\n      this.respecIntoProtected = player.options.respecIntoProtected;\r\n      this.undoSlotsAvailable = this.respecIntoProtected\r\n        ? Glyphs.totalSlots - GameCache.glyphInventorySpace.value - Glyphs.inventoryList.length > 0\r\n        : GameCache.glyphInventorySpace.value > 0;\r\n      this.undoVisible = TeresaUnlocks.undo.canBeApplied;\r\n      this.undoAvailable = this.undoVisible && this.undoSlotsAvailable && player.reality.glyphs.undo.length > 0;\r\n      this.cosmeticGlow = player.reality.glyphs.cosmetics.glowNotification;\r\n    },\r\n    glyphPositionStyle(idx) {\r\n      const angle = 2 * Math.PI * idx / this.slotCount;\r\n      const dx = -this.GLYPH_SIZE / 2 + this.arrangementRadius * Math.sin(angle);\r\n      const dy = -this.GLYPH_SIZE / 2 + this.arrangementRadius * Math.cos(angle);\r\n      return {\r\n        position: \"absolute\",\r\n        left: `calc(50% + ${dx}rem)`,\r\n        top: `calc(50% + ${dy}rem)`,\r\n        \"z-index\": 1,\r\n      };\r\n    },\r\n    dragover(event, idx) {\r\n      if (!event.dataTransfer.types.includes(GLYPH_MIME_TYPE)) return;\r\n      event.preventDefault();\r\n      this.dragoverIndex = idx;\r\n    },\r\n    dragleave(idx) {\r\n      if (this.dragoverIndex === idx) this.dragoverIndex = -1;\r\n    },\r\n    drop(event, idx) {\r\n      this.dragoverIndex = -1;\r\n      const id = parseInt(event.dataTransfer.getData(GLYPH_MIME_TYPE), 10);\r\n      if (isNaN(id)) return;\r\n      const glyph = Glyphs.findById(id);\r\n      if (glyph) Glyphs.equip(glyph, idx);\r\n    },\r\n    toggleRespec() {\r\n      player.reality.respec = !player.reality.respec;\r\n    },\r\n    toggleRespecIntoProtected() {\r\n      player.options.respecIntoProtected = !player.options.respecIntoProtected;\r\n    },\r\n    glyphsChanged() {\r\n      this.glyphs = Glyphs.active.map(GlyphGenerator.copy);\r\n      this.$recompute(\"slotCount\");\r\n    },\r\n    undo() {\r\n      if (!this.undoAvailable || Pelle.isDoomed) return;\r\n      if (player.options.confirmations.glyphUndo) Modal.glyphUndo.show();\r\n      else Glyphs.undo();\r\n    },\r\n    dragEvents(idx) {\r\n      return {\r\n        dragover: $event => this.dragover($event, idx),\r\n        dragleave: () => this.dragleave(idx),\r\n        drop: $event => this.drop($event, idx),\r\n      };\r\n    },\r\n    showEquippedModal() {\r\n      // If there aren't any glyphs equipped, the array is full of nulls which get filtered out by x => x\r\n      if (this.glyphs.filter(x => x).length === 0) return;\r\n      Modal.glyphShowcasePanel.show({\r\n        name: \"Equipped Glyphs\",\r\n        glyphSet: this.glyphs,\r\n        closeEvent: GAME_EVENT.GLYPHS_EQUIPPED_CHANGED,\r\n      });\r\n    },\r\n    showOptionModal() {\r\n      player.reality.glyphs.cosmetics.glowNotification = false;\r\n      Modal.glyphDisplayOptions.show();\r\n    },\r\n    clickGlyph(glyph, idx, increaseSound = false) {\r\n      if (Glyphs.isMusicGlyph(glyph)) {\r\n        const sound = idx + (increaseSound ? 6 : 1);\r\n        new Audio(`audio/note${sound}.mp3`).play();\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-equipped-glyphs\">\r\n    <div class=\"l-equipped-glyphs__slots\">\r\n      <div\r\n        v-for=\"(glyph, idx) in glyphs\"\r\n        :key=\"idx\"\r\n        class=\"l-glyph-set-preview\"\r\n        :style=\"glyphPositionStyle(idx)\"\r\n        v-on=\"dragEvents(idx)\"\r\n        @click=\"showEquippedModal\"\r\n      >\r\n        <!-- the drop zone is a bit larger than the glyph itself. -->\r\n        <div class=\"l-equipped-glyphs__dropzone\" />\r\n        <GlyphComponent\r\n          v-if=\"glyph\"\r\n          :key=\"idx\"\r\n          :glyph=\"glyph\"\r\n          :circular=\"true\"\r\n          :is-active-glyph=\"true\"\r\n          class=\"c-equipped-glyph\"\r\n          @clicked=\"clickGlyph(glyph, idx)\"\r\n          @shiftClicked=\"clickGlyph(glyph, idx, true)\"\r\n          @ctrlShiftClicked=\"clickGlyph(glyph, idx, true)\"\r\n        />\r\n        <div\r\n          v-else\r\n          :class=\"['l-equipped-glyphs__empty', 'c-equipped-glyphs__empty',\r\n                   {'c-equipped-glyphs__empty--dragover': dragoverIndex === idx}]\"\r\n        />\r\n      </div>\r\n    </div>\r\n    <div class=\"l-equipped-glyphs__buttons\">\r\n      <button\r\n        class=\"c-reality-upgrade-btn\"\r\n        :class=\"unequipClass\"\r\n        :style=\"glyphRespecStyle\"\r\n        :ach-tooltip=\"respecTooltip\"\r\n        @click=\"toggleRespec\"\r\n      >\r\n        {{ unequipText }}\r\n      </button>\r\n      <button\r\n        v-if=\"undoVisible\"\r\n        class=\"l-glyph-equip-button c-reality-upgrade-btn\"\r\n        :class=\"{'c-reality-upgrade-btn--unavailable': !undoAvailable}\"\r\n        :ach-tooltip=\"undoTooltip\"\r\n        @click=\"undo\"\r\n      >\r\n        <span>Rewind to <b>undo</b> the last equipped Glyph</span>\r\n      </button>\r\n      <button\r\n        class=\"l-glyph-equip-button c-reality-upgrade-btn\"\r\n        @click=\"toggleRespecIntoProtected\"\r\n      >\r\n        Unequip Glyphs to:\r\n        <br>\r\n        <span v-if=\"respecIntoProtected\">Protected slots</span>\r\n        <span v-else>Main inventory</span>\r\n      </button>\r\n      <button\r\n        class=\"l-glyph-equip-button-short c-reality-upgrade-btn\"\r\n        :class=\"{'tutorial--glow': cosmeticGlow}\"\r\n        @click=\"showOptionModal\"\r\n      >\r\n        Open Glyph Visual Options\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-equipped-glyph {\r\n  -webkit-user-drag: none;\r\n}\r\n\r\n.l-glyph-equip-button {\r\n  width: 100%;\r\n  height: 3.5rem;\r\n  margin: 0.25rem 0.5rem;\r\n}\r\n\r\n.l-glyph-equip-button-short {\r\n  width: 100%;\r\n  height: 2.5rem;\r\n  margin: 0.25rem 0.5rem;\r\n}\r\n</style>\r\n"]}]}