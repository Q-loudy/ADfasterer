{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\black-hole\\BlackHoleTab.vue?vue&type=style&index=0&id=72ec0414&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\black-hole\\BlackHoleTab.vue","mtime":1745241597094},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5sLWF1dG8tcGF1c2UtYnV0dG9uIHsNCiAgd2lkdGg6IDMwcmVtOw0KfQ0KDQoubC1wcmUtdW5sb2NrLXRleHQgew0KICBkaXNwbGF5OiBmbGV4Ow0KICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOw0KICBhbGlnbi1pdGVtczogY2VudGVyOw0KfQ0KDQouYy1ibGFjay1ob2xlLWRpc2FibGVkLWRlc2NyaXB0aW9uIHsNCiAgZm9udC1zaXplOiAyLjVyZW07DQogIGxpbmUtaGVpZ2h0OiAxLjU7DQp9DQo="},{"version":3,"sources":["BlackHoleTab.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"BlackHoleTab.vue","sourceRoot":"src/components/tabs/black-hole","sourcesContent":["<script>\r\nimport { BlackHoleAnimation } from \"./black-hole-animation\";\r\nimport BlackHoleChargingSliders from \"./BlackHoleChargingSliders\";\r\nimport BlackHoleStateRow from \"./BlackHoleStateRow\";\r\nimport BlackHoleUnlockButton from \"./BlackHoleUnlockButton\";\r\nimport BlackHoleUpgradeRow from \"./BlackHoleUpgradeRow\";\r\n\r\nexport default {\r\n  name: \"BlackHoleTab\",\r\n  components: {\r\n    BlackHoleUpgradeRow,\r\n    BlackHoleStateRow,\r\n    BlackHoleChargingSliders,\r\n    BlackHoleUnlockButton\r\n  },\r\n  data() {\r\n    return {\r\n      isDoomed: false,\r\n      isUnlocked: false,\r\n      isPaused: false,\r\n      isEnslaved: false,\r\n      pauseMode: 0,\r\n      detailedBH2: \"\",\r\n      isPermanent: false,\r\n      hasBH2: false,\r\n      blackHoleUptime: [],\r\n      stateChange: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    blackHoles: () => BlackHoles.list,\r\n    pauseModeString() {\r\n      switch (this.pauseMode) {\r\n        case BLACK_HOLE_PAUSE_MODE.NO_PAUSE:\r\n          return \"Do not pause\";\r\n        case BLACK_HOLE_PAUSE_MODE.PAUSE_BEFORE_BH1:\r\n          return this.hasBH2 ? \"Before BH1\" : \"Before activation\";\r\n        case BLACK_HOLE_PAUSE_MODE.PAUSE_BEFORE_BH2:\r\n          return \"Before BH2\";\r\n        default:\r\n          throw new Error(\"Unrecognized BH offline pausing mode\");\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.startAnimation();\r\n  },\r\n  destroyed() {\r\n    if (this.animation) this.animation.unmount();\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isDoomed = Pelle.isDoomed;\r\n      this.isUnlocked = BlackHoles.areUnlocked;\r\n      this.isPaused = BlackHoles.arePaused;\r\n      // If stop running enslaved, re-mount the black hole animation as it reappears\r\n      if (this.isEnslaved && !Enslaved.isRunning) {\r\n        if (this.animation) this.animation.unmount();\r\n        this.startAnimation();\r\n      }\r\n      this.isEnslaved = Enslaved.isRunning;\r\n      this.isPermanent = BlackHoles.arePermanent;\r\n      this.pauseMode = player.blackHoleAutoPauseMode;\r\n      this.hasBH2 = BlackHole(2).isUnlocked;\r\n      this.blackHoleUptime = [BlackHole(1).duration / BlackHole(1).cycleLength,\r\n        BlackHole(2).duration / BlackHole(2).cycleLength];\r\n      this.detailedBH2 = this.bh2Status();\r\n\r\n      if (player.blackHoleNegative < 1) this.stateChange = this.isPaused ? \"Uninvert\" : \"Invert\";\r\n      else this.stateChange = this.isPaused ? \"Unpause\" : \"Pause\";\r\n    },\r\n    bh2Status() {\r\n      const bh1Remaining = BlackHole(1).timeWithPreviousActiveToNextStateChange;\r\n      const bh2Remaining = BlackHole(2).timeWithPreviousActiveToNextStateChange;\r\n\r\n      // Both BH active\r\n      if (BlackHole(1).isActive && BlackHole(2).isActive) {\r\n        const bh2Duration = Math.min(bh1Remaining, bh2Remaining);\r\n        return `Black Hole 2 is active for the next ${TimeSpan.fromSeconds(bh2Duration).toStringShort()}!`;\r\n      }\r\n\r\n      // BH1 active, BH2 will trigger before BH1 runs out\r\n      if (BlackHole(1).isActive && (bh2Remaining < bh1Remaining)) {\r\n        const bh2Duration = Math.min(bh1Remaining - bh2Remaining, BlackHole(2).duration);\r\n        return `Black Hole 2 will activate before Black Hole 1 deactivates,\r\n          for ${TimeSpan.fromSeconds(bh2Duration).toStringShort()}`;\r\n      }\r\n\r\n      // BH2 won't start yet next cycle\r\n      if (BlackHole(1).isActive || (bh2Remaining > BlackHole(1).duration)) {\r\n        const cycleCount = BlackHole(1).isActive\r\n          ? Math.floor((bh2Remaining - bh1Remaining) / BlackHole(1).duration) + 1\r\n          : Math.floor(bh2Remaining / BlackHole(1).duration);\r\n        return `Black Hole 2 will activate after ${quantifyInt(\"more active cycle\", cycleCount)} of Black Hole 1.`;\r\n      }\r\n\r\n      // BH1 inactive, BH2 ready to go when BH1 activates\r\n      if (BlackHole(2).isCharged) {\r\n        const bh2Duration = Math.min(BlackHole(1).duration, bh2Remaining);\r\n        return `Black Hole 2 will activate with Black Hole 1,\r\n          for ${TimeSpan.fromSeconds(bh2Duration).toStringShort()}.`;\r\n      }\r\n\r\n      // BH1 inactive, BH2 starts at some point after BH1 activates\r\n      const bh2Duration = Math.min(BlackHole(1).duration - bh2Remaining, BlackHole(2).duration);\r\n      return `Black Hole 2 will activate ${TimeSpan.fromSeconds(bh2Remaining).toStringShort()} after\r\n        Black Hole 1, for ${TimeSpan.fromSeconds(bh2Duration).toStringShort()}.`;\r\n    },\r\n    togglePause() {\r\n      BlackHoles.togglePause();\r\n      if (BlackHoles.arePaused) {\r\n        player.celestials.enslaved.isAutoReleasing = false;\r\n      }\r\n      this.update();\r\n    },\r\n    changePauseMode() {\r\n      let steps;\r\n      switch (this.pauseMode) {\r\n        case BLACK_HOLE_PAUSE_MODE.NO_PAUSE:\r\n          // Note: We don't need to check for permanent BH2 because the button disappears at that point\r\n          steps = BlackHole(1).isPermanent ? 2 : 1;\r\n          break;\r\n        case BLACK_HOLE_PAUSE_MODE.PAUSE_BEFORE_BH1:\r\n          steps = this.hasBH2 ? 1 : 2;\r\n          break;\r\n        case BLACK_HOLE_PAUSE_MODE.PAUSE_BEFORE_BH2:\r\n          steps = 1;\r\n          break;\r\n        default:\r\n          throw new Error(\"Unrecognized BH offline pausing mode\");\r\n      }\r\n      player.blackHoleAutoPauseMode = (this.pauseMode + steps) % Object.values(BLACK_HOLE_PAUSE_MODE).length;\r\n    },\r\n    startAnimation() {\r\n      setTimeout(() => {\r\n        if (this.$refs.canvas) {\r\n          this.animation = new BlackHoleAnimation(this.$refs.canvas.getContext(\"2d\"));\r\n        }\r\n      }, 1);\r\n    },\r\n    gridStyle() {\r\n      return this.isPermanent ? \"l-black-hole-upgrade-permanent\" : \"l-black-hole-upgrade-grid\";\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-black-hole-tab\">\r\n    <div\r\n      v-if=\"isEnslaved || isDoomed\"\r\n      class=\"c-black-hole-disabled-description\"\r\n    >\r\n      <i v-if=\"isEnslaved\">\r\n        You must... seek... other methods...\r\n        <br>\r\n      </i>\r\n      The physics of this Reality do not allow the existence of Black Holes.\r\n    </div>\r\n    <div\r\n      v-else-if=\"!isUnlocked\"\r\n      class=\"l-pre-unlock-text\"\r\n    >\r\n      <BlackHoleUnlockButton @blackholeunlock=\"startAnimation\" />\r\n      The Black Hole makes the entire game run significantly faster for a short period of time.\r\n      <br>\r\n      Starts at {{ formatX(180) }} faster for {{ formatInt(10) }} seconds, once per hour.\r\n      <br>\r\n      <br>\r\n      Unlocking the Black Hole also gives {{ formatInt(10) }} Automator Points.\r\n    </div>\r\n    <template v-else>\r\n      <div class=\"c-subtab-option-container\">\r\n        <button\r\n          class=\"o-primary-btn o-primary-btn--subtab-option\"\r\n          @click=\"togglePause\"\r\n        >\r\n          {{ stateChange }} Black Hole\r\n        </button>\r\n        <button\r\n          v-if=\"!isPermanent\"\r\n          class=\"o-primary-btn o-primary-btn--subtab-option l-auto-pause-button\"\r\n          @click=\"changePauseMode\"\r\n        >\r\n          Auto-pause: {{ pauseModeString }}\r\n        </button>\r\n      </div>\r\n      <canvas\r\n        ref=\"canvas\"\r\n        class=\"c-black-hole-canvas\"\r\n        width=\"400\"\r\n        height=\"400\"\r\n      />\r\n      <div class=\"l-black-hole-upgrade-grid\">\r\n        <BlackHoleStateRow\r\n          v-for=\"(blackHole, i) in blackHoles\"\r\n          :key=\"'state' + i\"\r\n          :black-hole=\"blackHole\"\r\n        />\r\n        <span v-if=\"hasBH2 && !isPermanent\">\r\n          <b>{{ detailedBH2 }}</b>\r\n          <br>\r\n          The timer for Black Hole 2 only advances while Black Hole 1 is active.\r\n          <br>\r\n          Upgrades affect the internal timer; the header shows real time until next activation.\r\n        </span>\r\n        <br>\r\n        <div v-if=\"!isPermanent\">\r\n          Black holes become permanently active when they are active for more than {{ formatPercents(0.9999, 2) }}\r\n          of the time.\r\n          <br>\r\n          Active time percent: {{ formatPercents(blackHoleUptime[0], 3) }}\r\n          <span v-if=\"hasBH2\">and {{ formatPercents(blackHoleUptime[1], 3) }}</span>\r\n        </div>\r\n        <BlackHoleChargingSliders class=\"l-enslaved-shop-container\" />\r\n      </div>\r\n      <div :class=\"gridStyle()\">\r\n        <BlackHoleUpgradeRow\r\n          v-for=\"(blackHole, i) in blackHoles\"\r\n          :key=\"'upgrades' + i\"\r\n          :black-hole=\"blackHole\"\r\n        />\r\n      </div>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.l-auto-pause-button {\r\n  width: 30rem;\r\n}\r\n\r\n.l-pre-unlock-text {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.c-black-hole-disabled-description {\r\n  font-size: 2.5rem;\r\n  line-height: 1.5;\r\n}\r\n</style>\r\n"]}]}