{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\replicanti\\ReplicantiTab.vue?vue&type=style&index=0&id=01c8ba77&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\replicanti\\ReplicantiTab.vue","mtime":1745241597432},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5tYXgtYWNjZW50IHsNCiAgY29sb3I6IHZhcigtLWNvbG9yLWFjY2VudCk7DQogIHRleHQtc2hhZG93OiAwIDAgMC4ycmVtIHZhcigtLWNvbG9yLXJlYWxpdHktZGFyayk7DQogIGN1cnNvcjogZGVmYXVsdDsNCn0NCg0KLm1vZGlmaWVkLWNhcCB7DQogIG1hcmdpbjogLTAuOHJlbSAwIDAuOHJlbTsNCiAgZm9udC13ZWlnaHQ6IGJvbGQ7DQp9DQo="},{"version":3,"sources":["ReplicantiTab.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqQA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"ReplicantiTab.vue","sourceRoot":"src/components/tabs/replicanti","sourcesContent":["<script>\r\nimport wordShift from \"@/core/word-shift\";\r\n\r\nimport ReplicantiUpgradeButton, { ReplicantiUpgradeButtonSetup } from \"./ReplicantiUpgradeButton\";\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\nimport ReplicantiGainText from \"./ReplicantiGainText\";\r\nimport ReplicantiGalaxyButton from \"./ReplicantiGalaxyButton\";\r\n\r\nexport default {\r\n  name: \"ReplicantiTab\",\r\n  components: {\r\n    PrimaryButton,\r\n    ReplicantiGainText,\r\n    ReplicantiUpgradeButton,\r\n    ReplicantiGalaxyButton,\r\n  },\r\n  data() {\r\n    return {\r\n      isUnlocked: false,\r\n      isUnlockAffordable: false,\r\n      isInEC8: false,\r\n      ec8Purchases: 0,\r\n      amount: new Decimal(),\r\n      mult: new Decimal(),\r\n      hasTDMult: false,\r\n      multTD: new Decimal(),\r\n      hasDTMult: false,\r\n      multDT: new Decimal(),\r\n      hasIPMult: false,\r\n      multIP: new Decimal(),\r\n      hasRaisedCap: false,\r\n      replicantiCap: new Decimal(),\r\n      capMultText: \"\",\r\n      distantRG: 0,\r\n      remoteRG: 0,\r\n      effarigInfinityBonusRG: 0,\r\n      isUncapped: false,\r\n      nextEffarigRGThreshold: 0,\r\n      canSeeGalaxyButton: false,\r\n      unlockCost: new Decimal(),\r\n      scrambledText: \"\",\r\n      maxReplicanti: new Decimal(),\r\n      estimateToMax: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    isDoomed: () => Pelle.isDoomed,\r\n    replicantiChanceSetup() {\r\n      return new ReplicantiUpgradeButtonSetup(\r\n        ReplicantiUpgrade.chance,\r\n        value => `Replicate chance: ${formatPercents(value)}`,\r\n        cost => `+${formatPercents(0.01)} Costs: ${format(cost)} IP`\r\n      );\r\n    },\r\n    replicantiIntervalSetup() {\r\n      const upgrade = ReplicantiUpgrade.interval;\r\n      function formatInterval(interval) {\r\n        const actualInterval = upgrade.applyModifiers(interval);\r\n        const intervalNum = actualInterval.toNumber();\r\n        if (\r\n          Number.isFinite(intervalNum) &&\r\n          intervalNum > 1 &&\r\n          upgrade.isCapped\r\n        ) {\r\n          // Checking isCapped() prevents text overflow when formatted as \"__ ➜ __\"\r\n          return TimeSpan.fromMilliseconds(intervalNum).toStringShort(false);\r\n        }\r\n        if (actualInterval.lt(0.01)) return `< ${format(0.01, 2, 2)}ms`;\r\n        if (actualInterval.gt(1000))\r\n          return `${format(actualInterval.div(1000), 2, 2)}s`;\r\n        return `${format(actualInterval, 2, 2)}ms`;\r\n      }\r\n      return new ReplicantiUpgradeButtonSetup(\r\n        upgrade,\r\n        value => `Interval: ${formatInterval(value)}`,\r\n        cost =>\r\n          `➜ ${formatInterval(upgrade.nextValue)} Costs: ${format(cost)} IP`\r\n      );\r\n    },\r\n    maxGalaxySetup() {\r\n      const upgrade = ReplicantiUpgrade.galaxies;\r\n      return new ReplicantiUpgradeButtonSetup(\r\n        upgrade,\r\n        value => {\r\n          let description = `Max Replicanti Galaxies: `;\r\n          const extra = upgrade.extra;\r\n          if (extra > 0) {\r\n            const total = value + extra;\r\n            description += `<br>${formatInt(value)} + ${formatInt(extra)} = ${formatInt(total)}`;\r\n          } else {\r\n            description += formatInt(value);\r\n          }\r\n          return description;\r\n        },\r\n        cost => `+${formatInt(1)} Costs: ${format(cost)} IP`\r\n      );\r\n    },\r\n    boostText() {\r\n      const boostList = [];\r\n      boostList.push(`a <span class=\"c-replicanti-description__accent\">${formatX(this.mult, 2, 2)}</span>\r\n        multiplier on all Infinity Dimensions`);\r\n      if (this.hasTDMult) {\r\n        boostList.push(`a <span class=\"c-replicanti-description__accent\">${formatX(this.multTD, 2, 2)}</span>\r\n          multiplier on all Time Dimensions from a Dilation Upgrade`);\r\n      }\r\n      if (this.hasDTMult) {\r\n        const additionalEffect = GlyphAlteration.isAdded(\"replication\") ? \"and Replicanti speed \" : \"\";\r\n        boostList.push(`a <span class=\"c-replicanti-description__accent\">${formatX(this.multDT, 2, 2)}</span>\r\n          multiplier to Dilated Time ${additionalEffect}from Glyphs`);\r\n      }\r\n      if (this.hasIPMult) {\r\n        boostList.push(`a <span class=\"c-replicanti-description__accent\">${formatX(this.multIP)}</span>\r\n          multiplier to Infinity Points from Glyph Alchemy`);\r\n      }\r\n      if (boostList.length === 1) return `${boostList[0]}.`;\r\n      if (boostList.length === 2) return `${boostList[0]}<br> and ${boostList[1]}.`;\r\n      return `${boostList.slice(0, -1).join(\",<br>\")},<br> and ${boostList[boostList.length - 1]}.`;\r\n    },\r\n    hasMaxText: () => PlayerProgress.realityUnlocked() && !Pelle.isDoomed,\r\n    toMaxTooltip() {\r\n      if (this.amount.lte(this.replicantiCap)) return null;\r\n      return this.estimateToMax.lt(0.01)\r\n        ? \"Currently Increasing\"\r\n        : TimeSpan.fromSeconds(this.estimateToMax.toNumber()).toStringShort();\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isUnlocked = Replicanti.areUnlocked;\r\n      this.unlockCost = new Decimal(1e140).dividedByEffectOf(PelleRifts.vacuum.milestones[1]);\r\n      if (this.isDoomed) this.scrambledText = this.vacuumText();\r\n      if (!this.isUnlocked) {\r\n        this.isUnlockAffordable = Currency.infinityPoints.gte(this.unlockCost);\r\n        return;\r\n      }\r\n      this.isInEC8 = EternityChallenge(8).isRunning;\r\n      if (this.isInEC8) {\r\n        this.ec8Purchases = player.eterc8repl;\r\n      }\r\n      this.amount.copyFrom(Replicanti.amount);\r\n      this.mult.copyFrom(replicantiMult());\r\n      this.hasTDMult = DilationUpgrade.tdMultReplicanti.isBought;\r\n      this.multTD.copyFrom(DilationUpgrade.tdMultReplicanti.effectValue);\r\n      this.hasDTMult = getAdjustedGlyphEffect(\"replicationdtgain\") !== 0 && !Pelle.isDoomed;\r\n      this.multDT = Math.clampMin(\r\n        Decimal.log10(Replicanti.amount) *\r\n          getAdjustedGlyphEffect(\"replicationdtgain\"),\r\n        1\r\n      );\r\n      this.hasIPMult = AlchemyResource.exponential.amount > 0 && !this.isDoomed;\r\n      this.multIP = Replicanti.amount.powEffectOf(AlchemyResource.exponential);\r\n      this.isUncapped = PelleRifts.vacuum.milestones[1].canBeApplied;\r\n      this.hasRaisedCap = EffarigUnlock.infinity.isUnlocked && !this.isUncapped;\r\n      this.replicantiCap.copyFrom(replicantiCap());\r\n      if (this.hasRaisedCap) {\r\n        const mult = this.replicantiCap.div(Decimal.NUMBER_MAX_VALUE);\r\n        this.capMultText = TimeStudy(31).canBeApplied\r\n          ? `Base: ${formatX(mult.pow(1 / TimeStudy(31).effectValue), 2)}; after TS31: ${formatX(mult, 2)}`\r\n          : formatX(mult, 2);\r\n      }\r\n      this.distantRG = ReplicantiUpgrade.galaxies.distantRGStart;\r\n      this.remoteRG = ReplicantiUpgrade.galaxies.remoteRGStart;\r\n      this.effarigInfinityBonusRG = Effarig.bonusRG;\r\n      this.nextEffarigRGThreshold = Decimal.NUMBER_MAX_VALUE.pow(\r\n        Effarig.bonusRG + 2\r\n      );\r\n      this.canSeeGalaxyButton =\r\n        Replicanti.galaxies.max >= 1 || PlayerProgress.eternityUnlocked();\r\n      this.maxReplicanti.copyFrom(player.records.thisReality.maxReplicanti);\r\n      this.estimateToMax = this.calculateEstimate();\r\n    },\r\n    vacuumText() {\r\n      return wordShift.wordCycle(PelleRifts.vacuum.name);\r\n    },\r\n    // This is copied out of a short segment of ReplicantiGainText with comments and unneeded variables stripped\r\n    calculateEstimate() {\r\n      const updateRateMs = player.options.updateRate;\r\n      const logGainFactorPerTick = Decimal.divide(getGameSpeedupForDisplay() * updateRateMs *\r\n        (Math.log(player.replicanti.chance + 1)), getReplicantiInterval());\r\n      const postScale = Math.log10(ReplicantiGrowth.scaleFactor) / ReplicantiGrowth.scaleLog10;\r\n      const nextMilestone = this.maxReplicanti;\r\n      const coeff = Decimal.divide(updateRateMs / 1000, logGainFactorPerTick.times(postScale));\r\n      return coeff.times(nextMilestone.divide(this.amount).pow(postScale).minus(1));\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-replicanti-tab\">\r\n    <br>\r\n    <PrimaryButton\r\n      v-if=\"!isUnlocked\"\r\n      :enabled=\"isUnlockAffordable\"\r\n      class=\"o-primary-btn--replicanti-unlock\"\r\n      onclick=\"Replicanti.unlock();\"\r\n    >\r\n      Unlock Replicanti\r\n      <br>\r\n      Cost: {{ format(unlockCost) }} IP\r\n    </PrimaryButton>\r\n    <template v-else>\r\n      <div\r\n        v-if=\"isDoomed\"\r\n        class=\"modified-cap\"\r\n      >\r\n        Your Replicanti cap has been removed due to the second {{ scrambledText }} milestone.\r\n      </div>\r\n      <div\r\n        v-else-if=\"hasRaisedCap\"\r\n        class=\"modified-cap\"\r\n      >\r\n        Completion of Effarig's Infinity is giving you the following rewards:\r\n        <br>\r\n        Your Replicanti cap without TS192 is now {{ format(replicantiCap, 2) }}\r\n        ({{ capMultText }})\r\n        <br>\r\n        {{ quantifyInt(\"extra Replicanti Galaxy\", effarigInfinityBonusRG) }}\r\n        (Next Replicanti Galaxy at {{ format(nextEffarigRGThreshold, 2) }} cap)\r\n      </div>\r\n      <p class=\"c-replicanti-description\">\r\n        You have\r\n        <span class=\"c-replicanti-description__accent\">{{ format(amount, 2, 0) }}</span>\r\n        Replicanti, translated to\r\n        <br>\r\n        <span v-html=\"boostText\" />\r\n      </p>\r\n      <div\r\n        v-if=\"hasMaxText\"\r\n        class=\"c-replicanti-description\"\r\n      >\r\n        Your maximum Replicanti reached this Reality is\r\n        <span\r\n          v-tooltip=\"toMaxTooltip\"\r\n          class=\"max-accent\"\r\n        >{{ format(maxReplicanti, 2) }}</span>.\r\n      </div>\r\n      <br>\r\n      <div v-if=\"isInEC8\">\r\n        You have {{ quantifyInt(\"purchase\", ec8Purchases) }} left within Eternity Challenge 8.\r\n      </div>\r\n      <div class=\"l-replicanti-upgrade-row\">\r\n        <ReplicantiUpgradeButton :setup=\"replicantiChanceSetup\" />\r\n        <ReplicantiUpgradeButton :setup=\"replicantiIntervalSetup\" />\r\n        <ReplicantiUpgradeButton :setup=\"maxGalaxySetup\" />\r\n      </div>\r\n      <div>\r\n        The Max Replicanti Galaxy upgrade can be purchased endlessly, but costs increase\r\n        <br>\r\n        more rapidly above {{ formatInt(distantRG) }} Replicanti Galaxies\r\n        and even more so above {{ formatInt(remoteRG) }} Replicanti Galaxies.\r\n      </div>\r\n      <br><br>\r\n      <ReplicantiGainText />\r\n      <br>\r\n      <ReplicantiGalaxyButton v-if=\"canSeeGalaxyButton\" />\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.max-accent {\r\n  color: var(--color-accent);\r\n  text-shadow: 0 0 0.2rem var(--color-reality-dark);\r\n  cursor: default;\r\n}\r\n\r\n.modified-cap {\r\n  margin: -0.8rem 0 0.8rem;\r\n  font-weight: bold;\r\n}\r\n</style>\r\n"]}]}