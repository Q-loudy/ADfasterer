{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\automator\\AutomatorControls.vue?vue&type=style&index=0&id=31cb654e&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\automator\\AutomatorControls.vue","mtime":1745241597064},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouYy1hdXRvbWF0b3ItY29udHJvbC1yb3cgew0KICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47DQp9DQoNCi5jLWJ1dHRvbi1ncm91cCB7DQogIGRpc3BsYXk6IGZsZXg7DQogIGZsZXgtZGlyZWN0aW9uOiByb3c7DQogIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQp9DQoNCi5jLWF1dG9tYXRvcl9fc3RhdHVzLXRleHQgew0KICBmb250LXNpemU6IDEuM3JlbTsNCiAgZm9udC13ZWlnaHQ6IGJvbGQ7DQogIGNvbG9yOiB2YXIoLS1jb2xvci1yZWFsaXR5KTsNCiAgcGFkZGluZzogMCAwLjVyZW07DQp9DQoNCi5jLWF1dG9tYXRvcl9fc3RhdHVzLXRleHQtLXNtYWxsIHsNCiAgZm9udC1zaXplOiAxLjFyZW07DQp9DQoNCi5jLWF1dG9tYXRvcl9fc3RhdHVzLXRleHQtLXdhcm5pbmcgew0KICBjb2xvcjogdmFyKC0tY29sb3ItZ29vZC1wYXVzZWQpOw0KfQ0KDQouYy1hdXRvbWF0b3JfX3N0YXR1cy10ZXh0LS1lcnJvciB7DQogIGNvbG9yOiB2YXIoLS1jb2xvci1iYWQpOw0KfQ0KDQouYy1hdXRvbWF0b3JfX2J1dHRvbi0tYWN0aXZlIHsNCiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3ItYXV0b21hdG9yLWNvbnRyb2xzLWFjdGl2ZSk7DQogIGJvcmRlci1jb2xvcjogdmFyKC0tY29sb3ItcmVhbGl0eS1saWdodCk7DQp9DQoNCi5jLWF1dG9tYXRvcl9fYnV0dG9uLS1pbmFjdGl2ZSB7DQogIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWNvbG9yLWF1dG9tYXRvci1jb250cm9scy1ib3JkZXIpOw0KICBib3JkZXItY29sb3I6IHZhcigtLWNvbG9yLXJlYWxpdHktbGlnaHQpOw0KfQ0KDQouYy1hdXRvbWF0b3JfX2J1dHRvbi5mYS1lamVjdDo6YmVmb3JlIHsNCiAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpOw0KfQ0K"},{"version":3,"sources":["AutomatorControls.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsNA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"AutomatorControls.vue","sourceRoot":"src/components/tabs/automator","sourcesContent":["<script>\r\nimport AutomatorButton from \"./AutomatorButton\";\r\nimport AutomatorModeSwitch from \"./AutomatorModeSwitch\";\r\n\r\nexport default {\r\n  name: \"AutomatorControls\",\r\n  components: {\r\n    AutomatorButton,\r\n    AutomatorModeSwitch\r\n  },\r\n  data() {\r\n    return {\r\n      isRunning: false,\r\n      isPaused: false,\r\n      repeatOn: false,\r\n      justCompleted: false,\r\n      forceRestartOn: false,\r\n      followExecution: false,\r\n      hasErrors: false,\r\n      currentLine: 0,\r\n      statusName: \"\",\r\n      editingName: \"\",\r\n      editingDifferentScript: false,\r\n      currentChars: 0,\r\n      hasUndo: false,\r\n      hasRedo: false,\r\n    };\r\n  },\r\n  computed: {\r\n    fullScreen() {\r\n      return this.$viewModel.tabs.reality.automator.fullScreen;\r\n    },\r\n    currentScriptID() {\r\n      return this.$viewModel.tabs.reality.automator.editorScriptID;\r\n    },\r\n    playTooltip() {\r\n      if (this.isPaused) return \"Resume Automator execution\";\r\n      if (!this.isRunning) return \"Start Automator\";\r\n      return \"Pause Automator execution\";\r\n    },\r\n    playButtonClass() {\r\n      return {\r\n        \"c-automator__button--active\": this.isRunning,\r\n        \"fa-play\": !this.isRunning && !this.isPaused,\r\n        \"fa-pause\": this.isRunning,\r\n        \"fa-eject\": this.isPaused\r\n      };\r\n    },\r\n    statusText() {\r\n      // Pad with leading zeroes based on script length to prevent text jitter on fast scripts. This technically fails\r\n      // for scripts with more than 99999 lines, but scripts that long will be prevented elsewhere\r\n      const digits = Math.clampMin(Math.ceil(Math.log10(AutomatorBackend.currentScriptLength + 1)), 1);\r\n      let lineNum = `0000${this.currentLine}`;\r\n      lineNum = lineNum.slice(lineNum.length - digits);\r\n\r\n      if (this.isPaused) return `Paused: \"${this.statusName}\" (Resumes on Line ${lineNum})`;\r\n      if (this.isRunning) return `Running: \"${this.statusName}\" (Line ${lineNum})`;\r\n      if (this.hasErrors) return `Stopped: \"${this.statusName}\" has errors (Cannot run)`;\r\n      return `Stopped: Will start running \"${this.statusName}\"`;\r\n    },\r\n    maxScriptChars() {\r\n      return AutomatorData.MAX_ALLOWED_SCRIPT_CHARACTERS;\r\n    },\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isRunning = AutomatorBackend.isRunning;\r\n      this.isPaused = AutomatorBackend.isOn && !this.isRunning;\r\n      this.repeatOn = AutomatorBackend.state.repeat;\r\n      this.justCompleted = AutomatorBackend.hasJustCompleted;\r\n      this.forceRestartOn = AutomatorBackend.state.forceRestart;\r\n      this.followExecution = AutomatorBackend.state.followExecution;\r\n      this.hasErrors = AutomatorData.currentErrors().length !== 0;\r\n      this.currentLine = AutomatorBackend.currentLineNumber;\r\n\r\n      // When the automator isn't running, the script name contains the last run script instead of the\r\n      // to-be-run script, which is the currently displayed one in the editor\r\n      this.statusName = (this.isPaused || this.isRunning)\r\n        ? AutomatorBackend.scriptName\r\n        : AutomatorBackend.currentEditingScript.name;\r\n      this.duplicateStatus = AutomatorBackend.hasDuplicateName(this.statusName);\r\n      this.editingDifferentScript = (this.isRunning || this.isPaused) &&\r\n        AutomatorBackend.currentEditingScript.id !== AutomatorBackend.currentRunningScript.id;\r\n\r\n      this.currentChars = AutomatorData.singleScriptCharacters();\r\n      this.hasUndo = AutomatorData.undoBuffer.length > 0;\r\n      this.hasRedo = AutomatorData.redoBuffer.length > 0;\r\n    },\r\n    rewind: () => AutomatorBackend.restart(),\r\n    play() {\r\n      if (this.hasErrors) {\r\n        // This shouldn't be needed but someone's save was still on MODE.RUN when the script had errors so this\r\n        // is just an additional layer of failsafe in case something goes wrong\r\n        AutomatorBackend.mode = AUTOMATOR_MODE.PAUSED;\r\n        return;\r\n      }\r\n      if (this.isRunning) {\r\n        AutomatorBackend.pause();\r\n        return;\r\n      }\r\n      if (player.reality.automator.type === AUTOMATOR_TYPE.BLOCK) this.$emit(\"automatorplay\");\r\n      if (AutomatorBackend.isOn) AutomatorBackend.mode = AUTOMATOR_MODE.RUN;\r\n      else AutomatorBackend.start(this.currentScriptID);\r\n    },\r\n    stop: () => AutomatorBackend.stop(),\r\n    step() {\r\n      if (AutomatorBackend.isOn) AutomatorBackend.mode = AUTOMATOR_MODE.SINGLE_STEP;\r\n      else AutomatorBackend.start(this.currentScriptID, AUTOMATOR_MODE.SINGLE_STEP);\r\n    },\r\n    repeat: () => AutomatorBackend.toggleRepeat(),\r\n    restart: () => AutomatorBackend.toggleForceRestart(),\r\n    follow: () => AutomatorBackend.toggleFollowExecution(),\r\n    undo: () => AutomatorData.undoScriptEdit(),\r\n    redo: () => AutomatorData.redoScriptEdit(),\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"c-automator__controls l-automator__controls\">\r\n    <div class=\"c-automator-control-row l-automator-button-row\">\r\n      <div class=\"c-button-group\">\r\n        <AutomatorButton\r\n          v-tooltip=\"'Rewind Automator to the first command'\"\r\n          class=\"fa-fast-backward\"\r\n          @click=\"rewind\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"{\r\n            content: playTooltip,\r\n            hideOnTargetClick: false\r\n          }\"\r\n          :class=\"playButtonClass\"\r\n          @click=\"play\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'Stop Automator and reset position'\"\r\n          class=\"fa-stop\"\r\n          @click=\"stop\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'Step forward one line'\"\r\n          class=\"fa-step-forward\"\r\n          @click=\"step\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'Restart script automatically when it reaches the end'\"\r\n          class=\"fa-sync-alt\"\r\n          :class=\"{ 'c-automator__button--active' : repeatOn }\"\r\n          @click=\"repeat\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'Automatically restart the active script when finishing or restarting a Reality'\"\r\n          class=\"fa-reply\"\r\n          :class=\"{ 'c-automator__button--active' : forceRestartOn }\"\r\n          @click=\"restart\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'Scroll Automator to follow current line'\"\r\n          class=\"fa-indent\"\r\n          :class=\"{ 'c-automator__button--active' : followExecution }\"\r\n          @click=\"follow\"\r\n        />\r\n        <span\r\n          v-if=\"fullScreen\"\r\n          class=\"c-automator__status-text c-automator__status-text--small\"\r\n          :class=\"{ 'c-automator__status-text--error' : currentChars > maxScriptChars }\"\r\n        >\r\n          This script: {{ formatInt(currentChars) }}/{{ formatInt(maxScriptChars) }}\r\n        </span>\r\n      </div>\r\n      <div class=\"c-button-group\">\r\n        <AutomatorButton\r\n          v-tooltip=\"'Undo'\"\r\n          class=\"fa-arrow-rotate-left\"\r\n          :class=\"{ 'c-automator__button--inactive' : !hasUndo }\"\r\n          @click=\"undo\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'Redo'\"\r\n          class=\"fa-arrow-rotate-right\"\r\n          :class=\"{ 'c-automator__button--inactive' : !hasRedo }\"\r\n          @click=\"redo\"\r\n        />\r\n        <AutomatorModeSwitch />\r\n      </div>\r\n    </div>\r\n    <div class=\"l-automator-button-row\">\r\n      <span\r\n        v-if=\"duplicateStatus\"\r\n        v-tooltip=\"'More than one script has this name!'\"\r\n        class=\"fas fa-exclamation-triangle c-automator__status-text c-automator__status-text--error\"\r\n      />\r\n      <span\r\n        v-if=\"editingDifferentScript\"\r\n        v-tooltip=\"'The automator is running a different script than the editor is showing'\"\r\n        class=\"fas fa-circle-exclamation c-automator__status-text c-automator__status-text--warning\"\r\n      />\r\n      <span\r\n        v-if=\"justCompleted\"\r\n        v-tooltip=\"'The automator completed running the previous script'\"\r\n        class=\"fas fa-circle-check c-automator__status-text\"\r\n      />\r\n      <span\r\n        class=\"c-automator__status-text\"\r\n        :class=\"{ 'c-automator__status-text--error' : hasErrors && !(isRunning || isPaused) }\"\r\n      >\r\n        {{ statusText }}\r\n      </span>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-automator-control-row {\r\n  justify-content: space-between;\r\n}\r\n\r\n.c-button-group {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n}\r\n\r\n.c-automator__status-text {\r\n  font-size: 1.3rem;\r\n  font-weight: bold;\r\n  color: var(--color-reality);\r\n  padding: 0 0.5rem;\r\n}\r\n\r\n.c-automator__status-text--small {\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.c-automator__status-text--warning {\r\n  color: var(--color-good-paused);\r\n}\r\n\r\n.c-automator__status-text--error {\r\n  color: var(--color-bad);\r\n}\r\n\r\n.c-automator__button--active {\r\n  background-color: var(--color-automator-controls-active);\r\n  border-color: var(--color-reality-light);\r\n}\r\n\r\n.c-automator__button--inactive {\r\n  background-color: var(--color-automator-controls-border);\r\n  border-color: var(--color-reality-light);\r\n}\r\n\r\n.c-automator__button.fa-eject::before {\r\n  transform: rotate(90deg);\r\n}\r\n</style>\r\n"]}]}