{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\automator\\AutomatorTextEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\automator\\AutomatorTextEditor.vue","mtime":1745241597091},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["AutomatorTextEditor.vue"],"names":[],"mappingsfile":"AutomatorTextEditor.vue","sourceRoot":"src/components/tabs/automator","sourcesContent":["<script>\r\nexport default {\r\n  name: \"AutomatorTextEditor\",\r\n  props: {\r\n    currentScriptId: {\r\n      type: [Number, String],\r\n      required: true\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      markedLineNumber: 0,\r\n      unclearedLines: false,\r\n      isActiveScript: false,\r\n    };\r\n  },\r\n  computed: {\r\n    UI() {\r\n      AutomatorTextUI.initialize();\r\n      return AutomatorTextUI;\r\n    },\r\n    fullScreen() {\r\n      return this.$viewModel.tabs.reality.automator.fullScreen;\r\n    },\r\n  },\r\n  watch: {\r\n    currentScriptId: {\r\n      handler(id, oldId) {\r\n        this.unmarkActiveLine();\r\n        const storedScripts = player.reality.automator.scripts;\r\n        if (!this.UI.documents[id] || this.UI.documents[id].getValue() !== storedScripts[id].content) {\r\n          this.UI.documents[id] = CodeMirror.Doc(storedScripts[id].content, \"automato\");\r\n        }\r\n        if (this.UI.editor.getDoc() !== this.UI.documents[id]) this.UI.editor.swapDoc(this.UI.documents[id]);\r\n        // When a script gets deleted, get rid of the old document object\r\n        if (this.UI.documents[oldId] !== undefined && storedScripts[oldId] === undefined) {\r\n          delete this.UI.documents[oldId];\r\n        }\r\n      },\r\n      immediate: true,\r\n    },\r\n    fullScreen() {\r\n      this.$nextTick(() => this.UI.editor.refresh());\r\n    }\r\n  },\r\n  created() {\r\n    AutomatorTextUI.initialize();\r\n    this.on$(GAME_EVENT.GAME_LOAD, () => this.onGameLoad());\r\n    this.on$(GAME_EVENT.AUTOMATOR_SAVE_CHANGED, () => this.onGameLoad());\r\n  },\r\n  mounted() {\r\n    this.$refs.container.appendChild(this.UI.container);\r\n    this.$nextTick(() => {\r\n      this.UI.editor.refresh();\r\n      this.UI.editor.performLint();\r\n      this.UI.editor.scrollTo(null, AutomatorTextUI.savedVertPos);\r\n    });\r\n  },\r\n  beforeDestroy() {\r\n    // This will stick around, otherwise\r\n    AutomatorHighlighter.clearAllHighlightedLines();\r\n    AutomatorTextUI.savedVertPos = AutomatorTextUI.editor.doc.scrollTop;\r\n    this.$refs.container.removeChild(this.UI.container);\r\n  },\r\n  methods: {\r\n    update() {\r\n      AutomatorBackend.jumpToActiveLine();\r\n      if (this.unclearedLines && !AutomatorBackend.isOn) this.clearAllActiveLines();\r\n      if (AutomatorBackend.isOn) {\r\n        this.setActiveState(`${AutomatorBackend.state.topLevelScript}`, AutomatorBackend.stack.top.lineNumber);\r\n      } else {\r\n        this.setActiveState(\"\", -1);\r\n      }\r\n    },\r\n    onGameLoad() {\r\n      this.UI.documents = {};\r\n    },\r\n    unmarkActiveLine() {\r\n      AutomatorHighlighter.updateHighlightedLine(-1, LineEnum.Active);\r\n    },\r\n    markActiveLine(lineNumber) {\r\n      AutomatorHighlighter.updateHighlightedLine(lineNumber, LineEnum.Active);\r\n      this.unclearedLines = true;\r\n    },\r\n    // This only runs when a script is interrupted and stops during execution because of the player editing the text\r\n    clearAllActiveLines() {\r\n      AutomatorHighlighter.clearAllHighlightedLines();\r\n      this.unclearedLines = false;\r\n    },\r\n    setActiveState(scriptID, lineNumber) {\r\n      if (`${this.currentScriptId}` === scriptID) this.markActiveLine(lineNumber);\r\n      else this.unmarkActiveLine();\r\n    },\r\n  }\r\n};\r\n\r\nexport const AutomatorTextUI = {\r\n  documents: {},\r\n  wrapper: null,\r\n  editor: null,\r\n  container: null,\r\n  textArea: null,\r\n  mode: {\r\n    mode: \"automato\",\r\n    lint: \"automato\",\r\n    lineNumbers: true,\r\n    theme: \"liquibyte\",\r\n    tabSize: 2,\r\n    extraKeys: {\r\n      Tab: cm => cm.execCommand(\"indentMore\"),\r\n      \"Shift-Tab\": cm => cm.execCommand(\"indentLess\"),\r\n    },\r\n    autoCloseBrackets: true,\r\n    lineWrapping: true\r\n  },\r\n  initialize() {\r\n    if (this.container) return;\r\n    this.setUpContainer();\r\n    this.setUpEditor();\r\n    EventHub.ui.on(GAME_EVENT.GAME_LOAD, () => this.documents = {});\r\n  },\r\n  setUpContainer() {\r\n    this.container = document.createElement(\"div\");\r\n    this.container.className = \"l-automator-editor__codemirror-container\";\r\n    this.textArea = document.createElement(\"textarea\");\r\n    this.container.appendChild(this.textArea);\r\n  },\r\n  setUpEditor() {\r\n    this.editor = CodeMirror.fromTextArea(this.textArea, this.mode);\r\n    // CodeMirror has a built-in undo/redo functionality bound to ctrl-z/ctrl-y which doesn't have an\r\n    // easily-configured history buffer; we need to specifically cancel this event since we have our own undo\r\n    this.editor.on(\"beforeChange\", (_, event) => {\r\n      if (event.origin === \"undo\") event.cancel();\r\n    });\r\n    this.editor.on(\"keydown\", (editor, event) => {\r\n      const key = event.key;\r\n      if (event.ctrlKey && [\"z\", \"y\"].includes(key)) {\r\n        if (key === \"z\") AutomatorData.undoScriptEdit();\r\n        if (key === \"y\") AutomatorData.redoScriptEdit();\r\n        return;\r\n      }\r\n      // This check is related to the drop-down command suggestion menu, but must come after the undo/redo check\r\n      // as it often evaluates to innocuous false positives which eat the keybinds\r\n      if (editor.state.completionActive) return;\r\n      if (event.ctrlKey || event.altKey || event.metaKey || !/^[a-zA-Z0-9 \\t]$/u.test(key)) return;\r\n      CodeMirror.commands.autocomplete(editor, null, { completeSingle: false });\r\n    });\r\n    this.editor.on(\"change\", (editor, event) => {\r\n      const scriptID = ui.view.tabs.reality.automator.editorScriptID;\r\n      const scriptText = editor.getDoc().getValue();\r\n      // Undo/redo directly changes the editor contents, which also causes this event to be fired; we have a few\r\n      // things which we specifically only want to do on manual typing changes\r\n      if (event.origin !== \"setValue\") {\r\n        AutomatorBackend.saveScript(scriptID, scriptText);\r\n        AutomatorData.redoBuffer = [];\r\n      }\r\n\r\n      AutomatorData.recalculateErrors();\r\n      const errors = AutomatorData.currentErrors().length;\r\n      if (errors > editor.doc.size) SecretAchievement(48).unlock();\r\n\r\n      // Clear all line highlighting as soon as any text is changed because that might have shifted lines around\r\n      AutomatorHighlighter.clearAllHighlightedLines();\r\n    });\r\n  },\r\n  clearEditor() {\r\n    // In some importing cases (mostly when importing a save without the automator unlocked), the editor doesn't exist\r\n    // and attempting to modify it will cause console errors; in this case we initialize it to a blank editor (even\r\n    // though its inaccessible) in order to prevent errors on-load and when first checking that subtab\r\n    if (!this.editor) {\r\n      this.setUpContainer();\r\n      this.setUpEditor();\r\n    }\r\n    this.editor.setValue(\"\");\r\n    this.editor.clearHistory();\r\n    this.editor.clearGutter(\"gutterId\");\r\n  },\r\n  // Used to return back to the same line the editor was on from before switching tabs\r\n  savedVertPos: 0,\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    ref=\"container\"\r\n    class=\"c-automator-editor l-automator-editor l-automator-pane__content\"\r\n  />\r\n</template>\r\n"]}]}