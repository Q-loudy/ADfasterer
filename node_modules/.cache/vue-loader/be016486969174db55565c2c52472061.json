{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\autobuyers\\AutobuyerInput.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\autobuyers\\AutobuyerInput.vue","mtime":1745241597029},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpleHBvcnQgZGVmYXVsdCB7DQogIG5hbWU6ICJBdXRvYnV5ZXJJbnB1dCIsDQogIHByb3BzOiB7DQogICAgYXV0b2J1eWVyOiB7DQogICAgICB0eXBlOiBPYmplY3QsDQogICAgICByZXF1aXJlZDogdHJ1ZQ0KICAgIH0sDQogICAgcHJvcGVydHk6IHsNCiAgICAgIHR5cGU6IFN0cmluZywNCiAgICAgIHJlcXVpcmVkOiB0cnVlDQogICAgfSwNCiAgICB0eXBlOiB7DQogICAgICB0eXBlOiBTdHJpbmcsDQogICAgICByZXF1aXJlZDogdHJ1ZQ0KICAgIH0NCiAgfSwNCiAgZGF0YSgpIHsNCiAgICByZXR1cm4gew0KICAgICAgaXNWYWxpZDogdHJ1ZSwNCiAgICAgIGlzRm9jdXNlZDogZmFsc2UsDQogICAgICBkaXNwbGF5VmFsdWU6ICIwIg0KICAgIH07DQogIH0sDQogIGNvbXB1dGVkOiB7DQogICAgaW5wdXRUeXBlKCkgew0KICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gImludCIgPyAibnVtYmVyIiA6ICJ0ZXh0IjsNCiAgICB9LA0KICAgIHR5cGVGdW5jdGlvbnMoKSB7DQogICAgICBjb25zdCBmdW5jdGlvbnMgPSBBdXRvYnV5ZXJJbnB1dEZ1bmN0aW9uc1t0aGlzLnR5cGVdOw0KICAgICAgaWYgKGZ1bmN0aW9ucyA9PT0gdW5kZWZpbmVkKSB7DQogICAgICAgIHRocm93IG5ldyBFcnJvcigiVW5rbm93biBhdXRvYnV5ZXIgaW5wdXQgdHlwZSIpOw0KICAgICAgfQ0KICAgICAgcmV0dXJuIGZ1bmN0aW9uczsNCiAgICB9LA0KICAgIHZhbGlkaXR5Q2xhc3MoKSB7DQogICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdW5kZWZpbmVkIDogIm8tYXV0b2J1eWVyLWlucHV0LS1pbnZhbGlkIjsNCiAgICB9DQogIH0sDQogIG1ldGhvZHM6IHsNCiAgICB1cGRhdGUoKSB7DQogICAgICBpZiAodGhpcy5pc0ZvY3VzZWQpIHJldHVybjsNCiAgICAgIHRoaXMudXBkYXRlQWN0dWFsVmFsdWUoKTsNCiAgICB9LA0KICAgIHVwZGF0ZUFjdHVhbFZhbHVlKCkgew0KICAgICAgY29uc3QgYWN0dWFsVmFsdWUgPSB0aGlzLmF1dG9idXllclt0aGlzLnByb3BlcnR5XTsNCiAgICAgIGlmICh0aGlzLmFyZUVxdWFsKHRoaXMuYWN0dWFsVmFsdWUsIGFjdHVhbFZhbHVlKSkgcmV0dXJuOw0KICAgICAgdGhpcy5hY3R1YWxWYWx1ZSA9IHRoaXMudHlwZUZ1bmN0aW9ucy5jb3B5VmFsdWUoYWN0dWFsVmFsdWUpOw0KICAgICAgdGhpcy51cGRhdGVEaXNwbGF5VmFsdWUoKTsNCiAgICB9LA0KICAgIGFyZUVxdWFsKHZhbHVlLCBvdGhlcikgew0KICAgICAgaWYgKG90aGVyID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlOw0KICAgICAgcmV0dXJuIHRoaXMudHlwZUZ1bmN0aW9ucy5hcmVFcXVhbCh2YWx1ZSwgb3RoZXIpOw0KICAgIH0sDQogICAgdXBkYXRlRGlzcGxheVZhbHVlKCkgew0KICAgICAgdGhpcy5kaXNwbGF5VmFsdWUgPSB0aGlzLnR5cGVGdW5jdGlvbnMuZm9ybWF0VmFsdWUodGhpcy5hY3R1YWxWYWx1ZSk7DQogICAgfSwNCiAgICBoYW5kbGVJbnB1dChldmVudCkgew0KICAgICAgY29uc3QgaW5wdXQgPSBldmVudC50YXJnZXQudmFsdWU7DQogICAgICB0aGlzLmRpc3BsYXlWYWx1ZSA9IGlucHV0Ow0KICAgICAgaWYgKGlucHV0Lmxlbmd0aCA9PT0gMCkgew0KICAgICAgICB0aGlzLmlzVmFsaWQgPSBmYWxzZTsNCiAgICAgICAgcmV0dXJuOw0KICAgICAgfQ0KICAgICAgY29uc3QgcGFyc2VkVmFsdWUgPSB0aGlzLnR5cGVGdW5jdGlvbnMudHJ5UGFyc2UoaW5wdXQpOw0KICAgICAgdGhpcy5pc1ZhbGlkID0gcGFyc2VkVmFsdWUgIT09IHVuZGVmaW5lZDsNCiAgICAgIHRoaXMuYWN0dWFsVmFsdWUgPSB0aGlzLnR5cGVGdW5jdGlvbnMuY29weVZhbHVlKHBhcnNlZFZhbHVlKTsNCiAgICB9LA0KICAgIGhhbmRsZUZvY3VzKCkgew0KICAgICAgdGhpcy5pc0ZvY3VzZWQgPSB0cnVlOw0KICAgIH0sDQogICAgaGFuZGxlQ2hhbmdlKGV2ZW50KSB7DQogICAgICBpZiAodGhpcy5kaXNwbGF5VmFsdWUgPT09ICI2OSIpIHsNCiAgICAgICAgU2VjcmV0QWNoaWV2ZW1lbnQoMjgpLnVubG9jaygpOw0KICAgICAgfQ0KICAgICAgaWYgKHRoaXMuaXNWYWxpZCkgew0KICAgICAgICB0aGlzLmF1dG9idXllclt0aGlzLnByb3BlcnR5XSA9IHRoaXMudHlwZUZ1bmN0aW9ucy5jb3B5VmFsdWUodGhpcy5hY3R1YWxWYWx1ZSk7DQogICAgICB9IGVsc2Ugew0KICAgICAgICB0aGlzLnVwZGF0ZUFjdHVhbFZhbHVlKCk7DQogICAgICB9DQogICAgICB0aGlzLnVwZGF0ZURpc3BsYXlWYWx1ZSgpOw0KICAgICAgdGhpcy5pc1ZhbGlkID0gdHJ1ZTsNCg0KICAgICAgdGhpcy5pc0ZvY3VzZWQgPSBmYWxzZTsNCiAgICAgIGV2ZW50LnRhcmdldC5ibHVyKCk7DQogICAgfSwNCiAgfQ0KfTsNCg0KZXhwb3J0IGNvbnN0IEF1dG9idXllcklucHV0RnVuY3Rpb25zID0gew0KICBkZWNpbWFsOiB7DQogICAgYXJlRXF1YWw6ICh2YWx1ZSwgb3RoZXIpID0+IERlY2ltYWwuZXEodmFsdWUsIG90aGVyKSwNCiAgICBmb3JtYXRWYWx1ZTogdmFsdWUgPT4gTm90YXRpb24uc2NpZW50aWZpYy5mb3JtYXQodmFsdWUsIDIsIDIpLA0KICAgIGNvcHlWYWx1ZTogdmFsdWUgPT4gbmV3IERlY2ltYWwodmFsdWUpLA0KICAgIHRyeVBhcnNlOiBpbnB1dCA9PiB7DQogICAgICBpZiAoIWlucHV0KSByZXR1cm4gdW5kZWZpbmVkOw0KICAgICAgdHJ5IHsNCiAgICAgICAgbGV0IGRlY2ltYWw7DQogICAgICAgIGlmICgvXmVcZCpbLl0/XGQrJC91LnRlc3QoaW5wdXQucmVwbGFjZUFsbCgiLCIsICIiKSkpIHsNCiAgICAgICAgICAvLyBMb2dhcml0aG0gTm90YXRpb24NCiAgICAgICAgICBkZWNpbWFsID0gRGVjaW1hbC5wb3cxMChwYXJzZUZsb2F0KGlucHV0LnJlcGxhY2VBbGwoIiwiLCAiIikuc2xpY2UoMSkpKTsNCiAgICAgICAgfSBlbHNlIGlmICgvXlxkKlsuXT9cZCsoZVxkKyk/JC91LnRlc3QoaW5wdXQucmVwbGFjZUFsbCgiLCIsICIiKSkpIHsNCiAgICAgICAgICAvLyBTY2llbnRpZmljIG5vdGF0aW9uOyBpbnRlcm5hbHMgb2YgYnJlYWstaW5maW5pdHkgd2lsbCBnbGFkbHkgc3RyaXAgZXh0cmFuZW91cyBsZXR0ZXJzIGJlZm9yZSBwYXJzaW5nLCBidXQNCiAgICAgICAgICAvLyBzaW5jZSB0aGlzIGlzIGxhcmdlbHkgdW5jb21tdW5pY2F0ZWQgdG8gdGhlIHVzZXIsIHdlIGluc3RlYWQgZXhwbGljaXRseSBjaGVjayBmb3IgZm9ybWF0dGluZyBhbmQgcmVqZWN0DQogICAgICAgICAgLy8gYW55dGhpbmcgdGhhdCBkb2Vzbid0IGZpdCBhcyBpbnZhbGlkDQogICAgICAgICAgZGVjaW1hbCA9IERlY2ltYWwuZnJvbVN0cmluZyhpbnB1dC5yZXBsYWNlQWxsKCIsIiwgIiIpKTsNCiAgICAgICAgfSBlbHNlIGlmICgvXlxkKlsuXT9cZCsoZVxkKlsuXT9cZCspPyQvdS50ZXN0KGlucHV0LnJlcGxhY2VBbGwoIiwiLCAiIikpKSB7DQogICAgICAgICAgLy8gIk1peGVkIHNjaWVudGlmaWMgbm90YXRpb24iIC0gaW5wdXRzIHN1Y2ggYXMgIjIuMzNlNDEuMiIgY2F1c2UgYnVnZ3kgYmVoYXZpb3Igd2hlbiBmZWQgZGlyZWN0bHkgaW50bw0KICAgICAgICAgIC8vIERlY2ltYWwuZnJvbVN0cmluZywgc28gd2UgcGFyc2Ugb3V0IHRoZSBtYW50aXNzYSBhbmQgZXhwb25lbnQgc2VwYXJhdGVseSBiZWZvcmUgY29tYmluaW5nIHRoZW0NCiAgICAgICAgICBjb25zdCByZWdleCA9IC8oPzxtYW50aXNzYT5cZCpbLl0/XGQrKWUoPzxleHBvbmVudD5cZCpbLl0/XGQrKS91Ow0KICAgICAgICAgIGNvbnN0IG1hdGNoID0gaW5wdXQucmVwbGFjZUFsbCgiLCIsICIiKS5tYXRjaChyZWdleCk7DQogICAgICAgICAgZGVjaW1hbCA9IERlY2ltYWwucG93MTAoTWF0aC5sb2cxMChOdW1iZXIobWF0Y2guZ3JvdXBzLm1hbnRpc3NhKSkgKyBOdW1iZXIobWF0Y2guZ3JvdXBzLmV4cG9uZW50KSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gaXNOYU4oZGVjaW1hbC5tYW50aXNzYSkgfHwgaXNOYU4oZGVjaW1hbC5leHBvbmVudCkgPyB1bmRlZmluZWQgOiBkZWNpbWFsOw0KICAgICAgfSBjYXRjaCAoZSkgew0KICAgICAgICByZXR1cm4gdW5kZWZpbmVkOw0KICAgICAgfQ0KICAgIH0NCiAgfSwNCiAgZmxvYXQ6IHsNCiAgICBhcmVFcXVhbDogKHZhbHVlLCBvdGhlcikgPT4gdmFsdWUgPT09IG90aGVyLA0KICAgIGZvcm1hdFZhbHVlOiB2YWx1ZSA9PiB2YWx1ZS50b1N0cmluZygpLA0KICAgIGNvcHlWYWx1ZTogdmFsdWUgPT4gdmFsdWUsDQogICAgdHJ5UGFyc2U6IGlucHV0ID0+IHsNCiAgICAgIGNvbnN0IGZsb2F0ID0gcGFyc2VGbG9hdChpbnB1dCk7DQogICAgICByZXR1cm4gaXNOYU4oZmxvYXQpID8gdW5kZWZpbmVkIDogZmxvYXQ7DQogICAgfQ0KICB9LA0KICBpbnQ6IHsNCiAgICBhcmVFcXVhbDogKHZhbHVlLCBvdGhlcikgPT4gdmFsdWUgPT09IG90aGVyLA0KICAgIGZvcm1hdFZhbHVlOiB2YWx1ZSA9PiB2YWx1ZS50b1N0cmluZygpLA0KICAgIGNvcHlWYWx1ZTogdmFsdWUgPT4gdmFsdWUsDQogICAgdHJ5UGFyc2U6IGlucHV0ID0+IHsNCiAgICAgIGlmICghaW5wdXQpIHJldHVybiB1bmRlZmluZWQ7DQogICAgICAvLyBXZSBleHBsaWNpdGx5IGNoZWNrIGZvcm1hdHRpbmcgaGVyZSBpbnN0ZWFkIG9mIGxldHRpbmcgcGFyc2VJbnQgaGFuZGxlIHRoZSB3aG9sZSB0aGluZyBiZWNhdXNlIG90aGVyd2lzZSB0aGUNCiAgICAgIC8vIGZhY3QgdGhhdCBwYXJzZUludCByZW1vdmVzIGV4dHJhbmVvdXMgbGV0dGVycyBtZWFucyBqdW5rIGxpa2UgIjM2MWVicXYzIiByZWdpc3RlcnMgYXMgdmFsaWQgYW5kIHBhcnNlcyBhcyAzNjENCiAgICAgIGlmICghL15cZCskL3UudGVzdChpbnB1dC5yZXBsYWNlQWxsKCIsIiwgIiIpKSkgcmV0dXJuIHVuZGVmaW5lZDsNCiAgICAgIGNvbnN0IGludCA9IHBhcnNlSW50KGlucHV0LCAxMCk7DQogICAgICByZXR1cm4gaXNOYU4oaW50KSB8fCAhTnVtYmVyLmlzSW50ZWdlcihpbnQpID8gdW5kZWZpbmVkIDogaW50Ow0KICAgIH0NCiAgfQ0KfTsNCg=="},{"version":3,"sources":["AutobuyerInput.vue"],"names":[],"mappingsfile":"AutobuyerInput.vue","sourceRoot":"src/components/tabs/autobuyers","sourcesContent":["<script>\r\nexport default {\r\n  name: \"AutobuyerInput\",\r\n  props: {\r\n    autobuyer: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    property: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    type: {\r\n      type: String,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isValid: true,\r\n      isFocused: false,\r\n      displayValue: \"0\"\r\n    };\r\n  },\r\n  computed: {\r\n    inputType() {\r\n      return this.type === \"int\" ? \"number\" : \"text\";\r\n    },\r\n    typeFunctions() {\r\n      const functions = AutobuyerInputFunctions[this.type];\r\n      if (functions === undefined) {\r\n        throw new Error(\"Unknown autobuyer input type\");\r\n      }\r\n      return functions;\r\n    },\r\n    validityClass() {\r\n      return this.isValid ? undefined : \"o-autobuyer-input--invalid\";\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      if (this.isFocused) return;\r\n      this.updateActualValue();\r\n    },\r\n    updateActualValue() {\r\n      const actualValue = this.autobuyer[this.property];\r\n      if (this.areEqual(this.actualValue, actualValue)) return;\r\n      this.actualValue = this.typeFunctions.copyValue(actualValue);\r\n      this.updateDisplayValue();\r\n    },\r\n    areEqual(value, other) {\r\n      if (other === undefined || value === undefined) return false;\r\n      return this.typeFunctions.areEqual(value, other);\r\n    },\r\n    updateDisplayValue() {\r\n      this.displayValue = this.typeFunctions.formatValue(this.actualValue);\r\n    },\r\n    handleInput(event) {\r\n      const input = event.target.value;\r\n      this.displayValue = input;\r\n      if (input.length === 0) {\r\n        this.isValid = false;\r\n        return;\r\n      }\r\n      const parsedValue = this.typeFunctions.tryParse(input);\r\n      this.isValid = parsedValue !== undefined;\r\n      this.actualValue = this.typeFunctions.copyValue(parsedValue);\r\n    },\r\n    handleFocus() {\r\n      this.isFocused = true;\r\n    },\r\n    handleChange(event) {\r\n      if (this.displayValue === \"69\") {\r\n        SecretAchievement(28).unlock();\r\n      }\r\n      if (this.isValid) {\r\n        this.autobuyer[this.property] = this.typeFunctions.copyValue(this.actualValue);\r\n      } else {\r\n        this.updateActualValue();\r\n      }\r\n      this.updateDisplayValue();\r\n      this.isValid = true;\r\n\r\n      this.isFocused = false;\r\n      event.target.blur();\r\n    },\r\n  }\r\n};\r\n\r\nexport const AutobuyerInputFunctions = {\r\n  decimal: {\r\n    areEqual: (value, other) => Decimal.eq(value, other),\r\n    formatValue: value => Notation.scientific.format(value, 2, 2),\r\n    copyValue: value => new Decimal(value),\r\n    tryParse: input => {\r\n      if (!input) return undefined;\r\n      try {\r\n        let decimal;\r\n        if (/^e\\d*[.]?\\d+$/u.test(input.replaceAll(\",\", \"\"))) {\r\n          // Logarithm Notation\r\n          decimal = Decimal.pow10(parseFloat(input.replaceAll(\",\", \"\").slice(1)));\r\n        } else if (/^\\d*[.]?\\d+(e\\d+)?$/u.test(input.replaceAll(\",\", \"\"))) {\r\n          // Scientific notation; internals of break-infinity will gladly strip extraneous letters before parsing, but\r\n          // since this is largely uncommunicated to the user, we instead explicitly check for formatting and reject\r\n          // anything that doesn't fit as invalid\r\n          decimal = Decimal.fromString(input.replaceAll(\",\", \"\"));\r\n        } else if (/^\\d*[.]?\\d+(e\\d*[.]?\\d+)?$/u.test(input.replaceAll(\",\", \"\"))) {\r\n          // \"Mixed scientific notation\" - inputs such as \"2.33e41.2\" cause buggy behavior when fed directly into\r\n          // Decimal.fromString, so we parse out the mantissa and exponent separately before combining them\r\n          const regex = /(?<mantissa>\\d*[.]?\\d+)e(?<exponent>\\d*[.]?\\d+)/u;\r\n          const match = input.replaceAll(\",\", \"\").match(regex);\r\n          decimal = Decimal.pow10(Math.log10(Number(match.groups.mantissa)) + Number(match.groups.exponent));\r\n        } else {\r\n          return undefined;\r\n        }\r\n        return isNaN(decimal.mantissa) || isNaN(decimal.exponent) ? undefined : decimal;\r\n      } catch (e) {\r\n        return undefined;\r\n      }\r\n    }\r\n  },\r\n  float: {\r\n    areEqual: (value, other) => value === other,\r\n    formatValue: value => value.toString(),\r\n    copyValue: value => value,\r\n    tryParse: input => {\r\n      const float = parseFloat(input);\r\n      return isNaN(float) ? undefined : float;\r\n    }\r\n  },\r\n  int: {\r\n    areEqual: (value, other) => value === other,\r\n    formatValue: value => value.toString(),\r\n    copyValue: value => value,\r\n    tryParse: input => {\r\n      if (!input) return undefined;\r\n      // We explicitly check formatting here instead of letting parseInt handle the whole thing because otherwise the\r\n      // fact that parseInt removes extraneous letters means junk like \"361ebqv3\" registers as valid and parses as 361\r\n      if (!/^\\d+$/u.test(input.replaceAll(\",\", \"\"))) return undefined;\r\n      const int = parseInt(input, 10);\r\n      return isNaN(int) || !Number.isInteger(int) ? undefined : int;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <input\r\n    :value=\"displayValue\"\r\n    :class=\"validityClass\"\r\n    :type=\"inputType\"\r\n    class=\"o-autobuyer-input\"\r\n    @change=\"handleChange\"\r\n    @focus=\"handleFocus\"\r\n    @input=\"handleInput\"\r\n  >\r\n</template>\r\n\r\n<style scoped>\r\n.o-autobuyer-input--invalid {\r\n  background-color: var(--color-bad);\r\n}\r\n\r\n.s-base--dark .o-autobuyer-input--invalid,\r\n.t-s1 .o-autobuyer-input--invalid {\r\n  background-color: var(--color-bad);\r\n}\r\n</style>\r\n"]}]}