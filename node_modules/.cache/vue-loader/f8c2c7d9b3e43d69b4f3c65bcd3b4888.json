{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\automator\\AutomatorBlocks.vue?vue&type=style&index=0&id=f58e77c4&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\automator\\AutomatorBlocks.vue","mtime":1745241597062},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5ibG9jay1jb250YWluZXIgew0KICBkaXNwbGF5OiBmbGV4Ow0KICBmbGV4LXdyYXA6IHdyYXA7DQogIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogIG1hcmdpbjogMXJlbSAwOw0KfQ0KDQouby1hdXRvbWF0b3ItYmxvY2stbGlzdCB7DQogIGRpc3BsYXk6IGZsZXg7DQogIHdpZHRoOiA4LjdyZW07DQogIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgaGVpZ2h0OiA1LjVyZW07DQogIGZvbnQtc2l6ZTogMS4ycmVtOw0KICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCn0NCg0KLm8tZHJhZy1jYW5jZWwtcmVnaW9uIHsNCiAgd2lkdGg6IDEwMCU7DQogIGhlaWdodDogMTAwJTsNCn0NCg0KLm51bGwtYmxvY2sgew0KICBkaXNwbGF5OiBub25lOw0KICB2aXNpYmlsaXR5OiBoaWRkZW47DQp9DQo="},{"version":3,"sources":["AutomatorBlocks.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6OA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"AutomatorBlocks.vue","sourceRoot":"src/components/tabs/automator","sourcesContent":["<script>\r\nimport draggable from \"vuedraggable\";\r\n\r\nexport default {\r\n  name: \"AutomatorBlocks\",\r\n  components: {\r\n    draggable\r\n  },\r\n  data() {\r\n    return {\r\n      allBlocks: automatorBlocks.filter(b => !AUTOMATOR_BLOCKS_BLACKLIST.includes(b.cmd)),\r\n      blocks: []\r\n    };\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.blocks = this.allBlocks.filter(b => (b.isUnlocked?.() ?? true));\r\n    },\r\n    clone(block) {\r\n      const b = {\r\n        ...block,\r\n        id: UIID.next()\r\n      };\r\n\r\n      if (block.nested && !block.nest) b.nest = [];\r\n      AutomatorData.recalculateErrors();\r\n      return b;\r\n    },\r\n  }\r\n};\r\n\r\nconst AUTOMATOR_BLOCKS_COMPARISON_OPERATORS = [\"<\", \">\", \">=\", \"<=\"];\r\nconst AUTOMATOR_BLOCKS_COMPARISON_CURRENCIES = [\r\n  \"AM\", \"IP\", \"EP\", \"RM\", \"INFINITIES\", \"BANKED INFINITIES\", \"ETERNITIES\", \"REALITIES\",\r\n  \"PENDING IP\", \"PENDING EP\", \"PENDING TP\", \"PENDING RM\", \"PENDING GLYPH LEVEL\",\r\n  \"DT\", \"TP\", \"RG\", \"REP\", \"TT\", \"TOTAL TT\", \"TOTAL COMPLETIONS\", \"PENDING COMPLETIONS\",\r\n  \"EC1 COMPLETIONS\", \"EC2 COMPLETIONS\", \"EC3 COMPLETIONS\", \"EC4 COMPLETIONS\",\r\n  \"EC5 COMPLETIONS\", \"EC6 COMPLETIONS\", \"EC7 COMPLETIONS\", \"EC8 COMPLETIONS\",\r\n  \"EC9 COMPLETIONS\", \"EC10 COMPLETIONS\", \"EC11 COMPLETIONS\", \"EC12 COMPLETIONS\",\r\n];\r\n\r\nconst AUTOMATOR_BLOCKS_RESETS = [\"INFINITY\", \"ETERNITY\", \"REALITY\"];\r\n\r\n/**\r\n *  @property {String} cmd          Name of automator command\r\n *  @property {String} alias        Displayed name of automator command, acting as a more natural-sounding variant. Uses\r\n *    cmd if undefined.\r\n *  @property {Array: String} allowedPatterns   Allowed patterns for input types, specified single-capital-letter props\r\n *  @property {Array: String} [A-Z]             Classes of allowed inputs, to be used in allowedPatterns. Note that\r\n *    elements which begin with an asterisk are replaced with text inputs upon selection, and single-entry classes will\r\n *    be automatically replaced with a text input or unmodifiable text as appropriate\r\n *  @property {Array: String} targets           List of keys to be used for assigning inputs to props of automator\r\n *    commands. Each entry is associated with the index of the character in allowedPatterns\r\n *  @property {Boolean} nested      Whether or not the command is the header of a loop in the automator\r\n *  @property {Boolean} canWait     Whether or not the command can be run in a non-blocking way\r\n *  @property {Boolean} canRespec   Whether or not the command has an associated respec option\r\n *  @property {Function @return Boolean} isUnlocked    Function returning the unlock state of the command; if false,\r\n *    the command will not appear. Assumed to be true if prop is not present\r\n */\r\nexport const automatorBlocks = [\r\n  {\r\n    cmd: \"STUDIES RESPEC\",\r\n    alias: \"RESPEC TIME STUDIES\"\r\n  }, {\r\n    cmd: \"STUDIES LOAD\",\r\n    alias: \"LOAD STUDY PRESET\",\r\n    allowedPatterns: [\"AB\"],\r\n    A: [\"ID\", \"NAME\"],\r\n    B: [\"*\"],\r\n    targets: [\"singleSelectionInput\", \"singleTextInput\"],\r\n    canWait: true\r\n  }, {\r\n    cmd: \"STUDIES PURCHASE\",\r\n    alias: \"PURCHASE STUDIES\",\r\n    allowedPatterns: [\"A\"],\r\n    A: [\"*\"],\r\n    targets: [\"singleTextInput\"],\r\n    canWait: true\r\n  }, {\r\n    cmd: \"INFINITY\",\r\n    canWait: true\r\n  }, {\r\n    cmd: \"ETERNITY\",\r\n    canRespec: true,\r\n    canWait: true\r\n  }, {\r\n    cmd: \"REALITY\",\r\n    canRespec: true,\r\n    canWait: true,\r\n    isUnlocked: () => RealityUpgrade(25).isBought\r\n  }, {\r\n    cmd: \"UNLOCK\",\r\n    allowedPatterns: [\"AB\", \"C\"],\r\n    A: [\"EC\"],\r\n    B: [\"*\"],\r\n    C: [\"DILATION\"],\r\n    targets: [\"singleSelectionInput\", \"singleTextInput\"],\r\n    canWait: true\r\n  }, {\r\n    cmd: \"START\",\r\n    allowedPatterns: [\"AB\", \"C\"],\r\n    A: [\"EC\"],\r\n    B: [\"*\"],\r\n    C: [\"DILATION\"],\r\n    targets: [\"singleSelectionInput\", \"singleTextInput\"],\r\n  }, {\r\n    cmd: \"AUTO\",\r\n    alias: \"CHANGE AUTOBUYER SETTING\",\r\n    allowedPatterns: [\"AB\"],\r\n    A: AUTOMATOR_BLOCKS_RESETS,\r\n    B: [\"ON\", \"OFF\", \"* AUTOBUYER SETTING\"],\r\n    targets: [\"singleSelectionInput\", \"singleTextInput\"],\r\n  }, {\r\n    cmd: \"BLACK HOLE\",\r\n    alias: \"TURN BLACK HOLE\",\r\n    allowedPatterns: [\"A\"],\r\n    A: [\"ON\", \"OFF\"],\r\n    targets: [\"singleSelectionInput\"],\r\n    isUnlocked: () => BlackHole(1).isUnlocked\r\n  }, {\r\n    cmd: \"STORE GAME TIME\",\r\n    alias: \"SET GAME TIME STORAGE TO\",\r\n    allowedPatterns: [\"A\"],\r\n    A: [\"ON\", \"OFF\", \"USE\"],\r\n    targets: [\"singleSelectionInput\"],\r\n    isUnlocked: () => Enslaved.isUnlocked\r\n  }, {\r\n    cmd: \"NOTIFY\",\r\n    alias: \"GAME NOTIFICATION:\",\r\n    allowedPatterns: [\"A\"],\r\n    A: [\"*\"],\r\n    targets: [\"singleTextInput\"],\r\n  }, {\r\n    cmd: \"COMMENT\",\r\n    alias: \"NOTE:\",\r\n    allowedPatterns: [\"A\"],\r\n    A: [\"*\"],\r\n    targets: [\"singleTextInput\"],\r\n  }, {\r\n    cmd: \"WAIT\",\r\n    alias: \"PAUSE AUTOMATOR UNTIL\",\r\n    allowedPatterns: [\"A\", \"DE\", \"BCB\"],\r\n    A: AUTOMATOR_BLOCKS_RESETS,\r\n    B: [...AUTOMATOR_BLOCKS_COMPARISON_CURRENCIES, \"* SPECIFIED CONSTANT\"],\r\n    C: AUTOMATOR_BLOCKS_COMPARISON_OPERATORS,\r\n    D: [\"BLACK HOLE\"],\r\n    E: [\"OFF\", \"BH1\", \"BH2\"],\r\n    targets: [\"genericInput1\", \"compOperator\", \"genericInput2\"]\r\n  }, {\r\n    cmd: \"PAUSE\",\r\n    alias: \"PAUSE AUTOMATOR FOR\",\r\n    allowedPatterns: [\"A\"],\r\n    A: [\"*\"],\r\n    targets: [\"singleTextInput\"],\r\n  }, {\r\n    cmd: \"IF\",\r\n    alias: \"ENTER BLOCK IF\",\r\n    allowedPatterns: [\"ABA\"],\r\n    A: [...AUTOMATOR_BLOCKS_COMPARISON_CURRENCIES, \"* SPECIFIED CONSTANT\"],\r\n    B: AUTOMATOR_BLOCKS_COMPARISON_OPERATORS,\r\n    targets: [\"genericInput1\", \"compOperator\", \"genericInput2\"],\r\n    nested: true\r\n  }, {\r\n    cmd: \"UNTIL\",\r\n    alias: \"REPEAT BLOCK UNTIL\",\r\n    allowedPatterns: [\"A\", \"BCB\"],\r\n    A: AUTOMATOR_BLOCKS_RESETS,\r\n    B: [...AUTOMATOR_BLOCKS_COMPARISON_CURRENCIES, \"* SPECIFIED CONSTANT\"],\r\n    C: AUTOMATOR_BLOCKS_COMPARISON_OPERATORS,\r\n    targets: [\"genericInput1\", \"compOperator\", \"genericInput2\"],\r\n    nested: true\r\n  }, {\r\n    cmd: \"WHILE\",\r\n    alias: \"REPEAT BLOCK WHILE\",\r\n    allowedPatterns: [\"ABA\"],\r\n    A: [...AUTOMATOR_BLOCKS_COMPARISON_CURRENCIES, \"* SPECIFIED CONSTANT\"],\r\n    B: AUTOMATOR_BLOCKS_COMPARISON_OPERATORS,\r\n    targets: [\"genericInput1\", \"compOperator\", \"genericInput2\"],\r\n    nested: true\r\n  }, {\r\n    cmd: \"BLOB\"\r\n  }, {\r\n    cmd: \"STOP\",\r\n    alias: \"STOP EXECUTION\"\r\n  }\r\n];\r\nconst AUTOMATOR_BLOCKS_BLACKLIST = [\"BLOB\"];\r\n\r\nexport const automatorBlocksMap = automatorBlocks.mapToObject(b => b.cmd, b => b);\r\n</script>\r\n\r\n<template>\r\n  <draggable\r\n    class=\"o-drag-cancel-region\"\r\n    group=\"code-blocks\"\r\n    ghost-class=\"null-block\"\r\n    draggable=\".draggable-blocks\"\r\n  >\r\n    <p>\r\n      Drag and drop these blocks to the area on the left! The blocks have names matching the commands in the reference\r\n      page, but may change appearance after being placed to describe what they do in a more natural-sounding manner.\r\n      If a block changes in this way, the alternate text will be shown as a tooltip when going to drag it over.\r\n    </p>\r\n    <br>\r\n    <p>\r\n      Inputs with a <span class=\"c-automator-input-optional\">brown</span> color are optional, while inputs with a\r\n      <span class=\"c-automator-input-required\">teal</span> color are required.\r\n      <span class=\"c-automator-block-row-error\">Red</span> inputs are causing errors and must be changed before the\r\n      script can be run. For more details, check the Scripting Information pane.\r\n    </p>\r\n    <p>\r\n      Options in dropdown menus which start with a * will be replaced with a text box. This can be turned back into a\r\n      dropdown by clicking the <i class=\"fa-solid fa-circle-xmark\" /> on the right side of the text box.\r\n    </p>\r\n    <draggable\r\n      class=\"block-container\"\r\n      :list=\"blocks\"\r\n      :group=\"{ name: 'code-blocks', pull: 'clone', put: false }\"\r\n      :sort=\"false\"\r\n      :clone=\"clone\"\r\n    >\r\n      <div\r\n        v-for=\"block in blocks\"\r\n        :key=\"block.id\"\r\n        v-tooltip=\"block.alias\"\r\n        class=\"o-automator-command o-automator-block-list draggable-blocks\"\r\n      >\r\n        {{ block.cmd }}\r\n      </div>\r\n    </draggable>\r\n    <p>\r\n      Note: Blocks and their contents count towards the character limits as if the command was typed in text mode.\r\n    </p>\r\n  </draggable>\r\n</template>\r\n\r\n<style scoped>\r\n.block-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  margin: 1rem 0;\r\n}\r\n\r\n.o-automator-block-list {\r\n  display: flex;\r\n  width: 8.7rem;\r\n  text-align: center;\r\n  height: 5.5rem;\r\n  font-size: 1.2rem;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.o-drag-cancel-region {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.null-block {\r\n  display: none;\r\n  visibility: hidden;\r\n}\r\n</style>\r\n"]}]}