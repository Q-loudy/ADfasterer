{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\prestige\\RealityModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\prestige\\RealityModal.vue","mtime":1745241597004},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgR2x5cGhDb21wb25lbnQgZnJvbSAiQC9jb21wb25lbnRzL0dseXBoQ29tcG9uZW50IjsNCmltcG9ydCBNb2RhbFdyYXBwZXJDaG9pY2UgZnJvbSAiQC9jb21wb25lbnRzL21vZGFscy9Nb2RhbFdyYXBwZXJDaG9pY2UiOw0KaW1wb3J0IFByaW1hcnlCdXR0b24gZnJvbSAiQC9jb21wb25lbnRzL1ByaW1hcnlCdXR0b24iOw0KDQpleHBvcnQgZGVmYXVsdCB7DQogIG5hbWU6ICJSZWFsaXR5TW9kYWwiLA0KICBjb21wb25lbnRzOiB7DQogICAgUHJpbWFyeUJ1dHRvbiwNCiAgICBNb2RhbFdyYXBwZXJDaG9pY2UsDQogICAgR2x5cGhDb21wb25lbnQsDQogIH0sDQogIGRhdGEoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIGZpcnN0UmVhbGl0eTogZmFsc2UsDQogICAgICBoYXNTcGFjZTogdHJ1ZSwNCiAgICAgIGhhc0Nob2ljZTogZmFsc2UsDQogICAgICBoYXNGaWx0ZXI6IGZhbHNlLA0KICAgICAgZ2x5cGhzOiBbXSwNCiAgICAgIGJlc3RMZXZlbDogMCwNCiAgICAgIGxldmVsRGlmZmVyZW5jZTogMCwNCiAgICAgIHNlbGVjdGVkR2x5cGg6IHVuZGVmaW5lZCwNCiAgICAgIGNhblJlZnJlc2g6IGZhbHNlLA0KICAgICAgbGV2ZWw6IDAsDQogICAgICBzaW1SZWFsaXRpZXM6IDAsDQogICAgICByZWFsaXR5TWFjaGluZXM6IG5ldyBEZWNpbWFsKCksDQogICAgICBzaGFyZHNHYWluZWQ6IDAsDQogICAgICBlZmZhcmlnVW5sb2NrZWQ6IGZhbHNlLA0KICAgICAgd2lsbEF1dG9QdXJnZTogZmFsc2UsDQogICAgfTsNCiAgfSwNCiAgY29tcHV0ZWQ6IHsNCiAgICBmaXJzdFJlYWxpdHlUZXh0KCkgew0KICAgICAgcmV0dXJuIGBSZWFsaXR5IHdpbGwgcmVzZXQgZXZlcnl0aGluZyBleGNlcHQgQ2hhbGxlbmdlIHJlY29yZHMgYW5kIGFueXRoaW5nIHVuZGVyIHRoZSBHZW5lcmFsIGhlYWRlciBvbiB0aGUNCiAgICAgICAgU3RhdGlzdGljcyB0YWIuIFRoZSBmaXJzdCAke2Zvcm1hdEludCgxMyl9IHJvd3Mgb2YgQWNoaWV2ZW1lbnRzIGFyZSBhbHNvIHJlc2V0LA0KICAgICAgICBidXQgeW91IHdpbGwgYXV0b21hdGljYWxseSBnZXQgb25lIEFjaGlldmVtZW50IGJhY2sgZXZlcnkNCiAgICAgICAgJHt0aW1lRGlzcGxheU5vRGVjaW1hbHMoMzAgKiA2MDAwMCl9LiBZb3Ugd2lsbCBhbHNvIGdhaW4gUmVhbGl0eSBNYWNoaW5lcyBiYXNlZCBvbiB5b3VyIEV0ZXJuaXR5IFBvaW50cywgYQ0KICAgICAgICBHbHlwaCB3aXRoIGEgbGV2ZWwgYmFzZWQgb24geW91ciBFdGVybml0eSBQb2ludHMsIFJlcGxpY2FudGksIGFuZCBEaWxhdGVkIFRpbWUsIGEgUGVyayBQb2ludCB0byBzcGVuZA0KICAgICAgICBvbiBxdWFsaXR5IG9mIGxpZmUgdXBncmFkZXMsIGFuZCB1bmxvY2sgdmFyaW91cyB1cGdyYWRlcy5gOw0KICAgIH0sDQogICAgY2FuU2FjcmlmaWNlKCkgew0KICAgICAgcmV0dXJuIFJlYWxpdHlVcGdyYWRlKDE5KS5pc0VmZmVjdEFjdGl2ZTsNCiAgICB9LA0KICAgIHdhcm5UZXh0KCkgew0KICAgICAgaWYgKCF0aGlzLmhhc0Nob2ljZSkgew0KICAgICAgICByZXR1cm4gYFlvdSBjdXJyZW50bHkgb25seSBoYXZlIGEgc2luZ2xlIG9wdGlvbiBmb3IgbmV3IEdseXBocyBldmVyeQ0KICAgICAgICAgIFJlYWxpdHkuIFlvdSBjYW4gdW5sb2NrIHRoZSBhYmlsaXR5IHRvIGNob29zZSBmcm9tIG11bHRpcGxlIEdseXBocyBieSBjYW5jZWxpbmcgb3V0IG9mIHRoaXMgbW9kYWwgYW5kDQogICAgICAgICAgcHVyY2hhc2luZyB0aGUgU1RBUlQgUGVyay5gOw0KICAgICAgfQ0KDQogICAgICBpZiAodGhpcy5oYXNGaWx0ZXIgJiYgdGhpcy5zZWxlY3RlZEdseXBoID09PSB1bmRlZmluZWQpIHsNCiAgICAgICAgcmV0dXJuIGBJZiB5b3UgZG8gbm90IGNob29zZSBhIEdseXBoLCBvbmUgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IHNlbGVjdGVkIHVzaW5nIHlvdXIgR2x5cGggZmlsdGVyLmA7DQogICAgICB9DQogICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZEdseXBoID09PSB1bmRlZmluZWQNCiAgICAgICAgPyBgWW91IG11c3Qgc2VsZWN0IGEgR2x5cGggaW4gb3JkZXIgdG8gY29udGludWUuYA0KICAgICAgICA6IG51bGw7DQogICAgfSwNCiAgICBnYWluZWQoKSB7DQogICAgICBjb25zdCBnYWluZWRSZXNvdXJjZXMgPSBbXTsNCiAgICAgIGdhaW5lZFJlc291cmNlcy5wdXNoKGAke3F1YW50aWZ5SW50KCJSZWFsaXR5IiwgdGhpcy5zaW1SZWFsaXRpZXMpfWApOw0KICAgICAgZ2FpbmVkUmVzb3VyY2VzLnB1c2goYCR7cXVhbnRpZnlJbnQoIlBlcmsgUG9pbnQiLCB0aGlzLnNpbVJlYWxpdGllcyl9YCk7DQogICAgICBnYWluZWRSZXNvdXJjZXMucHVzaChgJHtxdWFudGlmeSgiUmVhbGl0eSBNYWNoaW5lIiwgdGhpcy5yZWFsaXR5TWFjaGluZXMsIDIpfWApOw0KICAgICAgaWYgKHRoaXMuZWZmYXJpZ1VubG9ja2VkKSB7DQogICAgICAgIGdhaW5lZFJlc291cmNlcy5wdXNoKGAke3F1YW50aWZ5KCJSZWxpYyBTaGFyZCIsIHRoaXMuc2hhcmRzR2FpbmVkLCAyKX1gKTsNCiAgICAgIH0NCiAgICAgIHJldHVybiBgWW91IHdpbGwgZ2FpbiAke21ha2VFbnVtZXJhdGlvbihnYWluZWRSZXNvdXJjZXMpfWA7DQogICAgfSwNCiAgICBsZXZlbFN0YXRzKCkgew0KICAgICAgLy8gQml0IGFubm95aW5nIHRvIHJlYWQgZHVlIHRvIG5lZWRpbmcgPiwgPCwgYW5kID0sIHdpdGggPSBuZWVkaW5nIGEgZGlmZmVyZW50IGZvcm1hdC4NCiAgICAgIHJldHVybiBgWW91IHdpbGwgZ2V0IGEgbGV2ZWwgJHtmb3JtYXRJbnQodGhpcy5sZXZlbCl9IEdseXBoIG9uIFJlYWxpdHksIHdoaWNoIGlzDQogICAgICAgICR7dGhpcy5sZXZlbCA9PT0gdGhpcy5iZXN0TGV2ZWwgPyAiZXF1YWwgdG8iIDogYA0KICAgICAgICAke3F1YW50aWZ5SW50KCJsZXZlbCIsIHRoaXMubGV2ZWxEaWZmZXJlbmNlKX0NCiAgICAgICAgJHt0aGlzLmxldmVsID4gdGhpcy5iZXN0TGV2ZWwgPyAiaGlnaGVyIiA6ICJsb3dlciJ9IHRoYW5gfSB5b3VyIGJlc3QuYDsNCiAgICB9LA0KICAgIGNvbmZpcm1hdGlvblRvRGlzYWJsZSgpIHsNCiAgICAgIHJldHVybiBDb25maXJtYXRpb25UeXBlcy5nbHlwaFNlbGVjdGlvbi5pc1VubG9ja2VkKCkgPyAiZ2x5cGhTZWxlY3Rpb24iIDogdW5kZWZpbmVkOw0KICAgIH0sDQogICAgY2FuQ29uZmlybSgpIHsNCiAgICAgIHJldHVybiB0aGlzLmZpcnN0UmVhbGl0eSB8fCB0aGlzLnNlbGVjdGVkR2x5cGggIT09IHVuZGVmaW5lZCB8fCB0aGlzLmhhc0ZpbHRlcjsNCiAgICB9DQogIH0sDQogIGNyZWF0ZWQoKSB7DQogICAgdGhpcy5nZXRHbHlwaHMoKTsNCiAgICBHbHlwaFNlbGVjdGlvbi5yZWFsaXR5UHJvcHMgPSBnZXRSZWFsaXR5UHJvcHMoZmFsc2UsIGZhbHNlKTsNCiAgfSwNCiAgbWV0aG9kczogew0KICAgIHVwZGF0ZSgpIHsNCiAgICAgIHRoaXMuZmlyc3RSZWFsaXR5ID0gcGxheWVyLnJlYWxpdGllcyA9PT0gMDsNCiAgICAgIHRoaXMuaGFzQ2hvaWNlID0gUGVyay5maXJzdFBlcmsuaXNFZmZlY3RBY3RpdmU7DQogICAgICB0aGlzLmVmZmFyaWdVbmxvY2tlZCA9IFRlcmVzYVVubG9ja3MuZWZmYXJpZy5jYW5CZUFwcGxpZWQ7DQogICAgICB0aGlzLmhhc0ZpbHRlciA9IEVmZmFyaWdVbmxvY2suZ2x5cGhGaWx0ZXIuaXNVbmxvY2tlZDsNCiAgICAgIHRoaXMubGV2ZWwgPSBnYWluZWRHbHlwaExldmVsKCkuYWN0dWFsTGV2ZWw7DQogICAgICB0aGlzLnNpbVJlYWxpdGllcyA9IDEgKyBzaW11bGF0ZWRSZWFsaXR5Q291bnQoZmFsc2UpOw0KICAgICAgdGhpcy5oYXNTcGFjZSA9IEdhbWVDYWNoZS5nbHlwaEludmVudG9yeVNwYWNlLnZhbHVlID49IHRoaXMuc2ltUmVhbGl0aWVzOw0KICAgICAgY29uc3Qgc2ltUk1HYWluZWQgPSBNYWNoaW5lSGFuZGxlci5nYWluZWRSZWFsaXR5TWFjaGluZXMudGltZXModGhpcy5zaW1SZWFsaXRpZXMpOw0KICAgICAgdGhpcy5yZWFsaXR5TWFjaGluZXMuY29weUZyb20oc2ltUk1HYWluZWQuY2xhbXBNYXgoTWFjaGluZUhhbmRsZXIuZGlzdGFuY2VUb1JNQ2FwKSk7DQogICAgICB0aGlzLnNoYXJkc0dhaW5lZCA9IEVmZmFyaWcuc2hhcmRzR2FpbmVkICogKHNpbXVsYXRlZFJlYWxpdHlDb3VudChmYWxzZSkgKyAxKTsNCiAgICAgIHRoaXMud2lsbEF1dG9QdXJnZSA9IHBsYXllci5yZWFsaXR5LmF1dG9BdXRvQ2xlYW47DQogICAgICBpZiAodGhpcy5maXJzdFJlYWxpdHkpIHJldHVybjsNCiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5nbHlwaHMubGVuZ3RoOyArK2kpIHsNCiAgICAgICAgY29uc3QgY3VycmVudEdseXBoID0gdGhpcy5nbHlwaHNbaV07DQogICAgICAgIGNvbnN0IG5ld0dseXBoID0gR2x5cGhTZWxlY3Rpb24uZ2x5cGhMaXN0KA0KICAgICAgICAgIEdseXBoU2VsZWN0aW9uLmNob2ljZUNvdW50LCBnYWluZWRHbHlwaExldmVsKCksIHsgaXNDaG9vc2luZ0dseXBoOiBmYWxzZSB9DQogICAgICAgIClbaV07DQogICAgICAgIGlmIChjdXJyZW50R2x5cGgubGV2ZWwgPT09IG5ld0dseXBoLmxldmVsKSBjb250aW51ZTsNCiAgICAgICAgY3VycmVudEdseXBoLmxldmVsID0gbmV3R2x5cGgubGV2ZWw7DQogICAgICAgIGN1cnJlbnRHbHlwaC5lZmZlY3RzID0gbmV3R2x5cGguZWZmZWN0czsNCiAgICAgIH0NCiAgICAgIHRoaXMuYmVzdExldmVsID0gcGxheWVyLnJlY29yZHMuYmVzdFJlYWxpdHkuZ2x5cGhMZXZlbDsNCiAgICAgIHRoaXMubGV2ZWxEaWZmZXJlbmNlID0gTWF0aC5hYnModGhpcy5iZXN0TGV2ZWwgLSB0aGlzLmxldmVsKTsNCiAgICB9LA0KICAgIGdseXBoQ2xhc3MoaW5kZXgpIHsNCiAgICAgIHJldHVybiB7DQogICAgICAgICJsLW1vZGFsLWdseXBoLXNlbGVjdGlvbl9fZ2x5cGgiOiB0cnVlLA0KICAgICAgICAibC1tb2RhbC1nbHlwaC1zZWxlY3Rpb25fX2dseXBoLS1zZWxlY3RlZCI6IHRoaXMuc2VsZWN0ZWRHbHlwaCA9PT0gaW5kZXgsDQogICAgICB9Ow0KICAgIH0sDQogICAgZ2V0R2x5cGhzKCkgew0KICAgICAgdGhpcy5jYW5SZWZyZXNoID0gdHJ1ZTsNCiAgICAgIHRoaXMuZ2x5cGhzID0gR2x5cGhTZWxlY3Rpb24udXBjb21pbmdHbHlwaHM7DQogICAgfSwNCiAgICBzZWxlY3QoaW5kZXgpIHsNCiAgICAgIHRoaXMuc2VsZWN0ZWRHbHlwaCA9IGluZGV4Ow0KICAgIH0sDQogICAgY29uZmlybU1vZGFsKHNhY3JpZmljZSkgew0KICAgICAgaWYgKCF0aGlzLmNhbkNvbmZpcm0pIHJldHVybjsNCiAgICAgIGlmIChzYWNyaWZpY2UpIHsNCiAgICAgICAgLy8gU2FjIGlzbid0IHBhc3NlZCB0aHJvdWdoIGNvbmZpcm0gc28gd2UgaGF2ZSB0byBjbG9zZSBpdCBtYW51YWxseQ0KICAgICAgICB0aGlzLmVtaXRDbG9zZSgpOw0KICAgICAgfQ0KICAgICAgc3RhcnRNYW51YWxSZWFsaXR5KHNhY3JpZmljZSwgdGhpcy5zZWxlY3RlZEdseXBoKTsNCiAgICB9DQogIH0sDQp9Ow0K"},{"version":3,"sources":["RealityModal.vue"],"names":[],"mappingsfile":"RealityModal.vue","sourceRoot":"src/components/modals/prestige","sourcesContent":["<script>\r\nimport GlyphComponent from \"@/components/GlyphComponent\";\r\nimport ModalWrapperChoice from \"@/components/modals/ModalWrapperChoice\";\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\n\r\nexport default {\r\n  name: \"RealityModal\",\r\n  components: {\r\n    PrimaryButton,\r\n    ModalWrapperChoice,\r\n    GlyphComponent,\r\n  },\r\n  data() {\r\n    return {\r\n      firstReality: false,\r\n      hasSpace: true,\r\n      hasChoice: false,\r\n      hasFilter: false,\r\n      glyphs: [],\r\n      bestLevel: 0,\r\n      levelDifference: 0,\r\n      selectedGlyph: undefined,\r\n      canRefresh: false,\r\n      level: 0,\r\n      simRealities: 0,\r\n      realityMachines: new Decimal(),\r\n      shardsGained: 0,\r\n      effarigUnlocked: false,\r\n      willAutoPurge: false,\r\n    };\r\n  },\r\n  computed: {\r\n    firstRealityText() {\r\n      return `Reality will reset everything except Challenge records and anything under the General header on the\r\n        Statistics tab. The first ${formatInt(13)} rows of Achievements are also reset,\r\n        but you will automatically get one Achievement back every\r\n        ${timeDisplayNoDecimals(30 * 60000)}. You will also gain Reality Machines based on your Eternity Points, a\r\n        Glyph with a level based on your Eternity Points, Replicanti, and Dilated Time, a Perk Point to spend\r\n        on quality of life upgrades, and unlock various upgrades.`;\r\n    },\r\n    canSacrifice() {\r\n      return RealityUpgrade(19).isEffectActive;\r\n    },\r\n    warnText() {\r\n      if (!this.hasChoice) {\r\n        return `You currently only have a single option for new Glyphs every\r\n          Reality. You can unlock the ability to choose from multiple Glyphs by canceling out of this modal and\r\n          purchasing the START Perk.`;\r\n      }\r\n\r\n      if (this.hasFilter && this.selectedGlyph === undefined) {\r\n        return `If you do not choose a Glyph, one will be automatically selected using your Glyph filter.`;\r\n      }\r\n      return this.selectedGlyph === undefined\r\n        ? `You must select a Glyph in order to continue.`\r\n        : null;\r\n    },\r\n    gained() {\r\n      const gainedResources = [];\r\n      gainedResources.push(`${quantifyInt(\"Reality\", this.simRealities)}`);\r\n      gainedResources.push(`${quantifyInt(\"Perk Point\", this.simRealities)}`);\r\n      gainedResources.push(`${quantify(\"Reality Machine\", this.realityMachines, 2)}`);\r\n      if (this.effarigUnlocked) {\r\n        gainedResources.push(`${quantify(\"Relic Shard\", this.shardsGained, 2)}`);\r\n      }\r\n      return `You will gain ${makeEnumeration(gainedResources)}`;\r\n    },\r\n    levelStats() {\r\n      // Bit annoying to read due to needing >, <, and =, with = needing a different format.\r\n      return `You will get a level ${formatInt(this.level)} Glyph on Reality, which is\r\n        ${this.level === this.bestLevel ? \"equal to\" : `\r\n        ${quantifyInt(\"level\", this.levelDifference)}\r\n        ${this.level > this.bestLevel ? \"higher\" : \"lower\"} than`} your best.`;\r\n    },\r\n    confirmationToDisable() {\r\n      return ConfirmationTypes.glyphSelection.isUnlocked() ? \"glyphSelection\" : undefined;\r\n    },\r\n    canConfirm() {\r\n      return this.firstReality || this.selectedGlyph !== undefined || this.hasFilter;\r\n    }\r\n  },\r\n  created() {\r\n    this.getGlyphs();\r\n    GlyphSelection.realityProps = getRealityProps(false, false);\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.firstReality = player.realities === 0;\r\n      this.hasChoice = Perk.firstPerk.isEffectActive;\r\n      this.effarigUnlocked = TeresaUnlocks.effarig.canBeApplied;\r\n      this.hasFilter = EffarigUnlock.glyphFilter.isUnlocked;\r\n      this.level = gainedGlyphLevel().actualLevel;\r\n      this.simRealities = 1 + simulatedRealityCount(false);\r\n      this.hasSpace = GameCache.glyphInventorySpace.value >= this.simRealities;\r\n      const simRMGained = MachineHandler.gainedRealityMachines.times(this.simRealities);\r\n      this.realityMachines.copyFrom(simRMGained.clampMax(MachineHandler.distanceToRMCap));\r\n      this.shardsGained = Effarig.shardsGained * (simulatedRealityCount(false) + 1);\r\n      this.willAutoPurge = player.reality.autoAutoClean;\r\n      if (this.firstReality) return;\r\n      for (let i = 0; i < this.glyphs.length; ++i) {\r\n        const currentGlyph = this.glyphs[i];\r\n        const newGlyph = GlyphSelection.glyphList(\r\n          GlyphSelection.choiceCount, gainedGlyphLevel(), { isChoosingGlyph: false }\r\n        )[i];\r\n        if (currentGlyph.level === newGlyph.level) continue;\r\n        currentGlyph.level = newGlyph.level;\r\n        currentGlyph.effects = newGlyph.effects;\r\n      }\r\n      this.bestLevel = player.records.bestReality.glyphLevel;\r\n      this.levelDifference = Math.abs(this.bestLevel - this.level);\r\n    },\r\n    glyphClass(index) {\r\n      return {\r\n        \"l-modal-glyph-selection__glyph\": true,\r\n        \"l-modal-glyph-selection__glyph--selected\": this.selectedGlyph === index,\r\n      };\r\n    },\r\n    getGlyphs() {\r\n      this.canRefresh = true;\r\n      this.glyphs = GlyphSelection.upcomingGlyphs;\r\n    },\r\n    select(index) {\r\n      this.selectedGlyph = index;\r\n    },\r\n    confirmModal(sacrifice) {\r\n      if (!this.canConfirm) return;\r\n      if (sacrifice) {\r\n        // Sac isn't passed through confirm so we have to close it manually\r\n        this.emitClose();\r\n      }\r\n      startManualReality(sacrifice, this.selectedGlyph);\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapperChoice\r\n    :option=\"confirmationToDisable\"\r\n    :show-confirm=\"canConfirm\"\r\n    @confirm=\"confirmModal(false)\"\r\n  >\r\n    <template #header>\r\n      You are about to Reality\r\n    </template>\r\n    <div\r\n      v-if=\"firstReality\"\r\n      class=\"c-modal-message__text\"\r\n    >\r\n      {{ firstRealityText }}\r\n    </div>\r\n\r\n    <div class=\"c-modal-message__text\">\r\n      {{ gained }}\r\n    </div>\r\n    <div\r\n      v-if=\"!firstReality\"\r\n      class=\"l-glyph-selection__row\"\r\n    >\r\n      <GlyphComponent\r\n        v-for=\"(glyph, index) in glyphs\"\r\n        :key=\"index\"\r\n        :class=\"glyphClass(index)\"\r\n        :glyph=\"glyph\"\r\n        :is-in-modal=\"true\"\r\n        :ignore-modified-level=\"true\"\r\n        :show-sacrifice=\"canSacrifice\"\r\n        @click.native=\"select(index)\"\r\n      />\r\n    </div>\r\n    <div v-if=\"!firstReality\">\r\n      {{ levelStats }}\r\n      <br>\r\n      <b class=\"o-warning\">\r\n        {{ warnText }}\r\n      </b>\r\n    </div>\r\n    <div v-if=\"simRealities > 1\">\r\n      <br>\r\n      After choosing this Glyph the game will simulate the rest of your Realities,\r\n      <br>\r\n      automatically choosing another {{ quantifyInt(\"Glyph\", simRealities - 1) }}\r\n      based on your Glyph filter settings.\r\n    </div>\r\n    <div v-if=\"willAutoPurge\">\r\n      <br>\r\n      Auto-purge is currently enabled; your selected Glyph\r\n      <br>\r\n      may not appear in your inventory after it triggers.\r\n    </div>\r\n    <div\r\n      v-if=\"!hasSpace\"\r\n      class=\"o-warning\"\r\n    >\r\n      <span v-if=\"simRealities > 1\">\r\n        You will be simulating more Realities than you have open inventory space for;\r\n        this may result in some Glyphs being Sacrificed.\r\n      </span>\r\n      <span v-else>\r\n        You do not have any free inventory space - your selected Glyph will be automatically\r\n        {{ canSacrifice ? \"Sacrificed\" : \"deleted\" }}!\r\n      </span>\r\n    </div>\r\n    <div v-if=\"confirmationToDisable\">\r\n      <br>\r\n      You can force this modal to appear (even if disabled) by Shift-clicking the Reality button.\r\n    </div>\r\n    <template\r\n      v-if=\"canSacrifice && canConfirm\"\r\n      #extra-buttons\r\n    >\r\n      <PrimaryButton\r\n        class=\"o-primary-btn--width-medium c-modal-message__okay-btn\"\r\n        @click=\"confirmModal(true)\"\r\n      >\r\n        Sacrifice\r\n      </PrimaryButton>\r\n    </template>\r\n  </ModalWrapperChoice>\r\n</template>\r\n\r\n<style scoped>\r\n.o-warning {\r\n  color: var(--color-infinity);\r\n}\r\n</style>\r\n"]}]}