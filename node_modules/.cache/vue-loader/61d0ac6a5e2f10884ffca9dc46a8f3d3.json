{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\celestial-ra\\RaPet.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\celestial-ra\\RaPet.vue","mtime":1745241597151},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgUmFQZXRMZXZlbEJhciBmcm9tICIuL1JhUGV0TGV2ZWxCYXIiOw0KaW1wb3J0IFJhVXBncmFkZUljb24gZnJvbSAiLi9SYVVwZ3JhZGVJY29uIjsNCg0KZXhwb3J0IGRlZmF1bHQgew0KICBuYW1lOiAiUmFQZXQiLA0KICBjb21wb25lbnRzOiB7DQogICAgUmFVcGdyYWRlSWNvbiwNCiAgICBSYVBldExldmVsQmFyDQogIH0sDQogIHByb3BzOiB7DQogICAgcGV0Q29uZmlnOiB7DQogICAgICB0eXBlOiBPYmplY3QsDQogICAgICByZXF1aXJlZDogdHJ1ZQ0KICAgIH0NCiAgfSwNCiAgZGF0YSgpIHsNCiAgICByZXR1cm4gew0KICAgICAgaXNVbmxvY2tlZDogZmFsc2UsDQogICAgICBpc1JhQ2FwcGVkOiBmYWxzZSwNCiAgICAgIGlzQ2FwcGVkOiBmYWxzZSwNCiAgICAgIGxldmVsOiAwLA0KICAgICAgbWVtb3JpZXM6IDAsDQogICAgICByZXF1aXJlZE1lbW9yaWVzOiAwLA0KICAgICAgbWVtb3J5Q2h1bmtzOiAwLA0KICAgICAgbWVtb3J5Q2h1bmtzUGVyU2Vjb25kOiAwLA0KICAgICAgbWVtb3JpZXNQZXJTZWNvbmQ6IDAsDQogICAgICBtZW1vcnlNdWx0aXBsaWVyOiAxLA0KICAgICAgY2FuR2V0TWVtb3J5Q2h1bmtzOiBmYWxzZSwNCiAgICAgIG1lbW9yeVVwZ3JhZGVDb3N0OiAwLA0KICAgICAgY2h1bmtVcGdyYWRlQ29zdDogMCwNCiAgICAgIG1lbW9yeVVwZ3JhZGVDYXBwZWQ6IGZhbHNlLA0KICAgICAgY2h1bmtVcGdyYWRlQ2FwcGVkOiBmYWxzZSwNCiAgICAgIGN1cnJlbnRNZW1vcnlNdWx0OiAwLA0KICAgICAgY3VycmVudENodW5rTXVsdDogMCwNCiAgICAgIG5leHRNZW1vcnlVcGdyYWRlRXN0aW1hdGU6ICIiLA0KICAgICAgbmV4dE1lbW9yeUNodW5rVXBncmFkZUVzdGltYXRlOiAiIiwNCiAgICB9Ow0KICB9LA0KICBjb21wdXRlZDogew0KICAgIGxldmVsQ2FwKCkgeyByZXR1cm4gUmEubGV2ZWxDYXA7IH0sDQogICAgc2hvd1NjYWxpbmdVcGdyYWRlKCkgew0KICAgICAgcmV0dXJuIHRoaXMucGV0Q29uZmlnLnNjYWxpbmdVcGdyYWRlVmlzaWJsZSh0aGlzLmxldmVsKTsNCiAgICB9LA0KICAgIHNjYWxpbmdVcGdyYWRlVGV4dCgpIHsNCiAgICAgIHJldHVybiB0aGlzLnBldENvbmZpZy5zY2FsaW5nVXBncmFkZVRleHQodGhpcy5sZXZlbCk7DQogICAgfSwNCiAgICBwZXQoKSB7DQogICAgICByZXR1cm4gdGhpcy5wZXRDb25maWcucGV0Ow0KICAgIH0sDQogICAgbmFtZSgpIHsNCiAgICAgIHJldHVybiB0aGlzLnBldC5uYW1lOw0KICAgIH0sDQogICAgcGV0U3R5bGUoKSB7DQogICAgICByZXR1cm4gew0KICAgICAgICBjb2xvcjogdGhpcy5wZXQuY29sb3INCiAgICAgIH07DQogICAgfSwNCiAgICB1bmxvY2tzKCkgew0KICAgICAgcmV0dXJuIHRoaXMucGV0LnVubG9ja3M7DQogICAgfSwNCiAgICBjaHVua1Rvb2x0aXAoKSB7DQogICAgICByZXR1cm4gYEJhc2VkIG9uICR7dGhpcy5wZXQuY2h1bmtHYWlufWA7DQogICAgfSwNCiAgICBtZW1vcnlHYWluVG9vbHRpcCgpIHsNCiAgICAgIHJldHVybiBgQmFzZWQgb24gJHt0aGlzLnBldC5tZW1vcnlHYWlufWA7DQogICAgfSwNCiAgfSwNCiAgbWV0aG9kczogew0KICAgIHVwZGF0ZSgpIHsNCiAgICAgIHRoaXMuaXNSYUNhcHBlZCA9IFJhLnRvdGFsUGV0TGV2ZWwgPT09IFJhLm1heFRvdGFsUGV0TGV2ZWw7DQogICAgICBjb25zdCBwZXQgPSB0aGlzLnBldDsNCiAgICAgIHRoaXMuaXNDYXBwZWQgPSBwZXQubGV2ZWwgPT09IFJhLmxldmVsQ2FwOw0KICAgICAgdGhpcy5pc1VubG9ja2VkID0gcGV0LmlzVW5sb2NrZWQ7DQogICAgICBpZiAoIXRoaXMuaXNVbmxvY2tlZCkgcmV0dXJuOw0KICAgICAgdGhpcy5sZXZlbCA9IHBldC5sZXZlbDsNCiAgICAgIHRoaXMubWVtb3JpZXMgPSBwZXQubWVtb3JpZXM7DQogICAgICB0aGlzLnJlcXVpcmVkTWVtb3JpZXMgPSBwZXQucmVxdWlyZWRNZW1vcmllczsNCiAgICAgIHRoaXMubWVtb3J5Q2h1bmtzID0gcGV0Lm1lbW9yeUNodW5rczsNCiAgICAgIHRoaXMubWVtb3J5Q2h1bmtzUGVyU2Vjb25kID0gcGV0Lm1lbW9yeUNodW5rc1BlclNlY29uZDsNCiAgICAgIHRoaXMubWVtb3JpZXNQZXJTZWNvbmQgPSBwZXQubWVtb3J5Q2h1bmtzICogUmEucHJvZHVjdGlvblBlck1lbW9yeUNodW5rICogdGhpcy5jdXJyZW50TWVtb3J5TXVsdDsNCiAgICAgIHRoaXMuY2FuR2V0TWVtb3J5Q2h1bmtzID0gcGV0LmNhbkdldE1lbW9yeUNodW5rczsNCiAgICAgIHRoaXMubWVtb3J5TXVsdGlwbGllciA9IHBldC5tZW1vcnlQcm9kdWN0aW9uTXVsdGlwbGllcjsNCiAgICAgIHRoaXMubWVtb3J5VXBncmFkZUNvc3QgPSBwZXQubWVtb3J5VXBncmFkZUNvc3Q7DQogICAgICB0aGlzLmNodW5rVXBncmFkZUNvc3QgPSBwZXQuY2h1bmtVcGdyYWRlQ29zdDsNCiAgICAgIHRoaXMubWVtb3J5VXBncmFkZUNhcHBlZCA9IHBldC5tZW1vcnlVcGdyYWRlQ2FwcGVkOw0KICAgICAgdGhpcy5jaHVua1VwZ3JhZGVDYXBwZWQgPSBwZXQuY2h1bmtVcGdyYWRlQ2FwcGVkOw0KICAgICAgdGhpcy5jdXJyZW50TWVtb3J5TXVsdCA9IHBldC5tZW1vcnlVcGdyYWRlQ3VycmVudE11bHQ7DQogICAgICB0aGlzLmN1cnJlbnRDaHVua011bHQgPSBwZXQuY2h1bmtVcGdyYWRlQ3VycmVudE11bHQ7DQoNCiAgICAgIHRoaXMubmV4dE1lbW9yeVVwZ3JhZGVFc3RpbWF0ZSA9IFJhLnRpbWVUb0dvYWxTdHJpbmcocGV0LCB0aGlzLm1lbW9yeVVwZ3JhZGVDb3N0IC0gdGhpcy5tZW1vcmllcyk7DQogICAgICB0aGlzLm5leHRNZW1vcnlDaHVua1VwZ3JhZGVFc3RpbWF0ZSA9IFJhLnRpbWVUb0dvYWxTdHJpbmcocGV0LCB0aGlzLmNodW5rVXBncmFkZUNvc3QgLSB0aGlzLm1lbW9yaWVzKTsNCiAgICB9LA0KICAgIG5leHRVbmxvY2tMZXZlbCgpIHsNCiAgICAgIGNvbnN0IG1pc3NpbmdVcGdyYWRlcyA9IHRoaXMucGV0LnVubG9ja3MNCiAgICAgICAgLm1hcCh1ID0+IHUubGV2ZWwpDQogICAgICAgIC5maWx0ZXIoZ29hbCA9PiBnb2FsID4gdGhpcy5sZXZlbCk7DQogICAgICByZXR1cm4gbWlzc2luZ1VwZ3JhZGVzLmxlbmd0aCA9PT0gMCA/IDI1IDogbWlzc2luZ1VwZ3JhZGVzLm1pbigpOw0KICAgIH0sDQogICAgdXBncmFkZUNsYXNzT2JqZWN0KHR5cGUpIHsNCiAgICAgIGNvbnN0IGF2YWlsYWJsZSA9IHR5cGUgPT09ICJtZW1vcnkiDQogICAgICAgID8gdGhpcy5tZW1vcnlVcGdyYWRlQ29zdCA8PSB0aGlzLm1lbW9yaWVzDQogICAgICAgIDogdGhpcy5jaHVua1VwZ3JhZGVDb3N0IDw9IHRoaXMubWVtb3JpZXM7DQogICAgICBjb25zdCBjYXBwZWQgPSB0eXBlID09PSAibWVtb3J5IiA/IHRoaXMubWVtb3J5VXBncmFkZUNhcHBlZCA6IHRoaXMuY2h1bmtVcGdyYWRlQ2FwcGVkOw0KICAgICAgY29uc3QgcGV0ID0gdGhpcy5wZXQ7DQogICAgICByZXR1cm4gew0KICAgICAgICAiYy1yYS1wZXQtdXBncmFkZSI6IHRydWUsDQogICAgICAgICJjLXJhLXBldC11cGdyYWRlLW1lbW9yeSI6IHR5cGUgPT09ICJtZW1vcnkiLA0KICAgICAgICAiYy1yYS1wZXQtdXBncmFkZS1jaHVuayI6IHR5cGUgPT09ICJjaHVuayIsDQogICAgICAgICJjLXJhLXBldC1idG4tLWF2YWlsYWJsZSI6IGF2YWlsYWJsZSwNCiAgICAgICAgW2BjLXJhLXBldC1idG4tLSR7cGV0LmlkfWBdOiBhdmFpbGFibGUsDQogICAgICAgICJjLXJhLXBldC1idG4tLWF2YWlsYWJsZV9fY2FwcGVkIjogY2FwcGVkLA0KICAgICAgICBbYGMtcmEtcGV0LWJ0bi0tJHtwZXQuaWR9X19jYXBwZWRgXTogY2FwcGVkDQogICAgICB9Ow0KICAgIH0sDQogICAgYmFyU3R5bGUodHlwZSkgew0KICAgICAgY29uc3QgY29zdCA9IHR5cGUgPT09ICJtZW1vcnkiID8gdGhpcy5tZW1vcnlVcGdyYWRlQ29zdCA6IHRoaXMuY2h1bmtVcGdyYWRlQ29zdDsNCiAgICAgIGNvbnN0IGdvbmUgPSAodHlwZSA9PT0gIm1lbW9yeSIgJiYgdGhpcy5tZW1vcnlVcGdyYWRlQ2FwcGVkIHx8IHR5cGUgPT09ICJjaHVuayIgJiYgdGhpcy5jaHVua1VwZ3JhZGVDYXBwZWQpDQogICAgICAgID8gY29zdA0KICAgICAgICA6IHRoaXMubWVtb3JpZXM7DQogICAgICByZXR1cm4gew0KICAgICAgICB3aWR0aDogYCR7MTAwICogTWF0aC5taW4oMSwgZ29uZSAvIGNvc3QpfSVgLA0KICAgICAgICBiYWNrZ3JvdW5kOiB0aGlzLnBldC5jb2xvcg0KICAgICAgfTsNCiAgICB9LA0KICB9LA0KfTsNCg=="},{"version":3,"sources":["RaPet.vue"],"names":[],"mappingsfile":"RaPet.vue","sourceRoot":"src/components/tabs/celestial-ra","sourcesContent":["<script>\r\nimport RaPetLevelBar from \"./RaPetLevelBar\";\r\nimport RaUpgradeIcon from \"./RaUpgradeIcon\";\r\n\r\nexport default {\r\n  name: \"RaPet\",\r\n  components: {\r\n    RaUpgradeIcon,\r\n    RaPetLevelBar\r\n  },\r\n  props: {\r\n    petConfig: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isUnlocked: false,\r\n      isRaCapped: false,\r\n      isCapped: false,\r\n      level: 0,\r\n      memories: 0,\r\n      requiredMemories: 0,\r\n      memoryChunks: 0,\r\n      memoryChunksPerSecond: 0,\r\n      memoriesPerSecond: 0,\r\n      memoryMultiplier: 1,\r\n      canGetMemoryChunks: false,\r\n      memoryUpgradeCost: 0,\r\n      chunkUpgradeCost: 0,\r\n      memoryUpgradeCapped: false,\r\n      chunkUpgradeCapped: false,\r\n      currentMemoryMult: 0,\r\n      currentChunkMult: 0,\r\n      nextMemoryUpgradeEstimate: \"\",\r\n      nextMemoryChunkUpgradeEstimate: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    levelCap() { return Ra.levelCap; },\r\n    showScalingUpgrade() {\r\n      return this.petConfig.scalingUpgradeVisible(this.level);\r\n    },\r\n    scalingUpgradeText() {\r\n      return this.petConfig.scalingUpgradeText(this.level);\r\n    },\r\n    pet() {\r\n      return this.petConfig.pet;\r\n    },\r\n    name() {\r\n      return this.pet.name;\r\n    },\r\n    petStyle() {\r\n      return {\r\n        color: this.pet.color\r\n      };\r\n    },\r\n    unlocks() {\r\n      return this.pet.unlocks;\r\n    },\r\n    chunkTooltip() {\r\n      return `Based on ${this.pet.chunkGain}`;\r\n    },\r\n    memoryGainTooltip() {\r\n      return `Based on ${this.pet.memoryGain}`;\r\n    },\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isRaCapped = Ra.totalPetLevel === Ra.maxTotalPetLevel;\r\n      const pet = this.pet;\r\n      this.isCapped = pet.level === Ra.levelCap;\r\n      this.isUnlocked = pet.isUnlocked;\r\n      if (!this.isUnlocked) return;\r\n      this.level = pet.level;\r\n      this.memories = pet.memories;\r\n      this.requiredMemories = pet.requiredMemories;\r\n      this.memoryChunks = pet.memoryChunks;\r\n      this.memoryChunksPerSecond = pet.memoryChunksPerSecond;\r\n      this.memoriesPerSecond = pet.memoryChunks * Ra.productionPerMemoryChunk * this.currentMemoryMult;\r\n      this.canGetMemoryChunks = pet.canGetMemoryChunks;\r\n      this.memoryMultiplier = pet.memoryProductionMultiplier;\r\n      this.memoryUpgradeCost = pet.memoryUpgradeCost;\r\n      this.chunkUpgradeCost = pet.chunkUpgradeCost;\r\n      this.memoryUpgradeCapped = pet.memoryUpgradeCapped;\r\n      this.chunkUpgradeCapped = pet.chunkUpgradeCapped;\r\n      this.currentMemoryMult = pet.memoryUpgradeCurrentMult;\r\n      this.currentChunkMult = pet.chunkUpgradeCurrentMult;\r\n\r\n      this.nextMemoryUpgradeEstimate = Ra.timeToGoalString(pet, this.memoryUpgradeCost - this.memories);\r\n      this.nextMemoryChunkUpgradeEstimate = Ra.timeToGoalString(pet, this.chunkUpgradeCost - this.memories);\r\n    },\r\n    nextUnlockLevel() {\r\n      const missingUpgrades = this.pet.unlocks\r\n        .map(u => u.level)\r\n        .filter(goal => goal > this.level);\r\n      return missingUpgrades.length === 0 ? 25 : missingUpgrades.min();\r\n    },\r\n    upgradeClassObject(type) {\r\n      const available = type === \"memory\"\r\n        ? this.memoryUpgradeCost <= this.memories\r\n        : this.chunkUpgradeCost <= this.memories;\r\n      const capped = type === \"memory\" ? this.memoryUpgradeCapped : this.chunkUpgradeCapped;\r\n      const pet = this.pet;\r\n      return {\r\n        \"c-ra-pet-upgrade\": true,\r\n        \"c-ra-pet-upgrade-memory\": type === \"memory\",\r\n        \"c-ra-pet-upgrade-chunk\": type === \"chunk\",\r\n        \"c-ra-pet-btn--available\": available,\r\n        [`c-ra-pet-btn--${pet.id}`]: available,\r\n        \"c-ra-pet-btn--available__capped\": capped,\r\n        [`c-ra-pet-btn--${pet.id}__capped`]: capped\r\n      };\r\n    },\r\n    barStyle(type) {\r\n      const cost = type === \"memory\" ? this.memoryUpgradeCost : this.chunkUpgradeCost;\r\n      const gone = (type === \"memory\" && this.memoryUpgradeCapped || type === \"chunk\" && this.chunkUpgradeCapped)\r\n        ? cost\r\n        : this.memories;\r\n      return {\r\n        width: `${100 * Math.min(1, gone / cost)}%`,\r\n        background: this.pet.color\r\n      };\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    v-if=\"isUnlocked\"\r\n    class=\"l-ra-pet-container\"\r\n  >\r\n    <div\r\n      class=\"c-ra-pet-header\"\r\n      :style=\"petStyle\"\r\n    >\r\n      <div class=\"c-ra-pet-title\">\r\n        <!-- The full name doesn't fit here, so we shorten it as a special case -->\r\n        {{ pet.id === \"enslaved\" ? \"Nameless\" : name }} Level {{ formatInt(level) }}/{{ formatInt(levelCap) }}\r\n      </div>\r\n      <div\r\n        v-if=\"showScalingUpgrade\"\r\n        :key=\"level\"\r\n      >\r\n        {{ scalingUpgradeText }}\r\n      </div>\r\n      <br v-else>\r\n      <div v-if=\"!isCapped\">\r\n        <div>\r\n          {{ name }} {{ pet.id === \"enslaved\" ? \"have\" : \"has\" }} {{ quantify(\"Memory\", memories, 2) }}\r\n        </div>\r\n      </div>\r\n      <div\r\n        v-if=\"!isCapped\"\r\n        class=\"l-ra-pet-middle-container\"\r\n      >\r\n        <div class=\"l-ra-pet-upgrade-container\">\r\n          <div class=\"l-ra-pet-upgrade c-ra-pet-upgrade__top\">\r\n            <div\r\n              :class=\"upgradeClassObject('memory')\"\r\n              @click=\"pet.purchaseMemoryUpgrade()\"\r\n            >\r\n              <span class=\"fas fa-brain\" />\r\n              <div\r\n                v-if=\"!memoryUpgradeCapped\"\r\n                class=\"c-ra-pet-upgrade__tooltip\"\r\n              >\r\n                <div class=\"c-ra-pet-upgrade__tooltip__name\">\r\n                  {{ name }}'s Recollection\r\n                </div>\r\n                <div class=\"c-ra-pet-upgrade__tooltip__description\">\r\n                  Gain {{ formatPercents(0.3) }} more Memories\r\n                </div>\r\n                <div class=\"c-ra-pet-upgrade__tooltip__footer\">\r\n                  Cost: {{ quantify(\"Memory\", memoryUpgradeCost, 2, 2) }}\r\n                  <span v-if=\"memories <= memoryUpgradeCost\">\r\n                    {{ nextMemoryUpgradeEstimate }}\r\n                  </span>\r\n                  <br>\r\n                  Currently: {{ formatX(currentMemoryMult, 2, 2) }}\r\n                </div>\r\n              </div>\r\n              <div\r\n                v-else\r\n                class=\"c-ra-pet-upgrade__tooltip\"\r\n              >\r\n                <div class=\"c-ra-pet-upgrade__tooltip__name\">\r\n                  {{ name }}'s Recollection\r\n                </div>\r\n                <div class=\"c-ra-pet-upgrade__tooltip__description\">\r\n                  Capped: {{ formatX(currentMemoryMult, 2, 2) }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"c-ra-upgrade-bar\">\r\n              <div\r\n                class=\"c-ra-upgrade-bar__inner\"\r\n                :style=\"barStyle('memory')\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div class=\"l-ra-pet-upgrade c-ra-pet-upgrade__bottom\">\r\n            <div\r\n              :class=\"upgradeClassObject('chunk')\"\r\n              @click=\"pet.purchaseChunkUpgrade()\"\r\n            >\r\n              <span class=\"fas fa-dice-d6\" />\r\n              <div\r\n                v-if=\"!chunkUpgradeCapped\"\r\n                class=\"c-ra-pet-upgrade__tooltip\"\r\n              >\r\n                <div class=\"c-ra-pet-upgrade__tooltip__name\">\r\n                  {{ name }}'s Fragmentation\r\n                </div>\r\n                <div class=\"c-ra-pet-upgrade__tooltip__description\">\r\n                  Gain {{ formatPercents(0.5) }} more Memory Chunks\r\n                </div>\r\n                <div class=\"c-ra-pet-upgrade__tooltip__footer\">\r\n                  Cost: {{ quantify(\"Memory\", chunkUpgradeCost, 2, 2) }}\r\n                  <span v-if=\"memories <= chunkUpgradeCost\">\r\n                    {{ nextMemoryChunkUpgradeEstimate }}\r\n                  </span>\r\n                  <br>\r\n                  Currently: {{ formatX(currentChunkMult, 2, 2) }}\r\n                </div>\r\n              </div>\r\n              <div\r\n                v-else\r\n                class=\"c-ra-pet-upgrade__tooltip\"\r\n              >\r\n                <div class=\"c-ra-pet-upgrade__tooltip__name\">\r\n                  {{ name }}'s Fragmentation\r\n                </div>\r\n                <div class=\"c-ra-pet-upgrade__tooltip__description\">\r\n                  Capped: {{ formatX(currentChunkMult, 2, 2) }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"c-ra-upgrade-bar c-ra-upgrade-bar--bottom\">\r\n              <div\r\n                class=\"c-ra-upgrade-bar__inner\"\r\n                :style=\"barStyle('chunk')\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <RaPetLevelBar\r\n          v-if=\"!isCapped\"\r\n          :pet-config=\"petConfig\"\r\n        />\r\n      </div>\r\n      <div v-if=\"!isCapped\">\r\n        <div>\r\n          {{ quantify(\"Memory Chunk\", memoryChunks, 2, 2) }}, {{ quantify(\"Memory\", memoriesPerSecond, 2, 2) }}/sec\r\n        </div>\r\n        <div>\r\n          Gaining {{ quantify(\"Memory Chunk\", memoryChunksPerSecond, 2, 2) }}/sec\r\n          <span :ach-tooltip=\"chunkTooltip\">\r\n            <i class=\"fas fa-question-circle\" />\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div v-if=\"memoryMultiplier > 1 && !isRaCapped\">\r\n        Multiplying all Memory production by {{ format(memoryMultiplier, 2, 3) }}\r\n        <span :ach-tooltip=\"memoryGainTooltip\">\r\n          <i class=\"fas fa-question-circle\" />\r\n        </span>\r\n      </div>\r\n      <br v-else-if=\"!isRaCapped\">\r\n      <br v-if=\"!isRaCapped\">\r\n      <div\r\n        v-else\r\n        class=\"l-ra-pet-postcompletion-spacer\"\r\n      />\r\n      <div class=\"l-ra-pet-milestones\">\r\n        <!-- This choice of key forces a UI update every level up -->\r\n        <RaUpgradeIcon\r\n          v-for=\"(unlock, i) in unlocks\"\r\n          :key=\"25 * level + i\"\r\n          :unlock=\"unlock\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.l-ra-pet-milestones {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.c-ra-pet-upgrade-memory {\r\n  border-top-right-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  border-bottom-left-radius: 0;\r\n}\r\n\r\n.c-ra-pet-upgrade-chunk {\r\n  border-top-left-radius: 0;\r\n  border-top-right-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n}\r\n\r\n.l-ra-pet-postcompletion-spacer {\r\n  margin-bottom: 0.8rem;\r\n}\r\n</style>\r\n"]}]}