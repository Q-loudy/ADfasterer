{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\ImportSaveModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\ImportSaveModal.vue","mtime":1745241596822},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgTW9kYWxXcmFwcGVyQ2hvaWNlIGZyb20gIkAvY29tcG9uZW50cy9tb2RhbHMvTW9kYWxXcmFwcGVyQ2hvaWNlIjsNCmltcG9ydCBQcmltYXJ5QnV0dG9uIGZyb20gIkAvY29tcG9uZW50cy9QcmltYXJ5QnV0dG9uIjsNCg0KY29uc3QgT0ZGTElORV9QUk9HUkVTU19UWVBFID0gew0KICBJTVBPUlRFRDogMCwNCiAgTE9DQUw6IDEsDQogIElHTk9SRUQ6IDIsDQp9Ow0KDQpleHBvcnQgZGVmYXVsdCB7DQogIG5hbWU6ICJJbXBvcnRTYXZlTW9kYWwiLA0KICBjb21wb25lbnRzOiB7DQogICAgTW9kYWxXcmFwcGVyQ2hvaWNlLA0KICAgIFByaW1hcnlCdXR0b24NCiAgfSwNCiAgZGF0YSgpIHsNCiAgICByZXR1cm4gew0KICAgICAgaW5wdXQ6ICIiLA0KICAgICAgb2ZmbGluZUltcG9ydDogT0ZGTElORV9QUk9HUkVTU19UWVBFLklNUE9SVEVELA0KICAgIH07DQogIH0sDQogIGNvbXB1dGVkOiB7DQogICAgc2F2ZUNoZWNrU3RyaW5nKCkgew0KICAgICAgY29uc3Qgc2F2ZSA9IEdhbWVTYXZlU2VyaWFsaXplci5kZXNlcmlhbGl6ZSh0aGlzLmlucHV0KTsNCiAgICAgIGNvbnN0IHJhd1N0cmluZyA9IEdhbWVTdG9yYWdlLmNoZWNrUGxheWVyT2JqZWN0KHNhdmUpOw0KICAgICAgLy8gS2VlcCB0aGUgbGVuZ3RoIGJvdW5kZWQ7IHdlIGRvbid0IHdhbnQgdGhlIG1vZGFsIHRvIGJlIHRvbyBiaWcgZm9yIHRoZSBzY3JlZW4gZm9yIHBhcnRpY3VsYXJseSBiYWQgZXJyb3JzDQogICAgICByZXR1cm4gcmF3U3RyaW5nLmxlbmd0aCA+IDMwMCA/IGAke3Jhd1N0cmluZy5zbGljZSgwLCAyOTcpfS4uLmAgOiByYXdTdHJpbmc7DQogICAgfSwNCiAgICBwbGF5ZXIoKSB7DQogICAgICByZXR1cm4gdGhpcy5zYXZlQ2hlY2tTdHJpbmcgPT09ICIiID8gR2FtZVNhdmVTZXJpYWxpemVyLmRlc2VyaWFsaXplKHRoaXMuaW5wdXQpIDogdW5kZWZpbmVkOw0KICAgIH0sDQogICAgcHJvZ3Jlc3MoKSB7DQogICAgICByZXR1cm4gUGxheWVyUHJvZ3Jlc3Mub2YodGhpcy5wbGF5ZXIpOw0KICAgIH0sDQogICAgZmlsZU5hbWUoKSB7DQogICAgICByZXR1cm4gdGhpcy5wbGF5ZXIub3B0aW9ucy5zYXZlRmlsZU5hbWU7DQogICAgfSwNCiAgICBhbnRpbWF0dGVyKCkgew0KICAgICAgcmV0dXJuIHRoaXMucGxheWVyLmFudGltYXR0ZXIgfHwgdGhpcy5wbGF5ZXIubW9uZXk7DQogICAgfSwNCiAgICBpbmZpbml0aWVzKCkgew0KICAgICAgLy8gSW5maW5pdHkgY291bnQgZGF0YSBpcyBzdG9yZWQgaW4gZWl0aGVyIHBsYXllci5pbmZpbml0aWVkIG9yIHBsYXllci5pbmZpbml0aWVzIGJhc2VkIG9uIGlmIHRoZSBzYXZlIGlzIGJlZm9yZQ0KICAgICAgLy8gb3IgYWZ0ZXIgdGhlIHJlYWxpdHkgdXBkYXRlLCBhbmQgdGhpcyBleHBsaWNpdCBjaGVjayBpcyBuZWVkZWQgYXMgaXQgcnVucyBiZWZvcmUgYW55IG1pZ3JhdGlvbiBjb2RlLg0KICAgICAgY29uc3QgaW5maW5pdHlEYXRhID0gdGhpcy5wbGF5ZXIuaW5maW5pdGllZCA/IHRoaXMucGxheWVyLmluZmluaXRpZWQgOiB0aGlzLnBsYXllci5pbmZpbml0aWVzOw0KICAgICAgcmV0dXJuIG5ldyBEZWNpbWFsKGluZmluaXR5RGF0YSk7DQogICAgfSwNCiAgICBoYXNJbnB1dCgpIHsNCiAgICAgIHJldHVybiB0aGlzLmlucHV0ICE9PSAiIjsNCiAgICB9LA0KICAgIGlucHV0SXNWYWxpZCgpIHsNCiAgICAgIHJldHVybiB0aGlzLmlucHV0SXNWYWxpZFNhdmUgfHwgdGhpcy5pbnB1dElzU2VjcmV0Ow0KICAgIH0sDQogICAgaW5wdXRJc1ZhbGlkU2F2ZSgpIHsNCiAgICAgIHJldHVybiB0aGlzLnBsYXllciAhPT0gdW5kZWZpbmVkOw0KICAgIH0sDQogICAgaW5wdXRJc1NlY3JldCgpIHsNCiAgICAgIHJldHVybiBpc1NlY3JldEltcG9ydCh0aGlzLmlucHV0KSB8fCBUaGVtZS5pc1NlY3JldFRoZW1lKHRoaXMuaW5wdXQpOw0KICAgIH0sDQogICAgaXNGcm9tRnV0dXJlKCkgew0KICAgICAgcmV0dXJuIHRoaXMucGxheWVyLmxhc3RVcGRhdGUgPiBEYXRlLm5vdygpOw0KICAgIH0sDQogICAgbGFzdE9wZW5lZCgpIHsNCiAgICAgIGNvbnN0IG1zID0gRGF0ZS5ub3coKSAtIHRoaXMucGxheWVyLmxhc3RVcGRhdGU7DQogICAgICByZXR1cm4gdGhpcy5pc0Zyb21GdXR1cmUNCiAgICAgICAgPyBgVGhpcyBzYXZlIGlzIGZyb20gJHtUaW1lU3Bhbi5mcm9tTWlsbGlzZWNvbmRzKC1tcykudG9TdHJpbmcoKX0gaW4gdGhlIGZ1dHVyZS5gDQogICAgICAgIDogYFRoaXMgc2F2ZSB3YXMgbGFzdCBvcGVuZWQgJHtUaW1lU3Bhbi5mcm9tTWlsbGlzZWNvbmRzKG1zKS50b1N0cmluZygpfSBhZ28uYDsNCiAgICB9LA0KICAgIG9mZmxpbmVUeXBlKCkgew0KICAgICAgLy8gV2UgdXBkYXRlIGhlcmUgaW4gdGhlIGNvbXB1dGVkIG1ldGhvZCBpbnN0ZWFkIG9mIGVsc2V3aGVyZSBiZWNhdXNlIG90aGVyd2lzZSBpdCBpbml0aWFsaXplcyB0aGUgdGV4dA0KICAgICAgLy8gdG8gYSB3cm9uZyBvciB1bmRlZmluZWQgc2V0dGluZw0KICAgICAgdGhpcy51cGRhdGVPZmZsaW5lU2V0dGluZ3MoKTsNCg0KICAgICAgc3dpdGNoICh0aGlzLm9mZmxpbmVJbXBvcnQpIHsNCiAgICAgICAgY2FzZSBPRkZMSU5FX1BST0dSRVNTX1RZUEUuSU1QT1JURUQ6DQogICAgICAgICAgcmV0dXJuICJVc2luZyBpbXBvcnRlZCBzYXZlIHNldHRpbmdzIjsNCiAgICAgICAgY2FzZSBPRkZMSU5FX1BST0dSRVNTX1RZUEUuTE9DQUw6DQogICAgICAgICAgcmV0dXJuICJVc2luZyBleGlzdGluZyBzYXZlIHNldHRpbmdzIjsNCiAgICAgICAgY2FzZSBPRkZMSU5FX1BST0dSRVNTX1RZUEUuSUdOT1JFRDoNCiAgICAgICAgICByZXR1cm4gIldpbGwgbm90IHNpbXVsYXRlIG9mZmxpbmUgdGltZSI7DQogICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJVbnJlY29nbml6ZWQgb2ZmbGluZSBwcm9ncmVzcyBzZXR0aW5nIGZvciBpbXBvcnRpbmciKTsNCiAgICAgIH0NCiAgICB9LA0KICAgIG9mZmxpbmVEZXRhaWxzKCkgew0KICAgICAgaWYgKHRoaXMub2ZmbGluZUltcG9ydCA9PT0gT0ZGTElORV9QUk9HUkVTU19UWVBFLklHTk9SRUQpIHsNCiAgICAgICAgcmV0dXJuIGBTYXZlIHdpbGwgYmUgaW1wb3J0ZWQgd2l0aG91dCBvZmZsaW5lIHByb2dyZXNzLmA7DQogICAgICB9DQogICAgICBpZiAoIUdhbWVTdG9yYWdlLm9mZmxpbmVFbmFibGVkKSByZXR1cm4gIlRoaXMgc2V0dGluZyB3aWxsIG5vdCBhcHBseSBhbnkgb2ZmbGluZSBwcm9ncmVzcyBhZnRlciBpbXBvcnRpbmcuIjsNCiAgICAgIGlmICh0aGlzLmlzRnJvbUZ1dHVyZSkgcmV0dXJuICJPZmZsaW5lIHByb2dyZXNzIGNhbm5vdCBiZSBzaW11bGF0ZWQgZHVlIHRvIGFuIGluY29uc2lzdGVudCBzeXN0ZW0gY2xvY2sgdGltZS4iOw0KDQogICAgICBjb25zdCBkdXJhdGlvbkluTXMgPSBEYXRlLm5vdygpIC0gdGhpcy5wbGF5ZXIubGFzdFVwZGF0ZTsNCiAgICAgIGNvbnN0IHRpY2tzID0gR2FtZVN0b3JhZ2UubWF4T2ZmbGluZVRpY2tzKGR1cmF0aW9uSW5Ncyk7DQogICAgICByZXR1cm4gYEFmdGVyIGltcG9ydGluZywgd2lsbCBzaW11bGF0ZSAke2Zvcm1hdEludCh0aWNrcyl9IHRpY2tzIG9mIGR1cmF0aW9uDQogICAgICAgICR7VGltZVNwYW4uZnJvbU1pbGxpc2Vjb25kcyhkdXJhdGlvbkluTXMgLyB0aWNrcykudG9TdHJpbmdTaG9ydCgpfSBlYWNoLmA7DQogICAgfSwNCiAgICB3aWxsTG9zZUNvc21ldGljcygpIHsNCiAgICAgIGNvbnN0IGN1cnJTZXRzID0gcGxheWVyLnJlYWxpdHkuZ2x5cGhzLmNvc21ldGljcy51bmxvY2tlZEZyb21ORzsNCiAgICAgIGNvbnN0IGltcG9ydGVkU2V0cyA9IHRoaXMucGxheWVyLnJlYWxpdHk/LmdseXBocy5jb3NtZXRpY3M/LnVubG9ja2VkRnJvbU5HID8/IFtdOw0KICAgICAgcmV0dXJuIGN1cnJTZXRzLmZpbHRlcihzZXQgPT4gIWltcG9ydGVkU2V0cy5pbmNsdWRlcyhzZXQpKS5sZW5ndGggPiAwOw0KICAgIH0sDQogICAgd2lsbExvc2VTcGVlZHJ1bigpIHsNCiAgICAgIHJldHVybiBwbGF5ZXIuc3BlZWRydW4uaXNVbmxvY2tlZCAmJiAhdGhpcy5wbGF5ZXIuc3BlZWRydW4/LmlzVW5sb2NrZWQ7DQogICAgfQ0KICB9LA0KICBtb3VudGVkKCkgew0KICAgIHRoaXMuJHJlZnMuaW5wdXQuc2VsZWN0KCk7DQogIH0sDQogIGRlc3Ryb3llZCgpIHsNCiAgICAvLyBFeHBsaWNpdGx5IHNldHRpbmcgdGhpcyB0byB1bmRlZmluZWQgYWZ0ZXIgY2xvc2luZyBmb3JjZXMgdGhlIGdhbWUgdG8gZmFsbC1iYWNrIHRvIHRoZSBzdG9yZWQgc2V0dGluZ3Mgd2l0aGluDQogICAgLy8gdGhlIHBsYXllciBvYmplY3QgaWYgdGhpcyBtb2RhbCBpcyBjbG9zZWQgLSBpZS4gaXQgbWFrZXMgc3VyZSBhY3Rpb25zIGluIHRoZSBtb2RhbCBkb24ndCBwZXJzaXN0DQogICAgR2FtZVN0b3JhZ2Uub2ZmbGluZUVuYWJsZWQgPSB1bmRlZmluZWQ7DQogICAgR2FtZVN0b3JhZ2Uub2ZmbGluZVRpY2tzID0gdW5kZWZpbmVkOw0KICB9LA0KICBtZXRob2RzOiB7DQogICAgY2hhbmdlT2ZmbGluZVNldHRpbmcoKSB7DQogICAgICB0aGlzLm9mZmxpbmVJbXBvcnQgPSAodGhpcy5vZmZsaW5lSW1wb3J0ICsgMSkgJSAzOw0KICAgIH0sDQogICAgdXBkYXRlT2ZmbGluZVNldHRpbmdzKCkgew0KICAgICAgc3dpdGNoICh0aGlzLm9mZmxpbmVJbXBvcnQpIHsNCiAgICAgICAgY2FzZSBPRkZMSU5FX1BST0dSRVNTX1RZUEUuSU1QT1JURUQ6DQogICAgICAgICAgLy8gVGhlc2UgYXJlIGRlZmF1bHQgdmFsdWVzIGZyb20gYSBuZXcgc2F2ZSwgdXNlZCBpZiBpbXBvcnRpbmcgZnJvbSBwcmUtcmVhbGl0eSB3aGVyZSB0aGVzZSBwcm9wcyBkb24ndCBleGlzdA0KICAgICAgICAgIEdhbWVTdG9yYWdlLm9mZmxpbmVFbmFibGVkID0gdGhpcy5wbGF5ZXIub3B0aW9ucy5vZmZsaW5lUHJvZ3Jlc3MgPz8gdHJ1ZTsNCiAgICAgICAgICBHYW1lU3RvcmFnZS5vZmZsaW5lVGlja3MgPSB0aGlzLnBsYXllci5vcHRpb25zLm9mZmxpbmVUaWNrcyA/PyAxZTU7DQogICAgICAgICAgYnJlYWs7DQogICAgICAgIGNhc2UgT0ZGTElORV9QUk9HUkVTU19UWVBFLkxPQ0FMOg0KICAgICAgICAgIEdhbWVTdG9yYWdlLm9mZmxpbmVFbmFibGVkID0gcGxheWVyLm9wdGlvbnMub2ZmbGluZVByb2dyZXNzOw0KICAgICAgICAgIEdhbWVTdG9yYWdlLm9mZmxpbmVUaWNrcyA9IHBsYXllci5vcHRpb25zLm9mZmxpbmVUaWNrczsNCiAgICAgICAgICBicmVhazsNCiAgICAgICAgY2FzZSBPRkZMSU5FX1BST0dSRVNTX1RZUEUuSUdOT1JFRDoNCiAgICAgICAgICBHYW1lU3RvcmFnZS5vZmZsaW5lRW5hYmxlZCA9IGZhbHNlOw0KICAgICAgICAgIGJyZWFrOw0KICAgICAgfQ0KICAgIH0sDQogICAgaW1wb3J0U2F2ZSgpIHsNCiAgICAgIGlmICghdGhpcy5pbnB1dElzVmFsaWQpIHJldHVybjsNCiAgICAgIHRoaXMuZW1pdENsb3NlKCk7DQogICAgICBHYW1lU3RvcmFnZS5pbXBvcnQodGhpcy5pbnB1dCk7DQogICAgfSwNCiAgfSwNCn07DQo="},{"version":3,"sources":["ImportSaveModal.vue"],"names":[],"mappingsfile":"ImportSaveModal.vue","sourceRoot":"src/components/modals","sourcesContent":["<script>\r\nimport ModalWrapperChoice from \"@/components/modals/ModalWrapperChoice\";\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\n\r\nconst OFFLINE_PROGRESS_TYPE = {\r\n  IMPORTED: 0,\r\n  LOCAL: 1,\r\n  IGNORED: 2,\r\n};\r\n\r\nexport default {\r\n  name: \"ImportSaveModal\",\r\n  components: {\r\n    ModalWrapperChoice,\r\n    PrimaryButton\r\n  },\r\n  data() {\r\n    return {\r\n      input: \"\",\r\n      offlineImport: OFFLINE_PROGRESS_TYPE.IMPORTED,\r\n    };\r\n  },\r\n  computed: {\r\n    saveCheckString() {\r\n      const save = GameSaveSerializer.deserialize(this.input);\r\n      const rawString = GameStorage.checkPlayerObject(save);\r\n      // Keep the length bounded; we don't want the modal to be too big for the screen for particularly bad errors\r\n      return rawString.length > 300 ? `${rawString.slice(0, 297)}...` : rawString;\r\n    },\r\n    player() {\r\n      return this.saveCheckString === \"\" ? GameSaveSerializer.deserialize(this.input) : undefined;\r\n    },\r\n    progress() {\r\n      return PlayerProgress.of(this.player);\r\n    },\r\n    fileName() {\r\n      return this.player.options.saveFileName;\r\n    },\r\n    antimatter() {\r\n      return this.player.antimatter || this.player.money;\r\n    },\r\n    infinities() {\r\n      // Infinity count data is stored in either player.infinitied or player.infinities based on if the save is before\r\n      // or after the reality update, and this explicit check is needed as it runs before any migration code.\r\n      const infinityData = this.player.infinitied ? this.player.infinitied : this.player.infinities;\r\n      return new Decimal(infinityData);\r\n    },\r\n    hasInput() {\r\n      return this.input !== \"\";\r\n    },\r\n    inputIsValid() {\r\n      return this.inputIsValidSave || this.inputIsSecret;\r\n    },\r\n    inputIsValidSave() {\r\n      return this.player !== undefined;\r\n    },\r\n    inputIsSecret() {\r\n      return isSecretImport(this.input) || Theme.isSecretTheme(this.input);\r\n    },\r\n    isFromFuture() {\r\n      return this.player.lastUpdate > Date.now();\r\n    },\r\n    lastOpened() {\r\n      const ms = Date.now() - this.player.lastUpdate;\r\n      return this.isFromFuture\r\n        ? `This save is from ${TimeSpan.fromMilliseconds(-ms).toString()} in the future.`\r\n        : `This save was last opened ${TimeSpan.fromMilliseconds(ms).toString()} ago.`;\r\n    },\r\n    offlineType() {\r\n      // We update here in the computed method instead of elsewhere because otherwise it initializes the text\r\n      // to a wrong or undefined setting\r\n      this.updateOfflineSettings();\r\n\r\n      switch (this.offlineImport) {\r\n        case OFFLINE_PROGRESS_TYPE.IMPORTED:\r\n          return \"Using imported save settings\";\r\n        case OFFLINE_PROGRESS_TYPE.LOCAL:\r\n          return \"Using existing save settings\";\r\n        case OFFLINE_PROGRESS_TYPE.IGNORED:\r\n          return \"Will not simulate offline time\";\r\n        default:\r\n          throw new Error(\"Unrecognized offline progress setting for importing\");\r\n      }\r\n    },\r\n    offlineDetails() {\r\n      if (this.offlineImport === OFFLINE_PROGRESS_TYPE.IGNORED) {\r\n        return `Save will be imported without offline progress.`;\r\n      }\r\n      if (!GameStorage.offlineEnabled) return \"This setting will not apply any offline progress after importing.\";\r\n      if (this.isFromFuture) return \"Offline progress cannot be simulated due to an inconsistent system clock time.\";\r\n\r\n      const durationInMs = Date.now() - this.player.lastUpdate;\r\n      const ticks = GameStorage.maxOfflineTicks(durationInMs);\r\n      return `After importing, will simulate ${formatInt(ticks)} ticks of duration\r\n        ${TimeSpan.fromMilliseconds(durationInMs / ticks).toStringShort()} each.`;\r\n    },\r\n    willLoseCosmetics() {\r\n      const currSets = player.reality.glyphs.cosmetics.unlockedFromNG;\r\n      const importedSets = this.player.reality?.glyphs.cosmetics?.unlockedFromNG ?? [];\r\n      return currSets.filter(set => !importedSets.includes(set)).length > 0;\r\n    },\r\n    willLoseSpeedrun() {\r\n      return player.speedrun.isUnlocked && !this.player.speedrun?.isUnlocked;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$refs.input.select();\r\n  },\r\n  destroyed() {\r\n    // Explicitly setting this to undefined after closing forces the game to fall-back to the stored settings within\r\n    // the player object if this modal is closed - ie. it makes sure actions in the modal don't persist\r\n    GameStorage.offlineEnabled = undefined;\r\n    GameStorage.offlineTicks = undefined;\r\n  },\r\n  methods: {\r\n    changeOfflineSetting() {\r\n      this.offlineImport = (this.offlineImport + 1) % 3;\r\n    },\r\n    updateOfflineSettings() {\r\n      switch (this.offlineImport) {\r\n        case OFFLINE_PROGRESS_TYPE.IMPORTED:\r\n          // These are default values from a new save, used if importing from pre-reality where these props don't exist\r\n          GameStorage.offlineEnabled = this.player.options.offlineProgress ?? true;\r\n          GameStorage.offlineTicks = this.player.options.offlineTicks ?? 1e5;\r\n          break;\r\n        case OFFLINE_PROGRESS_TYPE.LOCAL:\r\n          GameStorage.offlineEnabled = player.options.offlineProgress;\r\n          GameStorage.offlineTicks = player.options.offlineTicks;\r\n          break;\r\n        case OFFLINE_PROGRESS_TYPE.IGNORED:\r\n          GameStorage.offlineEnabled = false;\r\n          break;\r\n      }\r\n    },\r\n    importSave() {\r\n      if (!this.inputIsValid) return;\r\n      this.emitClose();\r\n      GameStorage.import(this.input);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapperChoice\r\n    :show-cancel=\"!inputIsValid\"\r\n    :show-confirm=\"false\"\r\n  >\r\n    <template #header>\r\n      Input your save\r\n    </template>\r\n    <input\r\n      ref=\"input\"\r\n      v-model=\"input\"\r\n      type=\"text\"\r\n      class=\"c-modal-input c-modal-import__input\"\r\n      @keyup.enter=\"importSave\"\r\n      @keyup.esc=\"emitClose\"\r\n    >\r\n    <div class=\"c-modal-import__save-info\">\r\n      <div v-if=\"inputIsSecret\">\r\n        ???\r\n      </div>\r\n      <template v-else-if=\"inputIsValidSave\">\r\n        <div v-if=\"fileName\">\r\n          File name: {{ fileName }}\r\n        </div>\r\n        <div>Antimatter: {{ formatPostBreak(antimatter, 2, 1) }}</div>\r\n        <div v-if=\"progress.isInfinityUnlocked\">\r\n          Infinities: {{ formatPostBreak(infinities, 2) }}\r\n        </div>\r\n        <div v-if=\"progress.isEternityUnlocked\">\r\n          Eternities: {{ formatPostBreak(player.eternities, 2) }}\r\n        </div>\r\n        <div v-if=\"progress.isRealityUnlocked\">\r\n          Realities: {{ formatPostBreak(player.realities, 2) }}\r\n        </div>\r\n        <div v-if=\"progress.hasFullCompletion\">\r\n          Full game completions: {{ formatInt(player.records.fullGameCompletions) }}\r\n        </div>\r\n        <div class=\"c-modal-import__warning\">\r\n          (Your current save file will be overwritten!)\r\n        </div>\r\n        <br>\r\n        <div>\r\n          {{ lastOpened }}\r\n          <div\r\n            class=\"o-primary-btn\"\r\n            @click=\"changeOfflineSetting\"\r\n          >\r\n            Offline Progress: {{ offlineType }}\r\n          </div>\r\n          <span v-html=\"offlineDetails\" />\r\n        </div>\r\n      </template>\r\n      <div v-else-if=\"hasInput\">\r\n        Not a valid save:\r\n        <br>\r\n        {{ saveCheckString }}\r\n      </div>\r\n      <div\r\n        v-if=\"player\"\r\n        class=\"c-modal-hard-reset-danger\"\r\n      >\r\n        <div v-if=\"willLoseCosmetics\">\r\n          <br>\r\n          Glyph cosmetic sets from completing the game are tied to your save.\r\n          <br>\r\n          Importing this save will cause you to lose some sets.\r\n        </div>\r\n        <div v-if=\"willLoseSpeedrun\">\r\n          <br>\r\n          You will lose the ability to do a Speedrun, as this save does not have it unlocked.\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <PrimaryButton\r\n      v-if=\"inputIsValid\"\r\n      class=\"o-primary-btn--width-medium c-modal-message__okay-btn c-modal__confirm-btn\"\r\n      @click=\"importSave\"\r\n    >\r\n      Import\r\n    </PrimaryButton>\r\n  </ModalWrapperChoice>\r\n</template>"]}]}