{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\ImportAutomatorDataModal.vue?vue&type=style&index=0&id=59eb0946&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\ImportAutomatorDataModal.vue","mtime":1745241596819},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5sLWhhcy1lcnJvcnMgew0KICBjb2xvcjogcmVkOw0KfQ0KDQouYy1pbXBvcnQtZGF0YS1uYW1lIHsNCiAgcGFkZGluZzogMCAxcmVtOw0KfQ0K"},{"version":3,"sources":["ImportAutomatorDataModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoOA;AACA;AACA;;AAEA;AACA;AACA","file":"ImportAutomatorDataModal.vue","sourceRoot":"src/components/modals","sourcesContent":["<script>\r\nimport { hasCompilationErrors } from \"@/core/automator\";\r\n\r\nimport ModalWrapperChoice from \"@/components/modals/ModalWrapperChoice\";\r\n\r\nexport default {\r\n  name: \"ImportAutomatorDataModal\",\r\n  components: {\r\n    ModalWrapperChoice,\r\n  },\r\n  data() {\r\n    return {\r\n      input: \"\",\r\n      isValid: false,\r\n      hasExtraData: false,\r\n      scriptName: \"\",\r\n      lineCount: 0,\r\n      scriptContent: \"\",\r\n      hasErrors: false,\r\n      importedPresets: [],\r\n      importedConstants: [],\r\n      ignorePresets: false,\r\n      ignoreConstants: false,\r\n    };\r\n  },\r\n  computed: {\r\n    hasPresets() {\r\n      return (this.importedPresets?.length ?? 0) !== 0;\r\n    },\r\n    hasConstants() {\r\n      return (this.importedConstants?.length ?? 0) !== 0;\r\n    },\r\n    isImportingExtraData() {\r\n      // These two checks differ because we suppress the preset import warning when importing into an empty\r\n      // slot, but we use this prop for information on importing rather than overwriting\r\n      const hasNewConstants = this.willOverwriteConstant || this.constantCountAfterImport > this.currentConstants;\r\n      const isImportingPresets = this.importedPresets ? !this.ignorePresets : false;\r\n      const isImportingConstants = this.importedConstants\r\n        ? !this.ignoreConstants && hasNewConstants\r\n        : false;\r\n      return this.isValid && this.hasExtraData && (isImportingPresets || isImportingConstants);\r\n    },\r\n    currentPresets: () => player.timestudy.presets,\r\n    currentConstants: () => Object.keys(player.reality.automator.constants),\r\n    maxConstantCount() {\r\n      return AutomatorData.MAX_ALLOWED_CONSTANT_COUNT;\r\n    },\r\n    // Number of studies with different contents which will be overwritten\r\n    overwrittenPresetCount() {\r\n      let mismatchedPresets = 0;\r\n      for (const toImport of this.importedPresets) {\r\n        const existingPreset = this.currentPresets[toImport.id];\r\n        const isEmpty = existingPreset.name === \"\" && existingPreset.studies === \"\";\r\n        if (!isEmpty && (existingPreset.name !== toImport.name || existingPreset.studies !== toImport.studies)) {\r\n          mismatchedPresets++;\r\n        }\r\n      }\r\n      return mismatchedPresets;\r\n    },\r\n    willOverwriteConstant() {\r\n      if (!this.hasExtraData) return false;\r\n      const all = new Set();\r\n      for (const constant of this.currentConstants) all.add(constant);\r\n      for (const constant of this.importedConstants) {\r\n        if (all.has(constant.key) && player.reality.automator.constants[constant.key] !== constant.value) return true;\r\n      }\r\n      return false;\r\n    },\r\n    constantCountAfterImport() {\r\n      if (!this.hasExtraData) return this.currentConstants.length;\r\n      const all = new Set();\r\n      for (const constant of this.currentConstants) all.add(constant);\r\n      for (const constant of this.importedConstants) all.add(constant.key);\r\n      return all.size;\r\n    },\r\n    extraConstants() {\r\n      return this.constantCountAfterImport - this.maxConstantCount;\r\n    },\r\n    presetButtonText() {\r\n      return this.ignorePresets ? \"Will Ignore Presets\" : \"Will Import Presets\";\r\n    },\r\n    constantButtonText() {\r\n      return this.ignoreConstants ? \"Will Ignore Constants\" : \"Will Import Constants\";\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$refs.input.select();\r\n  },\r\n  methods: {\r\n    update() {\r\n      // We need to sequentially parse full data and then single script data in order to handle both in the same modal.\r\n      // Parsing order doesn't matter due to the fact that export formatting means it's only ever one or the other.\r\n      let parsed = AutomatorBackend.parseFullScriptData(this.input);\r\n      if (parsed) this.hasExtraData = true;\r\n      else {\r\n        parsed = AutomatorBackend.parseScriptContents(this.input);\r\n        this.hasExtraData = false;\r\n      }\r\n      if (!parsed) {\r\n        this.isValid = false;\r\n        return;\r\n      }\r\n\r\n      // Some of these may be undefined for single script importing (ie. no additional data attached) or for scripts\r\n      // with errors. These cases are checked elsewhere\r\n      this.scriptName = parsed.name;\r\n      this.scriptContent = parsed.content;\r\n      this.importedPresets = parsed.presets;\r\n      this.importedConstants = parsed.constants;\r\n      this.lineCount = this.scriptContent.split(\"\\n\").length;\r\n      this.hasErrors = hasCompilationErrors(this.scriptContent);\r\n      this.isValid = true;\r\n    },\r\n    importSave() {\r\n      if (!this.isValid) return;\r\n      if (this.hasExtraData) {\r\n        AutomatorBackend.importFullScriptData(this.input, {\r\n          presets: this.ignorePresets,\r\n          constants: this.ignoreConstants\r\n        });\r\n      } else {\r\n        AutomatorBackend.importScriptContents(this.input);\r\n      }\r\n      this.emitClose();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapperChoice\r\n    :show-cancel=\"!isValid\"\r\n    :show-confirm=\"isValid\"\r\n    @confirm=\"importSave\"\r\n  >\r\n    <template #header>\r\n      Import Automator Script Data\r\n    </template>\r\n    This will create a new Automator script at the end of your list.\r\n    <span v-if=\"isImportingExtraData\">This will also import additional data related to the script.</span>\r\n    <input\r\n      ref=\"input\"\r\n      v-model=\"input\"\r\n      type=\"text\"\r\n      class=\"c-modal-input c-modal-import__input\"\r\n      @keyup.enter=\"importSave\"\r\n      @keyup.esc=\"emitClose\"\r\n    >\r\n    <div v-if=\"isValid\">\r\n      Script name: {{ scriptName }}\r\n      <br>\r\n      Line count: {{ lineCount }}\r\n      <div v-if=\"hasPresets\">\r\n        <br>\r\n        Study Presets:\r\n        <span\r\n          v-for=\"(preset, id) in importedPresets\"\r\n          :key=\"id\"\r\n          class=\"c-import-data-name\"\r\n        >\r\n          <span v-if=\"preset.name\">\"{{ preset.name }}\" (slot {{ preset.id + 1 }})</span>\r\n          <span v-else>Preset slot #{{ preset.id + 1 }}</span>\r\n        </span>\r\n        <div\r\n          v-if=\"!ignorePresets && overwrittenPresetCount > 0\"\r\n          class=\"l-has-errors\"\r\n        >\r\n          {{ formatInt(overwrittenPresetCount) }} of your existing presets\r\n          will be overwritten by imported presets!\r\n        </div>\r\n        <br>\r\n        <button\r\n          class=\"o-primary-btn\"\r\n          @click=\"ignorePresets = !ignorePresets\"\r\n        >\r\n          {{ presetButtonText }}\r\n        </button>\r\n      </div>\r\n      <div v-if=\"hasConstants\">\r\n        <br>\r\n        Constants:\r\n        <span\r\n          v-for=\"(constant, id) in importedConstants\"\r\n          :key=\"id + 10\"\r\n          class=\"c-import-data-name\"\r\n        >\r\n          \"{{ constant.key }}\"\r\n        </span>\r\n        <div\r\n          v-if=\"!ignoreConstants && (willOverwriteConstant || extraConstants > 0)\"\r\n          class=\"l-has-errors\"\r\n        >\r\n          <span v-if=\"willOverwriteConstant\">Some of your existing constants will be overwritten!</span>\r\n          <br v-if=\"willOverwriteConstant && extraConstants > 0\">\r\n          <span v-if=\"extraConstants > 0\">\r\n            {{ quantifyInt(\"constant\", extraConstants) }} will not be imported due to the\r\n            {{ maxConstantCount }} constant limit.\r\n          </span>\r\n        </div>\r\n        <br>\r\n        <button\r\n          class=\"o-primary-btn\"\r\n          @click=\"ignoreConstants = !ignoreConstants\"\r\n        >\r\n          {{ constantButtonText }}\r\n        </button>\r\n      </div>\r\n      <br>\r\n      <div\r\n        v-if=\"hasErrors\"\r\n        class=\"l-has-errors\"\r\n      >\r\n        This script has errors which need to be fixed before it can be run!\r\n      </div>\r\n      <div v-if=\"hasErrors && isImportingExtraData\">\r\n        <i>Some errors may be fixed with the additional data being imported.</i>\r\n      </div>\r\n    </div>\r\n    <div v-else-if=\"input.length !== 0\">\r\n      Invalid Automator data string\r\n    </div>\r\n    <template #confirm-text>\r\n      Import\r\n    </template>\r\n  </ModalWrapperChoice>\r\n</template>\r\n\r\n<style scoped>\r\n.l-has-errors {\r\n  color: red;\r\n}\r\n\r\n.c-import-data-name {\r\n  padding: 0 1rem;\r\n}\r\n</style>\r\n"]}]}