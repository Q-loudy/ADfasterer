{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\automator\\AutomatorDefineSingleEntry.vue?vue&type=style&index=0&id=681dcf32&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\automator\\AutomatorDefineSingleEntry.vue","mtime":1745241597067},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouYy1kZWxldGUtYnV0dG9uIHsNCiAgZGlzcGxheTogZmxleDsNCiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogIGJvcmRlcjogdmFyKC0tdmFyLWJvcmRlci13aWR0aCwgMC4ycmVtKSBzb2xpZCB2YXIoLS1jb2xvci1hdXRvbWF0b3ItY29udHJvbHMtYm9yZGVyKTsNCiAgYm9yZGVyLXJhZGl1czogdmFyKC0tdmFyLWJvcmRlci1yYWRpdXMsIDAuM3JlbSk7DQogIG1hcmdpbjogMC4xcmVtIC0wLjRyZW0gMC4xcmVtIDAuNnJlbTsNCiAgY3Vyc29yOiBwb2ludGVyOw0KICBjb2xvcjogdmFyKC0tY29sb3ItYXV0b21hdG9yLWRvY3MtZm9udCk7DQogIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWNvbG9yLWF1dG9tYXRvci1jb250cm9scy1pbmFjdGl2ZSk7DQp9DQoNCi5jLWRlbGV0ZS1idXR0b246aG92ZXIgew0KICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvci1hdXRvbWF0b3ItZXJyb3ItYmFja2dyb3VuZCk7DQp9DQoNCi5sLXNpbmdsZS1kZWZpbml0aW9uLWNvbnRhaW5lciB7DQogIGRpc3BsYXk6IGZsZXg7DQogIGZsZXgtZGlyZWN0aW9uOiByb3c7DQogIHBhZGRpbmc6IDAuNXJlbTsNCn0NCg0KLm8tYXJyb3ctcGFkZGluZyB7DQogIGRpc3BsYXk6IGZsZXg7DQogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQogIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KICBwYWRkaW5nOiAwIDFyZW07DQp9DQoNCi5jLWRlZmluZS10ZXh0Ym94IHsNCiAgZGlzcGxheTogaW5saW5lLWJsb2NrOw0KICBmb250LWZhbWlseTogVHlwZXdyaXRlciwgc2VyaWY7DQogIGZvbnQtc2l6ZTogMS4xcmVtOw0KICBiYWNrZ3JvdW5kOiB2YXIoLS1jb2xvci1ibG9ja21hdG9yLWJsb2NrLWJhY2tncm91bmQpOw0KICBib3JkZXI6IDAuMXJlbSBzb2xpZCB2YXIoLS1jb2xvci1ibG9ja21hdG9yLWJsb2NrLWJvcmRlcik7DQogIGJvcmRlci1yYWRpdXM6IHZhcigtLXZhci1ib3JkZXItcmFkaXVzLCAwLjVyZW0pOw0KICBwYWRkaW5nOiAwLjVyZW07DQogIGNvbG9yOiAjMDBhYzAwOw0KfQ0KDQoubC1lcnJvci10ZXh0Ym94IHsNCiAgYmFja2dyb3VuZDogdmFyKC0tY29sb3ItYXV0b21hdG9yLWVycm9yLWJhY2tncm91bmQpOw0KfQ0KDQoubC1saW1pdC10ZXh0Ym94IHsNCiAgYm9yZGVyLXN0eWxlOiBkb3R0ZWQ7DQogIGJvcmRlci1jb2xvcjogdmFyKC0tY29sb3ItYXV0b21hdG9yLWVycm9yLW91dGxpbmUpOw0KfQ0KDQouYy1hbGlhcyB7DQogIG1pbi13aWR0aDogMTQuNXJlbTsNCn0NCg0KLmMtdmFsdWUgew0KICB3aWR0aDogMTAwJTsNCn0NCg=="},{"version":3,"sources":["AutomatorDefineSingleEntry.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"AutomatorDefineSingleEntry.vue","sourceRoot":"src/components/tabs/automator","sourcesContent":["<script>\r\nimport { forbiddenConstantPatterns } from \"@/core/automator\";\r\n\r\nexport default {\r\n  name: \"AutomatorDefineSingleEntry\",\r\n  props: {\r\n    constant: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      oldAlias: \"\",\r\n      aliasString: \"\",\r\n      valueString: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    maxNameLength() {\r\n      return AutomatorData.MAX_ALLOWED_CONSTANT_NAME_LENGTH;\r\n    },\r\n    maxValueLength() {\r\n      return AutomatorData.MAX_ALLOWED_CONSTANT_VALUE_LENGTH;\r\n    },\r\n  },\r\n  created() {\r\n    this.aliasString = this.constant;\r\n    this.oldAlias = this.aliasString;\r\n    this.valueString = player.reality.automator.constants[this.aliasString];\r\n  },\r\n  methods: {\r\n    // We combine error checking from both input fields together and only show one of them because showing multiple\r\n    // errors at once is unnecessary and results in some bad UI overlapping\r\n    currentError() {\r\n      if (!this.aliasString) return null;\r\n\r\n      const isValidName = this.aliasString.match(/^[a-zA-Z_][a-zA-Z_0-9]*$/u);\r\n      const alreadyExists = Object.keys(player.reality.automator.constants).includes(this.aliasString) &&\r\n        this.aliasString !== this.oldAlias;\r\n      // Use toLowerCase() in order to check against key words in a case-insensitive manner; all the stored regex\r\n      // patterns in forbiddenConstantPatterns which get meaningfully checked against are a mixture of lowercase\r\n      // letters and regex metacharacters\r\n      const hasCommandConflict = forbiddenConstantPatterns.some(p => {\r\n        const matchObj = this.aliasString.toLowerCase().match(p);\r\n        return matchObj ? matchObj[0] === this.aliasString.toLowerCase() : false;\r\n      });\r\n      const shadowsPrototype = [\"constructor\", \"hasOwnProperty\", \"isPrototypeOf\", \"propertyIsEnumerable\",\r\n        \"toLocaleString\", \"toString\", \"toValueOf\"].some(p => this.aliasString.match(p));\r\n\r\n      if (!isValidName) return \"Constant name must be alphanumeric without spaces and cannot start with a number\";\r\n      if (alreadyExists) return \"You have already defined a constant with this name\";\r\n      if (hasCommandConflict) return \"Constant name conflicts with a command key word\";\r\n      if (shadowsPrototype) return \"Constant name cannot shadow a built-in Javascript prototype prop\";\r\n\r\n      if (!this.valueString) return \"Constant value cannot be empty\";\r\n\r\n      const isNumber = this.valueString.match(/^-?(0|[1-9]\\d*)(\\.\\d+)?([eE][+-]?\\d+)?$/u);\r\n      // Note: Does not do validation for studies existing\r\n      const isStudyString = TimeStudyTree.isValidImportString(this.valueString);\r\n\r\n      if (!isNumber && !isStudyString) return \"Constant value must either be a number or Time Study string\";\r\n      return null;\r\n    },\r\n    errorTooltip() {\r\n      const error = this.currentError();\r\n      if (!error) return undefined;\r\n      return {\r\n        content:\r\n          `<div class=\"c-block-automator-error\">\r\n          <div>${error}</div>\r\n        </div>`,\r\n        html: true,\r\n        trigger: \"manual\",\r\n        show: true,\r\n        classes: [\"general-tooltip\"]\r\n      };\r\n    },\r\n    handleFocus(focus) {\r\n      if (focus || this.currentError()) return;\r\n      if (!this.aliasString) AutomatorBackend.deleteConstant(this.oldAlias);\r\n      else if (!this.oldAlias) AutomatorBackend.addConstant(this.aliasString, this.valueString);\r\n      else if (this.oldAlias === this.aliasString) AutomatorBackend.modifyConstant(this.aliasString, this.valueString);\r\n      else AutomatorBackend.renameConstant(this.oldAlias, this.aliasString);\r\n      this.oldAlias = this.aliasString;\r\n\r\n      // This makes scripts respond immediately to newly-defined constants if the player types them into the\r\n      // script before defining them here\r\n      AutomatorData.recalculateErrors();\r\n      if (player.reality.automator.type === AUTOMATOR_TYPE.BLOCK) BlockAutomator.parseTextFromBlocks();\r\n    },\r\n    deleteConstant() {\r\n      AutomatorBackend.deleteConstant(this.aliasString);\r\n      this.oldAlias = \"\";\r\n      this.aliasString = \"\";\r\n      this.valueString = \"\";\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-single-definition-container\">\r\n    <input\r\n      v-model=\"aliasString\"\r\n      class=\"c-define-textbox c-alias\"\r\n      :class=\"{ 'l-limit-textbox' : aliasString.length === maxNameLength }\"\r\n      placeholder=\"New constant...\"\r\n      :maxlength=\"maxNameLength\"\r\n      @focusin=\"handleFocus(true)\"\r\n      @focusout=\"handleFocus(false)\"\r\n    >\r\n    <span\r\n      v-if=\"aliasString\"\r\n      v-tooltip=\"errorTooltip()\"\r\n      class=\"o-arrow-padding\"\r\n    >\r\n      ðŸ ˆ\r\n    </span>\r\n    <input\r\n      v-if=\"aliasString\"\r\n      v-model=\"valueString\"\r\n      class=\"c-define-textbox c-value\"\r\n      :class=\"{ 'l-limit-textbox' : valueString && valueString.length === maxValueLength }\"\r\n      placeholder=\"Value for constant...\"\r\n      :maxlength=\"maxValueLength\"\r\n      @focusin=\"handleFocus(true)\"\r\n      @focusout=\"handleFocus(false)\"\r\n    >\r\n    <button\r\n      v-if=\"aliasString\"\r\n      v-tooltip=\"'Delete this constant'\"\r\n      class=\"c-delete-button fas fa-eraser\"\r\n      @click=\"deleteConstant\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-delete-button {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border: var(--var-border-width, 0.2rem) solid var(--color-automator-controls-border);\r\n  border-radius: var(--var-border-radius, 0.3rem);\r\n  margin: 0.1rem -0.4rem 0.1rem 0.6rem;\r\n  cursor: pointer;\r\n  color: var(--color-automator-docs-font);\r\n  background-color: var(--color-automator-controls-inactive);\r\n}\r\n\r\n.c-delete-button:hover {\r\n  background-color: var(--color-automator-error-background);\r\n}\r\n\r\n.l-single-definition-container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  padding: 0.5rem;\r\n}\r\n\r\n.o-arrow-padding {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  padding: 0 1rem;\r\n}\r\n\r\n.c-define-textbox {\r\n  display: inline-block;\r\n  font-family: Typewriter, serif;\r\n  font-size: 1.1rem;\r\n  background: var(--color-blockmator-block-background);\r\n  border: 0.1rem solid var(--color-blockmator-block-border);\r\n  border-radius: var(--var-border-radius, 0.5rem);\r\n  padding: 0.5rem;\r\n  color: #00ac00;\r\n}\r\n\r\n.l-error-textbox {\r\n  background: var(--color-automator-error-background);\r\n}\r\n\r\n.l-limit-textbox {\r\n  border-style: dotted;\r\n  border-color: var(--color-automator-error-outline);\r\n}\r\n\r\n.c-alias {\r\n  min-width: 14.5rem;\r\n}\r\n\r\n.c-value {\r\n  width: 100%;\r\n}\r\n</style>\r\n"]}]}