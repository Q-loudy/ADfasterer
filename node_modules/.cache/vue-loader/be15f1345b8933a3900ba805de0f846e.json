{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\GlyphShowcasePanelModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\GlyphShowcasePanelModal.vue","mtime":1745241596818},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgR2x5cGhTZXROYW1lIGZyb20gIkAvY29tcG9uZW50cy9HbHlwaFNldE5hbWUiOw0KaW1wb3J0IEdseXBoU2hvd2Nhc2VQYW5lbEVudHJ5IGZyb20gIkAvY29tcG9uZW50cy9tb2RhbHMvR2x5cGhTaG93Y2FzZVBhbmVsRW50cnkiOw0KaW1wb3J0IE1vZGFsV3JhcHBlciBmcm9tICJAL2NvbXBvbmVudHMvbW9kYWxzL01vZGFsV3JhcHBlciI7DQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgbmFtZTogIkdseXBoU2hvd2Nhc2VQYW5lbE1vZGFsIiwNCiAgY29tcG9uZW50czogew0KICAgIEdseXBoU2V0TmFtZSwNCiAgICBNb2RhbFdyYXBwZXIsDQogICAgR2x5cGhTaG93Y2FzZVBhbmVsRW50cnksDQogIH0sDQogIHByb3BzOiB7DQogICAgbmFtZTogew0KICAgICAgdHlwZTogU3RyaW5nLA0KICAgICAgcmVxdWlyZWQ6IHRydWUNCiAgICB9LA0KICAgIGdseXBoU2V0OiB7DQogICAgICB0eXBlOiBBcnJheSwNCiAgICAgIHJlcXVpcmVkOiB0cnVlDQogICAgfSwNCiAgICBpc0dseXBoU2VsZWN0aW9uOiB7DQogICAgICB0eXBlOiBCb29sZWFuLA0KICAgICAgZGVmYXVsdDogZmFsc2UNCiAgICB9LA0KICAgIHNob3dTZXROYW1lOiB7DQogICAgICB0eXBlOiBCb29sZWFuLA0KICAgICAgZGVmYXVsdDogdHJ1ZQ0KICAgIH0sDQogICAgZGlzcGxheVNhY3JpZmljZTogew0KICAgICAgdHlwZTogQm9vbGVhbiwNCiAgICAgIGRlZmF1bHQ6IHRydWUNCiAgICB9LA0KICB9LA0KICBkYXRhKCkgew0KICAgIHJldHVybiB7DQogICAgICBnbHlwaHM6IFtdLA0KICAgICAgZ2FpbmVkTGV2ZWw6IDAsDQogICAgICBjYW5TYWNyaWZpY2U6IGZhbHNlLA0KICAgICAgcmVhbGl0eUdseXBoQm9vc3Q6IDAsDQogICAgfTsNCiAgfSwNCiAgY29tcHV0ZWQ6IHsNCiAgICBtYXhHbHlwaEVmZmVjdHMoKSB7DQogICAgICBsZXQgbWF4RWZmZWN0cyA9IDE7DQogICAgICBmb3IgKGNvbnN0IGdseXBoIG9mIHRoaXMuZ2x5cGhzKSB7DQogICAgICAgIG1heEVmZmVjdHMgPSBNYXRoLm1heChnZXRHbHlwaEVmZmVjdHNGcm9tQml0bWFzayhnbHlwaC5lZmZlY3RzKS5maWx0ZXIoZSA9PiBlLmlzR2VuZXJhdGVkKS5sZW5ndGgsIG1heEVmZmVjdHMpOw0KICAgICAgfQ0KICAgICAgcmV0dXJuIG1heEVmZmVjdHM7DQogICAgfSwNCiAgICBjb250YWluZXJDbGFzcygpIHsNCiAgICAgIHJldHVybiB7DQogICAgICAgICJjLWdseXBoLWNob2ljZS1jb250YWluZXIiOiB0cnVlLA0KICAgICAgICAiYy1nbHlwaC1jaG9pY2UtY29udGFpbmVyLXNpbmdsZSI6IHRoaXMuZ2x5cGhzLmxlbmd0aCA9PT0gMSwNCiAgICAgIH07DQogICAgfQ0KICB9LA0KICBtZXRob2RzOiB7DQogICAgdXBkYXRlKCkgew0KICAgICAgdGhpcy5nbHlwaHMgPSB0aGlzLmlzR2x5cGhTZWxlY3Rpb24NCiAgICAgICAgPyBHbHlwaFNlbGVjdGlvbi5nbHlwaExpc3QoR2x5cGhTZWxlY3Rpb24uY2hvaWNlQ291bnQsIGdhaW5lZEdseXBoTGV2ZWwoKSwgeyBpc0Nob29zaW5nR2x5cGg6IGZhbHNlIH0pDQogICAgICAgIDogdGhpcy5nbHlwaFNldC5maWx0ZXIoeCA9PiB4KTsNCiAgICAgIHRoaXMuc29ydEdseXBocygpOw0KICAgICAgdGhpcy5nYWluZWRMZXZlbCA9IGdhaW5lZEdseXBoTGV2ZWwoKS5hY3R1YWxMZXZlbDsNCiAgICAgIC8vIFRoZXJlIHNob3VsZCBvbmx5IGJlIG9uZSByZWFsaXR5IGdseXBoOyB0aGlzIHBpY2tzIG9uZSBwc2V1ZG8tcmFuZG9tbHkgaWYgbXVsdGlwbGUgYXJlIGNoZWF0ZWQvZ2xpdGNoZWQgaW4NCiAgICAgIGNvbnN0IHJlYWxpdHlHbHlwaCA9IHRoaXMuZ2x5cGhzLmZpbHRlcihnID0+IGcudHlwZSA9PT0gInJlYWxpdHkiKVswXTsNCiAgICAgIHRoaXMucmVhbGl0eUdseXBoQm9vc3QgPSByZWFsaXR5R2x5cGgNCiAgICAgICAgPyBHbHlwaEVmZmVjdHMucmVhbGl0eWdseXBobGV2ZWwuZWZmZWN0KHJlYWxpdHlHbHlwaC5sZXZlbCkNCiAgICAgICAgOiAwOw0KICAgIH0sDQogICAgc29ydEdseXBocygpIHsNCiAgICAgIGNvbnN0IHN0YW5kYXJkT3JkZXIgPSBbInJlYWxpdHkiLCAiZWZmYXJpZyIsICJwb3dlciIsICJpbmZpbml0eSIsICJyZXBsaWNhdGlvbiIsICJ0aW1lIiwgImRpbGF0aW9uIiwNCiAgICAgICAgImN1cnNlZCIsICJjb21wYW5pb24iXTsNCiAgICAgIHRoaXMuZ2x5cGhzLnNvcnQoKGEsIGIpID0+IHN0YW5kYXJkT3JkZXIuaW5kZXhPZihhLnR5cGUpIC0gc3RhbmRhcmRPcmRlci5pbmRleE9mKGIudHlwZSkpOw0KICAgIH0NCiAgfSwNCn07DQo="},{"version":3,"sources":["GlyphShowcasePanelModal.vue"],"names":[],"mappings":";AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GlyphShowcasePanelModal.vue","sourceRoot":"src/components/modals","sourcesContent":["<script>\r\nimport GlyphSetName from \"@/components/GlyphSetName\";\r\nimport GlyphShowcasePanelEntry from \"@/components/modals/GlyphShowcasePanelEntry\";\r\nimport ModalWrapper from \"@/components/modals/ModalWrapper\";\r\n\r\nexport default {\r\n  name: \"GlyphShowcasePanelModal\",\r\n  components: {\r\n    GlyphSetName,\r\n    ModalWrapper,\r\n    GlyphShowcasePanelEntry,\r\n  },\r\n  props: {\r\n    name: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    glyphSet: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    isGlyphSelection: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    showSetName: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    displaySacrifice: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      glyphs: [],\r\n      gainedLevel: 0,\r\n      canSacrifice: false,\r\n      realityGlyphBoost: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    maxGlyphEffects() {\r\n      let maxEffects = 1;\r\n      for (const glyph of this.glyphs) {\r\n        maxEffects = Math.max(getGlyphEffectsFromBitmask(glyph.effects).filter(e => e.isGenerated).length, maxEffects);\r\n      }\r\n      return maxEffects;\r\n    },\r\n    containerClass() {\r\n      return {\r\n        \"c-glyph-choice-container\": true,\r\n        \"c-glyph-choice-container-single\": this.glyphs.length === 1,\r\n      };\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.glyphs = this.isGlyphSelection\r\n        ? GlyphSelection.glyphList(GlyphSelection.choiceCount, gainedGlyphLevel(), { isChoosingGlyph: false })\r\n        : this.glyphSet.filter(x => x);\r\n      this.sortGlyphs();\r\n      this.gainedLevel = gainedGlyphLevel().actualLevel;\r\n      // There should only be one reality glyph; this picks one pseudo-randomly if multiple are cheated/glitched in\r\n      const realityGlyph = this.glyphs.filter(g => g.type === \"reality\")[0];\r\n      this.realityGlyphBoost = realityGlyph\r\n        ? GlyphEffects.realityglyphlevel.effect(realityGlyph.level)\r\n        : 0;\r\n    },\r\n    sortGlyphs() {\r\n      const standardOrder = [\"reality\", \"effarig\", \"power\", \"infinity\", \"replication\", \"time\", \"dilation\",\r\n        \"cursed\", \"companion\"];\r\n      this.glyphs.sort((a, b) => standardOrder.indexOf(a.type) - standardOrder.indexOf(b.type));\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapper>\r\n    <template #header>\r\n      {{ name }}\r\n    </template>\r\n    <div v-if=\"isGlyphSelection\">\r\n      Projected Glyph Level: {{ formatInt(gainedLevel) }}\r\n    </div>\r\n    <GlyphSetName\r\n      v-if=\"showSetName\"\r\n      :glyph-set=\"glyphs\"\r\n      :force-color=\"true\"\r\n    />\r\n    <div :class=\"containerClass\">\r\n      <GlyphShowcasePanelEntry\r\n        v-for=\"(glyph, idx) in glyphs\"\r\n        :key=\"idx\"\r\n        class=\"c-glyph-choice-single-glyph\"\r\n        :idx=\"idx\"\r\n        :glyph=\"glyph\"\r\n        :show-level=\"!isGlyphSelection\"\r\n        :reality-glyph-boost=\"realityGlyphBoost\"\r\n        :max-glyph-effects=\"maxGlyphEffects\"\r\n        :show-sacrifice=\"displaySacrifice\"\r\n      />\r\n    </div>\r\n  </ModalWrapper>\r\n</template>\r\n\r\n<style scoped>\r\n.c-glyph-choice-container {\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  width: 74rem;\r\n}\r\n\r\n.c-glyph-choice-container-single {\r\n  width: 37rem;\r\n}\r\n\r\n.c-glyph-choice-single-glyph {\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 36rem;\r\n  height: 12rem;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  border-radius: var(--var-border-radius, 0.5rem);\r\n  margin: 0.5rem;\r\n}\r\n</style>\r\n"]}]}