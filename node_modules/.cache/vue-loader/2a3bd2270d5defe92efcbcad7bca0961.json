{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\SwitchAutomatorEditorModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\SwitchAutomatorEditorModal.vue","mtime":1745241596854},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgTW9kYWxXcmFwcGVyQ2hvaWNlIGZyb20gIkAvY29tcG9uZW50cy9tb2RhbHMvTW9kYWxXcmFwcGVyQ2hvaWNlIjsNCg0KZXhwb3J0IGRlZmF1bHQgew0KICBuYW1lOiAiU3dpdGNoQXV0b21hdG9yRWRpdG9yTW9kYWwiLA0KICBjb21wb25lbnRzOiB7DQogICAgTW9kYWxXcmFwcGVyQ2hvaWNlDQogIH0sDQogIHByb3BzOiB7DQogICAgY2FsbGJhY2s6IHsNCiAgICAgIHR5cGU6IEZ1bmN0aW9uLA0KICAgICAgcmVxdWlyZWQ6IGZhbHNlLA0KICAgICAgZGVmYXVsdDogKCkgPT4gKHt9KQ0KICAgIH0sDQogICAgbG9zdEJsb2Nrczogew0KICAgICAgdHlwZTogTnVtYmVyLA0KICAgICAgcmVxdWlyZWQ6IGZhbHNlLA0KICAgICAgZGVmYXVsdDogMCwNCiAgICB9DQogIH0sDQogIGRhdGEoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIGVycm9yQ291bnQ6IDAsDQogICAgICBpc0N1cnJlbnRseUJsb2NrczogZmFsc2UNCiAgICB9Ow0KICB9LA0KICBjb21wdXRlZDogew0KICAgIGN1cnJlbnRTY3JpcHRJRDogew0KICAgICAgZ2V0KCkgew0KICAgICAgICByZXR1cm4gdGhpcy4kdmlld01vZGVsLnRhYnMucmVhbGl0eS5hdXRvbWF0b3IuZWRpdG9yU2NyaXB0SUQ7DQogICAgICB9LA0KICAgICAgc2V0KHZhbHVlKSB7DQogICAgICAgIHRoaXMuJHZpZXdNb2RlbC50YWJzLnJlYWxpdHkuYXV0b21hdG9yLmVkaXRvclNjcmlwdElEID0gdmFsdWU7DQogICAgICB9DQogICAgfSwNCiAgICBvdGhlck1vZGUoKSB7DQogICAgICByZXR1cm4gdGhpcy5pc0N1cnJlbnRseUJsb2NrcyA/ICJUZXh0IiA6ICJCbG9jayI7DQogICAgfQ0KICB9LA0KICBtZXRob2RzOiB7DQogICAgdXBkYXRlKCkgew0KICAgICAgdGhpcy5lcnJvckNvdW50ID0gQXV0b21hdG9yRGF0YS5jdXJyZW50RXJyb3JzKCkubGVuZ3RoOw0KICAgICAgdGhpcy5pc0N1cnJlbnRseUJsb2NrcyA9IHBsYXllci5yZWFsaXR5LmF1dG9tYXRvci50eXBlID09PSBBVVRPTUFUT1JfVFlQRS5CTE9DSzsNCiAgICB9LA0KICAgIHRvZ2dsZUF1dG9tYXRvck1vZGUoKSB7DQogICAgICBBdXRvbWF0b3JCYWNrZW5kLmNoYW5nZU1vZGVzKHRoaXMuY3VycmVudFNjcmlwdElEKTsNCiAgICAgIHRoaXMuY2FsbGJhY2s/LigpOw0KICAgIH0NCiAgfQ0KfTsNCg=="},{"version":3,"sources":["SwitchAutomatorEditorModal.vue"],"names":[],"mappings":";AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SwitchAutomatorEditorModal.vue","sourceRoot":"src/components/modals","sourcesContent":["<script>\r\nimport ModalWrapperChoice from \"@/components/modals/ModalWrapperChoice\";\r\n\r\nexport default {\r\n  name: \"SwitchAutomatorEditorModal\",\r\n  components: {\r\n    ModalWrapperChoice\r\n  },\r\n  props: {\r\n    callback: {\r\n      type: Function,\r\n      required: false,\r\n      default: () => ({})\r\n    },\r\n    lostBlocks: {\r\n      type: Number,\r\n      required: false,\r\n      default: 0,\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      errorCount: 0,\r\n      isCurrentlyBlocks: false\r\n    };\r\n  },\r\n  computed: {\r\n    currentScriptID: {\r\n      get() {\r\n        return this.$viewModel.tabs.reality.automator.editorScriptID;\r\n      },\r\n      set(value) {\r\n        this.$viewModel.tabs.reality.automator.editorScriptID = value;\r\n      }\r\n    },\r\n    otherMode() {\r\n      return this.isCurrentlyBlocks ? \"Text\" : \"Block\";\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.errorCount = AutomatorData.currentErrors().length;\r\n      this.isCurrentlyBlocks = player.reality.automator.type === AUTOMATOR_TYPE.BLOCK;\r\n    },\r\n    toggleAutomatorMode() {\r\n      AutomatorBackend.changeModes(this.currentScriptID);\r\n      this.callback?.();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapperChoice\r\n    option=\"switchAutomatorMode\"\r\n    @confirm=\"toggleAutomatorMode\"\r\n  >\r\n    <template #header>\r\n      Change Automator to {{ otherMode }} editor\r\n    </template>\r\n    <div class=\"c-modal-message__text\">\r\n      This will stop your current script if it is running!\r\n      <div v-if=\"errorCount\">\r\n        <br>\r\n        Your script has some errors which may not get converted properly to {{ otherMode }} mode. Continuing on will\r\n        make the Automator attempt to parse these lines anyway, although some information may get lost or not be\r\n        converted properly.\r\n      </div>\r\n      <!-- Note: this can only ever appear on text-to-block -->\r\n      <b v-if=\"lostBlocks\">\r\n        <br>\r\n        Warning: Your script also currently has some lines which cannot interpreted as particular commands. These\r\n        lines will end up being deleted since there is no block they can be converted into.\r\n        If an error occurs at the start of a loop or IF, this may end up deleting large portions of your script!\r\n        <span class=\"l-lost-text\">\r\n          Changing editor modes right now will cause {{ quantifyInt(\"line\", lostBlocks) }} of code to be irreversibly\r\n          lost!\r\n        </span>\r\n      </b>\r\n      <br>\r\n      <span class=\"l-lost-text\">\r\n        Hiding this confirmation is not recommended, as it may cause parts of scripts to be immediately and irreversibly\r\n        lost if your script has errors when attempting to switch modes.\r\n      </span>\r\n      <br>\r\n      <br>\r\n      Are you sure you want to change to the {{ otherMode }} editor?\r\n    </div>\r\n    <template #confirm-text>\r\n      Change Modes\r\n    </template>\r\n  </ModalWrapperChoice>\r\n</template>\r\n\r\n<style scoped>\r\n.l-lost-text {\r\n  color: var(--color-bad);\r\n}\r\n</style>\r\n"]}]}