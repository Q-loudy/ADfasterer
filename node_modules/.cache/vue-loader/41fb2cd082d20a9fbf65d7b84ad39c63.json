{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\AutomatorScriptTemplate.vue?vue&type=style&index=0&id=12ec1e80&scoped=true&lang=css&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\modals\\AutomatorScriptTemplate.vue","mtime":1745241596808},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\css-loader\\dist\\cjs.js","mtime":1745242216572},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\loaders\\stylePostLoader.js","mtime":1745242222796},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\postcss-loader\\dist\\cjs.js","mtime":1745242214022},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLm8tbG9hZC1wcmVzZXQtYnV0dG9uLW1hcmdpbiB7DQogIG1hcmdpbi1yaWdodDogMC4zcmVtOw0KfQ0K"},{"version":3,"sources":["AutomatorScriptTemplate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmOA;AACA;AACA","file":"AutomatorScriptTemplate.vue","sourceRoot":"src/components/modals","sourcesContent":["<script>\r\nimport { blockifyTextAutomator } from \"@/core/automator\";\r\nimport ModalWrapper from \"@/components/modals/ModalWrapper\";\r\n\r\nexport default {\r\n  name: \"AutomatorScriptTemplate\",\r\n  components: {\r\n    ModalWrapper,\r\n  },\r\n  props: {\r\n    warnings: {\r\n      type: Function,\r\n      required: true,\r\n    },\r\n    name: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    inputs: {\r\n      type: Array,\r\n      required: true,\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      templateInputs: {},\r\n      buttonTextStrings: [],\r\n      invalidInputCount: 0,\r\n      templateProps: null,\r\n      currentPreset: \"\",\r\n      isBlock: false,\r\n    };\r\n  },\r\n  computed: {\r\n    presets: () => player.timestudy.presets,\r\n    params: () => GameDatabase.reality.automator.templates.paramTypes,\r\n    validWarnings() {\r\n      return this.invalidInputCount === 0\r\n        ? this.warnings().concat(this.templateScript?.warnings)\r\n        : this.warnings();\r\n    },\r\n    templateScript() {\r\n      if (this.invalidInputCount !== 0) return null;\r\n      return new ScriptTemplate(this.templateProps, this.name);\r\n    }\r\n  },\r\n  // Many props in this component are generated dynamically from a GameDB entry, but Vue can only give reactive\r\n  // behavior to props that exist on declaration. We need all the dynamically generated inputs to be reactive, so we\r\n  // specifically $set them here on initialization; additionally we give them a default value so that later function\r\n  // calls don't error out from undefined inputs.\r\n  created() {\r\n    for (const input of this.inputs) {\r\n      const boolProp = this.paramTypeObject(input.type).boolDisplay;\r\n      if (boolProp) {\r\n        this.$set(this.templateInputs, input.name, false);\r\n        this.buttonTextStrings[input.name] = boolProp[1];\r\n      } else {\r\n        this.$set(this.templateInputs, input.name, \"\");\r\n        this.invalidInputCount++;\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isBlock = player.reality.automator.type === AUTOMATOR_TYPE.BLOCK;\r\n    },\r\n    paramTypeObject(name) {\r\n      return this.params.find(p => p.name === name);\r\n    },\r\n    isValid(input) {\r\n      const typeObject = this.paramTypeObject(input.type);\r\n      return typeObject.isValidString ? typeObject.isValidString(this.templateInputs[input.name]) : true;\r\n    },\r\n    validityClass(input) {\r\n      if (input.name === \"treeStudies\" && this.currentPreset !== \"\") {\r\n        return \"c-automator-template-textbox--preset\";\r\n      }\r\n      return this.isValid(input)\r\n        ? undefined\r\n        : \"c-automator-template-textbox--invalid\";\r\n    },\r\n    loadPreset(name, id) {\r\n      this.templateInputs.treeStudies = name ? `NAME ${name}` : `ID ${id}`;\r\n      this.updateTemplateProps();\r\n    },\r\n    loadCurrent() {\r\n      this.templateInputs.treeStudies = GameCache.currentStudyTree.value.exportString;\r\n      this.updateTemplateProps();\r\n    },\r\n    updateTemplateProps() {\r\n      this.templateProps = {};\r\n      this.invalidInputCount = 0;\r\n      for (const input of this.inputs) {\r\n        const typeObj = this.paramTypeObject(input.type);\r\n        const mapFn = x => (typeObj.map ? typeObj.map(x) : x);\r\n        this.templateProps[input.name] = mapFn(this.templateInputs[input.name]);\r\n        if (!this.isValid(input)) this.invalidInputCount++;\r\n      }\r\n\r\n      // We treat treeStudies as a special prop which will set treePreset if it matches the format \"NAME [name]\"\r\n      const nameMatch = this.templateProps.treeStudies.match(/^NAME (.{1,4})$/u);\r\n      const idMatch = this.templateProps.treeStudies.match(/^ID (\\d)$/u);\r\n\r\n      if (nameMatch) {\r\n        const nameStr = nameMatch ? nameMatch[1] : \"\";\r\n        this.currentPreset = this.presets.find(x => x.name === nameStr).name;\r\n      } else if (idMatch) {\r\n        const idStr = idMatch ? idMatch[1] : \"\";\r\n        this.currentPreset = this.presets.some((x, y) => y === idStr - 1) ? idStr : \"\";\r\n      }\r\n\r\n      this.templateProps.treePreset = this.currentPreset === \"\" ? null : this.currentPreset;\r\n    },\r\n    updateButton(input) {\r\n      this.templateInputs[input.name] = !this.templateInputs[input.name];\r\n      const boolProp = this.paramTypeObject(input.type).boolDisplay;\r\n      this.buttonTextStrings[input.name] = boolProp[this.templateInputs[input.name] ? 0 : 1];\r\n      this.updateTemplateProps();\r\n    },\r\n    copyAndClose() {\r\n      if (this.isBlock) {\r\n        const newTemplateBlock = {\r\n          name: `Template: ${this.name}`,\r\n          blocks: blockifyTextAutomator(this.templateScript.script).blocks\r\n        };\r\n        AutomatorData.blockTemplates.push(newTemplateBlock);\r\n        GameUI.notify.info(\"Custom template block created\");\r\n      } else {\r\n        copyToClipboard(this.templateScript.script);\r\n        GameUI.notify.info(\"Template copied to clipboard\");\r\n      }\r\n      this.emitClose();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapper class=\"c-automator-template-container\">\r\n    <template #header>\r\n      {{ name }} Template\r\n    </template>\r\n    <div class=\"c-automator-template-description\">\r\n      {{ description }}\r\n    </div>\r\n    <div class=\"c-automator-template-inputs\">\r\n      <b>Required Information:</b>\r\n      <br>\r\n      Use a preset Study Tree:\r\n      <button\r\n        v-for=\"(preset, presetNumber) in presets\"\r\n        :key=\"preset.name\"\r\n        class=\"o-primary-btn o-load-preset-button-margin\"\r\n        @click=\"loadPreset(preset.name, presetNumber + 1)\"\r\n      >\r\n        {{ preset.name ? preset.name : presetNumber + 1 }}\r\n      </button>\r\n      <button\r\n        class=\"o-primary-btn o-load-preset-button-margin\"\r\n        @click=\"loadCurrent\"\r\n      >\r\n        <i>Current Tree</i>\r\n      </button>\r\n      <div\r\n        v-for=\"input in inputs\"\r\n        :key=\"input.name\"\r\n        class=\"c-automator-template-entry\"\r\n      >\r\n        {{ input.prompt }}:\r\n        <span v-if=\"paramTypeObject(input.type).boolDisplay\">\r\n          <button\r\n            class=\"o-primary-btn\"\r\n            @click=\"updateButton(input)\"\r\n          >\r\n            {{ buttonTextStrings[input.name] }}\r\n          </button>\r\n        </span>\r\n        <span v-else>\r\n          <input\r\n            ref=\"templateInputs[input.name]\"\r\n            v-model=\"templateInputs[input.name]\"\r\n            type=\"text\"\r\n            class=\"c-automator-template-textbox\"\r\n            :class=\"validityClass(input)\"\r\n            @input=\"updateTemplateProps\"\r\n          >\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div class=\"c-automator-template-warnings\">\r\n      <b>Possible things to consider:</b>\r\n      <div v-if=\"validWarnings.length !== 0\">\r\n        <div\r\n          v-for=\"warning in validWarnings\"\r\n          :key=\"warning\"\r\n          class=\"c-automator-template-entry\"\r\n        >\r\n          {{ warning }}\r\n        </div>\r\n      </div>\r\n      <div v-else>\r\n        (If something seems wrong with the template inputs, it will show up here)\r\n      </div>\r\n      <br>\r\n      <br>\r\n    </div>\r\n    <button\r\n      v-if=\"invalidInputCount === 0\"\r\n      class=\"o-primary-btn\"\r\n      @click=\"copyAndClose\"\r\n    >\r\n      {{ isBlock ? \"Create custom template block\" : \"Copy this template to your clipboard\" }} and close this modal\r\n    </button>\r\n    <button\r\n      v-else\r\n      class=\"o-primary-btn o-primary-btn--disabled\"\r\n    >\r\n      Cannot generate template (You have {{ quantifyInt(\"invalid input\", invalidInputCount) }})\r\n    </button>\r\n  </ModalWrapper>\r\n</template>\r\n\r\n<style scoped>\r\n.o-load-preset-button-margin {\r\n  margin-right: 0.3rem;\r\n}\r\n</style>\r\n"]}]}