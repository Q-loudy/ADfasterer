{"remainingRequest":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js??vue-loader-options!C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\statistics\\MultiplierBreakdownEntry.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Games\\ADFasterer\\ADfasterer\\src\\components\\tabs\\statistics\\MultiplierBreakdownEntry.vue","mtime":1745241597446},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\babel-loader\\lib\\index.js","mtime":1745242219290},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1745242214069},{"path":"C:\\Games\\ADFasterer\\ADfasterer\\node_modules\\@vue\\vue-loader-v15\\lib\\index.js","mtime":1745242220175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["MultiplierBreakdownEntry.vue"],"names":[],"mappingsfile":"MultiplierBreakdownEntry.vue","sourceRoot":"src/components/tabs/statistics","sourcesContent":["<script>\r\nimport { DC } from \"@/core/constants\";\r\n\r\nimport { BreakdownEntryInfo } from \"./breakdown-entry-info\";\r\nimport { getResourceEntryInfoGroups } from \"./breakdown-entry-info-group\";\r\nimport { PercentageRollingAverage } from \"./percentage-rolling-average\";\r\nimport PrimaryToggleButton from \"@/components/PrimaryToggleButton\";\r\n\r\n// A few props are special-cased because they're base values which can be less than 1, but we don't want to\r\n// show them as nerfs\r\nconst nerfBlacklist = [\"IP_base\", \"EP_base\", \"TP_base\"];\r\n\r\nfunction padPercents(percents) {\r\n  // Add some padding to percents to prevent text flicker\r\n  // Max length is for \"-100.0%\"\r\n  return percents.padStart(7, \"\\xa0\");\r\n}\r\n\r\nexport default {\r\n  name: \"MultiplierBreakdownEntry\",\r\n  components: {\r\n    PrimaryToggleButton\r\n  },\r\n  props: {\r\n    resource: {\r\n      type: BreakdownEntryInfo,\r\n      required: true,\r\n    },\r\n    isRoot: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false,\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      selected: 0,\r\n      percentList: [],\r\n      averagedPercentList: [],\r\n      showGroup: [],\r\n      hadChildEntriesAt: [],\r\n      mouseoverIndex: -1,\r\n      lastNotEmptyAt: 0,\r\n      dilationExponent: 1,\r\n      isDilated: false,\r\n      // This is used to temporarily remove the transition function from the bar styling when changing the way\r\n      // multipliers are split up; the animation which results from not doing this looks very awkward\r\n      lastLayoutChange: Date.now(),\r\n      now: Date.now(),\r\n      totalMultiplier: DC.D1,\r\n      totalPositivePower: 1,\r\n      replacePowers: player.options.multiplierTab.replacePowers,\r\n      inNC12: false,\r\n    };\r\n  },\r\n  computed: {\r\n    groups() {\r\n      return getResourceEntryInfoGroups(this.resource.key);\r\n    },\r\n    /**\r\n     * @returns {BreakdownEntryInfo[]}\r\n     */\r\n    entries() {\r\n      return this.groups[this.selected].entries;\r\n    },\r\n    rollingAverage() {\r\n      return new PercentageRollingAverage();\r\n    },\r\n    containerClass() {\r\n      return {\r\n        \"c-multiplier-entry-container\": true,\r\n        \"c-multiplier-entry-root-container\": this.isRoot,\r\n      };\r\n    },\r\n    isEmpty() {\r\n      return !this.isRecent(this.lastNotEmptyAt);\r\n    },\r\n    disabledText() {\r\n      if (!this.resource.isBase) return `Total effect inactive, disabled, or reduced to ${formatX(1)}`;\r\n      return Decimal.eq(this.resource.mult, 0)\r\n        ? `You cannot gain this resource (prestige requirement not reached)`\r\n        : `You have no multipliers for this resource (will gain ${format(1)} on prestige)`;\r\n    },\r\n    // IC4 is the first time the player sees a power-based effect, not counting how infinity power is handled.\r\n    // This doesn't need to be reactive because completing IC4 for the first time forces a tab switch\r\n    hasSeenPowers() {\r\n      return InfinityChallenge(4).isCompleted || PlayerProgress.eternityUnlocked();\r\n    },\r\n    // While infinity power is a power-based effect, we want to disallow showing that as an equivalent multiplier\r\n    // since that it doesn't make a whole lot of sense to do that. We also want to hide this for entries related\r\n    // to tickspeed/galaxies because we already mostly hack those with fake values and should thus not allow those\r\n    // to be changed either.\r\n    allowPowerToggle() {\r\n      const forbiddenEntries = [\"AD_infinityPower\", \"galaxies\", \"tickspeed\"];\r\n      // Uses startsWith instead of String equality since it has to match both the top-level entry and any\r\n      // related children entries further down the tree.\r\n      return !forbiddenEntries.some(key => this.resource.key.startsWith(key));\r\n    },\r\n  },\r\n  watch: {\r\n    replacePowers(newValue) {\r\n      player.options.multiplierTab.replacePowers = newValue;\r\n    },\r\n  },\r\n  created() {\r\n    if (this.groups.length > 1 && player.options.multiplierTab.showAltGroup) {\r\n      this.changeGroup();\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      for (let i = 0; i < this.entries.length; i++) {\r\n        const entry = this.entries[i];\r\n        entry.update();\r\n        const hasChildEntries = getResourceEntryInfoGroups(entry.key)\r\n          .some(group => group.hasVisibleEntries);\r\n        if (hasChildEntries) {\r\n          this.hadChildEntriesAt[i] = Date.now();\r\n        }\r\n      }\r\n      this.dilationExponent = this.resource.dilationEffect;\r\n      this.isDilated = this.dilationExponent !== 1;\r\n      this.calculatePercents();\r\n      this.now = Date.now();\r\n      this.replacePowers = player.options.multiplierTab.replacePowers && this.allowPowerToggle;\r\n      this.inNC12 = NormalChallenge(12).isRunning;\r\n    },\r\n    changeGroup() {\r\n      this.selected = (this.selected + 1) % this.groups.length;\r\n      player.options.multiplierTab.showAltGroup = this.selected === 1;\r\n      this.showGroup = Array.repeat(false, this.entries.length);\r\n      this.hadChildEntriesAt = Array.repeat(0, this.entries.length);\r\n      this.lastLayoutChange = Date.now();\r\n      this.rollingAverage.clear();\r\n      this.update();\r\n    },\r\n    calculatePercents() {\r\n      const powList = this.entries.map(e => e.data.pow);\r\n      const totalPosPow = powList.filter(p => p > 1).reduce((x, y) => x * y, 1);\r\n      const totalNegPow = powList.filter(p => p < 1).reduce((x, y) => x * y, 1);\r\n      const log10Mult = (this.resource.fakeValue ?? this.resource.mult).log10() / totalPosPow;\r\n      const isEmpty = log10Mult === 0;\r\n      if (!isEmpty) {\r\n        this.lastNotEmptyAt = Date.now();\r\n      }\r\n      let percentList = [];\r\n      for (const entry of this.entries) {\r\n        const multFrac = log10Mult === 0\r\n          ? 0\r\n          : Decimal.log10(entry.data.mult) / log10Mult;\r\n        const powFrac = totalPosPow === 1 ? 0 : Math.log(entry.data.pow) / Math.log(totalPosPow);\r\n\r\n        // Handle nerf powers differently from everything else in order to render them with the correct bar percentage\r\n        const perc = entry.data.pow >= 1\r\n          ? multFrac / totalPosPow + powFrac * (1 - 1 / totalPosPow)\r\n          : Math.log(entry.data.pow) / Math.log(totalNegPow) * (totalNegPow - 1);\r\n\r\n        // This is clamped to a minimum of something that's still nonzero in order to show it at <0.1% instead of 0%\r\n        percentList.push(\r\n          [entry.ignoresNerfPowers, nerfBlacklist.includes(entry.key) ? Math.clampMin(perc, 0.0001) : perc]\r\n        );\r\n      }\r\n\r\n      // Shortly after a prestige, these may add up to a lot more than the base amount as production catches up. This\r\n      // is also necessary to suppress some visual weirdness for certain categories which have lots of exponents but\r\n      // actually apply only to specific dimensions (eg. charged infinity upgrades)\r\n      // We have a nerfedPerc variable to give a percentage breakdown as if all multipliers which ARE affected by nerf\r\n      // power effects already had them applied; there is support in the classes to allow for some to be affected but\r\n      // not others. The only actual case of this occurring is V's Reality not affecting gamespeed for DT, but it was\r\n      // cleaner to adjust the class structure instead of specifically special-casing it here\r\n      const totalPerc = percentList.filter(p => p[1] > 0).map(p => p[1]).sum();\r\n      const nerfedPerc = percentList.filter(p => p[1] > 0)\r\n        .reduce((x, y) => x + (y[0] ? y[1] : y[1] * totalNegPow), 0);\r\n      percentList = percentList.map(p => {\r\n        if (p[1] > 0) {\r\n          return (p[0] ? p[1] : p[1] * totalNegPow) / nerfedPerc;\r\n        }\r\n        return Math.clampMin(p[1] * (totalPerc - nerfedPerc) / totalPerc / totalNegPow, -1);\r\n      });\r\n      this.percentList = percentList;\r\n      this.rollingAverage.add(isEmpty ? undefined : percentList);\r\n      this.averagedPercentList = this.rollingAverage.average;\r\n      this.totalMultiplier = Decimal.pow10(log10Mult);\r\n      this.totalPositivePower = totalPosPow;\r\n    },\r\n    styleObject(index) {\r\n      const netPerc = this.averagedPercentList.sum();\r\n      const isNerf = this.averagedPercentList[index] < 0;\r\n      const iconObj = this.entries[index].icon;\r\n      const percents = this.averagedPercentList[index];\r\n      const barSize = perc => (perc > 0 ? perc * netPerc : -perc);\r\n      return {\r\n        position: \"absolute\",\r\n        top: `${100 * this.averagedPercentList.slice(0, index).map(p => barSize(p)).sum()}%`,\r\n        height: `${100 * barSize(percents)}%`,\r\n        width: \"100%\",\r\n        \"transition-duration\": this.isRecent(this.lastLayoutChange) ? undefined : \"0.2s\",\r\n        border: percents === 0 ? \"\" : \"0.1rem solid var(--color-text)\",\r\n        color: iconObj?.textColor ?? \"black\",\r\n        background: isNerf\r\n          ? `repeating-linear-gradient(-45deg, var(--color-bad), ${iconObj?.color} 0.8rem)`\r\n          : iconObj?.color,\r\n      };\r\n    },\r\n    singleEntryClass(index) {\r\n      return {\r\n        \"c-single-entry\": true,\r\n        \"c-single-entry-highlight\": this.mouseoverIndex === index,\r\n      };\r\n    },\r\n    shouldShowEntry(entry) {\r\n      return entry.data.isVisible || this.isRecent(entry.data.lastVisibleAt);\r\n    },\r\n    barSymbol(index) {\r\n      return this.entries[index].icon?.symbol ?? null;\r\n    },\r\n    hasChildEntries(index) {\r\n      return this.isRecent(this.hadChildEntriesAt[index]);\r\n    },\r\n    expandIcon(index) {\r\n      return this.showGroup[index] ? \"far fa-minus-square\" : \"far fa-plus-square\";\r\n    },\r\n    expandIconStyle(index) {\r\n      return {\r\n        opacity: this.hasChildEntries(index) ? 1 : 0\r\n      };\r\n    },\r\n    entryString(index) {\r\n      const percents = this.percentList[index];\r\n      if (percents < 0 && !nerfBlacklist.includes(this.entries[index].key)) {\r\n        return this.nerfString(index);\r\n      }\r\n\r\n      // We want to handle very small numbers carefully to distinguish between \"disabled/inactive\" and\r\n      // \"too small to be relevant\"\r\n      let percString;\r\n      if (percents === 0) percString = formatPercents(0);\r\n      else if (percents === 1) percString = formatPercents(1);\r\n      else if (percents < 0.001) percString = `<${formatPercents(0.001, 1)}`;\r\n      else if (percents > 0.9995) percString = `~${formatPercents(1)}`;\r\n      else percString = formatPercents(percents, 1);\r\n      percString = padPercents(percString);\r\n\r\n      // Display both multiplier and powers, but make sure to give an empty string if there's neither\r\n      const entry = this.entries[index];\r\n      if (!entry.data.isVisible) {\r\n        return `${percString}: ${entry.name}`;\r\n      }\r\n      const overrideStr = entry.displayOverride;\r\n      let valueStr;\r\n      if (overrideStr) valueStr = `(${overrideStr})`;\r\n      else {\r\n        const values = [];\r\n        const formatFn = x => {\r\n          const isDilated = entry.isDilated;\r\n          if (isDilated && this.dilationExponent !== 1) {\r\n            const undilated = this.applyDilationExp(x, 1 / this.dilationExponent);\r\n            return `${formatX(undilated, 2, 2)} ➜ ${formatX(x, 2, 2)}`;\r\n          }\r\n          return entry.isBase\r\n            ? format(x, 2, 2)\r\n            : formatX(x, 2, 2);\r\n        };\r\n        if (this.replacePowers && entry.data.pow !== 1) {\r\n          // For replacing powers with equivalent multipliers, we calculate what the total additional multiplier\r\n          // from ALL power effects taken together would be, and then we split up that additional multiplier\r\n          // proportionally to this individual power's contribution to all positive powers\r\n          const powFrac = Math.log(entry.data.pow) / Math.log(this.totalPositivePower);\r\n          const equivMult = this.totalMultiplier.pow((this.totalPositivePower - 1) * powFrac);\r\n          values.push(formatFn(entry.data.mult.times(equivMult)));\r\n        } else {\r\n          if (Decimal.neq(entry.data.mult, 1)) values.push(formatFn(entry.data.mult));\r\n          if (entry.data.pow !== 1) values.push(formatPow(entry.data.pow, 2, 3));\r\n        }\r\n        valueStr = values.length === 0 ? \"\" : `(${values.join(\", \")})`;\r\n      }\r\n\r\n      return `${percString}: ${entry.name} ${valueStr}`;\r\n    },\r\n    nerfString(index) {\r\n      const entry = this.entries[index];\r\n      const percString = padPercents(formatPercents(this.percentList[index], 1));\r\n\r\n      // Display both multiplier and powers, but make sure to give an empty string if there's neither\r\n      const overrideStr = entry.displayOverride;\r\n      let valueStr;\r\n      const formatFn = entry.isBase\r\n        ? x => format(x, 2, 2)\r\n        : x => `/${format(x.reciprocal(), 2, 2)}`;\r\n\r\n      if (overrideStr) valueStr = `(${overrideStr})`;\r\n      else {\r\n        const values = [];\r\n        if (this.replacePowers && entry.data.pow !== 1) {\r\n          const finalMult = this.resource.fakeValue ?? this.resource.mult;\r\n          values.push(formatFn(finalMult.pow(1 - 1 / entry.data.pow)));\r\n        } else {\r\n          if (Decimal.neq(entry.data.mult, 1)) {\r\n            values.push(formatFn(entry.data.mult));\r\n          }\r\n          if (entry.data.pow !== 1) values.push(formatPow(entry.data.pow, 2, 3));\r\n        }\r\n        valueStr = values.length === 0 ? \"\" : `(${values.join(\", \")})`;\r\n      }\r\n\r\n      return `${percString}: ${entry.name} ${valueStr}`;\r\n    },\r\n    totalString() {\r\n      const resource = this.resource;\r\n      const name = resource.name;\r\n      const overrideStr = resource.displayOverride;\r\n      if (overrideStr) return `${name}: ${overrideStr}`;\r\n\r\n      const val = resource.mult;\r\n      return resource.isBase\r\n        ? `${name}: ${format(val, 2, 2)}`\r\n        : `${name}: ${formatX(val, 2, 2)}`;\r\n    },\r\n    applyDilationExp(value, exp) {\r\n      return Decimal.pow10(value.log10() ** exp);\r\n    },\r\n    dilationString() {\r\n      const resource = this.resource;\r\n      const baseMult = resource.mult;\r\n\r\n      // This is tricky to handle properly; if we're not careful, sometimes the dilation gets applied twice since\r\n      // it's already applied in the multiplier itself. In that case we need to apply an appropriate \"anti-dilation\"\r\n      // to make the UI look correct. However, this cause some mismatches in individual dimension breakdowns due to\r\n      // the dilation function not being linear (ie. multiply=>dilate gives a different result than dilate=>multiply).\r\n      // In that case we check for isDilated one level down and combine the actual multipliers together instead.\r\n      let beforeMult, afterMult;\r\n      if (this.isDilated && resource.isDilated) {\r\n        const dilProd = this.entries\r\n          .filter(entry => entry.isVisible && entry.isDilated)\r\n          .map(entry => entry.mult)\r\n          .map(val => this.applyDilationExp(val, 1 / this.dilationExponent))\r\n          .reduce((x, y) => x.times(y), DC.D1);\r\n        beforeMult = dilProd.neq(1) ? dilProd : this.applyDilationExp(baseMult, 1 / this.dilationExponent);\r\n        afterMult = resource.mult;\r\n      } else {\r\n        beforeMult = baseMult;\r\n        afterMult = this.applyDilationExp(beforeMult, this.dilationExponent);\r\n      }\r\n\r\n      const formatFn = resource.isBase\r\n        ? x => format(x, 2, 2)\r\n        : x => formatX(x, 2, 2);\r\n      return `Dilation Effect: Exponent${formatPow(this.dilationExponent, 2, 3)}\r\n        (${formatFn(beforeMult, 2, 2)} ➜ ${formatFn(afterMult, 2, 2)})`;\r\n    },\r\n    isRecent(date) {\r\n      return (this.now - date) < 200;\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div :class=\"containerClass\">\r\n    <div\r\n      v-if=\"!isEmpty\"\r\n      class=\"c-stacked-bars\"\r\n    >\r\n      <div\r\n        v-for=\"(perc, index) in averagedPercentList\"\r\n        :key=\"100 + index\"\r\n        :style=\"styleObject(index)\"\r\n        :class=\"{ 'c-bar-highlight' : mouseoverIndex === index }\"\r\n        @mouseover=\"mouseoverIndex = index\"\r\n        @mouseleave=\"mouseoverIndex = -1\"\r\n        @click=\"showGroup[index] = !showGroup[index]\"\r\n      >\r\n        <span\r\n          class=\"c-bar-overlay\"\r\n          v-html=\"barSymbol(index)\"\r\n        />\r\n      </div>\r\n    </div>\r\n    <div />\r\n    <div class=\"c-info-list\">\r\n      <div class=\"c-total-mult\">\r\n        <b>\r\n          {{ totalString() }}\r\n        </b>\r\n        <span class=\"c-display-settings\">\r\n          <PrimaryToggleButton\r\n            v-if=\"hasSeenPowers && allowPowerToggle\"\r\n            v-model=\"replacePowers\"\r\n            v-tooltip=\"'Change Display for Power effects'\"\r\n            off=\"^N\"\r\n            on=\"×N\"\r\n            class=\"o-primary-btn c-change-display-btn\"\r\n          />\r\n          <i\r\n            v-if=\"groups.length > 1\"\r\n            v-tooltip=\"'Change Multiplier Grouping'\"\r\n            class=\"o-primary-btn c-change-display-btn fas fa-arrows-rotate\"\r\n            @click=\"changeGroup\"\r\n          />\r\n        </span>\r\n      </div>\r\n      <div\r\n        v-if=\"isEmpty\"\r\n        class=\"c-no-effect\"\r\n      >\r\n        No Active Effects\r\n        <br>\r\n        <br>\r\n        {{ disabledText }}\r\n      </div>\r\n      <div\r\n        v-for=\"(entry, index) in entries\"\r\n        v-else\r\n        :key=\"entry.key\"\r\n        @mouseover=\"mouseoverIndex = index\"\r\n        @mouseleave=\"mouseoverIndex = -1\"\r\n      >\r\n        <div\r\n          v-if=\"shouldShowEntry(entry)\"\r\n          :class=\"singleEntryClass(index)\"\r\n        >\r\n          <div @click=\"showGroup[index] = !showGroup[index]\">\r\n            <span\r\n              :class=\"expandIcon(index)\"\r\n              :style=\"expandIconStyle(index)\"\r\n            />\r\n            {{ entryString(index) }}\r\n          </div>\r\n          <MultiplierBreakdownEntry\r\n            v-if=\"showGroup[index] && hasChildEntries(index)\"\r\n            :resource=\"entry\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div v-if=\"isDilated && !isEmpty\">\r\n        <div class=\"c-single-entry c-dilation-entry\">\r\n          <div>\r\n            {{ dilationString() }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div\r\n        v-if=\"resource.key === 'AD_total'\"\r\n        class=\"c-no-effect\"\r\n      >\r\n        <div>\r\n          \"Base AD Production\" is the amount of Antimatter that you would be producing with your current AD upgrades\r\n          as if you had waited a fixed amount of time ({{ formatInt(10) }}-{{ formatInt(40) }} seconds depending on\r\n          your AD count) after a Sacrifice. This may misrepresent your actual production if your ADs have been\r\n          producing for a while, but the relative mismatch will become smaller as you progress further in the game\r\n          and numbers become larger.\r\n        </div>\r\n        <div v-if=\"inNC12\">\r\n          The breakdown in this tab within Normal Challenge 12 may be inaccurate for some entries, and might count\r\n          extra multipliers which apply to all Antimatter Dimensions rather than just the ones which are displayed.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-multiplier-entry-container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n  max-width: 100rem;\r\n  border: var(--var-border-width, 0.2rem) solid var(--color-text);\r\n  padding: 0.5rem;\r\n  font-weight: normal;\r\n  background-color: var(--color-base);\r\n\r\n  -webkit-tap-highlight-color: transparent;\r\n}\r\n\r\n.c-multiplier-entry-root-container {\r\n  min-height: 45rem;\r\n}\r\n\r\n.c-stacked-bars {\r\n  position: relative;\r\n  width: 5rem;\r\n  background-color: var(--color-disabled);\r\n  margin-right: 1.5rem;\r\n}\r\n\r\n.c-bar-overlay {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: -5%;\r\n  position: absolute;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 1.5rem;\r\n  pointer-events: none;\r\n  user-select: none;\r\n  overflow: hidden;\r\n  opacity: 0.8;\r\n  z-index: 1;\r\n}\r\n\r\n.c-bar-highlight {\r\n  animation: a-glow-bar 2s infinite;\r\n}\r\n\r\n@keyframes a-glow-bar {\r\n  0% { box-shadow: inset 0 0 0.3rem 0; }\r\n  50% {\r\n    box-shadow: inset 0 0 0.6rem 0;\r\n    filter: brightness(130%);\r\n  }\r\n  100% { box-shadow: inset 0 0 0.3rem 0; }\r\n}\r\n\r\n.c-info-list {\r\n  height: 100%;\r\n  width: 90%;\r\n  padding: 0.2rem;\r\n}\r\n\r\n.c-display-settings {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  width: 8rem;\r\n}\r\n\r\n.c-change-display-btn {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 3rem;\r\n  margin: 0 0.5rem;\r\n}\r\n\r\n.c-total-mult {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding-left: 0.5rem;\r\n  margin-bottom: 1rem;\r\n  color: var(--color-text);\r\n}\r\n\r\n.c-no-effect {\r\n  color: var(--color-text);\r\n  user-select: none;\r\n}\r\n\r\n.c-single-entry {\r\n  text-align: left;\r\n  color: var(--color-text);\r\n  padding: 0.2rem 0.5rem;\r\n  margin: 0.2rem;\r\n  border: 0.1rem dashed;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n.c-single-entry-highlight {\r\n  border: 0.1rem solid;\r\n  font-weight: bold;\r\n  animation: a-glow-text 2s infinite;\r\n}\r\n\r\n@keyframes a-glow-text {\r\n  50% { background-color: var(--color-accent); }\r\n}\r\n\r\n.c-dilation-entry {\r\n  border: 0.2rem solid;\r\n  font-weight: bold;\r\n  animation: a-glow-dilation-nerf 3s infinite;\r\n}\r\n\r\n@keyframes a-glow-dilation-nerf {\r\n  50% { background-color: var(--color-bad); }\r\n}\r\n</style>\r\n"]}]}