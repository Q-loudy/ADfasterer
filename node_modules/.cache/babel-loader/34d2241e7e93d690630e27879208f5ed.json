{"ast":null,"code":"import _objectSpread from \"C:/Games/ADFasterer/ADfasterer/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport svgPanZoom from \"svg-pan-zoom\";\nimport { CELESTIAL_NAV_DRAW_ORDER } from \"@/core/secret-formula/celestials/navigation\";\nimport NodeBackground from \"./NodeBackground\";\nimport NodeOverlay from \"./NodeOverlay\";\nimport NodeRing from \"./NodeRing\";\nimport ProgressConnector from \"./ProgressConnector\";\nexport default {\n  name: \"CelestialNavigationTab\",\n  components: {\n    NodeRing,\n    NodeBackground,\n    NodeOverlay,\n    ProgressConnector\n  },\n  data: () => ({\n    nodeState: null\n  }),\n  computed: {\n    db() {\n      return _objectSpread(_objectSpread({}, GameDatabase.celestials.navigation), GameDatabase.celestials.navSigils);\n    },\n\n    drawOrder() {\n      const db = this.db;\n      const order = [];\n\n      for (const nodeId of Object.keys(db)) {\n        const node = db[nodeId];\n\n        if (node.connector instanceof Array) {\n          for (const config of node.connector) {\n            order.push({\n              nodeId,\n              is: ProgressConnector,\n              config,\n              drawOrder: config.drawOrder || CELESTIAL_NAV_DRAW_ORDER.CONNECTORS\n            });\n          }\n        } else if (node.connector) {\n          order.push({\n            nodeId,\n            is: ProgressConnector,\n            config: node.connector,\n            drawOrder: node.connector.drawOrder || CELESTIAL_NAV_DRAW_ORDER.CONNECTORS\n          });\n        }\n\n        if (node.node) {\n          order.push({\n            nodeId,\n            is: NodeBackground,\n            config: node.node,\n            drawOrder: node.node.bgDrawOrder || CELESTIAL_NAV_DRAW_ORDER.NODE_BG\n          });\n          order.push({\n            nodeId,\n            is: NodeRing,\n            config: node.node,\n            drawOrder: node.node.drawOrder || CELESTIAL_NAV_DRAW_ORDER.NODES\n          });\n          order.push({\n            nodeId,\n            is: NodeOverlay,\n            config: node.node,\n            drawOrder: node.node.overlayDrawOrder || CELESTIAL_NAV_DRAW_ORDER.NODE_OVERLAYS\n          });\n        }\n\n        order.sort((a, b) => a.drawOrder - b.drawOrder);\n      }\n\n      return order;\n    }\n\n  },\n\n  created() {\n    this.nodeState = Object.keys(this.db).mapToObject(name => name, () => ({\n      visible: false,\n      complete: 0\n    }));\n  },\n\n  mounted() {\n    // eslint-disable-next-line no-unused-vars\n    const panLimiter = function (oldPan, newPan) {\n      // In the callback context, \"this\" is the svgPanZoom object.\n      // eslint-disable-next-line no-invalid-this\n      const sizes = this.getSizes();\n      const leftLimit = sizes.width - (sizes.viewBox.x + sizes.viewBox.width) * sizes.realZoom;\n      const rightLimit = -sizes.viewBox.x * sizes.realZoom;\n      const topLimit = sizes.height - (sizes.viewBox.y + sizes.viewBox.height) * sizes.realZoom;\n      const bottomLimit = -sizes.viewBox.y * sizes.realZoom;\n      return {\n        x: Math.max(leftLimit, Math.min(rightLimit, newPan.x)),\n        y: Math.max(topLimit, Math.min(bottomLimit, newPan.y))\n      };\n    };\n\n    this.panZoom = svgPanZoom(this.$refs.celestialNavigationSVG, {\n      controlIconsEnabled: true,\n      dblClickZoomEnabled: false,\n      center: false,\n      fit: false,\n      zoomScaleSensitivity: 0.3,\n      minZoom: 0.64,\n      maxZoom: 1.5,\n      beforePan: panLimiter\n    });\n    if (CelestialNavigationViewportCache.pan) this.panZoom.pan(CelestialNavigationViewportCache.pan);\n    if (CelestialNavigationViewportCache.zoom) this.panZoom.zoom(CelestialNavigationViewportCache.zoom);\n  },\n\n  beforeDestroy() {\n    if (this.panZoom) {\n      CelestialNavigationViewportCache.zoom = this.panZoom.getZoom();\n      CelestialNavigationViewportCache.pan = this.panZoom.getPan();\n      this.panZoom.destroy();\n      delete this.panZoom;\n    }\n  },\n\n  methods: {\n    update() {\n      for (const key of Object.keys(this.db)) {\n        // The GameUI code forces update() to be called upon its initialization, which may force this to be called\n        // before created() on this component is actually called; this suppresses any initial errors on-creation\n        if (!this.nodeState) continue;\n        this.nodeState[key].visible = this.db[key].visible();\n        this.nodeState[key].complete = this.db[key].complete();\n      }\n    },\n\n    vec(x, y) {\n      return new Vector(x, y);\n    },\n\n    nodeVisibility(obj) {\n      return this.nodeState[obj.nodeId].visible ? \"visible\" : \"hidden\";\n    }\n\n  }\n};\nexport function cubicBezierArrayToPath(a, initialCommand = \"M\") {\n  const prefix = `${initialCommand} ${a[0].p0.x} ${a[0].p0.y}\\n`;\n  const parts = a.map(b => `C ${b.p1.x} ${b.p1.y} ${b.p2.x} ${b.p2.y} ${b.p3.x} ${b.p3.y}\\n`);\n  return prefix + parts.join(\"\");\n}\nconst CelestialNavigationViewportCache = {\n  pan: {\n    x: 125,\n    y: 125\n  },\n  zoom: 0.75\n};","map":{"version":3,"sources":["CelestialNavigationTab.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport svgPanZoom from \"svg-pan-zoom\";\r\n\r\nimport { CELESTIAL_NAV_DRAW_ORDER } from \"@/core/secret-formula/celestials/navigation\";\r\n\r\nimport NodeBackground from \"./NodeBackground\";\r\nimport NodeOverlay from \"./NodeOverlay\";\r\nimport NodeRing from \"./NodeRing\";\r\nimport ProgressConnector from \"./ProgressConnector\";\r\n\r\nexport default {\r\n  name: \"CelestialNavigationTab\",\r\n  components: {\r\n    NodeRing,\r\n    NodeBackground,\r\n    NodeOverlay,\r\n    ProgressConnector\r\n  },\r\n  data: () => ({\r\n    nodeState: null,\r\n  }),\r\n  computed: {\r\n    db() {\r\n      return {\r\n        ...GameDatabase.celestials.navigation,\r\n        ...GameDatabase.celestials.navSigils\r\n      };\r\n    },\r\n    drawOrder() {\r\n      const db = this.db;\r\n      const order = [];\r\n      for (const nodeId of Object.keys(db)) {\r\n        const node = db[nodeId];\r\n        if (node.connector instanceof Array) {\r\n          for (const config of node.connector) {\r\n            order.push({\r\n              nodeId,\r\n              is: ProgressConnector,\r\n              config,\r\n              drawOrder: config.drawOrder || CELESTIAL_NAV_DRAW_ORDER.CONNECTORS,\r\n            });\r\n          }\r\n        } else if (node.connector) {\r\n          order.push({\r\n            nodeId,\r\n            is: ProgressConnector,\r\n            config: node.connector,\r\n            drawOrder: node.connector.drawOrder || CELESTIAL_NAV_DRAW_ORDER.CONNECTORS,\r\n          });\r\n        }\r\n        if (node.node) {\r\n          order.push({\r\n            nodeId,\r\n            is: NodeBackground,\r\n            config: node.node,\r\n            drawOrder: node.node.bgDrawOrder || CELESTIAL_NAV_DRAW_ORDER.NODE_BG,\r\n          });\r\n          order.push({\r\n            nodeId,\r\n            is: NodeRing,\r\n            config: node.node,\r\n            drawOrder: node.node.drawOrder || CELESTIAL_NAV_DRAW_ORDER.NODES,\r\n          });\r\n          order.push({\r\n            nodeId,\r\n            is: NodeOverlay,\r\n            config: node.node,\r\n            drawOrder: node.node.overlayDrawOrder || CELESTIAL_NAV_DRAW_ORDER.NODE_OVERLAYS,\r\n          });\r\n        }\r\n        order.sort((a, b) => a.drawOrder - b.drawOrder);\r\n      }\r\n      return order;\r\n    }\r\n  },\r\n  created() {\r\n    this.nodeState = Object.keys(this.db).mapToObject(\r\n      name => name,\r\n      () => ({\r\n        visible: false,\r\n        complete: 0,\r\n      })\r\n    );\r\n  },\r\n  mounted() {\r\n    // eslint-disable-next-line no-unused-vars\r\n    const panLimiter = function(oldPan, newPan) {\r\n      // In the callback context, \"this\" is the svgPanZoom object.\r\n      // eslint-disable-next-line no-invalid-this\r\n      const sizes = this.getSizes();\r\n      const leftLimit = sizes.width - ((sizes.viewBox.x + sizes.viewBox.width) * sizes.realZoom);\r\n      const rightLimit = -sizes.viewBox.x * sizes.realZoom;\r\n      const topLimit = sizes.height - ((sizes.viewBox.y + sizes.viewBox.height) * sizes.realZoom);\r\n      const bottomLimit = -sizes.viewBox.y * sizes.realZoom;\r\n      return {\r\n        x: Math.max(leftLimit, Math.min(rightLimit, newPan.x)),\r\n        y: Math.max(topLimit, Math.min(bottomLimit, newPan.y))\r\n      };\r\n    };\r\n    this.panZoom = svgPanZoom(this.$refs.celestialNavigationSVG, {\r\n      controlIconsEnabled: true,\r\n      dblClickZoomEnabled: false,\r\n      center: false,\r\n      fit: false,\r\n      zoomScaleSensitivity: 0.3,\r\n      minZoom: 0.64,\r\n      maxZoom: 1.5,\r\n      beforePan: panLimiter,\r\n    });\r\n    if (CelestialNavigationViewportCache.pan) this.panZoom.pan(CelestialNavigationViewportCache.pan);\r\n    if (CelestialNavigationViewportCache.zoom) this.panZoom.zoom(CelestialNavigationViewportCache.zoom);\r\n  },\r\n  beforeDestroy() {\r\n    if (this.panZoom) {\r\n      CelestialNavigationViewportCache.zoom = this.panZoom.getZoom();\r\n      CelestialNavigationViewportCache.pan = this.panZoom.getPan();\r\n      this.panZoom.destroy();\r\n      delete this.panZoom;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      for (const key of Object.keys(this.db)) {\r\n        // The GameUI code forces update() to be called upon its initialization, which may force this to be called\r\n        // before created() on this component is actually called; this suppresses any initial errors on-creation\r\n        if (!this.nodeState) continue;\r\n        this.nodeState[key].visible = this.db[key].visible();\r\n        this.nodeState[key].complete = this.db[key].complete();\r\n      }\r\n    },\r\n    vec(x, y) {\r\n      return new Vector(x, y);\r\n    },\r\n    nodeVisibility(obj) {\r\n      return this.nodeState[obj.nodeId].visible ? \"visible\" : \"hidden\";\r\n    },\r\n  }\r\n};\r\nexport function cubicBezierArrayToPath(a, initialCommand = \"M\") {\r\n  const prefix = `${initialCommand} ${a[0].p0.x} ${a[0].p0.y}\\n`;\r\n  const parts = a.map(b => `C ${b.p1.x} ${b.p1.y} ${b.p2.x} ${b.p2.y} ${b.p3.x} ${b.p3.y}\\n`);\r\n  return prefix + parts.join(\"\");\r\n}\r\nconst CelestialNavigationViewportCache = {\r\n  pan: { x: 125, y: 125 },\r\n  zoom: 0.75,\r\n};\r\n</script>\r\n\r\n<template>\r\n  <!-- Need to wrap whole thing in a div because of properties applied to tabs -->\r\n  <div>\r\n    <svg\r\n      ref=\"celestialNavigationSVG\"\r\n      class=\"c-wide-canvas-element l-celestial-navigation\"\r\n    >\r\n      <defs>\r\n        <linearGradient\r\n          id=\"grad1\"\r\n          x1=\"0%\"\r\n          y1=\"0%\"\r\n          x2=\"100%\"\r\n          y2=\"0%\"\r\n        >\r\n          <stop\r\n            offset=\"0%\"\r\n            stop-color=\"#ffff00\"\r\n            stop-opacity=\"1\"\r\n          />\r\n          <stop\r\n            offset=\"100%\"\r\n            stop-color=\"#ff0000\"\r\n            stop-opacity=\"1\"\r\n          />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"incompleteFade\"\r\n          x1=\"0\"\r\n          x2=\"8\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop\r\n            offset=\"0\"\r\n            stop-color=\"#888\"\r\n            stop-opacity=\"0\"\r\n          />\r\n          <stop\r\n            offset=\"8\"\r\n            stop-color=\"#888\"\r\n            stop-opacity=\"1\"\r\n          />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"fadeGrad\"\r\n          y2=\"0\"\r\n          x2=\"1\"\r\n        >\r\n          <stop\r\n            offset=\"0.5\"\r\n            stop-color=\"white\"\r\n            stop-opacity=\"0\"\r\n          />\r\n          <stop\r\n            offset=\"1\"\r\n            stop-color=\"white\"\r\n            stop-opacity=\".5\"\r\n          />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"gradTeresaEffarig\"\r\n          y2=\"0\"\r\n          x2=\"1\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop\r\n            offset=\"0\"\r\n            stop-color=\"#5151ec\"\r\n          />\r\n          <stop\r\n            offset=\"1\"\r\n            stop-color=\"#d13737\"\r\n          />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"gradEffarigEnslaved\"\r\n          y2=\"0\"\r\n          x2=\"1\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop\r\n            offset=\"0\"\r\n            stop-color=\"#d13737\"\r\n          />\r\n          <stop\r\n            offset=\"1\"\r\n            stop-color=\"#ffa337\"\r\n          />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"gradEnslavedV\"\r\n          y2=\"0\"\r\n          x2=\"1\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop\r\n            offset=\"0\"\r\n            stop-color=\"#ffa337\"\r\n          />\r\n          <stop\r\n            offset=\"1\"\r\n            stop-color=\"#ffe066\"\r\n          />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"gradRaTeresa\"\r\n          y2=\"0\"\r\n          x2=\"1\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop\r\n            offset=\"0\"\r\n            stop-color=\"#9063de\"\r\n          />\r\n          <stop\r\n            offset=\"1\"\r\n            stop-color=\"#5151ec\"\r\n          />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"gradRaEffarig\"\r\n          y2=\"0\"\r\n          x2=\"1\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop\r\n            offset=\"0\"\r\n            stop-color=\"#9063de\"\r\n          />\r\n          <stop\r\n            offset=\"1\"\r\n            stop-color=\"#d13737\"\r\n          />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"gradRaEnslaved\"\r\n          y2=\"0\"\r\n          x2=\"1\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop\r\n            offset=\"0\"\r\n            stop-color=\"#9063de\"\r\n          />\r\n          <stop\r\n            offset=\"1\"\r\n            stop-color=\"#ffa337\"\r\n          />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"gradRaV\"\r\n          y2=\"0\"\r\n          x2=\"1\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop\r\n            offset=\"0\"\r\n            stop-color=\"#9063de\"\r\n          />\r\n          <stop\r\n            offset=\"1\"\r\n            stop-color=\"#ffe066\"\r\n          />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"gradRaLaitela\"\r\n          y2=\"0\"\r\n          x2=\"1\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop\r\n            offset=\"0\"\r\n            stop-color=\"#9063de\"\r\n          />\r\n          <stop\r\n            offset=\"1\"\r\n            stop-color=\"white\"\r\n          />\r\n        </linearGradient>\r\n        <linearGradient\r\n          id=\"gradLaitelaPelle\"\r\n          y2=\"0\"\r\n          x2=\"1\"\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop\r\n            offset=\"0\"\r\n            stop-color=\"white\"\r\n          />\r\n          <stop\r\n            offset=\"1\"\r\n            stop-color=\"crimson\"\r\n          />\r\n        </linearGradient>\r\n        <mask\r\n          id=\"fade\"\r\n          maskContentUnits=\"objectBoundingBox\"\r\n        >\r\n          <rect\r\n            width=\"1\"\r\n            height=\"1\"\r\n            fill=\"url(#fadeGrad)\"\r\n          />\r\n        </mask>\r\n        <filter\r\n          id=\"completeGlow\"\r\n          x=\"-100%\"\r\n          y=\"-100%\"\r\n          width=\"300%\"\r\n          height=\"300%\"\r\n        >\r\n          <feGaussianBlur\r\n            in=\"SourceGraphic\"\r\n            result=\"blurred\"\r\n            stdDeviation=\"2\"\r\n          />\r\n          <feMerge>\r\n            <feMergeNode in=\"blurred\" />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n        <filter\r\n          id=\"backgroundGlow\"\r\n          x=\"-100%\"\r\n          y=\"-100%\"\r\n          width=\"300%\"\r\n          height=\"300%\"\r\n        >\r\n          <feGaussianBlur\r\n            in=\"SourceGraphic\"\r\n            result=\"blurred\"\r\n            stdDeviation=\"4\"\r\n          />\r\n          <feMerge>\r\n            <feMergeNode in=\"blurred\" />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n      </defs>\r\n      <image\r\n        x=\"-250\"\r\n        y=\"-350\"\r\n        height=\"1503\"\r\n        width=\"1503\"\r\n        href=\"images/celestial-navigation-bg.webp\"\r\n      />\r\n      <g\r\n        v-for=\"(obj, index) in drawOrder\"\r\n        :key=\"index\"\r\n        :visibility=\"nodeVisibility(obj)\"\r\n      >\r\n        <component\r\n          :is=\"obj.is\"\r\n          :complete=\"nodeState[obj.nodeId].complete\"\r\n          v-bind=\"obj.config\"\r\n        />\r\n      </g>\r\n    </svg>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/celestial-navigation"},"metadata":{},"sourceType":"module"}