{"ast":null,"code":"import GlyphComponent from \"@/components/GlyphComponent\";\nexport default {\n  name: \"GlyphInventory\",\n  components: {\n    GlyphComponent\n  },\n\n  data() {\n    return {\n      inventory: [],\n      newGlyphs: [],\n      unequippedGlyphs: [],\n      doubleClickTimeOut: null,\n      clickedGlyphId: null,\n      glyphSacrificeUnlocked: false,\n      protectedRows: 0\n    };\n  },\n\n  computed: {\n    rowCount: () => Glyphs.totalSlots / 10,\n    colCount: () => 10\n  },\n\n  created() {\n    this.on$(GAME_EVENT.GLYPHS_CHANGED, this.glyphsChanged);\n    this.on$(GAME_EVENT.GLYPH_VISUAL_CHANGE, this.glyphsChanged);\n    this.glyphsChanged();\n  },\n\n  methods: {\n    update() {\n      this.glyphSacrificeUnlocked = GlyphSacrificeHandler.canSacrifice;\n      this.protectedRows = player.reality.glyphs.protectedRows;\n      this.newGlyphs = Glyphs.unseen;\n      this.unequippedGlyphs = Glyphs.unequipped;\n    },\n\n    toIndex(row, col) {\n      return (row - 1) * this.colCount + (col - 1);\n    },\n\n    allowDrag(event) {\n      if (event.dataTransfer.types.includes(GLYPH_MIME_TYPE)) event.preventDefault();\n    },\n\n    drop(idx, event) {\n      const id = parseInt(event.dataTransfer.getData(GLYPH_MIME_TYPE), 10);\n      if (isNaN(id)) return;\n      const glyph = Glyphs.findById(id);\n      if (!glyph) return;\n      Glyphs.moveToSlot(glyph, idx);\n    },\n\n    removeGlyph(id, force) {\n      GlyphSacrificeHandler.removeGlyph(Glyphs.findById(id), force);\n    },\n\n    clickGlyph(col, id) {\n      const glyph = Glyphs.findById(id); // If single click\n\n      if (!this.doubleClickTimeOut) {\n        this.doubleClickTimeOut = setTimeout(() => {\n          this.clickedGlyphId = null;\n          this.doubleClickTimeOut = null;\n        }, 200);\n        this.clickedGlyphId = id;\n        if (!glyph) return;\n\n        if (Glyphs.isMusicGlyph(glyph)) {\n          new Audio(`audio/note${col}.mp3`).play();\n        } // Else it's double click, so equip a glyph\n\n      } else if (this.clickedGlyphId === id) {\n        clearTimeout(this.doubleClickTimeOut);\n        this.doubleClickTimeOut = null;\n        const idx = Glyphs.active.indexOf(null);\n        if (idx !== -1) Glyphs.equip(glyph, idx);\n      }\n    },\n\n    glyphsChanged() {\n      this.inventory = Glyphs.inventory.map(GlyphGenerator.copy);\n    },\n\n    slotClass(index) {\n      return index < Glyphs.protectedSlots ? \"c-glyph-inventory__protected-slot\" : \"c-glyph-inventory__slot\";\n    },\n\n    isNew(index) {\n      return player.options.showNewGlyphIcon && this.newGlyphs.includes(this.inventory[index].id);\n    },\n\n    isUnequipped(index) {\n      return player.options.showUnequippedGlyphIcon && this.unequippedGlyphs.includes(this.inventory[index].id);\n    }\n\n  }\n};","map":{"version":3,"sources":["GlyphInventory.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport GlyphComponent from \"@/components/GlyphComponent\";\r\n\r\nexport default {\r\n  name: \"GlyphInventory\",\r\n  components: {\r\n    GlyphComponent\r\n  },\r\n  data() {\r\n    return {\r\n      inventory: [],\r\n      newGlyphs: [],\r\n      unequippedGlyphs: [],\r\n      doubleClickTimeOut: null,\r\n      clickedGlyphId: null,\r\n      glyphSacrificeUnlocked: false,\r\n      protectedRows: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    rowCount: () => Glyphs.totalSlots / 10,\r\n    colCount: () => 10,\r\n  },\r\n  created() {\r\n    this.on$(GAME_EVENT.GLYPHS_CHANGED, this.glyphsChanged);\r\n    this.on$(GAME_EVENT.GLYPH_VISUAL_CHANGE, this.glyphsChanged);\r\n    this.glyphsChanged();\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.glyphSacrificeUnlocked = GlyphSacrificeHandler.canSacrifice;\r\n      this.protectedRows = player.reality.glyphs.protectedRows;\r\n      this.newGlyphs = Glyphs.unseen;\r\n      this.unequippedGlyphs = Glyphs.unequipped;\r\n    },\r\n    toIndex(row, col) {\r\n      return (row - 1) * this.colCount + (col - 1);\r\n    },\r\n    allowDrag(event) {\r\n      if (event.dataTransfer.types.includes(GLYPH_MIME_TYPE)) event.preventDefault();\r\n    },\r\n    drop(idx, event) {\r\n      const id = parseInt(event.dataTransfer.getData(GLYPH_MIME_TYPE), 10);\r\n      if (isNaN(id)) return;\r\n      const glyph = Glyphs.findById(id);\r\n      if (!glyph) return;\r\n      Glyphs.moveToSlot(glyph, idx);\r\n    },\r\n    removeGlyph(id, force) {\r\n      GlyphSacrificeHandler.removeGlyph(Glyphs.findById(id), force);\r\n    },\r\n    clickGlyph(col, id) {\r\n      const glyph = Glyphs.findById(id);\r\n      // If single click\r\n      if (!this.doubleClickTimeOut) {\r\n        this.doubleClickTimeOut = setTimeout(() => {\r\n          this.clickedGlyphId = null;\r\n          this.doubleClickTimeOut = null;\r\n        }, 200);\r\n        this.clickedGlyphId = id;\r\n        if (!glyph) return;\r\n        if (Glyphs.isMusicGlyph(glyph)) {\r\n          new Audio(`audio/note${col}.mp3`).play();\r\n        }\r\n        // Else it's double click, so equip a glyph\r\n      } else if (this.clickedGlyphId === id) {\r\n        clearTimeout(this.doubleClickTimeOut);\r\n        this.doubleClickTimeOut = null;\r\n        const idx = Glyphs.active.indexOf(null);\r\n        if (idx !== -1) Glyphs.equip(glyph, idx);\r\n      }\r\n    },\r\n    glyphsChanged() {\r\n      this.inventory = Glyphs.inventory.map(GlyphGenerator.copy);\r\n    },\r\n    slotClass(index) {\r\n      return index < Glyphs.protectedSlots ? \"c-glyph-inventory__protected-slot\" : \"c-glyph-inventory__slot\";\r\n    },\r\n    isNew(index) {\r\n      return player.options.showNewGlyphIcon && this.newGlyphs.includes(this.inventory[index].id);\r\n    },\r\n    isUnequipped(index) {\r\n      return player.options.showUnequippedGlyphIcon && this.unequippedGlyphs.includes(this.inventory[index].id);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-glyph-inventory\">\r\n    Click and drag or double-click to equip Glyphs.\r\n    <div\r\n      v-for=\"row in rowCount\"\r\n      :key=\"protectedRows + row\"\r\n      class=\"l-glyph-inventory__row\"\r\n    >\r\n      <div\r\n        v-for=\"col in colCount\"\r\n        :key=\"col\"\r\n        class=\"l-glyph-inventory__slot\"\r\n        :class=\"slotClass(toIndex(row, col))\"\r\n        @dragover=\"allowDrag\"\r\n        @drop=\"drop(toIndex(row, col), $event)\"\r\n      >\r\n        <GlyphComponent\r\n          v-if=\"inventory[toIndex(row, col)]\"\r\n          :glyph=\"inventory[toIndex(row, col)]\"\r\n          :is-new=\"isNew(toIndex(row, col))\"\r\n          :is-unequipped=\"isUnequipped(toIndex(row, col))\"\r\n          :is-inventory-glyph=\"true\"\r\n          :show-sacrifice=\"glyphSacrificeUnlocked\"\r\n          :draggable=\"true\"\r\n          @shiftClicked=\"removeGlyph($event, false)\"\r\n          @ctrlShiftClicked=\"removeGlyph($event, true)\"\r\n          @clicked=\"clickGlyph(col, $event)\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/glyphs"},"metadata":{},"sourceType":"module"}