{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport { createEntryInfo } from \"./breakdown-entry-info\";\nexport class BreakdownEntryInfoGroup {\n  constructor(keys) {\n    this.entries = keys.map(key => createEntryInfo(key));\n  } // We show children entries under two cases; the first is when there is more than one child entry and\n  // therefore showing a list would be useful. The other is when the entry itself is a \"general\" entry, which\n  // will always be titled something vague like \"Achievements\" or \"Time Studies\". In this case, we also still show\n  // it when there is exactly one child, so that the player can see exactly which ach/TS/etc is giving the effect.\n\n\n  get hasVisibleEntries() {\n    const activeChildren = this.entries.filter(e => e.isActive && (e.mult.neq(1) || e.pow !== 1));\n    return activeChildren.length > 1 || activeChildren.length === 1 && activeChildren[0].key.startsWith(\"general\");\n  }\n\n}\nconst cache = new Map();\n/**\r\n * @returns {BreakdownEntryInfoGroup[]}\r\n */\n\nexport function getResourceEntryInfoGroups(key) {\n  const cached = cache.get(key);\n\n  if (cached !== undefined) {\n    return cached;\n  }\n\n  const treeGroups = GameDatabase.multiplierTabTree[key];\n  const groups = treeGroups === undefined ? [] : treeGroups.map(keys => new BreakdownEntryInfoGroup(keys));\n  cache.set(key, groups);\n  return groups;\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/components/tabs/statistics/breakdown-entry-info-group.js"],"names":["createEntryInfo","BreakdownEntryInfoGroup","constructor","keys","entries","map","key","hasVisibleEntries","activeChildren","filter","e","isActive","mult","neq","pow","length","startsWith","cache","Map","getResourceEntryInfoGroups","cached","get","undefined","treeGroups","GameDatabase","multiplierTabTree","groups","set"],"mappings":";AAAA,SAASA,eAAT,QAAgC,wBAAhC;AAEA,OAAO,MAAMC,uBAAN,CAA8B;AACnCC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,SAAKC,OAAL,GAAeD,IAAI,CAACE,GAAL,CAASC,GAAG,IAAIN,eAAe,CAACM,GAAD,CAA/B,CAAf;AACD,GAHkC,CAKnC;AACA;AACA;AACA;;;AACqB,MAAjBC,iBAAiB,GAAG;AACtB,UAAMC,cAAc,GAAG,KAAKJ,OAAL,CAAaK,MAAb,CAAoBC,CAAC,IAAIA,CAAC,CAACC,QAAF,KAAeD,CAAC,CAACE,IAAF,CAAOC,GAAP,CAAW,CAAX,KAAiBH,CAAC,CAACI,GAAF,KAAU,CAA1C,CAAzB,CAAvB;AACA,WAAON,cAAc,CAACO,MAAf,GAAwB,CAAxB,IACJP,cAAc,CAACO,MAAf,KAA0B,CAA1B,IAA+BP,cAAc,CAAC,CAAD,CAAd,CAAkBF,GAAlB,CAAsBU,UAAtB,CAAiC,SAAjC,CADlC;AAED;;AAbkC;AAgBrC,MAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;AAEA;AACA;AACA;;AACA,OAAO,SAASC,0BAAT,CAAoCb,GAApC,EAAyC;AAC9C,QAAMc,MAAM,GAAGH,KAAK,CAACI,GAAN,CAAUf,GAAV,CAAf;;AACA,MAAIc,MAAM,KAAKE,SAAf,EAA0B;AACxB,WAAOF,MAAP;AACD;;AACD,QAAMG,UAAU,GAAGC,YAAY,CAACC,iBAAb,CAA+BnB,GAA/B,CAAnB;AACA,QAAMoB,MAAM,GAAGH,UAAU,KAAKD,SAAf,GACX,EADW,GAEXC,UAAU,CAAClB,GAAX,CAAeF,IAAI,IAAI,IAAIF,uBAAJ,CAA4BE,IAA5B,CAAvB,CAFJ;AAGAc,EAAAA,KAAK,CAACU,GAAN,CAAUrB,GAAV,EAAeoB,MAAf;AACA,SAAOA,MAAP;AACD","sourcesContent":["import { createEntryInfo } from \"./breakdown-entry-info\";\r\n\r\nexport class BreakdownEntryInfoGroup {\r\n  constructor(keys) {\r\n    this.entries = keys.map(key => createEntryInfo(key));\r\n  }\r\n\r\n  // We show children entries under two cases; the first is when there is more than one child entry and\r\n  // therefore showing a list would be useful. The other is when the entry itself is a \"general\" entry, which\r\n  // will always be titled something vague like \"Achievements\" or \"Time Studies\". In this case, we also still show\r\n  // it when there is exactly one child, so that the player can see exactly which ach/TS/etc is giving the effect.\r\n  get hasVisibleEntries() {\r\n    const activeChildren = this.entries.filter(e => e.isActive && (e.mult.neq(1) || e.pow !== 1));\r\n    return activeChildren.length > 1 ||\r\n      (activeChildren.length === 1 && activeChildren[0].key.startsWith(\"general\"));\r\n  }\r\n}\r\n\r\nconst cache = new Map();\r\n\r\n/**\r\n * @returns {BreakdownEntryInfoGroup[]}\r\n */\r\nexport function getResourceEntryInfoGroups(key) {\r\n  const cached = cache.get(key);\r\n  if (cached !== undefined) {\r\n    return cached;\r\n  }\r\n  const treeGroups = GameDatabase.multiplierTabTree[key];\r\n  const groups = treeGroups === undefined\r\n    ? []\r\n    : treeGroups.map(keys => new BreakdownEntryInfoGroup(keys));\r\n  cache.set(key, groups);\r\n  return groups;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}