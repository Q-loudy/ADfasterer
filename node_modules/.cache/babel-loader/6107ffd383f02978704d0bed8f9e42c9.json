{"ast":null,"code":"import GlyphComponent from \"@/components/GlyphComponent\";\nexport default {\n  name: \"EquippedGlyphs\",\n  components: {\n    GlyphComponent\n  },\n\n  data() {\n    return {\n      glyphs: [],\n      dragoverIndex: -1,\n      respec: player.reality.respec,\n      respecIntoProtected: player.options.respecIntoProtected,\n      undoSlotsAvailable: 0,\n      undoAvailable: false,\n      undoVisible: false,\n      cosmeticGlow: false\n    };\n  },\n\n  computed: {\n    // Empty slots are bigger due to the enlarged drop zone\n    GLYPH_SIZE: () => 5,\n\n    slotCount() {\n      return this.glyphs.length;\n    },\n\n    arrangementRadius() {\n      if (this.slotCount === 0) return 0;\n      return this.slotCount + 1;\n    },\n\n    respecTooltip() {\n      const reset = Pelle.isDoomed ? \"Armageddon\" : \"Reality\";\n      return this.respec ? `Respec is active and will place your currently - equipped Glyphs into your inventory after ${reset}.` : `Your currently-equipped Glyphs will stay equipped on ${reset}.`;\n    },\n\n    undoTooltip() {\n      if (!this.undoSlotsAvailable) return \"You do not have available inventory space to unequip Glyphs to\";\n      return this.undoAvailable ? \"Unequip the last equipped Glyph and rewind Reality to when you equipped it.\" + \" (Most resources will be fully reset)\" : \"Undo is only available for Glyphs equipped during this Reality\";\n    },\n\n    unequipText() {\n      if (Pelle.isDoomed) return \"Unequip Glyphs on Armageddon\";\n      return \"Unequip Glyphs on Reality\";\n    },\n\n    isDoomed() {\n      return Pelle.isDoomed;\n    },\n\n    glyphRespecStyle() {\n      if (this.respec) {\n        return {\n          color: \"var(--color-reality-light)\",\n          \"background-color\": \"var(--color-reality)\",\n          \"border-color\": \"#094e0b\",\n          cursor: \"pointer\"\n        };\n      }\n\n      return {\n        cursor: \"pointer\"\n      };\n    },\n\n    // \"Armageddon\" causes the button to have text overflow, so we conditionally make the button taller; this doesn't\n    // cause container overflow due to another button being removed entirely when doomed\n    unequipClass() {\n      return {\n        \"l-glyph-equip-button\": this.isDoomed,\n        \"l-glyph-equip-button-short\": !this.isDoomed\n      };\n    }\n\n  },\n\n  created() {\n    this.on$(GAME_EVENT.GLYPHS_EQUIPPED_CHANGED, this.glyphsChanged);\n    this.glyphsChanged();\n  },\n\n  methods: {\n    update() {\n      this.respec = player.reality.respec;\n      this.respecIntoProtected = player.options.respecIntoProtected;\n      this.undoSlotsAvailable = this.respecIntoProtected ? Glyphs.totalSlots - GameCache.glyphInventorySpace.value - Glyphs.inventoryList.length > 0 : GameCache.glyphInventorySpace.value > 0;\n      this.undoVisible = TeresaUnlocks.undo.canBeApplied;\n      this.undoAvailable = this.undoVisible && this.undoSlotsAvailable && player.reality.glyphs.undo.length > 0;\n      this.cosmeticGlow = player.reality.glyphs.cosmetics.glowNotification;\n    },\n\n    glyphPositionStyle(idx) {\n      const angle = 2 * Math.PI * idx / this.slotCount;\n      const dx = -this.GLYPH_SIZE / 2 + this.arrangementRadius * Math.sin(angle);\n      const dy = -this.GLYPH_SIZE / 2 + this.arrangementRadius * Math.cos(angle);\n      return {\n        position: \"absolute\",\n        left: `calc(50% + ${dx}rem)`,\n        top: `calc(50% + ${dy}rem)`,\n        \"z-index\": 1\n      };\n    },\n\n    dragover(event, idx) {\n      if (!event.dataTransfer.types.includes(GLYPH_MIME_TYPE)) return;\n      event.preventDefault();\n      this.dragoverIndex = idx;\n    },\n\n    dragleave(idx) {\n      if (this.dragoverIndex === idx) this.dragoverIndex = -1;\n    },\n\n    drop(event, idx) {\n      this.dragoverIndex = -1;\n      const id = parseInt(event.dataTransfer.getData(GLYPH_MIME_TYPE), 10);\n      if (isNaN(id)) return;\n      const glyph = Glyphs.findById(id);\n      if (glyph) Glyphs.equip(glyph, idx);\n    },\n\n    toggleRespec() {\n      player.reality.respec = !player.reality.respec;\n    },\n\n    toggleRespecIntoProtected() {\n      player.options.respecIntoProtected = !player.options.respecIntoProtected;\n    },\n\n    glyphsChanged() {\n      this.glyphs = Glyphs.active.map(GlyphGenerator.copy);\n      this.$recompute(\"slotCount\");\n    },\n\n    undo() {\n      if (!this.undoAvailable || Pelle.isDoomed) return;\n      if (player.options.confirmations.glyphUndo) Modal.glyphUndo.show();else Glyphs.undo();\n    },\n\n    dragEvents(idx) {\n      return {\n        dragover: $event => this.dragover($event, idx),\n        dragleave: () => this.dragleave(idx),\n        drop: $event => this.drop($event, idx)\n      };\n    },\n\n    showEquippedModal() {\n      // If there aren't any glyphs equipped, the array is full of nulls which get filtered out by x => x\n      if (this.glyphs.filter(x => x).length === 0) return;\n      Modal.glyphShowcasePanel.show({\n        name: \"Equipped Glyphs\",\n        glyphSet: this.glyphs,\n        closeEvent: GAME_EVENT.GLYPHS_EQUIPPED_CHANGED\n      });\n    },\n\n    showOptionModal() {\n      player.reality.glyphs.cosmetics.glowNotification = false;\n      Modal.glyphDisplayOptions.show();\n    },\n\n    clickGlyph(glyph, idx, increaseSound = false) {\n      if (Glyphs.isMusicGlyph(glyph)) {\n        const sound = idx + (increaseSound ? 6 : 1);\n        new Audio(`audio/note${sound}.mp3`).play();\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["EquippedGlyphs.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport GlyphComponent from \"@/components/GlyphComponent\";\r\n\r\nexport default {\r\n  name: \"EquippedGlyphs\",\r\n  components: {\r\n    GlyphComponent\r\n  },\r\n  data() {\r\n    return {\r\n      glyphs: [],\r\n      dragoverIndex: -1,\r\n      respec: player.reality.respec,\r\n      respecIntoProtected: player.options.respecIntoProtected,\r\n      undoSlotsAvailable: 0,\r\n      undoAvailable: false,\r\n      undoVisible: false,\r\n      cosmeticGlow: false,\r\n    };\r\n  },\r\n  computed: {\r\n    // Empty slots are bigger due to the enlarged drop zone\r\n    GLYPH_SIZE: () => 5,\r\n    slotCount() {\r\n      return this.glyphs.length;\r\n    },\r\n    arrangementRadius() {\r\n      if (this.slotCount === 0) return 0;\r\n      return this.slotCount + 1;\r\n    },\r\n    respecTooltip() {\r\n      const reset = Pelle.isDoomed ? \"Armageddon\" : \"Reality\";\r\n      return this.respec\r\n        ? `Respec is active and will place your currently - equipped Glyphs into your inventory after ${reset}.`\r\n        : `Your currently-equipped Glyphs will stay equipped on ${reset}.`;\r\n    },\r\n    undoTooltip() {\r\n      if (!this.undoSlotsAvailable) return \"You do not have available inventory space to unequip Glyphs to\";\r\n      return this.undoAvailable\r\n        ? (\"Unequip the last equipped Glyph and rewind Reality to when you equipped it.\" +\r\n          \" (Most resources will be fully reset)\")\r\n        : \"Undo is only available for Glyphs equipped during this Reality\";\r\n    },\r\n    unequipText() {\r\n      if (Pelle.isDoomed) return \"Unequip Glyphs on Armageddon\";\r\n      return \"Unequip Glyphs on Reality\";\r\n    },\r\n    isDoomed() {\r\n      return Pelle.isDoomed;\r\n    },\r\n    glyphRespecStyle() {\r\n      if (this.respec) {\r\n        return {\r\n          color: \"var(--color-reality-light)\",\r\n          \"background-color\": \"var(--color-reality)\",\r\n          \"border-color\": \"#094e0b\",\r\n          cursor: \"pointer\",\r\n        };\r\n      }\r\n      return {\r\n        cursor: \"pointer\",\r\n      };\r\n    },\r\n    // \"Armageddon\" causes the button to have text overflow, so we conditionally make the button taller; this doesn't\r\n    // cause container overflow due to another button being removed entirely when doomed\r\n    unequipClass() {\r\n      return {\r\n        \"l-glyph-equip-button\": this.isDoomed,\r\n        \"l-glyph-equip-button-short\": !this.isDoomed,\r\n      };\r\n    }\r\n  },\r\n  created() {\r\n    this.on$(GAME_EVENT.GLYPHS_EQUIPPED_CHANGED, this.glyphsChanged);\r\n    this.glyphsChanged();\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.respec = player.reality.respec;\r\n      this.respecIntoProtected = player.options.respecIntoProtected;\r\n      this.undoSlotsAvailable = this.respecIntoProtected\r\n        ? Glyphs.totalSlots - GameCache.glyphInventorySpace.value - Glyphs.inventoryList.length > 0\r\n        : GameCache.glyphInventorySpace.value > 0;\r\n      this.undoVisible = TeresaUnlocks.undo.canBeApplied;\r\n      this.undoAvailable = this.undoVisible && this.undoSlotsAvailable && player.reality.glyphs.undo.length > 0;\r\n      this.cosmeticGlow = player.reality.glyphs.cosmetics.glowNotification;\r\n    },\r\n    glyphPositionStyle(idx) {\r\n      const angle = 2 * Math.PI * idx / this.slotCount;\r\n      const dx = -this.GLYPH_SIZE / 2 + this.arrangementRadius * Math.sin(angle);\r\n      const dy = -this.GLYPH_SIZE / 2 + this.arrangementRadius * Math.cos(angle);\r\n      return {\r\n        position: \"absolute\",\r\n        left: `calc(50% + ${dx}rem)`,\r\n        top: `calc(50% + ${dy}rem)`,\r\n        \"z-index\": 1,\r\n      };\r\n    },\r\n    dragover(event, idx) {\r\n      if (!event.dataTransfer.types.includes(GLYPH_MIME_TYPE)) return;\r\n      event.preventDefault();\r\n      this.dragoverIndex = idx;\r\n    },\r\n    dragleave(idx) {\r\n      if (this.dragoverIndex === idx) this.dragoverIndex = -1;\r\n    },\r\n    drop(event, idx) {\r\n      this.dragoverIndex = -1;\r\n      const id = parseInt(event.dataTransfer.getData(GLYPH_MIME_TYPE), 10);\r\n      if (isNaN(id)) return;\r\n      const glyph = Glyphs.findById(id);\r\n      if (glyph) Glyphs.equip(glyph, idx);\r\n    },\r\n    toggleRespec() {\r\n      player.reality.respec = !player.reality.respec;\r\n    },\r\n    toggleRespecIntoProtected() {\r\n      player.options.respecIntoProtected = !player.options.respecIntoProtected;\r\n    },\r\n    glyphsChanged() {\r\n      this.glyphs = Glyphs.active.map(GlyphGenerator.copy);\r\n      this.$recompute(\"slotCount\");\r\n    },\r\n    undo() {\r\n      if (!this.undoAvailable || Pelle.isDoomed) return;\r\n      if (player.options.confirmations.glyphUndo) Modal.glyphUndo.show();\r\n      else Glyphs.undo();\r\n    },\r\n    dragEvents(idx) {\r\n      return {\r\n        dragover: $event => this.dragover($event, idx),\r\n        dragleave: () => this.dragleave(idx),\r\n        drop: $event => this.drop($event, idx),\r\n      };\r\n    },\r\n    showEquippedModal() {\r\n      // If there aren't any glyphs equipped, the array is full of nulls which get filtered out by x => x\r\n      if (this.glyphs.filter(x => x).length === 0) return;\r\n      Modal.glyphShowcasePanel.show({\r\n        name: \"Equipped Glyphs\",\r\n        glyphSet: this.glyphs,\r\n        closeEvent: GAME_EVENT.GLYPHS_EQUIPPED_CHANGED,\r\n      });\r\n    },\r\n    showOptionModal() {\r\n      player.reality.glyphs.cosmetics.glowNotification = false;\r\n      Modal.glyphDisplayOptions.show();\r\n    },\r\n    clickGlyph(glyph, idx, increaseSound = false) {\r\n      if (Glyphs.isMusicGlyph(glyph)) {\r\n        const sound = idx + (increaseSound ? 6 : 1);\r\n        new Audio(`audio/note${sound}.mp3`).play();\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-equipped-glyphs\">\r\n    <div class=\"l-equipped-glyphs__slots\">\r\n      <div\r\n        v-for=\"(glyph, idx) in glyphs\"\r\n        :key=\"idx\"\r\n        class=\"l-glyph-set-preview\"\r\n        :style=\"glyphPositionStyle(idx)\"\r\n        v-on=\"dragEvents(idx)\"\r\n        @click=\"showEquippedModal\"\r\n      >\r\n        <!-- the drop zone is a bit larger than the glyph itself. -->\r\n        <div class=\"l-equipped-glyphs__dropzone\" />\r\n        <GlyphComponent\r\n          v-if=\"glyph\"\r\n          :key=\"idx\"\r\n          :glyph=\"glyph\"\r\n          :circular=\"true\"\r\n          :is-active-glyph=\"true\"\r\n          class=\"c-equipped-glyph\"\r\n          @clicked=\"clickGlyph(glyph, idx)\"\r\n          @shiftClicked=\"clickGlyph(glyph, idx, true)\"\r\n          @ctrlShiftClicked=\"clickGlyph(glyph, idx, true)\"\r\n        />\r\n        <div\r\n          v-else\r\n          :class=\"['l-equipped-glyphs__empty', 'c-equipped-glyphs__empty',\r\n                   {'c-equipped-glyphs__empty--dragover': dragoverIndex === idx}]\"\r\n        />\r\n      </div>\r\n    </div>\r\n    <div class=\"l-equipped-glyphs__buttons\">\r\n      <button\r\n        class=\"c-reality-upgrade-btn\"\r\n        :class=\"unequipClass\"\r\n        :style=\"glyphRespecStyle\"\r\n        :ach-tooltip=\"respecTooltip\"\r\n        @click=\"toggleRespec\"\r\n      >\r\n        {{ unequipText }}\r\n      </button>\r\n      <button\r\n        v-if=\"undoVisible\"\r\n        class=\"l-glyph-equip-button c-reality-upgrade-btn\"\r\n        :class=\"{'c-reality-upgrade-btn--unavailable': !undoAvailable}\"\r\n        :ach-tooltip=\"undoTooltip\"\r\n        @click=\"undo\"\r\n      >\r\n        <span>Rewind to <b>undo</b> the last equipped Glyph</span>\r\n      </button>\r\n      <button\r\n        class=\"l-glyph-equip-button c-reality-upgrade-btn\"\r\n        @click=\"toggleRespecIntoProtected\"\r\n      >\r\n        Unequip Glyphs to:\r\n        <br>\r\n        <span v-if=\"respecIntoProtected\">Protected slots</span>\r\n        <span v-else>Main inventory</span>\r\n      </button>\r\n      <button\r\n        class=\"l-glyph-equip-button-short c-reality-upgrade-btn\"\r\n        :class=\"{'tutorial--glow': cosmeticGlow}\"\r\n        @click=\"showOptionModal\"\r\n      >\r\n        Open Glyph Visual Options\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-equipped-glyph {\r\n  -webkit-user-drag: none;\r\n}\r\n\r\n.l-glyph-equip-button {\r\n  width: 100%;\r\n  height: 3.5rem;\r\n  margin: 0.25rem 0.5rem;\r\n}\r\n\r\n.l-glyph-equip-button-short {\r\n  width: 100%;\r\n  height: 2.5rem;\r\n  margin: 0.25rem 0.5rem;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/glyphs"},"metadata":{},"sourceType":"module"}