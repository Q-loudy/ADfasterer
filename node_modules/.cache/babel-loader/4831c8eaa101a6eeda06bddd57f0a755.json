{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.reduce.js\";\n\nclass Lazy {\n  constructor(getValue) {\n    this._getValue = getValue;\n    Lazy.registerLazy(this);\n  }\n\n  static get registrar() {\n    if (Lazy._registrar === undefined) {\n      Lazy._registrar = [];\n    }\n\n    return Lazy._registrar;\n  }\n\n  static registerLazy(object) {\n    Lazy.registrar.push(object);\n  }\n\n  static invalidateAll() {\n    for (const obj of Lazy.registrar) {\n      obj.invalidate();\n    }\n  }\n\n  get value() {\n    if (this._value === undefined) {\n      this._value = this._getValue();\n    }\n\n    return this._value;\n  }\n\n  invalidate() {\n    this._value = undefined;\n  }\n  /**\r\n   * @return {Lazy}\r\n   */\n\n\n  invalidateOn(...events) {\n    for (const event of events) {\n      EventHub.logic.on(event, () => this.invalidate());\n    }\n\n    return this;\n  }\n\n}\n\nwindow.Lazy = Lazy;\nexport const GameCache = {\n  worstChallengeTime: new Lazy(() => player.challenge.normal.bestTimes.max()),\n  bestRunIPPM: new Lazy(() => player.records.recentInfinities.map(run => ratePerMinute(run[2], run[0])).reduce(Decimal.maxReducer)),\n  averageRealTimePerEternity: new Lazy(() => player.records.recentEternities.map(run => run[1]).reduce(Number.sumReducer) / (1000 * player.records.recentEternities.length)),\n  tickSpeedMultDecrease: new Lazy(() => 10 - Effects.sum(BreakInfinityUpgrade.tickspeedCostMult, EternityChallenge(11).reward)),\n  dimensionMultDecrease: new Lazy(() => 10 - Effects.sum(BreakInfinityUpgrade.dimCostMult, EternityChallenge(6).reward)),\n  timeStudies: new Lazy(() => NormalTimeStudyState.studies.map(s => player.timestudy.studies.includes(s.id))),\n  currentStudyTree: new Lazy(() => new TimeStudyTree(TimeStudyTree.currentStudies)),\n  achievementPeriod: new Lazy(() => TimeSpan.fromMinutes(30 - Effects.sum(Perk.achievementGroup1, Perk.achievementGroup2, Perk.achievementGroup3, Perk.achievementGroup4)).totalMilliseconds),\n  buyablePerks: new Lazy(() => Perks.all.filter(p => p.canBeBought)),\n  // Cached because it needs to be checked upon any change to antimatter, but that's a hot path and we want to keep\n  // unnecessary repetitive calculations and accessing to a minimum\n  cheapestAntimatterAutobuyer: new Lazy(() => Autobuyer.antimatterDimension.zeroIndexed.concat(Autobuyer.tickspeed).filter(ab => !(ab.isBought || ab.isUnlocked)).map(ab => ab.antimatterCost.toNumber()).min()),\n  // The effect is defined in antimatter_dimensions.js because that's where the non-cached\n  // code originally lived.\n  antimatterDimensionCommonMultiplier: new Lazy(() => antimatterDimensionCommonMultiplier()),\n  // 0 will cause a crash if invoked; this way the tier can be used as an index\n  antimatterDimensionFinalMultipliers: Array.range(0, 9).map(tier => new Lazy(() => getDimensionFinalMultiplierUncached(tier))),\n  infinityDimensionCommonMultiplier: new Lazy(() => infinityDimensionCommonMultiplier()),\n  timeDimensionCommonMultiplier: new Lazy(() => timeDimensionCommonMultiplier()),\n  glyphInventorySpace: new Lazy(() => Glyphs.freeInventorySpace),\n  glyphEffects: new Lazy(() => orderedEffectList.mapToObject(k => k, k => getAdjustedGlyphEffectUncached(k))),\n  staticGlyphWeights: new Lazy(() => staticGlyphWeights()),\n  logTotalGlyphSacrifice: new Lazy(() => GlyphSacrificeHandler.logTotalSacrifice),\n  totalIPMult: new Lazy(() => totalIPMult()),\n  challengeTimeSum: new Lazy(() => player.challenge.normal.bestTimes.sum()),\n  infinityChallengeTimeSum: new Lazy(() => player.challenge.infinity.bestTimes.sum())\n};\nEventHub.logic.on(GAME_EVENT.GLYPHS_CHANGED, () => {\n  GameCache.glyphInventorySpace.invalidate();\n  GameCache.glyphEffects.invalidate();\n  GameCache.staticGlyphWeights.invalidate();\n}, GameCache.glyphEffects);\n\nGameCache.antimatterDimensionFinalMultipliers.invalidate = function () {\n  for (const x of this) x.invalidate();\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/cache.js"],"names":["Lazy","constructor","getValue","_getValue","registerLazy","registrar","_registrar","undefined","object","push","invalidateAll","obj","invalidate","value","_value","invalidateOn","events","event","EventHub","logic","on","window","GameCache","worstChallengeTime","player","challenge","normal","bestTimes","max","bestRunIPPM","records","recentInfinities","map","run","ratePerMinute","reduce","Decimal","maxReducer","averageRealTimePerEternity","recentEternities","Number","sumReducer","length","tickSpeedMultDecrease","Effects","sum","BreakInfinityUpgrade","tickspeedCostMult","EternityChallenge","reward","dimensionMultDecrease","dimCostMult","timeStudies","NormalTimeStudyState","studies","s","timestudy","includes","id","currentStudyTree","TimeStudyTree","currentStudies","achievementPeriod","TimeSpan","fromMinutes","Perk","achievementGroup1","achievementGroup2","achievementGroup3","achievementGroup4","totalMilliseconds","buyablePerks","Perks","all","filter","p","canBeBought","cheapestAntimatterAutobuyer","Autobuyer","antimatterDimension","zeroIndexed","concat","tickspeed","ab","isBought","isUnlocked","antimatterCost","toNumber","min","antimatterDimensionCommonMultiplier","antimatterDimensionFinalMultipliers","Array","range","tier","getDimensionFinalMultiplierUncached","infinityDimensionCommonMultiplier","timeDimensionCommonMultiplier","glyphInventorySpace","Glyphs","freeInventorySpace","glyphEffects","orderedEffectList","mapToObject","k","getAdjustedGlyphEffectUncached","staticGlyphWeights","logTotalGlyphSacrifice","GlyphSacrificeHandler","logTotalSacrifice","totalIPMult","challengeTimeSum","infinityChallengeTimeSum","infinity","GAME_EVENT","GLYPHS_CHANGED","x"],"mappings":"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","sourcesContent":["class Lazy {\r\n  constructor(getValue) {\r\n    this._getValue = getValue;\r\n    Lazy.registerLazy(this);\r\n  }\r\n\r\n  static get registrar() {\r\n    if (Lazy._registrar === undefined) {\r\n      Lazy._registrar = [];\r\n    }\r\n    return Lazy._registrar;\r\n  }\r\n\r\n  static registerLazy(object) {\r\n    Lazy.registrar.push(object);\r\n  }\r\n\r\n  static invalidateAll() {\r\n    for (const obj of Lazy.registrar) {\r\n      obj.invalidate();\r\n    }\r\n  }\r\n\r\n  get value() {\r\n    if (this._value === undefined) {\r\n      this._value = this._getValue();\r\n    }\r\n    return this._value;\r\n  }\r\n\r\n  invalidate() {\r\n    this._value = undefined;\r\n  }\r\n\r\n  /**\r\n   * @return {Lazy}\r\n   */\r\n  invalidateOn(...events) {\r\n    for (const event of events) {\r\n      EventHub.logic.on(event, () => this.invalidate());\r\n    }\r\n    return this;\r\n  }\r\n}\r\nwindow.Lazy = Lazy;\r\n\r\nexport const GameCache = {\r\n  worstChallengeTime: new Lazy(() => player.challenge.normal.bestTimes.max()),\r\n\r\n  bestRunIPPM: new Lazy(() =>\r\n    player.records.recentInfinities\r\n      .map(run => ratePerMinute(run[2], run[0]))\r\n      .reduce(Decimal.maxReducer)\r\n  ),\r\n\r\n  averageRealTimePerEternity: new Lazy(() => player.records.recentEternities\r\n    .map(run => run[1])\r\n    .reduce(Number.sumReducer) / (1000 * player.records.recentEternities.length)),\r\n\r\n  tickSpeedMultDecrease: new Lazy(() => 10 - Effects.sum(\r\n    BreakInfinityUpgrade.tickspeedCostMult,\r\n    EternityChallenge(11).reward\r\n  )),\r\n\r\n  dimensionMultDecrease: new Lazy(() => 10 - Effects.sum(\r\n    BreakInfinityUpgrade.dimCostMult,\r\n    EternityChallenge(6).reward\r\n  )),\r\n\r\n  timeStudies: new Lazy(() => NormalTimeStudyState.studies\r\n    .map(s => player.timestudy.studies.includes(s.id))),\r\n\r\n  currentStudyTree: new Lazy(() => new TimeStudyTree(TimeStudyTree.currentStudies)),\r\n\r\n  achievementPeriod: new Lazy(() => TimeSpan.fromMinutes(30 - Effects.sum(\r\n    Perk.achievementGroup1,\r\n    Perk.achievementGroup2,\r\n    Perk.achievementGroup3,\r\n    Perk.achievementGroup4\r\n  )).totalMilliseconds),\r\n\r\n  buyablePerks: new Lazy(() => Perks.all.filter(p => p.canBeBought)),\r\n\r\n  // Cached because it needs to be checked upon any change to antimatter, but that's a hot path and we want to keep\r\n  // unnecessary repetitive calculations and accessing to a minimum\r\n  cheapestAntimatterAutobuyer: new Lazy(() => Autobuyer.antimatterDimension.zeroIndexed.concat(Autobuyer.tickspeed)\r\n    .filter(ab => !(ab.isBought || ab.isUnlocked))\r\n    .map(ab => ab.antimatterCost.toNumber())\r\n    .min()\r\n  ),\r\n\r\n  // The effect is defined in antimatter_dimensions.js because that's where the non-cached\r\n  // code originally lived.\r\n  antimatterDimensionCommonMultiplier: new Lazy(() => antimatterDimensionCommonMultiplier()),\r\n\r\n  // 0 will cause a crash if invoked; this way the tier can be used as an index\r\n  antimatterDimensionFinalMultipliers: Array.range(0, 9)\r\n    .map(tier => new Lazy(() => getDimensionFinalMultiplierUncached(tier))),\r\n\r\n  infinityDimensionCommonMultiplier: new Lazy(() => infinityDimensionCommonMultiplier()),\r\n\r\n  timeDimensionCommonMultiplier: new Lazy(() => timeDimensionCommonMultiplier()),\r\n\r\n  glyphInventorySpace: new Lazy(() => Glyphs.freeInventorySpace),\r\n\r\n  glyphEffects: new Lazy(() => orderedEffectList.mapToObject(k => k, k => getAdjustedGlyphEffectUncached(k))),\r\n\r\n  staticGlyphWeights: new Lazy(() => staticGlyphWeights()),\r\n\r\n  logTotalGlyphSacrifice: new Lazy(() => GlyphSacrificeHandler.logTotalSacrifice),\r\n\r\n  totalIPMult: new Lazy(() => totalIPMult()),\r\n\r\n  challengeTimeSum: new Lazy(() => player.challenge.normal.bestTimes.sum()),\r\n\r\n  infinityChallengeTimeSum: new Lazy(() => player.challenge.infinity.bestTimes.sum()),\r\n};\r\n\r\nEventHub.logic.on(GAME_EVENT.GLYPHS_CHANGED, () => {\r\n  GameCache.glyphInventorySpace.invalidate();\r\n  GameCache.glyphEffects.invalidate();\r\n  GameCache.staticGlyphWeights.invalidate();\r\n}, GameCache.glyphEffects);\r\n\r\nGameCache.antimatterDimensionFinalMultipliers.invalidate = function() {\r\n  for (const x of this) x.invalidate();\r\n};\r\n"]},"metadata":{},"sourceType":"module"}