{"ast":null,"code":"import ChallengeGrid from \"@/components/ChallengeGrid\";\nimport ChallengeTabHeader from \"@/components/ChallengeTabHeader\";\nimport InfinityChallengeBox from \"./InfinityChallengeBox\";\nexport default {\n  name: \"InfinityChallengesTab\",\n  components: {\n    ChallengeGrid,\n    ChallengeTabHeader,\n    InfinityChallengeBox\n  },\n\n  data() {\n    return {\n      nextIC: 0,\n      showAllChallenges: false\n    };\n  },\n\n  computed: {\n    challenges() {\n      return InfinityChallenges.all;\n    },\n\n    nextAtDisplay() {\n      var _this$nextIC;\n\n      const first = ((_this$nextIC = this.nextIC) === null || _this$nextIC === void 0 ? void 0 : _this$nextIC.id) === 1;\n      const next = InfinityChallenges.nextICUnlockAM;\n      if (first) return `The first Infinity Challenge unlocks at ${format(next)} antimatter.`;\n      return next === undefined ? \"All Infinity Challenges unlocked\" : `Next Infinity Challenge unlocks at ${format(next)} antimatter.`;\n    }\n\n  },\n  methods: {\n    update() {\n      this.nextIC = InfinityChallenges.nextIC;\n      this.showAllChallenges = player.options.showAllChallenges;\n    },\n\n    isChallengeVisible(challenge) {\n      return challenge.isUnlocked || this.showAllChallenges && PlayerProgress.eternityUnlocked();\n    }\n\n  }\n};","map":{"version":3,"sources":["InfinityChallengesTab.vue"],"names":[],"mappings":"AACA,OAAA,aAAA,MAAA,4BAAA;AACA,OAAA,kBAAA,MAAA,iCAAA;AACA,OAAA,oBAAA,MAAA,wBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,uBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,aADA;AAEA,IAAA,kBAFA;AAGA,IAAA;AAHA,GAFA;;AAOA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,MAAA,EAAA,CADA;AAEA,MAAA,iBAAA,EAAA;AAFA,KAAA;AAIA,GAZA;;AAaA,EAAA,QAAA,EAAA;AACA,IAAA,UAAA,GAAA;AACA,aAAA,kBAAA,CAAA,GAAA;AACA,KAHA;;AAIA,IAAA,aAAA,GAAA;AAAA;;AACA,YAAA,KAAA,GAAA,sBAAA,MAAA,8DAAA,EAAA,MAAA,CAAA;AACA,YAAA,IAAA,GAAA,kBAAA,CAAA,cAAA;AAEA,UAAA,KAAA,EAAA,OAAA,2CAAA,MAAA,CAAA,IAAA,CAAA,cAAA;AACA,aAAA,IAAA,KAAA,SAAA,GACA,kCADA,GAEA,sCAAA,MAAA,CAAA,IAAA,CAAA,cAFA;AAGA;;AAZA,GAbA;AA2BA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,MAAA,GAAA,kBAAA,CAAA,MAAA;AACA,WAAA,iBAAA,GAAA,MAAA,CAAA,OAAA,CAAA,iBAAA;AACA,KAJA;;AAKA,IAAA,kBAAA,CAAA,SAAA,EAAA;AACA,aAAA,SAAA,CAAA,UAAA,IAAA,KAAA,iBAAA,IAAA,cAAA,CAAA,gBAAA,EAAA;AACA;;AAPA;AA3BA,CAAA","sourcesContent":["<script>\r\nimport ChallengeGrid from \"@/components/ChallengeGrid\";\r\nimport ChallengeTabHeader from \"@/components/ChallengeTabHeader\";\r\nimport InfinityChallengeBox from \"./InfinityChallengeBox\";\r\n\r\nexport default {\r\n  name: \"InfinityChallengesTab\",\r\n  components: {\r\n    ChallengeGrid,\r\n    ChallengeTabHeader,\r\n    InfinityChallengeBox\r\n  },\r\n  data() {\r\n    return {\r\n      nextIC: 0,\r\n      showAllChallenges: false\r\n    };\r\n  },\r\n  computed: {\r\n    challenges() {\r\n      return InfinityChallenges.all;\r\n    },\r\n    nextAtDisplay() {\r\n      const first = this.nextIC?.id === 1;\r\n      const next = InfinityChallenges.nextICUnlockAM;\r\n\r\n      if (first) return `The first Infinity Challenge unlocks at ${format(next)} antimatter.`;\r\n      return next === undefined\r\n        ? \"All Infinity Challenges unlocked\"\r\n        : `Next Infinity Challenge unlocks at ${format(next)} antimatter.`;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.nextIC = InfinityChallenges.nextIC;\r\n      this.showAllChallenges = player.options.showAllChallenges;\r\n    },\r\n    isChallengeVisible(challenge) {\r\n      return challenge.isUnlocked || (this.showAllChallenges && PlayerProgress.eternityUnlocked());\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-challenges-tab\">\r\n    <ChallengeTabHeader />\r\n    <div>\r\n      An active Big Crunch Autobuyer will Crunch immediately when\r\n      reaching an Infinity Challenge's antimatter goal, regardless of settings.\r\n    </div>\r\n    <div>{{ nextAtDisplay }}</div>\r\n    <ChallengeGrid\r\n      v-slot=\"{ challenge }\"\r\n      :challenges=\"challenges\"\r\n      :is-challenge-visible=\"isChallengeVisible\"\r\n    >\r\n      <InfinityChallengeBox :challenge=\"challenge\" />\r\n    </ChallengeGrid>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/infinity-challenges"},"metadata":{},"sourceType":"module"}