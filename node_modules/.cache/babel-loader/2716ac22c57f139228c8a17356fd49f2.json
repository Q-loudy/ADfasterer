{"ast":null,"code":"import _defineProperty from \"C:/Games/ADFasterer/ADfasterer/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.flat-map.js\";\nimport \"core-js/modules/es.array.unscopables.flat-map.js\";\nimport { GameMechanicState } from \"../../utils\";\n\nclass RiftMilestoneState extends GameMechanicState {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"lastChecked\", false);\n  }\n\n  get requirement() {\n    return this.config.requirement;\n  }\n\n  get resource() {\n    return this.config.resource;\n  }\n\n  checkMilestoneState() {\n    if (this.lastChecked !== this.isUnlocked) {\n      var _this$config$onStateC, _this$config;\n\n      (_this$config$onStateC = (_this$config = this.config).onStateChange) === null || _this$config$onStateC === void 0 ? void 0 : _this$config$onStateC.call(_this$config);\n    }\n\n    this.lastChecked = this.isUnlocked;\n  }\n\n  get isUnlocked() {\n    if (this.resource === \"decay\" && PelleRifts.chaos.milestones[0].isEffectActive) return true;\n    return this.requirement <= PelleRifts[this.resource].percentage;\n  }\n\n  get isEffectActive() {\n    return this.isUnlocked;\n  }\n\n  get description() {\n    const d = this.config.description;\n    return typeof d === \"function\" ? d() : d;\n  }\n\n  get formattedEffect() {\n    if (this.canBeApplied) return this.config.formatEffect(this.effectValue);\n    return false;\n  }\n\n}\n\nclass RiftState extends GameMechanicState {\n  constructor(config) {\n    super(config);\n    this._milestones = this.config.milestones.map(x => new RiftMilestoneState(x));\n  }\n\n  get fillCurrency() {\n    return this.config.currency();\n  }\n\n  get strike() {\n    return this.config.strike();\n  }\n\n  get canBeApplied() {\n    return this.strike.hasStrike;\n  }\n\n  get name() {\n    return this.config.name;\n  }\n\n  get reducedTo() {\n    return this.rift.reducedTo;\n  }\n\n  set reducedTo(value) {\n    this.rift.reducedTo = value;\n  }\n\n  get rift() {\n    return player.celestials.pelle.rifts[this.config.key];\n  }\n\n  get totalFill() {\n    return this.rift.fill;\n  }\n\n  set totalFill(value) {\n    this.rift.fill = value;\n  }\n\n  get isActive() {\n    return this.rift.active;\n  }\n\n  get realPercentage() {\n    return this.config.percentage(this.totalFill);\n  }\n\n  get spentPercentage() {\n    return this.rift.percentageSpent || 0;\n  }\n\n  get percentage() {\n    if (this.reducedTo > 1) return this.reducedTo;\n    if (!this.config.spendable) return Math.min(this.realPercentage, this.reducedTo);\n    return Math.min(this.config.percentage(this.totalFill) - this.spentPercentage, this.reducedTo);\n  }\n\n  get milestones() {\n    return this._milestones;\n  }\n\n  get description() {\n    return this.config.description;\n  }\n\n  get drainResource() {\n    return this.config.drainResource;\n  }\n\n  get effects() {\n    var _this$config$addition, _this$config$addition2, _this$config2;\n\n    const base = this.config.baseEffect(this.effectValue);\n    const additional = (_this$config$addition = (_this$config$addition2 = (_this$config2 = this.config).additionalEffects) === null || _this$config$addition2 === void 0 ? void 0 : _this$config$addition2.call(_this$config2).map(x => x.formattedEffect)) !== null && _this$config$addition !== void 0 ? _this$config$addition : [];\n    return [base, ...additional];\n  }\n\n  get isCustomEffect() {\n    return true;\n  }\n\n  get effectValue() {\n    return this.config.effect(this.config.percentageToFill(this.percentage));\n  }\n\n  get maxValue() {\n    return this.config.percentageToFill(1 + this.spentPercentage);\n  }\n\n  get isMaxed() {\n    return this.percentage >= 1;\n  }\n\n  get galaxyGeneratorText() {\n    return this.config.galaxyGeneratorText;\n  }\n\n  toggle() {\n    const active = PelleRifts.all.filter(r => r.isActive).length;\n    if (!this.isActive && active === 2) GameUI.notify.error(`You can only have 2 rifts active at the same time!`);else this.rift.active = !this.rift.active;\n  }\n\n  checkMilestoneStates() {\n    this.milestones.forEach(x => x.checkMilestoneState());\n  }\n\n  fill(diff) {\n    // The UI removes the fill button after 100%, so we need to turn it off here\n    if (this.isActive && this.isMaxed) {\n      this.rift.active = false;\n      return;\n    }\n\n    if (!this.isActive || this.isMaxed) return;\n\n    if (this.fillCurrency.value instanceof Decimal) {\n      // Don't drain resources if you only have 1 of it.\n      // This is in place due to the fix to replicanti below.\n      if (this.fillCurrency.value.lte(1)) return;\n      const afterTickAmount = this.fillCurrency.value.times((1 - Pelle.riftDrainPercent) ** (diff / 1000));\n      const spent = this.fillCurrency.value.minus(afterTickAmount); // We limit this to 1 instead of 0 specifically for the case of replicanti; certain interactions with offline\n      // time can cause it to drain to 0, where it gets stuck unless you reset it with some prestige\n\n      this.fillCurrency.value = this.fillCurrency.value.minus(spent).max(1);\n      this.totalFill = this.totalFill.plus(spent).min(this.maxValue);\n    } else {\n      const afterTickAmount = this.fillCurrency.value * (1 - Pelle.riftDrainPercent) ** (diff / 1000);\n      const spent = this.fillCurrency.value - afterTickAmount;\n      this.fillCurrency.value = Math.max(this.fillCurrency.value - spent, 0);\n      this.totalFill = Math.clampMax(this.totalFill + spent, this.maxValue);\n    }\n\n    if (PelleRifts.vacuum.milestones[0].canBeApplied) Glyphs.refreshActive();\n    this.checkMilestoneStates();\n  }\n\n}\n\nexport const PelleRifts = mapGameDataToObject(GameDatabase.celestials.pelle.rifts, config => new RiftState(config));\n\nPelleRifts.totalMilestones = () => PelleRifts.all.flatMap(x => x.milestones).countWhere(x => x.canBeApplied);","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/celestials/pelle/rifts.js"],"names":["GameMechanicState","RiftMilestoneState","requirement","config","resource","checkMilestoneState","lastChecked","isUnlocked","onStateChange","PelleRifts","chaos","milestones","isEffectActive","percentage","description","d","formattedEffect","canBeApplied","formatEffect","effectValue","RiftState","constructor","_milestones","map","x","fillCurrency","currency","strike","hasStrike","name","reducedTo","rift","value","player","celestials","pelle","rifts","key","totalFill","fill","isActive","active","realPercentage","spentPercentage","percentageSpent","spendable","Math","min","drainResource","effects","base","baseEffect","additional","additionalEffects","isCustomEffect","effect","percentageToFill","maxValue","isMaxed","galaxyGeneratorText","toggle","all","filter","r","length","GameUI","notify","error","checkMilestoneStates","forEach","diff","Decimal","lte","afterTickAmount","times","Pelle","riftDrainPercent","spent","minus","max","plus","clampMax","vacuum","Glyphs","refreshActive","mapGameDataToObject","GameDatabase","totalMilestones","flatMap","countWhere"],"mappings":"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","sourcesContent":["import { GameMechanicState } from \"../../utils\";\r\n\r\nclass RiftMilestoneState extends GameMechanicState {\r\n\r\n  lastChecked = false;\r\n\r\n  get requirement() {\r\n    return this.config.requirement;\r\n  }\r\n\r\n  get resource() {\r\n    return this.config.resource;\r\n  }\r\n\r\n  checkMilestoneState() {\r\n    if (this.lastChecked !== this.isUnlocked) {\r\n      this.config.onStateChange?.();\r\n    }\r\n    this.lastChecked = this.isUnlocked;\r\n  }\r\n\r\n  get isUnlocked() {\r\n    if (this.resource === \"decay\" && PelleRifts.chaos.milestones[0].isEffectActive) return true;\r\n    return this.requirement <= PelleRifts[this.resource].percentage;\r\n  }\r\n\r\n  get isEffectActive() {\r\n    return this.isUnlocked;\r\n  }\r\n\r\n  get description() {\r\n    const d = this.config.description;\r\n    return typeof d === \"function\" ? d() : d;\r\n  }\r\n\r\n  get formattedEffect() {\r\n    if (this.canBeApplied) return this.config.formatEffect(this.effectValue);\r\n    return false;\r\n  }\r\n}\r\n\r\nclass RiftState extends GameMechanicState {\r\n  constructor(config) {\r\n    super(config);\r\n    this._milestones = this.config.milestones.map(x => new RiftMilestoneState(x));\r\n  }\r\n\r\n  get fillCurrency() {\r\n    return this.config.currency();\r\n  }\r\n\r\n  get strike() {\r\n    return this.config.strike();\r\n  }\r\n\r\n  get canBeApplied() {\r\n    return this.strike.hasStrike;\r\n  }\r\n\r\n  get name() {\r\n    return this.config.name;\r\n  }\r\n\r\n  get reducedTo() {\r\n    return this.rift.reducedTo;\r\n  }\r\n\r\n  set reducedTo(value) {\r\n    this.rift.reducedTo = value;\r\n  }\r\n\r\n  get rift() {\r\n    return player.celestials.pelle.rifts[this.config.key];\r\n  }\r\n\r\n  get totalFill() {\r\n    return this.rift.fill;\r\n  }\r\n\r\n  set totalFill(value) {\r\n    this.rift.fill = value;\r\n  }\r\n\r\n  get isActive() {\r\n    return this.rift.active;\r\n  }\r\n\r\n  get realPercentage() {\r\n    return this.config.percentage(this.totalFill);\r\n  }\r\n\r\n  get spentPercentage() {\r\n    return this.rift.percentageSpent || 0;\r\n  }\r\n\r\n  get percentage() {\r\n    if (this.reducedTo > 1) return this.reducedTo;\r\n    if (!this.config.spendable) return Math.min(this.realPercentage, this.reducedTo);\r\n    return Math.min(this.config.percentage(this.totalFill) - this.spentPercentage, this.reducedTo);\r\n  }\r\n\r\n  get milestones() {\r\n    return this._milestones;\r\n  }\r\n\r\n  get description() {\r\n    return this.config.description;\r\n  }\r\n\r\n  get drainResource() {\r\n    return this.config.drainResource;\r\n  }\r\n\r\n  get effects() {\r\n    const base = this.config.baseEffect(this.effectValue);\r\n    const additional = this.config.additionalEffects?.().map(x => x.formattedEffect) ?? [];\r\n    return [base, ...additional];\r\n  }\r\n\r\n  get isCustomEffect() { return true; }\r\n\r\n  get effectValue() {\r\n    return this.config.effect(this.config.percentageToFill(this.percentage));\r\n  }\r\n\r\n  get maxValue() {\r\n    return this.config.percentageToFill(1 + this.spentPercentage);\r\n  }\r\n\r\n  get isMaxed() {\r\n    return this.percentage >= 1;\r\n  }\r\n\r\n  get galaxyGeneratorText() {\r\n    return this.config.galaxyGeneratorText;\r\n  }\r\n\r\n  toggle() {\r\n    const active = PelleRifts.all.filter(r => r.isActive).length;\r\n    if (!this.isActive && active === 2) GameUI.notify.error(`You can only have 2 rifts active at the same time!`);\r\n    else this.rift.active = !this.rift.active;\r\n  }\r\n\r\n  checkMilestoneStates() {\r\n    this.milestones.forEach(x => x.checkMilestoneState());\r\n  }\r\n\r\n  fill(diff) {\r\n    // The UI removes the fill button after 100%, so we need to turn it off here\r\n    if (this.isActive && this.isMaxed) {\r\n      this.rift.active = false;\r\n      return;\r\n    }\r\n    if (!this.isActive || this.isMaxed) return;\r\n\r\n    if (this.fillCurrency.value instanceof Decimal) {\r\n      // Don't drain resources if you only have 1 of it.\r\n      // This is in place due to the fix to replicanti below.\r\n      if (this.fillCurrency.value.lte(1)) return;\r\n      const afterTickAmount = this.fillCurrency.value.times((1 - Pelle.riftDrainPercent) ** (diff / 1000));\r\n      const spent = this.fillCurrency.value.minus(afterTickAmount);\r\n      // We limit this to 1 instead of 0 specifically for the case of replicanti; certain interactions with offline\r\n      // time can cause it to drain to 0, where it gets stuck unless you reset it with some prestige\r\n      this.fillCurrency.value = this.fillCurrency.value.minus(spent).max(1);\r\n      this.totalFill = this.totalFill.plus(spent).min(this.maxValue);\r\n    } else {\r\n      const afterTickAmount = this.fillCurrency.value * (1 - Pelle.riftDrainPercent) ** (diff / 1000);\r\n      const spent = this.fillCurrency.value - afterTickAmount;\r\n      this.fillCurrency.value = Math.max(this.fillCurrency.value - spent, 0);\r\n      this.totalFill = Math.clampMax(this.totalFill + spent, this.maxValue);\r\n    }\r\n    if (PelleRifts.vacuum.milestones[0].canBeApplied) Glyphs.refreshActive();\r\n    this.checkMilestoneStates();\r\n  }\r\n}\r\n\r\nexport const PelleRifts = mapGameDataToObject(\r\n  GameDatabase.celestials.pelle.rifts,\r\n  config => new RiftState(config)\r\n);\r\n\r\nPelleRifts.totalMilestones = () => PelleRifts.all.flatMap(x => x.milestones).countWhere(x => x.canBeApplied);\r\n"]},"metadata":{},"sourceType":"module"}