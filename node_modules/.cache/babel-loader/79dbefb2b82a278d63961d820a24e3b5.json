{"ast":null,"code":"export default {\n  name: \"GlyphCustomizationSlidingWindow\",\n  props: {\n    type: {\n      type: String,\n      required: true\n    },\n    isSymbol: {\n      type: Boolean,\n      required: true\n    },\n    options: {\n      type: Array,\n      required: true\n    },\n    glyphId: {\n      type: Number,\n      required: false,\n      default: -1\n    }\n  },\n\n  data() {\n    return {\n      isActive: false,\n      selected: \"\",\n      leftmostIndex: 0,\n      realityColor: \"\",\n      // Required in order to refresh all the options if the option to force dark backgrounds is clicked\n      darkKeySwap: false\n    };\n  },\n\n  computed: {\n    isSingleGlyph() {\n      return this.glyphId !== -1;\n    },\n\n    attrString() {\n      return this.isSymbol ? \"symbol\" : \"color\";\n    },\n\n    typeObject() {\n      return CosmeticGlyphTypes;\n    },\n\n    defaultOption() {\n      if (this.realityColor) return this.realityColor;\n      const config = this.typeObject[this.type];\n      const prop = `${this.isSingleGlyph ? \"current\" : \"default\"}${this.attrString.capitalize()}`;\n      return this.isSymbol ? config[prop].symbol : config[prop].border;\n    },\n\n    canScroll() {\n      return this.options.length > this.windowSize;\n    },\n\n    // Maximum number of options visible at one time, used to determine scrolling bounds\n    windowSize() {\n      return 17;\n    }\n\n  },\n\n  created() {\n    this.updateSelected();\n  },\n\n  methods: {\n    update() {\n      if (this.isSingleGlyph) {\n        const glyph = Glyphs.findById(this.glyphId);\n        this.isActive = !glyph.cosmetic;\n      } else {\n        this.isActive = player.reality.glyphs.cosmetics.active;\n      }\n\n      if (this.type === \"reality\" && !this.isSymbol) this.realityColor = GlyphAppearanceHandler.realityColor;\n      this.darkKeySwap = player.options.glyphBG;\n    },\n\n    select(option) {\n      if (!this.isSingleGlyph && !this.isActive) return;\n\n      if (this.isSingleGlyph) {\n        const glyph = Glyphs.findById(this.glyphId);\n        glyph[this.attrString] = option;\n        if (!this.active) glyph.cosmetic = undefined;\n      } else {\n        player.reality.glyphs.cosmetics[`${this.attrString}Map`][this.type] = option;\n      }\n\n      this.updateSelected();\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\n    },\n\n    updateSelected() {\n      if (this.isSingleGlyph) {\n        const glyph = Glyphs.findById(this.glyphId);\n        this.selected = glyph[this.attrString];\n      } else {\n        this.selected = this.isSymbol ? this.typeObject[this.type].currentSymbol.symbol : this.typeObject[this.type].currentColor.str;\n      }\n    },\n\n    containerClassObject() {\n      return {\n        \"c-all-options\": true,\n        \"o-option--inactive\": !this.isActive\n      };\n    },\n\n    defaultOptionClassObject() {\n      const checkOption = this.isSingleGlyph ? undefined : this.defaultOption;\n      return {\n        \"o-symbol\": this.isSymbol,\n        \"o-color\": !this.isSymbol,\n        \"o-clickable\": this.isActive,\n        \"o-option--inactive\": this.isSymbol && checkOption !== this.selected\n      };\n    },\n\n    optionClassObject(option) {\n      return {\n        \"o-symbol\": this.isSymbol,\n        \"o-color\": !this.isSymbol,\n        \"o-clickable\": this.isActive,\n        \"o-option--inactive\": this.isSymbol && option !== this.selected\n      };\n    },\n\n    boxStyle(color) {\n      if (this.isSymbol || !color) return {};\n      const colorProps = GlyphAppearanceHandler.getColorProps(color);\n      return {\n        background: colorProps.bg,\n        color: this.invertBW(colorProps.bg),\n        \"box-shadow\": `0 0 0.4rem 0.1rem ${colorProps.border}`\n      };\n    },\n\n    windowStyle() {\n      return {\n        transform: `translate(${2 - 2.5 * this.leftmostIndex}rem)`,\n        \"transition-duration\": \"0.3s\"\n      };\n    },\n\n    leftClass() {\n      return {\n        \"o-arrow o-arrow--left\": true,\n        \"o-arrow--disabled\": this.leftmostIndex === 0 || !this.canScroll\n      };\n    },\n\n    rightClass() {\n      return {\n        \"o-arrow o-arrow--right\": true,\n        \"o-arrow--disabled\": this.leftmostIndex === this.options.length - this.windowSize || !this.canScroll\n      };\n    },\n\n    slideWindow(dir) {\n      if (!this.canScroll) return;\n      this.leftmostIndex = Math.clamp(this.leftmostIndex + dir, 0, this.options.length - this.windowSize);\n    },\n\n    optionChar(option) {\n      if (this.isSymbol) return option;\n      return option === this.selected || !this.selected && option === this.defaultOption ? \"✓\" : \"\";\n    },\n\n    invertBW(color) {\n      return color === \"black\" ? \"white\" : \"black\";\n    }\n\n  }\n};","map":{"version":3,"sources":["GlyphCustomizationSlidingWindow.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nexport default {\r\n  name: \"GlyphCustomizationSlidingWindow\",\r\n  props: {\r\n    type: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    isSymbol: {\r\n      type: Boolean,\r\n      required: true,\r\n    },\r\n    options: {\r\n      type: Array,\r\n      required: true,\r\n    },\r\n    glyphId: {\r\n      type: Number,\r\n      required: false,\r\n      default: -1,\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isActive: false,\r\n      selected: \"\",\r\n      leftmostIndex: 0,\r\n      realityColor: \"\",\r\n      // Required in order to refresh all the options if the option to force dark backgrounds is clicked\r\n      darkKeySwap: false,\r\n    };\r\n  },\r\n  computed: {\r\n    isSingleGlyph() {\r\n      return this.glyphId !== -1;\r\n    },\r\n    attrString() {\r\n      return this.isSymbol ? \"symbol\" : \"color\";\r\n    },\r\n    typeObject() {\r\n      return CosmeticGlyphTypes;\r\n    },\r\n    defaultOption() {\r\n      if (this.realityColor) return this.realityColor;\r\n      const config = this.typeObject[this.type];\r\n      const prop = `${this.isSingleGlyph ? \"current\" : \"default\"}${this.attrString.capitalize()}`;\r\n      return this.isSymbol\r\n        ? config[prop].symbol\r\n        : config[prop].border;\r\n    },\r\n    canScroll() {\r\n      return this.options.length > this.windowSize;\r\n    },\r\n    // Maximum number of options visible at one time, used to determine scrolling bounds\r\n    windowSize() {\r\n      return 17;\r\n    }\r\n  },\r\n  created() {\r\n    this.updateSelected();\r\n  },\r\n  methods: {\r\n    update() {\r\n      if (this.isSingleGlyph) {\r\n        const glyph = Glyphs.findById(this.glyphId);\r\n        this.isActive = !glyph.cosmetic;\r\n      } else {\r\n        this.isActive = player.reality.glyphs.cosmetics.active;\r\n      }\r\n      if (this.type === \"reality\" && !this.isSymbol) this.realityColor = GlyphAppearanceHandler.realityColor;\r\n      this.darkKeySwap = player.options.glyphBG;\r\n    },\r\n    select(option) {\r\n      if (!this.isSingleGlyph && !this.isActive) return;\r\n      if (this.isSingleGlyph) {\r\n        const glyph = Glyphs.findById(this.glyphId);\r\n        glyph[this.attrString] = option;\r\n        if (!this.active) glyph.cosmetic = undefined;\r\n      } else {\r\n        player.reality.glyphs.cosmetics[`${this.attrString}Map`][this.type] = option;\r\n      }\r\n      this.updateSelected();\r\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\r\n    },\r\n    updateSelected() {\r\n      if (this.isSingleGlyph) {\r\n        const glyph = Glyphs.findById(this.glyphId);\r\n        this.selected = glyph[this.attrString];\r\n      } else {\r\n        this.selected = this.isSymbol\r\n          ? this.typeObject[this.type].currentSymbol.symbol\r\n          : this.typeObject[this.type].currentColor.str;\r\n      }\r\n    },\r\n    containerClassObject() {\r\n      return {\r\n        \"c-all-options\": true,\r\n        \"o-option--inactive\": !this.isActive\r\n      };\r\n    },\r\n    defaultOptionClassObject() {\r\n      const checkOption = this.isSingleGlyph ? undefined : this.defaultOption;\r\n      return {\r\n        \"o-symbol\": this.isSymbol,\r\n        \"o-color\": !this.isSymbol,\r\n        \"o-clickable\": this.isActive,\r\n        \"o-option--inactive\": this.isSymbol && checkOption !== this.selected,\r\n      };\r\n    },\r\n    optionClassObject(option) {\r\n      return {\r\n        \"o-symbol\": this.isSymbol,\r\n        \"o-color\": !this.isSymbol,\r\n        \"o-clickable\": this.isActive,\r\n        \"o-option--inactive\": this.isSymbol && option !== this.selected,\r\n      };\r\n    },\r\n    boxStyle(color) {\r\n      if (this.isSymbol || !color) return {};\r\n      const colorProps = GlyphAppearanceHandler.getColorProps(color);\r\n      return {\r\n        background: colorProps.bg,\r\n        color: this.invertBW(colorProps.bg),\r\n        \"box-shadow\": `0 0 0.4rem 0.1rem ${colorProps.border}`,\r\n      };\r\n    },\r\n    windowStyle() {\r\n      return {\r\n        transform: `translate(${2 - 2.5 * this.leftmostIndex}rem)`,\r\n        \"transition-duration\": \"0.3s\",\r\n      };\r\n    },\r\n    leftClass() {\r\n      return {\r\n        \"o-arrow o-arrow--left\": true,\r\n        \"o-arrow--disabled\": this.leftmostIndex === 0 || !this.canScroll,\r\n      };\r\n    },\r\n    rightClass() {\r\n      return {\r\n        \"o-arrow o-arrow--right\": true,\r\n        \"o-arrow--disabled\": this.leftmostIndex === this.options.length - this.windowSize || !this.canScroll,\r\n      };\r\n    },\r\n    slideWindow(dir) {\r\n      if (!this.canScroll) return;\r\n      this.leftmostIndex = Math.clamp(this.leftmostIndex + dir, 0, this.options.length - this.windowSize);\r\n    },\r\n    optionChar(option) {\r\n      if (this.isSymbol) return option;\r\n      return (option === this.selected || (!this.selected && option === this.defaultOption)) ? \"✓\" : \"\";\r\n    },\r\n    invertBW(color) {\r\n      return color === \"black\" ? \"white\" : \"black\";\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <div\r\n      v-if=\"options.length > 0\"\r\n      :class=\"containerClassObject()\"\r\n    >\r\n      <div class=\"o-default-option\">\r\n        <div\r\n          :key=\"'default' + darkKeySwap\"\r\n          :class=\"defaultOptionClassObject()\"\r\n          :style=\"boxStyle(defaultOption)\"\r\n          @click=\"select(undefined)\"\r\n        >\r\n          {{ optionChar(defaultOption) }}\r\n        </div>\r\n      </div>\r\n      <div class=\"c-extra-options\">\r\n        <div\r\n          :class=\"leftClass()\"\r\n          @click=\"slideWindow(-5)\"\r\n        >\r\n          ⇐\r\n        </div>\r\n        <div\r\n          :class=\"rightClass()\"\r\n          @click=\"slideWindow(5)\"\r\n        >\r\n          ⇒\r\n        </div>\r\n        <div\r\n          class=\"c-sliding-window\"\r\n          :style=\"windowStyle()\"\r\n        >\r\n          <div\r\n            v-for=\"set in options\"\r\n            :key=\"set[0] + set[1]\"\r\n          >\r\n            <div class=\"c-single-set\">\r\n              <div\r\n                v-for=\"singleOption in set\"\r\n                :key=\"singleOption\"\r\n                :class=\"optionClassObject(singleOption)\"\r\n                :style=\"boxStyle(singleOption)\"\r\n                @click=\"select(singleOption)\"\r\n              >\r\n                {{ optionChar(singleOption) }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div\r\n      v-else\r\n      class=\"c-no-options\"\r\n    >\r\n      You have no custom options for changing Glyph {{ attrString }}s.\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-all-options {\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 49rem;\r\n  margin: 0.5rem;\r\n  border: 0.1rem solid var(--color-text);\r\n  border-radius: var(--var-border-radius, 0.5rem);\r\n}\r\n\r\n.c-no-options {\r\n  width: 49rem;\r\n  margin: 0.5rem;\r\n  border: 0.1rem solid var(--color-text);\r\n  border-radius: var(--var-border-radius, 0.5rem);\r\n}\r\n\r\n.c-extra-options {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  border-width: 0.1rem;\r\n  border-left-style: dashed;\r\n  border-color: var(--color-text);\r\n}\r\n\r\n.c-sliding-window {\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.o-option--inactive {\r\n  opacity: 0.3;\r\n}\r\n\r\n.o-arrow {\r\n  position: absolute;\r\n  display: flex;\r\n  align-items: center;\r\n  height: 100%;\r\n  padding: 0.3rem;\r\n  z-index: 1;\r\n  background: var(--color-good);\r\n  color: var(--color-text);\r\n  transition-duration: 0.3s;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n.o-arrow--left {\r\n  left: 0;\r\n}\r\n\r\n.o-arrow--right {\r\n  right: 0;\r\n  border-radius: 0 var(--var-border-radius, 0.5rem) var(--var-border-radius, 0.5rem) 0;\r\n}\r\n\r\n.o-arrow--disabled {\r\n  opacity: 0.3;\r\n  cursor: default;\r\n}\r\n\r\n.o-default-option {\r\n  align-self: normal;\r\n  font-size: 1.5rem;\r\n  color: var(--color-text);\r\n}\r\n\r\n.o-clickable {\r\n  cursor: pointer;\r\n}\r\n\r\n.c-single-set {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.o-symbol {\r\n  width: 2.5rem;\r\n  text-align: center;\r\n  font-size: 1.6rem;\r\n  user-select: none;\r\n}\r\n\r\n.o-color {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 1.5rem;\r\n  height: 1.5rem;\r\n  margin: 0.5rem;\r\n  font-weight: bold;\r\n  user-select: none;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/modals/options/glyph-appearance"},"metadata":{},"sourceType":"module"}