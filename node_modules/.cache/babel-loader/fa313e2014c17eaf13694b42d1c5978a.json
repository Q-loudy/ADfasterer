{"ast":null,"code":"import \"core-js/modules/es.json.stringify.js\";\nexport default {\n  name: \"ImportFilterSingleType\",\n  props: {\n    type: {\n      type: String,\n      required: true\n    },\n    currSettings: {\n      type: Object,\n      required: true\n    },\n    newSettings: {\n      type: Object,\n      required: true\n    }\n  },\n  computed: {\n    settingsChanged() {\n      return JSON.stringify(this.currSettings) !== JSON.stringify(this.newSettings);\n    },\n\n    symbol() {\n      return GLYPH_SYMBOLS[this.type];\n    },\n\n    capitalized() {\n      return `${this.type.charAt(0).toUpperCase()}${this.type.substring(1)}`;\n    },\n\n    rarityStr() {\n      return this.changedValue(this.currSettings.rarity, this.newSettings.rarity, x => formatPercents(x / 100));\n    },\n\n    effectStr() {\n      return this.changedValue(this.currSettings.effectCount, this.newSettings.effectCount, formatInt);\n    },\n\n    scoreStr() {\n      return this.changedValue(this.currSettings.score, this.newSettings.score, formatInt);\n    },\n\n    effectData() {\n      const changes = [];\n\n      for (let index = 0; index < this.currSettings.effectScores.length; index++) {\n        const bitmaskIndex = AutoGlyphProcessor.bitmaskIndexOffset(this.type) + index;\n        changes.push({\n          bitmaskIndex,\n          oldReq: (this.currSettings.specifiedMask & 1 << bitmaskIndex) !== 0,\n          newReq: (this.newSettings.specifiedMask & 1 << bitmaskIndex) !== 0,\n          oldScore: this.currSettings.effectScores[index],\n          newScore: this.newSettings.effectScores[index]\n        });\n      }\n\n      return changes;\n    }\n\n  },\n  methods: {\n    changedValue(oldVal, newVal, applyFn) {\n      if (oldVal === newVal) return applyFn(oldVal);\n      return `${applyFn(oldVal)}➜${applyFn(newVal)}`;\n    },\n\n    effectScoreStr(effectEntry) {\n      const fullStr = (isSelected, value) => {\n        const check = isSelected ? \"✔\" : \"✘\";\n        return `${check}${formatInt(value)}`;\n      };\n\n      const oldStr = fullStr(effectEntry.oldReq, effectEntry.oldScore);\n      const newStr = fullStr(effectEntry.newReq, effectEntry.newScore);\n      if (effectEntry.oldScore === effectEntry.newScore) return oldStr;\n      return `${oldStr}➜${newStr}`;\n    },\n\n    topLevelClassObject(key) {\n      return {\n        \"o-cell\": true,\n        \"o-cell--changed\": this.currSettings[key] !== this.newSettings[key]\n      };\n    },\n\n    effectClassObject(effectEntry) {\n      return {\n        \"o-cell\": true,\n        \"o-cell--changed\": effectEntry.oldReq !== effectEntry.newReq || effectEntry.oldScore !== effectEntry.newScore\n      };\n    },\n\n    getEffectDesc(effectEntry) {\n      return GlyphEffects.all.find(e => e.bitmaskIndex === effectEntry.bitmaskIndex && e.isGenerated).genericDesc;\n    }\n\n  }\n};","map":{"version":3,"sources":["ImportFilterSingleType.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nexport default {\r\n  name: \"ImportFilterSingleType\",\r\n  props: {\r\n    type: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    currSettings: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n    newSettings: {\r\n      type: Object,\r\n      required: true,\r\n    }\r\n  },\r\n  computed: {\r\n    settingsChanged() {\r\n      return JSON.stringify(this.currSettings) !== JSON.stringify(this.newSettings);\r\n    },\r\n    symbol() {\r\n      return GLYPH_SYMBOLS[this.type];\r\n    },\r\n    capitalized() {\r\n      return `${this.type.charAt(0).toUpperCase()}${this.type.substring(1)}`;\r\n    },\r\n    rarityStr() {\r\n      return this.changedValue(this.currSettings.rarity, this.newSettings.rarity, x => formatPercents(x / 100));\r\n    },\r\n    effectStr() {\r\n      return this.changedValue(this.currSettings.effectCount, this.newSettings.effectCount, formatInt);\r\n    },\r\n    scoreStr() {\r\n      return this.changedValue(this.currSettings.score, this.newSettings.score, formatInt);\r\n    },\r\n    effectData() {\r\n      const changes = [];\r\n      for (let index = 0; index < this.currSettings.effectScores.length; index++) {\r\n        const bitmaskIndex = AutoGlyphProcessor.bitmaskIndexOffset(this.type) + index;\r\n        changes.push({\r\n          bitmaskIndex,\r\n          oldReq: (this.currSettings.specifiedMask & (1 << bitmaskIndex)) !== 0,\r\n          newReq: (this.newSettings.specifiedMask & (1 << bitmaskIndex)) !== 0,\r\n          oldScore: this.currSettings.effectScores[index],\r\n          newScore: this.newSettings.effectScores[index],\r\n        });\r\n      }\r\n      return changes;\r\n    }\r\n  },\r\n  methods: {\r\n    changedValue(oldVal, newVal, applyFn) {\r\n      if (oldVal === newVal) return applyFn(oldVal);\r\n      return `${applyFn(oldVal)}➜${applyFn(newVal)}`;\r\n    },\r\n    effectScoreStr(effectEntry) {\r\n      const fullStr = (isSelected, value) => {\r\n        const check = isSelected ? \"✔\" : \"✘\";\r\n        return `${check}${formatInt(value)}`;\r\n      };\r\n      const oldStr = fullStr(effectEntry.oldReq, effectEntry.oldScore);\r\n      const newStr = fullStr(effectEntry.newReq, effectEntry.newScore);\r\n\r\n      if (effectEntry.oldScore === effectEntry.newScore) return oldStr;\r\n      return `${oldStr}➜${newStr}`;\r\n    },\r\n    topLevelClassObject(key) {\r\n      return {\r\n        \"o-cell\": true,\r\n        \"o-cell--changed\": this.currSettings[key] !== this.newSettings[key],\r\n      };\r\n    },\r\n    effectClassObject(effectEntry) {\r\n      return {\r\n        \"o-cell\": true,\r\n        \"o-cell--changed\": effectEntry.oldReq !== effectEntry.newReq || effectEntry.oldScore !== effectEntry.newScore,\r\n      };\r\n    },\r\n    getEffectDesc(effectEntry) {\r\n      return GlyphEffects.all.find(e => e.bitmaskIndex === effectEntry.bitmaskIndex && e.isGenerated).genericDesc;\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    {{ symbol }}:\r\n    <span v-if=\"settingsChanged\">\r\n      <span class=\"c-single-row\">\r\n        <span\r\n          class=\"c-rarity\"\r\n          :class=\"topLevelClassObject('rarity')\"\r\n          ach-tooltip=\"Setting for Rarity Threshold and Specified Effect\"\r\n        >\r\n          {{ rarityStr }}\r\n        </span>\r\n        <span\r\n          class=\"c-effects-count\"\r\n          :class=\"topLevelClassObject('effectCount')\"\r\n          ach-tooltip=\"Number of effects in Specified Effect\"\r\n        >\r\n          Minimum Effects: {{ effectStr }}\r\n        </span>\r\n        <span\r\n          class=\"c-target-score\"\r\n          :class=\"topLevelClassObject('score')\"\r\n          ach-tooltip=\"Threshold for Effect Score\"\r\n        >\r\n          Score: {{ scoreStr }}\r\n        </span>\r\n      </span>\r\n      <br>\r\n      <span class=\"c-single-row\">\r\n        <span\r\n          v-for=\"effect in effectData.slice(0, 4)\"\r\n          :key=\"effect.bitmaskIndex\"\r\n          class=\"c-single-score\"\r\n          :class=\"effectClassObject(effect)\"\r\n          :ach-tooltip=\"getEffectDesc(effect)\"\r\n        >\r\n          {{ effectScoreStr(effect) }}\r\n        </span>\r\n      </span>\r\n      <span\r\n        v-if=\"effectData.length > 4\"\r\n        class=\"c-single-row c-second-row\"\r\n      >\r\n        <br>\r\n        <span\r\n          v-for=\"effect in effectData.slice(4)\"\r\n          :key=\"effect.bitmaskIndex\"\r\n          class=\"c-single-score o-cell\"\r\n          :class=\"effectClassObject(effect)\"\r\n          :ach-tooltip=\"getEffectDesc(effect)\"\r\n        >\r\n          {{ effectScoreStr(effect) }}\r\n        </span>\r\n      </span>\r\n    </span>\r\n    <span v-else>\r\n      (No changes)\r\n    </span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-single-row {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: -2.15rem 0 0 3rem;\r\n}\r\n\r\n.c-second-row {\r\n  margin: 0 0 0 -9rem;\r\n}\r\n\r\n.o-cell {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border: var(--var-border-width, 0.2rem) solid;\r\n  padding: 0.1rem;\r\n}\r\n\r\n.o-cell--changed {\r\n  background-color: var(--color-accent);\r\n}\r\n\r\n.c-rarity {\r\n  width: 10rem;\r\n}\r\n\r\n.c-effects-count {\r\n  width: 20rem;\r\n}\r\n\r\n.c-target-score {\r\n  width: 18rem;\r\n}\r\n\r\n.c-single-score {\r\n  width: 12rem;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/modals"},"metadata":{},"sourceType":"module"}