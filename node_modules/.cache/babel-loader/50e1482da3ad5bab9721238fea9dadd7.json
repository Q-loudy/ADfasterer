{"ast":null,"code":"import { DC } from \"../../../constants\";\n\nconst thisInfinityMult = thisInfinity => {\n  // All \"this inf time\" or \"best inf time\" mults are * 10\n  const scaledInfinity = thisInfinity * 10 + 1;\n  const cappedInfinity = Math.min(Math.pow(scaledInfinity, 0.125), 500);\n  return DC.D15.pow(Math.log(scaledInfinity) * cappedInfinity);\n};\n\nconst passiveIPMult = () => {\n  const isEffarigLimited = Effarig.isRunning && Effarig.currentStage === EFFARIG_STAGES.ETERNITY;\n  const normalValue = Perk.studyPassive.isBought ? 1e50 : 1e25;\n  return isEffarigLimited ? Math.min(normalValue, Effarig.eternityCap.toNumber()) : normalValue;\n};\n/**\r\n * List of time study specifications and attributes\r\n * {\r\n *  @property {Number} id                   Numerical ID shown for each time study in code and in-game\r\n *  @property {Number} cost                 Amount of available time theorems required to purchase\r\n *  @property {Number} STcost               Amount of available space theorems required to purchase if needed\r\n *  @property {Object[]} requirement   Array of Numbers or functions which are checked to determine purchasability\r\n *  @property {Number} reqType              Number specified by enum in TS_REQUIREMENT_TYPE for requirement behavior\r\n *  @property {Number[]} requiresST    Array of Numbers indicating which other studies will cause this particular\r\n *    study to also cost space theorems - in all cases this applies if ANY in the array are bought\r\n *  @property {function: @return String} description  Text to be shown in-game for the time study's effects\r\n *  @property {function: @return Number} effect       Numerical value for the effects of a study\r\n *  @property {String[]} cap     Hard-coded cap for studies which don't scale forever\r\n *  @property {String} formatEffect   Formatting function for effects, if the default formatting isn't appropriate\r\n * }\r\n */\n\n\nexport const normalTimeStudies = [{\n  id: 11,\n  cost: 1,\n  // All requirements of an empty array will always evaluate to true, so this study is always purchasable\n  requirement: [],\n  reqType: TS_REQUIREMENT_TYPE.ALL,\n  description: \"Tickspeed affects 1st Time Dimension with reduced effect\",\n  effect: () => {\n    const tickspeed = Tickspeed.current.dividedBy(1000);\n    const firstPart = tickspeed.pow(0.005).times(0.95);\n    const secondPart = tickspeed.pow(0.0003).times(0.05);\n    return firstPart.plus(secondPart).reciprocate();\n  },\n  cap: DC.E2500,\n  formatEffect: value => formatX(value, 2, 1)\n}, {\n  id: 21,\n  cost: 3,\n  requirement: [11],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: () => `Improve Replicanti multiplier formula to\n      (log2(x)${formatPow(2)})+x${formatPow(0.032, 3, 3)}`,\n  effect: () => Replicanti.amount.pow(0.032),\n  // This is a special case because the study itself is *added* to the existing formula, but it makes more sense\n  // to display a multiplicative increase just like every other study. We need to do the calculation in here in order\n  // to properly show only the effect of this study and nothing else\n  formatEffect: value => {\n    const oldVal = Decimal.pow(Decimal.log2(Replicanti.amount.clampMin(1)), 2);\n    const newVal = oldVal.plus(value);\n    return formatX(newVal.div(oldVal).clampMin(1), 2, 2);\n  }\n}, {\n  id: 22,\n  cost: 2,\n  requirement: [11],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: () => `Base Replicanti interval limit ${formatInt(50)}ms ➜ ${formatInt(1)}ms`,\n  effect: 1\n}, {\n  id: 31,\n  cost: 3,\n  requirement: [21],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: () => `Powers up multipliers that are based on your Infinities (Bonuses${formatPow(4)})`,\n  effect: 4\n}, {\n  id: 32,\n  cost: 2,\n  requirement: [22],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: `You gain more Infinities based on Dimension Boosts`,\n  effect: () => Math.max(DimBoost.totalBoosts, 1),\n  formatEffect: value => formatX(value, 2)\n}, {\n  id: 33,\n  cost: 2,\n  requirement: [22],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: \"You keep half of your Replicanti Galaxies on Infinity\"\n}, {\n  id: 41,\n  cost: 4,\n  requirement: [31],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: () => `All Galaxies give a ${formatX(DC.D1_2, 1, 1)} multiplier to Infinity Points gained`,\n  effect: () => DC.D1_2.pow(Replicanti.galaxies.total + player.galaxies + player.dilation.totalTachyonGalaxies),\n  formatEffect: value => formatX(value, 2, 1)\n}, {\n  id: 42,\n  cost: 6,\n  requirement: [32],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: () => `Antimatter Galaxy requirement increases by ${formatInt(52)}\n      8th Dimensions instead of ${formatInt(60)}`,\n  effect: 52\n}, {\n  id: 51,\n  cost: 3,\n  requirement: [41, 42],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: () => `You gain ${formatX(1e15)} more Infinity Points`,\n  effect: 1e15\n}, {\n  id: 61,\n  cost: 3,\n  requirement: [51],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: () => `You gain ${formatX(15)} more Eternity Points`,\n  effect: 15\n}, {\n  id: 62,\n  cost: 3,\n  requirement: [42, () => Perk.bypassEC5Lock.isBought || EternityChallenge(5).completions > 0],\n  reqType: TS_REQUIREMENT_TYPE.ALL,\n  description: () => `You gain Replicanti ${formatInt(3)} times faster`,\n  effect: 3\n}, {\n  id: 71,\n  cost: 4,\n  requirement: [61, () => Perk.studyECRequirement.isBought || !EternityChallenge(12).isUnlocked],\n  reqType: TS_REQUIREMENT_TYPE.DIMENSION_PATH,\n  description: \"Dimensional Sacrifice affects all other Antimatter Dimensions with reduced effect\",\n  effect: () => Sacrifice.totalBoost.pow(0.25).clampMin(1),\n  cap: DC.E210000,\n  formatEffect: value => formatX(value, 2, 1)\n}, {\n  id: 72,\n  cost: 6,\n  requirement: [61, () => Perk.studyECRequirement.isBought || !EternityChallenge(11).isUnlocked && !EternityChallenge(12).isUnlocked],\n  reqType: TS_REQUIREMENT_TYPE.DIMENSION_PATH,\n  description: \"Dimensional Sacrifice affects 4th Infinity Dimension with greatly reduced effect\",\n  effect: () => Sacrifice.totalBoost.pow(0.04).clampMin(1),\n  cap: DC.E30000,\n  formatEffect: value => formatX(value, 2, 1)\n}, {\n  id: 73,\n  cost: 5,\n  requirement: [61, () => Perk.studyECRequirement.isBought || !EternityChallenge(11).isUnlocked],\n  reqType: TS_REQUIREMENT_TYPE.DIMENSION_PATH,\n  description: \"Dimensional Sacrifice affects 3rd Time Dimension with greatly reduced effect\",\n  effect: () => Sacrifice.totalBoost.pow(0.005).clampMin(1),\n  cap: DC.E1300,\n  formatEffect: value => formatX(value, 2, 1)\n}, {\n  id: 81,\n  cost: 4,\n  requirement: [71],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: () => `Base Dimension Boost power becomes ${formatX(10)}`,\n  effect: 10\n}, {\n  id: 82,\n  cost: 6,\n  requirement: [72],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: \"Dimension Boosts affect Infinity Dimensions\",\n  effect: () => DC.D1_0000109.pow(Math.pow(DimBoost.totalBoosts, 2)),\n  cap: DC.E1E7,\n  formatEffect: value => formatX(value, 2, 1)\n}, {\n  id: 83,\n  cost: 5,\n  requirement: [73],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: \"Dimension Boost multiplier based on tick upgrades gained from TDs\",\n  effect: () => DC.D1_0004.pow(player.totalTickGained),\n  cap: DC.E30,\n  formatEffect: value => formatX(value, 2, 1)\n}, {\n  id: 91,\n  cost: 4,\n  requirement: [81],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: \"Antimatter Dimension multiplier based on time spent in this Eternity\",\n  effect: () => Decimal.pow10(Math.min(Time.thisEternity.totalMinutes, 20) * 15),\n  cap: DC.E300,\n  formatEffect: value => formatX(value, 2, 1)\n}, {\n  id: 92,\n  cost: 5,\n  requirement: [82],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: \"Infinity Dimension multiplier based on fastest Eternity time\",\n  effect: () => DC.D2.pow(60 / Math.max(Time.bestEternity.totalSeconds, 2)),\n  cap: DC.C2P30,\n  formatEffect: value => formatX(value, 2, 1)\n}, {\n  id: 93,\n  cost: 7,\n  requirement: [83],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: \"Time Dimension multiplier based on tick upgrades gained\",\n  effect: () => Decimal.pow(player.totalTickGained, 0.25).clampMin(1),\n  formatEffect: value => formatX(value, 2, 1)\n}, {\n  id: 101,\n  cost: 4,\n  requirement: [91],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: \"Antimatter Dimension multiplier equal to Replicanti amount\",\n  effect: () => Decimal.max(Replicanti.amount, 1),\n  formatEffect: value => formatX(value, 2, 1)\n}, {\n  id: 102,\n  cost: 6,\n  requirement: [92],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: \"Replicanti Galaxies boost Replicanti multiplier\",\n  effect: () => DC.D5.pow(player.replicanti.galaxies),\n  formatEffect: value => formatX(value, 2, 1)\n}, {\n  id: 103,\n  cost: 6,\n  requirement: [93],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: \"Time Dimension multiplier equal to Replicanti Galaxy amount\",\n  effect: () => Math.max(player.replicanti.galaxies, 1),\n  formatEffect: value => formatX(value, 2, 0)\n}, {\n  id: 111,\n  cost: 12,\n  requirement: [101, 102, 103],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: () => Achievement(103).canBeApplied ? `Make the Infinity Point formula better log(x)/${formatFloat(307.8, 1)} ➜ log(x)/${formatInt(285)}` : `Make the Infinity Point formula better log(x)/${formatInt(308)} ➜ log(x)/${formatInt(285)}`,\n  effect: 285\n}, {\n  id: 121,\n  cost: 9,\n  STCost: 2,\n  requirement: [111],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [122, 123],\n  description: () => Perk.studyActiveEP.isBought ? `You gain ${formatX(50)} more Eternity Points` : `You gain more EP based on how fast your last ten Eternities\n      were${PlayerProgress.realityUnlocked() ? \" (real real time)\" : \"\"}`,\n  effect: () => Perk.studyActiveEP.isBought ? 50 : Math.clamp(250 / Player.averageRealTimePerEternity, 1, 50),\n  formatEffect: value => Perk.studyActiveEP.isBought ? undefined : formatX(value, 1, 1),\n  cap: 50\n}, {\n  id: 122,\n  cost: 9,\n  STCost: 2,\n  requirement: [111],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [121, 123],\n  description: () => Perk.studyPassive.isBought ? `You gain ${formatX(50)} more Eternity Points` : `You gain ${formatX(35)} more Eternity Points`,\n  effect: () => Perk.studyPassive.isBought ? 50 : 35\n}, {\n  id: 123,\n  cost: 9,\n  STCost: 2,\n  requirement: [111],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [121, 122],\n  description: \"You gain more Eternity Points based on time spent this Eternity\",\n  effect: () => {\n    const perkEffect = TimeSpan.fromMinutes(Perk.studyIdleEP.effectOrDefault(0));\n    const totalSeconds = Time.thisEternity.plus(perkEffect).totalSeconds;\n    return Math.sqrt(1.39 * totalSeconds);\n  },\n  formatEffect: value => formatX(value, 1, 1)\n}, {\n  id: 131,\n  cost: 5,\n  STCost: 8,\n  requirement: [121],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [132, 133],\n  description: () => Achievement(138).isUnlocked ? `You can get ${formatPercents(0.5)} more Replicanti Galaxies` : `Automatic Replicanti Galaxies are disabled, but you can get ${formatPercents(0.5)} more`,\n  effect: () => Math.floor(player.replicanti.boughtGalaxyCap / 2)\n}, {\n  id: 132,\n  cost: 5,\n  STCost: 8,\n  requirement: [122],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [131, 133],\n  description: () => Pelle.isDoomed ? `Replicanti Galaxies are ${formatPercents(0.4)} stronger` : `Replicanti Galaxies are ${formatPercents(0.4)} stronger and Replicanti are \n        ${Perk.studyPassive.isBought ? formatX(3) : formatX(1.5, 1, 1)} faster`,\n  effect: 0.4\n}, {\n  id: 133,\n  cost: 5,\n  STCost: 8,\n  requirement: [123],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [131, 132],\n  description: () => Achievement(138).isUnlocked ? `Replicanti Galaxies are ${formatPercents(0.5)} stronger` : `Replicanti are ${formatX(10)} slower until ${format(Number.MAX_VALUE, 2)}` + `, but Replicanti Galaxies are ${formatPercents(0.5)} stronger`,\n  effect: 0.5\n}, {\n  id: 141,\n  cost: 4,\n  STCost: 2,\n  requirement: [131],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [142, 143],\n  description: () => Perk.studyActiveEP.isBought ? `You gain ${formatX(DC.E45)} more Infinity Points` : \"Multiplier to Infinity Points, which decays over this Infinity\",\n  effect: () => Perk.studyActiveEP.isBought ? DC.E45 : DC.E45.divide(thisInfinityMult(Time.thisInfinity.totalSeconds / getGlobalSpeedFactor())).clampMin(1),\n  formatEffect: value => Perk.studyActiveEP.isBought ? undefined : formatX(value, 2, 1)\n}, {\n  id: 142,\n  cost: 4,\n  STCost: 2,\n  requirement: [132],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [141, 143],\n  description: () => `You gain ${formatX(passiveIPMult())} more Infinity Points`,\n  effect: passiveIPMult,\n  cap: () => Effarig.eternityCap === undefined ? undefined : Effarig.eternityCap.toNumber()\n}, {\n  id: 143,\n  cost: 4,\n  STCost: 2,\n  requirement: [133],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [141, 142],\n  description: \"Multiplier to Infinity Points, which increases over this Infinity\",\n  effect: () => {\n    const perkEffect = TimeSpan.fromMinutes(Perk.studyIdleEP.effectOrDefault(0));\n    const totalSeconds = Time.thisInfinity.plus(perkEffect).totalSeconds;\n    return thisInfinityMult(totalSeconds);\n  },\n  formatEffect: value => formatX(value, 2, 1),\n  cap: () => Effarig.eternityCap\n}, {\n  id: 151,\n  cost: 8,\n  requirement: [141, 142, 143],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: () => `${formatX(1e4)} multiplier on all Time Dimensions`,\n  effect: 1e4\n}, {\n  id: 161,\n  cost: 7,\n  requirement: [151],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: () => `${formatX(DC.E616)} multiplier on all Antimatter Dimensions`,\n  effect: () => DC.E616\n}, {\n  id: 162,\n  cost: 7,\n  requirement: [151],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: () => `${formatX(1e11)} multiplier on all Infinity Dimensions`,\n  effect: 1e11\n}, {\n  id: 171,\n  cost: 15,\n  requirement: [161, 162],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: () => `Time Shard requirement for the next Tickspeed upgrade goes up slower\n      ${formatX(1.33, 0, 2)} ➜ ${formatX(1.25, 0, 2)}`,\n  effect: () => TS171_MULTIPLIER\n}, {\n  id: 181,\n  cost: 200,\n  requirement: [171, () => EternityChallenge(1).completions > 0 || Perk.bypassEC1Lock.isBought, () => EternityChallenge(2).completions > 0 || Perk.bypassEC2Lock.isBought, () => EternityChallenge(3).completions > 0 || Perk.bypassEC3Lock.isBought],\n  reqType: TS_REQUIREMENT_TYPE.ALL,\n  description: () => `You gain ${formatPercents(0.01)} of your Infinity Points gained on crunch each second`,\n  effect: () => gainedInfinityPoints().times(Time.deltaTime / 100).timesEffectOf(Ra.unlocks.continuousTTBoost.effects.autoPrestige)\n}, {\n  id: 191,\n  cost: 400,\n  requirement: [181, () => EternityChallenge(10).completions > 0],\n  reqType: TS_REQUIREMENT_TYPE.ALL,\n  description: () => `After Eternity you permanently keep ${formatPercents(0.05)}\n    of your Infinities as Banked Infinities`,\n  effect: () => Currency.infinities.value.times(0.05).floor()\n}, {\n  id: 192,\n  cost: 730,\n  requirement: [181, () => EternityChallenge(10).completions > 0, () => !Enslaved.isRunning],\n  reqType: TS_REQUIREMENT_TYPE.ALL,\n  description: () => Enslaved.isRunning ? \"There is not enough space in this Reality\" : `Replicanti can go beyond ${format(replicantiCap(), 2, 1)}, but growth slows down at higher amounts`\n}, {\n  id: 193,\n  cost: 300,\n  requirement: [181, () => EternityChallenge(10).completions > 0],\n  reqType: TS_REQUIREMENT_TYPE.ALL,\n  description: \"Antimatter Dimension multiplier based on Eternities\",\n  effect: () => DC.E13000.pow(Currency.eternities.value.div(1e6).clampMax(1)),\n  cap: DC.E13000,\n  formatEffect: value => formatX(value, 2, 1)\n}, {\n  id: 201,\n  cost: 900,\n  requirement: [192],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: \"Pick a second path from the Dimension Split\"\n}, {\n  id: 211,\n  cost: 120,\n  requirement: [191],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: () => `Dimension Boost requirement scaling is reduced by ${formatInt(5)}`,\n  effect: 5\n}, {\n  id: 212,\n  cost: 150,\n  requirement: [191],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: \"All Galaxies are stronger based on your Time Shards\",\n  effect: () => Math.pow(Currency.timeShards.value.clampMin(2).log2(), 0.005),\n  cap: 1.1,\n  formatEffect: value => `+${formatPercents(value - 1, 3)}`\n}, {\n  id: 213,\n  cost: 200,\n  requirement: [193],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: () => `You gain Replicanti ${formatInt(20)} times faster`,\n  effect: 20\n}, {\n  id: 214,\n  cost: 120,\n  requirement: [193],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  description: \"Dimensional Sacrifice boosts the 8th Antimatter Dimension even more\",\n  effect: () => {\n    const totalBoost = Sacrifice.totalBoost;\n    const firstPart = totalBoost.pow(7.6).clampMaxExponent(44000);\n    const secondPart = totalBoost.pow(1.05).clampMaxExponent(120000);\n    return firstPart.times(secondPart);\n  },\n  cap: DC.E164000,\n  formatEffect: value => formatX(value, 2, 1)\n}, {\n  id: 221,\n  cost: 900,\n  STCost: 4,\n  requirement: [211],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [222],\n  description: \"Time Dimension multiplier based on Dimension Boosts\",\n  effect: () => DC.D1_0025.pow(DimBoost.totalBoosts),\n  formatEffect: value => formatX(value, 2, 1)\n}, {\n  id: 222,\n  cost: 900,\n  STCost: 4,\n  requirement: [211],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [221],\n  description: () => `Dimension Boost costs scale by another ${formatInt(2)} less`,\n  effect: 2\n}, {\n  id: 223,\n  cost: 900,\n  STCost: 4,\n  requirement: [212],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [224],\n  description: () => `Distant Galaxy cost scaling starts ${formatInt(7)} Galaxies later`,\n  effect: 7\n}, {\n  id: 224,\n  cost: 900,\n  STCost: 4,\n  requirement: [212],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [223],\n\n  description() {\n    const effect = TimeStudy(224).effectValue;\n    return `Distant Galaxy cost scaling starts ${quantifyInt(\"Galaxy\", effect)} later\n        (${formatInt(1)} per ${formatInt(2000)} Dim Boosts)`;\n  },\n\n  effect: () => Math.floor(DimBoost.totalBoosts / 2000)\n}, {\n  id: 225,\n  cost: 900,\n  STCost: 4,\n  requirement: [213],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [226],\n  description: \"You gain extra Replicanti Galaxies based on Replicanti amount\",\n  effect: () => Math.floor(Replicanti.amount.exponent / 1000),\n  formatEffect: value => `+${formatInt(value)} RG`\n}, {\n  id: 226,\n  cost: 900,\n  STCost: 4,\n  requirement: [213],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [225],\n  description: \"You gain extra Replicanti Galaxies based on their max\",\n  effect: () => Math.floor(player.replicanti.boughtGalaxyCap / 15),\n  formatEffect: value => `+${formatInt(value)} RG`\n}, {\n  id: 227,\n  cost: 900,\n  STCost: 4,\n  requirement: [214],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [228],\n  description: \"Dimensional Sacrifice affects 4th Time Dimension with reduced effect\",\n  effect: () => Math.max(Math.pow(Sacrifice.totalBoost.pLog10(), 10), 1),\n  formatEffect: value => formatX(value, 2, 2)\n}, {\n  id: 228,\n  cost: 900,\n  STCost: 4,\n  requirement: [214],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [227],\n  description: () => `Dimensional Sacrifice formula scales better\n      ${Sacrifice.getSacrificeDescription({\n    \"TimeStudy228\": false\n  })} ➜\n      ${Sacrifice.getSacrificeDescription({\n    \"TimeStudy228\": true\n  })}`,\n  effect: 0.2\n}, {\n  id: 231,\n  cost: 500,\n  STCost: 5,\n  requirement: [221, 222],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [232],\n  description: \"Dimension Boosts are stronger based on their amount\",\n  effect: () => Decimal.pow(DimBoost.totalBoosts, 0.3).clampMin(1),\n  formatEffect: value => formatX(value, 2, 2)\n}, {\n  id: 232,\n  cost: 500,\n  STCost: 5,\n  requirement: [223, 224],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [231],\n  description: \"All Galaxies are stronger based on Antimatter Galaxies\",\n  effect: () => Math.pow(1 + player.galaxies / 1000, 0.2),\n  formatEffect: value => `+${formatPercents(value - 1, 3)}`\n}, {\n  id: 233,\n  cost: 500,\n  STCost: 5,\n  requirement: [225, 226],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [234],\n  description: \"Max Replicanti Galaxy upgrade is cheaper based on current Replicanti\",\n  effect: () => Replicanti.amount.pow(0.3),\n  formatEffect: value => `/ ${format(value, 1, 2)}`\n}, {\n  id: 234,\n  cost: 500,\n  STCost: 5,\n  requirement: [227, 228],\n  reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\n  requiresST: [233],\n  description: \"Dimensional Sacrifice applies to 1st Antimatter Dimension\",\n  effect: () => Sacrifice.totalBoost\n}, // Note: These last 4 entries are the triad studies\n{\n  id: 301,\n  cost: 0,\n  STCost: 12,\n  requirement: [() => Ra.unlocks.unlockHardV.effectOrDefault(0) >= 1, 221, 222, 231],\n  reqType: TS_REQUIREMENT_TYPE.ALL,\n  requiresST: [221, 222, 231],\n  description: \"Time Study 231 improves the effect of Time Study 221\",\n  effect: () => TimeStudy(221).effectValue.pow(TimeStudy(231).effectValue.minus(1)).clampMin(1),\n  formatEffect: value => formatX(value, 2, 1),\n  unlocked: () => Ra.unlocks.unlockHardV.effectOrDefault(0) >= 1\n}, {\n  id: 302,\n  cost: 0,\n  STCost: 12,\n  requirement: [() => Ra.unlocks.unlockHardV.effectOrDefault(0) >= 2, 223, 224, 232],\n  reqType: TS_REQUIREMENT_TYPE.ALL,\n  requiresST: [223, 224, 232],\n  description: () => `Distant Galaxy scaling threshold starts another ${formatInt(3000)} Antimatter Galaxies later`,\n  effect: 3000,\n  unlocked: () => Ra.unlocks.unlockHardV.effectOrDefault(0) >= 2\n}, {\n  id: 303,\n  cost: 0,\n  STCost: 12,\n  requirement: [() => Ra.unlocks.unlockHardV.effectOrDefault(0) >= 3, 225, 226, 233],\n  reqType: TS_REQUIREMENT_TYPE.ALL,\n  requiresST: [225, 226, 233],\n  description: () => `Gain ${formatPercents(0.5)} more extra Replicanti Galaxies from Time Studies 225 and 226,\n      and from Effarig's Infinity`,\n  effect: 1.5,\n  unlocked: () => Ra.unlocks.unlockHardV.effectOrDefault(0) >= 3\n}, {\n  id: 304,\n  cost: 0,\n  STCost: 12,\n  requirement: [() => Ra.unlocks.unlockHardV.effectOrDefault(0) >= 4, 227, 228, 234],\n  reqType: TS_REQUIREMENT_TYPE.ALL,\n  requiresST: [227, 228, 234],\n  description: \"Dimensional Sacrifice multiplier is squared\",\n  effect: 2,\n  unlocked: () => Ra.unlocks.unlockHardV.effectOrDefault(0) >= 4\n}];","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/eternity/time-studies/normal-time-studies.js"],"names":["DC","thisInfinityMult","thisInfinity","scaledInfinity","cappedInfinity","Math","min","pow","D15","log","passiveIPMult","isEffarigLimited","Effarig","isRunning","currentStage","EFFARIG_STAGES","ETERNITY","normalValue","Perk","studyPassive","isBought","eternityCap","toNumber","normalTimeStudies","id","cost","requirement","reqType","TS_REQUIREMENT_TYPE","ALL","description","effect","tickspeed","Tickspeed","current","dividedBy","firstPart","times","secondPart","plus","reciprocate","cap","E2500","formatEffect","value","formatX","AT_LEAST_ONE","formatPow","Replicanti","amount","oldVal","Decimal","log2","clampMin","newVal","div","formatInt","max","DimBoost","totalBoosts","D1_2","galaxies","total","player","dilation","totalTachyonGalaxies","bypassEC5Lock","EternityChallenge","completions","studyECRequirement","isUnlocked","DIMENSION_PATH","Sacrifice","totalBoost","E210000","E30000","E1300","D1_0000109","E1E7","D1_0004","totalTickGained","E30","pow10","Time","thisEternity","totalMinutes","E300","D2","bestEternity","totalSeconds","C2P30","D5","replicanti","Achievement","canBeApplied","formatFloat","STCost","requiresST","studyActiveEP","PlayerProgress","realityUnlocked","clamp","Player","averageRealTimePerEternity","undefined","perkEffect","TimeSpan","fromMinutes","studyIdleEP","effectOrDefault","sqrt","formatPercents","floor","boughtGalaxyCap","Pelle","isDoomed","format","Number","MAX_VALUE","E45","divide","getGlobalSpeedFactor","E616","TS171_MULTIPLIER","bypassEC1Lock","bypassEC2Lock","bypassEC3Lock","gainedInfinityPoints","deltaTime","timesEffectOf","Ra","unlocks","continuousTTBoost","effects","autoPrestige","Currency","infinities","Enslaved","replicantiCap","E13000","eternities","clampMax","timeShards","clampMaxExponent","E164000","D1_0025","TimeStudy","effectValue","quantifyInt","exponent","pLog10","getSacrificeDescription","unlockHardV","minus","unlocked"],"mappings":"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","sourcesContent":["import { DC } from \"../../../constants\";\r\n\r\nconst thisInfinityMult = thisInfinity => {\r\n  // All \"this inf time\" or \"best inf time\" mults are * 10\r\n  const scaledInfinity = thisInfinity * 10 + 1;\r\n  const cappedInfinity = Math.min(Math.pow(scaledInfinity, 0.125), 500);\r\n  return DC.D15.pow(Math.log(scaledInfinity) * cappedInfinity);\r\n};\r\nconst passiveIPMult = () => {\r\n  const isEffarigLimited = Effarig.isRunning && Effarig.currentStage === EFFARIG_STAGES.ETERNITY;\r\n  const normalValue = Perk.studyPassive.isBought ? 1e50 : 1e25;\r\n  return isEffarigLimited\r\n    ? Math.min(normalValue, Effarig.eternityCap.toNumber())\r\n    : normalValue;\r\n};\r\n\r\n\r\n/**\r\n * List of time study specifications and attributes\r\n * {\r\n *  @property {Number} id                   Numerical ID shown for each time study in code and in-game\r\n *  @property {Number} cost                 Amount of available time theorems required to purchase\r\n *  @property {Number} STcost               Amount of available space theorems required to purchase if needed\r\n *  @property {Object[]} requirement   Array of Numbers or functions which are checked to determine purchasability\r\n *  @property {Number} reqType              Number specified by enum in TS_REQUIREMENT_TYPE for requirement behavior\r\n *  @property {Number[]} requiresST    Array of Numbers indicating which other studies will cause this particular\r\n *    study to also cost space theorems - in all cases this applies if ANY in the array are bought\r\n *  @property {function: @return String} description  Text to be shown in-game for the time study's effects\r\n *  @property {function: @return Number} effect       Numerical value for the effects of a study\r\n *  @property {String[]} cap     Hard-coded cap for studies which don't scale forever\r\n *  @property {String} formatEffect   Formatting function for effects, if the default formatting isn't appropriate\r\n * }\r\n */\r\nexport const normalTimeStudies = [\r\n  {\r\n    id: 11,\r\n    cost: 1,\r\n    // All requirements of an empty array will always evaluate to true, so this study is always purchasable\r\n    requirement: [],\r\n    reqType: TS_REQUIREMENT_TYPE.ALL,\r\n    description: \"Tickspeed affects 1st Time Dimension with reduced effect\",\r\n    effect: () => {\r\n      const tickspeed = Tickspeed.current.dividedBy(1000);\r\n      const firstPart = tickspeed.pow(0.005).times(0.95);\r\n      const secondPart = tickspeed.pow(0.0003).times(0.05);\r\n      return firstPart.plus(secondPart).reciprocate();\r\n    },\r\n    cap: DC.E2500,\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  },\r\n  {\r\n    id: 21,\r\n    cost: 3,\r\n    requirement: [11],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: () => `Improve Replicanti multiplier formula to\r\n      (log2(x)${formatPow(2)})+x${formatPow(0.032, 3, 3)}`,\r\n    effect: () => Replicanti.amount.pow(0.032),\r\n    // This is a special case because the study itself is *added* to the existing formula, but it makes more sense\r\n    // to display a multiplicative increase just like every other study. We need to do the calculation in here in order\r\n    // to properly show only the effect of this study and nothing else\r\n    formatEffect: value => {\r\n      const oldVal = Decimal.pow(Decimal.log2(Replicanti.amount.clampMin(1)), 2);\r\n      const newVal = oldVal.plus(value);\r\n      return formatX(newVal.div(oldVal).clampMin(1), 2, 2);\r\n    }\r\n  },\r\n  {\r\n    id: 22,\r\n    cost: 2,\r\n    requirement: [11],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: () => `Base Replicanti interval limit ${formatInt(50)}ms ➜ ${formatInt(1)}ms`,\r\n    effect: 1\r\n  },\r\n  {\r\n    id: 31,\r\n    cost: 3,\r\n    requirement: [21],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: () => `Powers up multipliers that are based on your Infinities (Bonuses${formatPow(4)})`,\r\n    effect: 4\r\n  },\r\n  {\r\n    id: 32,\r\n    cost: 2,\r\n    requirement: [22],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: `You gain more Infinities based on Dimension Boosts`,\r\n    effect: () => Math.max(DimBoost.totalBoosts, 1),\r\n    formatEffect: value => formatX(value, 2)\r\n  },\r\n  {\r\n    id: 33,\r\n    cost: 2,\r\n    requirement: [22],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: \"You keep half of your Replicanti Galaxies on Infinity\"\r\n  },\r\n  {\r\n    id: 41,\r\n    cost: 4,\r\n    requirement: [31],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: () => `All Galaxies give a ${formatX(DC.D1_2, 1, 1)} multiplier to Infinity Points gained`,\r\n    effect: () => DC.D1_2.pow(Replicanti.galaxies.total + player.galaxies + player.dilation.totalTachyonGalaxies),\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  },\r\n  {\r\n    id: 42,\r\n    cost: 6,\r\n    requirement: [32],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: () => `Antimatter Galaxy requirement increases by ${formatInt(52)}\r\n      8th Dimensions instead of ${formatInt(60)}`,\r\n    effect: 52\r\n  },\r\n  {\r\n    id: 51,\r\n    cost: 3,\r\n    requirement: [41, 42],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: () => `You gain ${formatX(1e15)} more Infinity Points`,\r\n    effect: 1e15\r\n  },\r\n  {\r\n    id: 61,\r\n    cost: 3,\r\n    requirement: [51],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: () => `You gain ${formatX(15)} more Eternity Points`,\r\n    effect: 15\r\n  },\r\n  {\r\n    id: 62,\r\n    cost: 3,\r\n    requirement: [42, () => Perk.bypassEC5Lock.isBought || EternityChallenge(5).completions > 0],\r\n    reqType: TS_REQUIREMENT_TYPE.ALL,\r\n    description: () => `You gain Replicanti ${formatInt(3)} times faster`,\r\n    effect: 3\r\n  },\r\n  {\r\n    id: 71,\r\n    cost: 4,\r\n    requirement: [61, () => Perk.studyECRequirement.isBought || !EternityChallenge(12).isUnlocked],\r\n    reqType: TS_REQUIREMENT_TYPE.DIMENSION_PATH,\r\n    description: \"Dimensional Sacrifice affects all other Antimatter Dimensions with reduced effect\",\r\n    effect: () => Sacrifice.totalBoost.pow(0.25).clampMin(1),\r\n    cap: DC.E210000,\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  },\r\n  {\r\n    id: 72,\r\n    cost: 6,\r\n    requirement: [61,\r\n      () => Perk.studyECRequirement.isBought ||\r\n        (!EternityChallenge(11).isUnlocked && !EternityChallenge(12).isUnlocked)],\r\n    reqType: TS_REQUIREMENT_TYPE.DIMENSION_PATH,\r\n    description: \"Dimensional Sacrifice affects 4th Infinity Dimension with greatly reduced effect\",\r\n    effect: () => Sacrifice.totalBoost.pow(0.04).clampMin(1),\r\n    cap: DC.E30000,\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  },\r\n  {\r\n    id: 73,\r\n    cost: 5,\r\n    requirement: [61, () => Perk.studyECRequirement.isBought || !EternityChallenge(11).isUnlocked],\r\n    reqType: TS_REQUIREMENT_TYPE.DIMENSION_PATH,\r\n    description: \"Dimensional Sacrifice affects 3rd Time Dimension with greatly reduced effect\",\r\n    effect: () => Sacrifice.totalBoost.pow(0.005).clampMin(1),\r\n    cap: DC.E1300,\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  },\r\n  {\r\n    id: 81,\r\n    cost: 4,\r\n    requirement: [71],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: () => `Base Dimension Boost power becomes ${formatX(10)}`,\r\n    effect: 10\r\n  },\r\n  {\r\n    id: 82,\r\n    cost: 6,\r\n    requirement: [72],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: \"Dimension Boosts affect Infinity Dimensions\",\r\n    effect: () => DC.D1_0000109.pow(Math.pow(DimBoost.totalBoosts, 2)),\r\n    cap: DC.E1E7,\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  },\r\n  {\r\n    id: 83,\r\n    cost: 5,\r\n    requirement: [73],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: \"Dimension Boost multiplier based on tick upgrades gained from TDs\",\r\n    effect: () => DC.D1_0004.pow(player.totalTickGained),\r\n    cap: DC.E30,\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  },\r\n  {\r\n    id: 91,\r\n    cost: 4,\r\n    requirement: [81],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: \"Antimatter Dimension multiplier based on time spent in this Eternity\",\r\n    effect: () => Decimal.pow10(Math.min(Time.thisEternity.totalMinutes, 20) * 15),\r\n    cap: DC.E300,\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  },\r\n  {\r\n    id: 92,\r\n    cost: 5,\r\n    requirement: [82],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: \"Infinity Dimension multiplier based on fastest Eternity time\",\r\n    effect: () => DC.D2.pow(60 / Math.max(Time.bestEternity.totalSeconds, 2)),\r\n    cap: DC.C2P30,\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  },\r\n  {\r\n    id: 93,\r\n    cost: 7,\r\n    requirement: [83],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: \"Time Dimension multiplier based on tick upgrades gained\",\r\n    effect: () => Decimal.pow(player.totalTickGained, 0.25).clampMin(1),\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  },\r\n  {\r\n    id: 101,\r\n    cost: 4,\r\n    requirement: [91],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: \"Antimatter Dimension multiplier equal to Replicanti amount\",\r\n    effect: () => Decimal.max(Replicanti.amount, 1),\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  },\r\n  {\r\n    id: 102,\r\n    cost: 6,\r\n    requirement: [92],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: \"Replicanti Galaxies boost Replicanti multiplier\",\r\n    effect: () => DC.D5.pow(player.replicanti.galaxies),\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  },\r\n  {\r\n    id: 103,\r\n    cost: 6,\r\n    requirement: [93],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: \"Time Dimension multiplier equal to Replicanti Galaxy amount\",\r\n    effect: () => Math.max(player.replicanti.galaxies, 1),\r\n    formatEffect: value => formatX(value, 2, 0)\r\n  },\r\n  {\r\n    id: 111,\r\n    cost: 12,\r\n    requirement: [101, 102, 103],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: () => (Achievement(103).canBeApplied\r\n      ? `Make the Infinity Point formula better log(x)/${formatFloat(307.8, 1)} ➜ log(x)/${formatInt(285)}`\r\n      : `Make the Infinity Point formula better log(x)/${formatInt(308)} ➜ log(x)/${formatInt(285)}`),\r\n    effect: 285\r\n  },\r\n  {\r\n    id: 121,\r\n    cost: 9,\r\n    STCost: 2,\r\n    requirement: [111],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [122, 123],\r\n    description: () => (Perk.studyActiveEP.isBought\r\n      ? `You gain ${formatX(50)} more Eternity Points`\r\n      : `You gain more EP based on how fast your last ten Eternities\r\n      were${PlayerProgress.realityUnlocked() ? \" (real real time)\" : \"\"}`),\r\n    effect: () => (Perk.studyActiveEP.isBought\r\n      ? 50\r\n      : Math.clamp(250 / Player.averageRealTimePerEternity, 1, 50)),\r\n    formatEffect: value => (Perk.studyActiveEP.isBought ? undefined : formatX(value, 1, 1)),\r\n    cap: 50\r\n  },\r\n  {\r\n    id: 122,\r\n    cost: 9,\r\n    STCost: 2,\r\n    requirement: [111],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [121, 123],\r\n    description: () => (Perk.studyPassive.isBought\r\n      ? `You gain ${formatX(50)} more Eternity Points`\r\n      : `You gain ${formatX(35)} more Eternity Points`),\r\n    effect: () => (Perk.studyPassive.isBought ? 50 : 35)\r\n  },\r\n  {\r\n    id: 123,\r\n    cost: 9,\r\n    STCost: 2,\r\n    requirement: [111],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [121, 122],\r\n    description: \"You gain more Eternity Points based on time spent this Eternity\",\r\n    effect: () => {\r\n      const perkEffect = TimeSpan.fromMinutes(Perk.studyIdleEP.effectOrDefault(0));\r\n      const totalSeconds = Time.thisEternity.plus(perkEffect).totalSeconds;\r\n      return Math.sqrt(1.39 * totalSeconds);\r\n    },\r\n    formatEffect: value => formatX(value, 1, 1)\r\n  },\r\n  {\r\n    id: 131,\r\n    cost: 5,\r\n    STCost: 8,\r\n    requirement: [121],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [132, 133],\r\n    description: () => (Achievement(138).isUnlocked\r\n      ? `You can get ${formatPercents(0.5)} more Replicanti Galaxies`\r\n      : `Automatic Replicanti Galaxies are disabled, but you can get ${formatPercents(0.5)} more`),\r\n    effect: () => Math.floor(player.replicanti.boughtGalaxyCap / 2)\r\n  },\r\n  {\r\n    id: 132,\r\n    cost: 5,\r\n    STCost: 8,\r\n    requirement: [122],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [131, 133],\r\n    description: () => (Pelle.isDoomed\r\n      ? `Replicanti Galaxies are ${formatPercents(0.4)} stronger`\r\n      : `Replicanti Galaxies are ${formatPercents(0.4)} stronger and Replicanti are \r\n        ${Perk.studyPassive.isBought ? formatX(3) : formatX(1.5, 1, 1)} faster`),\r\n    effect: 0.4\r\n  },\r\n  {\r\n    id: 133,\r\n    cost: 5,\r\n    STCost: 8,\r\n    requirement: [123],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [131, 132],\r\n    description: () => (Achievement(138).isUnlocked\r\n      ? `Replicanti Galaxies are ${formatPercents(0.5)} stronger`\r\n      : `Replicanti are ${formatX(10)} slower until ${format(Number.MAX_VALUE, 2)}` +\r\n    `, but Replicanti Galaxies are ${formatPercents(0.5)} stronger`),\r\n    effect: 0.5\r\n  },\r\n  {\r\n    id: 141,\r\n    cost: 4,\r\n    STCost: 2,\r\n    requirement: [131],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [142, 143],\r\n    description: () => (Perk.studyActiveEP.isBought\r\n      ? `You gain ${formatX(DC.E45)} more Infinity Points`\r\n      : \"Multiplier to Infinity Points, which decays over this Infinity\"),\r\n    effect: () => (Perk.studyActiveEP.isBought\r\n      ? DC.E45\r\n      : DC.E45.divide(thisInfinityMult(Time.thisInfinity.totalSeconds / getGlobalSpeedFactor())).clampMin(1)),\r\n    formatEffect: value => (Perk.studyActiveEP.isBought ? undefined : formatX(value, 2, 1))\r\n  },\r\n  {\r\n    id: 142,\r\n    cost: 4,\r\n    STCost: 2,\r\n    requirement: [132],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [141, 143],\r\n    description: () => `You gain ${formatX(passiveIPMult())} more Infinity Points`,\r\n    effect: passiveIPMult,\r\n    cap: () => (Effarig.eternityCap === undefined ? undefined : Effarig.eternityCap.toNumber())\r\n  },\r\n  {\r\n    id: 143,\r\n    cost: 4,\r\n    STCost: 2,\r\n    requirement: [133],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [141, 142],\r\n    description: \"Multiplier to Infinity Points, which increases over this Infinity\",\r\n    effect: () => {\r\n      const perkEffect = TimeSpan.fromMinutes(Perk.studyIdleEP.effectOrDefault(0));\r\n      const totalSeconds = Time.thisInfinity.plus(perkEffect).totalSeconds;\r\n      return thisInfinityMult(totalSeconds);\r\n    },\r\n    formatEffect: value => formatX(value, 2, 1),\r\n    cap: () => Effarig.eternityCap\r\n  },\r\n  {\r\n    id: 151,\r\n    cost: 8,\r\n    requirement: [141, 142, 143],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: () => `${formatX(1e4)} multiplier on all Time Dimensions`,\r\n    effect: 1e4\r\n  },\r\n  {\r\n    id: 161,\r\n    cost: 7,\r\n    requirement: [151],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: () => `${formatX(DC.E616)} multiplier on all Antimatter Dimensions`,\r\n    effect: () => DC.E616\r\n  },\r\n  {\r\n    id: 162,\r\n    cost: 7,\r\n    requirement: [151],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: () => `${formatX(1e11)} multiplier on all Infinity Dimensions`,\r\n    effect: 1e11\r\n  },\r\n  {\r\n    id: 171,\r\n    cost: 15,\r\n    requirement: [161, 162],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: () => `Time Shard requirement for the next Tickspeed upgrade goes up slower\r\n      ${formatX(1.33, 0, 2)} ➜ ${formatX(1.25, 0, 2)}`,\r\n    effect: () => TS171_MULTIPLIER\r\n  },\r\n  {\r\n    id: 181,\r\n    cost: 200,\r\n    requirement: [171,\r\n      () => EternityChallenge(1).completions > 0 || Perk.bypassEC1Lock.isBought,\r\n      () => EternityChallenge(2).completions > 0 || Perk.bypassEC2Lock.isBought,\r\n      () => EternityChallenge(3).completions > 0 || Perk.bypassEC3Lock.isBought],\r\n    reqType: TS_REQUIREMENT_TYPE.ALL,\r\n    description: () => `You gain ${formatPercents(0.01)} of your Infinity Points gained on crunch each second`,\r\n    effect: () => gainedInfinityPoints().times(Time.deltaTime / 100)\r\n      .timesEffectOf(Ra.unlocks.continuousTTBoost.effects.autoPrestige)\r\n  },\r\n  {\r\n    id: 191,\r\n    cost: 400,\r\n    requirement: [181, () => EternityChallenge(10).completions > 0],\r\n    reqType: TS_REQUIREMENT_TYPE.ALL,\r\n    description: () => `After Eternity you permanently keep ${formatPercents(0.05)}\r\n    of your Infinities as Banked Infinities`,\r\n    effect: () => Currency.infinities.value.times(0.05).floor()\r\n  },\r\n  {\r\n    id: 192,\r\n    cost: 730,\r\n    requirement: [181, () => EternityChallenge(10).completions > 0, () => !Enslaved.isRunning],\r\n    reqType: TS_REQUIREMENT_TYPE.ALL,\r\n    description: () => (Enslaved.isRunning\r\n      ? \"There is not enough space in this Reality\"\r\n      : `Replicanti can go beyond ${format(replicantiCap(), 2, 1)}, but growth slows down at higher amounts`)\r\n  },\r\n  {\r\n    id: 193,\r\n    cost: 300,\r\n    requirement: [181, () => EternityChallenge(10).completions > 0],\r\n    reqType: TS_REQUIREMENT_TYPE.ALL,\r\n    description: \"Antimatter Dimension multiplier based on Eternities\",\r\n    effect: () => (DC.E13000.pow(Currency.eternities.value.div(1e6).clampMax(1))),\r\n    cap: DC.E13000,\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  },\r\n  {\r\n    id: 201,\r\n    cost: 900,\r\n    requirement: [192],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: \"Pick a second path from the Dimension Split\"\r\n  },\r\n  {\r\n    id: 211,\r\n    cost: 120,\r\n    requirement: [191],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: () => `Dimension Boost requirement scaling is reduced by ${formatInt(5)}`,\r\n    effect: 5\r\n  },\r\n  {\r\n    id: 212,\r\n    cost: 150,\r\n    requirement: [191],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: \"All Galaxies are stronger based on your Time Shards\",\r\n    effect: () => Math.pow(Currency.timeShards.value.clampMin(2).log2(), 0.005),\r\n    cap: 1.1,\r\n    formatEffect: value => `+${formatPercents(value - 1, 3)}`\r\n  },\r\n  {\r\n    id: 213,\r\n    cost: 200,\r\n    requirement: [193],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: () => `You gain Replicanti ${formatInt(20)} times faster`,\r\n    effect: 20\r\n  },\r\n  {\r\n    id: 214,\r\n    cost: 120,\r\n    requirement: [193],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    description: \"Dimensional Sacrifice boosts the 8th Antimatter Dimension even more\",\r\n    effect: () => {\r\n      const totalBoost = Sacrifice.totalBoost;\r\n      const firstPart = totalBoost.pow(7.6).clampMaxExponent(44000);\r\n      const secondPart = totalBoost.pow(1.05).clampMaxExponent(120000);\r\n      return firstPart.times(secondPart);\r\n    },\r\n    cap: DC.E164000,\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  },\r\n  {\r\n    id: 221,\r\n    cost: 900,\r\n    STCost: 4,\r\n    requirement: [211],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [222],\r\n    description: \"Time Dimension multiplier based on Dimension Boosts\",\r\n    effect: () => DC.D1_0025.pow(DimBoost.totalBoosts),\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  },\r\n  {\r\n    id: 222,\r\n    cost: 900,\r\n    STCost: 4,\r\n    requirement: [211],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [221],\r\n    description: () => `Dimension Boost costs scale by another ${formatInt(2)} less`,\r\n    effect: 2\r\n  },\r\n  {\r\n    id: 223,\r\n    cost: 900,\r\n    STCost: 4,\r\n    requirement: [212],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [224],\r\n    description: () => `Distant Galaxy cost scaling starts ${formatInt(7)} Galaxies later`,\r\n    effect: 7\r\n  },\r\n  {\r\n    id: 224,\r\n    cost: 900,\r\n    STCost: 4,\r\n    requirement: [212],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [223],\r\n    description() {\r\n      const effect = TimeStudy(224).effectValue;\r\n      return `Distant Galaxy cost scaling starts ${quantifyInt(\"Galaxy\", effect)} later\r\n        (${formatInt(1)} per ${formatInt(2000)} Dim Boosts)`;\r\n    },\r\n    effect: () => Math.floor(DimBoost.totalBoosts / 2000)\r\n  },\r\n  {\r\n    id: 225,\r\n    cost: 900,\r\n    STCost: 4,\r\n    requirement: [213],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [226],\r\n    description: \"You gain extra Replicanti Galaxies based on Replicanti amount\",\r\n    effect: () => Math.floor(Replicanti.amount.exponent / 1000),\r\n    formatEffect: value => `+${formatInt(value)} RG`\r\n  },\r\n  {\r\n    id: 226,\r\n    cost: 900,\r\n    STCost: 4,\r\n    requirement: [213],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [225],\r\n    description: \"You gain extra Replicanti Galaxies based on their max\",\r\n    effect: () => Math.floor(player.replicanti.boughtGalaxyCap / 15),\r\n    formatEffect: value => `+${formatInt(value)} RG`\r\n  },\r\n  {\r\n    id: 227,\r\n    cost: 900,\r\n    STCost: 4,\r\n    requirement: [214],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [228],\r\n    description: \"Dimensional Sacrifice affects 4th Time Dimension with reduced effect\",\r\n    effect: () => Math.max(Math.pow(Sacrifice.totalBoost.pLog10(), 10), 1),\r\n    formatEffect: value => formatX(value, 2, 2)\r\n  },\r\n  {\r\n    id: 228,\r\n    cost: 900,\r\n    STCost: 4,\r\n    requirement: [214],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [227],\r\n    description: () => `Dimensional Sacrifice formula scales better\r\n      ${Sacrifice.getSacrificeDescription({ \"TimeStudy228\": false })} ➜\r\n      ${Sacrifice.getSacrificeDescription({ \"TimeStudy228\": true })}`,\r\n    effect: 0.2\r\n  },\r\n  {\r\n    id: 231,\r\n    cost: 500,\r\n    STCost: 5,\r\n    requirement: [221, 222],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [232],\r\n    description: \"Dimension Boosts are stronger based on their amount\",\r\n    effect: () => Decimal.pow(DimBoost.totalBoosts, 0.3).clampMin(1),\r\n    formatEffect: value => formatX(value, 2, 2)\r\n  },\r\n  {\r\n    id: 232,\r\n    cost: 500,\r\n    STCost: 5,\r\n    requirement: [223, 224],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [231],\r\n    description: \"All Galaxies are stronger based on Antimatter Galaxies\",\r\n    effect: () => Math.pow(1 + player.galaxies / 1000, 0.2),\r\n    formatEffect: value => `+${formatPercents(value - 1, 3)}`\r\n  },\r\n  {\r\n    id: 233,\r\n    cost: 500,\r\n    STCost: 5,\r\n    requirement: [225, 226],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [234],\r\n    description: \"Max Replicanti Galaxy upgrade is cheaper based on current Replicanti\",\r\n    effect: () => Replicanti.amount.pow(0.3),\r\n    formatEffect: value => `/ ${format(value, 1, 2)}`\r\n  },\r\n  {\r\n    id: 234,\r\n    cost: 500,\r\n    STCost: 5,\r\n    requirement: [227, 228],\r\n    reqType: TS_REQUIREMENT_TYPE.AT_LEAST_ONE,\r\n    requiresST: [233],\r\n    description: \"Dimensional Sacrifice applies to 1st Antimatter Dimension\",\r\n    effect: () => Sacrifice.totalBoost,\r\n  },\r\n  // Note: These last 4 entries are the triad studies\r\n  {\r\n    id: 301,\r\n    cost: 0,\r\n    STCost: 12,\r\n    requirement: [() => Ra.unlocks.unlockHardV.effectOrDefault(0) >= 1, 221, 222, 231],\r\n    reqType: TS_REQUIREMENT_TYPE.ALL,\r\n    requiresST: [221, 222, 231],\r\n    description: \"Time Study 231 improves the effect of Time Study 221\",\r\n    effect: () => TimeStudy(221).effectValue.pow(TimeStudy(231).effectValue.minus(1)).clampMin(1),\r\n    formatEffect: value => formatX(value, 2, 1),\r\n    unlocked: () => Ra.unlocks.unlockHardV.effectOrDefault(0) >= 1\r\n  },\r\n  {\r\n    id: 302,\r\n    cost: 0,\r\n    STCost: 12,\r\n    requirement: [() => Ra.unlocks.unlockHardV.effectOrDefault(0) >= 2, 223, 224, 232],\r\n    reqType: TS_REQUIREMENT_TYPE.ALL,\r\n    requiresST: [223, 224, 232],\r\n    description: () => `Distant Galaxy scaling threshold starts another ${formatInt(3000)} Antimatter Galaxies later`,\r\n    effect: 3000,\r\n    unlocked: () => Ra.unlocks.unlockHardV.effectOrDefault(0) >= 2\r\n  },\r\n  {\r\n    id: 303,\r\n    cost: 0,\r\n    STCost: 12,\r\n    requirement: [() => Ra.unlocks.unlockHardV.effectOrDefault(0) >= 3, 225, 226, 233],\r\n    reqType: TS_REQUIREMENT_TYPE.ALL,\r\n    requiresST: [225, 226, 233],\r\n    description: () => `Gain ${formatPercents(0.5)} more extra Replicanti Galaxies from Time Studies 225 and 226,\r\n      and from Effarig's Infinity`,\r\n    effect: 1.5,\r\n    unlocked: () => Ra.unlocks.unlockHardV.effectOrDefault(0) >= 3\r\n  },\r\n  {\r\n    id: 304,\r\n    cost: 0,\r\n    STCost: 12,\r\n    requirement: [() => Ra.unlocks.unlockHardV.effectOrDefault(0) >= 4, 227, 228, 234],\r\n    reqType: TS_REQUIREMENT_TYPE.ALL,\r\n    requiresST: [227, 228, 234],\r\n    description: \"Dimensional Sacrifice multiplier is squared\",\r\n    effect: 2,\r\n    unlocked: () => Ra.unlocks.unlockHardV.effectOrDefault(0) >= 4\r\n  }\r\n];\r\n"]},"metadata":{},"sourceType":"module"}