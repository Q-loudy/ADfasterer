{"ast":null,"code":"import \"core-js/modules/es.array.reverse.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport PlusMinusButton from \"@/components/PlusMinusButton\";\n/*\r\n* This is based on vue-slider-component\r\n* downloaded from https://github.com/NightCatSama/vue-slider-component\r\n* It's modified to support showing the slider value in the slider.\r\n*/\n\n/*\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2016 NightCatSama.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/\n// Unsharp text [#166](https://github.com/NightCatSama/vue-slider-component/issues/166)\n\nconst roundToDPR = function () {\n  const r = typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1;\n  return value => Math.round(value * r) / r;\n}();\n\nexport default {\n  name: \"SliderComponent\",\n  components: {\n    PlusMinusButton\n  },\n  props: {\n    width: {\n      type: String,\n      default: 'auto'\n    },\n    height: {\n      type: String,\n      default: \"6px\"\n    },\n    data: {\n      type: Array,\n      default: null\n    },\n    dotSize: {\n      type: [String, Number],\n      default: \"16px\"\n    },\n    dotWidth: {\n      type: String,\n      required: false\n    },\n    dotHeight: {\n      type: String,\n      required: false\n    },\n    min: {\n      type: Number,\n      default: 0\n    },\n    max: {\n      type: Number,\n      default: 100\n    },\n    interval: {\n      type: Number,\n      default: 1\n    },\n    show: {\n      type: Boolean,\n      default: true\n    },\n    disabled: {\n      type: [Boolean, Array],\n      default: false\n    },\n    piecewise: {\n      type: Boolean,\n      default: false\n    },\n    tooltip: {\n      type: [String, Boolean],\n      default: 'always'\n    },\n    eventType: {\n      type: String,\n      default: 'auto'\n    },\n    direction: {\n      type: String,\n      default: 'horizontal'\n    },\n    reverse: {\n      type: Boolean,\n      default: false\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    },\n    clickable: {\n      type: Boolean,\n      default: true\n    },\n    speed: {\n      type: Number,\n      default: 0.5\n    },\n    realTime: {\n      type: Boolean,\n      default: false\n    },\n    stopPropagation: {\n      type: Boolean,\n      default: false\n    },\n    value: {\n      type: [String, Number, Array, Object],\n      default: 0\n    },\n    piecewiseLabel: {\n      type: Boolean,\n      default: false\n    },\n    debug: {\n      type: Boolean,\n      default: true\n    },\n    fixed: {\n      type: Boolean,\n      default: false\n    },\n    minRange: {\n      type: Number\n    },\n    maxRange: {\n      type: Number\n    },\n    processDraggable: {\n      type: Boolean,\n      default: false\n    },\n    useKeyboard: {\n      type: Boolean,\n      default: false\n    },\n    actionsKeyboard: {\n      type: Array,\n\n      default() {\n        return [i => i - 1, i => i + 1];\n      }\n\n    },\n    piecewiseFilter: {\n      type: Function\n    },\n    tooltipMerge: {\n      type: Boolean,\n      default: true\n    },\n    startAnimation: {\n      type: Boolean,\n      default: false\n    },\n    enableCross: {\n      type: Boolean,\n      default: true\n    },\n    valueInDot: {\n      type: Boolean,\n      default: false\n    },\n    plusMinusButtons: {\n      type: Boolean,\n      default: false\n    },\n    sliderStyle: [Array, Object, Function],\n    focusStyle: [Array, Object, Function],\n    tooltipDir: [Array, String],\n    xformatter: [String, Function],\n    // Global mixin defines formatter\n    mergeFormatter: [String, Function],\n    piecewiseStyle: Object,\n    disabledStyle: Object,\n    piecewiseActiveStyle: Object,\n    processStyle: Object,\n    processClass: String,\n    bgStyle: Object,\n    bgClass: String,\n    tooltipStyle: [Array, Object, Function],\n    disabledDotStyle: [Array, Object, Function],\n    labelStyle: Object,\n    labelActiveStyle: Object,\n    dotClass: [String, Array]\n  },\n\n  data() {\n    return {\n      flag: false,\n      dragFlag: false,\n      crossFlag: false,\n      keydownFlag: null,\n      focusFlag: false,\n      processFlag: false,\n      processSign: null,\n      size: 0,\n      fixedValue: 0,\n      focusSlider: 0,\n      currentValue: 0,\n      currentSlider: 0,\n      isComponentExists: true,\n      isMounted: false,\n      dotAxialSizePx: 1\n    };\n  },\n\n  computed: {\n    tooltipFormatHelper() {\n      if (this.mergeFormatter) {\n        return this.mergeFormatting(this.val[0], this.val[1]);\n      }\n\n      if (this.xformatter) {\n        if (this.val[0] === this.val[1]) return this.formatting(this.val[0]);\n        return this.formatting(this.val[0]) + \"-\" + this.formatting(this.val[1]);\n      }\n\n      if (this.val[0] === this.val[1]) return this.val[0];\n      return this.val[0] + \"-\" + this.val[1];\n    },\n\n    dotWidthVal() {\n      return this.dotWidth || this.dotSize;\n    },\n\n    dotHeightVal() {\n      return this.dotHeight || this.dotSize;\n    },\n\n    flowDirection() {\n      return `l-ad-slider--${this.direction + (this.reverse ? '-reverse' : '')}`;\n    },\n\n    tooltipMergedPosition() {\n      if (!this.isMounted) return {};\n      const tooltipDirection = this.tooltipDirection[0];\n\n      if (this.$refs.dot0) {\n        const style = {};\n        style[tooltipDirection] = `-${this.dotAxialSizePx / 2 - this.size / 2 + 9}px`;\n        style['left'] = `50%`;\n        return style;\n      }\n    },\n\n    tooltipDirection() {\n      const dir = this.tooltipDir || (this.direction === 'vertical' ? 'left' : 'top');\n\n      if (Array.isArray(dir)) {\n        return this.isRange ? dir : dir[1];\n      } else {\n        return this.isRange ? [dir, dir] : dir;\n      }\n    },\n\n    tooltipStatus() {\n      return this.tooltip === 'hover' && this.flag ? 'ad-slider-always' : this.tooltip ? `ad-slider-${this.tooltip}` : '';\n    },\n\n    tooltipClass() {\n      return [`ad-slider-tooltip-${this.tooltipDirection}`, 'ad-slider-tooltip'];\n    },\n\n    disabledArray() {\n      return Array.isArray(this.disabled) ? this.disabled : [this.disabled, this.disabled];\n    },\n\n    boolDisabled() {\n      return this.disabledArray.every(b => b === true);\n    },\n\n    isDisabled() {\n      return this.eventType === 'none' ? true : this.boolDisabled;\n    },\n\n    disabledClass() {\n      return this.boolDisabled ? 'l-ad-slider--disabled' : '';\n    },\n\n    stateClass() {\n      return {\n        'ad-slider-state-process-drag': this.processFlag,\n        'ad-slider-state-drag': this.flag && !this.processFlag && !this.keydownFlag,\n        'ad-slider-state-focus': this.focusFlag\n      };\n    },\n\n    isRange() {\n      return Array.isArray(this.value);\n    },\n\n    slider() {\n      return this.isRange ? [this.$refs.dot0, this.$refs.dot1] : [this.$refs.dot0];\n    },\n\n    minimum() {\n      return this.data ? 0 : this.min;\n    },\n\n    val: {\n      get() {\n        return this.data ? this.isRange ? [this.data[this.currentValue[0]], this.data[this.currentValue[1]]] : this.data[this.currentValue] : this.currentValue;\n      },\n\n      set(val) {\n        if (this.data) {\n          if (this.isRange) {\n            const index0 = this.data.indexOf(val[0]);\n            const index1 = this.data.indexOf(val[1]);\n\n            if (index0 > -1 && index1 > -1) {\n              this.currentValue = [index0, index1];\n            }\n          } else {\n            const index = this.data.indexOf(val);\n\n            if (index > -1) {\n              this.currentValue = index;\n            }\n          }\n        } else {\n          this.currentValue = val;\n        }\n      }\n\n    },\n\n    currentIndex() {\n      if (this.isRange) {\n        return this.data ? this.currentValue : [this.getIndexByValue(this.currentValue[0]), this.getIndexByValue(this.currentValue[1])];\n      } else {\n        return this.getIndexByValue(this.currentValue);\n      }\n    },\n\n    indexRange() {\n      if (this.isRange) {\n        return this.currentIndex;\n      } else {\n        return [0, this.currentIndex];\n      }\n    },\n\n    maximum() {\n      return this.data ? this.data.length - 1 : this.max;\n    },\n\n    multiple() {\n      const decimals = `${this.interval}`.split('.')[1];\n      return decimals ? Math.pow(10, decimals.length) : 1;\n    },\n\n    spacing() {\n      return this.data ? 1 : this.interval;\n    },\n\n    total() {\n      if (this.data) {\n        return this.data.length - 1;\n      } else if (Math.floor((this.maximum - this.minimum) * this.multiple) % (this.interval * this.multiple) !== 0) {\n        this.printError('Prop[interval] is illegal, Please make sure that the interval can be divisible');\n      }\n\n      return (this.maximum - this.minimum) / this.interval;\n    },\n\n    usableSize() {\n      return this.size - this.dotAxialSizePx;\n    },\n\n    gap() {\n      return this.usableSize / this.total;\n    },\n\n    position() {\n      if (this.isRange) {\n        return [(this.currentValue[0] - this.minimum) / this.spacing * this.gap + this.dotAxialSizePx / 2, (this.currentValue[1] - this.minimum) / this.spacing * this.gap + this.dotAxialSizePx / 2];\n      } else {\n        return (this.currentValue - this.minimum) / this.spacing * this.gap + this.dotAxialSizePx / 2;\n      }\n    },\n\n    isFixed() {\n      return this.fixed || this.minRange;\n    },\n\n    limit() {\n      if (this.isRange) {\n        if (this.isFixed) {\n          return [[this.dotAxialSizePx / 2, this.dotAxialSizePx / 2 + (this.total - this.fixedValue) * this.gap], [this.fixedValue * this.gap + this.dotAxialSizePx / 2, this.size - this.dotAxialSizePx / 2]];\n        } else {\n          return [[this.dotAxialSizePx / 2, this.position[1]], [this.position[0], this.size - this.dotAxialSizePx / 2]];\n        }\n      } else {\n        return [this.dotAxialSizePx / 2, this.size - this.dotAxialSizePx / 2];\n      }\n    },\n\n    valueLimit() {\n      return this.isRange ? this.isFixed ? [[this.minimum, this.maximum - this.fixedValue * (this.spacing * this.multiple) / this.multiple], [this.minimum + this.fixedValue * (this.spacing * this.multiple) / this.multiple, this.maximum]] : [[this.minimum, this.currentValue[1]], [this.currentValue[0], this.maximum]] : [this.minimum, this.maximum];\n    },\n\n    idleSlider() {\n      return this.currentSlider === 0 ? 1 : 0;\n    },\n\n    wrapStyles() {\n      let ret = this.direction === 'vertical' ? {\n        height: this.height\n      } : {\n        width: this.width\n      };\n\n      if (this.plusMinusButtons) {\n        ret[this.direction === \"vertical\" ? \"margin-top\" : \"margin-right\"] = \"0.5rem\";\n        ret[this.direction === \"vertical\" ? \"margin-bottom\" : \"margin-left\"] = \"0.5rem\";\n      }\n\n      return ret;\n    },\n\n    sliderStyles() {\n      if (Array.isArray(this.sliderStyle)) {\n        return this.isRange ? this.sliderStyle : this.sliderStyle[1];\n      } else if (typeof this.sliderStyle === 'function') {\n        return this.sliderStyle(this.val, this.currentIndex);\n      } else {\n        return this.isRange ? [this.sliderStyle, this.sliderStyle] : this.sliderStyle;\n      }\n    },\n\n    focusStyles() {\n      if (Array.isArray(this.focusStyle)) {\n        return this.isRange ? this.focusStyle : this.focusStyle[1];\n      } else if (typeof this.focusStyle === 'function') {\n        return this.focusStyle(this.val, this.currentIndex);\n      } else {\n        return this.isRange ? [this.focusStyle, this.focusStyle] : this.focusStyle;\n      }\n    },\n\n    disabledDotStyles() {\n      const disabledStyle = this.disabledDotStyle;\n\n      if (Array.isArray(disabledStyle)) {\n        return disabledStyle;\n      } else if (typeof disabledStyle === 'function') {\n        const style = disabledStyle(this.val, this.currentIndex);\n        return Array.isArray(style) ? style : [style, style];\n      } else if (disabledStyle) {\n        return [disabledStyle, disabledStyle];\n      } else {\n        return [{\n          backgroundColor: '#ccc'\n        }, {\n          backgroundColor: '#ccc'\n        }];\n      }\n    },\n\n    tooltipStyles() {\n      if (Array.isArray(this.tooltipStyle)) {\n        return this.isRange ? this.tooltipStyle : this.tooltipStyle[1];\n      } else if (typeof this.tooltipStyle === 'function') {\n        return this.tooltipStyle(this.val, this.currentIndex);\n      } else {\n        return this.isRange ? [this.tooltipStyle, this.tooltipStyle] : this.tooltipStyle;\n      }\n    },\n\n    elemStyles() {\n      return this.direction === 'vertical' ? {\n        width: this.width,\n        height: '100%',\n        position: \"relative\"\n      } : {\n        height: this.height,\n        position: \"relative\"\n      };\n    },\n\n    draggableStyle() {\n      return {\n        cursor: this.boolDisabled ? \"default\" : \"pointer\"\n      };\n    },\n\n    dotStyles() {\n      let ret = {\n        width: this.dotWidthVal,\n        height: this.dotHeightVal,\n        position: \"absolute\"\n      };\n\n      if (this.direction === \"vertical\") {\n        ret.left = \"50%\";\n      } else {\n        ret.top = \"50%\";\n      }\n\n      return ret;\n      /*\r\n      return this.direction === 'vertical' ? {\r\n        width: this.dotWidthVal,\r\n        height: this.dotHeightVal,\r\n        left: `${(-(this.dotWidthVal - this.width) / 2)}px`\r\n      } : {\r\n          width: `${this.dotWidthVal}px`,\r\n          height: `${this.dotHeightVal}px`,\r\n          top: `${(-(this.dotHeightVal - this.height) / 2)}px`\r\n        }*/\n    },\n\n    piecewiseDotStyle() {\n      return {\n        width: this.width,\n        height: this.height\n      };\n    },\n\n    piecewiseDotWrap() {\n      if (!this.piecewise && !this.piecewiseLabel) {\n        return false;\n      }\n\n      let arr = [];\n\n      for (let i = 0; i <= this.total; i++) {\n        const style = this.direction === 'vertical' ? {\n          bottom: `${this.gap * i - this.usableSize / 2}px`,\n          left: 0\n        } : {\n          left: `${this.gap * i - this.usableSize / 2}px`,\n          top: 0\n        };\n        const index = this.reverse ? this.total - i : i;\n        const label = this.data ? this.data[index] : this.spacing * index + this.min;\n\n        if (this.piecewiseFilter && !this.piecewiseFilter({\n          index,\n          label\n        })) {\n          continue;\n        }\n\n        arr.push({\n          style,\n          index,\n          label: this.xformatter ? this.formatting(label) : label\n        });\n      }\n\n      return arr;\n    }\n\n  },\n  watch: {\n    value(val) {\n      this.flag || this.setValue(val, true);\n    },\n\n    max(val) {\n      if (val < this.min) {\n        return this.printError('The maximum value can not be less than the minimum value.');\n      }\n\n      const resetVal = this.limitValue(this.val);\n      this.setValue(resetVal);\n      this.refresh();\n    },\n\n    min(val) {\n      if (val > this.max) {\n        return this.printError('The minimum value can not be greater than the maximum value.');\n      }\n\n      const resetVal = this.limitValue(this.val);\n      this.setValue(resetVal);\n      this.refresh();\n    },\n\n    show(bool) {\n      if (bool && !this.size) {\n        this.$nextTick(() => {\n          this.refresh();\n        });\n      }\n    },\n\n    fixed() {\n      this.computedFixedValue();\n    },\n\n    minRange() {\n      this.computedFixedValue();\n    },\n\n    reverse() {\n      this.$refs.process.style.cssText = '';\n      this.refresh();\n    }\n\n  },\n  methods: {\n    bindEvents() {\n      document.addEventListener('touchmove', this.moving, {\n        passive: false\n      });\n      document.addEventListener('touchend', this.moveEnd, {\n        passive: false\n      });\n      document.addEventListener('mousedown', this.blurSlider);\n      document.addEventListener('mousemove', this.moving);\n      document.addEventListener('mouseup', this.moveEnd);\n      document.addEventListener('mouseleave', this.moveEnd);\n      document.addEventListener('keydown', this.handleKeydown);\n      document.addEventListener('keyup', this.handleKeyup);\n      window.addEventListener('resize', this.refresh);\n\n      if (this.isRange && this.tooltipMerge) {\n        this.$refs.dot0.addEventListener('transitionend', this.handleOverlapTooltip);\n        this.$refs.dot1.addEventListener('transitionend', this.handleOverlapTooltip);\n      }\n    },\n\n    unbindEvents() {\n      document.removeEventListener('touchmove', this.moving);\n      document.removeEventListener('touchend', this.moveEnd);\n      document.removeEventListener('mousedown', this.blurSlider);\n      document.removeEventListener('mousemove', this.moving);\n      document.removeEventListener('mouseup', this.moveEnd);\n      document.removeEventListener('mouseleave', this.moveEnd);\n      document.removeEventListener('keydown', this.handleKeydown);\n      document.removeEventListener('keyup', this.handleKeyup);\n      window.removeEventListener('resize', this.refresh);\n\n      if (this.isRange && this.tooltipMerge) {\n        this.$refs.dot0.removeEventListener('transitionend', this.handleOverlapTooltip);\n        this.$refs.dot1.removeEventListener('transitionend', this.handleOverlapTooltip);\n      }\n    },\n\n    handleKeydown(e) {\n      if (!this.useKeyboard || !this.focusFlag) {\n        return false;\n      }\n\n      switch (e.keyCode) {\n        case 37:\n        case 40:\n          e.preventDefault();\n          this.keydownFlag = true;\n          this.flag = true;\n          this.changeFocusSlider(this.actionsKeyboard[0]);\n          break;\n\n        case 38:\n        case 39:\n          e.preventDefault();\n          this.keydownFlag = true;\n          this.flag = true;\n          this.changeFocusSlider(this.actionsKeyboard[1]);\n          break;\n      }\n    },\n\n    handleKeyup() {\n      if (this.keydownFlag) {\n        this.keydownFlag = false;\n        this.flag = false;\n      }\n    },\n\n    changeFocusSlider(fn) {\n      if (this.isRange) {\n        let arr = this.currentIndex.map((index, i) => {\n          if (i === this.focusSlider || this.fixed) {\n            const val = fn(index);\n            const range = this.fixed ? this.valueLimit[i] : [0, this.total];\n\n            if (val <= range[1] && val >= range[0]) {\n              return val;\n            }\n          }\n\n          return index;\n        });\n\n        if (arr[0] > arr[1]) {\n          this.focusSlider = this.focusSlider === 0 ? 1 : 0;\n          arr = arr.reverse();\n        }\n\n        this.setIndex(arr);\n      } else {\n        this.setIndex(fn(this.currentIndex));\n      }\n    },\n\n    blurSlider(e) {\n      const dot = this.isRange ? this.$refs[`dot${this.focusSlider}`] : this.$refs.dot;\n\n      if (!dot || dot === e.target || dot.contains(e.target)) {\n        return false;\n      }\n\n      this.focusFlag = false;\n    },\n\n    formatting(value) {\n      return typeof this.xformatter === 'string' ? this.xformatter.replace(/\\{value\\}/, value) : this.xformatter(value);\n    },\n\n    mergeFormatting(value1, value2) {\n      return typeof this.mergeFormatter === 'string' ? this.mergeFormatter.replace(/\\{(value1|value2)\\}/g, (_, key) => key === 'value1' ? value1 : value2) : this.mergeFormatter(value1, value2);\n    },\n\n    getPos(e) {\n      this.realTime && this.getStaticData();\n      var rect = this.$refs.elem.getBoundingClientRect();\n      return this.direction === 'vertical' ? this.reverse ? e.clientY - rect.top : this.size - (e.clientY - rect.top) : this.reverse ? this.size - (e.clientX - rect.left) : e.clientX - rect.left;\n    },\n\n    processClick(e) {\n      if (this.fixed) {\n        e.stopPropagation();\n      }\n    },\n\n    wrapClick(e) {\n      if (this.isDisabled || !this.clickable || this.processFlag || this.dragFlag) return false;\n      const pos = this.getPos(e);\n\n      if (this.isRange) {\n        if (this.disabledArray.every(b => b === false)) {\n          this.currentSlider = pos > (this.position[1] - this.position[0]) / 2 + this.position[0] ? 1 : 0;\n        } else if (this.disabledArray[0]) {\n          if (pos < this.position[0]) return false;\n          this.currentSlider = 1;\n        } else if (this.disabledArray[1]) {\n          if (pos > this.position[1]) return false;\n          this.currentSlider = 0;\n        }\n      }\n\n      if (this.disabledArray[this.currentSlider]) {\n        return false;\n      }\n\n      this.setValueOnPos(pos);\n\n      if (this.isRange && this.tooltipMerge) {\n        const timer = setInterval(() => this.handleOverlapTooltip(), 16.7);\n        setTimeout(() => window.clearInterval(timer), this.speed * 1000);\n      }\n    },\n\n    moveStart(e, index = 0, isProcess) {\n      if (this.disabledArray[index]) {\n        return false;\n      }\n\n      if (this.stopPropagation) {\n        e.stopPropagation();\n      }\n\n      if (this.isRange) {\n        this.currentSlider = index;\n\n        if (isProcess) {\n          if (!this.processDraggable) {\n            return false;\n          }\n\n          this.processFlag = true;\n          this.processSign = {\n            pos: this.position,\n            start: this.getPos(e.targetTouches && e.targetTouches[0] ? e.targetTouches[0] : e)\n          };\n        }\n\n        if (!this.enableCross && this.val[0] === this.val[1]) {\n          this.crossFlag = true;\n        }\n      }\n\n      if (!isProcess && this.useKeyboard) {\n        this.focusFlag = true;\n        this.focusSlider = index;\n      }\n\n      this.flag = true;\n      this.$emit('drag-start', this);\n    },\n\n    moving(e) {\n      if (this.stopPropagation) {\n        e.stopPropagation();\n      }\n\n      if (!this.flag) return false;\n      e.preventDefault();\n      if (e.targetTouches && e.targetTouches[0]) e = e.targetTouches[0];\n\n      if (this.processFlag) {\n        this.currentSlider = 0;\n        this.setValueOnPos(this.processSign.pos[0] + this.getPos(e) - this.processSign.start, true);\n        this.currentSlider = 1;\n        this.setValueOnPos(this.processSign.pos[1] + this.getPos(e) - this.processSign.start, true);\n      } else {\n        this.dragFlag = true;\n        this.setValueOnPos(this.getPos(e), true);\n      }\n\n      if (this.isRange && this.tooltipMerge) {\n        this.handleOverlapTooltip();\n      }\n    },\n\n    moveEnd(e) {\n      if (this.stopPropagation) {\n        e.stopPropagation();\n      }\n\n      if (this.flag) {\n        this.$emit('drag-end', this);\n\n        if (this.lazy && this.isDiff(this.val, this.value)) {\n          this.syncValue();\n        }\n      } else {\n        return false;\n      }\n\n      this.flag = false;\n      window.setTimeout(() => {\n        this.crossFlag = false;\n        this.dragFlag = false;\n        this.processFlag = false;\n      }, 0);\n      this.setPosition();\n    },\n\n    setValueOnPos(pos, isDrag) {\n      const range = this.isRange ? this.limit[this.currentSlider] : this.limit;\n      const valueRange = this.isRange ? this.valueLimit[this.currentSlider] : this.valueLimit;\n      const index = Math.round((pos - this.dotAxialSizePx / 2) / this.gap);\n\n      if (pos >= range[0] && pos <= range[1]) {\n        const v = this.getValueByIndex(index);\n        this.setTransform(pos);\n        this.setCurrentValue(v, isDrag);\n\n        if (this.isRange && (this.fixed || this.isLessRange(pos, index))) {\n          this.setTransform(pos + this.fixedValue * this.gap * (this.currentSlider === 0 ? 1 : -1), true);\n          this.setCurrentValue((v * this.multiple + this.fixedValue * this.spacing * this.multiple * (this.currentSlider === 0 ? 1 : -1)) / this.multiple, isDrag, true);\n        }\n      } else {\n        const anotherSlider = pos < range[0] ? 0 : 1;\n        const currentSlider = anotherSlider === 0 ? 1 : 0;\n        this.setTransform(range[anotherSlider]);\n        this.setCurrentValue(valueRange[anotherSlider]);\n\n        if (this.isRange && (this.fixed || this.isLessRange(pos, index))) {\n          this.setTransform(this.limit[this.idleSlider][anotherSlider], true);\n          this.setCurrentValue(this.valueLimit[this.idleSlider][anotherSlider], isDrag, true);\n        } else if (this.isRange && (this.enableCross || this.crossFlag) && !this.isFixed && !this.disabledArray[anotherSlider] && this.currentSlider === currentSlider) {\n          this.focusSlider = anotherSlider;\n          this.currentSlider = anotherSlider;\n        }\n      }\n\n      this.crossFlag = false;\n    },\n\n    isLessRange(pos, index) {\n      if (!this.isRange || !this.minRange && !this.maxRange) {\n        return false;\n      }\n\n      const diff = this.currentSlider === 0 ? this.currentIndex[1] - index : index - this.currentIndex[0];\n\n      if (this.minRange && diff <= this.minRange) {\n        this.fixedValue = this.minRange;\n        return true;\n      }\n\n      if (this.maxRange && diff >= this.maxRange) {\n        this.fixedValue = this.maxRange;\n        return true;\n      }\n\n      this.computedFixedValue();\n      return false;\n    },\n\n    isDiff(a, b) {\n      if (Object.prototype.toString.call(a) !== Object.prototype.toString.call(b)) {\n        return true;\n      } else if (Array.isArray(a) && a.length === b.length) {\n        return a.some((v, i) => v !== b[i]);\n      }\n\n      return a !== b;\n    },\n\n    setCurrentValue(val, isDrag, isIdleSlider) {\n      const slider = isIdleSlider ? this.idleSlider : this.currentSlider;\n      if (val < this.minimum || val > this.maximum) return false;\n\n      if (this.isRange) {\n        if (this.isDiff(this.currentValue[slider], val)) {\n          this.currentValue.splice(slider, 1, val);\n\n          if (!this.lazy || !this.flag) {\n            this.syncValue();\n          }\n        }\n      } else if (this.isDiff(this.currentValue, val)) {\n        this.currentValue = val;\n\n        if (!this.lazy || !this.flag) {\n          this.syncValue();\n        }\n      }\n\n      isDrag || this.setPosition();\n    },\n\n    getValueByIndex(index) {\n      return (this.spacing * this.multiple * index + this.minimum * this.multiple) / this.multiple;\n    },\n\n    getIndexByValue(value) {\n      return Math.round((value - this.minimum) * this.multiple) / (this.spacing * this.multiple);\n    },\n\n    setIndex(val) {\n      if (Array.isArray(val) && this.isRange) {\n        let value;\n\n        if (this.data) {\n          value = [this.data[val[0]], this.data[val[1]]];\n        } else {\n          value = [this.getValueByIndex(val[0]), this.getValueByIndex(val[1])];\n        }\n\n        this.setValue(value);\n      } else {\n        val = this.getValueByIndex(val);\n\n        if (this.isRange) {\n          this.currentSlider = val > (this.currentValue[1] - this.currentValue[0]) / 2 + this.currentValue[0] ? 1 : 0;\n        }\n\n        this.setCurrentValue(val);\n      }\n    },\n\n    increment(dir) {\n      if (this.boolDisabled) return;\n      const newVal = this.getValue() + dir * this.interval;\n      if (newVal > this.max || newVal < this.min) return;\n      this.setValue(newVal);\n    },\n\n    setValue(val, noCb, speed) {\n      if (this.isDiff(this.val, val)) {\n        const resetVal = this.limitValue(val);\n        this.val = this.isRange ? resetVal.concat() : resetVal;\n        this.computedFixedValue();\n        this.syncValue(noCb);\n      }\n\n      this.$nextTick(() => this.setPosition(speed));\n    },\n\n    computedFixedValue() {\n      if (!this.isFixed) {\n        this.fixedValue = 0;\n        return false;\n      }\n\n      this.fixedValue = Math.max(this.fixed ? this.currentIndex[1] - this.currentIndex[0] : 0, this.minRange || 0);\n    },\n\n    setPosition(speed) {\n      this.flag || this.setTransitionTime(speed === undefined ? this.speed : speed);\n\n      if (this.isRange) {\n        this.setTransform(this.position[0], this.currentSlider === 1);\n        this.setTransform(this.position[1], this.currentSlider === 0);\n      } else {\n        this.setTransform(this.position);\n      }\n\n      this.flag || this.setTransitionTime(0);\n    },\n\n    setTransform(val, isIdleSlider) {\n      const slider = isIdleSlider ? this.idleSlider : this.currentSlider;\n      const value = roundToDPR((this.direction === 'vertical' ? this.dotAxialSizePx / 2 - val : val - this.dotAxialSizePx / 2) * (this.reverse ? -1 : 1));\n      const translateValue = this.direction === 'vertical' ? `translate(-50%, ${value}px)` : `translate(${value}px, -50%)`;\n      const processSize = this.fixed ? `${this.fixedValue * this.gap}px` : `${slider === 0 ? this.position[1] - val : val - this.position[0]}px`;\n      const processPos = this.fixed ? `${slider === 0 ? val : val - this.fixedValue * this.gap}px` : `${slider === 0 ? val : this.position[0]}px`;\n      this.slider[slider].style.transform = translateValue;\n      this.slider[slider].style.WebkitTransform = translateValue;\n      this.slider[slider].style.msTransform = translateValue;\n\n      if (this.isRange) {\n        if (this.direction === 'vertical') {\n          this.$refs.process.style.height = processSize;\n          this.$refs.process.style[this.reverse ? 'top' : 'bottom'] = processPos;\n        } else {\n          this.$refs.process.style.width = processSize;\n          this.$refs.process.style[this.reverse ? 'right' : 'left'] = processPos;\n        }\n      } else {\n        if (this.direction === 'vertical') {\n          this.$refs.process.style.height = `${val}px`;\n          this.$refs.process.style[this.reverse ? 'top' : 'bottom'] = 0;\n        } else {\n          this.$refs.process.style.width = `${val}px`;\n          this.$refs.process.style[this.reverse ? 'right' : 'left'] = 0;\n        }\n      }\n    },\n\n    setTransitionTime(time) {\n      // In order to avoid browser merge style and modify together\n      time || this.$refs.process.offsetWidth;\n\n      for (let i = 0; i < this.slider.length; i++) {\n        this.slider[i].style.transitionDuration = `${time}s`;\n        this.slider[i].style.WebkitTransitionDuration = `${time}s`;\n      }\n\n      if (this.isRange) {\n        this.$refs.process.style.transitionDuration = `${time}s`;\n        this.$refs.process.style.WebkitTransitionDuration = `${time}s`;\n      } else {\n        this.$refs.process.style.transitionDuration = `${time}s`;\n        this.$refs.process.style.WebkitTransitionDuration = `${time}s`;\n      }\n    },\n\n    limitValue(val) {\n      if (this.data) {\n        return val;\n      }\n\n      const inRange = v => {\n        if (v < this.min) {\n          this.printError(`The value of the slider is ${val}, the minimum value is ${this.min}, the value of this slider can not be less than the minimum value`);\n          return this.min;\n        } else if (v > this.max) {\n          this.printError(`The value of the slider is ${val}, the maximum value is ${this.max}, the value of this slider can not be greater than the maximum value`);\n          return this.max;\n        }\n\n        return v;\n      };\n\n      if (this.isRange) {\n        return val.map(v => inRange(v));\n      } else {\n        return inRange(val);\n      }\n    },\n\n    isActive(index) {\n      return index >= this.indexRange[0] && index <= this.indexRange[1];\n    },\n\n    syncValue(noCb) {\n      let val = this.isRange ? this.val.concat() : this.val;\n      this.$emit('input', val);\n      this.keydownFlag && this.$emit('on-keypress', val);\n      noCb || this.$emit('callback', val);\n    },\n\n    getValue() {\n      return this.val;\n    },\n\n    getIndex() {\n      return this.currentIndex;\n    },\n\n    getStaticData() {\n      if (this.$refs.elem) {\n        this.size = this.direction === 'vertical' ? this.$refs.elem.offsetHeight : this.$refs.elem.offsetWidth;\n        this.dotAxialSizePx = this.direction === 'vertical' ? this.$refs.dot0.clientHeight : this.$refs.dot0.clientWidth;\n      }\n    },\n\n    refresh() {\n      if (this.$refs.elem) {\n        this.getStaticData();\n        this.computedFixedValue();\n        this.setPosition(0);\n      }\n    },\n\n    printError(msg) {\n      if (this.debug) {\n        console.error(`[VueSlider error]: ${msg}`);\n      }\n    },\n\n    handleOverlapTooltip() {\n      const isDirectionSame = this.tooltipDirection[0] === this.tooltipDirection[1];\n\n      if (this.isRange && isDirectionSame) {\n        const tooltip0 = this.reverse ? this.$refs.tooltip1 : this.$refs.tooltip0;\n        const tooltip1 = this.reverse ? this.$refs.tooltip0 : this.$refs.tooltip1;\n        const tooltip0Rect = tooltip0.getBoundingClientRect();\n        const tooltip1Rect = tooltip1.getBoundingClientRect();\n        const tooltip0Right = tooltip0Rect.right;\n        const tooltip1Left = tooltip1Rect.left;\n        const tooltip0Y = tooltip0Rect.top;\n        const tooltip1Y = tooltip1Rect.top + tooltip1Rect.height;\n        const horizontalOverlap = this.direction === 'horizontal' && tooltip0Right > tooltip1Left;\n        const verticalOverlap = this.direction === 'vertical' && tooltip1Y > tooltip0Y;\n\n        if (horizontalOverlap || verticalOverlap) {\n          this.handleDisplayMergedTooltip(true);\n        } else {\n          this.handleDisplayMergedTooltip(false);\n        }\n      }\n    },\n\n    handleDisplayMergedTooltip(show) {\n      const tooltip0 = this.$refs.tooltip0;\n      const tooltip1 = this.$refs.tooltip1;\n      const mergedTooltip = this.$refs.process.getElementsByClassName('vue-merged-tooltip')[0];\n\n      if (show) {\n        tooltip0.style.visibility = 'hidden';\n        tooltip1.style.visibility = 'hidden';\n        mergedTooltip.style.visibility = 'visible';\n      } else {\n        tooltip0.style.visibility = 'visible';\n        tooltip1.style.visibility = 'visible';\n        mergedTooltip.style.visibility = 'hidden';\n      }\n    },\n\n    dotContents() {\n      if (Notations.current.name === \"Blind\" || Theme.current().name === \"S9\") return \"\"; // Doesn't work if the slider needs to show more precision than integers,\n      // but I don't think we have any such sliders.\n\n      return this.valueInDot ? Math.round(this.getValue()) : '';\n    }\n\n  },\n\n  mounted() {\n    this.isComponentExists = true;\n\n    if (typeof window === 'undefined' || typeof document === 'undefined') {\n      return this.printError('window or document is undefined, can not be initialization.');\n    }\n\n    this.$nextTick(() => {\n      if (this.isComponentExists) {\n        this.getStaticData();\n        this.setValue(this.limitValue(this.value), true, this.startAnimation ? this.speed : 0);\n        this.bindEvents();\n\n        if (this.isRange && this.tooltipMerge && !this.startAnimation) {\n          this.$nextTick(() => {\n            this.handleOverlapTooltip();\n          });\n        }\n      }\n    });\n    this.isMounted = true;\n  },\n\n  beforeDestroy() {\n    this.isComponentExists = false;\n    this.unbindEvents();\n  }\n\n};","map":{"version":3,"sources":["SliderComponent.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport PlusMinusButton from \"@/components/PlusMinusButton\";\r\n\r\n/*\r\n* This is based on vue-slider-component\r\n* downloaded from https://github.com/NightCatSama/vue-slider-component\r\n* It's modified to support showing the slider value in the slider.\r\n*/\r\n/*\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2016 NightCatSama.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/\r\n\r\n// Unsharp text [#166](https://github.com/NightCatSama/vue-slider-component/issues/166)\r\nconst roundToDPR = (function () {\r\n  const r = typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1\r\n  return value => Math.round(value * r) / r\r\n})()\r\n\r\nexport default {\r\n  name: \"SliderComponent\",\r\n  components: {\r\n    PlusMinusButton\r\n  },\r\n  props: {\r\n    width: {\r\n      type: String,\r\n      default: 'auto'\r\n    },\r\n    height: {\r\n      type: String,\r\n      default: \"6px\"\r\n    },\r\n    data: {\r\n      type: Array,\r\n      default: null\r\n    },\r\n    dotSize: {\r\n      type: [String, Number],\r\n      default: \"16px\"\r\n    },\r\n    dotWidth: {\r\n      type: String,\r\n      required: false\r\n    },\r\n    dotHeight: {\r\n      type: String,\r\n      required: false\r\n    },\r\n    min: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    max: {\r\n      type: Number,\r\n      default: 100\r\n    },\r\n    interval: {\r\n      type: Number,\r\n      default: 1\r\n    },\r\n    show: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    disabled: {\r\n      type: [Boolean, Array],\r\n      default: false\r\n    },\r\n    piecewise: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    tooltip: {\r\n      type: [String, Boolean],\r\n      default: 'always'\r\n    },\r\n    eventType: {\r\n      type: String,\r\n      default: 'auto'\r\n    },\r\n    direction: {\r\n      type: String,\r\n      default: 'horizontal'\r\n    },\r\n    reverse: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    lazy: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    clickable: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    speed: {\r\n      type: Number,\r\n      default: 0.5\r\n    },\r\n    realTime: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    stopPropagation: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    value: {\r\n      type: [String, Number, Array, Object],\r\n      default: 0\r\n    },\r\n    piecewiseLabel: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    debug: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    fixed: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    minRange: {\r\n      type: Number\r\n    },\r\n    maxRange: {\r\n      type: Number\r\n    },\r\n    processDraggable: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    useKeyboard: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    actionsKeyboard: {\r\n      type: Array,\r\n      default() {\r\n        return [(i) => i - 1, (i) => i + 1]\r\n      }\r\n    },\r\n    piecewiseFilter: {\r\n      type: Function\r\n    },\r\n    tooltipMerge: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    startAnimation: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    enableCross: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    valueInDot: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    plusMinusButtons: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    sliderStyle: [Array, Object, Function],\r\n    focusStyle: [Array, Object, Function],\r\n    tooltipDir: [Array, String],\r\n    xformatter: [String, Function], // Global mixin defines formatter\r\n    mergeFormatter: [String, Function],\r\n    piecewiseStyle: Object,\r\n    disabledStyle: Object,\r\n    piecewiseActiveStyle: Object,\r\n    processStyle: Object,\r\n    processClass: String,\r\n    bgStyle: Object,\r\n    bgClass: String,\r\n    tooltipStyle: [Array, Object, Function],\r\n    disabledDotStyle: [Array, Object, Function],\r\n    labelStyle: Object,\r\n    labelActiveStyle: Object,\r\n    dotClass: [String, Array]\r\n  },\r\n  data() {\r\n    return {\r\n      flag: false,\r\n      dragFlag: false,\r\n      crossFlag: false,\r\n      keydownFlag: null,\r\n      focusFlag: false,\r\n      processFlag: false,\r\n      processSign: null,\r\n      size: 0,\r\n      fixedValue: 0,\r\n      focusSlider: 0,\r\n      currentValue: 0,\r\n      currentSlider: 0,\r\n      isComponentExists: true,\r\n      isMounted: false,\r\n      dotAxialSizePx: 1,\r\n    }\r\n  },\r\n  computed: {\r\n    tooltipFormatHelper() {\r\n      if (this.mergeFormatter) {\r\n        return this.mergeFormatting(this.val[0], this.val[1]);\r\n      }\r\n      if (this.xformatter) {\r\n        if (this.val[0] === this.val[1]) return this.formatting(this.val[0]);\r\n        return this.formatting(this.val[0]) + \"-\" + this.formatting(this.val[1]);\r\n      }\r\n      if (this.val[0] === this.val[1]) return this.val[0];\r\n      return this.val[0] + \"-\" + this.val[1];\r\n    },\r\n    dotWidthVal() {\r\n      return this.dotWidth || this.dotSize;\r\n    },\r\n    dotHeightVal() {\r\n      return this.dotHeight || this.dotSize;\r\n    },\r\n    flowDirection() {\r\n      return `l-ad-slider--${this.direction + (this.reverse ? '-reverse' : '')}`\r\n    },\r\n    tooltipMergedPosition() {\r\n      if (!this.isMounted) return {}\r\n      const tooltipDirection = this.tooltipDirection[0]\r\n      if (this.$refs.dot0) {\r\n        const style = {}\r\n        style[tooltipDirection] = `-${(this.dotAxialSizePx / 2) - (this.size / 2) + 9}px`\r\n        style['left'] = `50%`\r\n        return style\r\n      }\r\n    },\r\n    tooltipDirection() {\r\n      const dir = this.tooltipDir || (this.direction === 'vertical' ? 'left' : 'top')\r\n      if (Array.isArray(dir)) {\r\n        return this.isRange ? dir : dir[1]\r\n      } else {\r\n        return this.isRange ? [dir, dir] : dir\r\n      }\r\n    },\r\n    tooltipStatus() {\r\n      return this.tooltip === 'hover' && this.flag ? 'ad-slider-always' : this.tooltip ? `ad-slider-${this.tooltip}` : ''\r\n    },\r\n    tooltipClass() {\r\n      return [`ad-slider-tooltip-${this.tooltipDirection}`, 'ad-slider-tooltip']\r\n    },\r\n    disabledArray() {\r\n      return Array.isArray(this.disabled) ? this.disabled : [this.disabled, this.disabled]\r\n    },\r\n    boolDisabled() {\r\n      return this.disabledArray.every(b => b === true)\r\n    },\r\n    isDisabled() {\r\n      return this.eventType === 'none' ? true : this.boolDisabled\r\n    },\r\n    disabledClass() {\r\n      return this.boolDisabled ? 'l-ad-slider--disabled' : ''\r\n    },\r\n    stateClass() {\r\n      return {\r\n        'ad-slider-state-process-drag': this.processFlag,\r\n        'ad-slider-state-drag': this.flag && !this.processFlag && !this.keydownFlag,\r\n        'ad-slider-state-focus': this.focusFlag\r\n      }\r\n    },\r\n    isRange() {\r\n      return Array.isArray(this.value)\r\n    },\r\n    slider() {\r\n      return this.isRange ? [this.$refs.dot0, this.$refs.dot1] : [this.$refs.dot0]\r\n    },\r\n    minimum() {\r\n      return this.data ? 0 : this.min\r\n    },\r\n    val: {\r\n      get() {\r\n        return this.data ? (this.isRange ? [this.data[this.currentValue[0]], this.data[this.currentValue[1]]] : this.data[this.currentValue]) : this.currentValue\r\n      },\r\n      set(val) {\r\n        if (this.data) {\r\n          if (this.isRange) {\r\n            const index0 = this.data.indexOf(val[0])\r\n            const index1 = this.data.indexOf(val[1])\r\n            if (index0 > -1 && index1 > -1) {\r\n              this.currentValue = [index0, index1]\r\n            }\r\n          } else {\r\n            const index = this.data.indexOf(val)\r\n            if (index > -1) {\r\n              this.currentValue = index\r\n            }\r\n          }\r\n        } else {\r\n          this.currentValue = val\r\n        }\r\n      }\r\n    },\r\n    currentIndex() {\r\n      if (this.isRange) {\r\n        return this.data ? this.currentValue : [this.getIndexByValue(this.currentValue[0]), this.getIndexByValue(this.currentValue[1])]\r\n      } else {\r\n        return this.getIndexByValue(this.currentValue)\r\n      }\r\n    },\r\n    indexRange() {\r\n      if (this.isRange) {\r\n        return this.currentIndex\r\n      } else {\r\n        return [0, this.currentIndex]\r\n      }\r\n    },\r\n    maximum() {\r\n      return this.data ? (this.data.length - 1) : this.max\r\n    },\r\n    multiple() {\r\n      const decimals = `${this.interval}`.split('.')[1]\r\n      return decimals ? Math.pow(10, decimals.length) : 1\r\n    },\r\n    spacing() {\r\n      return this.data ? 1 : this.interval\r\n    },\r\n    total() {\r\n      if (this.data) {\r\n        return this.data.length - 1\r\n      } else if (Math.floor((this.maximum - this.minimum) * this.multiple) % (this.interval * this.multiple) !== 0) {\r\n        this.printError('Prop[interval] is illegal, Please make sure that the interval can be divisible')\r\n      }\r\n      return (this.maximum - this.minimum) / this.interval\r\n    },\r\n    usableSize() {\r\n      return this.size - this.dotAxialSizePx;\r\n    },\r\n    gap() {\r\n      return this.usableSize / this.total\r\n    },\r\n    position() {\r\n      if (this.isRange) {\r\n        return [(this.currentValue[0] - this.minimum) / this.spacing * this.gap + this.dotAxialSizePx / 2, (this.currentValue[1] - this.minimum) / this.spacing * this.gap + this.dotAxialSizePx / 2]\r\n      } else {\r\n        return ((this.currentValue - this.minimum) / this.spacing * this.gap + this.dotAxialSizePx / 2)\r\n      }\r\n    },\r\n    isFixed() {\r\n      return this.fixed || this.minRange\r\n    },\r\n    limit() {\r\n      if (this.isRange) {\r\n        if (this.isFixed) {\r\n          return [[this.dotAxialSizePx / 2, this.dotAxialSizePx / 2 + (this.total - this.fixedValue) * this.gap], [this.fixedValue * this.gap + this.dotAxialSizePx / 2, this.size - this.dotAxialSizePx / 2]]\r\n        } else {\r\n          return [[this.dotAxialSizePx / 2, this.position[1]], [this.position[0], this.size - this.dotAxialSizePx / 2]];\r\n        }\r\n      } else {\r\n        return [this.dotAxialSizePx / 2, this.size - this.dotAxialSizePx / 2];\r\n      }\r\n    },\r\n    valueLimit() {\r\n      return this.isRange ? this.isFixed ? [[this.minimum, this.maximum - (this.fixedValue * (this.spacing * this.multiple)) / this.multiple], [this.minimum + (this.fixedValue * (this.spacing * this.multiple)) / this.multiple, this.maximum]] : [[this.minimum, this.currentValue[1]], [this.currentValue[0], this.maximum]] : [this.minimum, this.maximum]\r\n    },\r\n    idleSlider() {\r\n      return this.currentSlider === 0 ? 1 : 0\r\n    },\r\n    wrapStyles() {\r\n      let ret = this.direction === 'vertical' ? {\r\n        height: this.height,\r\n      } : {\r\n        width: this.width,\r\n      }\r\n      if (this.plusMinusButtons) {\r\n        ret[this.direction === \"vertical\" ? \"margin-top\" : \"margin-right\"] = \"0.5rem\";\r\n        ret[this.direction === \"vertical\" ? \"margin-bottom\" : \"margin-left\"] = \"0.5rem\";\r\n      }\r\n      return ret;\r\n    },\r\n    sliderStyles() {\r\n      if (Array.isArray(this.sliderStyle)) {\r\n        return this.isRange ? this.sliderStyle : this.sliderStyle[1]\r\n      } else if (typeof this.sliderStyle === 'function') {\r\n        return this.sliderStyle(this.val, this.currentIndex)\r\n      } else {\r\n        return this.isRange ? [this.sliderStyle, this.sliderStyle] : this.sliderStyle\r\n      }\r\n    },\r\n    focusStyles() {\r\n      if (Array.isArray(this.focusStyle)) {\r\n        return this.isRange ? this.focusStyle : this.focusStyle[1]\r\n      } else if (typeof this.focusStyle === 'function') {\r\n        return this.focusStyle(this.val, this.currentIndex)\r\n      } else {\r\n        return this.isRange ? [this.focusStyle, this.focusStyle] : this.focusStyle\r\n      }\r\n    },\r\n    disabledDotStyles() {\r\n      const disabledStyle = this.disabledDotStyle\r\n      if (Array.isArray(disabledStyle)) {\r\n        return disabledStyle\r\n      } else if (typeof disabledStyle === 'function') {\r\n        const style = disabledStyle(this.val, this.currentIndex)\r\n        return Array.isArray(style) ? style : [style, style]\r\n      } else if (disabledStyle) {\r\n        return [disabledStyle, disabledStyle]\r\n      } else {\r\n        return [{\r\n          backgroundColor: '#ccc'\r\n        }, {\r\n          backgroundColor: '#ccc'\r\n        }]\r\n      }\r\n    },\r\n    tooltipStyles() {\r\n      if (Array.isArray(this.tooltipStyle)) {\r\n        return this.isRange ? this.tooltipStyle : this.tooltipStyle[1]\r\n      } else if (typeof this.tooltipStyle === 'function') {\r\n        return this.tooltipStyle(this.val, this.currentIndex)\r\n      } else {\r\n        return this.isRange ? [this.tooltipStyle, this.tooltipStyle] : this.tooltipStyle\r\n      }\r\n    },\r\n    elemStyles() {\r\n      return this.direction === 'vertical' ? {\r\n        width: this.width,\r\n        height: '100%',\r\n        position: \"relative\"\r\n      } : {\r\n        height: this.height,\r\n        position: \"relative\"\r\n      }\r\n    },\r\n    draggableStyle() {\r\n      return {\r\n        cursor: this.boolDisabled ? \"default\" : \"pointer\"\r\n      };\r\n    },\r\n    dotStyles() {\r\n      let ret = {\r\n        width: this.dotWidthVal,\r\n        height: this.dotHeightVal,\r\n        position: \"absolute\",\r\n      }\r\n      if (this.direction === \"vertical\") {\r\n        ret.left = \"50%\";\r\n      } else {\r\n        ret.top = \"50%\";\r\n      }\r\n      return ret;\r\n      /*\r\n      return this.direction === 'vertical' ? {\r\n        width: this.dotWidthVal,\r\n        height: this.dotHeightVal,\r\n        left: `${(-(this.dotWidthVal - this.width) / 2)}px`\r\n      } : {\r\n          width: `${this.dotWidthVal}px`,\r\n          height: `${this.dotHeightVal}px`,\r\n          top: `${(-(this.dotHeightVal - this.height) / 2)}px`\r\n        }*/\r\n    },\r\n    piecewiseDotStyle() {\r\n      return {\r\n        width: this.width,\r\n        height: this.height,\r\n      };\r\n    },\r\n    piecewiseDotWrap() {\r\n      if (!this.piecewise && !this.piecewiseLabel) {\r\n        return false\r\n      }\r\n      let arr = []\r\n      for (let i = 0; i <= this.total; i++) {\r\n        const style = this.direction === 'vertical' ? {\r\n          bottom: `${this.gap * i - this.usableSize / 2 }px`,\r\n          left: 0\r\n        } : {\r\n          left: `${this.gap * i - this.usableSize / 2 }px`,\r\n          top: 0\r\n        }\r\n        const index = this.reverse ? (this.total - i) : i\r\n        const label = this.data ? this.data[index] : (this.spacing * index) + this.min\r\n        if (this.piecewiseFilter && !this.piecewiseFilter({ index, label })) {\r\n          continue\r\n        }\r\n        arr.push({\r\n          style,\r\n          index,\r\n          label: this.xformatter ? this.formatting(label) : label\r\n        })\r\n      }\r\n      return arr\r\n    },\r\n  },\r\n  watch: {\r\n    value(val) {\r\n      this.flag || this.setValue(val, true)\r\n    },\r\n    max(val) {\r\n      if (val < this.min) {\r\n        return this.printError('The maximum value can not be less than the minimum value.')\r\n      }\r\n      const resetVal = this.limitValue(this.val)\r\n      this.setValue(resetVal)\r\n      this.refresh()\r\n    },\r\n    min(val) {\r\n      if (val > this.max) {\r\n        return this.printError('The minimum value can not be greater than the maximum value.')\r\n      }\r\n      const resetVal = this.limitValue(this.val)\r\n      this.setValue(resetVal)\r\n      this.refresh()\r\n    },\r\n    show(bool) {\r\n      if (bool && !this.size) {\r\n        this.$nextTick(() => {\r\n          this.refresh()\r\n        })\r\n      }\r\n    },\r\n    fixed() {\r\n      this.computedFixedValue()\r\n    },\r\n    minRange() {\r\n      this.computedFixedValue()\r\n    },\r\n    reverse() {\r\n      this.$refs.process.style.cssText = ''\r\n      this.refresh()\r\n    },\r\n  },\r\n  methods: {\r\n    bindEvents() {\r\n      document.addEventListener('touchmove', this.moving, { passive: false })\r\n      document.addEventListener('touchend', this.moveEnd, { passive: false })\r\n      document.addEventListener('mousedown', this.blurSlider)\r\n      document.addEventListener('mousemove', this.moving)\r\n      document.addEventListener('mouseup', this.moveEnd)\r\n      document.addEventListener('mouseleave', this.moveEnd)\r\n      document.addEventListener('keydown', this.handleKeydown)\r\n      document.addEventListener('keyup', this.handleKeyup)\r\n      window.addEventListener('resize', this.refresh)\r\n      if (this.isRange && this.tooltipMerge) {\r\n        this.$refs.dot0.addEventListener('transitionend', this.handleOverlapTooltip)\r\n        this.$refs.dot1.addEventListener('transitionend', this.handleOverlapTooltip)\r\n      }\r\n    },\r\n    unbindEvents() {\r\n      document.removeEventListener('touchmove', this.moving)\r\n      document.removeEventListener('touchend', this.moveEnd)\r\n      document.removeEventListener('mousedown', this.blurSlider)\r\n      document.removeEventListener('mousemove', this.moving)\r\n      document.removeEventListener('mouseup', this.moveEnd)\r\n      document.removeEventListener('mouseleave', this.moveEnd)\r\n      document.removeEventListener('keydown', this.handleKeydown)\r\n      document.removeEventListener('keyup', this.handleKeyup)\r\n      window.removeEventListener('resize', this.refresh)\r\n      if (this.isRange && this.tooltipMerge) {\r\n        this.$refs.dot0.removeEventListener('transitionend', this.handleOverlapTooltip)\r\n        this.$refs.dot1.removeEventListener('transitionend', this.handleOverlapTooltip)\r\n      }\r\n    },\r\n    handleKeydown(e) {\r\n      if (!this.useKeyboard || !this.focusFlag) {\r\n        return false\r\n      }\r\n      switch (e.keyCode) {\r\n        case 37:\r\n        case 40:\r\n          e.preventDefault()\r\n          this.keydownFlag = true\r\n          this.flag = true\r\n          this.changeFocusSlider(this.actionsKeyboard[0])\r\n          break\r\n        case 38:\r\n        case 39:\r\n          e.preventDefault()\r\n          this.keydownFlag = true\r\n          this.flag = true\r\n          this.changeFocusSlider(this.actionsKeyboard[1])\r\n          break\r\n      }\r\n    },\r\n    handleKeyup() {\r\n      if (this.keydownFlag) {\r\n        this.keydownFlag = false\r\n        this.flag = false\r\n      }\r\n    },\r\n    changeFocusSlider(fn) {\r\n      if (this.isRange) {\r\n        let arr = this.currentIndex.map((index, i) => {\r\n          if (i === this.focusSlider || this.fixed) {\r\n            const val = fn(index)\r\n            const range = this.fixed ? this.valueLimit[i] : [0, this.total]\r\n            if (val <= range[1] && val >= range[0]) {\r\n              return val\r\n            }\r\n          }\r\n          return index\r\n        })\r\n        if (arr[0] > arr[1]) {\r\n          this.focusSlider = this.focusSlider === 0 ? 1 : 0\r\n          arr = arr.reverse()\r\n        }\r\n        this.setIndex(arr)\r\n      } else {\r\n        this.setIndex(fn(this.currentIndex))\r\n      }\r\n    },\r\n    blurSlider(e) {\r\n      const dot = this.isRange ? this.$refs[`dot${this.focusSlider}`] : this.$refs.dot\r\n      if (!dot || dot === e.target || dot.contains(e.target)) {\r\n        return false\r\n      }\r\n      this.focusFlag = false\r\n    },\r\n    formatting(value) {\r\n      return typeof this.xformatter === 'string' ? this.xformatter.replace(/\\{value\\}/, value) : this.xformatter(value)\r\n    },\r\n    mergeFormatting(value1, value2) {\r\n      return typeof this.mergeFormatter === 'string' ? this.mergeFormatter.replace(/\\{(value1|value2)\\}/g, (_, key) => key === 'value1' ? value1 : value2) : this.mergeFormatter(value1, value2)\r\n    },\r\n    getPos(e) {\r\n      this.realTime && this.getStaticData()\r\n      var rect = this.$refs.elem.getBoundingClientRect();\r\n      return this.direction === 'vertical' ? (this.reverse ? (e.clientY - rect.top) : (this.size - (e.clientY - rect.top))) : (this.reverse ? (this.size - (e.clientX - rect.left)) : (e.clientX - rect.left))\r\n    },\r\n    processClick(e) {\r\n      if (this.fixed) {\r\n        e.stopPropagation()\r\n      }\r\n    },\r\n    wrapClick(e) {\r\n      if (this.isDisabled || !this.clickable || this.processFlag || this.dragFlag) return false\r\n      const pos = this.getPos(e)\r\n      if (this.isRange) {\r\n        if (this.disabledArray.every(b => b === false)) {\r\n          this.currentSlider = pos > ((this.position[1] - this.position[0]) / 2 + this.position[0]) ? 1 : 0\r\n        } else if (this.disabledArray[0]) {\r\n          if (pos < this.position[0]) return false\r\n          this.currentSlider = 1\r\n        } else if (this.disabledArray[1]) {\r\n          if (pos > this.position[1]) return false\r\n          this.currentSlider = 0\r\n        }\r\n      }\r\n      if (this.disabledArray[this.currentSlider]) {\r\n        return false\r\n      }\r\n      this.setValueOnPos(pos)\r\n      if (this.isRange && this.tooltipMerge) {\r\n        const timer = setInterval(() => this.handleOverlapTooltip(), 16.7)\r\n        setTimeout(() => window.clearInterval(timer), this.speed * 1000)\r\n      }\r\n    },\r\n    moveStart(e, index = 0, isProcess) {\r\n      if (this.disabledArray[index]) {\r\n        return false\r\n      }\r\n      if (this.stopPropagation) {\r\n        e.stopPropagation()\r\n      }\r\n      if (this.isRange) {\r\n        this.currentSlider = index\r\n        if (isProcess) {\r\n          if (!this.processDraggable) {\r\n            return false\r\n          }\r\n          this.processFlag = true\r\n          this.processSign = {\r\n            pos: this.position,\r\n            start: this.getPos((e.targetTouches && e.targetTouches[0]) ? e.targetTouches[0] : e)\r\n          }\r\n        }\r\n        if (!this.enableCross && this.val[0] === this.val[1]) {\r\n          this.crossFlag = true\r\n        }\r\n      }\r\n      if (!isProcess && this.useKeyboard) {\r\n        this.focusFlag = true\r\n        this.focusSlider = index\r\n      }\r\n      this.flag = true\r\n      this.$emit('drag-start', this)\r\n    },\r\n    moving(e) {\r\n      if (this.stopPropagation) {\r\n        e.stopPropagation()\r\n      }\r\n      if (!this.flag) return false\r\n      e.preventDefault()\r\n      if (e.targetTouches && e.targetTouches[0]) e = e.targetTouches[0]\r\n      if (this.processFlag) {\r\n        this.currentSlider = 0\r\n        this.setValueOnPos(this.processSign.pos[0] + this.getPos(e) - this.processSign.start, true)\r\n        this.currentSlider = 1\r\n        this.setValueOnPos(this.processSign.pos[1] + this.getPos(e) - this.processSign.start, true)\r\n      } else {\r\n        this.dragFlag = true\r\n        this.setValueOnPos(this.getPos(e), true)\r\n      }\r\n      if (this.isRange && this.tooltipMerge) {\r\n        this.handleOverlapTooltip()\r\n      }\r\n    },\r\n    moveEnd(e) {\r\n      if (this.stopPropagation) {\r\n        e.stopPropagation()\r\n      }\r\n      if (this.flag) {\r\n        this.$emit('drag-end', this)\r\n        if (this.lazy && this.isDiff(this.val, this.value)) {\r\n          this.syncValue()\r\n        }\r\n      } else {\r\n        return false\r\n      }\r\n      this.flag = false\r\n      window.setTimeout(() => {\r\n        this.crossFlag = false\r\n        this.dragFlag = false\r\n        this.processFlag = false\r\n      }, 0)\r\n      this.setPosition()\r\n    },\r\n    setValueOnPos(pos, isDrag) {\r\n      const range = this.isRange ? this.limit[this.currentSlider] : this.limit\r\n      const valueRange = this.isRange ? this.valueLimit[this.currentSlider] : this.valueLimit\r\n      const index = Math.round((pos - this.dotAxialSizePx / 2) / this.gap)\r\n      if (pos >= range[0] && pos <= range[1]) {\r\n        const v = this.getValueByIndex(index)\r\n        this.setTransform(pos)\r\n        this.setCurrentValue(v, isDrag)\r\n        if (this.isRange && (this.fixed || this.isLessRange(pos, index))) {\r\n          this.setTransform(pos + ((this.fixedValue * this.gap) * (this.currentSlider === 0 ? 1 : -1)), true)\r\n          this.setCurrentValue((v * this.multiple + (this.fixedValue * this.spacing * this.multiple * (this.currentSlider === 0 ? 1 : -1))) / this.multiple, isDrag, true)\r\n        }\r\n      } else {\r\n        const anotherSlider = pos < range[0] ? 0 : 1\r\n        const currentSlider = anotherSlider === 0 ? 1 : 0\r\n        this.setTransform(range[anotherSlider])\r\n        this.setCurrentValue(valueRange[anotherSlider])\r\n        if (this.isRange && (this.fixed || this.isLessRange(pos, index))) {\r\n          this.setTransform(this.limit[this.idleSlider][anotherSlider], true)\r\n          this.setCurrentValue(this.valueLimit[this.idleSlider][anotherSlider], isDrag, true)\r\n        } else if (this.isRange && (this.enableCross || this.crossFlag) && !this.isFixed && !this.disabledArray[anotherSlider] && this.currentSlider === currentSlider) {\r\n          this.focusSlider = anotherSlider\r\n          this.currentSlider = anotherSlider\r\n        }\r\n      }\r\n      this.crossFlag = false\r\n    },\r\n    isLessRange(pos, index) {\r\n      if (!this.isRange || (!this.minRange && !this.maxRange)) {\r\n        return false\r\n      }\r\n      const diff = this.currentSlider === 0 ? this.currentIndex[1] - index : index - this.currentIndex[0]\r\n      if (this.minRange && diff <= this.minRange) {\r\n        this.fixedValue = this.minRange\r\n        return true\r\n      }\r\n      if (this.maxRange && diff >= this.maxRange) {\r\n        this.fixedValue = this.maxRange\r\n        return true\r\n      }\r\n      this.computedFixedValue()\r\n      return false\r\n    },\r\n    isDiff(a, b) {\r\n      if (Object.prototype.toString.call(a) !== Object.prototype.toString.call(b)) {\r\n        return true\r\n      } else if (Array.isArray(a) && a.length === b.length) {\r\n        return a.some((v, i) => v !== b[i])\r\n      }\r\n      return a !== b\r\n    },\r\n    setCurrentValue(val, isDrag, isIdleSlider) {\r\n      const slider = isIdleSlider ? this.idleSlider : this.currentSlider\r\n      if (val < this.minimum || val > this.maximum) return false\r\n      if (this.isRange) {\r\n        if (this.isDiff(this.currentValue[slider], val)) {\r\n          this.currentValue.splice(slider, 1, val)\r\n          if (!this.lazy || !this.flag) {\r\n            this.syncValue()\r\n          }\r\n        }\r\n      } else if (this.isDiff(this.currentValue, val)) {\r\n        this.currentValue = val\r\n        if (!this.lazy || !this.flag) {\r\n          this.syncValue()\r\n        }\r\n      }\r\n      isDrag || this.setPosition()\r\n    },\r\n    getValueByIndex(index) {\r\n      return ((this.spacing * this.multiple) * index + (this.minimum * this.multiple)) / this.multiple\r\n    },\r\n    getIndexByValue(value) {\r\n      return Math.round((value - this.minimum) * this.multiple) / (this.spacing * this.multiple)\r\n    },\r\n    setIndex(val) {\r\n      if (Array.isArray(val) && this.isRange) {\r\n        let value\r\n        if (this.data) {\r\n          value = [this.data[val[0]], this.data[val[1]]]\r\n        } else {\r\n          value = [this.getValueByIndex(val[0]), this.getValueByIndex(val[1])]\r\n        }\r\n        this.setValue(value)\r\n      } else {\r\n        val = this.getValueByIndex(val)\r\n        if (this.isRange) {\r\n          this.currentSlider = val > ((this.currentValue[1] - this.currentValue[0]) / 2 + this.currentValue[0]) ? 1 : 0\r\n        }\r\n        this.setCurrentValue(val)\r\n      }\r\n    },\r\n    increment(dir) {\r\n      if (this.boolDisabled) return;\r\n      const newVal = this.getValue() + dir * this.interval;\r\n      if (newVal > this.max || newVal < this.min) return;\r\n      this.setValue(newVal);\r\n    },\r\n    setValue(val, noCb, speed) {\r\n      if (this.isDiff(this.val, val)) {\r\n        const resetVal = this.limitValue(val)\r\n        this.val = this.isRange ? resetVal.concat() : resetVal\r\n        this.computedFixedValue()\r\n        this.syncValue(noCb)\r\n      }\r\n      this.$nextTick(() => this.setPosition(speed))\r\n    },\r\n    computedFixedValue() {\r\n      if (!this.isFixed) {\r\n        this.fixedValue = 0\r\n        return false\r\n      }\r\n      this.fixedValue = Math.max(this.fixed ? this.currentIndex[1] - this.currentIndex[0] : 0, this.minRange || 0)\r\n    },\r\n    setPosition(speed) {\r\n      this.flag || this.setTransitionTime(speed === undefined ? this.speed : speed)\r\n      if (this.isRange) {\r\n        this.setTransform(this.position[0], this.currentSlider === 1)\r\n        this.setTransform(this.position[1], this.currentSlider === 0)\r\n      } else {\r\n        this.setTransform(this.position)\r\n      }\r\n      this.flag || this.setTransitionTime(0)\r\n    },\r\n    setTransform(val, isIdleSlider) {\r\n      const slider = isIdleSlider ? this.idleSlider : this.currentSlider\r\n      const value = roundToDPR((this.direction === 'vertical' ? ((this.dotAxialSizePx / 2) - val) : (val - (this.dotAxialSizePx / 2))) * (this.reverse ? -1 : 1))\r\n      const translateValue = this.direction === 'vertical' ? `translate(-50%, ${value}px)` : `translate(${value}px, -50%)`\r\n      const processSize = this.fixed ? `${this.fixedValue * this.gap}px` : `${slider === 0 ? this.position[1] - val : val - this.position[0]}px`\r\n      const processPos = this.fixed ? `${slider === 0 ? val : (val - this.fixedValue * this.gap)}px` : `${slider === 0 ? val : this.position[0]}px`\r\n      this.slider[slider].style.transform = translateValue\r\n      this.slider[slider].style.WebkitTransform = translateValue\r\n      this.slider[slider].style.msTransform = translateValue\r\n      if (this.isRange) {\r\n        if (this.direction === 'vertical') {\r\n          this.$refs.process.style.height = processSize\r\n          this.$refs.process.style[this.reverse ? 'top' : 'bottom'] = processPos\r\n        } else {\r\n          this.$refs.process.style.width = processSize\r\n          this.$refs.process.style[this.reverse ? 'right' : 'left'] = processPos\r\n        }\r\n      } else {\r\n        if (this.direction === 'vertical') {\r\n          this.$refs.process.style.height = `${val}px`\r\n          this.$refs.process.style[this.reverse ? 'top' : 'bottom'] = 0\r\n        } else {\r\n          this.$refs.process.style.width = `${val}px`\r\n          this.$refs.process.style[this.reverse ? 'right' : 'left'] = 0\r\n        }\r\n      }\r\n    },\r\n    setTransitionTime(time) {\r\n      // In order to avoid browser merge style and modify together\r\n      time || this.$refs.process.offsetWidth\r\n      for (let i = 0; i < this.slider.length; i++) {\r\n        this.slider[i].style.transitionDuration = `${time}s`\r\n        this.slider[i].style.WebkitTransitionDuration = `${time}s`\r\n      }\r\n      if (this.isRange) {\r\n        this.$refs.process.style.transitionDuration = `${time}s`\r\n        this.$refs.process.style.WebkitTransitionDuration = `${time}s`\r\n      } else {\r\n        this.$refs.process.style.transitionDuration = `${time}s`\r\n        this.$refs.process.style.WebkitTransitionDuration = `${time}s`\r\n      }\r\n    },\r\n    limitValue(val) {\r\n      if (this.data) {\r\n        return val\r\n      }\r\n      const inRange = (v) => {\r\n        if (v < this.min) {\r\n          this.printError(`The value of the slider is ${val}, the minimum value is ${this.min}, the value of this slider can not be less than the minimum value`)\r\n          return this.min\r\n        } else if (v > this.max) {\r\n          this.printError(`The value of the slider is ${val}, the maximum value is ${this.max}, the value of this slider can not be greater than the maximum value`)\r\n          return this.max\r\n        }\r\n        return v\r\n      }\r\n      if (this.isRange) {\r\n        return val.map((v) => inRange(v))\r\n      } else {\r\n        return inRange(val)\r\n      }\r\n    },\r\n    isActive(index) {\r\n      return index >= this.indexRange[0] && index <= this.indexRange[1]\r\n    },\r\n    syncValue(noCb) {\r\n      let val = this.isRange ? this.val.concat() : this.val\r\n      this.$emit('input', val)\r\n      this.keydownFlag && this.$emit('on-keypress', val)\r\n      noCb || this.$emit('callback', val)\r\n    },\r\n    getValue() {\r\n      return this.val\r\n    },\r\n    getIndex() {\r\n      return this.currentIndex\r\n    },\r\n    getStaticData() {\r\n      if (this.$refs.elem) {\r\n        this.size = this.direction === 'vertical' ? this.$refs.elem.offsetHeight : this.$refs.elem.offsetWidth\r\n        this.dotAxialSizePx = this.direction === 'vertical' ? this.$refs.dot0.clientHeight : this.$refs.dot0.clientWidth;\r\n      }\r\n    },\r\n    refresh() {\r\n      if (this.$refs.elem) {\r\n        this.getStaticData()\r\n        this.computedFixedValue()\r\n        this.setPosition(0)\r\n      }\r\n    },\r\n    printError(msg) {\r\n      if (this.debug) {\r\n        console.error(`[VueSlider error]: ${msg}`)\r\n      }\r\n    },\r\n    handleOverlapTooltip() {\r\n      const isDirectionSame = this.tooltipDirection[0] === this.tooltipDirection[1]\r\n      if (this.isRange && isDirectionSame) {\r\n        const tooltip0 = this.reverse ? this.$refs.tooltip1 : this.$refs.tooltip0\r\n        const tooltip1 = this.reverse ? this.$refs.tooltip0 : this.$refs.tooltip1\r\n        const tooltip0Rect = tooltip0.getBoundingClientRect()\r\n        const tooltip1Rect = tooltip1.getBoundingClientRect()\r\n        const tooltip0Right = tooltip0Rect.right\r\n        const tooltip1Left = tooltip1Rect.left\r\n        const tooltip0Y = tooltip0Rect.top\r\n        const tooltip1Y = tooltip1Rect.top + tooltip1Rect.height\r\n        const horizontalOverlap = this.direction === 'horizontal' && tooltip0Right > tooltip1Left\r\n        const verticalOverlap = this.direction === 'vertical' && tooltip1Y > tooltip0Y\r\n        if (horizontalOverlap || verticalOverlap) {\r\n          this.handleDisplayMergedTooltip(true)\r\n        } else {\r\n          this.handleDisplayMergedTooltip(false)\r\n        }\r\n      }\r\n    },\r\n    handleDisplayMergedTooltip(show) {\r\n      const tooltip0 = this.$refs.tooltip0\r\n      const tooltip1 = this.$refs.tooltip1\r\n      const mergedTooltip = this.$refs.process.getElementsByClassName('vue-merged-tooltip')[0]\r\n      if (show) {\r\n        tooltip0.style.visibility = 'hidden'\r\n        tooltip1.style.visibility = 'hidden'\r\n        mergedTooltip.style.visibility = 'visible'\r\n      } else {\r\n        tooltip0.style.visibility = 'visible'\r\n        tooltip1.style.visibility = 'visible'\r\n        mergedTooltip.style.visibility = 'hidden'\r\n      }\r\n    },\r\n    dotContents() {\r\n      if (Notations.current.name === \"Blind\" || Theme.current().name === \"S9\" ) return \"\";\r\n      // Doesn't work if the slider needs to show more precision than integers,\r\n      // but I don't think we have any such sliders.\r\n      return this.valueInDot ? Math.round(this.getValue()) : '';\r\n    },\r\n  },\r\n  mounted() {\r\n    this.isComponentExists = true\r\n    if (typeof window === 'undefined' || typeof document === 'undefined') {\r\n      return this.printError('window or document is undefined, can not be initialization.')\r\n    }\r\n    this.$nextTick(() => {\r\n      if (this.isComponentExists) {\r\n        this.getStaticData()\r\n        this.setValue(this.limitValue(this.value), true, this.startAnimation ? this.speed : 0)\r\n        this.bindEvents()\r\n        if (this.isRange && this.tooltipMerge && !this.startAnimation) {\r\n          this.$nextTick(() => {\r\n            this.handleOverlapTooltip()\r\n          })\r\n        }\r\n      }\r\n    })\r\n    this.isMounted = true\r\n  },\r\n  beforeDestroy() {\r\n    this.isComponentExists = false\r\n    this.unbindEvents()\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div :class=\"['l-ad-slider', flowDirection, disabledClass, { 'l-ad-slider--has-label': piecewiseLabel }]\"\r\n       v-show=\"show\">\r\n    <PlusMinusButton v-if=\"plusMinusButtons\" type=\"minus\" @click=\"increment(-1)\"/>\r\n    <div ref=\"wrap\"\r\n         :class=\"['l-ad-slider__wrap', stateClass]\"\r\n         :style=\"[wrapStyles, boolDisabled ? disabledStyle : null]\"\r\n         @click=\"wrapClick\">\r\n      <div ref=\"elem\" aria-hidden=\"true\" :class=\"['l-ad-slider__bg', 'c-ad-slider__bg', bgClass]\"\r\n        :style=\"[elemStyles, bgStyle, draggableStyle]\"\r\n        @mousedown=\"moveStart($event, 0, true)\"\r\n        @touchstart=\"moveStart($event, 0, true)\"\r\n      >\r\n        <template v-if=\"isRange\">\r\n          <div\r\n            ref=\"dot0\"\r\n            key=\"dot0\"\r\n            :class=\"[tooltipStatus, 'l-ad-slider__dot', 'c-ad-slider__dot',\r\n            {\r\n              'l-ad-slider__dot--focus': focusFlag && focusSlider === 0,\r\n              'l-ad-slider__dot--dragging': flag && currentSlider === 0,\r\n              'l-ad-slider__dot--disabled': !boolDisabled && disabledArray[0]\r\n            }\r\n          ]\"\r\n            :style=\"dotStyles\"\r\n            @mousedown=\"moveStart\"\r\n            @touchstart=\"moveStart\"\r\n          >\r\n            <div\r\n              :class=\"['l-ad-slider__dot-handle', 'c-ad-slider__dot-handle', dotClass]\"\r\n              :style=\"[\r\n              (!boolDisabled && disabledArray[0])\r\n              ? disabledDotStyles[0]\r\n              : null,\r\n              sliderStyles[0],\r\n              focusFlag && focusSlider === 0 ? focusStyles[0]: null\r\n            ]\"\r\n            ></div>\r\n            <div ref=\"tooltip0\" :class=\"['ad-slider-tooltip-' + tooltipDirection[0], 'ad-slider-tooltip-wrap']\">\r\n              <span class=\"ad-slider-tooltip\" :style=\"tooltipStyles[0]\">{{ xformatter ? formatting(val[0]) : val[0] }}</span>\r\n            </div>\r\n          </div>\r\n          <div\r\n            ref=\"dot1\"\r\n            key=\"dot1\"\r\n            :class=\"[tooltipStatus, 'l-ad-slider__dot', 'c-ad-slider__dot',\r\n            {\r\n              'l-ad-slider__dot--focus': focusFlag && focusSlider === 1,\r\n              'l-ad-slider__dot--dragging': flag && currentSlider === 1,\r\n              'l-ad-slider__dot--disabled': !boolDisabled && disabledArray[1]\r\n            }\r\n          ]\"\r\n            :style=\"dotStyles\"\r\n            @mousedown=\"moveStart($event, 1)\"\r\n            @touchstart=\"moveStart($event, 1)\"\r\n          >\r\n            <div\r\n              :class=\"['l-ad-slider__dot-handle', 'c-ad-slider__dot-handle', dotClass]\"\r\n              :style=\"[\r\n              (!boolDisabled && disabledArray[1])\r\n              ? disabledDotStyles[1]\r\n              : null,\r\n              sliderStyles[1],\r\n              focusFlag && focusSlider === 1 ? focusStyles[1]: null\r\n            ]\"\r\n            ></div>\r\n            <div ref=\"tooltip1\" :class=\"['ad-slider-tooltip-' + tooltipDirection[1], 'ad-slider-tooltip-wrap']\">\r\n              <span class=\"ad-slider-tooltip\" :style=\"tooltipStyles[1]\">{{ xformatter ? formatting(val[1]) : val[1] }}</span>\r\n            </div>\r\n          </div>\r\n        </template>\r\n        <template v-else>\r\n          <div\r\n            ref=\"dot0\"\r\n            key=\"dot0\"\r\n            :class=\"[tooltipStatus, 'l-ad-slider__dot', 'c-ad-slider__dot',\r\n            {\r\n              'l-ad-slider__dot--focus': focusFlag && focusSlider === 0,\r\n              'l-ad-slider__dot--dragging': flag && currentSlider === 0\r\n            }\r\n          ]\"\r\n            :style=\"dotStyles\"\r\n            @mousedown=\"moveStart\"\r\n            @touchstart=\"moveStart\"\r\n          >\r\n            <div :class=\"['l-ad-slider__dot-handle', 'c-ad-slider__dot-handle', dotClass]\"\r\n                 :style=\"[sliderStyles, focusFlag && focusSlider === 0 ? focusStyles : null]\">\r\n              {{dotContents(0)}}\r\n            </div>\r\n            <div :class=\"['ad-slider-tooltip-' + tooltipDirection, 'ad-slider-tooltip-wrap']\">\r\n              <span class=\"ad-slider-tooltip\" :style=\"tooltipStyles\">{{ xformatter ? formatting(val) : val }}</span>\r\n            </div>\r\n          </div>\r\n        </template>\r\n        <ul class=\"ad-slider-piecewise\">\r\n          <li\r\n            v-for=\"(piecewiseObj, index) in piecewiseDotWrap\"\r\n            class=\"ad-slider-piecewise-item\"\r\n            :style=\"[piecewiseDotStyle, piecewiseObj.style]\"\r\n            :key=\"index\"\r\n          >\r\n            <span\r\n              v-if=\"piecewise\"\r\n              class=\"ad-slider-piecewise-dot\"\r\n              :style=\"[ piecewiseStyle, isActive(piecewiseObj.index) ? piecewiseActiveStyle : null ]\"\r\n            ></span>\r\n\r\n            <span\r\n              v-if=\"piecewiseLabel\"\r\n              class=\"ad-slider-piecewise-label\"\r\n              :style=\"[ labelStyle, isActive(piecewiseObj.index) ? labelActiveStyle : null ]\"\r\n            >\r\n              {{ piecewiseObj.label }}\r\n            </span>\r\n          </li>\r\n        </ul>\r\n        <div\r\n          ref=\"process\"\r\n          :class=\"['l-ad-slider__process', 'c-ad-slider__process', { 'ad-slider-process-draggable': isRange && processDraggable }, processClass]\"\r\n          :style=\"[elemStyles, bgStyle, draggableStyle]\"\r\n          @click=\"processClick\"\r\n        >\r\n          <div\r\n            ref=\"mergedTooltip\"\r\n            :class=\"['vue-merged-tooltip', 'ad-slider-tooltip-' + tooltipDirection[0], 'ad-slider-tooltip-wrap']\"\r\n            :style=\"tooltipMergedPosition\"\r\n          >\r\n            <span class=\"ad-slider-tooltip\" :style=\"tooltipStyles\">\r\n              {{ tooltipFormatHelper }}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <PlusMinusButton v-if=\"plusMinusButtons\" type=\"plus\" @click=\"increment(1)\"/>\r\n  </div>\r\n</template>\r\n"],"sourceRoot":"src/components"},"metadata":{},"sourceType":"module"}