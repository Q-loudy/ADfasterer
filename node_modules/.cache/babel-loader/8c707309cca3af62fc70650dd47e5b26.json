{"ast":null,"code":"import \"core-js/modules/es.symbol.description.js\";\nexport default {\n  name: \"TypeSacrifice\",\n  props: {\n    type: {\n      type: String,\n      required: true\n    },\n    hasDragover: {\n      type: Boolean,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      amount: 0,\n      effectValue: 0,\n      isColored: true,\n      willSacrifice: false\n    };\n  },\n\n  computed: {\n    typeConfig() {\n      return GlyphTypes[this.type];\n    },\n\n    sacConfig() {\n      return GlyphSacrifice[this.type].config;\n    },\n\n    style() {\n      if (!this.isColored) return {};\n      const color = GlyphAppearanceHandler.getBorderColor(this.type);\n      const animateReality = this.typeConfig.id === \"reality\" && !player.reality.glyphs.cosmetics.colorMap.reality;\n      return {\n        color,\n        \"text-shadow\": `-1px 1px 1px var(--color-text-base), 1px 1px 1px var(--color-text-base),\n                            -1px -1px 1px var(--color-text-base), 1px -1px 1px var(--color-text-base),\n                            0 0 3px ${color}`,\n        animation: animateReality ? \"a-reality-glyph-description-cycle 10s infinite\" : undefined\n      };\n    },\n\n    symbol() {\n      return CosmeticGlyphTypes[this.type].currentSymbol.symbol;\n    },\n\n    formatAmount() {\n      return format(this.amount, 2, 2);\n    },\n\n    description() {\n      return this.sacConfig.description(this.effectValue);\n    },\n\n    newDescription() {\n      return this.sacConfig.description(this.sacConfig.effect(this.currentSacrifice.sacrificeValue));\n    },\n\n    currentSacrifice() {\n      const viewModel = this.$viewModel.tabs.reality;\n      return viewModel.mouseoverGlyphInfo.type === \"\" ? viewModel.draggingGlyphInfo : viewModel.mouseoverGlyphInfo;\n    },\n\n    showNewSacrifice() {\n      const matchType = this.currentSacrifice.type === this.type;\n      const validSac = this.willSacrifice && this.currentSacrifice.inInventory;\n      const keybindActive = ui.view.shiftDown;\n      return matchType && (this.hasDragover || keybindActive && validSac);\n    },\n\n    formatNewAmount() {\n      return format(this.currentSacrifice.sacrificeValue, 2, 2);\n    },\n\n    formatTotalAmount() {\n      return format(this.amount + this.currentSacrifice.sacrificeValue, 2, 2);\n    }\n\n  },\n\n  created() {\n    this.on$(GAME_EVENT.GLYPH_VISUAL_CHANGE, () => {\n      this.$recompute(\"style\");\n    });\n  },\n\n  methods: {\n    update() {\n      this.amount = player.reality.glyphs.sac[this.type];\n      this.effectValue = GlyphSacrifice[this.type].effectValue;\n      this.isColored = player.options.glyphTextColors;\n      this.willSacrifice = AutoGlyphProcessor.sacMode === AUTO_GLYPH_REJECT.SACRIFICE || AutoGlyphProcessor.sacMode === AUTO_GLYPH_REJECT.REFINE_TO_CAP && this.currentSacrifice.refineValue === 0;\n    }\n\n  }\n};","map":{"version":3,"sources":["TypeSacrifice.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nexport default {\r\n  name: \"TypeSacrifice\",\r\n  props: {\r\n    type: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    hasDragover: {\r\n      type: Boolean,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      amount: 0,\r\n      effectValue: 0,\r\n      isColored: true,\r\n      willSacrifice: false,\r\n    };\r\n  },\r\n  computed: {\r\n    typeConfig() {\r\n      return GlyphTypes[this.type];\r\n    },\r\n    sacConfig() {\r\n      return GlyphSacrifice[this.type].config;\r\n    },\r\n    style() {\r\n      if (!this.isColored) return { };\r\n      const color = GlyphAppearanceHandler.getBorderColor(this.type);\r\n      const animateReality = this.typeConfig.id === \"reality\" && !player.reality.glyphs.cosmetics.colorMap.reality;\r\n      return {\r\n        color,\r\n        \"text-shadow\": `-1px 1px 1px var(--color-text-base), 1px 1px 1px var(--color-text-base),\r\n                            -1px -1px 1px var(--color-text-base), 1px -1px 1px var(--color-text-base),\r\n                            0 0 3px ${color}`,\r\n        animation: animateReality ? \"a-reality-glyph-description-cycle 10s infinite\" : undefined,\r\n      };\r\n    },\r\n    symbol() {\r\n      return CosmeticGlyphTypes[this.type].currentSymbol.symbol;\r\n    },\r\n    formatAmount() {\r\n      return format(this.amount, 2, 2);\r\n    },\r\n    description() {\r\n      return this.sacConfig.description(this.effectValue);\r\n    },\r\n    newDescription() {\r\n      return this.sacConfig.description(this.sacConfig.effect(this.currentSacrifice.sacrificeValue));\r\n    },\r\n    currentSacrifice() {\r\n      const viewModel = this.$viewModel.tabs.reality;\r\n      return viewModel.mouseoverGlyphInfo.type === \"\"\r\n        ? viewModel.draggingGlyphInfo\r\n        : viewModel.mouseoverGlyphInfo;\r\n    },\r\n    showNewSacrifice() {\r\n      const matchType = this.currentSacrifice.type === this.type;\r\n      const validSac = this.willSacrifice && this.currentSacrifice.inInventory;\r\n      const keybindActive = ui.view.shiftDown;\r\n      return matchType && (this.hasDragover || (keybindActive && validSac));\r\n    },\r\n    formatNewAmount() {\r\n      return format(this.currentSacrifice.sacrificeValue, 2, 2);\r\n    },\r\n    formatTotalAmount() {\r\n      return format(this.amount + this.currentSacrifice.sacrificeValue, 2, 2);\r\n    },\r\n  },\r\n  created() {\r\n    this.on$(GAME_EVENT.GLYPH_VISUAL_CHANGE, () => {\r\n      this.$recompute(\"style\");\r\n    });\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.amount = player.reality.glyphs.sac[this.type];\r\n      this.effectValue = GlyphSacrifice[this.type].effectValue;\r\n      this.isColored = player.options.glyphTextColors;\r\n      this.willSacrifice = AutoGlyphProcessor.sacMode === AUTO_GLYPH_REJECT.SACRIFICE ||\r\n        (AutoGlyphProcessor.sacMode === AUTO_GLYPH_REJECT.REFINE_TO_CAP &&\r\n          this.currentSacrifice.refineValue === 0);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    v-if=\"amount > 0\"\r\n    :style=\"style\"\r\n  >\r\n    <div>\r\n      <div class=\"l-sacrificed-glyphs__type-symbol c-sacrificed-glyphs__type-symbol\">\r\n        {{ symbol }}\r\n      </div>\r\n      <div class=\"l-sacrificed-glyphs__type-amount c-sacrificed-glyphs__type-amount\">\r\n        {{ formatAmount }}\r\n        <span\r\n          v-if=\"showNewSacrifice\"\r\n          class=\"c-sacrificed-glyphs__type-new-amount\"\r\n        >\r\n          + {{ formatNewAmount }} âžœ {{ formatTotalAmount }}\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <span\r\n      v-if=\"showNewSacrifice\"\r\n      class=\"c-sacrificed-glyphs__type-new-amount\"\r\n    >\r\n      {{ newDescription }}\r\n    </span>\r\n    <span v-else>\r\n      {{ description }}\r\n    </span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-sacrificed-glyphs__type-symbol {\r\n  margin-right: 0.7rem;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/glyphs"},"metadata":{},"sourceType":"module"}