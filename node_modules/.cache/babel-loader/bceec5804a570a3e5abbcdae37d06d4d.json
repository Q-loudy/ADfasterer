{"ast":null,"code":"import GlyphCustomizationSingleType from \"@/components/modals/options/glyph-appearance/GlyphCustomizationSingleType\";\nimport ModalWrapperOptions from \"@/components/modals/options/ModalWrapperOptions\";\nimport PrimaryButton from \"@/components/PrimaryButton\";\nexport default {\n  name: \"SingleGlyphAppearanceModal\",\n  components: {\n    ModalWrapperOptions,\n    GlyphCustomizationSingleType,\n    PrimaryButton\n  },\n  props: {\n    glyphId: {\n      type: Number,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      // This is here to force a re-render if the appearance is set to the default values\n      defaultKeySwap: false\n    };\n  },\n\n  computed: {\n    glyphType() {\n      return Glyphs.findById(this.glyphId).type;\n    },\n\n    cosmeticTypes() {\n      return GlyphAppearanceHandler.availableTypes;\n    },\n\n    glyph() {\n      return Glyphs.findById(this.glyphId);\n    }\n\n  },\n\n  created() {\n    // This force-closes the modal only if another glyph is dragged into the panel\n    EventHub.logic.on(GAME_EVENT.GLYPH_VISUAL_CHANGE, () => {\n      this.$recompute(\"glyph\");\n      if (!this.defaultKeySwap) this.emitClose();\n    });\n  },\n\n  methods: {\n    update() {\n      this.defaultKeySwap = true;\n    },\n\n    setType(type) {\n      if (type && this.glyph.fixedCosmetic) return;\n      this.glyph.color = undefined;\n      this.glyph.symbol = undefined;\n      if (this.glyph.fixedCosmetic) this.glyph.cosmetic = this.glyph.fixedCosmetic;else this.glyph.cosmetic = type;\n      this.defaultKeySwap = false;\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\n    },\n\n    cosmeticTypeClass(type) {\n      return {\n        \"o-primary-btn--subtab-option\": true,\n        \"o-active-type\": type === this.glyph.cosmetic\n      };\n    }\n\n  }\n};","map":{"version":3,"sources":["SingleGlyphAppearanceModal.vue"],"names":[],"mappings":"AACA,OAAA,4BAAA,MAAA,2EAAA;AACA,OAAA,mBAAA,MAAA,iDAAA;AACA,OAAA,aAAA,MAAA,4BAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,4BADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,mBADA;AAEA,IAAA,4BAFA;AAGA,IAAA;AAHA,GAFA;AAOA,EAAA,KAAA,EAAA;AACA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GAPA;;AAaA,EAAA,IAAA,GAAA;AACA,WAAA;AACA;AACA,MAAA,cAAA,EAAA;AAFA,KAAA;AAIA,GAlBA;;AAmBA,EAAA,QAAA,EAAA;AACA,IAAA,SAAA,GAAA;AACA,aAAA,MAAA,CAAA,QAAA,CAAA,KAAA,OAAA,EAAA,IAAA;AACA,KAHA;;AAIA,IAAA,aAAA,GAAA;AACA,aAAA,sBAAA,CAAA,cAAA;AACA,KANA;;AAOA,IAAA,KAAA,GAAA;AACA,aAAA,MAAA,CAAA,QAAA,CAAA,KAAA,OAAA,CAAA;AACA;;AATA,GAnBA;;AA8BA,EAAA,OAAA,GAAA;AACA;AACA,IAAA,QAAA,CAAA,KAAA,CAAA,EAAA,CAAA,UAAA,CAAA,mBAAA,EAAA,MAAA;AACA,WAAA,UAAA,CAAA,OAAA;AACA,UAAA,CAAA,KAAA,cAAA,EAAA,KAAA,SAAA;AACA,KAHA;AAIA,GApCA;;AAqCA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,cAAA,GAAA,IAAA;AACA,KAHA;;AAIA,IAAA,OAAA,CAAA,IAAA,EAAA;AACA,UAAA,IAAA,IAAA,KAAA,KAAA,CAAA,aAAA,EAAA;AACA,WAAA,KAAA,CAAA,KAAA,GAAA,SAAA;AACA,WAAA,KAAA,CAAA,MAAA,GAAA,SAAA;AACA,UAAA,KAAA,KAAA,CAAA,aAAA,EAAA,KAAA,KAAA,CAAA,QAAA,GAAA,KAAA,KAAA,CAAA,aAAA,CAAA,KACA,KAAA,KAAA,CAAA,QAAA,GAAA,IAAA;AACA,WAAA,cAAA,GAAA,KAAA;AACA,MAAA,QAAA,CAAA,QAAA,CAAA,UAAA,CAAA,mBAAA;AACA,KAZA;;AAaA,IAAA,iBAAA,CAAA,IAAA,EAAA;AACA,aAAA;AACA,wCAAA,IADA;AAEA,yBAAA,IAAA,KAAA,KAAA,KAAA,CAAA;AAFA,OAAA;AAIA;;AAlBA;AArCA,CAAA","sourcesContent":["<script>\r\nimport GlyphCustomizationSingleType from \"@/components/modals/options/glyph-appearance/GlyphCustomizationSingleType\";\r\nimport ModalWrapperOptions from \"@/components/modals/options/ModalWrapperOptions\";\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\n\r\nexport default {\r\n  name: \"SingleGlyphAppearanceModal\",\r\n  components: {\r\n    ModalWrapperOptions,\r\n    GlyphCustomizationSingleType,\r\n    PrimaryButton\r\n  },\r\n  props: {\r\n    glyphId: {\r\n      type: Number,\r\n      required: true,\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      // This is here to force a re-render if the appearance is set to the default values\r\n      defaultKeySwap: false,\r\n    };\r\n  },\r\n  computed: {\r\n    glyphType() {\r\n      return Glyphs.findById(this.glyphId).type;\r\n    },\r\n    cosmeticTypes() {\r\n      return GlyphAppearanceHandler.availableTypes;\r\n    },\r\n    glyph() {\r\n      return Glyphs.findById(this.glyphId);\r\n    }\r\n  },\r\n  created() {\r\n    // This force-closes the modal only if another glyph is dragged into the panel\r\n    EventHub.logic.on(GAME_EVENT.GLYPH_VISUAL_CHANGE, () => {\r\n      this.$recompute(\"glyph\");\r\n      if (!this.defaultKeySwap) this.emitClose();\r\n    });\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.defaultKeySwap = true;\r\n    },\r\n    setType(type) {\r\n      if (type && this.glyph.fixedCosmetic) return;\r\n      this.glyph.color = undefined;\r\n      this.glyph.symbol = undefined;\r\n      if (this.glyph.fixedCosmetic) this.glyph.cosmetic = this.glyph.fixedCosmetic;\r\n      else this.glyph.cosmetic = type;\r\n      this.defaultKeySwap = false;\r\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\r\n    },\r\n    cosmeticTypeClass(type) {\r\n      return {\r\n        \"o-primary-btn--subtab-option\": true,\r\n        \"o-active-type\": type === this.glyph.cosmetic\r\n      };\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapperOptions class=\"c-modal-options__large\">\r\n    <template #header>\r\n      Modifying Single Glyph Appearance\r\n    </template>\r\n    <PrimaryButton\r\n      class=\"o-primary-btn--subtab-option\"\r\n      @click=\"setType(undefined)\"\r\n    >\r\n      Reset this Glyph's appearance\r\n    </PrimaryButton>\r\n    <GlyphCustomizationSingleType\r\n      :key=\"defaultKeySwap\"\r\n      :type=\"glyphType\"\r\n      :glyph-id=\"glyphId\"\r\n    />\r\n    <div v-if=\"cosmeticTypes && glyph.fixedCosmetic\">\r\n      This Glyph's Cosmetic Type cannot be changed!\r\n    </div>\r\n    <div\r\n      v-else-if=\"cosmeticTypes\"\r\n      class=\"c-special-type\"\r\n    >\r\n      Apply Special Cosmetic Type:\r\n      <PrimaryButton\r\n        v-for=\"type in cosmeticTypes\"\r\n        :key=\"type\"\r\n        :class=\"cosmeticTypeClass(type)\"\r\n        @click=\"setType(type)\"\r\n      >\r\n        {{ type.capitalize() }}\r\n      </PrimaryButton>\r\n    </div>\r\n  </ModalWrapperOptions>\r\n</template>\r\n\r\n<style scoped>\r\n.c-special-type {\r\n  display: flex;\r\n  flex-direction: row;\r\n  left: 0;\r\n  align-items: center;\r\n}\r\n\r\n.o-active-type {\r\n  background-color: var(--color-good);\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/modals/options/glyph-appearance"},"metadata":{},"sourceType":"module"}