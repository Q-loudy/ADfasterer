{"ast":null,"code":"import { DC } from \"../../constants\";\nexport const eternityUpgrades = {\n  idMultEP: {\n    id: 1,\n    cost: 5,\n    description: () => `Infinity Dimension multiplier based on unspent Eternity Points (x+${formatInt(1)})`,\n    effect: () => Currency.eternityPoints.value.plus(1),\n    formatEffect: value => formatX(value, 2, 1)\n  },\n  idMultEternities: {\n    id: 2,\n    cost: 10,\n    description: () => `Infinity Dimension multiplier based on Eternities\n      ((x/${formatInt(200)})^log4(${formatInt(2)}x), softcap at ${format(1e5)} Eternities)`,\n\n    effect() {\n      const log4 = Math.log4;\n      const eterPreCap = Currency.eternities.value.clampMax(1e5).toNumber();\n      const base = eterPreCap / 200 + 1;\n      const pow = Math.log(eterPreCap * 2 + 1) / log4;\n      const multPreCap = Math.pow(base, pow);\n      const eterPostCap = Currency.eternities.value.sub(1e5);\n      const mult1 = eterPostCap.divide(200).plus(1);\n      const mult2 = eterPostCap.times(2).plus(1).log(Math.E) / log4;\n      const multPostCap = mult1.times(mult2).clampMin(1);\n      return multPostCap.times(multPreCap);\n    },\n\n    formatEffect: value => formatX(value, 2, 1)\n  },\n  idMultICRecords: {\n    id: 3,\n    cost: 5e4,\n    description: \"Infinity Dimension multiplier based on sum of Infinity Challenge times\",\n    // The cap limits this at a lower value, but we also need an explicit cap here because very old versions have\n    // allowed EC12 to make all the challenge records sum to zero (causing a division by zero here)\n    effect: () => DC.D2.pow(30 / Math.clampMin(Time.infinityChallengeSum.totalSeconds, 0.1)),\n    cap: DC.D2P30D0_61,\n    formatEffect: value => formatX(value, 2, 1)\n  },\n  tdMultAchs: {\n    id: 4,\n    cost: 1e16,\n    description: \"Your Achievement bonus affects Time Dimensions\",\n    effect: () => Achievements.power,\n    formatEffect: value => formatX(value, 2, 1)\n  },\n  tdMultTheorems: {\n    id: 5,\n    cost: 1e40,\n    description: \"Time Dimensions are multiplied by your unspent Time Theorems\",\n    effect: () => Decimal.max(Currency.timeTheorems.value, 1),\n    formatEffect: value => formatX(value, 2, 1)\n  },\n  tdMultRealTime: {\n    id: 6,\n    cost: 1e50,\n    description: () => Pelle.isDoomed ? \"Time Dimensions are multiplied by days played in this Armageddon\" : \"Time Dimensions are multiplied by days played\",\n    effect: () => Pelle.isDoomed ? 1 + Time.thisReality.totalDays : Math.max(Time.totalTimePlayed.totalDays, 1),\n    formatEffect: value => formatX(value, 2, 1)\n  }\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/eternity/eternity-upgrades.js"],"names":["DC","eternityUpgrades","idMultEP","id","cost","description","formatInt","effect","Currency","eternityPoints","value","plus","formatEffect","formatX","idMultEternities","format","log4","Math","eterPreCap","eternities","clampMax","toNumber","base","pow","log","multPreCap","eterPostCap","sub","mult1","divide","mult2","times","E","multPostCap","clampMin","idMultICRecords","D2","Time","infinityChallengeSum","totalSeconds","cap","D2P30D0_61","tdMultAchs","Achievements","power","tdMultTheorems","Decimal","max","timeTheorems","tdMultRealTime","Pelle","isDoomed","thisReality","totalDays","totalTimePlayed"],"mappings":"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","sourcesContent":["import { DC } from \"../../constants\";\r\n\r\nexport const eternityUpgrades = {\r\n  idMultEP: {\r\n    id: 1,\r\n    cost: 5,\r\n    description: () => `Infinity Dimension multiplier based on unspent Eternity Points (x+${formatInt(1)})`,\r\n    effect: () => Currency.eternityPoints.value.plus(1),\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  },\r\n  idMultEternities: {\r\n    id: 2,\r\n    cost: 10,\r\n    description: () => `Infinity Dimension multiplier based on Eternities\r\n      ((x/${formatInt(200)})^log4(${formatInt(2)}x), softcap at ${format(1e5)} Eternities)`,\r\n    effect() {\r\n      const log4 = Math.log4;\r\n      const eterPreCap = Currency.eternities.value.clampMax(1e5).toNumber();\r\n      const base = eterPreCap / 200 + 1;\r\n      const pow = Math.log(eterPreCap * 2 + 1) / log4;\r\n      const multPreCap = Math.pow(base, pow);\r\n      const eterPostCap = Currency.eternities.value.sub(1e5);\r\n      const mult1 = eterPostCap.divide(200).plus(1);\r\n      const mult2 = eterPostCap.times(2).plus(1).log(Math.E) / log4;\r\n      const multPostCap = mult1.times(mult2).clampMin(1);\r\n      return multPostCap.times(multPreCap);\r\n    },\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  },\r\n  idMultICRecords: {\r\n    id: 3,\r\n    cost: 5e4,\r\n    description: \"Infinity Dimension multiplier based on sum of Infinity Challenge times\",\r\n    // The cap limits this at a lower value, but we also need an explicit cap here because very old versions have\r\n    // allowed EC12 to make all the challenge records sum to zero (causing a division by zero here)\r\n    effect: () => DC.D2.pow(30 / Math.clampMin(Time.infinityChallengeSum.totalSeconds, 0.1)),\r\n    cap: DC.D2P30D0_61,\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  },\r\n  tdMultAchs: {\r\n    id: 4,\r\n    cost: 1e16,\r\n    description: \"Your Achievement bonus affects Time Dimensions\",\r\n    effect: () => Achievements.power,\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  },\r\n  tdMultTheorems: {\r\n    id: 5,\r\n    cost: 1e40,\r\n    description: \"Time Dimensions are multiplied by your unspent Time Theorems\",\r\n    effect: () => Decimal.max(Currency.timeTheorems.value, 1),\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  },\r\n  tdMultRealTime: {\r\n    id: 6,\r\n    cost: 1e50,\r\n    description: () => (Pelle.isDoomed\r\n      ? \"Time Dimensions are multiplied by days played in this Armageddon\"\r\n      : \"Time Dimensions are multiplied by days played\"\r\n    ),\r\n    effect: () => (Pelle.isDoomed ? 1 + Time.thisReality.totalDays : Math.max(Time.totalTimePlayed.totalDays, 1)),\r\n    formatEffect: value => formatX(value, 2, 1)\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}