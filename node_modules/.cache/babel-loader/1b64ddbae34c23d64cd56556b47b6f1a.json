{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport { blockifyTextAutomator } from \"@/core/automator\";\nimport ModalWrapper from \"@/components/modals/ModalWrapper\";\nexport default {\n  name: \"AutomatorScriptTemplate\",\n  components: {\n    ModalWrapper\n  },\n  props: {\n    warnings: {\n      type: Function,\n      required: true\n    },\n    name: {\n      type: String,\n      required: true\n    },\n    description: {\n      type: String,\n      required: true\n    },\n    inputs: {\n      type: Array,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      templateInputs: {},\n      buttonTextStrings: [],\n      invalidInputCount: 0,\n      templateProps: null,\n      currentPreset: \"\",\n      isBlock: false\n    };\n  },\n\n  computed: {\n    presets: () => player.timestudy.presets,\n    params: () => GameDatabase.reality.automator.templates.paramTypes,\n\n    validWarnings() {\n      var _this$templateScript;\n\n      return this.invalidInputCount === 0 ? this.warnings().concat((_this$templateScript = this.templateScript) === null || _this$templateScript === void 0 ? void 0 : _this$templateScript.warnings) : this.warnings();\n    },\n\n    templateScript() {\n      if (this.invalidInputCount !== 0) return null;\n      return new ScriptTemplate(this.templateProps, this.name);\n    }\n\n  },\n\n  // Many props in this component are generated dynamically from a GameDB entry, but Vue can only give reactive\n  // behavior to props that exist on declaration. We need all the dynamically generated inputs to be reactive, so we\n  // specifically $set them here on initialization; additionally we give them a default value so that later function\n  // calls don't error out from undefined inputs.\n  created() {\n    for (const input of this.inputs) {\n      const boolProp = this.paramTypeObject(input.type).boolDisplay;\n\n      if (boolProp) {\n        this.$set(this.templateInputs, input.name, false);\n        this.buttonTextStrings[input.name] = boolProp[1];\n      } else {\n        this.$set(this.templateInputs, input.name, \"\");\n        this.invalidInputCount++;\n      }\n    }\n  },\n\n  methods: {\n    update() {\n      this.isBlock = player.reality.automator.type === AUTOMATOR_TYPE.BLOCK;\n    },\n\n    paramTypeObject(name) {\n      return this.params.find(p => p.name === name);\n    },\n\n    isValid(input) {\n      const typeObject = this.paramTypeObject(input.type);\n      return typeObject.isValidString ? typeObject.isValidString(this.templateInputs[input.name]) : true;\n    },\n\n    validityClass(input) {\n      if (input.name === \"treeStudies\" && this.currentPreset !== \"\") {\n        return \"c-automator-template-textbox--preset\";\n      }\n\n      return this.isValid(input) ? undefined : \"c-automator-template-textbox--invalid\";\n    },\n\n    loadPreset(name, id) {\n      this.templateInputs.treeStudies = name ? `NAME ${name}` : `ID ${id}`;\n      this.updateTemplateProps();\n    },\n\n    loadCurrent() {\n      this.templateInputs.treeStudies = GameCache.currentStudyTree.value.exportString;\n      this.updateTemplateProps();\n    },\n\n    updateTemplateProps() {\n      this.templateProps = {};\n      this.invalidInputCount = 0;\n\n      for (const input of this.inputs) {\n        const typeObj = this.paramTypeObject(input.type);\n\n        const mapFn = x => typeObj.map ? typeObj.map(x) : x;\n\n        this.templateProps[input.name] = mapFn(this.templateInputs[input.name]);\n        if (!this.isValid(input)) this.invalidInputCount++;\n      } // We treat treeStudies as a special prop which will set treePreset if it matches the format \"NAME [name]\"\n\n\n      const nameMatch = this.templateProps.treeStudies.match(/^NAME ((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]){1,4})$/);\n      const idMatch = this.templateProps.treeStudies.match(/^ID ([0-9])$/);\n\n      if (nameMatch) {\n        const nameStr = nameMatch ? nameMatch[1] : \"\";\n        this.currentPreset = this.presets.find(x => x.name === nameStr).name;\n      } else if (idMatch) {\n        const idStr = idMatch ? idMatch[1] : \"\";\n        this.currentPreset = this.presets.some((x, y) => y === idStr - 1) ? idStr : \"\";\n      }\n\n      this.templateProps.treePreset = this.currentPreset === \"\" ? null : this.currentPreset;\n    },\n\n    updateButton(input) {\n      this.templateInputs[input.name] = !this.templateInputs[input.name];\n      const boolProp = this.paramTypeObject(input.type).boolDisplay;\n      this.buttonTextStrings[input.name] = boolProp[this.templateInputs[input.name] ? 0 : 1];\n      this.updateTemplateProps();\n    },\n\n    copyAndClose() {\n      if (this.isBlock) {\n        const newTemplateBlock = {\n          name: `Template: ${this.name}`,\n          blocks: blockifyTextAutomator(this.templateScript.script).blocks\n        };\n        AutomatorData.blockTemplates.push(newTemplateBlock);\n        GameUI.notify.info(\"Custom template block created\");\n      } else {\n        copyToClipboard(this.templateScript.script);\n        GameUI.notify.info(\"Template copied to clipboard\");\n      }\n\n      this.emitClose();\n    }\n\n  }\n};","map":{"version":3,"sources":["AutomatorScriptTemplate.vue"],"names":[],"mappings":";;AACA,SAAA,qBAAA,QAAA,kBAAA;AACA,OAAA,YAAA,MAAA,kCAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,yBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA;AADA,GAFA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,QAAA,EAAA;AAFA,KADA;AAKA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KALA;AASA,IAAA,WAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KATA;AAaA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,QAAA,EAAA;AAFA;AAbA,GALA;;AAuBA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,cAAA,EAAA,EADA;AAEA,MAAA,iBAAA,EAAA,EAFA;AAGA,MAAA,iBAAA,EAAA,CAHA;AAIA,MAAA,aAAA,EAAA,IAJA;AAKA,MAAA,aAAA,EAAA,EALA;AAMA,MAAA,OAAA,EAAA;AANA,KAAA;AAQA,GAhCA;;AAiCA,EAAA,QAAA,EAAA;AACA,IAAA,OAAA,EAAA,MAAA,MAAA,CAAA,SAAA,CAAA,OADA;AAEA,IAAA,MAAA,EAAA,MAAA,YAAA,CAAA,OAAA,CAAA,SAAA,CAAA,SAAA,CAAA,UAFA;;AAGA,IAAA,aAAA,GAAA;AAAA;;AACA,aAAA,KAAA,iBAAA,KAAA,CAAA,GACA,KAAA,QAAA,GAAA,MAAA,yBAAA,KAAA,cAAA,yDAAA,qBAAA,QAAA,CADA,GAEA,KAAA,QAAA,EAFA;AAGA,KAPA;;AAQA,IAAA,cAAA,GAAA;AACA,UAAA,KAAA,iBAAA,KAAA,CAAA,EAAA,OAAA,IAAA;AACA,aAAA,IAAA,cAAA,CAAA,KAAA,aAAA,EAAA,KAAA,IAAA,CAAA;AACA;;AAXA,GAjCA;;AA8CA;AACA;AACA;AACA;AACA,EAAA,OAAA,GAAA;AACA,SAAA,MAAA,KAAA,IAAA,KAAA,MAAA,EAAA;AACA,YAAA,QAAA,GAAA,KAAA,eAAA,CAAA,KAAA,CAAA,IAAA,EAAA,WAAA;;AACA,UAAA,QAAA,EAAA;AACA,aAAA,IAAA,CAAA,KAAA,cAAA,EAAA,KAAA,CAAA,IAAA,EAAA,KAAA;AACA,aAAA,iBAAA,CAAA,KAAA,CAAA,IAAA,IAAA,QAAA,CAAA,CAAA,CAAA;AACA,OAHA,MAGA;AACA,aAAA,IAAA,CAAA,KAAA,cAAA,EAAA,KAAA,CAAA,IAAA,EAAA,EAAA;AACA,aAAA,iBAAA;AACA;AACA;AACA,GA7DA;;AA8DA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,OAAA,GAAA,MAAA,CAAA,OAAA,CAAA,SAAA,CAAA,IAAA,KAAA,cAAA,CAAA,KAAA;AACA,KAHA;;AAIA,IAAA,eAAA,CAAA,IAAA,EAAA;AACA,aAAA,KAAA,MAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAAA,CAAA,IAAA,KAAA,IAAA,CAAA;AACA,KANA;;AAOA,IAAA,OAAA,CAAA,KAAA,EAAA;AACA,YAAA,UAAA,GAAA,KAAA,eAAA,CAAA,KAAA,CAAA,IAAA,CAAA;AACA,aAAA,UAAA,CAAA,aAAA,GAAA,UAAA,CAAA,aAAA,CAAA,KAAA,cAAA,CAAA,KAAA,CAAA,IAAA,CAAA,CAAA,GAAA,IAAA;AACA,KAVA;;AAWA,IAAA,aAAA,CAAA,KAAA,EAAA;AACA,UAAA,KAAA,CAAA,IAAA,KAAA,aAAA,IAAA,KAAA,aAAA,KAAA,EAAA,EAAA;AACA,eAAA,sCAAA;AACA;;AACA,aAAA,KAAA,OAAA,CAAA,KAAA,IACA,SADA,GAEA,uCAFA;AAGA,KAlBA;;AAmBA,IAAA,UAAA,CAAA,IAAA,EAAA,EAAA,EAAA;AACA,WAAA,cAAA,CAAA,WAAA,GAAA,IAAA,GAAA,QAAA,IAAA,EAAA,GAAA,MAAA,EAAA,EAAA;AACA,WAAA,mBAAA;AACA,KAtBA;;AAuBA,IAAA,WAAA,GAAA;AACA,WAAA,cAAA,CAAA,WAAA,GAAA,SAAA,CAAA,gBAAA,CAAA,KAAA,CAAA,YAAA;AACA,WAAA,mBAAA;AACA,KA1BA;;AA2BA,IAAA,mBAAA,GAAA;AACA,WAAA,aAAA,GAAA,EAAA;AACA,WAAA,iBAAA,GAAA,CAAA;;AACA,WAAA,MAAA,KAAA,IAAA,KAAA,MAAA,EAAA;AACA,cAAA,OAAA,GAAA,KAAA,eAAA,CAAA,KAAA,CAAA,IAAA,CAAA;;AACA,cAAA,KAAA,GAAA,CAAA,IAAA,OAAA,CAAA,GAAA,GAAA,OAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA;;AACA,aAAA,aAAA,CAAA,KAAA,CAAA,IAAA,IAAA,KAAA,CAAA,KAAA,cAAA,CAAA,KAAA,CAAA,IAAA,CAAA,CAAA;AACA,YAAA,CAAA,KAAA,OAAA,CAAA,KAAA,CAAA,EAAA,KAAA,iBAAA;AACA,OARA,CAUA;;;AACA,YAAA,SAAA,GAAA,KAAA,aAAA,CAAA,WAAA,CAAA,KAAA,CAAA,8KAAA,CAAA;AACA,YAAA,OAAA,GAAA,KAAA,aAAA,CAAA,WAAA,CAAA,KAAA,CAAA,cAAA,CAAA;;AAEA,UAAA,SAAA,EAAA;AACA,cAAA,OAAA,GAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,EAAA;AACA,aAAA,aAAA,GAAA,KAAA,OAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAAA,CAAA,IAAA,KAAA,OAAA,EAAA,IAAA;AACA,OAHA,MAGA,IAAA,OAAA,EAAA;AACA,cAAA,KAAA,GAAA,OAAA,GAAA,OAAA,CAAA,CAAA,CAAA,GAAA,EAAA;AACA,aAAA,aAAA,GAAA,KAAA,OAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,CAAA,KAAA,CAAA,KAAA,KAAA,GAAA,CAAA,IAAA,KAAA,GAAA,EAAA;AACA;;AAEA,WAAA,aAAA,CAAA,UAAA,GAAA,KAAA,aAAA,KAAA,EAAA,GAAA,IAAA,GAAA,KAAA,aAAA;AACA,KAlDA;;AAmDA,IAAA,YAAA,CAAA,KAAA,EAAA;AACA,WAAA,cAAA,CAAA,KAAA,CAAA,IAAA,IAAA,CAAA,KAAA,cAAA,CAAA,KAAA,CAAA,IAAA,CAAA;AACA,YAAA,QAAA,GAAA,KAAA,eAAA,CAAA,KAAA,CAAA,IAAA,EAAA,WAAA;AACA,WAAA,iBAAA,CAAA,KAAA,CAAA,IAAA,IAAA,QAAA,CAAA,KAAA,cAAA,CAAA,KAAA,CAAA,IAAA,IAAA,CAAA,GAAA,CAAA,CAAA;AACA,WAAA,mBAAA;AACA,KAxDA;;AAyDA,IAAA,YAAA,GAAA;AACA,UAAA,KAAA,OAAA,EAAA;AACA,cAAA,gBAAA,GAAA;AACA,UAAA,IAAA,EAAA,aAAA,KAAA,IAAA,EADA;AAEA,UAAA,MAAA,EAAA,qBAAA,CAAA,KAAA,cAAA,CAAA,MAAA,CAAA,CAAA;AAFA,SAAA;AAIA,QAAA,aAAA,CAAA,cAAA,CAAA,IAAA,CAAA,gBAAA;AACA,QAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,+BAAA;AACA,OAPA,MAOA;AACA,QAAA,eAAA,CAAA,KAAA,cAAA,CAAA,MAAA,CAAA;AACA,QAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,8BAAA;AACA;;AACA,WAAA,SAAA;AACA;;AAtEA;AA9DA,CAAA","sourcesContent":["<script>\r\nimport { blockifyTextAutomator } from \"@/core/automator\";\r\nimport ModalWrapper from \"@/components/modals/ModalWrapper\";\r\n\r\nexport default {\r\n  name: \"AutomatorScriptTemplate\",\r\n  components: {\r\n    ModalWrapper,\r\n  },\r\n  props: {\r\n    warnings: {\r\n      type: Function,\r\n      required: true,\r\n    },\r\n    name: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    inputs: {\r\n      type: Array,\r\n      required: true,\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      templateInputs: {},\r\n      buttonTextStrings: [],\r\n      invalidInputCount: 0,\r\n      templateProps: null,\r\n      currentPreset: \"\",\r\n      isBlock: false,\r\n    };\r\n  },\r\n  computed: {\r\n    presets: () => player.timestudy.presets,\r\n    params: () => GameDatabase.reality.automator.templates.paramTypes,\r\n    validWarnings() {\r\n      return this.invalidInputCount === 0\r\n        ? this.warnings().concat(this.templateScript?.warnings)\r\n        : this.warnings();\r\n    },\r\n    templateScript() {\r\n      if (this.invalidInputCount !== 0) return null;\r\n      return new ScriptTemplate(this.templateProps, this.name);\r\n    }\r\n  },\r\n  // Many props in this component are generated dynamically from a GameDB entry, but Vue can only give reactive\r\n  // behavior to props that exist on declaration. We need all the dynamically generated inputs to be reactive, so we\r\n  // specifically $set them here on initialization; additionally we give them a default value so that later function\r\n  // calls don't error out from undefined inputs.\r\n  created() {\r\n    for (const input of this.inputs) {\r\n      const boolProp = this.paramTypeObject(input.type).boolDisplay;\r\n      if (boolProp) {\r\n        this.$set(this.templateInputs, input.name, false);\r\n        this.buttonTextStrings[input.name] = boolProp[1];\r\n      } else {\r\n        this.$set(this.templateInputs, input.name, \"\");\r\n        this.invalidInputCount++;\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isBlock = player.reality.automator.type === AUTOMATOR_TYPE.BLOCK;\r\n    },\r\n    paramTypeObject(name) {\r\n      return this.params.find(p => p.name === name);\r\n    },\r\n    isValid(input) {\r\n      const typeObject = this.paramTypeObject(input.type);\r\n      return typeObject.isValidString ? typeObject.isValidString(this.templateInputs[input.name]) : true;\r\n    },\r\n    validityClass(input) {\r\n      if (input.name === \"treeStudies\" && this.currentPreset !== \"\") {\r\n        return \"c-automator-template-textbox--preset\";\r\n      }\r\n      return this.isValid(input)\r\n        ? undefined\r\n        : \"c-automator-template-textbox--invalid\";\r\n    },\r\n    loadPreset(name, id) {\r\n      this.templateInputs.treeStudies = name ? `NAME ${name}` : `ID ${id}`;\r\n      this.updateTemplateProps();\r\n    },\r\n    loadCurrent() {\r\n      this.templateInputs.treeStudies = GameCache.currentStudyTree.value.exportString;\r\n      this.updateTemplateProps();\r\n    },\r\n    updateTemplateProps() {\r\n      this.templateProps = {};\r\n      this.invalidInputCount = 0;\r\n      for (const input of this.inputs) {\r\n        const typeObj = this.paramTypeObject(input.type);\r\n        const mapFn = x => (typeObj.map ? typeObj.map(x) : x);\r\n        this.templateProps[input.name] = mapFn(this.templateInputs[input.name]);\r\n        if (!this.isValid(input)) this.invalidInputCount++;\r\n      }\r\n\r\n      // We treat treeStudies as a special prop which will set treePreset if it matches the format \"NAME [name]\"\r\n      const nameMatch = this.templateProps.treeStudies.match(/^NAME (.{1,4})$/u);\r\n      const idMatch = this.templateProps.treeStudies.match(/^ID (\\d)$/u);\r\n\r\n      if (nameMatch) {\r\n        const nameStr = nameMatch ? nameMatch[1] : \"\";\r\n        this.currentPreset = this.presets.find(x => x.name === nameStr).name;\r\n      } else if (idMatch) {\r\n        const idStr = idMatch ? idMatch[1] : \"\";\r\n        this.currentPreset = this.presets.some((x, y) => y === idStr - 1) ? idStr : \"\";\r\n      }\r\n\r\n      this.templateProps.treePreset = this.currentPreset === \"\" ? null : this.currentPreset;\r\n    },\r\n    updateButton(input) {\r\n      this.templateInputs[input.name] = !this.templateInputs[input.name];\r\n      const boolProp = this.paramTypeObject(input.type).boolDisplay;\r\n      this.buttonTextStrings[input.name] = boolProp[this.templateInputs[input.name] ? 0 : 1];\r\n      this.updateTemplateProps();\r\n    },\r\n    copyAndClose() {\r\n      if (this.isBlock) {\r\n        const newTemplateBlock = {\r\n          name: `Template: ${this.name}`,\r\n          blocks: blockifyTextAutomator(this.templateScript.script).blocks\r\n        };\r\n        AutomatorData.blockTemplates.push(newTemplateBlock);\r\n        GameUI.notify.info(\"Custom template block created\");\r\n      } else {\r\n        copyToClipboard(this.templateScript.script);\r\n        GameUI.notify.info(\"Template copied to clipboard\");\r\n      }\r\n      this.emitClose();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapper class=\"c-automator-template-container\">\r\n    <template #header>\r\n      {{ name }} Template\r\n    </template>\r\n    <div class=\"c-automator-template-description\">\r\n      {{ description }}\r\n    </div>\r\n    <div class=\"c-automator-template-inputs\">\r\n      <b>Required Information:</b>\r\n      <br>\r\n      Use a preset Study Tree:\r\n      <button\r\n        v-for=\"(preset, presetNumber) in presets\"\r\n        :key=\"preset.name\"\r\n        class=\"o-primary-btn o-load-preset-button-margin\"\r\n        @click=\"loadPreset(preset.name, presetNumber + 1)\"\r\n      >\r\n        {{ preset.name ? preset.name : presetNumber + 1 }}\r\n      </button>\r\n      <button\r\n        class=\"o-primary-btn o-load-preset-button-margin\"\r\n        @click=\"loadCurrent\"\r\n      >\r\n        <i>Current Tree</i>\r\n      </button>\r\n      <div\r\n        v-for=\"input in inputs\"\r\n        :key=\"input.name\"\r\n        class=\"c-automator-template-entry\"\r\n      >\r\n        {{ input.prompt }}:\r\n        <span v-if=\"paramTypeObject(input.type).boolDisplay\">\r\n          <button\r\n            class=\"o-primary-btn\"\r\n            @click=\"updateButton(input)\"\r\n          >\r\n            {{ buttonTextStrings[input.name] }}\r\n          </button>\r\n        </span>\r\n        <span v-else>\r\n          <input\r\n            ref=\"templateInputs[input.name]\"\r\n            v-model=\"templateInputs[input.name]\"\r\n            type=\"text\"\r\n            class=\"c-automator-template-textbox\"\r\n            :class=\"validityClass(input)\"\r\n            @input=\"updateTemplateProps\"\r\n          >\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <div class=\"c-automator-template-warnings\">\r\n      <b>Possible things to consider:</b>\r\n      <div v-if=\"validWarnings.length !== 0\">\r\n        <div\r\n          v-for=\"warning in validWarnings\"\r\n          :key=\"warning\"\r\n          class=\"c-automator-template-entry\"\r\n        >\r\n          {{ warning }}\r\n        </div>\r\n      </div>\r\n      <div v-else>\r\n        (If something seems wrong with the template inputs, it will show up here)\r\n      </div>\r\n      <br>\r\n      <br>\r\n    </div>\r\n    <button\r\n      v-if=\"invalidInputCount === 0\"\r\n      class=\"o-primary-btn\"\r\n      @click=\"copyAndClose\"\r\n    >\r\n      {{ isBlock ? \"Create custom template block\" : \"Copy this template to your clipboard\" }} and close this modal\r\n    </button>\r\n    <button\r\n      v-else\r\n      class=\"o-primary-btn o-primary-btn--disabled\"\r\n    >\r\n      Cannot generate template (You have {{ quantifyInt(\"invalid input\", invalidInputCount) }})\r\n    </button>\r\n  </ModalWrapper>\r\n</template>\r\n\r\n<style scoped>\r\n.o-load-preset-button-margin {\r\n  margin-right: 0.3rem;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/modals"},"metadata":{},"sourceType":"module"}