{"ast":null,"code":"export default {\n  name: \"SpeedrunStatus\",\n\n  data() {\n    return {\n      isActive: false,\n      isSegmented: false,\n      usedSTD: false,\n      hasStarted: false,\n      startDate: 0,\n      saveName: \"\",\n      timePlayedStr: \"\",\n      offlineProgress: false,\n      offlineFraction: 0,\n      mostRecent: {},\n      isCollapsed: false,\n      timeSince: 0,\n      seedText: 0,\n      canModifySeed: false,\n      isComplete: false\n    };\n  },\n\n  computed: {\n    statusText() {\n      if (this.isComplete) return `<span style=\"color: var(--color-good)\">Finished!</span>`;\n      return this.hasStarted ? `<span style=\"color: var(--color-good)\">Running!</span>` : `<span style=\"color: var(--color-bad)\">Not Started Yet</span>`;\n    },\n\n    segmentText() {\n      return this.isSegmented ? \"Segmented Speedrun (imported save)\" : \"Single-segment Speedrun (no save import)\";\n    },\n\n    iapText() {\n      return this.usedSTD ? \"IAPs have been used\" : \"No IAPs Used\";\n    },\n\n    offlineText() {\n      const stateText = this.offlineProgress ? `<span style=\"color: var(--color-good)\">Enabled</span>` : `<span style=\"color: var(--color-bad)\">Disabled</span>`;\n      const fractionText = this.offlineFraction === 0 ? \"(No offline time used)\" : `(${formatPercents(this.offlineFraction, 2)} time spent offline)`;\n      return `${stateText} ${fractionText}`;\n    },\n\n    collapseIcon() {\n      return this.isCollapsed ? \"fas fa-expand-arrows-alt\" : \"fas fa-compress-arrows-alt\";\n    }\n\n  },\n  methods: {\n    update() {\n      var _speedrun$records$thi;\n\n      const speedrun = player.speedrun;\n      this.isActive = speedrun.isActive;\n      this.canModifySeed = Speedrun.canModifySeed(); // Short-circuit if speedrun isn't active; updating some later stuff can cause vue errors outside of speedruns\n\n      if (!this.isActive) return;\n      this.isSegmented = speedrun.isSegmented;\n      this.usedSTD = speedrun.usedSTD;\n      this.hasStarted = speedrun.hasStarted;\n      this.startDate = speedrun.startDate;\n      this.saveName = speedrun.name;\n      this.isCollapsed = speedrun.hideInfo;\n      this.isComplete = Achievement(188).isUnlocked;\n      this.timePlayedStr = Time.realTimePlayed.toStringShort();\n      this.offlineProgress = player.options.offlineProgress;\n      this.offlineFraction = speedrun.offlineTimeUsed / Math.clampMin(player.records.realTimePlayed, 1);\n      this.mostRecent = Speedrun.mostRecentMilestone();\n      this.timeSince = Time.realTimePlayed.minus(TimeSpan.fromMilliseconds((_speedrun$records$thi = speedrun.records[this.mostRecent]) !== null && _speedrun$records$thi !== void 0 ? _speedrun$records$thi : 0)).toStringShort();\n      this.seedText = Speedrun.seedModeText();\n    },\n\n    milestoneName(id) {\n      const db = GameDatabase.speedrunMilestones;\n      return id === 0 ? \"None\" : db.find(m => m.id === id).name;\n    },\n\n    changeName() {\n      if (this.hasStarted) return;\n      Modal.changeName.show();\n    },\n\n    collapseText() {\n      return this.isCollapsed ? \"Expand\" : `Click to collapse Speedrun info`;\n    },\n\n    toggleCollapse() {\n      player.speedrun.hideInfo = !this.isCollapsed;\n    },\n\n    openSeedModal() {\n      if (!this.canModifySeed) return;\n      Modal.modifySeed.show();\n    }\n\n  }\n};","map":{"version":3,"sources":["SpeedrunStatus.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nexport default {\r\n  name: \"SpeedrunStatus\",\r\n  data() {\r\n    return {\r\n      isActive: false,\r\n      isSegmented: false,\r\n      usedSTD: false,\r\n      hasStarted: false,\r\n      startDate: 0,\r\n      saveName: \"\",\r\n      timePlayedStr: \"\",\r\n      offlineProgress: false,\r\n      offlineFraction: 0,\r\n      mostRecent: {},\r\n      isCollapsed: false,\r\n      timeSince: 0,\r\n      seedText: 0,\r\n      canModifySeed: false,\r\n      isComplete: false,\r\n    };\r\n  },\r\n  computed: {\r\n    statusText() {\r\n      if (this.isComplete) return `<span style=\"color: var(--color-good)\">Finished!</span>`;\r\n      return this.hasStarted\r\n        ? `<span style=\"color: var(--color-good)\">Running!</span>`\r\n        : `<span style=\"color: var(--color-bad)\">Not Started Yet</span>`;\r\n    },\r\n    segmentText() {\r\n      return this.isSegmented ? \"Segmented Speedrun (imported save)\" : \"Single-segment Speedrun (no save import)\";\r\n    },\r\n    iapText() {\r\n      return this.usedSTD ? \"IAPs have been used\" : \"No IAPs Used\";\r\n    },\r\n    offlineText() {\r\n      const stateText = this.offlineProgress\r\n        ? `<span style=\"color: var(--color-good)\">Enabled</span>`\r\n        : `<span style=\"color: var(--color-bad)\">Disabled</span>`;\r\n      const fractionText = this.offlineFraction === 0\r\n        ? \"(No offline time used)\"\r\n        : `(${formatPercents(this.offlineFraction, 2)} time spent offline)`;\r\n      return `${stateText} ${fractionText}`;\r\n    },\r\n    collapseIcon() {\r\n      return this.isCollapsed\r\n        ? \"fas fa-expand-arrows-alt\"\r\n        : \"fas fa-compress-arrows-alt\";\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      const speedrun = player.speedrun;\r\n      this.isActive = speedrun.isActive;\r\n      this.canModifySeed = Speedrun.canModifySeed();\r\n      // Short-circuit if speedrun isn't active; updating some later stuff can cause vue errors outside of speedruns\r\n      if (!this.isActive) return;\r\n      this.isSegmented = speedrun.isSegmented;\r\n      this.usedSTD = speedrun.usedSTD;\r\n      this.hasStarted = speedrun.hasStarted;\r\n      this.startDate = speedrun.startDate;\r\n      this.saveName = speedrun.name;\r\n      this.isCollapsed = speedrun.hideInfo;\r\n      this.isComplete = Achievement(188).isUnlocked;\r\n\r\n      this.timePlayedStr = Time.realTimePlayed.toStringShort();\r\n      this.offlineProgress = player.options.offlineProgress;\r\n      this.offlineFraction = speedrun.offlineTimeUsed / Math.clampMin(player.records.realTimePlayed, 1);\r\n      this.mostRecent = Speedrun.mostRecentMilestone();\r\n      this.timeSince = Time.realTimePlayed.minus(TimeSpan.fromMilliseconds(speedrun.records[this.mostRecent] ?? 0))\r\n        .toStringShort();\r\n      this.seedText = Speedrun.seedModeText();\r\n    },\r\n    milestoneName(id) {\r\n      const db = GameDatabase.speedrunMilestones;\r\n      return id === 0 ? \"None\" : db.find(m => m.id === id).name;\r\n    },\r\n    changeName() {\r\n      if (this.hasStarted) return;\r\n      Modal.changeName.show();\r\n    },\r\n    collapseText() {\r\n      return this.isCollapsed ? \"Expand\" : `Click to collapse Speedrun info`;\r\n    },\r\n    toggleCollapse() {\r\n      player.speedrun.hideInfo = !this.isCollapsed;\r\n    },\r\n    openSeedModal() {\r\n      if (!this.canModifySeed) return;\r\n      Modal.modifySeed.show();\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    v-if=\"isActive\"\r\n    class=\"c-speedrun-status\"\r\n  >\r\n    <div v-if=\"!isCollapsed\">\r\n      <b>Speedrun Status (<span v-html=\"statusText\" />)</b>\r\n      <br>\r\n      <span\r\n        :class=\"{ 'c-speedrun-status--can-change': !hasStarted }\"\r\n        @click=\"changeName\"\r\n      >\r\n        Player Name: {{ saveName }}\r\n      </span>\r\n      <br>\r\n      <i>{{ segmentText }}</i>\r\n      <br>\r\n      <i>{{ iapText }}</i>\r\n      <br>\r\n      <span\r\n        :class=\"{ 'c-speedrun-status--can-change': canModifySeed }\"\r\n        @click=\"openSeedModal()\"\r\n      >{{ seedText }}</span>\r\n      <br>\r\n      Total real playtime since start: {{ timePlayedStr }}\r\n      <br>\r\n      Offline Progress: <span v-html=\"offlineText\" />\r\n      <br>\r\n      Most Recent Milestone: {{ milestoneName(mostRecent) }} <span v-if=\"mostRecent\">({{ timeSince }} ago)</span>\r\n      <br>\r\n    </div>\r\n    <div\r\n      class=\"c-speedrun-status--collapse\"\r\n      @click=\"toggleCollapse\"\r\n    >\r\n      <i :class=\"collapseIcon\" />\r\n      {{ collapseText() }}\r\n      <i :class=\"collapseIcon\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-speedrun-status {\r\n  white-space: nowrap;\r\n  position: absolute;\r\n  right: 2rem;\r\n  bottom: 1rem;\r\n  z-index: 5;\r\n  font-size: 1.2rem;\r\n  color: var(--color-text);\r\n  background-color: var(--color-base);\r\n  border: var(--var-border-width, 0.2rem) solid var(--color-accent);\r\n  padding: 0.8rem 2rem;\r\n  pointer-events: auto;\r\n  -webkit-user-select: none;\r\n  user-select: none;\r\n}\r\n\r\n.c-speedrun-status--can-change {\r\n  text-decoration: underline;\r\n  cursor: pointer;\r\n}\r\n\r\n.c-speedrun-status--collapse {\r\n  padding: 0.2rem;\r\n  cursor: pointer;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components"},"metadata":{},"sourceType":"module"}