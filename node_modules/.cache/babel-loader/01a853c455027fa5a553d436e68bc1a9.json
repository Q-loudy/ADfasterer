{"ast":null,"code":"import { reality } from \"@/core/secret-formula/reality\";\n/**\r\n * Every entry in this object is a styling specification for bars within the multiplier tab.\r\n * {\r\n *  @property {String} text       String specifying the color to render the background of the bar (often a CSS var)\r\n *  @property {String} symbol     String to show as text on the bar, may be HTML (allows for font awesome icons)\r\n *  @property {String} textColor  A text color to override the default --color-text for better contrast\r\n * }\r\n */\n\nexport const MultiplierTabIcons = {\n  DIMENSION(type, tier) {\n    const tierText = tier !== null && tier !== void 0 ? tier : \"\";\n\n    switch (type) {\n      case \"AD\":\n        return {\n          symbol: `<b>Ω${tierText}</b>`,\n          color: \"var(--color-antimatter)\"\n        };\n\n      case \"ID\":\n        return {\n          symbol: `<b>∞${tierText}</b>`,\n          color: \"var(--color-infinity)\"\n        };\n\n      case \"TD\":\n        return {\n          symbol: `<b>Δ${tierText}</b>`,\n          color: \"var(--color-eternity)\"\n        };\n\n      default:\n        throw new Error(\"Unrecognized dimension type in multiplier tab icons\");\n    }\n  },\n\n  PURCHASE(type, tier) {\n    const symbol = `<i class=\"fas fa-arrow-up-right-dots\" />${tier !== null && tier !== void 0 ? tier : \"\"}`;\n\n    switch (type) {\n      case \"AD\":\n        return {\n          symbol,\n          color: \"var(--color-antimatter)\"\n        };\n\n      case \"ID\":\n        return {\n          symbol,\n          color: \"var(--color-infinity)\"\n        };\n\n      case \"TD\":\n        return {\n          symbol,\n          color: \"var(--color-eternity)\"\n        };\n\n      case \"baseID\":\n        return {\n          symbol: `<i class=\"fas fa-arrows-up-to-line\" />`,\n          color: \"var(--color-infinity)\"\n        };\n\n      case \"tesseractID\":\n        return {\n          symbol: `<i class=\"fas fa-up-right-and-down-left-from-center\" />`,\n          color: \"var(--color-enslaved--base)\"\n        };\n\n      default:\n        throw new Error(\"Unrecognized purchase type in multiplier tab icons\");\n    }\n  },\n\n  CHALLENGE(type, tier) {\n    const tierText = `<i class=\"fas fa-arrow-down-wide-short\" />${tier !== null && tier !== void 0 ? tier : \"\"}`;\n\n    switch (type) {\n      case \"infinity\":\n        return {\n          symbol: `<b>∞</b>${tierText}`,\n          color: \"var(--color-infinity)\"\n        };\n\n      case \"eternity\":\n        return {\n          symbol: `<b>Δ</b>${tierText}`,\n          color: \"var(--color-eternity)\"\n        };\n\n      default:\n        throw new Error(\"Unrecognized challenge type in multiplier tab icons\");\n    }\n  },\n\n  // Regular sacrifice and glyph sacrifice\n  SACRIFICE(type) {\n    const icon = `<i class=\"fas fa-turn-down\" />`;\n\n    switch (type) {\n      case \"antimatter\":\n        return {\n          symbol: `<b>Ω</b>${icon}`,\n          color: \"var(--color-antimatter)\"\n        };\n\n      case \"infinity\":\n        return {\n          symbol: `<b>∞</b>${icon}`,\n          color: \"var(--color-infinity)\"\n        };\n\n      case \"time\":\n        return {\n          symbol: `<b>Δ</b>${icon}`,\n          color: \"var(--color-eternity)\"\n        };\n\n      case \"dilation\":\n        return {\n          symbol: `<b>Ψ</b>${icon}`,\n          color: \"var(--color-dilation)\",\n          textColor: \"black\"\n        };\n\n      default:\n        throw new Error(\"Unrecognized sacrifice type in multiplier tab icons\");\n    }\n  },\n\n  UPGRADE(type) {\n    const icon = `<i class=\"fas fa-arrow-up\" />`;\n\n    switch (type) {\n      case \"infinity\":\n        return {\n          symbol: `<b>∞</b>${icon}`,\n          color: \"var(--color-infinity)\"\n        };\n\n      case \"eternity\":\n        return {\n          symbol: `<b>Δ</b>${icon}`,\n          color: \"var(--color-eternity)\"\n        };\n\n      case \"dilation\":\n        return {\n          symbol: `<b>Ψ</b>${icon}`,\n          color: \"var(--color-dilation)\"\n        };\n\n      case \"reality\":\n        return {\n          symbol: `<b>Ϟ</b>${icon}`,\n          color: \"var(--color-reality)\"\n        };\n\n      case \"imaginary\":\n        return {\n          symbol: `<i class=\"far fa-lightbulb\" />${icon}`,\n          color: \"var(--color-ra--base)\"\n        };\n\n      default:\n        throw new Error(\"Unrecognized upgrade type in multiplier tab icons\");\n    }\n  },\n\n  // Icons for base IP/EP\n  CONVERT_FROM(currency) {\n    if (currency === \"AM\") {\n      return {\n        symbol: `<i class='fas fa-atom' /><i class='fa-solid fa-arrow-right-arrow-left' />`,\n        color: \"var(--color-antimatter)\"\n      };\n    }\n\n    if (currency === \"IP\") {\n      return {\n        symbol: `<b>∞</b><i class='fa-solid fa-arrow-right-arrow-left' />`,\n        color: \"var(--color-infinity)\"\n      };\n    }\n\n    return {};\n  },\n\n  // IP and EP formula divisors\n  DIVISOR(currency) {\n    let color;\n    if (currency === \"IP\") color = \"var(--color-infinity)\";\n    if (currency === \"EP\") color = \"var(--color-eternity)\";\n    return {\n      symbol: `<i class='fas fa-calculator' />`,\n      color\n    };\n  },\n\n  ANTIMATTER: {\n    symbol: `<i class='fas fa-atom' />`,\n    color: \"var(--color-antimatter)\"\n  },\n  DIMBOOST: {\n    symbol: `<i class=\"fas fa-angles-up\" />`,\n    color: reality.glyphTypes.power.color\n  },\n  TICKSPEED: {\n    symbol: `<i class=\"fas fa-clock\" />`,\n    color: \"var(--color-eternity)\"\n  },\n  GALAXY: {\n    symbol: `<i class=\"fas fa-bahai\" />`,\n    color: \"var(--color-eternity)\"\n  },\n  ACHIEVEMENT: {\n    symbol: `<i class=\"fas fa-trophy\" />`,\n    color: \"var(--color-v--base)\",\n    textColor: \"black\"\n  },\n  BREAK_INFINITY: {\n    symbol: `<b>∝</b>`,\n    color: \"var(--color-infinity)\",\n    textColor: \"black\"\n  },\n  INFINITY_POWER: {\n    symbol: `<b>∞</b><i class=\"fas fa-arrows-turn-right\" />`,\n    color: \"var(--color-infinity)\",\n    textColor: \"black\"\n  },\n  IPOW_CONVERSION: {\n    symbol: `<i class=\"fas fa-arrow-down-up-across-line\" />`,\n    color: \"var(--color-infinity)\",\n    textColor: \"black\"\n  },\n  TIME_STUDY: {\n    symbol: `<i class=\"fas fa-book\" />`,\n    color: \"var(--color-eternity)\"\n  },\n  TACHYON_PARTICLES: {\n    symbol: `<i class=\"fas fa-meteor\" />`,\n    color: \"var(--color-dilation)\"\n  },\n  GENERIC_GLYPH: {\n    symbol: `<i class=\"fas fa-clone\" />`,\n    color: \"var(--color-reality)\"\n  },\n\n  SPECIFIC_GLYPH(type) {\n    return {\n      symbol: `<b>${reality.glyphTypes[type].symbol}</b>`,\n      color: reality.glyphTypes[type].color\n    };\n  },\n\n  BLACK_HOLE: {\n    symbol: `<i class=\"fas fa-circle\" />`,\n    color: \"var(--color-reality)\"\n  },\n  GAMESPEED: {\n    symbol: `<i class=\"fas fa-clock\" />`,\n    color: \"var(--color-reality)\"\n  },\n  GENERIC_TERESA: {\n    symbol: \"<b>Ϟ</b>\",\n    color: \"var(--color-teresa--base)\"\n  },\n  GENERIC_ENSLAVED: {\n    symbol: `<div class=\"o-tab-btn--cel3\">\\uf0c1</div>`,\n    color: \"var(--color-enslaved--base)\"\n  },\n  GENERIC_V: {\n    symbol: \"<b>⌬</b>\",\n    color: \"var(--color-v--base)\",\n    textColor: \"black\"\n  },\n  GENERIC_RA: {\n    symbol: `<i class=\"fas fa-sun\" />`,\n    color: \"var(--color-ra--base)\"\n  },\n  ALCHEMY: {\n    symbol: `<i class=\"fas fa-vial\" />`,\n    color: \"var(--color-ra-pet--effarig)\"\n  },\n  BH_PULSE: {\n    symbol: `<i class=\"fas fa-expand-arrows-alt\" />`,\n    color: \"var(--color-reality)\"\n  },\n  GENERIC_LAITELA: {\n    symbol: \"<b>ᛝ</b>\",\n    color: \"var(--color-laitela--base)\",\n    textColor: \"var(--color-laitela--accent)\"\n  },\n  SINGULARITY: {\n    symbol: `<i class=\"fas fa-arrows-up-down-left-right\" />`,\n    color: \"var(--color-laitela--base)\",\n    textColor: \"var(--color-laitela--accent)\"\n  },\n  PELLE: {\n    symbol: \"<b>♅</b>\",\n    color: \"var(--color-pelle--base)\"\n  },\n  IAP: {\n    symbol: `<i class=\"fas fa-coins\" />`,\n    color: \"var(--color-accent)\"\n  }\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/multiplier-tab/icons.js"],"names":["reality","MultiplierTabIcons","DIMENSION","type","tier","tierText","symbol","color","Error","PURCHASE","CHALLENGE","SACRIFICE","icon","textColor","UPGRADE","CONVERT_FROM","currency","DIVISOR","ANTIMATTER","DIMBOOST","glyphTypes","power","TICKSPEED","GALAXY","ACHIEVEMENT","BREAK_INFINITY","INFINITY_POWER","IPOW_CONVERSION","TIME_STUDY","TACHYON_PARTICLES","GENERIC_GLYPH","SPECIFIC_GLYPH","BLACK_HOLE","GAMESPEED","GENERIC_TERESA","GENERIC_ENSLAVED","GENERIC_V","GENERIC_RA","ALCHEMY","BH_PULSE","GENERIC_LAITELA","SINGULARITY","PELLE","IAP"],"mappings":"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","sourcesContent":["import { reality } from \"@/core/secret-formula/reality\";\r\n\r\n/**\r\n * Every entry in this object is a styling specification for bars within the multiplier tab.\r\n * {\r\n *  @property {String} text       String specifying the color to render the background of the bar (often a CSS var)\r\n *  @property {String} symbol     String to show as text on the bar, may be HTML (allows for font awesome icons)\r\n *  @property {String} textColor  A text color to override the default --color-text for better contrast\r\n * }\r\n */\r\nexport const MultiplierTabIcons = {\r\n  DIMENSION(type, tier) {\r\n    const tierText = tier ?? \"\";\r\n    switch (type) {\r\n      case \"AD\":\r\n        return { symbol: `<b>Ω${tierText}</b>`, color: \"var(--color-antimatter)\" };\r\n      case \"ID\":\r\n        return { symbol: `<b>∞${tierText}</b>`, color: \"var(--color-infinity)\" };\r\n      case \"TD\":\r\n        return { symbol: `<b>Δ${tierText}</b>`, color: \"var(--color-eternity)\" };\r\n      default:\r\n        throw new Error(\"Unrecognized dimension type in multiplier tab icons\");\r\n    }\r\n  },\r\n  PURCHASE(type, tier) {\r\n    const symbol = `<i class=\"fas fa-arrow-up-right-dots\" />${tier ?? \"\"}`;\r\n    switch (type) {\r\n      case \"AD\":\r\n        return { symbol, color: \"var(--color-antimatter)\" };\r\n      case \"ID\":\r\n        return { symbol, color: \"var(--color-infinity)\" };\r\n      case \"TD\":\r\n        return { symbol, color: \"var(--color-eternity)\" };\r\n      case \"baseID\":\r\n        return { symbol: `<i class=\"fas fa-arrows-up-to-line\" />`, color: \"var(--color-infinity)\" };\r\n      case \"tesseractID\":\r\n        return {\r\n          symbol: `<i class=\"fas fa-up-right-and-down-left-from-center\" />`,\r\n          color: \"var(--color-enslaved--base)\"\r\n        };\r\n      default:\r\n        throw new Error(\"Unrecognized purchase type in multiplier tab icons\");\r\n    }\r\n  },\r\n  CHALLENGE(type, tier) {\r\n    const tierText = `<i class=\"fas fa-arrow-down-wide-short\" />${tier ?? \"\"}`;\r\n    switch (type) {\r\n      case \"infinity\":\r\n        return { symbol: `<b>∞</b>${tierText}`, color: \"var(--color-infinity)\" };\r\n      case \"eternity\":\r\n        return { symbol: `<b>Δ</b>${tierText}`, color: \"var(--color-eternity)\" };\r\n      default:\r\n        throw new Error(\"Unrecognized challenge type in multiplier tab icons\");\r\n    }\r\n  },\r\n  // Regular sacrifice and glyph sacrifice\r\n  SACRIFICE(type) {\r\n    const icon = `<i class=\"fas fa-turn-down\" />`;\r\n    switch (type) {\r\n      case \"antimatter\":\r\n        return { symbol: `<b>Ω</b>${icon}`, color: \"var(--color-antimatter)\" };\r\n      case \"infinity\":\r\n        return { symbol: `<b>∞</b>${icon}`, color: \"var(--color-infinity)\" };\r\n      case \"time\":\r\n        return { symbol: `<b>Δ</b>${icon}`, color: \"var(--color-eternity)\" };\r\n      case \"dilation\":\r\n        return { symbol: `<b>Ψ</b>${icon}`, color: \"var(--color-dilation)\", textColor: \"black\" };\r\n      default:\r\n        throw new Error(\"Unrecognized sacrifice type in multiplier tab icons\");\r\n    }\r\n  },\r\n  UPGRADE(type) {\r\n    const icon = `<i class=\"fas fa-arrow-up\" />`;\r\n    switch (type) {\r\n      case \"infinity\":\r\n        return { symbol: `<b>∞</b>${icon}`, color: \"var(--color-infinity)\" };\r\n      case \"eternity\":\r\n        return { symbol: `<b>Δ</b>${icon}`, color: \"var(--color-eternity)\" };\r\n      case \"dilation\":\r\n        return { symbol: `<b>Ψ</b>${icon}`, color: \"var(--color-dilation)\" };\r\n      case \"reality\":\r\n        return { symbol: `<b>Ϟ</b>${icon}`, color: \"var(--color-reality)\" };\r\n      case \"imaginary\":\r\n        return { symbol: `<i class=\"far fa-lightbulb\" />${icon}`, color: \"var(--color-ra--base)\" };\r\n      default:\r\n        throw new Error(\"Unrecognized upgrade type in multiplier tab icons\");\r\n    }\r\n  },\r\n  // Icons for base IP/EP\r\n  CONVERT_FROM(currency) {\r\n    if (currency === \"AM\") {\r\n      return {\r\n        symbol: `<i class='fas fa-atom' /><i class='fa-solid fa-arrow-right-arrow-left' />`,\r\n        color: \"var(--color-antimatter)\",\r\n      };\r\n    }\r\n    if (currency === \"IP\") {\r\n      return {\r\n        symbol: `<b>∞</b><i class='fa-solid fa-arrow-right-arrow-left' />`,\r\n        color: \"var(--color-infinity)\",\r\n      };\r\n    }\r\n    return {};\r\n  },\r\n  // IP and EP formula divisors\r\n  DIVISOR(currency) {\r\n    let color;\r\n    if (currency === \"IP\") color = \"var(--color-infinity)\";\r\n    if (currency === \"EP\") color = \"var(--color-eternity)\";\r\n    return {\r\n      symbol: `<i class='fas fa-calculator' />`,\r\n      color,\r\n    };\r\n  },\r\n  ANTIMATTER: {\r\n    symbol: `<i class='fas fa-atom' />`,\r\n    color: \"var(--color-antimatter)\",\r\n  },\r\n  DIMBOOST: {\r\n    symbol: `<i class=\"fas fa-angles-up\" />`,\r\n    color: reality.glyphTypes.power.color,\r\n  },\r\n  TICKSPEED: {\r\n    symbol: `<i class=\"fas fa-clock\" />`,\r\n    color: \"var(--color-eternity)\",\r\n  },\r\n  GALAXY: {\r\n    symbol: `<i class=\"fas fa-bahai\" />`,\r\n    color: \"var(--color-eternity)\",\r\n  },\r\n  ACHIEVEMENT: {\r\n    symbol: `<i class=\"fas fa-trophy\" />`,\r\n    color: \"var(--color-v--base)\",\r\n    textColor: \"black\",\r\n  },\r\n  BREAK_INFINITY: {\r\n    symbol: `<b>∝</b>`,\r\n    color: \"var(--color-infinity)\",\r\n    textColor: \"black\",\r\n  },\r\n  INFINITY_POWER: {\r\n    symbol: `<b>∞</b><i class=\"fas fa-arrows-turn-right\" />`,\r\n    color: \"var(--color-infinity)\",\r\n    textColor: \"black\",\r\n  },\r\n  IPOW_CONVERSION: {\r\n    symbol: `<i class=\"fas fa-arrow-down-up-across-line\" />`,\r\n    color: \"var(--color-infinity)\",\r\n    textColor: \"black\",\r\n  },\r\n  TIME_STUDY: {\r\n    symbol: `<i class=\"fas fa-book\" />`,\r\n    color: \"var(--color-eternity)\",\r\n  },\r\n  TACHYON_PARTICLES: {\r\n    symbol: `<i class=\"fas fa-meteor\" />`,\r\n    color: \"var(--color-dilation)\",\r\n  },\r\n  GENERIC_GLYPH: {\r\n    symbol: `<i class=\"fas fa-clone\" />`,\r\n    color: \"var(--color-reality)\",\r\n  },\r\n  SPECIFIC_GLYPH(type) {\r\n    return {\r\n      symbol: `<b>${reality.glyphTypes[type].symbol}</b>`,\r\n      color: reality.glyphTypes[type].color,\r\n    };\r\n  },\r\n  BLACK_HOLE: {\r\n    symbol: `<i class=\"fas fa-circle\" />`,\r\n    color: \"var(--color-reality)\",\r\n  },\r\n  GAMESPEED: {\r\n    symbol: `<i class=\"fas fa-clock\" />`,\r\n    color: \"var(--color-reality)\",\r\n  },\r\n  GENERIC_TERESA: {\r\n    symbol: \"<b>Ϟ</b>\",\r\n    color: \"var(--color-teresa--base)\",\r\n  },\r\n  GENERIC_ENSLAVED: {\r\n    symbol: `<div class=\"o-tab-btn--cel3\">\\uf0c1</div>`,\r\n    color: \"var(--color-enslaved--base)\",\r\n  },\r\n  GENERIC_V: {\r\n    symbol: \"<b>⌬</b>\",\r\n    color: \"var(--color-v--base)\",\r\n    textColor: \"black\",\r\n  },\r\n  GENERIC_RA: {\r\n    symbol: `<i class=\"fas fa-sun\" />`,\r\n    color: \"var(--color-ra--base)\",\r\n  },\r\n  ALCHEMY: {\r\n    symbol: `<i class=\"fas fa-vial\" />`,\r\n    color: \"var(--color-ra-pet--effarig)\",\r\n  },\r\n  BH_PULSE: {\r\n    symbol: `<i class=\"fas fa-expand-arrows-alt\" />`,\r\n    color: \"var(--color-reality)\",\r\n  },\r\n  GENERIC_LAITELA: {\r\n    symbol: \"<b>ᛝ</b>\",\r\n    color: \"var(--color-laitela--base)\",\r\n    textColor: \"var(--color-laitela--accent)\",\r\n  },\r\n  SINGULARITY: {\r\n    symbol: `<i class=\"fas fa-arrows-up-down-left-right\" />`,\r\n    color: \"var(--color-laitela--base)\",\r\n    textColor: \"var(--color-laitela--accent)\",\r\n  },\r\n  PELLE: {\r\n    symbol: \"<b>♅</b>\",\r\n    color: \"var(--color-pelle--base)\",\r\n  },\r\n  IAP: {\r\n    symbol: `<i class=\"fas fa-coins\" />`,\r\n    color: \"var(--color-accent)\",\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}