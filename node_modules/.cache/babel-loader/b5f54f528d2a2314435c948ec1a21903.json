{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { GameDatabase } from \"./secret-formula/game-database\";\n\nclass AwayProgress {\n  constructor(config) {\n    var _config$awayOption, _config$showOption, _config$reference, _config$applyFn, _config$classObjectRe, _config$appearsInAway;\n\n    this.name = config.name;\n    this.forcedName = config.forcedName;\n\n    this.isUnlocked = () => config.isUnlocked() || player.records.fullGameCompletions > 0;\n\n    this.awayOption = (_config$awayOption = config.awayOption) !== null && _config$awayOption !== void 0 ? _config$awayOption : this.name;\n    this.showOption = (_config$showOption = config.showOption) !== null && _config$showOption !== void 0 ? _config$showOption : true; // This is an array of strings, each one the name of the next entry in the player object to navigate to\n    // If there is no reference, it is accessed directly by the name through the player object.\n\n    this.reference = (_config$reference = config.reference) !== null && _config$reference !== void 0 ? _config$reference : [this.name]; // Most of the entries in offline progress are props which can be directly read from the player object, but eg. for\n    // achievements the raw data is an array of bitmasks. This structure allows generic support for indirect values.\n\n    this.applyFn = (_config$applyFn = config.applyFn) !== null && _config$applyFn !== void 0 ? _config$applyFn : x => x;\n    this.classObjectReference = (_config$classObjectRe = config.classObjectReference) !== null && _config$classObjectRe !== void 0 ? _config$classObjectRe : this.name;\n    this.appearsInAwayModal = (_config$appearsInAway = config.appearsInAwayModal) !== null && _config$appearsInAway !== void 0 ? _config$appearsInAway : true;\n  }\n\n  get option() {\n    return player.options.awayProgress[this.awayOption];\n  }\n\n  set option(value) {\n    player.options.awayProgress[this.awayOption] = value;\n  }\n\n  get classObject() {\n    // Format the camelCase name to kebab-case\n    return `c-modal-away-progress__${this.classObjectReference.replace(/[A-Z]/g, match => `-${match.toLowerCase()}`)}`;\n  }\n\n  get formatName() {\n    if (this.forcedName) return this.forcedName; // Format the camelCase name to Title Case, with spaces added before the capital letters\n\n    return this.name.replace(/[A-Z]/g, match => ` ${match}`).replace(/^[0-9A-Z_a-z]/, c => c.toUpperCase());\n  } // Pass in player object. Navigate to there using each reference point. Return the place you arrived at.\n\n\n  navigateTo(from) {\n    let place = from;\n\n    for (const goTo of this.reference) {\n      place = place[goTo];\n    }\n\n    return this.applyFn(place);\n  }\n\n}\n\nexport const AwayProgressTypes = {\n  all: {},\n  index: [],\n  showOption: [],\n  appearsInAwayModal: []\n};\n\nfor (let index = 0; index < GameDatabase.awayProgressTypes.length; index++) {\n  const entry = new AwayProgress(GameDatabase.awayProgressTypes[index]);\n  const name = entry.name;\n  AwayProgressTypes.all[name] = entry;\n  AwayProgressTypes.index.push(name);\n  if (entry.showOption) AwayProgressTypes.showOption.push(name);\n  if (entry.appearsInAwayModal) AwayProgressTypes.appearsInAwayModal.push(name);\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/away-progress.js"],"names":["GameDatabase","AwayProgress","constructor","config","name","forcedName","isUnlocked","player","records","fullGameCompletions","awayOption","showOption","reference","applyFn","x","classObjectReference","appearsInAwayModal","option","options","awayProgress","value","classObject","replace","match","toLowerCase","formatName","c","toUpperCase","navigateTo","from","place","goTo","AwayProgressTypes","all","index","awayProgressTypes","length","entry","push"],"mappings":"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","sourcesContent":["import { GameDatabase } from \"./secret-formula/game-database\";\r\n\r\nclass AwayProgress {\r\n  constructor(config) {\r\n    this.name = config.name;\r\n    this.forcedName = config.forcedName;\r\n    this.isUnlocked = () => config.isUnlocked() || player.records.fullGameCompletions > 0;\r\n    this.awayOption = config.awayOption ?? this.name;\r\n    this.showOption = config.showOption ?? true;\r\n    // This is an array of strings, each one the name of the next entry in the player object to navigate to\r\n    // If there is no reference, it is accessed directly by the name through the player object.\r\n    this.reference = config.reference ?? [this.name];\r\n    // Most of the entries in offline progress are props which can be directly read from the player object, but eg. for\r\n    // achievements the raw data is an array of bitmasks. This structure allows generic support for indirect values.\r\n    this.applyFn = config.applyFn ?? (x => x);\r\n    this.classObjectReference = config.classObjectReference ?? this.name;\r\n    this.appearsInAwayModal = config.appearsInAwayModal ?? true;\r\n  }\r\n\r\n  get option() {\r\n    return player.options.awayProgress[this.awayOption];\r\n  }\r\n\r\n  set option(value) {\r\n    player.options.awayProgress[this.awayOption] = value;\r\n  }\r\n\r\n  get classObject() {\r\n    // Format the camelCase name to kebab-case\r\n    return `c-modal-away-progress__${\r\n      this.classObjectReference.replace(/[A-Z]/gu, match => `-${match.toLowerCase()}`)\r\n    }`;\r\n  }\r\n\r\n  get formatName() {\r\n    if (this.forcedName) return this.forcedName;\r\n    // Format the camelCase name to Title Case, with spaces added before the capital letters\r\n    return this.name\r\n      .replace(/[A-Z]/gu, match => ` ${match}`)\r\n      .replace(/^\\w/u, c => c.toUpperCase());\r\n  }\r\n\r\n  // Pass in player object. Navigate to there using each reference point. Return the place you arrived at.\r\n  navigateTo(from) {\r\n    let place = from;\r\n    for (const goTo of this.reference) {\r\n      place = place[goTo];\r\n    }\r\n    return this.applyFn(place);\r\n  }\r\n}\r\n\r\nexport const AwayProgressTypes = {\r\n  all: {},\r\n  index: [],\r\n  showOption: [],\r\n  appearsInAwayModal: [],\r\n};\r\n\r\nfor (let index = 0; index < GameDatabase.awayProgressTypes.length; index++) {\r\n  const entry = new AwayProgress(GameDatabase.awayProgressTypes[index]);\r\n  const name = entry.name;\r\n  AwayProgressTypes.all[name] = entry;\r\n  AwayProgressTypes.index.push(name);\r\n  if (entry.showOption) AwayProgressTypes.showOption.push(name);\r\n  if (entry.appearsInAwayModal) AwayProgressTypes.appearsInAwayModal.push(name);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}