{"ast":null,"code":"import { S12Windows } from \"./windows\";\nexport default {\n  name: \"TaskbarIcon\",\n  props: {\n    tab: {\n      type: Object,\n      required: true\n    },\n    tabPosition: {\n      type: Number,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      isAvailable: true,\n      isHidden: false,\n      hasNotification: false,\n      tabName: \"\",\n      S12Windows\n    };\n  },\n\n  computed: {\n    isCurrentTab() {\n      return this.tab.isOpen && !S12Windows.isMinimised;\n    }\n\n  },\n  methods: {\n    update() {\n      this.isAvailable = this.tab.isAvailable;\n      this.isHidden = this.tab.isHidden;\n      this.hasNotification = this.tab.hasNotification;\n\n      if (this.tabPosition < Pelle.endTabNames.length) {\n        this.tabName = Pelle.transitionText(this.tab.name, Pelle.endTabNames[this.tabPosition], Math.clamp(GameEnd.endState - this.tab.id % 4 / 10, 0, 1));\n      } else {\n        this.tabName = this.tab.name;\n      }\n\n      S12Windows.tabs.tabButtonPositions[this.tab.id] = this.getSubtabsPosition();\n    },\n\n    getSubtabsPosition() {\n      if (!this.$refs.taskbarIcon) return \"0px\";\n      return this.$refs.taskbarIcon.offsetLeft + this.$refs.taskbarIcon.offsetWidth / 2;\n    }\n\n  }\n};","map":{"version":3,"sources":["TaskbarIcon.vue"],"names":[],"mappings":"AACA,SAAA,UAAA,QAAA,WAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,aADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,GAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KADA;AAKA,IAAA,WAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AALA,GAFA;;AAYA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,WAAA,EAAA,IADA;AAEA,MAAA,QAAA,EAAA,KAFA;AAGA,MAAA,eAAA,EAAA,KAHA;AAIA,MAAA,OAAA,EAAA,EAJA;AAKA,MAAA;AALA,KAAA;AAOA,GApBA;;AAqBA,EAAA,QAAA,EAAA;AACA,IAAA,YAAA,GAAA;AACA,aAAA,KAAA,GAAA,CAAA,MAAA,IAAA,CAAA,UAAA,CAAA,WAAA;AACA;;AAHA,GArBA;AA0BA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,WAAA,GAAA,KAAA,GAAA,CAAA,WAAA;AACA,WAAA,QAAA,GAAA,KAAA,GAAA,CAAA,QAAA;AACA,WAAA,eAAA,GAAA,KAAA,GAAA,CAAA,eAAA;;AACA,UAAA,KAAA,WAAA,GAAA,KAAA,CAAA,WAAA,CAAA,MAAA,EAAA;AACA,aAAA,OAAA,GAAA,KAAA,CAAA,cAAA,CACA,KAAA,GAAA,CAAA,IADA,EAEA,KAAA,CAAA,WAAA,CAAA,KAAA,WAAA,CAFA,EAGA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,QAAA,GAAA,KAAA,GAAA,CAAA,EAAA,GAAA,CAAA,GAAA,EAAA,EAAA,CAAA,EAAA,CAAA,CAHA,CAAA;AAKA,OANA,MAMA;AACA,aAAA,OAAA,GAAA,KAAA,GAAA,CAAA,IAAA;AACA;;AAEA,MAAA,UAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,KAAA,GAAA,CAAA,EAAA,IAAA,KAAA,kBAAA,EAAA;AACA,KAhBA;;AAiBA,IAAA,kBAAA,GAAA;AACA,UAAA,CAAA,KAAA,KAAA,CAAA,WAAA,EAAA,OAAA,KAAA;AACA,aAAA,KAAA,KAAA,CAAA,WAAA,CAAA,UAAA,GAAA,KAAA,KAAA,CAAA,WAAA,CAAA,WAAA,GAAA,CAAA;AACA;;AApBA;AA1BA,CAAA","sourcesContent":["<script>\r\nimport { S12Windows } from \"./windows\";\r\n\r\nexport default {\r\n  name: \"TaskbarIcon\",\r\n  props: {\r\n    tab: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    tabPosition: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isAvailable: true,\r\n      isHidden: false,\r\n      hasNotification: false,\r\n      tabName: \"\",\r\n      S12Windows,\r\n    };\r\n  },\r\n  computed: {\r\n    isCurrentTab() {\r\n      return this.tab.isOpen && !S12Windows.isMinimised;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isAvailable = this.tab.isAvailable;\r\n      this.isHidden = this.tab.isHidden;\r\n      this.hasNotification = this.tab.hasNotification;\r\n      if (this.tabPosition < Pelle.endTabNames.length) {\r\n        this.tabName = Pelle.transitionText(\r\n          this.tab.name,\r\n          Pelle.endTabNames[this.tabPosition],\r\n          Math.clamp(GameEnd.endState - (this.tab.id % 4) / 10, 0, 1)\r\n        );\r\n      } else {\r\n        this.tabName = this.tab.name;\r\n      }\r\n\r\n      S12Windows.tabs.tabButtonPositions[this.tab.id] = this.getSubtabsPosition();\r\n    },\r\n    getSubtabsPosition() {\r\n      if (!this.$refs.taskbarIcon) return \"0px\";\r\n      return this.$refs.taskbarIcon.offsetLeft + this.$refs.taskbarIcon.offsetWidth / 2;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    ref=\"taskbarIcon\"\r\n    :class=\"{\r\n      'c-taskbar-icon': true,\r\n      'c-taskbar-icon--active': isCurrentTab\r\n    }\"\r\n    :title=\"tab.name\"\r\n    @mouseenter=\"S12Windows.tabs.setHoveringTab(tab)\"\r\n    @mouseleave=\"S12Windows.tabs.unsetHoveringTab()\"\r\n    @click=\"tab.show(true); S12Windows.isMinimised = false; S12Windows.tabs.unsetHoveringTab(true);\"\r\n  >\r\n    <img\r\n      class=\"c-taskbar-icon__image\"\r\n      :src=\"`images/s12/${tab.key}.png`\"\r\n    >\r\n    <div\r\n      v-if=\"hasNotification\"\r\n      class=\"fas fa-circle-exclamation l-notification-icon\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-taskbar-icon {\r\n  display: flex;\r\n  width: 6rem;\r\n  height: 100%;\r\n  position: relative;\r\n  z-index: 2;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-image: radial-gradient(at 5% -35%, white, transparent 50%);\r\n  border: 0.15rem solid var(--s12-border-color);\r\n  border-top: none;\r\n  border-radius: 0.3rem;\r\n  box-shadow: inset 0 0 0.3rem 0.1rem rgba(255, 255, 255, 0.8);\r\n  margin-left: 0.4rem;\r\n  transition: background-color 0.5s;\r\n  cursor: pointer;\r\n}\r\n\r\n.c-taskbar-icon:hover {\r\n  background-color: rgba(255, 255, 255, 0.35);\r\n}\r\n\r\n.c-taskbar-icon--active {\r\n  background-color: rgba(255, 255, 255, 0.5);\r\n}\r\n\r\n.c-taskbar-icon--active:hover {\r\n  background-color: rgba(240, 240, 240, 0.9);\r\n}\r\n\r\n.c-taskbar-icon__image {\r\n  height: 80%;\r\n  border-radius: 1rem;\r\n}\r\n</style>"],"sourceRoot":"src/components/ui-modes/s12"},"metadata":{},"sourceType":"module"}