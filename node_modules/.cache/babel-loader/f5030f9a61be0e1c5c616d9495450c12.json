{"ast":null,"code":"import { DC } from \"@/core/constants\";\nimport TypeSacrifice from \"./TypeSacrifice\";\nexport default {\n  name: \"SacrificedGlyphs\",\n  components: {\n    TypeSacrifice\n  },\n\n  data() {\n    return {\n      anySacrifices: false,\n      hasDragover: false,\n      hasAlteration: false,\n      hideAlteration: false,\n      maxSacrifice: 0,\n      teresaMult: 0,\n      lastMachinesTeresa: new Decimal(0)\n    };\n  },\n\n  computed: {\n    types: () => GLYPH_TYPES.filter(type => type !== \"cursed\" && type !== \"companion\"),\n\n    lastMachines() {\n      return this.lastMachinesTeresa.lt(DC.E10000) ? `${quantify(\"Reality Machine\", this.lastMachinesTeresa, 2)}` : `${quantify(\"Imaginary Machine\", this.lastMachinesTeresa.dividedBy(DC.E10000), 2)}`;\n    },\n\n    dropDownIconClass() {\n      return this.hideAlteration ? \"far fa-plus-square\" : \"far fa-minus-square\";\n    },\n\n    isDoomed() {\n      return Pelle.isDoomed;\n    },\n\n    addThreshold() {\n      return GlyphAlteration.additionThreshold;\n    },\n\n    empowerThreshold() {\n      return GlyphAlteration.empowermentThreshold;\n    },\n\n    boostThreshold() {\n      return GlyphAlteration.boostingThreshold;\n    },\n\n    cosmeticTypes: () => CosmeticGlyphTypes,\n\n    addStyle() {\n      return {\n        color: GlyphAlteration.baseAdditionColor()\n      };\n    },\n\n    empowerStyle() {\n      return {\n        color: GlyphAlteration.baseEmpowermentColor()\n      };\n    },\n\n    boostStyle() {\n      return {\n        color: GlyphAlteration.baseBoostColor()\n      };\n    },\n\n    hasSeenRealityGlyph() {\n      return player.reality.glyphs.createdRealityGlyph;\n    }\n\n  },\n\n  created() {\n    this.on$(GAME_EVENT.GLYPH_VISUAL_CHANGE, () => {\n      this.$recompute(\"cosmeticTypes\");\n    });\n  },\n\n  methods: {\n    update() {\n      this.anySacrifices = GameCache.logTotalGlyphSacrifice !== 0;\n      this.hasAlteration = Ra.unlocks.alteredGlyphs.canBeApplied;\n      this.hideAlteration = player.options.hideAlterationEffects;\n      this.maxSacrifice = GlyphSacrificeHandler.maxSacrificeForEffects;\n      this.teresaMult = Teresa.runRewardMultiplier;\n      this.lastMachinesTeresa.copyFrom(player.celestials.teresa.lastRepeatedMachines);\n    },\n\n    dragover(event) {\n      if (Pelle.isDoomed) return;\n      if (!event.dataTransfer.types.includes(GLYPH_MIME_TYPE)) return;\n      event.preventDefault();\n      this.hasDragover = true;\n    },\n\n    dragleave(event) {\n      if (this.isDoomed || !event.relatedTarget || !event.relatedTarget.classList || event.relatedTarget.classList.contains(\"c-current-glyph-effects\") || event.relatedTarget.classList.contains(\"c-sacrificed-glyphs__header\") || event.relatedTarget.classList.contains(\"l-sacrificed-glyphs__type\") || event.relatedTarget.classList.contains(\"l-sacrificed-glyphs__type-symbol\") || event.relatedTarget.classList.contains(\"l-sacrificed-glyphs__type-amount\") || event.relatedTarget.classList.contains(\"c-sacrificed-glyphs__type-new-amount\") || event.relatedTarget.classList.length === 0) return;\n      this.hasDragover = false;\n    },\n\n    drop(event) {\n      if (this.isDoomed || !event.dataTransfer.types.includes(GLYPH_MIME_TYPE)) return;\n      const id = parseInt(event.dataTransfer.getData(GLYPH_MIME_TYPE), 10);\n      if (isNaN(id)) return;\n      const glyph = Glyphs.findById(id);\n      if (!glyph) return;\n      GlyphSacrificeHandler.sacrificeGlyph(glyph, true);\n      this.hasDragover = false;\n    },\n\n    toggleAlteration() {\n      player.options.hideAlterationEffects = !player.options.hideAlterationEffects;\n    },\n\n    glyphSymbol(type) {\n      return this.cosmeticTypes[type].currentSymbol.symbol;\n    }\n\n  }\n};","map":{"version":3,"sources":["SacrificedGlyphs.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport { DC } from \"@/core/constants\";\r\n\r\nimport TypeSacrifice from \"./TypeSacrifice\";\r\n\r\nexport default {\r\n  name: \"SacrificedGlyphs\",\r\n  components: {\r\n    TypeSacrifice\r\n  },\r\n  data() {\r\n    return {\r\n      anySacrifices: false,\r\n      hasDragover: false,\r\n      hasAlteration: false,\r\n      hideAlteration: false,\r\n      maxSacrifice: 0,\r\n      teresaMult: 0,\r\n      lastMachinesTeresa: new Decimal(0),\r\n    };\r\n  },\r\n  computed: {\r\n    types: () => GLYPH_TYPES.filter(type => type !== \"cursed\" && type !== \"companion\"),\r\n    lastMachines() {\r\n      return this.lastMachinesTeresa.lt(DC.E10000)\r\n        ? `${quantify(\"Reality Machine\", this.lastMachinesTeresa, 2)}`\r\n        : `${quantify(\"Imaginary Machine\", this.lastMachinesTeresa.dividedBy(DC.E10000), 2)}`;\r\n    },\r\n    dropDownIconClass() {\r\n      return this.hideAlteration ? \"far fa-plus-square\" : \"far fa-minus-square\";\r\n    },\r\n    isDoomed() {\r\n      return Pelle.isDoomed;\r\n    },\r\n    addThreshold() {\r\n      return GlyphAlteration.additionThreshold;\r\n    },\r\n    empowerThreshold() {\r\n      return GlyphAlteration.empowermentThreshold;\r\n    },\r\n    boostThreshold() {\r\n      return GlyphAlteration.boostingThreshold;\r\n    },\r\n    cosmeticTypes: () => CosmeticGlyphTypes,\r\n    addStyle() {\r\n      return { color: GlyphAlteration.baseAdditionColor() };\r\n    },\r\n    empowerStyle() {\r\n      return { color: GlyphAlteration.baseEmpowermentColor() };\r\n    },\r\n    boostStyle() {\r\n      return { color: GlyphAlteration.baseBoostColor() };\r\n    },\r\n    hasSeenRealityGlyph() {\r\n      return player.reality.glyphs.createdRealityGlyph;\r\n    }\r\n  },\r\n  created() {\r\n    this.on$(GAME_EVENT.GLYPH_VISUAL_CHANGE, () => {\r\n      this.$recompute(\"cosmeticTypes\");\r\n    });\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.anySacrifices = GameCache.logTotalGlyphSacrifice !== 0;\r\n      this.hasAlteration = Ra.unlocks.alteredGlyphs.canBeApplied;\r\n      this.hideAlteration = player.options.hideAlterationEffects;\r\n      this.maxSacrifice = GlyphSacrificeHandler.maxSacrificeForEffects;\r\n      this.teresaMult = Teresa.runRewardMultiplier;\r\n      this.lastMachinesTeresa.copyFrom(player.celestials.teresa.lastRepeatedMachines);\r\n    },\r\n    dragover(event) {\r\n      if (Pelle.isDoomed) return;\r\n      if (!event.dataTransfer.types.includes(GLYPH_MIME_TYPE)) return;\r\n      event.preventDefault();\r\n      this.hasDragover = true;\r\n    },\r\n    dragleave(event) {\r\n      if (\r\n        this.isDoomed ||\r\n        !event.relatedTarget ||\r\n        !event.relatedTarget.classList ||\r\n        event.relatedTarget.classList.contains(\"c-current-glyph-effects\") ||\r\n        event.relatedTarget.classList.contains(\"c-sacrificed-glyphs__header\") ||\r\n        event.relatedTarget.classList.contains(\"l-sacrificed-glyphs__type\") ||\r\n        event.relatedTarget.classList.contains(\"l-sacrificed-glyphs__type-symbol\") ||\r\n        event.relatedTarget.classList.contains(\"l-sacrificed-glyphs__type-amount\") ||\r\n        event.relatedTarget.classList.contains(\"c-sacrificed-glyphs__type-new-amount\") ||\r\n        event.relatedTarget.classList.length === 0) return;\r\n      this.hasDragover = false;\r\n    },\r\n    drop(event) {\r\n      if (this.isDoomed || !event.dataTransfer.types.includes(GLYPH_MIME_TYPE)) return;\r\n      const id = parseInt(event.dataTransfer.getData(GLYPH_MIME_TYPE), 10);\r\n      if (isNaN(id)) return;\r\n      const glyph = Glyphs.findById(id);\r\n      if (!glyph) return;\r\n      GlyphSacrificeHandler.sacrificeGlyph(glyph, true);\r\n      this.hasDragover = false;\r\n    },\r\n    toggleAlteration() {\r\n      player.options.hideAlterationEffects = !player.options.hideAlterationEffects;\r\n    },\r\n    glyphSymbol(type) {\r\n      return this.cosmeticTypes[type].currentSymbol.symbol;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    class=\"c-current-glyph-effects l-current-glyph-effects\"\r\n    :class=\"{'c-sacrificed-glyphs--dragover': hasDragover}\"\r\n    @dragover=\"dragover\"\r\n    @dragleave=\"dragleave\"\r\n    @drop=\"drop\"\r\n  >\r\n    <div class=\"l-sacrificed-glyphs__help\">\r\n      <span\r\n        v-if=\"isDoomed\"\r\n        class=\"pelle-current-glyph-effects\"\r\n      >\r\n        You cannot sacrifice Glyphs while Doomed.\r\n      </span>\r\n      <span v-else>\r\n        <div>Drag Glyphs here or shift-click to Sacrifice.</div>\r\n        <div>The confirmation can be disabled in Options or by holding Ctrl.</div>\r\n      </span>\r\n    </div>\r\n    <div v-if=\"hasAlteration\">\r\n      <span\r\n        class=\"c-altered-glyphs-toggle-button\"\r\n        @click=\"toggleAlteration\"\r\n      >\r\n        <i :class=\"dropDownIconClass\" />\r\n        <b> Altered Glyphs</b>\r\n      </span>\r\n      <br>\r\n      <div v-if=\"hideAlteration\">\r\n        (Details hidden, click to unhide)\r\n      </div>\r\n      <div v-else>\r\n        Glyph types will have one of their effects improved<br>\r\n        when their Glyph type's total sacrifice value is above:\r\n        <br><br>\r\n        <b>\r\n          <span :style=\"addStyle\">{{ format(addThreshold) }} - an additional secondary effect</span>\r\n          <br>\r\n          <span :style=\"empowerStyle\">{{ format(empowerThreshold) }} - formula drastically improved</span>\r\n          <br>\r\n          <span :style=\"boostStyle\">{{ format(boostThreshold) }} - a boost depending on Glyph Sacrifice</span>\r\n        </b>\r\n        <br><br>\r\n        All effects from Glyph Sacrifice can no longer be increased once they reach {{ format(maxSacrifice) }}.\r\n      </div>\r\n    </div>\r\n    <br>\r\n    <div class=\"c-sacrificed-glyphs__header\">\r\n      Glyph Sacrifice Boosts:\r\n    </div>\r\n    <div v-if=\"anySacrifices && !isDoomed\">\r\n      <div v-if=\"teresaMult > 1\">\r\n        Glyph sacrifice values are multiplied by {{ formatX(teresaMult, 2, 2) }};\r\n        Teresa was last done at {{ lastMachines }}.\r\n        <span v-if=\"hasSeenRealityGlyph\">\r\n          Reality Glyphs are unaffected by this multiplier and have no altered effects.\r\n        </span>\r\n      </div>\r\n      <template v-for=\"type in types\">\r\n        <TypeSacrifice\r\n          :key=\"type + glyphSymbol(type)\"\r\n          :type=\"type\"\r\n          :has-dragover=\"hasDragover\"\r\n        />\r\n      </template>\r\n    </div>\r\n    <div\r\n      v-else-if=\"isDoomed\"\r\n      class=\"pelle-current-glyph-effects\"\r\n    >\r\n      All boosts from Glyph Sacrifice are disabled while Doomed, including changes to effects due to Altered Glyphs.\r\n    </div>\r\n    <div v-else>\r\n      You haven't Sacrificed any Glyphs yet!\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/glyphs"},"metadata":{},"sourceType":"module"}