{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport AutoSacrificeAdvancedTab from \"./AutoSacrificeAdvancedTab\";\nimport AutoSacrificeEffectTab from \"./AutoSacrificeEffectTab\";\nimport GlyphComponent from \"@/components/GlyphComponent\";\nimport SliderComponent from \"@/components/SliderComponent\";\nexport default {\n  name: \"GlyphFilterPanel\",\n  components: {\n    AutoSacrificeEffectTab,\n    AutoSacrificeAdvancedTab,\n    SliderComponent,\n    GlyphComponent\n  },\n\n  data() {\n    return {\n      mode: AUTO_GLYPH_SCORE.LOWEST_SACRIFICE,\n      effectCount: 0,\n      lockedTypes: GlyphTypes.locked.map(e => e.id),\n      advancedType: GLYPH_TYPES[0],\n      alchemyUnlocked: false,\n      // Note: there are two units at play: strength is from 1..3.5+; rarity is 0..100\n      rarityThresholds: GLYPH_TYPES.mapToObject(e => e, () => 0),\n      autoRealityForFilter: player.options.autoRealityForFilter\n    };\n  },\n\n  computed: {\n    modes() {\n      return AUTO_GLYPH_SCORE;\n    },\n\n    glyphTypes() {\n      return GlyphTypes.list.filter(e => !this.lockedTypes.includes(e.id));\n    },\n\n    raritySliderProps() {\n      return {\n        min: 0,\n        max: 100,\n        width: \"18rem\",\n        valueInDot: true,\n        tooltip: \"never\",\n        \"dot-width\": \"2.2rem\",\n        \"dot-height\": \"1.6rem\",\n        \"dot-class\": \"c-glyph-sacrifice-options__rarity-slider-handle\",\n        \"bg-class\": \"c-glyph-sacrifice-options__rarity-slider-bg\",\n        \"process-class\": \"c-glyph-sacrifice-options__rarity-slider-process\",\n        style: {\n          \"margin-left\": \"1rem\"\n        }\n      };\n    },\n\n    glyphIconProps() {\n      return {\n        size: \"3rem\",\n        \"glow-blur\": \"0.3rem\",\n        \"glow-spread\": \"0.1rem\",\n        \"text-proportion\": 0.66\n      };\n    },\n\n    questionmarkTooltip() {\n      return `All Glyph choices are given a score and compared to a threshold based on the chosen mode. \n        The Glyph with the highest score is picked, but will still be Sacrificed if below the threshold.\n        (click for more detail)`;\n    },\n\n    autoRealityTooltip() {\n      return `If Auto-Reality is on, ignore all other settings and immediately Reality if no upcoming\n        Glyphs would be kept`;\n    },\n\n    unlockedModes() {\n      return Object.values(this.modes).filter(idx => this.isUnlocked(idx));\n    }\n\n  },\n  methods: {\n    update() {\n      this.effectCount = player.reality.glyphs.filter.simple;\n      this.mode = AutoGlyphProcessor.scoreMode;\n\n      for (const type of generatedTypes) {\n        this.rarityThresholds[type] = AutoGlyphProcessor.types[type].rarity;\n      }\n\n      this.lockedTypes = GlyphTypes.locked.map(e => e.id);\n      this.alchemyUnlocked = Ra.unlocks.unlockGlyphAlchemy.canBeApplied;\n    },\n\n    optionClass(idx) {\n      const icon = this.modeIcon(idx);\n      return [\"c-glyph-sacrifice-options__option\", idx === this.mode ? \"c-glyph-sacrifice-options__option--active\" : \"c-glyph-sacrifice-options__option--inactive\", icon];\n    },\n\n    modeIcon(idx) {\n      switch (idx) {\n        case this.modes.LOWEST_SACRIFICE:\n          return \"fas fa-burn\";\n\n        case this.modes.EFFECT_COUNT:\n          return \"fas fa-list-ul\";\n\n        case this.modes.RARITY_THRESHOLD:\n          return \"fas fa-gem\";\n\n        case this.modes.SPECIFIED_EFFECT:\n          return \"fas fa-tasks\";\n\n        case this.modes.EFFECT_SCORE:\n          return \"fas fa-list-ol\";\n\n        case this.modes.LOWEST_ALCHEMY:\n          return \"fas fa-atom\";\n\n        case this.modes.ALCHEMY_VALUE:\n          return \"fas fa-flask\";\n\n        default:\n          throw Error(\"Unrecognized glyph filter mode\");\n      }\n    },\n\n    strengthThreshold(type) {\n      return rarityToStrength(this.rarityThresholds[type]);\n    },\n\n    advancedTypeSelectStyle(type) {\n      const color = GlyphAppearanceHandler.getBorderColor(type.id);\n      return type.id === this.advancedType ? {\n        color,\n        \"text-shadow\": `0 0 0.25rem ${color}, 0 0 0.5rem ${color}, 0 0 0.75rem ${color}, 0 0 1rem ${color}`\n      } : {};\n    },\n\n    setMode(m) {\n      AutoGlyphProcessor.scoreMode = m;\n      player.reality.hasCheckedFilter = false;\n    },\n\n    setRarityThreshold(id, value) {\n      AutoGlyphProcessor.types[id].rarity = value;\n    },\n\n    setEffectCount(event) {\n      const inputValue = event.target.value;\n\n      if (!isNaN(inputValue)) {\n        this.effectCount = Math.clamp(inputValue, 0, 8);\n        player.reality.glyphs.filter.simple = this.effectCount;\n      }\n    },\n\n    filterMode(index) {\n      return AutoGlyphProcessor.filterModeName(index);\n    },\n\n    isUnlocked(index) {\n      switch (index) {\n        case this.modes.LOWEST_SACRIFICE:\n        case this.modes.EFFECT_COUNT:\n        case this.modes.RARITY_THRESHOLD:\n        case this.modes.SPECIFIED_EFFECT:\n        case this.modes.EFFECT_SCORE:\n          return true;\n\n        case this.modes.LOWEST_ALCHEMY:\n        case this.modes.ALCHEMY_VALUE:\n          return this.alchemyUnlocked;\n\n        default:\n          throw Error(\"Unrecognized glyph filter mode\");\n      }\n    },\n\n    // Clicking bumps the rarity over to adjacent thresholds between rarities; normal clicks move to the higher one\n    // and shift-clicks move to the lower one. There is a loop-around that makes 100 go to 0 next and vice versa\n    bumpRarity(type) {\n      const rarityThresholds = GlyphRarities.map(r => strengthToRarity(r.minStrength));\n      let newRarity;\n\n      if (ui.view.shiftDown) {\n        const lower = rarityThresholds.filter(s => s < this.rarityThresholds[type]);\n        newRarity = lower.length === 0 ? 100 : lower.max();\n      } else {\n        // Note: As the minimum of an empty array is zero, this wraps around to 0% again if clicked at 100% rarity\n        newRarity = rarityThresholds.filter(s => s > this.rarityThresholds[type]).min();\n      }\n\n      this.setRarityThreshold(type, newRarity);\n    },\n\n    showFilterHowTo() {\n      ui.view.h2pForcedTab = GameDatabase.h2p.tabs.filter(tab => tab.name === \"Advanced Glyph Mechanics\")[0];\n      Modal.h2p.show();\n    },\n\n    getSymbol(type) {\n      return CosmeticGlyphTypes[type].currentSymbol.symbol;\n    },\n\n    toggleAutoReality() {\n      player.options.autoRealityForFilter = !player.options.autoRealityForFilter;\n      this.autoRealityForFilter = player.options.autoRealityForFilter;\n      player.reality.hasCheckedFilter = false;\n    },\n\n    exportFilterSettings() {\n      const filter = player.reality.glyphs.filter;\n\n      const serializeType = settings => [settings.rarity, settings.score, settings.effectCount, settings.specifiedMask, settings.effectScores.join(\"/\")].join(\",\");\n\n      const simpleData = [filter.select, filter.simple, filter.trash].join(\"|\");\n      const typeData = ALCHEMY_BASIC_GLYPH_TYPES.map(t => serializeType(filter.types[t])).join(\"|\");\n      copyToClipboard(GameSaveSerializer.encodeText(`${simpleData}|${typeData}`, \"glyph filter\"));\n      GameUI.notify.info(\"Filter settings copied to clipboard\");\n    },\n\n    importFilterSettings() {\n      Modal.importFilter.show();\n    }\n\n  }\n};","map":{"version":3,"sources":["GlyphFilterPanel.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport AutoSacrificeAdvancedTab from \"./AutoSacrificeAdvancedTab\";\r\nimport AutoSacrificeEffectTab from \"./AutoSacrificeEffectTab\";\r\nimport GlyphComponent from \"@/components/GlyphComponent\";\r\nimport SliderComponent from \"@/components/SliderComponent\";\r\n\r\nexport default {\r\n  name: \"GlyphFilterPanel\",\r\n  components: {\r\n    AutoSacrificeEffectTab,\r\n    AutoSacrificeAdvancedTab,\r\n    SliderComponent,\r\n    GlyphComponent\r\n  },\r\n  data() {\r\n    return {\r\n      mode: AUTO_GLYPH_SCORE.LOWEST_SACRIFICE,\r\n      effectCount: 0,\r\n      lockedTypes: GlyphTypes.locked.map(e => e.id),\r\n      advancedType: GLYPH_TYPES[0],\r\n      alchemyUnlocked: false,\r\n      // Note: there are two units at play: strength is from 1..3.5+; rarity is 0..100\r\n      rarityThresholds: GLYPH_TYPES.mapToObject(e => e, () => 0),\r\n      autoRealityForFilter: player.options.autoRealityForFilter,\r\n    };\r\n  },\r\n  computed: {\r\n    modes() {\r\n      return AUTO_GLYPH_SCORE;\r\n    },\r\n    glyphTypes() {\r\n      return GlyphTypes.list.filter(e => !this.lockedTypes.includes(e.id));\r\n    },\r\n    raritySliderProps() {\r\n      return {\r\n        min: 0,\r\n        max: 100,\r\n        width: \"18rem\",\r\n        valueInDot: true,\r\n        tooltip: \"never\",\r\n        \"dot-width\": \"2.2rem\",\r\n        \"dot-height\": \"1.6rem\",\r\n        \"dot-class\": \"c-glyph-sacrifice-options__rarity-slider-handle\",\r\n        \"bg-class\": \"c-glyph-sacrifice-options__rarity-slider-bg\",\r\n        \"process-class\": \"c-glyph-sacrifice-options__rarity-slider-process\",\r\n        style: {\r\n          \"margin-left\": \"1rem\",\r\n        }\r\n      };\r\n    },\r\n    glyphIconProps() {\r\n      return {\r\n        size: \"3rem\",\r\n        \"glow-blur\": \"0.3rem\",\r\n        \"glow-spread\": \"0.1rem\",\r\n        \"text-proportion\": 0.66\r\n      };\r\n    },\r\n    questionmarkTooltip() {\r\n      return `All Glyph choices are given a score and compared to a threshold based on the chosen mode. \r\n        The Glyph with the highest score is picked, but will still be Sacrificed if below the threshold.\r\n        (click for more detail)`;\r\n    },\r\n    autoRealityTooltip() {\r\n      return `If Auto-Reality is on, ignore all other settings and immediately Reality if no upcoming\r\n        Glyphs would be kept`;\r\n    },\r\n    unlockedModes() {\r\n      return Object.values(this.modes).filter(idx => this.isUnlocked(idx));\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.effectCount = player.reality.glyphs.filter.simple;\r\n      this.mode = AutoGlyphProcessor.scoreMode;\r\n      for (const type of generatedTypes) {\r\n        this.rarityThresholds[type] = AutoGlyphProcessor.types[type].rarity;\r\n      }\r\n      this.lockedTypes = GlyphTypes.locked.map(e => e.id);\r\n      this.alchemyUnlocked = Ra.unlocks.unlockGlyphAlchemy.canBeApplied;\r\n    },\r\n    optionClass(idx) {\r\n      const icon = this.modeIcon(idx);\r\n      return [\r\n        \"c-glyph-sacrifice-options__option\",\r\n        idx === this.mode\r\n          ? \"c-glyph-sacrifice-options__option--active\"\r\n          : \"c-glyph-sacrifice-options__option--inactive\",\r\n        icon\r\n      ];\r\n    },\r\n    modeIcon(idx) {\r\n      switch (idx) {\r\n        case this.modes.LOWEST_SACRIFICE:\r\n          return \"fas fa-burn\";\r\n        case this.modes.EFFECT_COUNT:\r\n          return \"fas fa-list-ul\";\r\n        case this.modes.RARITY_THRESHOLD:\r\n          return \"fas fa-gem\";\r\n        case this.modes.SPECIFIED_EFFECT:\r\n          return \"fas fa-tasks\";\r\n        case this.modes.EFFECT_SCORE:\r\n          return \"fas fa-list-ol\";\r\n        case this.modes.LOWEST_ALCHEMY:\r\n          return \"fas fa-atom\";\r\n        case this.modes.ALCHEMY_VALUE:\r\n          return \"fas fa-flask\";\r\n        default:\r\n          throw Error(\"Unrecognized glyph filter mode\");\r\n      }\r\n    },\r\n    strengthThreshold(type) {\r\n      return rarityToStrength(this.rarityThresholds[type]);\r\n    },\r\n    advancedTypeSelectStyle(type) {\r\n      const color = GlyphAppearanceHandler.getBorderColor(type.id);\r\n      return type.id === this.advancedType ? {\r\n        color,\r\n        \"text-shadow\": `0 0 0.25rem ${color}, 0 0 0.5rem ${color}, 0 0 0.75rem ${color}, 0 0 1rem ${color}`,\r\n      } : {};\r\n    },\r\n    setMode(m) {\r\n      AutoGlyphProcessor.scoreMode = m;\r\n      player.reality.hasCheckedFilter = false;\r\n    },\r\n    setRarityThreshold(id, value) {\r\n      AutoGlyphProcessor.types[id].rarity = value;\r\n    },\r\n    setEffectCount(event) {\r\n      const inputValue = event.target.value;\r\n      if (!isNaN(inputValue)) {\r\n        this.effectCount = Math.clamp(inputValue, 0, 8);\r\n        player.reality.glyphs.filter.simple = this.effectCount;\r\n      }\r\n    },\r\n    filterMode(index) {\r\n      return AutoGlyphProcessor.filterModeName(index);\r\n    },\r\n    isUnlocked(index) {\r\n      switch (index) {\r\n        case this.modes.LOWEST_SACRIFICE:\r\n        case this.modes.EFFECT_COUNT:\r\n        case this.modes.RARITY_THRESHOLD:\r\n        case this.modes.SPECIFIED_EFFECT:\r\n        case this.modes.EFFECT_SCORE:\r\n          return true;\r\n        case this.modes.LOWEST_ALCHEMY:\r\n        case this.modes.ALCHEMY_VALUE:\r\n          return this.alchemyUnlocked;\r\n        default:\r\n          throw Error(\"Unrecognized glyph filter mode\");\r\n      }\r\n    },\r\n    // Clicking bumps the rarity over to adjacent thresholds between rarities; normal clicks move to the higher one\r\n    // and shift-clicks move to the lower one. There is a loop-around that makes 100 go to 0 next and vice versa\r\n    bumpRarity(type) {\r\n      const rarityThresholds = GlyphRarities.map(r => strengthToRarity(r.minStrength));\r\n      let newRarity;\r\n      if (ui.view.shiftDown) {\r\n        const lower = rarityThresholds.filter(s => s < this.rarityThresholds[type]);\r\n        newRarity = lower.length === 0 ? 100 : lower.max();\r\n      } else {\r\n        // Note: As the minimum of an empty array is zero, this wraps around to 0% again if clicked at 100% rarity\r\n        newRarity = rarityThresholds.filter(s => s > this.rarityThresholds[type]).min();\r\n      }\r\n      this.setRarityThreshold(type, newRarity);\r\n    },\r\n    showFilterHowTo() {\r\n      ui.view.h2pForcedTab = GameDatabase.h2p.tabs.filter(tab => tab.name === \"Advanced Glyph Mechanics\")[0];\r\n      Modal.h2p.show();\r\n    },\r\n    getSymbol(type) {\r\n      return CosmeticGlyphTypes[type].currentSymbol.symbol;\r\n    },\r\n    toggleAutoReality() {\r\n      player.options.autoRealityForFilter = !player.options.autoRealityForFilter;\r\n      this.autoRealityForFilter = player.options.autoRealityForFilter;\r\n      player.reality.hasCheckedFilter = false;\r\n    },\r\n    exportFilterSettings() {\r\n      const filter = player.reality.glyphs.filter;\r\n      const serializeType = settings => [settings.rarity, settings.score, settings.effectCount,\r\n        settings.specifiedMask, settings.effectScores.join(\"/\")].join(\",\");\r\n      const simpleData = [filter.select, filter.simple, filter.trash].join(\"|\");\r\n      const typeData = ALCHEMY_BASIC_GLYPH_TYPES.map(t => serializeType(filter.types[t])).join(\"|\");\r\n      copyToClipboard(GameSaveSerializer.encodeText(`${simpleData}|${typeData}`, \"glyph filter\"));\r\n      GameUI.notify.info(\"Filter settings copied to clipboard\");\r\n    },\r\n    importFilterSettings() {\r\n      Modal.importFilter.show();\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-glyph-sacrifice-options c-glyph-sacrifice-options l-glyph-sidebar-panel-size\">\r\n    <div class=\"c-glyph-sacrifice-options c-glyph-sacrifice-options-container\">\r\n      <div class=\"c-filter-extra-btns c-top-left\">\r\n        <i\r\n          v-tooltip=\"'Export filter settings'\"\r\n          class=\"fas fa-file-export l-top-left-btn\"\r\n          @click=\"exportFilterSettings\"\r\n        />\r\n        <i\r\n          v-tooltip=\"'Import filter settings'\"\r\n          class=\"fas fa-file-import l-top-left-btn\"\r\n          @click=\"importFilterSettings\"\r\n        />\r\n      </div>\r\n      <div class=\"c-filter-extra-btns c-top-right\">\r\n        <i\r\n          v-tooltip=\"autoRealityTooltip\"\r\n          class=\"fas fa-recycle l-top-right-btn\"\r\n          :class=\"{ 'o-quick-reality' : autoRealityForFilter }\"\r\n          @click=\"toggleAutoReality\"\r\n        />\r\n        <i\r\n          v-tooltip=\"questionmarkTooltip\"\r\n          class=\"fas fa-question-circle l-top-right-btn o-borderless\"\r\n          @click=\"showFilterHowTo\"\r\n        />\r\n      </div>\r\n      Current Filter Mode:\r\n      <br>\r\n      {{ filterMode(mode) }}\r\n      <br>\r\n      <div class=\"c-glyph-filter-mode-container\">\r\n        <div\r\n          v-for=\"index in unlockedModes\"\r\n          :key=\"index\"\r\n          :class=\"optionClass(index)\"\r\n          @click=\"setMode(index)\"\r\n        >\r\n          <div class=\"c-glyph-sacrifice-options__option__tooltip\">\r\n            {{ filterMode(index) }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div\r\n      v-if=\"mode === modes.LOWEST_SACRIFICE\"\r\n      class=\"c-glyph-sacrifice-options__advanced\"\r\n    >\r\n      <br>\r\n      Glyph score is assigned based on type. Priority is given to Glyphs belonging to the type of which you have\r\n      the least total Glyph Sacrifice value.\r\n      <br>\r\n      <br>\r\n      This mode never keeps Glyphs, but will instead always sacrifice the Glyph it chooses.\r\n    </div>\r\n    <div\r\n      v-if=\"mode === modes.EFFECT_COUNT\"\r\n      class=\" c-glyph-sacrifice-options__advanced\"\r\n    >\r\n      <br>\r\n      Glyphs must have at least\r\n      <input\r\n        ref=\"effectCount\"\r\n        type=\"number\"\r\n        min=\"0\"\r\n        max=\"8\"\r\n        class=\"c-auto-sac-effect-tab__input\"\r\n        :value=\"effectCount\"\r\n        @blur=\"setEffectCount\"\r\n      >\r\n      effects to be chosen. Rarer Glyphs are preferred in ties.\r\n    </div>\r\n    <div\r\n      v-if=\"mode === modes.RARITY_THRESHOLD\"\r\n      class=\"l-glyph-sacrifice-options__rarity-sliders\"\r\n    >\r\n      <span class=\"c-glyph-sacrifice-options__advanced\">\r\n        Any Glyphs with rarity below these thresholds will be sacrificed.\r\n      </span>\r\n      <div\r\n        v-for=\"type in glyphTypes\"\r\n        :key=\"type.id\"\r\n        class=\"l-glyph-sacrifice-options__rarity-slider-div\"\r\n      >\r\n        <span @click=\"bumpRarity(type.id)\">\r\n          <GlyphComponent\r\n            :glyph=\"{type: type.id, strength: strengthThreshold(type.id) }\"\r\n            v-bind=\"glyphIconProps\"\r\n            class=\"o-clickable\"\r\n          />\r\n        </span>\r\n        <SliderComponent\r\n          v-bind=\"raritySliderProps\"\r\n          :value=\"rarityThresholds[type.id]\"\r\n          :width=\"'100%'\"\r\n          @input=\"setRarityThreshold(type.id, $event)\"\r\n        />\r\n      </div>\r\n    </div>\r\n    <div\r\n      v-if=\"mode === modes.SPECIFIED_EFFECT\"\r\n      class=\"c-glyph-sacrifice-options__advanced\"\r\n    >\r\n      <div>\r\n        Glyph Type:\r\n        <span\r\n          v-for=\"type in glyphTypes\"\r\n          :key=\"type.id\"\r\n          v-tooltip=\"type.id.capitalize()\"\r\n          class=\"l-glyph-sacrifice-options__advanced-type-select c-glyph-sacrifice-options__advanced-type-select\"\r\n          :style=\"advancedTypeSelectStyle(type)\"\r\n          @click=\"advancedType=type.id\"\r\n        >\r\n          {{ getSymbol(type.id) }}\r\n        </span>\r\n      </div>\r\n      <br>\r\n      <div class=\"l-glyph-sacrifice-options__rarity-slider-div\">\r\n        <span @click=\"bumpRarity(advancedType)\">\r\n          <GlyphComponent\r\n            :glyph=\"{type: advancedType, strength: strengthThreshold(advancedType) }\"\r\n            v-bind=\"glyphIconProps\"\r\n            class=\"o-clickable\"\r\n          />\r\n        </span>\r\n        <SliderComponent\r\n          v-bind=\"raritySliderProps\"\r\n          :value=\"rarityThresholds[advancedType]\"\r\n          :width=\"'100%'\"\r\n          @input=\"setRarityThreshold(advancedType, $event)\"\r\n        />\r\n      </div>\r\n      <template v-for=\"type in glyphTypes\">\r\n        <AutoSacrificeEffectTab\r\n          v-show=\"type.id === advancedType\"\r\n          :key=\"type.id\"\r\n          :glyph-type=\"type.id\"\r\n        />\r\n      </template>\r\n    </div>\r\n    <div\r\n      v-if=\"mode === modes.EFFECT_SCORE\"\r\n      class=\"c-glyph-sacrifice-options__advanced\"\r\n    >\r\n      <div>\r\n        Glyph Type:\r\n        <span\r\n          v-for=\"type in glyphTypes\"\r\n          :key=\"type.id\"\r\n          v-tooltip=\"type.id.capitalize()\"\r\n          class=\"l-glyph-sacrifice-options__advanced-type-select c-glyph-sacrifice-options__advanced-type-select\"\r\n          :style=\"advancedTypeSelectStyle(type)\"\r\n          @click=\"advancedType=type.id\"\r\n        >\r\n          {{ getSymbol(type.id) }}\r\n        </span>\r\n      </div>\r\n      <br>\r\n      <template v-for=\"type in glyphTypes\">\r\n        <AutoSacrificeAdvancedTab\r\n          v-show=\"type.id === advancedType\"\r\n          :key=\"type.id\"\r\n          :glyph-type=\"type.id\"\r\n        />\r\n      </template>\r\n    </div>\r\n    <div\r\n      v-if=\"mode === modes.LOWEST_ALCHEMY\"\r\n      class=\"c-glyph-sacrifice-options__advanced\"\r\n    >\r\n      <br>\r\n      Glyph score is assigned based on current Alchemy Resource totals. Priority is given to the Glyph type with\r\n      the lowest associated alchemy resource total.\r\n      <br>\r\n      <br>\r\n      This mode never keeps Glyphs.\r\n    </div>\r\n    <div\r\n      v-if=\"mode === modes.ALCHEMY_VALUE\"\r\n      class=\"c-glyph-sacrifice-options__advanced\"\r\n    >\r\n      <br>\r\n      Glyphs will be assigned values based on <i>current</i> refinement value, accounting for the type-specific\r\n      resource caps. Priority is given to Glyphs which are worth the most alchemy resources; Glyphs which would\r\n      cause you to hit a cap are effectively worth less.\r\n      <br>\r\n      <br>\r\n      This mode never keeps Glyphs.\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.o-clickable {\r\n  cursor: pointer;\r\n}\r\n\r\n.c-filter-extra-btns {\r\n  position: absolute;\r\n  display: flex;\r\n  flex-direction: row;\r\n  top: 0;\r\n  z-index: 2;\r\n  font-size: 1.3rem;\r\n}\r\n\r\n.c-top-left {\r\n  right: calc(100% - 6rem);\r\n  color: var(--color-reality-dark);\r\n}\r\n\r\n.c-top-right {\r\n  left: calc(100% - 5rem);\r\n}\r\n\r\n.l-top-left-btn {\r\n  cursor: pointer;\r\n  border: var(--var-border-width, 0.2rem) solid;\r\n  width: 2.5rem;\r\n  margin: 0.5rem 0 0 0.5rem;\r\n  padding: 0.5rem;\r\n}\r\n\r\n.l-top-right-btn {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  border: var(--var-border-width, 0.2rem) solid;\r\n  width: 2rem;\r\n  height: 2rem;\r\n  margin: 0.5rem 0.5rem 0 0;\r\n  padding: 0.2rem;\r\n}\r\n\r\n.o-borderless {\r\n  border: none;\r\n}\r\n\r\n.o-quick-reality {\r\n  background: var(--color-good);\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/glyphs/sidebar"},"metadata":{},"sourceType":"module"}