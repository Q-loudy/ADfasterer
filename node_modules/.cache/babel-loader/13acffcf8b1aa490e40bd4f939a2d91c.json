{"ast":null,"code":"import HintText from \"@/components/HintText\";\nimport TimeStudyButton from \"./TimeStudyButton\";\nexport default {\n  name: \"ECTimeStudy\",\n  components: {\n    TimeStudyButton,\n    HintText\n  },\n  props: {\n    setup: {\n      type: Object,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      hasRequirement: false,\n      requirement: {\n        current: new Decimal(),\n        total: new Decimal()\n      },\n      completions: 0,\n      showTotalCompletions: false,\n      isRunning: false,\n      isUnlocked: false\n    };\n  },\n\n  computed: {\n    study() {\n      return this.setup.study;\n    },\n\n    id() {\n      return this.study.id;\n    },\n\n    config() {\n      return this.study.config;\n    },\n\n    hasNumberRequirement() {\n      return typeof this.study.requirementCurrent === \"number\";\n    },\n\n    formatValue() {\n      return this.config.secondary.formatValue;\n    },\n\n    // Linebreaks added to avoid twitching in scientific notation\n    needsFirstLinebreak() {\n      return this.study.id === 7;\n    },\n\n    needsSecondLinebreak() {\n      return [3, 4, 7].includes(this.study.id);\n    }\n\n  },\n  methods: {\n    update() {\n      var _EternityChallenge$cu;\n\n      const id = this.id;\n      const study = this.study;\n      const ec = EternityChallenge(id);\n      this.hasRequirement = !Perk.studyECRequirement.isBought && !study.wasRequirementPreviouslyMet;\n      this.completions = ec.completions;\n      this.showTotalCompletions = !Enslaved.isRunning || id !== 1;\n      this.isRunning = ((_EternityChallenge$cu = EternityChallenge.current) === null || _EternityChallenge$cu === void 0 ? void 0 : _EternityChallenge$cu.id) === id;\n      this.isUnlocked = ec.isUnlocked;\n      if (!this.hasRequirement || id > 10) return;\n      const requirement = this.requirement;\n\n      if (this.hasNumberRequirement) {\n        requirement.total = study.requirementTotal;\n        requirement.current = Math.min(study.requirementCurrent, requirement.total);\n      } else {\n        requirement.total.copyFrom(study.requirementTotal);\n        requirement.current.copyFrom(study.requirementCurrent.min(requirement.total));\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["ECTimeStudy.vue"],"names":[],"mappings":"AACA,OAAA,QAAA,MAAA,uBAAA;AACA,OAAA,eAAA,MAAA,mBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,aADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,eADA;AAEA,IAAA;AAFA,GAFA;AAMA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GANA;;AAYA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,cAAA,EAAA,KADA;AAEA,MAAA,WAAA,EAAA;AACA,QAAA,OAAA,EAAA,IAAA,OAAA,EADA;AAEA,QAAA,KAAA,EAAA,IAAA,OAAA;AAFA,OAFA;AAMA,MAAA,WAAA,EAAA,CANA;AAOA,MAAA,oBAAA,EAAA,KAPA;AAQA,MAAA,SAAA,EAAA,KARA;AASA,MAAA,UAAA,EAAA;AATA,KAAA;AAWA,GAxBA;;AAyBA,EAAA,QAAA,EAAA;AACA,IAAA,KAAA,GAAA;AACA,aAAA,KAAA,KAAA,CAAA,KAAA;AACA,KAHA;;AAIA,IAAA,EAAA,GAAA;AACA,aAAA,KAAA,KAAA,CAAA,EAAA;AACA,KANA;;AAOA,IAAA,MAAA,GAAA;AACA,aAAA,KAAA,KAAA,CAAA,MAAA;AACA,KATA;;AAUA,IAAA,oBAAA,GAAA;AACA,aAAA,OAAA,KAAA,KAAA,CAAA,kBAAA,KAAA,QAAA;AACA,KAZA;;AAaA,IAAA,WAAA,GAAA;AACA,aAAA,KAAA,MAAA,CAAA,SAAA,CAAA,WAAA;AACA,KAfA;;AAgBA;AACA,IAAA,mBAAA,GAAA;AACA,aAAA,KAAA,KAAA,CAAA,EAAA,KAAA,CAAA;AACA,KAnBA;;AAoBA,IAAA,oBAAA,GAAA;AACA,aAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,QAAA,CAAA,KAAA,KAAA,CAAA,EAAA,CAAA;AACA;;AAtBA,GAzBA;AAiDA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AAAA;;AACA,YAAA,EAAA,GAAA,KAAA,EAAA;AACA,YAAA,KAAA,GAAA,KAAA,KAAA;AACA,YAAA,EAAA,GAAA,iBAAA,CAAA,EAAA,CAAA;AACA,WAAA,cAAA,GAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,QAAA,IAAA,CAAA,KAAA,CAAA,2BAAA;AACA,WAAA,WAAA,GAAA,EAAA,CAAA,WAAA;AACA,WAAA,oBAAA,GAAA,CAAA,QAAA,CAAA,SAAA,IAAA,EAAA,KAAA,CAAA;AACA,WAAA,SAAA,GAAA,0BAAA,iBAAA,CAAA,OAAA,gFAAA,EAAA,MAAA,EAAA;AACA,WAAA,UAAA,GAAA,EAAA,CAAA,UAAA;AACA,UAAA,CAAA,KAAA,cAAA,IAAA,EAAA,GAAA,EAAA,EAAA;AACA,YAAA,WAAA,GAAA,KAAA,WAAA;;AACA,UAAA,KAAA,oBAAA,EAAA;AACA,QAAA,WAAA,CAAA,KAAA,GAAA,KAAA,CAAA,gBAAA;AACA,QAAA,WAAA,CAAA,OAAA,GAAA,IAAA,CAAA,GAAA,CAAA,KAAA,CAAA,kBAAA,EAAA,WAAA,CAAA,KAAA,CAAA;AACA,OAHA,MAGA;AACA,QAAA,WAAA,CAAA,KAAA,CAAA,QAAA,CAAA,KAAA,CAAA,gBAAA;AACA,QAAA,WAAA,CAAA,OAAA,CAAA,QAAA,CAAA,KAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,WAAA,CAAA,KAAA,CAAA;AACA;AACA;;AAnBA;AAjDA,CAAA","sourcesContent":["<script>\r\nimport HintText from \"@/components/HintText\";\r\nimport TimeStudyButton from \"./TimeStudyButton\";\r\n\r\nexport default {\r\n  name: \"ECTimeStudy\",\r\n  components: {\r\n    TimeStudyButton,\r\n    HintText\r\n  },\r\n  props: {\r\n    setup: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      hasRequirement: false,\r\n      requirement: {\r\n        current: new Decimal(),\r\n        total: new Decimal()\r\n      },\r\n      completions: 0,\r\n      showTotalCompletions: false,\r\n      isRunning: false,\r\n      isUnlocked: false,\r\n    };\r\n  },\r\n  computed: {\r\n    study() {\r\n      return this.setup.study;\r\n    },\r\n    id() {\r\n      return this.study.id;\r\n    },\r\n    config() {\r\n      return this.study.config;\r\n    },\r\n    hasNumberRequirement() {\r\n      return typeof this.study.requirementCurrent === \"number\";\r\n    },\r\n    formatValue() {\r\n      return this.config.secondary.formatValue;\r\n    },\r\n    // Linebreaks added to avoid twitching in scientific notation\r\n    needsFirstLinebreak() {\r\n      return this.study.id === 7;\r\n    },\r\n    needsSecondLinebreak() {\r\n      return [3, 4, 7].includes(this.study.id);\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      const id = this.id;\r\n      const study = this.study;\r\n      const ec = EternityChallenge(id);\r\n      this.hasRequirement = !Perk.studyECRequirement.isBought && !study.wasRequirementPreviouslyMet;\r\n      this.completions = ec.completions;\r\n      this.showTotalCompletions = !Enslaved.isRunning || id !== 1;\r\n      this.isRunning = EternityChallenge.current?.id === id;\r\n      this.isUnlocked = ec.isUnlocked;\r\n      if (!this.hasRequirement || id > 10) return;\r\n      const requirement = this.requirement;\r\n      if (this.hasNumberRequirement) {\r\n        requirement.total = study.requirementTotal;\r\n        requirement.current = Math.min(study.requirementCurrent, requirement.total);\r\n      } else {\r\n        requirement.total.copyFrom(study.requirementTotal);\r\n        requirement.current.copyFrom(study.requirementCurrent.min(requirement.total));\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <TimeStudyButton :setup=\"setup\">\r\n    <HintText\r\n      type=\"studies\"\r\n      class=\"l-hint-text--time-study\"\r\n    >\r\n      EC{{ id }}\r\n    </HintText>\r\n    Eternity Challenge {{ id }}\r\n    ({{ formatInt(completions) }}<span v-if=\"showTotalCompletions\">/{{ formatInt(5) }}</span>)\r\n    <template v-if=\"hasRequirement\">\r\n      <br>\r\n      Requirement:\r\n      <br v-if=\"needsFirstLinebreak\">\r\n      <span v-if=\"config.secondary.path\">Use only the {{ config.secondary.path }} path</span>\r\n      <span v-else>\r\n        {{ formatValue(requirement.current) }}/{{ formatValue(requirement.total) }}\r\n        <br v-if=\"needsSecondLinebreak\">\r\n        {{ config.secondary.resource }}\r\n      </span>\r\n    </template>\r\n    <span v-if=\"isUnlocked && !isRunning\"><br>Double click to start</span>\r\n    <span v-else-if=\"isRunning\"><br>Currently Running</span>\r\n  </TimeStudyButton>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/time-studies"},"metadata":{},"sourceType":"module"}