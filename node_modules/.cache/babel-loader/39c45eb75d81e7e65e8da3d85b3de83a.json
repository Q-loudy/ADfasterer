{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport GlyphSetName from \"@/components/GlyphSetName\";\nimport GlyphShowcasePanelEntry from \"@/components/modals/GlyphShowcasePanelEntry\";\nimport ModalWrapper from \"@/components/modals/ModalWrapper\";\nexport default {\n  name: \"GlyphShowcasePanelModal\",\n  components: {\n    GlyphSetName,\n    ModalWrapper,\n    GlyphShowcasePanelEntry\n  },\n  props: {\n    name: {\n      type: String,\n      required: true\n    },\n    glyphSet: {\n      type: Array,\n      required: true\n    },\n    isGlyphSelection: {\n      type: Boolean,\n      default: false\n    },\n    showSetName: {\n      type: Boolean,\n      default: true\n    },\n    displaySacrifice: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  data() {\n    return {\n      glyphs: [],\n      gainedLevel: 0,\n      canSacrifice: false,\n      realityGlyphBoost: 0\n    };\n  },\n\n  computed: {\n    maxGlyphEffects() {\n      let maxEffects = 1;\n\n      for (const glyph of this.glyphs) {\n        maxEffects = Math.max(getGlyphEffectsFromBitmask(glyph.effects).filter(e => e.isGenerated).length, maxEffects);\n      }\n\n      return maxEffects;\n    },\n\n    containerClass() {\n      return {\n        \"c-glyph-choice-container\": true,\n        \"c-glyph-choice-container-single\": this.glyphs.length === 1\n      };\n    }\n\n  },\n  methods: {\n    update() {\n      this.glyphs = this.isGlyphSelection ? GlyphSelection.glyphList(GlyphSelection.choiceCount, gainedGlyphLevel(), {\n        isChoosingGlyph: false\n      }) : this.glyphSet.filter(x => x);\n      this.sortGlyphs();\n      this.gainedLevel = gainedGlyphLevel().actualLevel; // There should only be one reality glyph; this picks one pseudo-randomly if multiple are cheated/glitched in\n\n      const realityGlyph = this.glyphs.filter(g => g.type === \"reality\")[0];\n      this.realityGlyphBoost = realityGlyph ? GlyphEffects.realityglyphlevel.effect(realityGlyph.level) : 0;\n    },\n\n    sortGlyphs() {\n      const standardOrder = [\"reality\", \"effarig\", \"power\", \"infinity\", \"replication\", \"time\", \"dilation\", \"cursed\", \"companion\"];\n      this.glyphs.sort((a, b) => standardOrder.indexOf(a.type) - standardOrder.indexOf(b.type));\n    }\n\n  }\n};","map":{"version":3,"sources":["GlyphShowcasePanelModal.vue"],"names":[],"mappings":";;AACA,OAAA,YAAA,MAAA,2BAAA;AACA,OAAA,uBAAA,MAAA,6CAAA;AACA,OAAA,YAAA,MAAA,kCAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,yBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,YADA;AAEA,IAAA,YAFA;AAGA,IAAA;AAHA,GAFA;AAOA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KADA;AAKA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,QAAA,EAAA;AAFA,KALA;AASA,IAAA,gBAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KATA;AAaA,IAAA,WAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAbA;AAiBA,IAAA,gBAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AAjBA,GAPA;;AA6BA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,MAAA,EAAA,EADA;AAEA,MAAA,WAAA,EAAA,CAFA;AAGA,MAAA,YAAA,EAAA,KAHA;AAIA,MAAA,iBAAA,EAAA;AAJA,KAAA;AAMA,GApCA;;AAqCA,EAAA,QAAA,EAAA;AACA,IAAA,eAAA,GAAA;AACA,UAAA,UAAA,GAAA,CAAA;;AACA,WAAA,MAAA,KAAA,IAAA,KAAA,MAAA,EAAA;AACA,QAAA,UAAA,GAAA,IAAA,CAAA,GAAA,CAAA,0BAAA,CAAA,KAAA,CAAA,OAAA,CAAA,CAAA,MAAA,CAAA,CAAA,IAAA,CAAA,CAAA,WAAA,EAAA,MAAA,EAAA,UAAA,CAAA;AACA;;AACA,aAAA,UAAA;AACA,KAPA;;AAQA,IAAA,cAAA,GAAA;AACA,aAAA;AACA,oCAAA,IADA;AAEA,2CAAA,KAAA,MAAA,CAAA,MAAA,KAAA;AAFA,OAAA;AAIA;;AAbA,GArCA;AAoDA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,MAAA,GAAA,KAAA,gBAAA,GACA,cAAA,CAAA,SAAA,CAAA,cAAA,CAAA,WAAA,EAAA,gBAAA,EAAA,EAAA;AAAA,QAAA,eAAA,EAAA;AAAA,OAAA,CADA,GAEA,KAAA,QAAA,CAAA,MAAA,CAAA,CAAA,IAAA,CAAA,CAFA;AAGA,WAAA,UAAA;AACA,WAAA,WAAA,GAAA,gBAAA,GAAA,WAAA,CALA,CAMA;;AACA,YAAA,YAAA,GAAA,KAAA,MAAA,CAAA,MAAA,CAAA,CAAA,IAAA,CAAA,CAAA,IAAA,KAAA,SAAA,EAAA,CAAA,CAAA;AACA,WAAA,iBAAA,GAAA,YAAA,GACA,YAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,YAAA,CAAA,KAAA,CADA,GAEA,CAFA;AAGA,KAZA;;AAaA,IAAA,UAAA,GAAA;AACA,YAAA,aAAA,GAAA,CAAA,SAAA,EAAA,SAAA,EAAA,OAAA,EAAA,UAAA,EAAA,aAAA,EAAA,MAAA,EAAA,UAAA,EACA,QADA,EACA,WADA,CAAA;AAEA,WAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,CAAA,KAAA,aAAA,CAAA,OAAA,CAAA,CAAA,CAAA,IAAA,IAAA,aAAA,CAAA,OAAA,CAAA,CAAA,CAAA,IAAA,CAAA;AACA;;AAjBA;AApDA,CAAA","sourcesContent":["<script>\r\nimport GlyphSetName from \"@/components/GlyphSetName\";\r\nimport GlyphShowcasePanelEntry from \"@/components/modals/GlyphShowcasePanelEntry\";\r\nimport ModalWrapper from \"@/components/modals/ModalWrapper\";\r\n\r\nexport default {\r\n  name: \"GlyphShowcasePanelModal\",\r\n  components: {\r\n    GlyphSetName,\r\n    ModalWrapper,\r\n    GlyphShowcasePanelEntry,\r\n  },\r\n  props: {\r\n    name: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    glyphSet: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    isGlyphSelection: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    showSetName: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    displaySacrifice: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      glyphs: [],\r\n      gainedLevel: 0,\r\n      canSacrifice: false,\r\n      realityGlyphBoost: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    maxGlyphEffects() {\r\n      let maxEffects = 1;\r\n      for (const glyph of this.glyphs) {\r\n        maxEffects = Math.max(getGlyphEffectsFromBitmask(glyph.effects).filter(e => e.isGenerated).length, maxEffects);\r\n      }\r\n      return maxEffects;\r\n    },\r\n    containerClass() {\r\n      return {\r\n        \"c-glyph-choice-container\": true,\r\n        \"c-glyph-choice-container-single\": this.glyphs.length === 1,\r\n      };\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.glyphs = this.isGlyphSelection\r\n        ? GlyphSelection.glyphList(GlyphSelection.choiceCount, gainedGlyphLevel(), { isChoosingGlyph: false })\r\n        : this.glyphSet.filter(x => x);\r\n      this.sortGlyphs();\r\n      this.gainedLevel = gainedGlyphLevel().actualLevel;\r\n      // There should only be one reality glyph; this picks one pseudo-randomly if multiple are cheated/glitched in\r\n      const realityGlyph = this.glyphs.filter(g => g.type === \"reality\")[0];\r\n      this.realityGlyphBoost = realityGlyph\r\n        ? GlyphEffects.realityglyphlevel.effect(realityGlyph.level)\r\n        : 0;\r\n    },\r\n    sortGlyphs() {\r\n      const standardOrder = [\"reality\", \"effarig\", \"power\", \"infinity\", \"replication\", \"time\", \"dilation\",\r\n        \"cursed\", \"companion\"];\r\n      this.glyphs.sort((a, b) => standardOrder.indexOf(a.type) - standardOrder.indexOf(b.type));\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapper>\r\n    <template #header>\r\n      {{ name }}\r\n    </template>\r\n    <div v-if=\"isGlyphSelection\">\r\n      Projected Glyph Level: {{ formatInt(gainedLevel) }}\r\n    </div>\r\n    <GlyphSetName\r\n      v-if=\"showSetName\"\r\n      :glyph-set=\"glyphs\"\r\n      :force-color=\"true\"\r\n    />\r\n    <div :class=\"containerClass\">\r\n      <GlyphShowcasePanelEntry\r\n        v-for=\"(glyph, idx) in glyphs\"\r\n        :key=\"idx\"\r\n        class=\"c-glyph-choice-single-glyph\"\r\n        :idx=\"idx\"\r\n        :glyph=\"glyph\"\r\n        :show-level=\"!isGlyphSelection\"\r\n        :reality-glyph-boost=\"realityGlyphBoost\"\r\n        :max-glyph-effects=\"maxGlyphEffects\"\r\n        :show-sacrifice=\"displaySacrifice\"\r\n      />\r\n    </div>\r\n  </ModalWrapper>\r\n</template>\r\n\r\n<style scoped>\r\n.c-glyph-choice-container {\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  width: 74rem;\r\n}\r\n\r\n.c-glyph-choice-container-single {\r\n  width: 37rem;\r\n}\r\n\r\n.c-glyph-choice-single-glyph {\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 36rem;\r\n  height: 12rem;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  border-radius: var(--var-border-radius, 0.5rem);\r\n  margin: 0.5rem;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/modals"},"metadata":{},"sourceType":"module"}