{"ast":null,"code":"import AutosaveIntervalSlider from \"./AutosaveIntervalSlider\";\nimport OpenModalHotkeysButton from \"@/components/OpenModalHotkeysButton\";\nimport OptionsButton from \"@/components/OptionsButton\";\nimport PrimaryToggleButton from \"@/components/PrimaryToggleButton\";\nimport SaveFileName from \"./SaveFileName\";\nimport { STEAM } from \"@/env\";\nexport default {\n  name: \"OptionsSavingTab\",\n  components: {\n    AutosaveIntervalSlider,\n    OpenModalHotkeysButton,\n    OptionsButton,\n    PrimaryToggleButton,\n    SaveFileName\n  },\n\n  data() {\n    return {\n      cloudAvailable: false,\n      cloudEnabled: false,\n      forceCloudOverwrite: false,\n      showCloudModal: false,\n      syncSaveIntervals: false,\n      showTimeSinceSave: false,\n      hideGoogleName: false,\n      loggedIn: false,\n      userName: \"\",\n      canSpeedrun: false,\n      inSpeedrun: false,\n      creditsClosed: false,\n      canModifySeed: false\n    };\n  },\n\n  computed: {\n    modalTooltip() {\n      return `The game will detect certain situations where you might not want to overwrite your cloud save, and show\n        you a modal with more information if this is ON.`;\n    },\n\n    overwriteTooltip() {\n      if (this.showCloudModal) return \"This setting does nothing since the modal is being shown.\";\n      return this.forceCloudOverwrite ? `Your local save will always overwrite your cloud save no matter what.` : `Save conflicts will prevent your local save from being saved to the cloud.`;\n    },\n\n    STEAM() {\n      return STEAM;\n    }\n\n  },\n  watch: {\n    cloudEnabled(newValue) {\n      player.options.cloudEnabled = newValue;\n    },\n\n    forceCloudOverwrite(newValue) {\n      player.options.forceCloudOverwrite = newValue;\n    },\n\n    showCloudModal(newValue) {\n      player.options.showCloudModal = newValue;\n    },\n\n    syncSaveIntervals(newValue) {\n      player.options.syncSaveIntervals = newValue;\n    },\n\n    showTimeSinceSave(newValue) {\n      player.options.showTimeSinceSave = newValue;\n    },\n\n    hideGoogleName(newValue) {\n      player.options.hideGoogleName = newValue;\n    }\n\n  },\n  methods: {\n    update() {\n      const options = player.options;\n      this.cloudAvailable = Cloud.isAvailable;\n      this.cloudEnabled = options.cloudEnabled;\n      this.forceCloudOverwrite = options.forceCloudOverwrite;\n      this.showCloudModal = options.showCloudModal;\n      this.syncSaveIntervals = options.syncSaveIntervals;\n      this.showTimeSinceSave = options.showTimeSinceSave;\n      this.hideGoogleName = options.hideGoogleName;\n      this.loggedIn = Cloud.loggedIn;\n      this.canSpeedrun = player.speedrun.isUnlocked;\n      this.inSpeedrun = player.speedrun.isActive;\n      this.canModifySeed = Speedrun.canModifySeed();\n      this.creditsClosed = GameEnd.creditsEverClosed;\n      if (!this.loggedIn) return;\n      this.userName = Cloud.user.displayName;\n    },\n\n    importAsFile(event) {\n      // This happens if the file dialog is canceled instead of a file being selected\n      if (event.target.files.length === 0) return;\n      const reader = new FileReader();\n\n      reader.onload = function () {\n        // File importing behavior should use the behavior on the existing and to-be-overwritten save instead of the\n        // settings in the to-be-imported save. This is largely because the former is more easily edited by the player,\n        // and in contrast with the import-as-string case which allows the player to choose.\n        // Note: Do not move this into GameStorage.import, as this would cause the offline progress choice in the text\n        // import modal (the only other place GameStorage.import is called) to always be overridden\n        GameStorage.offlineEnabled = player.options.offlineProgress;\n        GameStorage.offlineTicks = player.options.offlineTicks;\n        GameStorage.import(reader.result);\n      };\n\n      reader.readAsText(event.target.files[0]);\n    },\n\n    openSeedModal() {\n      if (this.canModifySeed) {\n        Modal.modifySeed.show();\n      } else {\n        Modal.message.show(`You cannot modify your seed any more. Glyph RNG has already been used to generate\n          at least one Glyph on this run.`);\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["OptionsSavingTab.vue"],"names":[],"mappings":"AACA,OAAA,sBAAA,MAAA,0BAAA;AACA,OAAA,sBAAA,MAAA,qCAAA;AACA,OAAA,aAAA,MAAA,4BAAA;AACA,OAAA,mBAAA,MAAA,kCAAA;AACA,OAAA,YAAA,MAAA,gBAAA;AAEA,SAAA,KAAA,QAAA,OAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,kBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,sBADA;AAEA,IAAA,sBAFA;AAGA,IAAA,aAHA;AAIA,IAAA,mBAJA;AAKA,IAAA;AALA,GAFA;;AASA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,cAAA,EAAA,KADA;AAEA,MAAA,YAAA,EAAA,KAFA;AAGA,MAAA,mBAAA,EAAA,KAHA;AAIA,MAAA,cAAA,EAAA,KAJA;AAKA,MAAA,iBAAA,EAAA,KALA;AAMA,MAAA,iBAAA,EAAA,KANA;AAOA,MAAA,cAAA,EAAA,KAPA;AAQA,MAAA,QAAA,EAAA,KARA;AASA,MAAA,QAAA,EAAA,EATA;AAUA,MAAA,WAAA,EAAA,KAVA;AAWA,MAAA,UAAA,EAAA,KAXA;AAYA,MAAA,aAAA,EAAA,KAZA;AAaA,MAAA,aAAA,EAAA;AAbA,KAAA;AAeA,GAzBA;;AA0BA,EAAA,QAAA,EAAA;AACA,IAAA,YAAA,GAAA;AACA,aAAA;AACA,yDADA;AAEA,KAJA;;AAKA,IAAA,gBAAA,GAAA;AACA,UAAA,KAAA,cAAA,EAAA,OAAA,2DAAA;AACA,aAAA,KAAA,mBAAA,GACA,uEADA,GAEA,4EAFA;AAGA,KAVA;;AAWA,IAAA,KAAA,GAAA;AACA,aAAA,KAAA;AACA;;AAbA,GA1BA;AAyCA,EAAA,KAAA,EAAA;AACA,IAAA,YAAA,CAAA,QAAA,EAAA;AACA,MAAA,MAAA,CAAA,OAAA,CAAA,YAAA,GAAA,QAAA;AACA,KAHA;;AAIA,IAAA,mBAAA,CAAA,QAAA,EAAA;AACA,MAAA,MAAA,CAAA,OAAA,CAAA,mBAAA,GAAA,QAAA;AACA,KANA;;AAOA,IAAA,cAAA,CAAA,QAAA,EAAA;AACA,MAAA,MAAA,CAAA,OAAA,CAAA,cAAA,GAAA,QAAA;AACA,KATA;;AAUA,IAAA,iBAAA,CAAA,QAAA,EAAA;AACA,MAAA,MAAA,CAAA,OAAA,CAAA,iBAAA,GAAA,QAAA;AACA,KAZA;;AAaA,IAAA,iBAAA,CAAA,QAAA,EAAA;AACA,MAAA,MAAA,CAAA,OAAA,CAAA,iBAAA,GAAA,QAAA;AACA,KAfA;;AAgBA,IAAA,cAAA,CAAA,QAAA,EAAA;AACA,MAAA,MAAA,CAAA,OAAA,CAAA,cAAA,GAAA,QAAA;AACA;;AAlBA,GAzCA;AA6DA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,YAAA,OAAA,GAAA,MAAA,CAAA,OAAA;AACA,WAAA,cAAA,GAAA,KAAA,CAAA,WAAA;AACA,WAAA,YAAA,GAAA,OAAA,CAAA,YAAA;AACA,WAAA,mBAAA,GAAA,OAAA,CAAA,mBAAA;AACA,WAAA,cAAA,GAAA,OAAA,CAAA,cAAA;AACA,WAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA;AACA,WAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA;AACA,WAAA,cAAA,GAAA,OAAA,CAAA,cAAA;AACA,WAAA,QAAA,GAAA,KAAA,CAAA,QAAA;AACA,WAAA,WAAA,GAAA,MAAA,CAAA,QAAA,CAAA,UAAA;AACA,WAAA,UAAA,GAAA,MAAA,CAAA,QAAA,CAAA,QAAA;AACA,WAAA,aAAA,GAAA,QAAA,CAAA,aAAA,EAAA;AACA,WAAA,aAAA,GAAA,OAAA,CAAA,iBAAA;AACA,UAAA,CAAA,KAAA,QAAA,EAAA;AACA,WAAA,QAAA,GAAA,KAAA,CAAA,IAAA,CAAA,WAAA;AACA,KAjBA;;AAkBA,IAAA,YAAA,CAAA,KAAA,EAAA;AACA;AACA,UAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AAEA,YAAA,MAAA,GAAA,IAAA,UAAA,EAAA;;AACA,MAAA,MAAA,CAAA,MAAA,GAAA,YAAA;AACA;AACA;AACA;AACA;AACA;AACA,QAAA,WAAA,CAAA,cAAA,GAAA,MAAA,CAAA,OAAA,CAAA,eAAA;AACA,QAAA,WAAA,CAAA,YAAA,GAAA,MAAA,CAAA,OAAA,CAAA,YAAA;AACA,QAAA,WAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA;AACA,OATA;;AAUA,MAAA,MAAA,CAAA,UAAA,CAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AACA,KAlCA;;AAmCA,IAAA,aAAA,GAAA;AACA,UAAA,KAAA,aAAA,EAAA;AACA,QAAA,KAAA,CAAA,UAAA,CAAA,IAAA;AACA,OAFA,MAEA;AACA,QAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA;AACA,0CADA;AAEA;AACA;;AA1CA;AA7DA,CAAA","sourcesContent":["<script>\r\nimport AutosaveIntervalSlider from \"./AutosaveIntervalSlider\";\r\nimport OpenModalHotkeysButton from \"@/components/OpenModalHotkeysButton\";\r\nimport OptionsButton from \"@/components/OptionsButton\";\r\nimport PrimaryToggleButton from \"@/components/PrimaryToggleButton\";\r\nimport SaveFileName from \"./SaveFileName\";\r\n\r\nimport { STEAM } from \"@/env\";\r\n\r\nexport default {\r\n  name: \"OptionsSavingTab\",\r\n  components: {\r\n    AutosaveIntervalSlider,\r\n    OpenModalHotkeysButton,\r\n    OptionsButton,\r\n    PrimaryToggleButton,\r\n    SaveFileName\r\n  },\r\n  data() {\r\n    return {\r\n      cloudAvailable: false,\r\n      cloudEnabled: false,\r\n      forceCloudOverwrite: false,\r\n      showCloudModal: false,\r\n      syncSaveIntervals: false,\r\n      showTimeSinceSave: false,\r\n      hideGoogleName: false,\r\n      loggedIn: false,\r\n      userName: \"\",\r\n      canSpeedrun: false,\r\n      inSpeedrun: false,\r\n      creditsClosed: false,\r\n      canModifySeed: false,\r\n    };\r\n  },\r\n  computed: {\r\n    modalTooltip() {\r\n      return `The game will detect certain situations where you might not want to overwrite your cloud save, and show\r\n        you a modal with more information if this is ON.`;\r\n    },\r\n    overwriteTooltip() {\r\n      if (this.showCloudModal) return \"This setting does nothing since the modal is being shown.\";\r\n      return this.forceCloudOverwrite\r\n        ? `Your local save will always overwrite your cloud save no matter what.`\r\n        : `Save conflicts will prevent your local save from being saved to the cloud.`;\r\n    },\r\n    STEAM() {\r\n      return STEAM;\r\n    }\r\n  },\r\n  watch: {\r\n    cloudEnabled(newValue) {\r\n      player.options.cloudEnabled = newValue;\r\n    },\r\n    forceCloudOverwrite(newValue) {\r\n      player.options.forceCloudOverwrite = newValue;\r\n    },\r\n    showCloudModal(newValue) {\r\n      player.options.showCloudModal = newValue;\r\n    },\r\n    syncSaveIntervals(newValue) {\r\n      player.options.syncSaveIntervals = newValue;\r\n    },\r\n    showTimeSinceSave(newValue) {\r\n      player.options.showTimeSinceSave = newValue;\r\n    },\r\n    hideGoogleName(newValue) {\r\n      player.options.hideGoogleName = newValue;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      const options = player.options;\r\n      this.cloudAvailable = Cloud.isAvailable;\r\n      this.cloudEnabled = options.cloudEnabled;\r\n      this.forceCloudOverwrite = options.forceCloudOverwrite;\r\n      this.showCloudModal = options.showCloudModal;\r\n      this.syncSaveIntervals = options.syncSaveIntervals;\r\n      this.showTimeSinceSave = options.showTimeSinceSave;\r\n      this.hideGoogleName = options.hideGoogleName;\r\n      this.loggedIn = Cloud.loggedIn;\r\n      this.canSpeedrun = player.speedrun.isUnlocked;\r\n      this.inSpeedrun = player.speedrun.isActive;\r\n      this.canModifySeed = Speedrun.canModifySeed();\r\n      this.creditsClosed = GameEnd.creditsEverClosed;\r\n      if (!this.loggedIn) return;\r\n      this.userName = Cloud.user.displayName;\r\n    },\r\n    importAsFile(event) {\r\n      // This happens if the file dialog is canceled instead of a file being selected\r\n      if (event.target.files.length === 0) return;\r\n\r\n      const reader = new FileReader();\r\n      reader.onload = function() {\r\n        // File importing behavior should use the behavior on the existing and to-be-overwritten save instead of the\r\n        // settings in the to-be-imported save. This is largely because the former is more easily edited by the player,\r\n        // and in contrast with the import-as-string case which allows the player to choose.\r\n        // Note: Do not move this into GameStorage.import, as this would cause the offline progress choice in the text\r\n        // import modal (the only other place GameStorage.import is called) to always be overridden\r\n        GameStorage.offlineEnabled = player.options.offlineProgress;\r\n        GameStorage.offlineTicks = player.options.offlineTicks;\r\n        GameStorage.import(reader.result);\r\n      };\r\n      reader.readAsText(event.target.files[0]);\r\n    },\r\n    openSeedModal() {\r\n      if (this.canModifySeed) {\r\n        Modal.modifySeed.show();\r\n      } else {\r\n        Modal.message.show(`You cannot modify your seed any more. Glyph RNG has already been used to generate\r\n          at least one Glyph on this run.`);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-options-tab\">\r\n    <div class=\"l-options-grid\">\r\n      <div class=\"l-options-grid__row\">\r\n        <OptionsButton\r\n          class=\"o-primary-btn--option_font-x-large\"\r\n          :class=\"{ 'o-pelle-disabled-pointer': creditsClosed }\"\r\n          onclick=\"GameStorage.export()\"\r\n        >\r\n          Export save\r\n        </OptionsButton>\r\n        <OptionsButton\r\n          class=\"o-primary-btn--option_font-x-large\"\r\n          :class=\"{ 'o-pelle-disabled-pointer': creditsClosed }\"\r\n          onclick=\"Modal.import.show()\"\r\n        >\r\n          Import save\r\n        </OptionsButton>\r\n        <OptionsButton\r\n          class=\"o-primary-btn--option_font-x-large\"\r\n          :class=\"{ 'o-pelle-disabled-pointer': creditsClosed }\"\r\n          onclick=\"Modal.hardReset.show()\"\r\n        >\r\n          RESET THE GAME\r\n        </OptionsButton>\r\n      </div>\r\n      <div class=\"l-options-grid__row\">\r\n        <OptionsButton\r\n          class=\"o-primary-btn--option_font-x-large\"\r\n          :class=\"{ 'o-pelle-disabled-pointer': creditsClosed }\"\r\n          onclick=\"GameStorage.save(false, true)\"\r\n        >\r\n          Save game\r\n        </OptionsButton>\r\n        <OptionsButton\r\n          class=\"o-primary-btn--option_font-x-large\"\r\n          :class=\"{ 'o-pelle-disabled-pointer': creditsClosed }\"\r\n          onclick=\"Modal.loadGame.show()\"\r\n        >\r\n          Choose save\r\n        </OptionsButton>\r\n        <AutosaveIntervalSlider\r\n          :min=\"10\"\r\n          :max=\"60\"\r\n          :interval=\"1\"\r\n        />\r\n      </div>\r\n      <div class=\"l-options-grid__row\">\r\n        <OptionsButton\r\n          :class=\"{ 'o-pelle-disabled-pointer': creditsClosed }\"\r\n          onclick=\"GameStorage.exportAsFile()\"\r\n        >\r\n          Export save as file\r\n        </OptionsButton>\r\n        <OptionsButton\r\n          class=\"c-file-import-button\"\r\n          :class=\"{ 'o-pelle-disabled-pointer': creditsClosed }\"\r\n        >\r\n          <input\r\n            class=\"c-file-import\"\r\n            type=\"file\"\r\n            accept=\".txt\"\r\n            @change=\"importAsFile\"\r\n          >\r\n          <label for=\"file\">Import save from file</label>\r\n        </OptionsButton>\r\n        <PrimaryToggleButton\r\n          v-model=\"showTimeSinceSave\"\r\n          class=\"o-primary-btn--option l-options-grid__button\"\r\n          :class=\"{ 'o-pelle-disabled-pointer': creditsClosed }\"\r\n          label=\"Display time since save:\"\r\n        />\r\n      </div>\r\n      <div class=\"l-options-grid__row\">\r\n        <OptionsButton\r\n          :class=\"{ 'o-pelle-disabled-pointer': creditsClosed }\"\r\n          onclick=\"Modal.backupWindows.show()\"\r\n        >\r\n          Open Automatic Save Backup Menu\r\n        </OptionsButton>\r\n        <SaveFileName />\r\n      </div>\r\n      <div class=\"l-options-grid__row\">\r\n        <OptionsButton\r\n          v-if=\"canSpeedrun\"\r\n          class=\"o-primary-btn--option_font-x-large\"\r\n          :class=\"{ 'o-pelle-disabled-pointer': creditsClosed }\"\r\n          onclick=\"Modal.enterSpeedrun.show()\"\r\n        >\r\n          Start Speedrun\r\n        </OptionsButton>\r\n        <OptionsButton\r\n          v-if=\"inSpeedrun\"\r\n          :class=\"{\r\n            'o-pelle-disabled-pointer': creditsClosed,\r\n            'o-primary-btn--disabled': !canModifySeed\r\n          }\"\r\n          @click=\"openSeedModal()\"\r\n        >\r\n          Change Glyph RNG Seed\r\n        </OptionsButton>\r\n      </div>\r\n      <OpenModalHotkeysButton />\r\n    </div>\r\n    <h2\r\n      v-if=\"cloudAvailable\"\r\n      class=\"c-cloud-options-header\"\r\n    >\r\n      <span v-if=\"hideGoogleName\">Logged in to Google <i>(name hidden)</i></span>\r\n      <span v-else-if=\"loggedIn\">Logged in as {{ userName }}</span>\r\n      <span v-else>Not logged in</span>\r\n    </h2>\r\n    <div v-if=\"loggedIn\">\r\n      <span v-if=\"cloudEnabled\">Cloud Saving will occur automatically every 10 minutes.</span>\r\n      <span v-else>Cloud Saving has been disabled on this save.</span>\r\n    </div>\r\n    <div\r\n      v-if=\"cloudAvailable\"\r\n      class=\"l-options-grid\"\r\n    >\r\n      <div\r\n        v-if=\"!STEAM\"\r\n        class=\"l-options-grid__row\"\r\n      >\r\n        <OptionsButton\r\n          v-if=\"loggedIn\"\r\n          onclick=\"GameOptions.logout()\"\r\n        >\r\n          Disconnect Google Account and disable Cloud Saving\r\n        </OptionsButton>\r\n        <OptionsButton\r\n          v-else\r\n          v-tooltip=\"'This will connect your Google Account to your Antimatter Dimensions savefiles'\"\r\n          :class=\"{ 'o-pelle-disabled-pointer': creditsClosed }\"\r\n          onclick=\"GameOptions.login()\"\r\n        >\r\n          Login with Google to enable Cloud Saving\r\n        </OptionsButton>\r\n        <PrimaryToggleButton\r\n          v-if=\"loggedIn\"\r\n          v-model=\"hideGoogleName\"\r\n          v-tooltip=\"'This will hide your Google Account name from the UI for privacy. Saving/loading is unaffected.'\"\r\n          class=\"o-primary-btn--option l-options-grid__button\"\r\n          :class=\"{ 'o-pelle-disabled-pointer': creditsClosed }\"\r\n          label=\"Hide Google Account name:\"\r\n        />\r\n      </div>\r\n      <div\r\n        v-if=\"loggedIn\"\r\n        class=\"l-options-grid__row\"\r\n      >\r\n        <OptionsButton\r\n          onclick=\"GameOptions.cloudSave()\"\r\n          :class=\"{ 'o-pelle-disabled-pointer': creditsClosed }\"\r\n        >\r\n          Cloud save\r\n        </OptionsButton>\r\n        <OptionsButton\r\n          onclick=\"GameOptions.cloudLoad()\"\r\n          :class=\"{ 'o-pelle-disabled-pointer': creditsClosed }\"\r\n        >\r\n          Cloud load\r\n        </OptionsButton>\r\n        <PrimaryToggleButton\r\n          v-model=\"syncSaveIntervals\"\r\n          class=\"o-primary-btn--option l-options-grid__button\"\r\n          :class=\"{ 'o-pelle-disabled-pointer': creditsClosed }\"\r\n          label=\"Force local save before cloud saving:\"\r\n        />\r\n      </div>\r\n      <div\r\n        v-if=\"loggedIn\"\r\n        class=\"l-options-grid__row\"\r\n      >\r\n        <PrimaryToggleButton\r\n          v-model=\"cloudEnabled\"\r\n          class=\"o-primary-btn--option l-options-grid__button\"\r\n          :class=\"{ 'o-pelle-disabled-pointer': creditsClosed }\"\r\n          label=\"Automatic cloud saving/loading:\"\r\n        />\r\n        <PrimaryToggleButton\r\n          v-model=\"showCloudModal\"\r\n          v-tooltip=\"modalTooltip\"\r\n          class=\"o-primary-btn--option l-options-grid__button\"\r\n          :class=\"{ 'o-pelle-disabled-pointer': creditsClosed }\"\r\n          label=\"Show modal if possible saving conflict:\"\r\n        />\r\n        <PrimaryToggleButton\r\n          v-model=\"forceCloudOverwrite\"\r\n          v-tooltip=\"overwriteTooltip\"\r\n          class=\"o-primary-btn--option l-options-grid__button\"\r\n          :class=\"{ 'o-pelle-disabled-pointer': creditsClosed }\"\r\n          label=\"Force cloud saving despite conflicts:\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n"],"sourceRoot":"src/components/tabs/options-saving"},"metadata":{},"sourceType":"module"}