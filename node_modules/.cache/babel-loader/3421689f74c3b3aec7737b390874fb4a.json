{"ast":null,"code":"import \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nexport default {\n  name: \"AutomatorEventLog\",\n\n  data() {\n    return {\n      unsortedEvents: [],\n      newestFirst: false,\n      timestampMode: 0,\n      currentTime: 0,\n      maxEntries: 0,\n      clearOnReality: false,\n      clearOnRestart: false\n    };\n  },\n\n  computed: {\n    events() {\n      // eslint-disable-next-line no-nested-ternary\n      const sorted = this.unsortedEvents.sort((a, b) => a.timestamp === b.timestamp ? a.thisReality === b.thisReality ? a.line - b.line : a.thisReality - b.thisReality : a.timestamp - b.timestamp);\n      return this.newestFirst ? sorted.reverse() : sorted;\n    },\n\n    clearTooltip() {\n      return `Clear all entries (Max. ${this.maxEntries})`;\n    },\n\n    buttonClassObject() {\n      return \"c-automator-docs--button fas\";\n    }\n\n  },\n  watch: {\n    newestFirst(newValue) {\n      player.options.automatorEvents.newestFirst = newValue;\n    },\n\n    timestampMode(newValue) {\n      player.options.automatorEvents.timestampType = newValue;\n    },\n\n    clearOnReality(newValue) {\n      player.options.automatorEvents.clearOnReality = newValue;\n    },\n\n    clearOnRestart(newValue) {\n      player.options.automatorEvents.clearOnRestart = newValue;\n    }\n\n  },\n  methods: {\n    update() {\n      const eventSettings = player.options.automatorEvents;\n      this.unsortedEvents = AutomatorData.eventLog;\n      this.newestFirst = eventSettings.newestFirst;\n      this.timestampMode = eventSettings.timestampType;\n      this.currentTime = Date.now();\n      this.maxEntries = eventSettings.maxEntries;\n      this.clearOnReality = eventSettings.clearOnReality;\n      this.clearOnRestart = eventSettings.clearOnRestart;\n    },\n\n    clearLog() {\n      AutomatorData.clearEventLog();\n      this.update();\n    },\n\n    sortStyle(selected) {\n      return {\n        \"background-color\": selected ? \"var(--color-reality)\" : \"\"\n      };\n    },\n\n    timestampStyle(key) {\n      return {\n        \"background-color\": this.timestampMode === AUTOMATOR_EVENT_TIMESTAMP_MODE[key] ? \"var(--color-reality)\" : \"\"\n      };\n    },\n\n    clearRealityStyle() {\n      return {\n        \"background-color\": this.clearOnReality ? \"var(--color-reality)\" : \"\"\n      };\n    },\n\n    clearRestartStyle() {\n      return {\n        \"background-color\": this.clearOnRestart ? \"var(--color-reality)\" : \"\"\n      };\n    },\n\n    setTimestampMode(key) {\n      this.timestampMode = AUTOMATOR_EVENT_TIMESTAMP_MODE[key];\n    },\n\n    timestamp(entry) {\n      switch (this.timestampMode) {\n        case AUTOMATOR_EVENT_TIMESTAMP_MODE.DISABLED:\n          return \"\";\n\n        case AUTOMATOR_EVENT_TIMESTAMP_MODE.THIS_REALITY:\n          return `, ${TimeSpan.fromSeconds(entry.thisReality).toStringShort()} (real-time) in Reality`;\n\n        case AUTOMATOR_EVENT_TIMESTAMP_MODE.RELATIVE_NOW:\n          return `, ${TimeSpan.fromMilliseconds(this.currentTime - entry.timestamp).toStringShort()} ago`;\n\n        case AUTOMATOR_EVENT_TIMESTAMP_MODE.RELATIVE_PREV:\n          if (entry.timegap === entry.timestamp) return `, first logged event`;\n          return `, ${TimeSpan.fromMilliseconds(entry.timegap).toStringShort()} after previous event`;\n\n        case AUTOMATOR_EVENT_TIMESTAMP_MODE.DATE_TIME:\n          return `, ${Time.toDateTimeString(entry.timestamp)}`;\n\n        default:\n          throw Error(\"Unrecognized timestamp mode in Automator event log\");\n      }\n    },\n\n    scrollToLine(line) {\n      AutomatorScroller.scrollToLine(line);\n      AutomatorHighlighter.updateHighlightedLine(line, LineEnum.Event);\n    }\n\n  }\n};\nconst AUTOMATOR_EVENT_TIMESTAMP_MODE = {\n  DISABLED: 0,\n  THIS_REALITY: 1,\n  RELATIVE_NOW: 2,\n  RELATIVE_PREV: 3,\n  DATE_TIME: 4\n};","map":{"version":3,"sources":["AutomatorEventLog.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nexport default {\r\n  name: \"AutomatorEventLog\",\r\n  data() {\r\n    return {\r\n      unsortedEvents: [],\r\n      newestFirst: false,\r\n      timestampMode: 0,\r\n      currentTime: 0,\r\n      maxEntries: 0,\r\n      clearOnReality: false,\r\n      clearOnRestart: false,\r\n    };\r\n  },\r\n  computed: {\r\n    events() {\r\n      // eslint-disable-next-line no-nested-ternary\r\n      const sorted = this.unsortedEvents.sort((a, b) => (a.timestamp === b.timestamp\r\n        ? (a.thisReality === b.thisReality\r\n          ? a.line - b.line\r\n          : a.thisReality - b.thisReality)\r\n        : a.timestamp - b.timestamp));\r\n      return this.newestFirst ? sorted.reverse() : sorted;\r\n    },\r\n    clearTooltip() {\r\n      return `Clear all entries (Max. ${this.maxEntries})`;\r\n    },\r\n    buttonClassObject() {\r\n      return \"c-automator-docs--button fas\";\r\n    }\r\n  },\r\n  watch: {\r\n    newestFirst(newValue) {\r\n      player.options.automatorEvents.newestFirst = newValue;\r\n    },\r\n    timestampMode(newValue) {\r\n      player.options.automatorEvents.timestampType = newValue;\r\n    },\r\n    clearOnReality(newValue) {\r\n      player.options.automatorEvents.clearOnReality = newValue;\r\n    },\r\n    clearOnRestart(newValue) {\r\n      player.options.automatorEvents.clearOnRestart = newValue;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      const eventSettings = player.options.automatorEvents;\r\n      this.unsortedEvents = AutomatorData.eventLog;\r\n      this.newestFirst = eventSettings.newestFirst;\r\n      this.timestampMode = eventSettings.timestampType;\r\n      this.currentTime = Date.now();\r\n      this.maxEntries = eventSettings.maxEntries;\r\n      this.clearOnReality = eventSettings.clearOnReality;\r\n      this.clearOnRestart = eventSettings.clearOnRestart;\r\n    },\r\n    clearLog() {\r\n      AutomatorData.clearEventLog();\r\n      this.update();\r\n    },\r\n    sortStyle(selected) {\r\n      return {\r\n        \"background-color\": selected ? \"var(--color-reality)\" : \"\"\r\n      };\r\n    },\r\n    timestampStyle(key) {\r\n      return {\r\n        \"background-color\": this.timestampMode === AUTOMATOR_EVENT_TIMESTAMP_MODE[key] ? \"var(--color-reality)\" : \"\"\r\n      };\r\n    },\r\n    clearRealityStyle() {\r\n      return {\r\n        \"background-color\": this.clearOnReality ? \"var(--color-reality)\" : \"\"\r\n      };\r\n    },\r\n    clearRestartStyle() {\r\n      return {\r\n        \"background-color\": this.clearOnRestart ? \"var(--color-reality)\" : \"\"\r\n      };\r\n    },\r\n    setTimestampMode(key) {\r\n      this.timestampMode = AUTOMATOR_EVENT_TIMESTAMP_MODE[key];\r\n    },\r\n    timestamp(entry) {\r\n      switch (this.timestampMode) {\r\n        case AUTOMATOR_EVENT_TIMESTAMP_MODE.DISABLED:\r\n          return \"\";\r\n        case AUTOMATOR_EVENT_TIMESTAMP_MODE.THIS_REALITY:\r\n          return `, ${TimeSpan.fromSeconds(entry.thisReality).toStringShort()} (real-time) in Reality`;\r\n        case AUTOMATOR_EVENT_TIMESTAMP_MODE.RELATIVE_NOW:\r\n          return `, ${TimeSpan.fromMilliseconds(this.currentTime - entry.timestamp).toStringShort()} ago`;\r\n        case AUTOMATOR_EVENT_TIMESTAMP_MODE.RELATIVE_PREV:\r\n          if (entry.timegap === entry.timestamp) return `, first logged event`;\r\n          return `, ${TimeSpan.fromMilliseconds(entry.timegap).toStringShort()} after previous event`;\r\n        case AUTOMATOR_EVENT_TIMESTAMP_MODE.DATE_TIME:\r\n          return `, ${Time.toDateTimeString(entry.timestamp)}`;\r\n        default:\r\n          throw Error(\"Unrecognized timestamp mode in Automator event log\");\r\n      }\r\n    },\r\n    scrollToLine(line) {\r\n      AutomatorScroller.scrollToLine(line);\r\n      AutomatorHighlighter.updateHighlightedLine(line, LineEnum.Event);\r\n    }\r\n  }\r\n};\r\n\r\nconst AUTOMATOR_EVENT_TIMESTAMP_MODE = {\r\n  DISABLED: 0,\r\n  THIS_REALITY: 1,\r\n  RELATIVE_NOW: 2,\r\n  RELATIVE_PREV: 3,\r\n  DATE_TIME: 4,\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"c-automator-docs-page\">\r\n    <div>\r\n      This panel keeps a running event log of all the commands which the automator has recently executed, with a little\r\n      extra info on some of the commands. It may be useful to help you find problems if you find your automator is\r\n      getting stuck in certain spots.\r\n      <br>\r\n      <br>\r\n      While your settings are kept within your savefile, the actual events are not and will disappear on refresh.\r\n      <br>\r\n      <br>\r\n      <b>Entry Sorting:</b>\r\n      <button\r\n        v-tooltip=\"'Oldest results first'\"\r\n        :style=\"sortStyle(!newestFirst)\"\r\n        :class=\"buttonClassObject\"\r\n        class=\"fa-angle-down\"\r\n        @click=\"newestFirst = false\"\r\n      />\r\n      <button\r\n        v-tooltip=\"'Newest results first'\"\r\n        :style=\"sortStyle(newestFirst)\"\r\n        :class=\"buttonClassObject\"\r\n        class=\"fa-angle-up\"\r\n        @click=\"newestFirst = true\"\r\n      />\r\n      <button\r\n        v-tooltip=\"clearTooltip\"\r\n        :class=\"buttonClassObject\"\r\n        class=\"fa-trash\"\r\n        @click=\"clearLog\"\r\n      />\r\n      <button\r\n        v-tooltip=\"'Clear event log every Reality'\"\r\n        :style=\"clearRealityStyle()\"\r\n        :class=\"buttonClassObject\"\r\n        class=\"fa-eraser\"\r\n        @click=\"clearOnReality = !clearOnReality\"\r\n      />\r\n      <button\r\n        v-tooltip=\"'Clear event log on script restart'\"\r\n        :style=\"clearRestartStyle()\"\r\n        :class=\"buttonClassObject\"\r\n        class=\"fa-backspace\"\r\n        @click=\"clearOnRestart = !clearOnRestart\"\r\n      />\r\n    </div>\r\n    <div>\r\n      <b>Timestamp style:</b>\r\n      <button\r\n        v-tooltip=\"'No timestamps'\"\r\n        :style=\"timestampStyle('DISABLED')\"\r\n        :class=\"buttonClassObject\"\r\n        class=\"fa-ban\"\r\n        @click=\"setTimestampMode('DISABLED')\"\r\n      />\r\n      <button\r\n        v-tooltip=\"'Current time this Reality'\"\r\n        :style=\"timestampStyle('THIS_REALITY')\"\r\n        :class=\"buttonClassObject\"\r\n        class=\"fa-stopwatch\"\r\n        @click=\"setTimestampMode('THIS_REALITY')\"\r\n      />\r\n      <button\r\n        v-tooltip=\"'Time elapsed since event'\"\r\n        :style=\"timestampStyle('RELATIVE_NOW')\"\r\n        :class=\"buttonClassObject\"\r\n        class=\"fa-clock\"\r\n        @click=\"setTimestampMode('RELATIVE_NOW')\"\r\n      />\r\n      <button\r\n        v-tooltip=\"'Time since last event'\"\r\n        :style=\"timestampStyle('RELATIVE_PREV')\"\r\n        :class=\"buttonClassObject\"\r\n        class=\"fa-arrow-left\"\r\n        @click=\"setTimestampMode('RELATIVE_PREV')\"\r\n      />\r\n      <button\r\n        v-tooltip=\"'Date and time'\"\r\n        :style=\"timestampStyle('DATE_TIME')\"\r\n        :class=\"buttonClassObject\"\r\n        class=\"fa-user-clock\"\r\n        @click=\"setTimestampMode('DATE_TIME')\"\r\n      />\r\n    </div>\r\n    <span\r\n      v-for=\"(event, id) in events\"\r\n      :key=\"id\"\r\n    >\r\n      <b>Line {{ event.line }}{{ timestamp(event) }}:</b>\r\n      <button\r\n        v-tooltip=\"'Jump to line'\"\r\n        :class=\"buttonClassObject\"\r\n        class=\"fa-arrow-circle-right\"\r\n        @click=\"scrollToLine(event.line)\"\r\n      />\r\n      <div class=\"c-automator-docs-page__indented\">\r\n        <i>{{ event.message }}</i>\r\n      </div>\r\n    </span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/automator"},"metadata":{},"sourceType":"module"}