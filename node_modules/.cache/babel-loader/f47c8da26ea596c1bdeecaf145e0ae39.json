{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport GlyphComponent from \"@/components/GlyphComponent\";\nimport GlyphCustomizationSingleType from \"@/components/modals/options/glyph-appearance/GlyphCustomizationSingleType\";\nimport PrimaryButton from \"@/components/PrimaryButton\";\nimport PrimaryToggleButton from \"@/components/PrimaryToggleButton\";\nexport default {\n  name: \"GlyphCustomization\",\n  components: {\n    GlyphCustomizationSingleType,\n    PrimaryButton,\n    PrimaryToggleButton,\n    GlyphComponent\n  },\n\n  data() {\n    return {\n      enabled: false,\n      // This is here to force a re-render if the appearance is set to the default values\n      defaultKeySwap: false,\n      selectedIndex: 0\n    };\n  },\n\n  computed: {\n    cosmeticTypes() {\n      // We want to sort the base types in a way consistent with type orders within most of the rest of the game. We\n      // can safely slice the first 5 and insert them back in the correct order because they'll always be unlocked.\n      const nonBaseTypes = CosmeticGlyphTypes.list.filter(t => t.canCustomize).map(t => t.id).slice(5);\n      const sortedBase = [\"power\", \"infinity\", \"replication\", \"time\", \"dilation\"];\n      return sortedBase.concat(nonBaseTypes);\n    },\n\n    glyphIconProps() {\n      return {\n        size: \"2.5rem\",\n        \"glow-blur\": \"0.3rem\",\n        \"glow-spread\": \"0.1rem\",\n        \"text-proportion\": 0.7\n      };\n    },\n\n    hasCustomSets() {\n      return GlyphAppearanceHandler.unlockedSets.length > 0;\n    },\n\n    hasSpecialTypes() {\n      return GlyphAppearanceHandler.availableTypes.length > 0;\n    }\n\n  },\n  watch: {\n    enabled(newValue) {\n      player.reality.glyphs.cosmetics.active = newValue;\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\n    }\n\n  },\n  methods: {\n    update() {\n      this.enabled = player.reality.glyphs.cosmetics.active;\n      this.defaultKeySwap = true;\n    },\n\n    resetAll() {\n      const cosmetics = player.reality.glyphs.cosmetics;\n      cosmetics.symbolMap = {};\n      cosmetics.colorMap = {};\n      this.defaultKeySwap = false;\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\n    },\n\n    resetSingle() {\n      const cosmetics = player.reality.glyphs.cosmetics;\n      const currType = this.cosmeticTypes[this.selectedIndex];\n      cosmetics.symbolMap[currType] = undefined;\n      cosmetics.colorMap[currType] = undefined;\n      this.defaultKeySwap = false;\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\n    },\n\n    fakeGlyph(type) {\n      let typeName = \"power\";\n      if (type === \"reality\") typeName = \"reality\";\n      if (type === \"cursed\") typeName = \"cursed\";\n      return {\n        // This are just dummy values to make sure that GlyphComponent doesn't throw errors; only the cosmetic aspects\n        // will end up being visible in this case anyway (as they override anything type would otherwise show). Type\n        // looks particularly odd because reality glyphs need that passed in for the color animation, and cursed ones\n        // are inverted, but power is an okay placeholder for anything else. We can't pass in type or else it will error\n        // out with cosmetic types.\n        type: typeName,\n        strength: 1,\n        cosmetic: type\n      };\n    },\n\n    typeClass(index) {\n      return {\n        \"c-single-type\": true,\n        \"o-disabled-cosmetics\": !this.enabled,\n        \"c-type-current\": this.selectedIndex === index,\n        \"c-type-other\": this.selectedIndex !== index\n      };\n    },\n\n    resetIndividual() {\n      for (const glyph of Glyphs.allGlyphs) {\n        if (!glyph.fixedCosmetic) glyph.cosmetic = undefined;\n      }\n\n      this.defaultKeySwap = false;\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\n    }\n\n  }\n};","map":{"version":3,"sources":["GlyphCustomization.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport GlyphComponent from \"@/components/GlyphComponent\";\r\nimport GlyphCustomizationSingleType from \"@/components/modals/options/glyph-appearance/GlyphCustomizationSingleType\";\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\nimport PrimaryToggleButton from \"@/components/PrimaryToggleButton\";\r\n\r\nexport default {\r\n  name: \"GlyphCustomization\",\r\n  components: {\r\n    GlyphCustomizationSingleType,\r\n    PrimaryButton,\r\n    PrimaryToggleButton,\r\n    GlyphComponent\r\n  },\r\n  data() {\r\n    return {\r\n      enabled: false,\r\n      // This is here to force a re-render if the appearance is set to the default values\r\n      defaultKeySwap: false,\r\n      selectedIndex: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    cosmeticTypes() {\r\n      // We want to sort the base types in a way consistent with type orders within most of the rest of the game. We\r\n      // can safely slice the first 5 and insert them back in the correct order because they'll always be unlocked.\r\n      const nonBaseTypes = CosmeticGlyphTypes.list.filter(t => t.canCustomize).map(t => t.id).slice(5);\r\n      const sortedBase = [\"power\", \"infinity\", \"replication\", \"time\", \"dilation\"];\r\n      return sortedBase.concat(nonBaseTypes);\r\n    },\r\n    glyphIconProps() {\r\n      return {\r\n        size: \"2.5rem\",\r\n        \"glow-blur\": \"0.3rem\",\r\n        \"glow-spread\": \"0.1rem\",\r\n        \"text-proportion\": 0.7\r\n      };\r\n    },\r\n    hasCustomSets() {\r\n      return GlyphAppearanceHandler.unlockedSets.length > 0;\r\n    },\r\n    hasSpecialTypes() {\r\n      return GlyphAppearanceHandler.availableTypes.length > 0;\r\n    }\r\n  },\r\n  watch: {\r\n    enabled(newValue) {\r\n      player.reality.glyphs.cosmetics.active = newValue;\r\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\r\n    },\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.enabled = player.reality.glyphs.cosmetics.active;\r\n      this.defaultKeySwap = true;\r\n    },\r\n    resetAll() {\r\n      const cosmetics = player.reality.glyphs.cosmetics;\r\n      cosmetics.symbolMap = {};\r\n      cosmetics.colorMap = {};\r\n      this.defaultKeySwap = false;\r\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\r\n    },\r\n    resetSingle() {\r\n      const cosmetics = player.reality.glyphs.cosmetics;\r\n      const currType = this.cosmeticTypes[this.selectedIndex];\r\n      cosmetics.symbolMap[currType] = undefined;\r\n      cosmetics.colorMap[currType] = undefined;\r\n      this.defaultKeySwap = false;\r\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\r\n    },\r\n    fakeGlyph(type) {\r\n      let typeName = \"power\";\r\n      if (type === \"reality\") typeName = \"reality\";\r\n      if (type === \"cursed\") typeName = \"cursed\";\r\n      return {\r\n        // This are just dummy values to make sure that GlyphComponent doesn't throw errors; only the cosmetic aspects\r\n        // will end up being visible in this case anyway (as they override anything type would otherwise show). Type\r\n        // looks particularly odd because reality glyphs need that passed in for the color animation, and cursed ones\r\n        // are inverted, but power is an okay placeholder for anything else. We can't pass in type or else it will error\r\n        // out with cosmetic types.\r\n        type: typeName,\r\n        strength: 1,\r\n        cosmetic: type,\r\n      };\r\n    },\r\n    typeClass(index) {\r\n      return {\r\n        \"c-single-type\": true,\r\n        \"o-disabled-cosmetics\": !this.enabled,\r\n        \"c-type-current\": this.selectedIndex === index,\r\n        \"c-type-other\": this.selectedIndex !== index,\r\n      };\r\n    },\r\n    resetIndividual() {\r\n      for (const glyph of Glyphs.allGlyphs) {\r\n        if (!glyph.fixedCosmetic) glyph.cosmetic = undefined;\r\n      }\r\n      this.defaultKeySwap = false;\r\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"c-glyph-customization-group\">\r\n    <b>Custom Glyph Appearance</b>\r\n    <PrimaryToggleButton\r\n      v-model=\"enabled\"\r\n      class=\"o-primary-btn--subtab-option\"\r\n      on=\"Enabled\"\r\n      off=\"Disabled\"\r\n    />\r\n    <br>\r\n    <div v-if=\"hasCustomSets\">\r\n      Reset Appearances to Default:\r\n      <PrimaryButton\r\n        class=\"o-primary-btn--subtab-option\"\r\n        :class=\"{ 'o-primary-btn--disabled' : !enabled }\"\r\n        @click=\"resetAll\"\r\n      >\r\n        All Types\r\n      </PrimaryButton>\r\n      <PrimaryButton\r\n        class=\"o-primary-btn--subtab-option\"\r\n        :class=\"{ 'o-primary-btn--disabled' : !enabled }\"\r\n        @click=\"resetSingle\"\r\n      >\r\n        This Type\r\n      </PrimaryButton>\r\n      <br>\r\n      <i>This will not reset any individually-modified Glyphs.</i>\r\n      <br>\r\n      <br>\r\n      Glyph Type:\r\n      <br>\r\n      <div class=\"c-type-selection\">\r\n        <div\r\n          v-for=\"(type, index) in cosmeticTypes\"\r\n          :key=\"type\"\r\n          :class=\"typeClass(index)\"\r\n          @click=\"selectedIndex = index\"\r\n        >\r\n          <GlyphComponent\r\n            v-tooltip=\"type.capitalize()\"\r\n            v-bind=\"glyphIconProps\"\r\n            :glyph=\"fakeGlyph(type)\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <GlyphCustomizationSingleType\r\n        :key=\"selectedIndex + enabled + defaultKeySwap\"\r\n        :type=\"cosmeticTypes[selectedIndex]\"\r\n      />\r\n      Note: Some options may cause very poor color contrast or readability on certain themes with certain Glyph types.\r\n    </div>\r\n    <div v-else>\r\n      You currently have no available options for changing the default appearance of your Glyphs. To unlock some, visit\r\n      the Shop Tab or beat the game.\r\n      <br>\r\n      <br>\r\n      <span v-if=\"hasSpecialTypes\">\r\n        Enabling this setting will allow you to change individual Glyphs to special cosmetic types you have unlocked.\r\n      </span>\r\n      <span v-else>\r\n        Enabling or disabling this option will currently do nothing.\r\n      </span>\r\n    </div>\r\n    <PrimaryButton\r\n      class=\"o-primary-btn--subtab-option\"\r\n      @click=\"resetIndividual\"\r\n    >\r\n      Reset all individual Glyph cosmetics\r\n    </PrimaryButton>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-glyph-customization-group {\r\n  width: 100%;\r\n  margin-top: 0.5rem;\r\n  text-align: left;\r\n}\r\n\r\n.c-type-selection {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  margin-top: 0.5rem;\r\n}\r\n\r\n.o-disabled-cosmetics {\r\n  opacity: 0.5;\r\n}\r\n\r\n.c-single-type {\r\n  padding: 0.5rem;\r\n}\r\n\r\n.c-type-current {\r\n  border: 0.1rem solid var(--color-text);\r\n}\r\n\r\n.c-type-other {\r\n  padding: 0.6rem;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/modals/options/glyph-appearance"},"metadata":{},"sourceType":"module"}