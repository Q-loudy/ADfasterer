{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.string.replace.js\";\nexport default {\n  name: \"GlyphTooltipEffect\",\n  props: {\n    effect: {\n      type: String,\n      required: true\n    },\n    value: {\n      type: [Number, Object],\n      required: true\n    }\n  },\n  computed: {\n    effectConfig() {\n      return GlyphEffects[this.effect];\n    },\n\n    boostColor() {\n      return this.effectConfig.alterationType !== undefined && this.effectConfig.alterationType !== ALTERATION_TYPE.ADDITION ? this.effectConfig.alteredColor() : undefined;\n    },\n\n    additionColor() {\n      return this.effectConfig.alterationType === ALTERATION_TYPE.ADDITION ? this.effectConfig.alteredColor() : undefined;\n    },\n\n    effectStringTemplate() {\n      return this.effectConfig.singleDesc;\n    },\n\n    primaryEffectText() {\n      const value = this.effectConfig.formatSingleEffect(this.value);\n      return this.boostColor ? `⯅${value}` : value;\n    },\n\n    secondaryEffectText() {\n      const value = this.effectConfig.formatSingleSecondaryEffect(this.effectConfig.conversion(this.value));\n      return this.boostColor ? `⯅${value}` : value;\n    },\n\n    textSplits() {\n      const firstSplit = this.effectStringTemplate.split(\"{value}\");\n      const secondSplit = firstSplit[1] ? firstSplit[1].split(\"{value2}\") : \"\";\n      if (secondSplit.length !== 1) return [firstSplit[0]].concat(secondSplit);\n      return firstSplit;\n    },\n\n    hasValue() {\n      return this.effectStringTemplate.includes(\"{value}\");\n    },\n\n    hasSecondaryValue() {\n      return this.textSplits[2] !== undefined;\n    },\n\n    isPelleDisabled() {\n      return this.effectConfig.isDisabledByDoomed;\n    },\n\n    convertedParts() {\n      const parts = [];\n\n      for (const text of this.textSplits) parts.push(this.convertToHTML(text));\n\n      return parts;\n    },\n\n    valueStyle() {\n      return this.boostColor ? {\n        color: this.boostColor,\n        \"text-shadow\": `0 0 0.4rem ${this.boostColor}`\n      } : {\n        color: \"#76EE76\"\n      };\n    },\n\n    textShadowColor() {\n      return GlyphAppearanceHandler.getBaseColor(true);\n    }\n\n  },\n  methods: {\n    convertToHTML(string) {\n      return string.replace(\"\\n\", \"<br>\").replace(\"]\", \"</span>\").replace(\"[\", `<span style=\"${GlyphAppearanceHandler.isLightBG ? \"\" : \"text-shadow: white 0 0 0.6rem;\"}\n            font-weight: bold;\">`);\n    }\n\n  }\n};","map":{"version":3,"sources":["GlyphTooltipEffect.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nexport default {\r\n  name: \"GlyphTooltipEffect\",\r\n  props: {\r\n    effect: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    value: {\r\n      type: [Number, Object],\r\n      required: true\r\n    }\r\n  },\r\n  computed: {\r\n    effectConfig() {\r\n      return GlyphEffects[this.effect];\r\n    },\r\n    boostColor() {\r\n      return (this.effectConfig.alterationType !== undefined &&\r\n        this.effectConfig.alterationType !== ALTERATION_TYPE.ADDITION)\r\n        ? this.effectConfig.alteredColor()\r\n        : undefined;\r\n    },\r\n    additionColor() {\r\n      return this.effectConfig.alterationType === ALTERATION_TYPE.ADDITION\r\n        ? this.effectConfig.alteredColor()\r\n        : undefined;\r\n    },\r\n    effectStringTemplate() {\r\n      return this.effectConfig.singleDesc;\r\n    },\r\n    primaryEffectText() {\r\n      const value = this.effectConfig.formatSingleEffect(this.value);\r\n      return this.boostColor ? `⯅${value}` : value;\r\n    },\r\n    secondaryEffectText() {\r\n      const value = this.effectConfig.formatSingleSecondaryEffect(\r\n        this.effectConfig.conversion(this.value));\r\n      return this.boostColor ? `⯅${value}` : value;\r\n    },\r\n    textSplits() {\r\n      const firstSplit = this.effectStringTemplate.split(\"{value}\");\r\n      const secondSplit = firstSplit[1] ? firstSplit[1].split(\"{value2}\") : \"\";\r\n      if (secondSplit.length !== 1) return [firstSplit[0]].concat(secondSplit);\r\n      return firstSplit;\r\n    },\r\n    hasValue() {\r\n      return this.effectStringTemplate.includes(\"{value}\");\r\n    },\r\n    hasSecondaryValue() {\r\n      return this.textSplits[2] !== undefined;\r\n    },\r\n    isPelleDisabled() {\r\n      return this.effectConfig.isDisabledByDoomed;\r\n    },\r\n    convertedParts() {\r\n      const parts = [];\r\n      for (const text of this.textSplits) parts.push(this.convertToHTML(text));\r\n      return parts;\r\n    },\r\n    valueStyle() {\r\n      return this.boostColor ? {\r\n        color: this.boostColor,\r\n        \"text-shadow\": `0 0 0.4rem ${this.boostColor}`\r\n      } : {\r\n        color: \"#76EE76\",\r\n      };\r\n    },\r\n    textShadowColor() {\r\n      return GlyphAppearanceHandler.getBaseColor(true);\r\n    },\r\n  },\r\n  methods: {\r\n    convertToHTML(string) {\r\n      return string\r\n        .replace(\"\\n\", \"<br>\")\r\n        .replace(\"]\", \"</span>\")\r\n        .replace(\r\n          \"[\", `<span style=\"${GlyphAppearanceHandler.isLightBG\r\n            ? \"\"\r\n            : \"text-shadow: white 0 0 0.6rem;\"}\r\n            font-weight: bold;\">`\r\n        );\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    class=\"c-glyph-tooltip__effect\"\r\n    :class=\"{ 'o-pelle-disabled': isPelleDisabled }\"\r\n  >\r\n    <span v-html=\"convertedParts[0]\" />\r\n    <!-- Do not \"fix\" the spacing on these spans; moving effectText to its own line causes extra spaces to appear -->\r\n    <span\r\n      v-if=\"hasValue\"\r\n      :style=\"valueStyle\"\r\n    >{{ primaryEffectText }}</span>\r\n    <span v-html=\"convertedParts[1]\" />\r\n    <span\r\n      v-if=\"hasSecondaryValue\"\r\n      :style=\"valueStyle\"\r\n    >{{ secondaryEffectText }}</span>\r\n    <span\r\n      v-if=\"hasSecondaryValue\"\r\n      v-html=\"convertedParts[2]\"\r\n    />\r\n  </div>\r\n</template>\r\n"],"sourceRoot":"src/components"},"metadata":{},"sourceType":"module"}