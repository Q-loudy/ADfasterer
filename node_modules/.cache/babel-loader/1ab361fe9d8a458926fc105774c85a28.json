{"ast":null,"code":"import \"core-js/modules/es.array.reduce.js\";\nimport { DC } from \"../../constants\";\nimport { PlayerProgress } from \"../../player-progress\";\nimport { MultiplierTabHelper } from \"./helper-functions\";\nimport { MultiplierTabIcons } from \"./icons\"; // See index.js for documentation\n\nexport const TD = {\n  total: {\n    name: dim => {\n      if (dim) return `TD ${dim} Multiplier`;\n      if (EternityChallenge(7).isRunning) return \"ID8 Production\";\n      return \"Time Shard Production\";\n    },\n    displayOverride: dim => dim ? formatX(TimeDimension(dim).multiplier, 2) : `${format(TimeDimension(1).productionPerSecond, 2)}/sec`,\n    multValue: dim => dim ? TimeDimension(dim).multiplier : TimeDimensions.all.filter(td => td.isProducing).map(td => td.multiplier).reduce((x, y) => x.times(y), DC.D1),\n    isActive: dim => dim ? TimeDimension(dim).isProducing : PlayerProgress.realityUnlocked() || TimeDimension(1).isProducing,\n    dilationEffect: () => {\n      const baseEff = player.dilation.active ? 0.75 * Effects.product(DilationUpgrade.dilationPenalty) : 1;\n      return baseEff * (Effarig.isRunning ? Effarig.multDilation : 1);\n    },\n    isDilated: true,\n    overlay: [\"Δ\", \"<i class='fa-solid fa-cube' />\"],\n    icon: dim => MultiplierTabIcons.DIMENSION(\"TD\", dim)\n  },\n  purchase: {\n    name: dim => dim ? `Purchased TD ${dim}` : \"Purchases\",\n    multValue: dim => {\n      const getMult = td => {\n        const d = TimeDimension(td);\n        const bought = td === 8 ? Math.clampMax(d.bought, 1e8) : d.bought;\n        return Decimal.pow(d.powerMultiplier, bought);\n      };\n\n      if (dim) return getMult(dim);\n      return TimeDimensions.all.filter(td => td.isProducing).map(td => getMult(td.tier)).reduce((x, y) => x.times(y), DC.D1);\n    },\n    isActive: () => !EternityChallenge(2).isRunning && !EternityChallenge(10).isRunning,\n    icon: dim => MultiplierTabIcons.PURCHASE(\"TD\", dim)\n  },\n  highestDim: {\n    name: () => `Amount of highest Dimension`,\n    displayOverride: () => {\n      const dim = MultiplierTabHelper.activeDimCount(\"TD\");\n      return `TD ${dim}, ${formatInt(TimeDimension(dim).amount)}`;\n    },\n    multValue: () => TimeDimension(MultiplierTabHelper.activeDimCount(\"TD\")).amount,\n    isActive: () => TimeDimension(1).isProducing,\n    icon: MultiplierTabIcons.DIMENSION(\"TD\")\n  },\n  basePurchase: {\n    name: \"Base purchases\",\n    multValue: dim => {\n      const getMult = td => Decimal.pow(4, td === 8 ? Math.clampMax(TimeDimension(td).bought, 1e8) : TimeDimension(td).bought);\n\n      if (dim) return getMult(dim);\n      return TimeDimensions.all.filter(td => td.isProducing).map(td => getMult(td.tier)).reduce((x, y) => x.times(y), DC.D1);\n    },\n    isActive: dim => dim ? ImaginaryUpgrade(14).canBeApplied || dim === 8 && GlyphSacrifice.time.effectValue > 1 : TimeDimension(1).isProducing,\n    icon: dim => MultiplierTabIcons.PURCHASE(\"TD\", dim)\n  },\n  timeGlyphSacrifice: {\n    name: \"Time Glyph Sacrifice\",\n    multValue: () => TimeDimension(8).isProducing ? Decimal.pow(GlyphSacrifice.time.effectValue, Math.clampMax(TimeDimension(8).bought, 1e8)) : DC.D1,\n    isActive: () => GlyphSacrifice.time.effectValue > 1,\n    icon: MultiplierTabIcons.SACRIFICE(\"time\")\n  },\n  powPurchase: {\n    name: \"Imaginary Upgrade - Recollection of Intrusion\",\n    powValue: () => ImaginaryUpgrade(14).effectOrDefault(1),\n    isActive: () => ImaginaryUpgrade(14).canBeApplied,\n    icon: MultiplierTabIcons.UPGRADE(\"imaginary\")\n  },\n  achievementMult: {\n    name: \"Eternity Upgrade - Achievement Multiplier\",\n    multValue: dim => Decimal.pow(EternityUpgrade.tdMultAchs.effectOrDefault(1), dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\")),\n    isActive: () => EternityUpgrade.tdMultAchs.canBeApplied && !Pelle.isDoomed,\n    icon: MultiplierTabIcons.ACHIEVEMENT\n  },\n  achievement: {\n    name: \"Achievement Rewards\",\n    multValue: dim => {\n      const baseMult = DC.D1.timesEffectsOf(Achievement(105), Achievement(128));\n      return Decimal.pow(baseMult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\"));\n    },\n    isActive: () => Achievement(105).canBeApplied || Achievement(128).canBeApplied,\n    icon: MultiplierTabIcons.ACHIEVEMENT\n  },\n  timeStudy: {\n    name: dim => dim ? `Time Studies (TD ${dim})` : \"Time Studies\",\n    multValue: dim => {\n      const allMult = DC.D1.timesEffectsOf(TimeStudy(93), TimeStudy(103), TimeStudy(151), TimeStudy(221), TimeStudy(301));\n      const dimMults = Array.repeat(DC.D1, 9);\n\n      for (let tier = 1; tier <= 8; tier++) {\n        dimMults[tier] = dimMults[tier].timesEffectsOf(tier === 1 ? TimeStudy(11) : null, tier === 3 ? TimeStudy(73) : null, tier === 4 ? TimeStudy(227) : null);\n      }\n\n      if (dim) return allMult.times(dimMults[dim]);\n      let totalMult = DC.D1;\n\n      for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(\"TD\"); tier++) {\n        totalMult = totalMult.times(dimMults[tier]).times(allMult);\n      }\n\n      return totalMult;\n    },\n    isActive: () => TimeDimension(1).isProducing,\n    icon: MultiplierTabIcons.TIME_STUDY\n  },\n  eternityUpgrade: {\n    name: dim => dim ? `Other Eternity Upgrades (TD ${dim})` : \"Other Eternity Upgrades\",\n    multValue: dim => {\n      const allMult = DC.D1.timesEffectsOf(EternityUpgrade.tdMultTheorems, EternityUpgrade.tdMultRealTime);\n      return Decimal.pow(allMult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\"));\n    },\n    isActive: () => TimeDimension(1).isProducing,\n    icon: MultiplierTabIcons.UPGRADE(\"eternity\")\n  },\n  eu1: {\n    name: () => \"Unspent Time Theorems\",\n    multValue: dim => Decimal.pow(EternityUpgrade.tdMultTheorems.effectOrDefault(1), dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\")),\n    isActive: () => EternityUpgrade.tdMultTheorems.canBeApplied,\n    icon: MultiplierTabIcons.UPGRADE(\"eternity\")\n  },\n  eu2: {\n    name: () => \"Days played\",\n    multValue: dim => Decimal.pow(EternityUpgrade.tdMultRealTime.effectOrDefault(1), dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\")),\n    isActive: () => EternityUpgrade.tdMultRealTime.canBeApplied,\n    icon: MultiplierTabIcons.UPGRADE(\"eternity\")\n  },\n  eternityChallenge: {\n    name: dim => dim ? `Eternity Challenges (TD ${dim})` : \"Eternity Challenges\",\n    multValue: dim => {\n      let allMult = DC.D1.timesEffectsOf(EternityChallenge(1).reward, EternityChallenge(10).reward).times(EternityChallenge(7).isRunning ? Tickspeed.perSecond : DC.D1);\n\n      if (EternityChallenge(9).isRunning) {\n        allMult = allMult.times(Decimal.pow(Math.clampMin(Currency.infinityPower.value.pow(InfinityDimensions.powerConversionRate / 7).log2(), 1), 4).clampMin(1));\n      }\n\n      return Decimal.pow(allMult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\"));\n    },\n    isActive: () => EternityChallenge(1).completions > 0,\n    icon: MultiplierTabIcons.CHALLENGE(\"eternity\")\n  },\n  tickspeed: {\n    name: () => \"Tickspeed (EC7)\",\n    displayOverride: () => {\n      const tickRate = Tickspeed.perSecond;\n      const activeDims = MultiplierTabHelper.activeDimCount(\"TD\");\n      const dimString = MultiplierTabHelper.pluralizeDimensions(activeDims);\n      return `${format(tickRate, 2, 2)}/sec on ${formatInt(activeDims)} ${dimString}\n        ➜ ${formatX(tickRate.pow(activeDims), 2, 2)}`;\n    },\n    multValue: () => Tickspeed.perSecond.pow(MultiplierTabHelper.activeDimCount(\"TD\")),\n    isActive: () => EternityChallenge(7).isRunning,\n    icon: MultiplierTabIcons.TICKSPEED\n  },\n  dilationUpgrade: {\n    name: \"Dilation Upgrade - Replicanti Multiplier\",\n    multValue: dim => {\n      const mult = Replicanti.areUnlocked && Replicanti.amount.gt(1) ? DilationUpgrade.tdMultReplicanti.effectValue : DC.D1;\n      return Decimal.pow(mult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\"));\n    },\n    isActive: () => DilationUpgrade.tdMultReplicanti.canBeApplied,\n    icon: MultiplierTabIcons.UPGRADE(\"dilation\")\n  },\n  realityUpgrade: {\n    name: \"Reality Upgrade - Temporal Transcendence\",\n    multValue: dim => Decimal.pow(RealityUpgrade(22).effectOrDefault(1), dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\")),\n    isActive: () => !Pelle.isDoomed && RealityUpgrade(22).canBeApplied,\n    icon: MultiplierTabIcons.UPGRADE(\"reality\")\n  },\n  glyph: {\n    name: \"Glyph Effects\",\n    powValue: () => getAdjustedGlyphEffect(\"timepow\") * getAdjustedGlyphEffect(\"effarigdimensions\"),\n    isActive: () => PlayerProgress.realityUnlocked(),\n    icon: MultiplierTabIcons.GENERIC_GLYPH\n  },\n  alchemy: {\n    name: \"Glyph Alchemy\",\n    multValue: dim => Decimal.pow(AlchemyResource.dimensionality.effectOrDefault(1), dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\")),\n    powValue: () => AlchemyResource.time.effectOrDefault(1) * Ra.momentumValue,\n    isActive: () => Ra.unlocks.unlockGlyphAlchemy.canBeApplied,\n    icon: MultiplierTabIcons.ALCHEMY\n  },\n  imaginaryUpgrade: {\n    name: \"Imaginary Upgrade - Suspicion of Interference\",\n    powValue: () => ImaginaryUpgrade(11).effectOrDefault(1),\n    isActive: () => ImaginaryUpgrade(11).canBeApplied,\n    icon: MultiplierTabIcons.UPGRADE(\"imaginary\")\n  },\n  pelle: {\n    name: \"Pelle Rift Effects\",\n    multValue: dim => Decimal.pow(PelleRifts.chaos.effectOrDefault(1), dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\")),\n    powValue: () => PelleRifts.paradox.effectOrDefault(DC.D1).toNumber(),\n    isActive: () => Pelle.isDoomed,\n    icon: MultiplierTabIcons.PELLE\n  },\n  iap: {\n    name: \"Shop Tab Purchases\",\n    multValue: dim => Decimal.pow(ShopPurchase.allDimPurchases.currentMult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\")),\n    isActive: () => ShopPurchaseData.totalSTD > 0,\n    icon: MultiplierTabIcons.IAP\n  },\n  nerfV: {\n    name: \"V's Reality\",\n    powValue: () => 0.5,\n    isActive: () => V.isRunning,\n    icon: MultiplierTabIcons.GENERIC_V\n  },\n  nerfCursed: {\n    name: \"Cursed Glyphs\",\n    powValue: () => getAdjustedGlyphEffect(\"curseddimensions\"),\n    isActive: () => getAdjustedGlyphEffect(\"curseddimensions\") !== 1,\n    icon: MultiplierTabIcons.SPECIFIC_GLYPH(\"cursed\")\n  }\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/multiplier-tab/time-dimensions.js"],"names":["DC","PlayerProgress","MultiplierTabHelper","MultiplierTabIcons","TD","total","name","dim","EternityChallenge","isRunning","displayOverride","formatX","TimeDimension","multiplier","format","productionPerSecond","multValue","TimeDimensions","all","filter","td","isProducing","map","reduce","x","y","times","D1","isActive","realityUnlocked","dilationEffect","baseEff","player","dilation","active","Effects","product","DilationUpgrade","dilationPenalty","Effarig","multDilation","isDilated","overlay","icon","DIMENSION","purchase","getMult","d","bought","Math","clampMax","Decimal","pow","powerMultiplier","tier","PURCHASE","highestDim","activeDimCount","formatInt","amount","basePurchase","ImaginaryUpgrade","canBeApplied","GlyphSacrifice","time","effectValue","timeGlyphSacrifice","SACRIFICE","powPurchase","powValue","effectOrDefault","UPGRADE","achievementMult","EternityUpgrade","tdMultAchs","Pelle","isDoomed","ACHIEVEMENT","achievement","baseMult","timesEffectsOf","Achievement","timeStudy","allMult","TimeStudy","dimMults","Array","repeat","totalMult","TIME_STUDY","eternityUpgrade","tdMultTheorems","tdMultRealTime","eu1","eu2","eternityChallenge","reward","Tickspeed","perSecond","clampMin","Currency","infinityPower","value","InfinityDimensions","powerConversionRate","log2","completions","CHALLENGE","tickspeed","tickRate","activeDims","dimString","pluralizeDimensions","TICKSPEED","dilationUpgrade","mult","Replicanti","areUnlocked","gt","tdMultReplicanti","realityUpgrade","RealityUpgrade","glyph","getAdjustedGlyphEffect","GENERIC_GLYPH","alchemy","AlchemyResource","dimensionality","Ra","momentumValue","unlocks","unlockGlyphAlchemy","ALCHEMY","imaginaryUpgrade","pelle","PelleRifts","chaos","paradox","toNumber","PELLE","iap","ShopPurchase","allDimPurchases","currentMult","ShopPurchaseData","totalSTD","IAP","nerfV","V","GENERIC_V","nerfCursed","SPECIFIC_GLYPH"],"mappings":"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","sourcesContent":["import { DC } from \"../../constants\";\r\nimport { PlayerProgress } from \"../../player-progress\";\r\n\r\nimport { MultiplierTabHelper } from \"./helper-functions\";\r\nimport { MultiplierTabIcons } from \"./icons\";\r\n\r\n// See index.js for documentation\r\nexport const TD = {\r\n  total: {\r\n    name: dim => {\r\n      if (dim) return `TD ${dim} Multiplier`;\r\n      if (EternityChallenge(7).isRunning) return \"ID8 Production\";\r\n      return \"Time Shard Production\";\r\n    },\r\n    displayOverride: dim => (dim\r\n      ? formatX(TimeDimension(dim).multiplier, 2)\r\n      : `${format(TimeDimension(1).productionPerSecond, 2)}/sec`\r\n    ),\r\n    multValue: dim => (dim\r\n      ? TimeDimension(dim).multiplier\r\n      : TimeDimensions.all\r\n        .filter(td => td.isProducing)\r\n        .map(td => td.multiplier)\r\n        .reduce((x, y) => x.times(y), DC.D1)),\r\n    isActive: dim => (dim\r\n      ? TimeDimension(dim).isProducing\r\n      : (PlayerProgress.realityUnlocked() || TimeDimension(1).isProducing)),\r\n    dilationEffect: () => {\r\n      const baseEff = player.dilation.active\r\n        ? 0.75 * Effects.product(DilationUpgrade.dilationPenalty)\r\n        : 1;\r\n      return baseEff * (Effarig.isRunning ? Effarig.multDilation : 1);\r\n    },\r\n    isDilated: true,\r\n    overlay: [\"Δ\", \"<i class='fa-solid fa-cube' />\"],\r\n    icon: dim => MultiplierTabIcons.DIMENSION(\"TD\", dim),\r\n  },\r\n  purchase: {\r\n    name: dim => (dim ? `Purchased TD ${dim}` : \"Purchases\"),\r\n    multValue: dim => {\r\n      const getMult = td => {\r\n        const d = TimeDimension(td);\r\n        const bought = td === 8 ? Math.clampMax(d.bought, 1e8) : d.bought;\r\n        return Decimal.pow(d.powerMultiplier, bought);\r\n      };\r\n      if (dim) return getMult(dim);\r\n      return TimeDimensions.all\r\n        .filter(td => td.isProducing)\r\n        .map(td => getMult(td.tier))\r\n        .reduce((x, y) => x.times(y), DC.D1);\r\n    },\r\n    isActive: () => !EternityChallenge(2).isRunning && !EternityChallenge(10).isRunning,\r\n    icon: dim => MultiplierTabIcons.PURCHASE(\"TD\", dim),\r\n  },\r\n  highestDim: {\r\n    name: () => `Amount of highest Dimension`,\r\n    displayOverride: () => {\r\n      const dim = MultiplierTabHelper.activeDimCount(\"TD\");\r\n      return `TD ${dim}, ${formatInt(TimeDimension(dim).amount)}`;\r\n    },\r\n    multValue: () => TimeDimension(MultiplierTabHelper.activeDimCount(\"TD\")).amount,\r\n    isActive: () => TimeDimension(1).isProducing,\r\n    icon: MultiplierTabIcons.DIMENSION(\"TD\"),\r\n  },\r\n\r\n  basePurchase: {\r\n    name: \"Base purchases\",\r\n    multValue: dim => {\r\n      const getMult = td => Decimal.pow(4,\r\n        td === 8 ? Math.clampMax(TimeDimension(td).bought, 1e8) : TimeDimension(td).bought);\r\n      if (dim) return getMult(dim);\r\n      return TimeDimensions.all\r\n        .filter(td => td.isProducing)\r\n        .map(td => getMult(td.tier))\r\n        .reduce((x, y) => x.times(y), DC.D1);\r\n    },\r\n    isActive: dim => (dim\r\n      ? ImaginaryUpgrade(14).canBeApplied || (dim === 8 && GlyphSacrifice.time.effectValue > 1)\r\n      : TimeDimension(1).isProducing),\r\n    icon: dim => MultiplierTabIcons.PURCHASE(\"TD\", dim),\r\n  },\r\n  timeGlyphSacrifice: {\r\n    name: \"Time Glyph Sacrifice\",\r\n    multValue: () => (TimeDimension(8).isProducing\r\n      ? Decimal.pow(GlyphSacrifice.time.effectValue, Math.clampMax(TimeDimension(8).bought, 1e8))\r\n      : DC.D1),\r\n    isActive: () => GlyphSacrifice.time.effectValue > 1,\r\n    icon: MultiplierTabIcons.SACRIFICE(\"time\"),\r\n  },\r\n  powPurchase: {\r\n    name: \"Imaginary Upgrade - Recollection of Intrusion\",\r\n    powValue: () => ImaginaryUpgrade(14).effectOrDefault(1),\r\n    isActive: () => ImaginaryUpgrade(14).canBeApplied,\r\n    icon: MultiplierTabIcons.UPGRADE(\"imaginary\"),\r\n  },\r\n\r\n  achievementMult: {\r\n    name: \"Eternity Upgrade - Achievement Multiplier\",\r\n    multValue: dim => Decimal.pow(EternityUpgrade.tdMultAchs.effectOrDefault(1),\r\n      dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\")),\r\n    isActive: () => EternityUpgrade.tdMultAchs.canBeApplied && !Pelle.isDoomed,\r\n    icon: MultiplierTabIcons.ACHIEVEMENT,\r\n  },\r\n  achievement: {\r\n    name: \"Achievement Rewards\",\r\n    multValue: dim => {\r\n      const baseMult = DC.D1.timesEffectsOf(Achievement(105), Achievement(128));\r\n      return Decimal.pow(baseMult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\"));\r\n    },\r\n    isActive: () => Achievement(105).canBeApplied || Achievement(128).canBeApplied,\r\n    icon: MultiplierTabIcons.ACHIEVEMENT,\r\n  },\r\n  timeStudy: {\r\n    name: dim => (dim ? `Time Studies (TD ${dim})` : \"Time Studies\"),\r\n    multValue: dim => {\r\n      const allMult = DC.D1.timesEffectsOf(\r\n        TimeStudy(93),\r\n        TimeStudy(103),\r\n        TimeStudy(151),\r\n        TimeStudy(221),\r\n        TimeStudy(301),\r\n      );\r\n\r\n      const dimMults = Array.repeat(DC.D1, 9);\r\n      for (let tier = 1; tier <= 8; tier++) {\r\n        dimMults[tier] = dimMults[tier].timesEffectsOf(\r\n          tier === 1 ? TimeStudy(11) : null,\r\n          tier === 3 ? TimeStudy(73) : null,\r\n          tier === 4 ? TimeStudy(227) : null\r\n        );\r\n      }\r\n\r\n      if (dim) return allMult.times(dimMults[dim]);\r\n      let totalMult = DC.D1;\r\n      for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(\"TD\"); tier++) {\r\n        totalMult = totalMult.times(dimMults[tier]).times(allMult);\r\n      }\r\n      return totalMult;\r\n    },\r\n    isActive: () => TimeDimension(1).isProducing,\r\n    icon: MultiplierTabIcons.TIME_STUDY\r\n  },\r\n  eternityUpgrade: {\r\n    name: dim => (dim ? `Other Eternity Upgrades (TD ${dim})` : \"Other Eternity Upgrades\"),\r\n    multValue: dim => {\r\n      const allMult = DC.D1.timesEffectsOf(\r\n        EternityUpgrade.tdMultTheorems,\r\n        EternityUpgrade.tdMultRealTime,\r\n      );\r\n      return Decimal.pow(allMult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\"));\r\n    },\r\n    isActive: () => TimeDimension(1).isProducing,\r\n    icon: MultiplierTabIcons.UPGRADE(\"eternity\"),\r\n  },\r\n\r\n  eu1: {\r\n    name: () => \"Unspent Time Theorems\",\r\n    multValue: dim => Decimal.pow(EternityUpgrade.tdMultTheorems.effectOrDefault(1),\r\n      dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\")),\r\n    isActive: () => EternityUpgrade.tdMultTheorems.canBeApplied,\r\n    icon: MultiplierTabIcons.UPGRADE(\"eternity\"),\r\n  },\r\n  eu2: {\r\n    name: () => \"Days played\",\r\n    multValue: dim => Decimal.pow(EternityUpgrade.tdMultRealTime.effectOrDefault(1),\r\n      dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\")),\r\n    isActive: () => EternityUpgrade.tdMultRealTime.canBeApplied,\r\n    icon: MultiplierTabIcons.UPGRADE(\"eternity\"),\r\n  },\r\n\r\n  eternityChallenge: {\r\n    name: dim => (dim ? `Eternity Challenges (TD ${dim})` : \"Eternity Challenges\"),\r\n    multValue: dim => {\r\n      let allMult = DC.D1.timesEffectsOf(\r\n        EternityChallenge(1).reward,\r\n        EternityChallenge(10).reward,\r\n      ).times(EternityChallenge(7).isRunning ? Tickspeed.perSecond : DC.D1);\r\n      if (EternityChallenge(9).isRunning) {\r\n        allMult = allMult.times(\r\n          Decimal.pow(Math.clampMin(Currency.infinityPower.value.pow(InfinityDimensions.powerConversionRate / 7)\r\n            .log2(), 1), 4).clampMin(1));\r\n      }\r\n      return Decimal.pow(allMult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\"));\r\n    },\r\n    isActive: () => EternityChallenge(1).completions > 0,\r\n    icon: MultiplierTabIcons.CHALLENGE(\"eternity\")\r\n  },\r\n  tickspeed: {\r\n    name: () => \"Tickspeed (EC7)\",\r\n    displayOverride: () => {\r\n      const tickRate = Tickspeed.perSecond;\r\n      const activeDims = MultiplierTabHelper.activeDimCount(\"TD\");\r\n      const dimString = MultiplierTabHelper.pluralizeDimensions(activeDims);\r\n      return `${format(tickRate, 2, 2)}/sec on ${formatInt(activeDims)} ${dimString}\r\n        ➜ ${formatX(tickRate.pow(activeDims), 2, 2)}`;\r\n    },\r\n    multValue: () => Tickspeed.perSecond.pow(MultiplierTabHelper.activeDimCount(\"TD\")),\r\n    isActive: () => EternityChallenge(7).isRunning,\r\n    icon: MultiplierTabIcons.TICKSPEED,\r\n  },\r\n  dilationUpgrade: {\r\n    name: \"Dilation Upgrade - Replicanti Multiplier\",\r\n    multValue: dim => {\r\n      const mult = Replicanti.areUnlocked && Replicanti.amount.gt(1)\r\n        ? DilationUpgrade.tdMultReplicanti.effectValue\r\n        : DC.D1;\r\n      return Decimal.pow(mult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\"));\r\n    },\r\n    isActive: () => DilationUpgrade.tdMultReplicanti.canBeApplied,\r\n    icon: MultiplierTabIcons.UPGRADE(\"dilation\"),\r\n  },\r\n  realityUpgrade: {\r\n    name: \"Reality Upgrade - Temporal Transcendence\",\r\n    multValue: dim => Decimal.pow(RealityUpgrade(22).effectOrDefault(1),\r\n      dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\")),\r\n    isActive: () => !Pelle.isDoomed && RealityUpgrade(22).canBeApplied,\r\n    icon: MultiplierTabIcons.UPGRADE(\"reality\"),\r\n  },\r\n  glyph: {\r\n    name: \"Glyph Effects\",\r\n    powValue: () => getAdjustedGlyphEffect(\"timepow\") * getAdjustedGlyphEffect(\"effarigdimensions\"),\r\n    isActive: () => PlayerProgress.realityUnlocked(),\r\n    icon: MultiplierTabIcons.GENERIC_GLYPH\r\n  },\r\n  alchemy: {\r\n    name: \"Glyph Alchemy\",\r\n    multValue: dim => Decimal.pow(AlchemyResource.dimensionality.effectOrDefault(1),\r\n      dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\")),\r\n    powValue: () => AlchemyResource.time.effectOrDefault(1) * Ra.momentumValue,\r\n    isActive: () => Ra.unlocks.unlockGlyphAlchemy.canBeApplied,\r\n    icon: MultiplierTabIcons.ALCHEMY,\r\n  },\r\n  imaginaryUpgrade: {\r\n    name: \"Imaginary Upgrade - Suspicion of Interference\",\r\n    powValue: () => ImaginaryUpgrade(11).effectOrDefault(1),\r\n    isActive: () => ImaginaryUpgrade(11).canBeApplied,\r\n    icon: MultiplierTabIcons.UPGRADE(\"imaginary\"),\r\n  },\r\n  pelle: {\r\n    name: \"Pelle Rift Effects\",\r\n    multValue: dim => Decimal.pow(PelleRifts.chaos.effectOrDefault(1),\r\n      dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\")),\r\n    powValue: () => PelleRifts.paradox.effectOrDefault(DC.D1).toNumber(),\r\n    isActive: () => Pelle.isDoomed,\r\n    icon: MultiplierTabIcons.PELLE,\r\n  },\r\n  iap: {\r\n    name: \"Shop Tab Purchases\",\r\n    multValue: dim => Decimal.pow(ShopPurchase.allDimPurchases.currentMult,\r\n      dim ? 1 : MultiplierTabHelper.activeDimCount(\"TD\")),\r\n    isActive: () => ShopPurchaseData.totalSTD > 0,\r\n    icon: MultiplierTabIcons.IAP,\r\n  },\r\n\r\n  nerfV: {\r\n    name: \"V's Reality\",\r\n    powValue: () => 0.5,\r\n    isActive: () => V.isRunning,\r\n    icon: MultiplierTabIcons.GENERIC_V,\r\n  },\r\n  nerfCursed: {\r\n    name: \"Cursed Glyphs\",\r\n    powValue: () => getAdjustedGlyphEffect(\"curseddimensions\"),\r\n    isActive: () => getAdjustedGlyphEffect(\"curseddimensions\") !== 1,\r\n    icon: MultiplierTabIcons.SPECIFIC_GLYPH(\"cursed\"),\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}