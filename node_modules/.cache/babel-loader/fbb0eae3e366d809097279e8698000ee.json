{"ast":null,"code":"export default {\n  name: \"AwayProgressEntry\",\n  props: {\n    name: {\n      type: String,\n      required: true\n    },\n    playerBefore: {\n      type: Object,\n      required: true\n    },\n    playerAfter: {\n      type: Object,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      removed: false\n    };\n  },\n\n  computed: {\n    item() {\n      return AwayProgressTypes.all[this.name];\n    },\n\n    before() {\n      return this.item.navigateTo(this.playerBefore);\n    },\n\n    after() {\n      return this.item.navigateTo(this.playerAfter);\n    },\n\n    formatBefore() {\n      return this.formatPseudo(this.before);\n    },\n\n    formatAfter() {\n      return this.formatPseudo(this.after);\n    },\n\n    classObject() {\n      return {\n        [this.item.classObject]: !this.removed,\n        \"c-modal-away-progress__disabled\": this.removed\n      };\n    },\n\n    formattedName() {\n      return this.item.formatName;\n    },\n\n    increased() {\n      // If they would visually display as the same number, they shouldn't be treated as if they increased\n      if (this.formatAfter === this.formatBefore) return false; // Both Decimals and numbers may be passed in. This code handles both.\n\n      const before = this.before;\n      const after = this.after;\n      return after instanceof Decimal ? after.gt(before) : after > before;\n    },\n\n    show() {\n      if (!this.item.appearsInAwayModal) return false;\n      const show = this.increased && this.item.option && this.item.isUnlocked(); // For the achievement and display, we need to emit if something happened to the parent\n\n      if (show) this.$emit(\"something-happened\");\n      return show;\n    },\n\n    isBlackHole() {\n      // If its a Black Hole we need different formatting, so find that\n      return this.item.name.includes(\"BlackHole\");\n    },\n\n    formatBlackHoleActivations() {\n      const activations = this.after - this.before;\n      return quantifyInt(\"time\", activations);\n    },\n\n    isVeryLarge() {\n      return this.isBlackHole ? false : Decimal.gt(this.before, Decimal.pow10(1e9));\n    }\n\n  },\n  methods: {\n    // We want different formatting above and below 1e9 to improve readability\n    formatPseudo(number) {\n      // Sometimes it's undefined and that throws errors, because this method is also used to determine whether or\n      // not any text is even shown at all and sometimes this gets checked on variables which don't have values yet\n      if (number === undefined) return \"\"; // Surrounding text is formatted differently to specify that this is log10\n\n      if (this.isVeryLarge) return formatInt(Math.floor(number.log10()));\n\n      if (Decimal.lt(number, 1e9)) {\n        // Both numbers and decimals get passed in here so this is needed\n        // Not a fan of this solution but whatever\n        const numberAsDecimal = new Decimal(number);\n        return formatInt(numberAsDecimal.floor());\n      }\n\n      return format(number, 2, 2);\n    },\n\n    hideEntry() {\n      this.removed = !this.removed;\n      this.item.option = !this.item.option;\n    }\n\n  }\n};","map":{"version":3,"sources":["AwayProgressEntry.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nexport default {\r\n  name: \"AwayProgressEntry\",\r\n  props: {\r\n    name: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    playerBefore: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    playerAfter: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      removed: false,\r\n    };\r\n  },\r\n  computed: {\r\n    item() {\r\n      return AwayProgressTypes.all[this.name];\r\n    },\r\n    before() {\r\n      return this.item.navigateTo(this.playerBefore);\r\n    },\r\n    after() {\r\n      return this.item.navigateTo(this.playerAfter);\r\n    },\r\n    formatBefore() {\r\n      return this.formatPseudo(this.before);\r\n    },\r\n    formatAfter() {\r\n      return this.formatPseudo(this.after);\r\n    },\r\n    classObject() {\r\n      return {\r\n        [this.item.classObject]: !this.removed,\r\n        \"c-modal-away-progress__disabled\": this.removed,\r\n      };\r\n    },\r\n    formattedName() {\r\n      return this.item.formatName;\r\n    },\r\n    increased() {\r\n      // If they would visually display as the same number, they shouldn't be treated as if they increased\r\n      if (this.formatAfter === this.formatBefore) return false;\r\n      // Both Decimals and numbers may be passed in. This code handles both.\r\n      const before = this.before;\r\n      const after = this.after;\r\n\r\n      return after instanceof Decimal\r\n        ? after.gt(before)\r\n        : after > before;\r\n    },\r\n    show() {\r\n      if (!this.item.appearsInAwayModal) return false;\r\n      const show = this.increased && this.item.option && this.item.isUnlocked();\r\n      // For the achievement and display, we need to emit if something happened to the parent\r\n      if (show) this.$emit(\"something-happened\");\r\n      return show;\r\n    },\r\n    isBlackHole() {\r\n      // If its a Black Hole we need different formatting, so find that\r\n      return this.item.name.includes(\"BlackHole\");\r\n    },\r\n    formatBlackHoleActivations() {\r\n      const activations = this.after - this.before;\r\n      return quantifyInt(\"time\", activations);\r\n    },\r\n    isVeryLarge() {\r\n      return this.isBlackHole\r\n        ? false\r\n        : Decimal.gt(this.before, Decimal.pow10(1e9));\r\n    }\r\n  },\r\n  methods: {\r\n    // We want different formatting above and below 1e9 to improve readability\r\n    formatPseudo(number) {\r\n      // Sometimes it's undefined and that throws errors, because this method is also used to determine whether or\r\n      // not any text is even shown at all and sometimes this gets checked on variables which don't have values yet\r\n      if (number === undefined) return \"\";\r\n      // Surrounding text is formatted differently to specify that this is log10\r\n      if (this.isVeryLarge) return formatInt(Math.floor(number.log10()));\r\n      if (Decimal.lt(number, 1e9)) {\r\n        // Both numbers and decimals get passed in here so this is needed\r\n        // Not a fan of this solution but whatever\r\n        const numberAsDecimal = new Decimal(number);\r\n        return formatInt(numberAsDecimal.floor());\r\n      }\r\n      return format(number, 2, 2);\r\n    },\r\n    hideEntry() {\r\n      this.removed = !this.removed;\r\n      this.item.option = !this.item.option;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    v-if=\"show\"\r\n    :class=\"classObject\"\r\n    @click=\"hideEntry\"\r\n  >\r\n    <span v-if=\"isBlackHole\">\r\n      Your\r\n      <b>{{ formattedName }}</b>\r\n      activated\r\n      {{ formatBlackHoleActivations }}\r\n    </span>\r\n    <span v-else>\r\n      <b>{{ formattedName }}</b>\r\n      <i v-if=\"isVeryLarge\"> exponent</i>\r\n      increased from\r\n      {{ formatBefore }} to {{ formatAfter }}\r\n    </span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-modal-away-progress__dimension-boosts,\r\n.c-modal-away-progress__antimatter-galaxies,\r\n.c-modal-away-progress__antimatter {\r\n  color: var(--color-antimatter);\r\n}\r\n\r\n.t-dark .c-modal-away-progress__antimatter,\r\n.t-s6 .c-modal-away-progress__antimatter,\r\n.t-s10 .c-modal-away-progress__antimatter {\r\n  animation: a-game-header__antimatter--glow 25s infinite;\r\n}\r\n\r\n.c-modal-away-progress__infinities,\r\n.c-modal-away-progress__infinity-points {\r\n  color: var(--color-infinity);\r\n}\r\n\r\n.c-modal-away-progress__eternities,\r\n.c-modal-away-progress__eternity-points,\r\n.c-modal-away-progress__time-theorems {\r\n  color: var(--color-eternity);\r\n  filter: brightness(0.65);\r\n}\r\n\r\n.c-modal-away-progress__tachyon-particles,\r\n.c-modal-away-progress__tachyon-galaxies,\r\n.c-modal-away-progress__dilated-time {\r\n  color: var(--color-dilation);\r\n  filter: brightness(0.8);\r\n}\r\n\r\n.t-dark .c-modal-away-progress__tachyon-particles,\r\n.t-dark .c-modal-away-progress__tachyon-galaxies,\r\n.t-dark .c-modal-away-progress__dilated-time {\r\n  filter: none;\r\n}\r\n\r\n.c-modal-away-progress__realities,\r\n.c-modal-away-progress__achievement-count,\r\n.c-modal-away-progress__reality-machines,\r\n.c-modal-away-progress__imaginary-machines {\r\n  color: var(--color-reality);\r\n}\r\n\r\n.c-modal-away-progress__dark-matter b,\r\n.c-modal-away-progress__dark-energy b,\r\n.c-modal-away-progress__singularities b,\r\n.c-modal-away-progress__dark-matter,\r\n.c-modal-away-progress__dark-energy,\r\n.c-modal-away-progress__singularities {\r\n  color: var(--color-laitela--base);\r\n  text-shadow:\r\n    0 0 0.2rem var(--color-laitela--accent),\r\n    0 0 0.2rem var(--color-laitela--accent),\r\n    0 0 0.2rem var(--color-laitela--accent),\r\n    0 0 0.2rem var(--color-laitela--accent);\r\n}\r\n\r\n.c-modal-away-progress__replicanti-galaxies,\r\n.c-modal-away-progress__replicanti {\r\n  color: #03a9f4;\r\n}\r\n\r\n.c-modal-away-progress__teresa-memories {\r\n  color: var(--color-ra-pet--teresa);\r\n}\r\n\r\n.c-modal-away-progress__relic-shards,\r\n.c-modal-away-progress__effarig-memories {\r\n  color: var(--color-ra-pet--effarig);\r\n}\r\n\r\n.c-modal-away-progress__enslaved-memories {\r\n  color: var(--color-ra-pet--enslaved);\r\n}\r\n\r\n.c-modal-away-progress__v-memories {\r\n  color: var(--color-ra-pet--v);\r\n}\r\n\r\n.c-modal-away-progress__teresa-memories,\r\n.c-modal-away-progress__effarig-memories,\r\n.c-modal-away-progress__enslaved-memories,\r\n.c-modal-away-progress__v-memories {\r\n  filter: brightness(0.8);\r\n}\r\n\r\n.t-dark .c-modal-away-progress__teresa-memories,\r\n.t-dark .c-modal-away-progress__effarig-memories,\r\n.t-dark .c-modal-away-progress__enslaved-memories,\r\n.t-dark .c-modal-away-progress__v-memories {\r\n  filter: none;\r\n}\r\n\r\n.c-modal-away-progress__black-hole b,\r\n.c-modal-away-progress__black-hole {\r\n  color: black;\r\n  text-shadow:\r\n    0 0 0.2rem #e67919,\r\n    0 0 0.3rem #e67919;\r\n}\r\n\r\n.s-base--dark .c-modal-away-progress__black-hole b,\r\n.s-base--dark .c-modal-away-progress__black-hole {\r\n  color: #de5a1d;\r\n  text-shadow:\r\n    0 0 0.2rem black,\r\n    0 0 0.3rem black;\r\n}\r\n\r\n.c-modal-away-progress__reality-shards {\r\n  color: var(--color-pelle--base);\r\n}\r\n\r\n.c-modal-away-progress__disabled b,\r\n.c-modal-away-progress__disabled {\r\n  font-style: italic;\r\n  color: #303030;\r\n  text-shadow: 0 0 0.3rem #303030;\r\n  text-decoration: line-through;\r\n  animation: none;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/modals"},"metadata":{},"sourceType":"module"}