{"ast":null,"code":"import \"core-js/modules/es.symbol.description.js\";\nimport BlackHoleUpgradeButton from \"@/components/tabs/black-hole/BlackHoleUpgradeButton\";\nexport default {\n  name: \"BlackHoleUpgradeRow\",\n  components: {\n    BlackHoleUpgradeButton\n  },\n  props: {\n    blackHole: {\n      type: Object,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      isUnlocked: false,\n      isPermanent: false,\n      intervalVal: 0,\n      durationVal: 0\n    };\n  },\n\n  computed: {\n    blackHoleDescription() {\n      return this.blackHole.description(false);\n    },\n\n    intervalConfig() {\n      return {\n        upgrade: this.blackHole.intervalUpgrade,\n        description: () => `Reduce ${this.blackHoleDescription}'s inactive time by ${formatPercents(0.2)}`,\n        effectTitle: \"Current interval\",\n        formatEffect: () => `${TimeSpan.fromSeconds(this.blackHole.rawInterval).toStringShort(false)}`\n      };\n    },\n\n    powerConfig() {\n      return {\n        upgrade: this.blackHole.powerUpgrade,\n        description: () => `Make ${this.blackHoleDescription} ${formatPercents(0.35)} stronger`,\n        effectTitle: \"Current power\",\n        formatEffect: value => `${formatX(value, 2, 2)}`\n      };\n    },\n\n    durationConfig() {\n      return {\n        upgrade: this.blackHole.durationUpgrade,\n        description: () => `Extend ${this.blackHoleDescription}'s duration by ${formatPercents(0.3)}`,\n        effectTitle: \"Current duration\",\n        formatEffect: () => `${TimeSpan.fromSeconds(this.blackHole.duration).toStringShort(false)}`\n      };\n    }\n\n  },\n  methods: {\n    update() {\n      const bh = this.blackHole;\n      this.isUnlocked = bh.isUnlocked;\n      this.isPermanent = bh.isPermanent; // We pull directly from the black hole data here (and in formatEffect above) because there are other sources\n      // which also affect them, and this is the only place where these values are displayed directly in-game. Then\n      // we use these values as keys so that the buttons are forced to re-render immediately if they're ever changed\n\n      this.intervalVal = bh.rawInterval;\n      this.durationVal = bh.duration;\n    }\n\n  }\n};","map":{"version":3,"sources":["BlackHoleUpgradeRow.vue"],"names":[],"mappings":";AACA,OAAA,sBAAA,MAAA,qDAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,qBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA;AADA,GAFA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GALA;;AAWA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,UAAA,EAAA,KADA;AAEA,MAAA,WAAA,EAAA,KAFA;AAGA,MAAA,WAAA,EAAA,CAHA;AAIA,MAAA,WAAA,EAAA;AAJA,KAAA;AAMA,GAlBA;;AAmBA,EAAA,QAAA,EAAA;AACA,IAAA,oBAAA,GAAA;AACA,aAAA,KAAA,SAAA,CAAA,WAAA,CAAA,KAAA,CAAA;AACA,KAHA;;AAIA,IAAA,cAAA,GAAA;AACA,aAAA;AACA,QAAA,OAAA,EAAA,KAAA,SAAA,CAAA,eADA;AAEA,QAAA,WAAA,EAAA,MAAA,UAAA,KAAA,oBAAA,uBAAA,cAAA,CAAA,GAAA,CAAA,EAFA;AAGA,QAAA,WAAA,EAAA,kBAHA;AAIA,QAAA,YAAA,EAAA,MAAA,GAAA,QAAA,CAAA,WAAA,CAAA,KAAA,SAAA,CAAA,WAAA,EAAA,aAAA,CAAA,KAAA,CAAA;AAJA,OAAA;AAMA,KAXA;;AAYA,IAAA,WAAA,GAAA;AACA,aAAA;AACA,QAAA,OAAA,EAAA,KAAA,SAAA,CAAA,YADA;AAEA,QAAA,WAAA,EAAA,MAAA,QAAA,KAAA,oBAAA,IAAA,cAAA,CAAA,IAAA,CAAA,WAFA;AAGA,QAAA,WAAA,EAAA,eAHA;AAIA,QAAA,YAAA,EAAA,KAAA,IAAA,GAAA,OAAA,CAAA,KAAA,EAAA,CAAA,EAAA,CAAA,CAAA;AAJA,OAAA;AAMA,KAnBA;;AAoBA,IAAA,cAAA,GAAA;AACA,aAAA;AACA,QAAA,OAAA,EAAA,KAAA,SAAA,CAAA,eADA;AAEA,QAAA,WAAA,EAAA,MAAA,UAAA,KAAA,oBAAA,kBAAA,cAAA,CAAA,GAAA,CAAA,EAFA;AAGA,QAAA,WAAA,EAAA,kBAHA;AAIA,QAAA,YAAA,EAAA,MAAA,GAAA,QAAA,CAAA,WAAA,CAAA,KAAA,SAAA,CAAA,QAAA,EAAA,aAAA,CAAA,KAAA,CAAA;AAJA,OAAA;AAMA;;AA3BA,GAnBA;AAgDA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,YAAA,EAAA,GAAA,KAAA,SAAA;AACA,WAAA,UAAA,GAAA,EAAA,CAAA,UAAA;AACA,WAAA,WAAA,GAAA,EAAA,CAAA,WAAA,CAHA,CAIA;AACA;AACA;;AACA,WAAA,WAAA,GAAA,EAAA,CAAA,WAAA;AACA,WAAA,WAAA,GAAA,EAAA,CAAA,QAAA;AACA;;AAVA;AAhDA,CAAA","sourcesContent":["<script>\r\nimport BlackHoleUpgradeButton from \"@/components/tabs/black-hole/BlackHoleUpgradeButton\";\r\n\r\nexport default {\r\n  name: \"BlackHoleUpgradeRow\",\r\n  components: {\r\n    BlackHoleUpgradeButton\r\n  },\r\n  props: {\r\n    blackHole: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isUnlocked: false,\r\n      isPermanent: false,\r\n      intervalVal: 0,\r\n      durationVal: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    blackHoleDescription() {\r\n      return this.blackHole.description(false);\r\n    },\r\n    intervalConfig() {\r\n      return {\r\n        upgrade: this.blackHole.intervalUpgrade,\r\n        description: () => `Reduce ${this.blackHoleDescription}'s inactive time by ${formatPercents(0.2)}`,\r\n        effectTitle: \"Current interval\",\r\n        formatEffect: () => `${TimeSpan.fromSeconds(this.blackHole.rawInterval).toStringShort(false)}`\r\n      };\r\n    },\r\n    powerConfig() {\r\n      return {\r\n        upgrade: this.blackHole.powerUpgrade,\r\n        description: () => `Make ${this.blackHoleDescription} ${formatPercents(0.35)} stronger`,\r\n        effectTitle: \"Current power\",\r\n        formatEffect: value => `${formatX(value, 2, 2)}`\r\n      };\r\n    },\r\n    durationConfig() {\r\n      return {\r\n        upgrade: this.blackHole.durationUpgrade,\r\n        description: () => `Extend ${this.blackHoleDescription}'s duration by ${formatPercents(0.3)}`,\r\n        effectTitle: \"Current duration\",\r\n        formatEffect: () => `${TimeSpan.fromSeconds(this.blackHole.duration).toStringShort(false)}`\r\n      };\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      const bh = this.blackHole;\r\n      this.isUnlocked = bh.isUnlocked;\r\n      this.isPermanent = bh.isPermanent;\r\n      // We pull directly from the black hole data here (and in formatEffect above) because there are other sources\r\n      // which also affect them, and this is the only place where these values are displayed directly in-game. Then\r\n      // we use these values as keys so that the buttons are forced to re-render immediately if they're ever changed\r\n      this.intervalVal = bh.rawInterval;\r\n      this.durationVal = bh.duration;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    v-if=\"isUnlocked\"\r\n    class=\"l-black-hole-upgrade-grid__row\"\r\n  >\r\n    <BlackHoleUpgradeButton\r\n      v-if=\"!isPermanent\"\r\n      :key=\"intervalVal\"\r\n      :config=\"intervalConfig\"\r\n    />\r\n    <BlackHoleUpgradeButton :config=\"powerConfig\" />\r\n    <BlackHoleUpgradeButton\r\n      v-if=\"!isPermanent\"\r\n      :key=\"durationVal\"\r\n      :config=\"durationConfig\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/black-hole"},"metadata":{},"sourceType":"module"}