{"ast":null,"code":"import { DC } from \"../../constants\";\nimport { PlayerProgress } from \"../../player-progress\";\nimport { MultiplierTabIcons } from \"./icons\"; // See index.js for documentation\n\nexport const IP = {\n  total: {\n    name: \"Total IP Gained on Infinity\",\n    displayOverride: () => Player.canCrunch ? format(gainedInfinityPoints(), 2, 2) : \"Cannot Crunch\",\n    // This effectively hides everything if the player can't actually gain any\n    multValue: () => Player.canCrunch ? gainedInfinityPoints() : 1,\n    isActive: () => PlayerProgress.infinityUnlocked() || Player.canCrunch,\n    dilationEffect: () => Laitela.isRunning ? 0.75 * Effects.product(DilationUpgrade.dilationPenalty) : 1,\n    isDilated: true,\n    overlay: [\"∞\", \"<i class='fa-solid fa-layer-group' />\"]\n  },\n  base: {\n    name: \"Base Infinity Points\",\n    isBase: true,\n    fakeValue: DC.D5,\n    multValue: () => {\n      const div = Effects.min(308, Achievement(103), TimeStudy(111));\n      return Decimal.pow10(player.records.thisInfinity.maxAM.log10() / div - 0.75);\n    },\n    isActive: () => player.break,\n    icon: MultiplierTabIcons.CONVERT_FROM(\"AM\")\n  },\n  antimatter: {\n    name: \"Infinity Points from Antimatter\",\n    displayOverride: () => `${format(player.records.thisInfinity.maxAM, 2, 2)} AM`,\n    // Just needs to match the value in base and be larger than 1\n    multValue: DC.D5,\n    isActive: () => player.break,\n    icon: MultiplierTabIcons.ANTIMATTER\n  },\n  divisor: {\n    name: \"Formula Improvement\",\n    displayOverride: () => {\n      const div = Effects.min(308, Achievement(103), TimeStudy(111));\n      return `log(AM)/${formatInt(308)} ➜ log(AM)/${format(div, 2, 1)}`;\n    },\n    powValue: () => 308 / Effects.min(308, Achievement(103), TimeStudy(111)),\n    isActive: () => Achievement(103).canBeApplied || TimeStudy(111).isBought,\n    icon: MultiplierTabIcons.DIVISOR(\"IP\")\n  },\n  infinityUpgrade: {\n    name: () => `Infinity Upgrade - Repeatable ${formatX(2)} IP`,\n    multValue: () => InfinityUpgrade.ipMult.effectOrDefault(1),\n    isActive: () => player.break && !Pelle.isDoomed,\n    icon: MultiplierTabIcons.UPGRADE(\"infinity\")\n  },\n  achievement: {\n    name: \"Achievements\",\n    multValue: () => DC.D1.timesEffectsOf(Achievement(85), Achievement(93), Achievement(116), Achievement(125), Achievement(141).effects.ipGain),\n    isActive: () => player.break && !Pelle.isDoomed,\n    icon: MultiplierTabIcons.ACHIEVEMENT\n  },\n  timeStudy: {\n    name: \"Time Studies\",\n    multValue: () => DC.D1.timesEffectsOf(TimeStudy(41), TimeStudy(51), TimeStudy(141), TimeStudy(142), TimeStudy(143)),\n    isActive: () => player.break && !Pelle.isDoomed,\n    icon: MultiplierTabIcons.TIME_STUDY\n  },\n  dilationUpgrade: {\n    name: \"Dilation Upgrade - IP multiplier based on DT\",\n    multValue: () => DilationUpgrade.ipMultDT.effectOrDefault(1),\n    isActive: () => DilationUpgrade.ipMultDT.canBeApplied,\n    icon: MultiplierTabIcons.UPGRADE(\"dilation\")\n  },\n  glyph: {\n    name: \"Equipped Glyphs\",\n    multValue: () => Pelle.specialGlyphEffect.infinity.times(Pelle.isDoomed ? 1 : getAdjustedGlyphEffect(\"infinityIP\")),\n    powValue: () => GlyphAlteration.isAdded(\"infinity\") ? getSecondaryGlyphEffect(\"infinityIP\") : 1,\n    isActive: () => PlayerProgress.realityUnlocked(),\n    icon: MultiplierTabIcons.GENERIC_GLYPH\n  },\n  alchemy: {\n    name: \"Glyph Alchemy\",\n    multValue: () => Replicanti.amount.powEffectOf(AlchemyResource.exponential),\n    isActive: () => Ra.unlocks.unlockGlyphAlchemy.canBeApplied,\n    icon: MultiplierTabIcons.ALCHEMY\n  },\n  pelle: {\n    name: \"Pelle Strike - Vacuum Rift\",\n    multValue: () => DC.D1.timesEffectsOf(PelleRifts.vacuum),\n    isActive: () => Pelle.isDoomed,\n    icon: MultiplierTabIcons.PELLE\n  },\n  iap: {\n    name: \"Shop Tab Purchases\",\n    multValue: () => ShopPurchase.IPPurchases.currentMult,\n    isActive: () => ShopPurchaseData.totalSTD > 0,\n    icon: MultiplierTabIcons.IAP\n  },\n  nerfTeresa: {\n    name: \"Teresa's Reality\",\n    powValue: () => 0.55,\n    isActive: () => Teresa.isRunning,\n    icon: MultiplierTabIcons.GENERIC_TERESA\n  },\n  nerfV: {\n    name: \"V's Reality\",\n    powValue: () => 0.5,\n    isActive: () => V.isRunning,\n    icon: MultiplierTabIcons.GENERIC_V\n  }\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/multiplier-tab/infinity-points.js"],"names":["DC","PlayerProgress","MultiplierTabIcons","IP","total","name","displayOverride","Player","canCrunch","format","gainedInfinityPoints","multValue","isActive","infinityUnlocked","dilationEffect","Laitela","isRunning","Effects","product","DilationUpgrade","dilationPenalty","isDilated","overlay","base","isBase","fakeValue","D5","div","min","Achievement","TimeStudy","Decimal","pow10","player","records","thisInfinity","maxAM","log10","break","icon","CONVERT_FROM","antimatter","ANTIMATTER","divisor","formatInt","powValue","canBeApplied","isBought","DIVISOR","infinityUpgrade","formatX","InfinityUpgrade","ipMult","effectOrDefault","Pelle","isDoomed","UPGRADE","achievement","D1","timesEffectsOf","effects","ipGain","ACHIEVEMENT","timeStudy","TIME_STUDY","dilationUpgrade","ipMultDT","glyph","specialGlyphEffect","infinity","times","getAdjustedGlyphEffect","GlyphAlteration","isAdded","getSecondaryGlyphEffect","realityUnlocked","GENERIC_GLYPH","alchemy","Replicanti","amount","powEffectOf","AlchemyResource","exponential","Ra","unlocks","unlockGlyphAlchemy","ALCHEMY","pelle","PelleRifts","vacuum","PELLE","iap","ShopPurchase","IPPurchases","currentMult","ShopPurchaseData","totalSTD","IAP","nerfTeresa","Teresa","GENERIC_TERESA","nerfV","V","GENERIC_V"],"mappings":"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","sourcesContent":["import { DC } from \"../../constants\";\r\nimport { PlayerProgress } from \"../../player-progress\";\r\n\r\nimport { MultiplierTabIcons } from \"./icons\";\r\n\r\n// See index.js for documentation\r\nexport const IP = {\r\n  total: {\r\n    name: \"Total IP Gained on Infinity\",\r\n    displayOverride: () => (Player.canCrunch\r\n      ? format(gainedInfinityPoints(), 2, 2)\r\n      : \"Cannot Crunch\"),\r\n    // This effectively hides everything if the player can't actually gain any\r\n    multValue: () => (Player.canCrunch ? gainedInfinityPoints() : 1),\r\n    isActive: () => PlayerProgress.infinityUnlocked() || Player.canCrunch,\r\n    dilationEffect: () => (Laitela.isRunning ? 0.75 * Effects.product(DilationUpgrade.dilationPenalty) : 1),\r\n    isDilated: true,\r\n    overlay: [\"∞\", \"<i class='fa-solid fa-layer-group' />\"],\r\n  },\r\n  base: {\r\n    name: \"Base Infinity Points\",\r\n    isBase: true,\r\n    fakeValue: DC.D5,\r\n    multValue: () => {\r\n      const div = Effects.min(308, Achievement(103), TimeStudy(111));\r\n      return Decimal.pow10(player.records.thisInfinity.maxAM.log10() / div - 0.75);\r\n    },\r\n    isActive: () => player.break,\r\n    icon: MultiplierTabIcons.CONVERT_FROM(\"AM\"),\r\n  },\r\n  antimatter: {\r\n    name: \"Infinity Points from Antimatter\",\r\n    displayOverride: () => `${format(player.records.thisInfinity.maxAM, 2, 2)} AM`,\r\n    // Just needs to match the value in base and be larger than 1\r\n    multValue: DC.D5,\r\n    isActive: () => player.break,\r\n    icon: MultiplierTabIcons.ANTIMATTER,\r\n  },\r\n  divisor: {\r\n    name: \"Formula Improvement\",\r\n    displayOverride: () => {\r\n      const div = Effects.min(308, Achievement(103), TimeStudy(111));\r\n      return `log(AM)/${formatInt(308)} ➜ log(AM)/${format(div, 2, 1)}`;\r\n    },\r\n    powValue: () => 308 / Effects.min(308, Achievement(103), TimeStudy(111)),\r\n    isActive: () => Achievement(103).canBeApplied || TimeStudy(111).isBought,\r\n    icon: MultiplierTabIcons.DIVISOR(\"IP\"),\r\n  },\r\n  infinityUpgrade: {\r\n    name: () => `Infinity Upgrade - Repeatable ${formatX(2)} IP`,\r\n    multValue: () => InfinityUpgrade.ipMult.effectOrDefault(1),\r\n    isActive: () => player.break && !Pelle.isDoomed,\r\n    icon: MultiplierTabIcons.UPGRADE(\"infinity\"),\r\n  },\r\n  achievement: {\r\n    name: \"Achievements\",\r\n    multValue: () => DC.D1.timesEffectsOf(\r\n      Achievement(85),\r\n      Achievement(93),\r\n      Achievement(116),\r\n      Achievement(125),\r\n      Achievement(141).effects.ipGain,\r\n    ),\r\n    isActive: () => player.break && !Pelle.isDoomed,\r\n    icon: MultiplierTabIcons.ACHIEVEMENT,\r\n  },\r\n  timeStudy: {\r\n    name: \"Time Studies\",\r\n    multValue: () => DC.D1.timesEffectsOf(\r\n      TimeStudy(41),\r\n      TimeStudy(51),\r\n      TimeStudy(141),\r\n      TimeStudy(142),\r\n      TimeStudy(143),\r\n    ),\r\n    isActive: () => player.break && !Pelle.isDoomed,\r\n    icon: MultiplierTabIcons.TIME_STUDY,\r\n  },\r\n  dilationUpgrade: {\r\n    name: \"Dilation Upgrade - IP multiplier based on DT\",\r\n    multValue: () => DilationUpgrade.ipMultDT.effectOrDefault(1),\r\n    isActive: () => DilationUpgrade.ipMultDT.canBeApplied,\r\n    icon: MultiplierTabIcons.UPGRADE(\"dilation\"),\r\n  },\r\n  glyph: {\r\n    name: \"Equipped Glyphs\",\r\n    multValue: () => Pelle.specialGlyphEffect.infinity.times(Pelle.isDoomed ? 1 : getAdjustedGlyphEffect(\"infinityIP\")),\r\n    powValue: () => (GlyphAlteration.isAdded(\"infinity\") ? getSecondaryGlyphEffect(\"infinityIP\") : 1),\r\n    isActive: () => PlayerProgress.realityUnlocked(),\r\n    icon: MultiplierTabIcons.GENERIC_GLYPH,\r\n  },\r\n  alchemy: {\r\n    name: \"Glyph Alchemy\",\r\n    multValue: () => Replicanti.amount.powEffectOf(AlchemyResource.exponential),\r\n    isActive: () => Ra.unlocks.unlockGlyphAlchemy.canBeApplied,\r\n    icon: MultiplierTabIcons.ALCHEMY,\r\n  },\r\n  pelle: {\r\n    name: \"Pelle Strike - Vacuum Rift\",\r\n    multValue: () => DC.D1.timesEffectsOf(PelleRifts.vacuum),\r\n    isActive: () => Pelle.isDoomed,\r\n    icon: MultiplierTabIcons.PELLE,\r\n  },\r\n  iap: {\r\n    name: \"Shop Tab Purchases\",\r\n    multValue: () => ShopPurchase.IPPurchases.currentMult,\r\n    isActive: () => ShopPurchaseData.totalSTD > 0,\r\n    icon: MultiplierTabIcons.IAP,\r\n  },\r\n\r\n  nerfTeresa: {\r\n    name: \"Teresa's Reality\",\r\n    powValue: () => 0.55,\r\n    isActive: () => Teresa.isRunning,\r\n    icon: MultiplierTabIcons.GENERIC_TERESA,\r\n  },\r\n  nerfV: {\r\n    name: \"V's Reality\",\r\n    powValue: () => 0.5,\r\n    isActive: () => V.isRunning,\r\n    icon: MultiplierTabIcons.GENERIC_V,\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}