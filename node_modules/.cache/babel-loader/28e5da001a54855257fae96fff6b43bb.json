{"ast":null,"code":"import CostDisplay from \"@/components/CostDisplay\";\nimport DescriptionDisplay from \"@/components/DescriptionDisplay\";\nimport EffectDisplay from \"@/components/EffectDisplay\";\nimport PrimaryToggleButton from \"@/components/PrimaryToggleButton\";\nexport default {\n  name: \"BlackHoleUpgradeButton\",\n  components: {\n    PrimaryToggleButton,\n    DescriptionDisplay,\n    EffectDisplay,\n    CostDisplay\n  },\n  props: {\n    config: {\n      type: Object,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      isAffordable: false,\n      isCapped: false,\n      isAutoUnlocked: false,\n      isAutobuyerOn: false\n    };\n  },\n\n  computed: {\n    effectConfig() {\n      const {\n        config\n      } = this;\n      return {\n        effect: () => config.upgrade.value,\n        formatEffect: value => config.formatEffect(value)\n      };\n    },\n\n    costConfig() {\n      const {\n        config\n      } = this;\n      return {\n        cost: () => config.upgrade.cost,\n        formatCost: value => format(value, 2, 0)\n      };\n    },\n\n    classObject() {\n      return {\n        \"c-reality-upgrade-btn--unavailable\": !this.isAffordable\n      };\n    }\n\n  },\n  watch: {\n    isAutobuyerOn(newValue) {\n      Autobuyer.blackHolePower(this.config.upgrade.id).isActive = newValue;\n    }\n\n  },\n  methods: {\n    update() {\n      this.isCapped = this.config.upgrade.value === 0;\n      this.isAffordable = this.config.upgrade.isAffordable && !this.isCapped;\n      const hasAutobuyer = this.config.upgrade.hasAutobuyer;\n      const autobuyer = Autobuyer.blackHolePower(this.config.upgrade.id);\n      this.isAutoUnlocked = hasAutobuyer && autobuyer.isUnlocked;\n      this.isAutobuyerOn = hasAutobuyer && autobuyer.isActive;\n    }\n\n  }\n};","map":{"version":3,"sources":["BlackHoleUpgradeButton.vue"],"names":[],"mappings":"AACA,OAAA,WAAA,MAAA,0BAAA;AACA,OAAA,kBAAA,MAAA,iCAAA;AACA,OAAA,aAAA,MAAA,4BAAA;AACA,OAAA,mBAAA,MAAA,kCAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,wBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,mBADA;AAEA,IAAA,kBAFA;AAGA,IAAA,aAHA;AAIA,IAAA;AAJA,GAFA;AAQA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GARA;;AAcA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,YAAA,EAAA,KADA;AAEA,MAAA,QAAA,EAAA,KAFA;AAGA,MAAA,cAAA,EAAA,KAHA;AAIA,MAAA,aAAA,EAAA;AAJA,KAAA;AAMA,GArBA;;AAsBA,EAAA,QAAA,EAAA;AACA,IAAA,YAAA,GAAA;AACA,YAAA;AAAA,QAAA;AAAA,UAAA,IAAA;AACA,aAAA;AACA,QAAA,MAAA,EAAA,MAAA,MAAA,CAAA,OAAA,CAAA,KADA;AAEA,QAAA,YAAA,EAAA,KAAA,IAAA,MAAA,CAAA,YAAA,CAAA,KAAA;AAFA,OAAA;AAIA,KAPA;;AAQA,IAAA,UAAA,GAAA;AACA,YAAA;AAAA,QAAA;AAAA,UAAA,IAAA;AACA,aAAA;AACA,QAAA,IAAA,EAAA,MAAA,MAAA,CAAA,OAAA,CAAA,IADA;AAEA,QAAA,UAAA,EAAA,KAAA,IAAA,MAAA,CAAA,KAAA,EAAA,CAAA,EAAA,CAAA;AAFA,OAAA;AAIA,KAdA;;AAeA,IAAA,WAAA,GAAA;AACA,aAAA;AACA,8CAAA,CAAA,KAAA;AADA,OAAA;AAGA;;AAnBA,GAtBA;AA2CA,EAAA,KAAA,EAAA;AACA,IAAA,aAAA,CAAA,QAAA,EAAA;AACA,MAAA,SAAA,CAAA,cAAA,CAAA,KAAA,MAAA,CAAA,OAAA,CAAA,EAAA,EAAA,QAAA,GAAA,QAAA;AACA;;AAHA,GA3CA;AAgDA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,QAAA,GAAA,KAAA,MAAA,CAAA,OAAA,CAAA,KAAA,KAAA,CAAA;AACA,WAAA,YAAA,GAAA,KAAA,MAAA,CAAA,OAAA,CAAA,YAAA,IAAA,CAAA,KAAA,QAAA;AACA,YAAA,YAAA,GAAA,KAAA,MAAA,CAAA,OAAA,CAAA,YAAA;AACA,YAAA,SAAA,GAAA,SAAA,CAAA,cAAA,CAAA,KAAA,MAAA,CAAA,OAAA,CAAA,EAAA,CAAA;AACA,WAAA,cAAA,GAAA,YAAA,IAAA,SAAA,CAAA,UAAA;AACA,WAAA,aAAA,GAAA,YAAA,IAAA,SAAA,CAAA,QAAA;AACA;;AARA;AAhDA,CAAA","sourcesContent":["<script>\r\nimport CostDisplay from \"@/components/CostDisplay\";\r\nimport DescriptionDisplay from \"@/components/DescriptionDisplay\";\r\nimport EffectDisplay from \"@/components/EffectDisplay\";\r\nimport PrimaryToggleButton from \"@/components/PrimaryToggleButton\";\r\n\r\nexport default {\r\n  name: \"BlackHoleUpgradeButton\",\r\n  components: {\r\n    PrimaryToggleButton,\r\n    DescriptionDisplay,\r\n    EffectDisplay,\r\n    CostDisplay\r\n  },\r\n  props: {\r\n    config: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isAffordable: false,\r\n      isCapped: false,\r\n      isAutoUnlocked: false,\r\n      isAutobuyerOn: false\r\n    };\r\n  },\r\n  computed: {\r\n    effectConfig() {\r\n      const { config } = this;\r\n      return {\r\n        effect: () => config.upgrade.value,\r\n        formatEffect: value => config.formatEffect(value)\r\n      };\r\n    },\r\n    costConfig() {\r\n      const { config } = this;\r\n      return {\r\n        cost: () => config.upgrade.cost,\r\n        formatCost: value => format(value, 2, 0)\r\n      };\r\n    },\r\n    classObject() {\r\n      return {\r\n        \"c-reality-upgrade-btn--unavailable\": !this.isAffordable\r\n      };\r\n    }\r\n  },\r\n  watch: {\r\n    isAutobuyerOn(newValue) {\r\n      Autobuyer.blackHolePower(this.config.upgrade.id).isActive = newValue;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isCapped = this.config.upgrade.value === 0;\r\n      this.isAffordable = this.config.upgrade.isAffordable && !this.isCapped;\r\n      const hasAutobuyer = this.config.upgrade.hasAutobuyer;\r\n      const autobuyer = Autobuyer.blackHolePower(this.config.upgrade.id);\r\n      this.isAutoUnlocked = hasAutobuyer && autobuyer.isUnlocked;\r\n      this.isAutobuyerOn = hasAutobuyer && autobuyer.isActive;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-spoon-btn-group\">\r\n    <button\r\n      :class=\"classObject\"\r\n      class=\"l-reality-upgrade-btn c-reality-upgrade-btn\"\r\n      @click=\"config.upgrade.purchase()\"\r\n    >\r\n      <DescriptionDisplay :config=\"config\" />\r\n      <EffectDisplay\r\n        :config=\"effectConfig\"\r\n        :label=\"config.effectTitle\"\r\n      />\r\n      <CostDisplay\r\n        v-if=\"!isCapped\"\r\n        :config=\"costConfig\"\r\n        name=\"Reality Machine\"\r\n      />\r\n    </button>\r\n    <PrimaryToggleButton\r\n      v-if=\"isAutoUnlocked\"\r\n      v-model=\"isAutobuyerOn\"\r\n      label=\"Auto:\"\r\n      class=\"l--spoon-btn-group__little-spoon-reality-btn o-primary-btn--reality-upgrade-toggle\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/black-hole"},"metadata":{},"sourceType":"module"}