{"ast":null,"code":"export const GALAXY_TYPE = {\n  NORMAL: 0,\n  DISTANT: 1,\n  REMOTE: 2\n};\n\nclass GalaxyRequirement {\n  constructor(tier, amount) {\n    this.tier = tier;\n    this.amount = amount;\n  }\n\n  get isSatisfied() {\n    const dimension = AntimatterDimension(this.tier);\n    return dimension.totalAmount.gte(this.amount);\n  }\n\n}\n\nexport class Galaxy {\n  static get remoteStart() {\n    return RealityUpgrade(21).effectOrDefault(800);\n  }\n\n  static get requirement() {\n    return this.requirementAt(player.galaxies);\n  }\n  /**\r\n   * Figure out what galaxy number we can buy up to\r\n   * @param {number} currency Either dim 8 or dim 6, depends on current challenge\r\n   * @returns {number} Max number of galaxies (total)\r\n   */\n\n\n  static buyableGalaxies(currency) {\n    const bulk = bulkBuyBinarySearch(new Decimal(currency), {\n      costFunction: x => this.requirementAt(x).amount,\n      cumulative: false\n    }, player.galaxies);\n    if (!bulk) throw new Error(\"Unexpected failure to calculate galaxy purchase\");\n    return player.galaxies + bulk.quantity;\n  }\n\n  static requirementAt(galaxies) {\n    let amount = Galaxy.baseCost + galaxies * Galaxy.costMult;\n    const type = Galaxy.typeAt(galaxies);\n\n    if (type === GALAXY_TYPE.DISTANT && EternityChallenge(5).isRunning) {\n      amount += Math.pow(galaxies, 2) + galaxies;\n    } else if (type === GALAXY_TYPE.DISTANT || type === GALAXY_TYPE.REMOTE) {\n      const galaxyCostScalingStart = this.costScalingStart;\n      const galaxiesBeforeDistant = Math.clampMin(galaxies - galaxyCostScalingStart + 1, 0);\n      amount += Math.pow(galaxiesBeforeDistant, 2) + galaxiesBeforeDistant;\n    }\n\n    if (type === GALAXY_TYPE.REMOTE) {\n      amount *= Math.pow(1.002, galaxies - (Galaxy.remoteStart - 1));\n    }\n\n    amount -= Effects.sum(InfinityUpgrade.resetBoost);\n    if (InfinityChallenge(5).isCompleted) amount -= 1;\n    if (GlyphAlteration.isAdded(\"power\")) amount *= getSecondaryGlyphEffect(\"powerpow\");\n    amount = Math.floor(amount);\n    const tier = Galaxy.requiredTier;\n    return new GalaxyRequirement(tier, amount);\n  }\n\n  static get costMult() {\n    return Effects.min(NormalChallenge(10).isRunning ? 90 : 60, TimeStudy(42));\n  }\n\n  static get baseCost() {\n    return NormalChallenge(10).isRunning ? 99 : 80;\n  }\n\n  static get requiredTier() {\n    return NormalChallenge(10).isRunning ? 6 : 8;\n  }\n\n  static get canBeBought() {\n    if (EternityChallenge(6).isRunning && !Enslaved.isRunning) return false;\n    if (NormalChallenge(8).isRunning || InfinityChallenge(7).isRunning) return false;\n    if (player.records.thisInfinity.maxAM.gt(Player.infinityGoal) && (!player.break || Player.isInAntimatterChallenge)) return false;\n    return true;\n  }\n\n  static get lockText() {\n    if (this.canBeBought) return null;\n    if (EternityChallenge(6).isRunning) return \"Locked (Eternity Challenge 6)\";\n    if (InfinityChallenge(7).isRunning) return \"Locked (Infinity Challenge 7)\";\n    if (InfinityChallenge(1).isRunning) return \"Locked (Infinity Challenge 1)\";\n    if (NormalChallenge(8).isRunning) return \"Locked (8th Antimatter Dimension Autobuyer Challenge)\";\n    return null;\n  }\n\n  static get costScalingStart() {\n    return 100 + TimeStudy(302).effectOrDefault(0) + Effects.sum(TimeStudy(223), TimeStudy(224), EternityChallenge(5).reward, GlyphSacrifice.power);\n  }\n\n  static get type() {\n    return this.typeAt(player.galaxies);\n  }\n\n  static typeAt(galaxies) {\n    if (galaxies >= Galaxy.remoteStart) {\n      return GALAXY_TYPE.REMOTE;\n    }\n\n    if (EternityChallenge(5).isRunning || galaxies >= this.costScalingStart) {\n      return GALAXY_TYPE.DISTANT;\n    }\n\n    return GALAXY_TYPE.NORMAL;\n  }\n\n}\n\nfunction galaxyReset() {\n  EventHub.dispatch(GAME_EVENT.GALAXY_RESET_BEFORE);\n  player.galaxies++;\n\n  if (!Achievement(143).isUnlocked || Pelle.isDoomed && !PelleUpgrade.galaxyNoResetDimboost.canBeApplied) {\n    player.dimensionBoosts = 0;\n  }\n\n  softReset(0);\n  if (Notations.current === Notation.emoji) player.requirementChecks.permanent.emojiGalaxies++; // This is specifically reset here because the check is actually per-galaxy and not per-infinity\n\n  player.requirementChecks.infinity.noSacrifice = true;\n  EventHub.dispatch(GAME_EVENT.GALAXY_RESET_AFTER);\n}\n\nexport function manualRequestGalaxyReset(bulk) {\n  if (!Galaxy.canBeBought || !Galaxy.requirement.isSatisfied) return;\n  if (GameEnd.creditsEverClosed) return;\n\n  if (RealityUpgrade(7).isLockingMechanics && player.galaxies > 0) {\n    RealityUpgrade(7).tryShowWarningModal();\n    return;\n  }\n\n  if (player.options.confirmations.antimatterGalaxy) {\n    Modal.antimatterGalaxy.show({\n      bulk: bulk && EternityMilestone.autobuyMaxGalaxies.isReached\n    });\n    return;\n  }\n\n  requestGalaxyReset(bulk);\n} // All galaxy reset requests, both automatic and manual, eventually go through this function; therefore it suffices\n// to restrict galaxy count for RUPG7's requirement here and nowhere else\n\nexport function requestGalaxyReset(bulk, limit = Number.MAX_VALUE) {\n  const restrictedLimit = RealityUpgrade(7).isLockingMechanics ? 1 : limit;\n  if (EternityMilestone.autobuyMaxGalaxies.isReached && bulk) return maxBuyGalaxies(restrictedLimit);\n  if (player.galaxies >= restrictedLimit || !Galaxy.canBeBought || !Galaxy.requirement.isSatisfied) return false;\n  Tutorial.turnOffEffect(TUTORIAL_STATE.GALAXY);\n  galaxyReset();\n  return true;\n}\n\nfunction maxBuyGalaxies(limit = Number.MAX_VALUE) {\n  if (player.galaxies >= limit || !Galaxy.canBeBought) return false; // Check for ability to buy one galaxy (which is pretty efficient)\n\n  const req = Galaxy.requirement;\n  if (!req.isSatisfied) return false;\n  const dim = AntimatterDimension(req.tier);\n  const newGalaxies = Math.clampMax(Galaxy.buyableGalaxies(Math.round(dim.totalAmount.toNumber())), limit);\n\n  if (Notations.current === Notation.emoji) {\n    player.requirementChecks.permanent.emojiGalaxies += newGalaxies - player.galaxies;\n  } // Galaxy count is incremented by galaxyReset(), so add one less than we should:\n\n\n  player.galaxies = newGalaxies - 1;\n  galaxyReset();\n  if (Enslaved.isRunning && player.galaxies > 1) EnslavedProgress.c10.giveProgress();\n  Tutorial.turnOffEffect(TUTORIAL_STATE.GALAXY);\n  return true;\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/galaxy.js"],"names":["GALAXY_TYPE","NORMAL","DISTANT","REMOTE","GalaxyRequirement","constructor","tier","amount","isSatisfied","dimension","AntimatterDimension","totalAmount","gte","Galaxy","remoteStart","RealityUpgrade","effectOrDefault","requirement","requirementAt","player","galaxies","buyableGalaxies","currency","bulk","bulkBuyBinarySearch","Decimal","costFunction","x","cumulative","Error","quantity","baseCost","costMult","type","typeAt","EternityChallenge","isRunning","Math","pow","galaxyCostScalingStart","costScalingStart","galaxiesBeforeDistant","clampMin","Effects","sum","InfinityUpgrade","resetBoost","InfinityChallenge","isCompleted","GlyphAlteration","isAdded","getSecondaryGlyphEffect","floor","requiredTier","min","NormalChallenge","TimeStudy","canBeBought","Enslaved","records","thisInfinity","maxAM","gt","Player","infinityGoal","break","isInAntimatterChallenge","lockText","reward","GlyphSacrifice","power","galaxyReset","EventHub","dispatch","GAME_EVENT","GALAXY_RESET_BEFORE","Achievement","isUnlocked","Pelle","isDoomed","PelleUpgrade","galaxyNoResetDimboost","canBeApplied","dimensionBoosts","softReset","Notations","current","Notation","emoji","requirementChecks","permanent","emojiGalaxies","infinity","noSacrifice","GALAXY_RESET_AFTER","manualRequestGalaxyReset","GameEnd","creditsEverClosed","isLockingMechanics","tryShowWarningModal","options","confirmations","antimatterGalaxy","Modal","show","EternityMilestone","autobuyMaxGalaxies","isReached","requestGalaxyReset","limit","Number","MAX_VALUE","restrictedLimit","maxBuyGalaxies","Tutorial","turnOffEffect","TUTORIAL_STATE","GALAXY","req","dim","newGalaxies","clampMax","round","toNumber","EnslavedProgress","c10","giveProgress"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG;AACzBC,EAAAA,MAAM,EAAE,CADiB;AAEzBC,EAAAA,OAAO,EAAE,CAFgB;AAGzBC,EAAAA,MAAM,EAAE;AAHiB,CAApB;;AAMP,MAAMC,iBAAN,CAAwB;AACtBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACxB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;AAEc,MAAXC,WAAW,GAAG;AAChB,UAAMC,SAAS,GAAGC,mBAAmB,CAAC,KAAKJ,IAAN,CAArC;AACA,WAAOG,SAAS,CAACE,WAAV,CAAsBC,GAAtB,CAA0B,KAAKL,MAA/B,CAAP;AACD;;AATqB;;AAYxB,OAAO,MAAMM,MAAN,CAAa;AACI,aAAXC,WAAW,GAAG;AACvB,WAAOC,cAAc,CAAC,EAAD,CAAd,CAAmBC,eAAnB,CAAmC,GAAnC,CAAP;AACD;;AAEqB,aAAXC,WAAW,GAAG;AACvB,WAAO,KAAKC,aAAL,CAAmBC,MAAM,CAACC,QAA1B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACwB,SAAfC,eAAe,CAACC,QAAD,EAAW;AAC/B,UAAMC,IAAI,GAAGC,mBAAmB,CAAC,IAAIC,OAAJ,CAAYH,QAAZ,CAAD,EAAwB;AACtDI,MAAAA,YAAY,EAAEC,CAAC,IAAI,KAAKT,aAAL,CAAmBS,CAAnB,EAAsBpB,MADa;AAEtDqB,MAAAA,UAAU,EAAE;AAF0C,KAAxB,EAG7BT,MAAM,CAACC,QAHsB,CAAhC;AAIA,QAAI,CAACG,IAAL,EAAW,MAAM,IAAIM,KAAJ,CAAU,iDAAV,CAAN;AACX,WAAOV,MAAM,CAACC,QAAP,GAAkBG,IAAI,CAACO,QAA9B;AACD;;AAEmB,SAAbZ,aAAa,CAACE,QAAD,EAAW;AAC7B,QAAIb,MAAM,GAAGM,MAAM,CAACkB,QAAP,GAAmBX,QAAQ,GAAGP,MAAM,CAACmB,QAAlD;AAEA,UAAMC,IAAI,GAAGpB,MAAM,CAACqB,MAAP,CAAcd,QAAd,CAAb;;AAEA,QAAIa,IAAI,KAAKjC,WAAW,CAACE,OAArB,IAAgCiC,iBAAiB,CAAC,CAAD,CAAjB,CAAqBC,SAAzD,EAAoE;AAClE7B,MAAAA,MAAM,IAAI8B,IAAI,CAACC,GAAL,CAASlB,QAAT,EAAmB,CAAnB,IAAwBA,QAAlC;AACD,KAFD,MAEO,IAAIa,IAAI,KAAKjC,WAAW,CAACE,OAArB,IAAgC+B,IAAI,KAAKjC,WAAW,CAACG,MAAzD,EAAiE;AACtE,YAAMoC,sBAAsB,GAAG,KAAKC,gBAApC;AACA,YAAMC,qBAAqB,GAAGJ,IAAI,CAACK,QAAL,CAActB,QAAQ,GAAGmB,sBAAX,GAAoC,CAAlD,EAAqD,CAArD,CAA9B;AACAhC,MAAAA,MAAM,IAAI8B,IAAI,CAACC,GAAL,CAASG,qBAAT,EAAgC,CAAhC,IAAqCA,qBAA/C;AACD;;AAED,QAAIR,IAAI,KAAKjC,WAAW,CAACG,MAAzB,EAAiC;AAC/BI,MAAAA,MAAM,IAAI8B,IAAI,CAACC,GAAL,CAAS,KAAT,EAAgBlB,QAAQ,IAAIP,MAAM,CAACC,WAAP,GAAqB,CAAzB,CAAxB,CAAV;AACD;;AAEDP,IAAAA,MAAM,IAAIoC,OAAO,CAACC,GAAR,CAAYC,eAAe,CAACC,UAA5B,CAAV;AACA,QAAIC,iBAAiB,CAAC,CAAD,CAAjB,CAAqBC,WAAzB,EAAsCzC,MAAM,IAAI,CAAV;AAEtC,QAAI0C,eAAe,CAACC,OAAhB,CAAwB,OAAxB,CAAJ,EAAsC3C,MAAM,IAAI4C,uBAAuB,CAAC,UAAD,CAAjC;AAEtC5C,IAAAA,MAAM,GAAG8B,IAAI,CAACe,KAAL,CAAW7C,MAAX,CAAT;AACA,UAAMD,IAAI,GAAGO,MAAM,CAACwC,YAApB;AACA,WAAO,IAAIjD,iBAAJ,CAAsBE,IAAtB,EAA4BC,MAA5B,CAAP;AACD;;AAEkB,aAARyB,QAAQ,GAAG;AACpB,WAAOW,OAAO,CAACW,GAAR,CAAYC,eAAe,CAAC,EAAD,CAAf,CAAoBnB,SAApB,GAAgC,EAAhC,GAAqC,EAAjD,EAAqDoB,SAAS,CAAC,EAAD,CAA9D,CAAP;AACD;;AAEkB,aAARzB,QAAQ,GAAG;AACpB,WAAOwB,eAAe,CAAC,EAAD,CAAf,CAAoBnB,SAApB,GAAgC,EAAhC,GAAqC,EAA5C;AACD;;AAEsB,aAAZiB,YAAY,GAAG;AACxB,WAAOE,eAAe,CAAC,EAAD,CAAf,CAAoBnB,SAApB,GAAgC,CAAhC,GAAoC,CAA3C;AACD;;AAEqB,aAAXqB,WAAW,GAAG;AACvB,QAAItB,iBAAiB,CAAC,CAAD,CAAjB,CAAqBC,SAArB,IAAkC,CAACsB,QAAQ,CAACtB,SAAhD,EAA2D,OAAO,KAAP;AAC3D,QAAImB,eAAe,CAAC,CAAD,CAAf,CAAmBnB,SAAnB,IAAgCW,iBAAiB,CAAC,CAAD,CAAjB,CAAqBX,SAAzD,EAAoE,OAAO,KAAP;AACpE,QAAIjB,MAAM,CAACwC,OAAP,CAAeC,YAAf,CAA4BC,KAA5B,CAAkCC,EAAlC,CAAqCC,MAAM,CAACC,YAA5C,MACA,CAAC7C,MAAM,CAAC8C,KAAR,IAAiBF,MAAM,CAACG,uBADxB,CAAJ,EACsD,OAAO,KAAP;AACtD,WAAO,IAAP;AACD;;AAEkB,aAARC,QAAQ,GAAG;AACpB,QAAI,KAAKV,WAAT,EAAsB,OAAO,IAAP;AACtB,QAAItB,iBAAiB,CAAC,CAAD,CAAjB,CAAqBC,SAAzB,EAAoC,OAAO,+BAAP;AACpC,QAAIW,iBAAiB,CAAC,CAAD,CAAjB,CAAqBX,SAAzB,EAAoC,OAAO,+BAAP;AACpC,QAAIW,iBAAiB,CAAC,CAAD,CAAjB,CAAqBX,SAAzB,EAAoC,OAAO,+BAAP;AACpC,QAAImB,eAAe,CAAC,CAAD,CAAf,CAAmBnB,SAAvB,EAAkC,OAAO,uDAAP;AAClC,WAAO,IAAP;AACD;;AAE0B,aAAhBI,gBAAgB,GAAG;AAC5B,WAAO,MAAMgB,SAAS,CAAC,GAAD,CAAT,CAAexC,eAAf,CAA+B,CAA/B,CAAN,GAA0C2B,OAAO,CAACC,GAAR,CAC/CY,SAAS,CAAC,GAAD,CADsC,EAE/CA,SAAS,CAAC,GAAD,CAFsC,EAG/CrB,iBAAiB,CAAC,CAAD,CAAjB,CAAqBiC,MAH0B,EAI/CC,cAAc,CAACC,KAJgC,CAAjD;AAMD;;AAEc,aAAJrC,IAAI,GAAG;AAChB,WAAO,KAAKC,MAAL,CAAYf,MAAM,CAACC,QAAnB,CAAP;AACD;;AAEY,SAANc,MAAM,CAACd,QAAD,EAAW;AACtB,QAAIA,QAAQ,IAAIP,MAAM,CAACC,WAAvB,EAAoC;AAClC,aAAOd,WAAW,CAACG,MAAnB;AACD;;AACD,QAAIgC,iBAAiB,CAAC,CAAD,CAAjB,CAAqBC,SAArB,IAAkChB,QAAQ,IAAI,KAAKoB,gBAAvD,EAAyE;AACvE,aAAOxC,WAAW,CAACE,OAAnB;AACD;;AACD,WAAOF,WAAW,CAACC,MAAnB;AACD;;AApGiB;;AAuGpB,SAASsE,WAAT,GAAuB;AACrBC,EAAAA,QAAQ,CAACC,QAAT,CAAkBC,UAAU,CAACC,mBAA7B;AACAxD,EAAAA,MAAM,CAACC,QAAP;;AACA,MAAI,CAACwD,WAAW,CAAC,GAAD,CAAX,CAAiBC,UAAlB,IAAiCC,KAAK,CAACC,QAAN,IAAkB,CAACC,YAAY,CAACC,qBAAb,CAAmCC,YAA3F,EAA0G;AACxG/D,IAAAA,MAAM,CAACgE,eAAP,GAAyB,CAAzB;AACD;;AACDC,EAAAA,SAAS,CAAC,CAAD,CAAT;AACA,MAAIC,SAAS,CAACC,OAAV,KAAsBC,QAAQ,CAACC,KAAnC,EAA0CrE,MAAM,CAACsE,iBAAP,CAAyBC,SAAzB,CAAmCC,aAAnC,GAPrB,CAQrB;;AACAxE,EAAAA,MAAM,CAACsE,iBAAP,CAAyBG,QAAzB,CAAkCC,WAAlC,GAAgD,IAAhD;AACArB,EAAAA,QAAQ,CAACC,QAAT,CAAkBC,UAAU,CAACoB,kBAA7B;AACD;;AAED,OAAO,SAASC,wBAAT,CAAkCxE,IAAlC,EAAwC;AAC7C,MAAI,CAACV,MAAM,CAAC4C,WAAR,IAAuB,CAAC5C,MAAM,CAACI,WAAP,CAAmBT,WAA/C,EAA4D;AAC5D,MAAIwF,OAAO,CAACC,iBAAZ,EAA+B;;AAC/B,MAAIlF,cAAc,CAAC,CAAD,CAAd,CAAkBmF,kBAAlB,IAAwC/E,MAAM,CAACC,QAAP,GAAkB,CAA9D,EAAiE;AAC/DL,IAAAA,cAAc,CAAC,CAAD,CAAd,CAAkBoF,mBAAlB;AACA;AACD;;AACD,MAAIhF,MAAM,CAACiF,OAAP,CAAeC,aAAf,CAA6BC,gBAAjC,EAAmD;AACjDC,IAAAA,KAAK,CAACD,gBAAN,CAAuBE,IAAvB,CAA4B;AAAEjF,MAAAA,IAAI,EAAEA,IAAI,IAAIkF,iBAAiB,CAACC,kBAAlB,CAAqCC;AAArD,KAA5B;AACA;AACD;;AACDC,EAAAA,kBAAkB,CAACrF,IAAD,CAAlB;AACD,C,CAED;AACA;;AACA,OAAO,SAASqF,kBAAT,CAA4BrF,IAA5B,EAAkCsF,KAAK,GAAGC,MAAM,CAACC,SAAjD,EAA4D;AACjE,QAAMC,eAAe,GAAGjG,cAAc,CAAC,CAAD,CAAd,CAAkBmF,kBAAlB,GAAuC,CAAvC,GAA2CW,KAAnE;AACA,MAAIJ,iBAAiB,CAACC,kBAAlB,CAAqCC,SAArC,IAAkDpF,IAAtD,EAA4D,OAAO0F,cAAc,CAACD,eAAD,CAArB;AAC5D,MAAI7F,MAAM,CAACC,QAAP,IAAmB4F,eAAnB,IAAsC,CAACnG,MAAM,CAAC4C,WAA9C,IAA6D,CAAC5C,MAAM,CAACI,WAAP,CAAmBT,WAArF,EAAkG,OAAO,KAAP;AAClG0G,EAAAA,QAAQ,CAACC,aAAT,CAAuBC,cAAc,CAACC,MAAtC;AACA9C,EAAAA,WAAW;AACX,SAAO,IAAP;AACD;;AAED,SAAS0C,cAAT,CAAwBJ,KAAK,GAAGC,MAAM,CAACC,SAAvC,EAAkD;AAChD,MAAI5F,MAAM,CAACC,QAAP,IAAmByF,KAAnB,IAA4B,CAAChG,MAAM,CAAC4C,WAAxC,EAAqD,OAAO,KAAP,CADL,CAEhD;;AACA,QAAM6D,GAAG,GAAGzG,MAAM,CAACI,WAAnB;AACA,MAAI,CAACqG,GAAG,CAAC9G,WAAT,EAAsB,OAAO,KAAP;AACtB,QAAM+G,GAAG,GAAG7G,mBAAmB,CAAC4G,GAAG,CAAChH,IAAL,CAA/B;AACA,QAAMkH,WAAW,GAAGnF,IAAI,CAACoF,QAAL,CAClB5G,MAAM,CAACQ,eAAP,CAAuBgB,IAAI,CAACqF,KAAL,CAAWH,GAAG,CAAC5G,WAAJ,CAAgBgH,QAAhB,EAAX,CAAvB,CADkB,EAElBd,KAFkB,CAApB;;AAGA,MAAIxB,SAAS,CAACC,OAAV,KAAsBC,QAAQ,CAACC,KAAnC,EAA0C;AACxCrE,IAAAA,MAAM,CAACsE,iBAAP,CAAyBC,SAAzB,CAAmCC,aAAnC,IAAoD6B,WAAW,GAAGrG,MAAM,CAACC,QAAzE;AACD,GAX+C,CAYhD;;;AACAD,EAAAA,MAAM,CAACC,QAAP,GAAkBoG,WAAW,GAAG,CAAhC;AACAjD,EAAAA,WAAW;AACX,MAAIb,QAAQ,CAACtB,SAAT,IAAsBjB,MAAM,CAACC,QAAP,GAAkB,CAA5C,EAA+CwG,gBAAgB,CAACC,GAAjB,CAAqBC,YAArB;AAC/CZ,EAAAA,QAAQ,CAACC,aAAT,CAAuBC,cAAc,CAACC,MAAtC;AACA,SAAO,IAAP;AACD","sourcesContent":["export const GALAXY_TYPE = {\r\n  NORMAL: 0,\r\n  DISTANT: 1,\r\n  REMOTE: 2\r\n};\r\n\r\nclass GalaxyRequirement {\r\n  constructor(tier, amount) {\r\n    this.tier = tier;\r\n    this.amount = amount;\r\n  }\r\n\r\n  get isSatisfied() {\r\n    const dimension = AntimatterDimension(this.tier);\r\n    return dimension.totalAmount.gte(this.amount);\r\n  }\r\n}\r\n\r\nexport class Galaxy {\r\n  static get remoteStart() {\r\n    return RealityUpgrade(21).effectOrDefault(800);\r\n  }\r\n\r\n  static get requirement() {\r\n    return this.requirementAt(player.galaxies);\r\n  }\r\n\r\n  /**\r\n   * Figure out what galaxy number we can buy up to\r\n   * @param {number} currency Either dim 8 or dim 6, depends on current challenge\r\n   * @returns {number} Max number of galaxies (total)\r\n   */\r\n  static buyableGalaxies(currency) {\r\n    const bulk = bulkBuyBinarySearch(new Decimal(currency), {\r\n      costFunction: x => this.requirementAt(x).amount,\r\n      cumulative: false,\r\n    }, player.galaxies);\r\n    if (!bulk) throw new Error(\"Unexpected failure to calculate galaxy purchase\");\r\n    return player.galaxies + bulk.quantity;\r\n  }\r\n\r\n  static requirementAt(galaxies) {\r\n    let amount = Galaxy.baseCost + (galaxies * Galaxy.costMult);\r\n\r\n    const type = Galaxy.typeAt(galaxies);\r\n\r\n    if (type === GALAXY_TYPE.DISTANT && EternityChallenge(5).isRunning) {\r\n      amount += Math.pow(galaxies, 2) + galaxies;\r\n    } else if (type === GALAXY_TYPE.DISTANT || type === GALAXY_TYPE.REMOTE) {\r\n      const galaxyCostScalingStart = this.costScalingStart;\r\n      const galaxiesBeforeDistant = Math.clampMin(galaxies - galaxyCostScalingStart + 1, 0);\r\n      amount += Math.pow(galaxiesBeforeDistant, 2) + galaxiesBeforeDistant;\r\n    }\r\n\r\n    if (type === GALAXY_TYPE.REMOTE) {\r\n      amount *= Math.pow(1.002, galaxies - (Galaxy.remoteStart - 1));\r\n    }\r\n\r\n    amount -= Effects.sum(InfinityUpgrade.resetBoost);\r\n    if (InfinityChallenge(5).isCompleted) amount -= 1;\r\n\r\n    if (GlyphAlteration.isAdded(\"power\")) amount *= getSecondaryGlyphEffect(\"powerpow\");\r\n\r\n    amount = Math.floor(amount);\r\n    const tier = Galaxy.requiredTier;\r\n    return new GalaxyRequirement(tier, amount);\r\n  }\r\n\r\n  static get costMult() {\r\n    return Effects.min(NormalChallenge(10).isRunning ? 90 : 60, TimeStudy(42));\r\n  }\r\n\r\n  static get baseCost() {\r\n    return NormalChallenge(10).isRunning ? 99 : 80;\r\n  }\r\n\r\n  static get requiredTier() {\r\n    return NormalChallenge(10).isRunning ? 6 : 8;\r\n  }\r\n\r\n  static get canBeBought() {\r\n    if (EternityChallenge(6).isRunning && !Enslaved.isRunning) return false;\r\n    if (NormalChallenge(8).isRunning || InfinityChallenge(7).isRunning) return false;\r\n    if (player.records.thisInfinity.maxAM.gt(Player.infinityGoal) &&\r\n       (!player.break || Player.isInAntimatterChallenge)) return false;\r\n    return true;\r\n  }\r\n\r\n  static get lockText() {\r\n    if (this.canBeBought) return null;\r\n    if (EternityChallenge(6).isRunning) return \"Locked (Eternity Challenge 6)\";\r\n    if (InfinityChallenge(7).isRunning) return \"Locked (Infinity Challenge 7)\";\r\n    if (InfinityChallenge(1).isRunning) return \"Locked (Infinity Challenge 1)\";\r\n    if (NormalChallenge(8).isRunning) return \"Locked (8th Antimatter Dimension Autobuyer Challenge)\";\r\n    return null;\r\n  }\r\n\r\n  static get costScalingStart() {\r\n    return 100 + TimeStudy(302).effectOrDefault(0) + Effects.sum(\r\n      TimeStudy(223),\r\n      TimeStudy(224),\r\n      EternityChallenge(5).reward,\r\n      GlyphSacrifice.power\r\n    );\r\n  }\r\n\r\n  static get type() {\r\n    return this.typeAt(player.galaxies);\r\n  }\r\n\r\n  static typeAt(galaxies) {\r\n    if (galaxies >= Galaxy.remoteStart) {\r\n      return GALAXY_TYPE.REMOTE;\r\n    }\r\n    if (EternityChallenge(5).isRunning || galaxies >= this.costScalingStart) {\r\n      return GALAXY_TYPE.DISTANT;\r\n    }\r\n    return GALAXY_TYPE.NORMAL;\r\n  }\r\n}\r\n\r\nfunction galaxyReset() {\r\n  EventHub.dispatch(GAME_EVENT.GALAXY_RESET_BEFORE);\r\n  player.galaxies++;\r\n  if (!Achievement(143).isUnlocked || (Pelle.isDoomed && !PelleUpgrade.galaxyNoResetDimboost.canBeApplied)) {\r\n    player.dimensionBoosts = 0;\r\n  }\r\n  softReset(0);\r\n  if (Notations.current === Notation.emoji) player.requirementChecks.permanent.emojiGalaxies++;\r\n  // This is specifically reset here because the check is actually per-galaxy and not per-infinity\r\n  player.requirementChecks.infinity.noSacrifice = true;\r\n  EventHub.dispatch(GAME_EVENT.GALAXY_RESET_AFTER);\r\n}\r\n\r\nexport function manualRequestGalaxyReset(bulk) {\r\n  if (!Galaxy.canBeBought || !Galaxy.requirement.isSatisfied) return;\r\n  if (GameEnd.creditsEverClosed) return;\r\n  if (RealityUpgrade(7).isLockingMechanics && player.galaxies > 0) {\r\n    RealityUpgrade(7).tryShowWarningModal();\r\n    return;\r\n  }\r\n  if (player.options.confirmations.antimatterGalaxy) {\r\n    Modal.antimatterGalaxy.show({ bulk: bulk && EternityMilestone.autobuyMaxGalaxies.isReached });\r\n    return;\r\n  }\r\n  requestGalaxyReset(bulk);\r\n}\r\n\r\n// All galaxy reset requests, both automatic and manual, eventually go through this function; therefore it suffices\r\n// to restrict galaxy count for RUPG7's requirement here and nowhere else\r\nexport function requestGalaxyReset(bulk, limit = Number.MAX_VALUE) {\r\n  const restrictedLimit = RealityUpgrade(7).isLockingMechanics ? 1 : limit;\r\n  if (EternityMilestone.autobuyMaxGalaxies.isReached && bulk) return maxBuyGalaxies(restrictedLimit);\r\n  if (player.galaxies >= restrictedLimit || !Galaxy.canBeBought || !Galaxy.requirement.isSatisfied) return false;\r\n  Tutorial.turnOffEffect(TUTORIAL_STATE.GALAXY);\r\n  galaxyReset();\r\n  return true;\r\n}\r\n\r\nfunction maxBuyGalaxies(limit = Number.MAX_VALUE) {\r\n  if (player.galaxies >= limit || !Galaxy.canBeBought) return false;\r\n  // Check for ability to buy one galaxy (which is pretty efficient)\r\n  const req = Galaxy.requirement;\r\n  if (!req.isSatisfied) return false;\r\n  const dim = AntimatterDimension(req.tier);\r\n  const newGalaxies = Math.clampMax(\r\n    Galaxy.buyableGalaxies(Math.round(dim.totalAmount.toNumber())),\r\n    limit);\r\n  if (Notations.current === Notation.emoji) {\r\n    player.requirementChecks.permanent.emojiGalaxies += newGalaxies - player.galaxies;\r\n  }\r\n  // Galaxy count is incremented by galaxyReset(), so add one less than we should:\r\n  player.galaxies = newGalaxies - 1;\r\n  galaxyReset();\r\n  if (Enslaved.isRunning && player.galaxies > 1) EnslavedProgress.c10.giveProgress();\r\n  Tutorial.turnOffEffect(TUTORIAL_STATE.GALAXY);\r\n  return true;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}