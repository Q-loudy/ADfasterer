{"ast":null,"code":"import AutomatorButton from \"./AutomatorButton\";\nimport AutomatorModeSwitch from \"./AutomatorModeSwitch\";\nexport default {\n  name: \"AutomatorControls\",\n  components: {\n    AutomatorButton,\n    AutomatorModeSwitch\n  },\n\n  data() {\n    return {\n      isRunning: false,\n      isPaused: false,\n      repeatOn: false,\n      justCompleted: false,\n      forceRestartOn: false,\n      followExecution: false,\n      hasErrors: false,\n      currentLine: 0,\n      statusName: \"\",\n      editingName: \"\",\n      editingDifferentScript: false,\n      currentChars: 0,\n      hasUndo: false,\n      hasRedo: false\n    };\n  },\n\n  computed: {\n    fullScreen() {\n      return this.$viewModel.tabs.reality.automator.fullScreen;\n    },\n\n    currentScriptID() {\n      return this.$viewModel.tabs.reality.automator.editorScriptID;\n    },\n\n    playTooltip() {\n      if (this.isPaused) return \"Resume Automator execution\";\n      if (!this.isRunning) return \"Start Automator\";\n      return \"Pause Automator execution\";\n    },\n\n    playButtonClass() {\n      return {\n        \"c-automator__button--active\": this.isRunning,\n        \"fa-play\": !this.isRunning && !this.isPaused,\n        \"fa-pause\": this.isRunning,\n        \"fa-eject\": this.isPaused\n      };\n    },\n\n    statusText() {\n      // Pad with leading zeroes based on script length to prevent text jitter on fast scripts. This technically fails\n      // for scripts with more than 99999 lines, but scripts that long will be prevented elsewhere\n      const digits = Math.clampMin(Math.ceil(Math.log10(AutomatorBackend.currentScriptLength + 1)), 1);\n      let lineNum = `0000${this.currentLine}`;\n      lineNum = lineNum.slice(lineNum.length - digits);\n      if (this.isPaused) return `Paused: \"${this.statusName}\" (Resumes on Line ${lineNum})`;\n      if (this.isRunning) return `Running: \"${this.statusName}\" (Line ${lineNum})`;\n      if (this.hasErrors) return `Stopped: \"${this.statusName}\" has errors (Cannot run)`;\n      return `Stopped: Will start running \"${this.statusName}\"`;\n    },\n\n    maxScriptChars() {\n      return AutomatorData.MAX_ALLOWED_SCRIPT_CHARACTERS;\n    }\n\n  },\n  methods: {\n    update() {\n      this.isRunning = AutomatorBackend.isRunning;\n      this.isPaused = AutomatorBackend.isOn && !this.isRunning;\n      this.repeatOn = AutomatorBackend.state.repeat;\n      this.justCompleted = AutomatorBackend.hasJustCompleted;\n      this.forceRestartOn = AutomatorBackend.state.forceRestart;\n      this.followExecution = AutomatorBackend.state.followExecution;\n      this.hasErrors = AutomatorData.currentErrors().length !== 0;\n      this.currentLine = AutomatorBackend.currentLineNumber; // When the automator isn't running, the script name contains the last run script instead of the\n      // to-be-run script, which is the currently displayed one in the editor\n\n      this.statusName = this.isPaused || this.isRunning ? AutomatorBackend.scriptName : AutomatorBackend.currentEditingScript.name;\n      this.duplicateStatus = AutomatorBackend.hasDuplicateName(this.statusName);\n      this.editingDifferentScript = (this.isRunning || this.isPaused) && AutomatorBackend.currentEditingScript.id !== AutomatorBackend.currentRunningScript.id;\n      this.currentChars = AutomatorData.singleScriptCharacters();\n      this.hasUndo = AutomatorData.undoBuffer.length > 0;\n      this.hasRedo = AutomatorData.redoBuffer.length > 0;\n    },\n\n    rewind: () => AutomatorBackend.restart(),\n\n    play() {\n      if (this.hasErrors) {\n        // This shouldn't be needed but someone's save was still on MODE.RUN when the script had errors so this\n        // is just an additional layer of failsafe in case something goes wrong\n        AutomatorBackend.mode = AUTOMATOR_MODE.PAUSED;\n        return;\n      }\n\n      if (this.isRunning) {\n        AutomatorBackend.pause();\n        return;\n      }\n\n      if (player.reality.automator.type === AUTOMATOR_TYPE.BLOCK) this.$emit(\"automatorplay\");\n      if (AutomatorBackend.isOn) AutomatorBackend.mode = AUTOMATOR_MODE.RUN;else AutomatorBackend.start(this.currentScriptID);\n    },\n\n    stop: () => AutomatorBackend.stop(),\n\n    step() {\n      if (AutomatorBackend.isOn) AutomatorBackend.mode = AUTOMATOR_MODE.SINGLE_STEP;else AutomatorBackend.start(this.currentScriptID, AUTOMATOR_MODE.SINGLE_STEP);\n    },\n\n    repeat: () => AutomatorBackend.toggleRepeat(),\n    restart: () => AutomatorBackend.toggleForceRestart(),\n    follow: () => AutomatorBackend.toggleFollowExecution(),\n    undo: () => AutomatorData.undoScriptEdit(),\n    redo: () => AutomatorData.redoScriptEdit()\n  }\n};","map":{"version":3,"sources":["AutomatorControls.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport AutomatorButton from \"./AutomatorButton\";\r\nimport AutomatorModeSwitch from \"./AutomatorModeSwitch\";\r\n\r\nexport default {\r\n  name: \"AutomatorControls\",\r\n  components: {\r\n    AutomatorButton,\r\n    AutomatorModeSwitch\r\n  },\r\n  data() {\r\n    return {\r\n      isRunning: false,\r\n      isPaused: false,\r\n      repeatOn: false,\r\n      justCompleted: false,\r\n      forceRestartOn: false,\r\n      followExecution: false,\r\n      hasErrors: false,\r\n      currentLine: 0,\r\n      statusName: \"\",\r\n      editingName: \"\",\r\n      editingDifferentScript: false,\r\n      currentChars: 0,\r\n      hasUndo: false,\r\n      hasRedo: false,\r\n    };\r\n  },\r\n  computed: {\r\n    fullScreen() {\r\n      return this.$viewModel.tabs.reality.automator.fullScreen;\r\n    },\r\n    currentScriptID() {\r\n      return this.$viewModel.tabs.reality.automator.editorScriptID;\r\n    },\r\n    playTooltip() {\r\n      if (this.isPaused) return \"Resume Automator execution\";\r\n      if (!this.isRunning) return \"Start Automator\";\r\n      return \"Pause Automator execution\";\r\n    },\r\n    playButtonClass() {\r\n      return {\r\n        \"c-automator__button--active\": this.isRunning,\r\n        \"fa-play\": !this.isRunning && !this.isPaused,\r\n        \"fa-pause\": this.isRunning,\r\n        \"fa-eject\": this.isPaused\r\n      };\r\n    },\r\n    statusText() {\r\n      // Pad with leading zeroes based on script length to prevent text jitter on fast scripts. This technically fails\r\n      // for scripts with more than 99999 lines, but scripts that long will be prevented elsewhere\r\n      const digits = Math.clampMin(Math.ceil(Math.log10(AutomatorBackend.currentScriptLength + 1)), 1);\r\n      let lineNum = `0000${this.currentLine}`;\r\n      lineNum = lineNum.slice(lineNum.length - digits);\r\n\r\n      if (this.isPaused) return `Paused: \"${this.statusName}\" (Resumes on Line ${lineNum})`;\r\n      if (this.isRunning) return `Running: \"${this.statusName}\" (Line ${lineNum})`;\r\n      if (this.hasErrors) return `Stopped: \"${this.statusName}\" has errors (Cannot run)`;\r\n      return `Stopped: Will start running \"${this.statusName}\"`;\r\n    },\r\n    maxScriptChars() {\r\n      return AutomatorData.MAX_ALLOWED_SCRIPT_CHARACTERS;\r\n    },\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isRunning = AutomatorBackend.isRunning;\r\n      this.isPaused = AutomatorBackend.isOn && !this.isRunning;\r\n      this.repeatOn = AutomatorBackend.state.repeat;\r\n      this.justCompleted = AutomatorBackend.hasJustCompleted;\r\n      this.forceRestartOn = AutomatorBackend.state.forceRestart;\r\n      this.followExecution = AutomatorBackend.state.followExecution;\r\n      this.hasErrors = AutomatorData.currentErrors().length !== 0;\r\n      this.currentLine = AutomatorBackend.currentLineNumber;\r\n\r\n      // When the automator isn't running, the script name contains the last run script instead of the\r\n      // to-be-run script, which is the currently displayed one in the editor\r\n      this.statusName = (this.isPaused || this.isRunning)\r\n        ? AutomatorBackend.scriptName\r\n        : AutomatorBackend.currentEditingScript.name;\r\n      this.duplicateStatus = AutomatorBackend.hasDuplicateName(this.statusName);\r\n      this.editingDifferentScript = (this.isRunning || this.isPaused) &&\r\n        AutomatorBackend.currentEditingScript.id !== AutomatorBackend.currentRunningScript.id;\r\n\r\n      this.currentChars = AutomatorData.singleScriptCharacters();\r\n      this.hasUndo = AutomatorData.undoBuffer.length > 0;\r\n      this.hasRedo = AutomatorData.redoBuffer.length > 0;\r\n    },\r\n    rewind: () => AutomatorBackend.restart(),\r\n    play() {\r\n      if (this.hasErrors) {\r\n        // This shouldn't be needed but someone's save was still on MODE.RUN when the script had errors so this\r\n        // is just an additional layer of failsafe in case something goes wrong\r\n        AutomatorBackend.mode = AUTOMATOR_MODE.PAUSED;\r\n        return;\r\n      }\r\n      if (this.isRunning) {\r\n        AutomatorBackend.pause();\r\n        return;\r\n      }\r\n      if (player.reality.automator.type === AUTOMATOR_TYPE.BLOCK) this.$emit(\"automatorplay\");\r\n      if (AutomatorBackend.isOn) AutomatorBackend.mode = AUTOMATOR_MODE.RUN;\r\n      else AutomatorBackend.start(this.currentScriptID);\r\n    },\r\n    stop: () => AutomatorBackend.stop(),\r\n    step() {\r\n      if (AutomatorBackend.isOn) AutomatorBackend.mode = AUTOMATOR_MODE.SINGLE_STEP;\r\n      else AutomatorBackend.start(this.currentScriptID, AUTOMATOR_MODE.SINGLE_STEP);\r\n    },\r\n    repeat: () => AutomatorBackend.toggleRepeat(),\r\n    restart: () => AutomatorBackend.toggleForceRestart(),\r\n    follow: () => AutomatorBackend.toggleFollowExecution(),\r\n    undo: () => AutomatorData.undoScriptEdit(),\r\n    redo: () => AutomatorData.redoScriptEdit(),\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"c-automator__controls l-automator__controls\">\r\n    <div class=\"c-automator-control-row l-automator-button-row\">\r\n      <div class=\"c-button-group\">\r\n        <AutomatorButton\r\n          v-tooltip=\"'Rewind Automator to the first command'\"\r\n          class=\"fa-fast-backward\"\r\n          @click=\"rewind\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"{\r\n            content: playTooltip,\r\n            hideOnTargetClick: false\r\n          }\"\r\n          :class=\"playButtonClass\"\r\n          @click=\"play\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'Stop Automator and reset position'\"\r\n          class=\"fa-stop\"\r\n          @click=\"stop\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'Step forward one line'\"\r\n          class=\"fa-step-forward\"\r\n          @click=\"step\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'Restart script automatically when it reaches the end'\"\r\n          class=\"fa-sync-alt\"\r\n          :class=\"{ 'c-automator__button--active' : repeatOn }\"\r\n          @click=\"repeat\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'Automatically restart the active script when finishing or restarting a Reality'\"\r\n          class=\"fa-reply\"\r\n          :class=\"{ 'c-automator__button--active' : forceRestartOn }\"\r\n          @click=\"restart\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'Scroll Automator to follow current line'\"\r\n          class=\"fa-indent\"\r\n          :class=\"{ 'c-automator__button--active' : followExecution }\"\r\n          @click=\"follow\"\r\n        />\r\n        <span\r\n          v-if=\"fullScreen\"\r\n          class=\"c-automator__status-text c-automator__status-text--small\"\r\n          :class=\"{ 'c-automator__status-text--error' : currentChars > maxScriptChars }\"\r\n        >\r\n          This script: {{ formatInt(currentChars) }}/{{ formatInt(maxScriptChars) }}\r\n        </span>\r\n      </div>\r\n      <div class=\"c-button-group\">\r\n        <AutomatorButton\r\n          v-tooltip=\"'Undo'\"\r\n          class=\"fa-arrow-rotate-left\"\r\n          :class=\"{ 'c-automator__button--inactive' : !hasUndo }\"\r\n          @click=\"undo\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'Redo'\"\r\n          class=\"fa-arrow-rotate-right\"\r\n          :class=\"{ 'c-automator__button--inactive' : !hasRedo }\"\r\n          @click=\"redo\"\r\n        />\r\n        <AutomatorModeSwitch />\r\n      </div>\r\n    </div>\r\n    <div class=\"l-automator-button-row\">\r\n      <span\r\n        v-if=\"duplicateStatus\"\r\n        v-tooltip=\"'More than one script has this name!'\"\r\n        class=\"fas fa-exclamation-triangle c-automator__status-text c-automator__status-text--error\"\r\n      />\r\n      <span\r\n        v-if=\"editingDifferentScript\"\r\n        v-tooltip=\"'The automator is running a different script than the editor is showing'\"\r\n        class=\"fas fa-circle-exclamation c-automator__status-text c-automator__status-text--warning\"\r\n      />\r\n      <span\r\n        v-if=\"justCompleted\"\r\n        v-tooltip=\"'The automator completed running the previous script'\"\r\n        class=\"fas fa-circle-check c-automator__status-text\"\r\n      />\r\n      <span\r\n        class=\"c-automator__status-text\"\r\n        :class=\"{ 'c-automator__status-text--error' : hasErrors && !(isRunning || isPaused) }\"\r\n      >\r\n        {{ statusText }}\r\n      </span>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-automator-control-row {\r\n  justify-content: space-between;\r\n}\r\n\r\n.c-button-group {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n}\r\n\r\n.c-automator__status-text {\r\n  font-size: 1.3rem;\r\n  font-weight: bold;\r\n  color: var(--color-reality);\r\n  padding: 0 0.5rem;\r\n}\r\n\r\n.c-automator__status-text--small {\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.c-automator__status-text--warning {\r\n  color: var(--color-good-paused);\r\n}\r\n\r\n.c-automator__status-text--error {\r\n  color: var(--color-bad);\r\n}\r\n\r\n.c-automator__button--active {\r\n  background-color: var(--color-automator-controls-active);\r\n  border-color: var(--color-reality-light);\r\n}\r\n\r\n.c-automator__button--inactive {\r\n  background-color: var(--color-automator-controls-border);\r\n  border-color: var(--color-reality-light);\r\n}\r\n\r\n.c-automator__button.fa-eject::before {\r\n  transform: rotate(90deg);\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/automator"},"metadata":{},"sourceType":"module"}