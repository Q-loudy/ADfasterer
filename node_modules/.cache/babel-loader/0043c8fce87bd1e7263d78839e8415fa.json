{"ast":null,"code":"import \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n\nfunction averageRun(allRuns) {\n  // Filter out all runs which have the default infinite value for time, but if we're left with no valid runs then we\n  // take just one entry so that the averages also have the same value and we don't get division by zero.\n  let runs = allRuns.filter(run => run[0] !== Number.MAX_VALUE);\n  if (runs.length === 0) runs = [allRuns[0]];\n  const longestRow = allRuns.map(r => r.length).max();\n  const avgAttr = [];\n\n  for (let index = 0; index < longestRow; index++) {\n    if (typeof runs[0][index] === \"string\") {\n      avgAttr.push(\"\");\n      continue;\n    }\n\n    const isNumber = typeof runs[0][index] === \"number\";\n    const total = runs.map(run => run[index]).reduce(isNumber ? Number.sumReducer : Decimal.sumReducer);\n    avgAttr.push(isNumber ? total / runs.length : Decimal.div(total, runs.length));\n  }\n\n  return avgAttr;\n}\n\nexport default {\n  name: \"PastPrestigeRunsContainer\",\n  props: {\n    layer: {\n      type: Object,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      isRealityUnlocked: false,\n      resourceType: false,\n      selectedResources: [],\n      resourceTitles: [],\n      showRealTime: false,\n      runs: [],\n      hasEmptyRecord: false,\n      shown: true,\n      hasChallenges: false,\n      longestRow: 0,\n      hasIM: false\n    };\n  },\n\n  computed: {\n    averageRun() {\n      return averageRun(this.runs);\n    },\n\n    dropDownIconClass() {\n      return this.shown ? \"far fa-minus-square\" : \"far fa-plus-square\";\n    },\n\n    points() {\n      const rawText = this.layer.currency;\n      return rawText === \"RM\" && this.hasIM ? \"iM Cap\" : rawText;\n    },\n\n    condition() {\n      return this.layer.condition();\n    },\n\n    plural() {\n      return this.layer.plural;\n    },\n\n    singular() {\n      return this.layer.name;\n    },\n\n    getRuns() {\n      return this.layer.getRuns;\n    },\n\n    hasRealTime: () => PlayerProgress.seenAlteredSpeed()\n  },\n  methods: {\n    update() {\n      this.runs = this.clone(this.getRuns());\n      this.hasEmptyRecord = this.runs[0][0] === Number.MAX_VALUE;\n      this.runs.push(this.averageRun);\n      this.isRealityUnlocked = PlayerProgress.current.isRealityUnlocked;\n      this.shown = player.shownRuns[this.singular];\n      this.resourceType = player.options.statTabResources;\n      this.showRate = this.resourceType === RECENT_PRESTIGE_RESOURCE.RATE;\n      this.hasChallenges = this.runs.map(r => this.challengeText(r)).some(t => t);\n      this.hasIM = MachineHandler.currentIMCap > 0; // We have 4 different \"useful\" stat pairings we could display, but this ends up being pretty boilerplatey\n\n      const names = [this.points, `${this.points} Rate`, this.plural, `${this.singular} Rate`];\n\n      switch (this.resourceType) {\n        case RECENT_PRESTIGE_RESOURCE.ABSOLUTE_GAIN:\n          this.selectedResources = [0, 2];\n          break;\n\n        case RECENT_PRESTIGE_RESOURCE.RATE:\n          this.selectedResources = [1, 3];\n          break;\n\n        case RECENT_PRESTIGE_RESOURCE.CURRENCY:\n          this.selectedResources = [0, 1];\n          break;\n\n        case RECENT_PRESTIGE_RESOURCE.PRESTIGE_COUNT:\n          this.selectedResources = [2, 3];\n          break;\n\n        default:\n          throw new Error(\"Unrecognized Statistics tab resource type\");\n      }\n\n      this.resourceTitles = [names[this.selectedResources[0]], names[this.selectedResources[1]]]; // Entries always have all values, but sometimes the trailing ones will be blank or zero which we want to hide\n\n      const lastIndex = arr => {\n        let val = arr.length;\n\n        while (val > 0) {\n          const curr = arr[val - 1];\n          if (typeof curr === \"string\" && curr !== \"\") return val;\n          if (typeof curr !== \"string\" && Decimal.neq(curr, 0)) return val;\n          val--;\n        }\n\n        return 0;\n      };\n\n      this.longestRow = this.runs.map(r => lastIndex(r)).max();\n    },\n\n    clone(runs) {\n      return runs.map(run => run.map(item => item instanceof Decimal ? Decimal.fromDecimal(item) : item));\n    },\n\n    infoArray(run, index) {\n      let name;\n      if (index === 0) name = \"Last\";else if (index === 10) name = \"Average\";else name = `${formatInt(index + 1)} ago`;\n      const cells = [name, this.gameTime(run)];\n      if (this.hasRealTime) cells.push(this.realTime(run));\n      const resources = [this.prestigeCurrencyGain(run), this.prestigeCurrencyRate(run), this.prestigeCountGain(run), this.prestigeCountRate(run)];\n      cells.push(resources[this.selectedResources[0]]);\n      cells.push(resources[this.selectedResources[1]]);\n      if (this.hasChallenges) cells.push(this.challengeText(run));\n\n      for (let i = 0; i < ((_this$layer$extra = this.layer.extra) === null || _this$layer$extra === void 0 ? void 0 : _this$layer$extra.length) && cells.length <= this.longestRow; i++) {\n        var _this$layer$extra, _run;\n\n        if (!this.layer.showExtra[i]()) continue;\n        const formatFn = this.layer.formatExtra[i];\n        const val = (_run = run[i + 5]) !== null && _run !== void 0 ? _run : 0;\n        if (this.layer.allowRate[i] && this.showRate) cells.push(this.rateText(run, run[i + 5]));else cells.push(formatFn(val));\n      }\n\n      return cells;\n    },\n\n    infoCol() {\n      const cells = [\"Run\", this.hasRealTime ? \"Game Time\" : \"Time in Run\"];\n      if (this.hasRealTime) cells.push(\"Real Time\");\n      cells.push(...this.resourceTitles);\n      if (this.hasChallenges) cells.push(\"Challenge\");\n\n      for (let index = 0; index < ((_this$layer$extra2 = this.layer.extra) === null || _this$layer$extra2 === void 0 ? void 0 : _this$layer$extra2.length) && cells.length <= this.longestRow; index++) {\n        var _this$layer$extra2;\n\n        if (!this.layer.showExtra[index]()) continue;\n        cells.push(this.layer.allowRate[index] && this.showRate ? this.layer.rateString[index] : this.layer.extra[index]);\n      }\n\n      return cells;\n    },\n\n    gameTime(run) {\n      return timeDisplayShort(run[0]);\n    },\n\n    realTime(run) {\n      return timeDisplayShort(run[1]);\n    },\n\n    prestigeCurrencyGain(run) {\n      if (this.hasIM && this.layer.name === \"Reality\") return `${format(run[7], 2)} iM`;\n      return `${format(run[2], 2)} ${this.points}`;\n    },\n\n    prestigeCountGain(run) {\n      return quantify(this.singular, run[3]);\n    },\n\n    prestigeCurrencyRate(run) {\n      if (this.hasIM && this.layer.name === \"Reality\") return \"N/A\";\n      return this.rateText(run, run[2]);\n    },\n\n    prestigeCountRate(run) {\n      return this.rateText(run, run[3]);\n    },\n\n    rateText(run, amount) {\n      const time = run[1];\n      const rpm = ratePerMinute(amount, time);\n      return Decimal.lt(rpm, 1) ? `${format(Decimal.mul(rpm, 60), 2, 2)} per hour` : `${format(rpm, 2, 2)} per min`;\n    },\n\n    challengeText(run) {\n      // Special-case Nameless reality in order to keep this column small and not force a linebreak\n      const rawText = run[4];\n      return rawText === \"The Nameless Ones\" ? \"Nameless\" : rawText;\n    },\n\n    toggleShown() {\n      player.shownRuns[this.singular] = !player.shownRuns[this.singular];\n    },\n\n    cellStyle(col, isHeader) {\n      let width;\n\n      switch (col) {\n        case 0:\n          // \"X ago\" is really short\n          width = \"7rem\";\n          break;\n\n        case 3:\n        case 4:\n          // Prestige currency is long, but the reality table can be shorter due to smaller numbers\n          width = this.layer.name === \"Reality\" ? \"15rem\" : \"20rem\";\n          break;\n\n        case 5:\n          // Challenges can potentially be very long, but this is glyph level in the reality table\n          width = this.layer.name === \"Reality\" ? \"10rem\" : \"20rem\";\n          break;\n\n        default:\n          width = \"13rem\";\n      }\n\n      return {\n        width,\n        border: \"0.05rem solid #999999\",\n        margin: \"-0.05rem\",\n        padding: \"0.2rem 0\",\n        \"border-bottom-width\": isHeader ? \"0.3rem\" : \"0.1rem\",\n        \"font-weight\": isHeader ? \"bold\" : null,\n        color: \"var(--color-text)\"\n      };\n    }\n\n  }\n};","map":{"version":3,"sources":["PastPrestigeRunsContainer.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nfunction averageRun(allRuns) {\r\n  // Filter out all runs which have the default infinite value for time, but if we're left with no valid runs then we\r\n  // take just one entry so that the averages also have the same value and we don't get division by zero.\r\n  let runs = allRuns.filter(run => run[0] !== Number.MAX_VALUE);\r\n  if (runs.length === 0) runs = [allRuns[0]];\r\n\r\n  const longestRow = allRuns.map(r => r.length).max();\r\n  const avgAttr = [];\r\n  for (let index = 0; index < longestRow; index++) {\r\n    if (typeof runs[0][index] === \"string\") {\r\n      avgAttr.push(\"\");\r\n      continue;\r\n    }\r\n    const isNumber = typeof runs[0][index] === \"number\";\r\n    const total = runs.map(run => run[index]).reduce(isNumber ? Number.sumReducer : Decimal.sumReducer);\r\n    avgAttr.push(isNumber ? total / runs.length : Decimal.div(total, runs.length));\r\n  }\r\n  return avgAttr;\r\n}\r\n\r\nexport default {\r\n  name: \"PastPrestigeRunsContainer\",\r\n  props: {\r\n    layer: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isRealityUnlocked: false,\r\n      resourceType: false,\r\n      selectedResources: [],\r\n      resourceTitles: [],\r\n      showRealTime: false,\r\n      runs: [],\r\n      hasEmptyRecord: false,\r\n      shown: true,\r\n      hasChallenges: false,\r\n      longestRow: 0,\r\n      hasIM: false,\r\n    };\r\n  },\r\n  computed: {\r\n    averageRun() {\r\n      return averageRun(this.runs);\r\n    },\r\n    dropDownIconClass() {\r\n      return this.shown ? \"far fa-minus-square\" : \"far fa-plus-square\";\r\n    },\r\n    points() {\r\n      const rawText = this.layer.currency;\r\n      return rawText === \"RM\" && this.hasIM ? \"iM Cap\" : rawText;\r\n    },\r\n    condition() {\r\n      return this.layer.condition();\r\n    },\r\n    plural() {\r\n      return this.layer.plural;\r\n    },\r\n    singular() {\r\n      return this.layer.name;\r\n    },\r\n    getRuns() {\r\n      return this.layer.getRuns;\r\n    },\r\n    hasRealTime: () => PlayerProgress.seenAlteredSpeed(),\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.runs = this.clone(this.getRuns());\r\n      this.hasEmptyRecord = this.runs[0][0] === Number.MAX_VALUE;\r\n      this.runs.push(this.averageRun);\r\n      this.isRealityUnlocked = PlayerProgress.current.isRealityUnlocked;\r\n      this.shown = player.shownRuns[this.singular];\r\n      this.resourceType = player.options.statTabResources;\r\n      this.showRate = this.resourceType === RECENT_PRESTIGE_RESOURCE.RATE;\r\n      this.hasChallenges = this.runs.map(r => this.challengeText(r)).some(t => t);\r\n      this.hasIM = MachineHandler.currentIMCap > 0;\r\n\r\n      // We have 4 different \"useful\" stat pairings we could display, but this ends up being pretty boilerplatey\r\n      const names = [this.points, `${this.points} Rate`, this.plural, `${this.singular} Rate`];\r\n      switch (this.resourceType) {\r\n        case RECENT_PRESTIGE_RESOURCE.ABSOLUTE_GAIN:\r\n          this.selectedResources = [0, 2];\r\n          break;\r\n        case RECENT_PRESTIGE_RESOURCE.RATE:\r\n          this.selectedResources = [1, 3];\r\n          break;\r\n        case RECENT_PRESTIGE_RESOURCE.CURRENCY:\r\n          this.selectedResources = [0, 1];\r\n          break;\r\n        case RECENT_PRESTIGE_RESOURCE.PRESTIGE_COUNT:\r\n          this.selectedResources = [2, 3];\r\n          break;\r\n        default:\r\n          throw new Error(\"Unrecognized Statistics tab resource type\");\r\n      }\r\n      this.resourceTitles = [names[this.selectedResources[0]], names[this.selectedResources[1]]];\r\n\r\n      // Entries always have all values, but sometimes the trailing ones will be blank or zero which we want to hide\r\n      const lastIndex = arr => {\r\n        let val = arr.length;\r\n        while (val > 0) {\r\n          const curr = arr[val - 1];\r\n          if (typeof curr === \"string\" && curr !== \"\") return val;\r\n          if (typeof curr !== \"string\" && Decimal.neq(curr, 0)) return val;\r\n          val--;\r\n        }\r\n        return 0;\r\n      };\r\n      this.longestRow = this.runs.map(r => lastIndex(r)).max();\r\n    },\r\n    clone(runs) {\r\n      return runs.map(run =>\r\n        run.map(item =>\r\n          (item instanceof Decimal ? Decimal.fromDecimal(item) : item)\r\n        )\r\n      );\r\n    },\r\n    infoArray(run, index) {\r\n      let name;\r\n      if (index === 0) name = \"Last\";\r\n      else if (index === 10) name = \"Average\";\r\n      else name = `${formatInt(index + 1)} ago`;\r\n\r\n      const cells = [name, this.gameTime(run)];\r\n      if (this.hasRealTime) cells.push(this.realTime(run));\r\n\r\n      const resources = [this.prestigeCurrencyGain(run), this.prestigeCurrencyRate(run),\r\n        this.prestigeCountGain(run), this.prestigeCountRate(run)];\r\n      cells.push(resources[this.selectedResources[0]]);\r\n      cells.push(resources[this.selectedResources[1]]);\r\n\r\n      if (this.hasChallenges) cells.push(this.challengeText(run));\r\n      for (let i = 0; i < this.layer.extra?.length && cells.length <= this.longestRow; i++) {\r\n        if (!this.layer.showExtra[i]()) continue;\r\n        const formatFn = this.layer.formatExtra[i];\r\n        const val = run[i + 5] ?? 0;\r\n        if (this.layer.allowRate[i] && this.showRate) cells.push(this.rateText(run, run[i + 5]));\r\n        else cells.push(formatFn(val));\r\n      }\r\n\r\n      return cells;\r\n    },\r\n    infoCol() {\r\n      const cells = [\"Run\", this.hasRealTime ? \"Game Time\" : \"Time in Run\"];\r\n      if (this.hasRealTime) cells.push(\"Real Time\");\r\n      cells.push(...this.resourceTitles);\r\n      if (this.hasChallenges) cells.push(\"Challenge\");\r\n\r\n      for (let index = 0; index < this.layer.extra?.length && cells.length <= this.longestRow; index++) {\r\n        if (!this.layer.showExtra[index]()) continue;\r\n        cells.push((this.layer.allowRate[index] && this.showRate)\r\n          ? this.layer.rateString[index]\r\n          : this.layer.extra[index]);\r\n      }\r\n      return cells;\r\n    },\r\n    gameTime(run) {\r\n      return timeDisplayShort(run[0]);\r\n    },\r\n    realTime(run) {\r\n      return timeDisplayShort(run[1]);\r\n    },\r\n    prestigeCurrencyGain(run) {\r\n      if (this.hasIM && this.layer.name === \"Reality\") return `${format(run[7], 2)} iM`;\r\n      return `${format(run[2], 2)} ${this.points}`;\r\n    },\r\n    prestigeCountGain(run) {\r\n      return quantify(this.singular, run[3]);\r\n    },\r\n    prestigeCurrencyRate(run) {\r\n      if (this.hasIM && this.layer.name === \"Reality\") return \"N/A\";\r\n      return this.rateText(run, run[2]);\r\n    },\r\n    prestigeCountRate(run) {\r\n      return this.rateText(run, run[3]);\r\n    },\r\n    rateText(run, amount) {\r\n      const time = run[1];\r\n      const rpm = ratePerMinute(amount, time);\r\n      return Decimal.lt(rpm, 1)\r\n        ? `${format(Decimal.mul(rpm, 60), 2, 2)} per hour`\r\n        : `${format(rpm, 2, 2)} per min`;\r\n    },\r\n    challengeText(run) {\r\n      // Special-case Nameless reality in order to keep this column small and not force a linebreak\r\n      const rawText = run[4];\r\n      return rawText === \"The Nameless Ones\" ? \"Nameless\" : rawText;\r\n    },\r\n    toggleShown() {\r\n      player.shownRuns[this.singular] = !player.shownRuns[this.singular];\r\n    },\r\n    cellStyle(col, isHeader) {\r\n      let width;\r\n      switch (col) {\r\n        case 0:\r\n          // \"X ago\" is really short\r\n          width = \"7rem\";\r\n          break;\r\n        case 3:\r\n        case 4:\r\n          // Prestige currency is long, but the reality table can be shorter due to smaller numbers\r\n          width = this.layer.name === \"Reality\" ? \"15rem\" : \"20rem\";\r\n          break;\r\n        case 5:\r\n          // Challenges can potentially be very long, but this is glyph level in the reality table\r\n          width = this.layer.name === \"Reality\" ? \"10rem\" : \"20rem\";\r\n          break;\r\n        default:\r\n          width = \"13rem\";\r\n      }\r\n      return {\r\n        width,\r\n        border: \"0.05rem solid #999999\",\r\n        margin: \"-0.05rem\",\r\n        padding: \"0.2rem 0\",\r\n        \"border-bottom-width\": isHeader ? \"0.3rem\" : \"0.1rem\",\r\n        \"font-weight\": isHeader ? \"bold\" : null,\r\n        color: \"var(--color-text)\",\r\n      };\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div v-if=\"condition\">\r\n    <div\r\n      class=\"c-past-runs-header\"\r\n      @click=\"toggleShown\"\r\n    >\r\n      <span class=\"o-run-drop-down-icon\">\r\n        <i :class=\"dropDownIconClass\" />\r\n      </span>\r\n      <span>\r\n        <h3>Last {{ formatInt(10) }} {{ plural }}:</h3>\r\n      </span>\r\n    </div>\r\n    <div v-show=\"shown\">\r\n      <div class=\"c-row-container\">\r\n        <span\r\n          v-for=\"(entry, col) in infoCol()\"\r\n          :key=\"col\"\r\n          :style=\"cellStyle(col, true)\"\r\n        >\r\n          {{ entry }}\r\n        </span>\r\n      </div>\r\n      <div\r\n        v-for=\"(run, index) in runs\"\r\n        :key=\"index\"\r\n      >\r\n        <span\r\n          v-if=\"run[0] === Number.MAX_VALUE\"\r\n          class=\"c-empty-row\"\r\n        >\r\n          <i v-if=\"index === 10\">\r\n            An average cannot be calculated with no {{ plural }}.\r\n          </i>\r\n          <i v-else>\r\n            You have not done {{ formatInt(index + 1) }}\r\n            {{ index === 0 ? singular : plural }} yet.\r\n          </i>\r\n        </span>\r\n        <span\r\n          v-else\r\n          class=\"c-row-container\"\r\n        >\r\n          <span\r\n            v-for=\"(entry, col) in infoArray(run, index)\"\r\n            :key=\"10 * index + col\"\r\n            :style=\"cellStyle(col, false)\"\r\n          >\r\n            {{ entry }}\r\n          </span>\r\n        </span>\r\n      </div>\r\n      <br>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-row-container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 100%;\r\n}\r\n\r\n.c-empty-row {\r\n  display: block;\r\n  border: 0.05rem solid #999999;\r\n  color: var(--color-text);\r\n  width: 100%;\r\n  padding: 0.2rem 0;\r\n  margin: -0.1rem;\r\n}\r\n\r\n.l-no-records {\r\n  height: 5.4rem;\r\n}\r\n</style>"],"sourceRoot":"src/components/tabs/past-prestige-runs"},"metadata":{},"sourceType":"module"}