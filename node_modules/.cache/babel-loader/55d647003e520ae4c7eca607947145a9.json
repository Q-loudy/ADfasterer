{"ast":null,"code":"import DescriptionDisplay from \"@/components/DescriptionDisplay\";\nimport TimeStudyButton from \"./TimeStudyButton\";\nexport default {\n  name: \"DilationTimeStudy\",\n  components: {\n    DescriptionDisplay,\n    TimeStudyButton\n  },\n  props: {\n    setup: {\n      type: Object,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      showRequirement: false,\n      maxTT: new Decimal(),\n      currTT: new Decimal(),\n      ttGen: new Decimal()\n    };\n  },\n\n  computed: {\n    study() {\n      return this.setup.study;\n    },\n\n    id() {\n      return this.study.id;\n    },\n\n    requirement() {\n      if (this.id === 1) {\n        return `Requirement: ${formatInt(5)} EC11 and EC12 completions\n          and ${formatInt(this.maxTT)}/${formatInt(TimeStudy.dilation.totalTimeTheoremRequirement)}\n          total Time Theorems`;\n      }\n\n      if (this.id === 6) {\n        const achRows = Perk.firstPerk.isBought ? \"\" : ` and ${formatInt(13)} rows of Achievements`;\n        return `Requirement: ${format(\"1e4000\")} Eternity Points${achRows}`;\n      }\n\n      return \"\";\n    },\n\n    theoremTimeEstimate() {\n      if (this.study.isBought || !this.study.cost || this.ttGen.eq(0)) return null;\n      const time = Decimal.sub(this.study.cost, this.currTT).dividedBy(this.ttGen);\n      return time.gt(0) ? `Enough TT in ${TimeSpan.fromSeconds(time.toNumber()).toStringShort()}` : null;\n    }\n\n  },\n  methods: {\n    update() {\n      if (this.id === 1) {\n        this.maxTT.copyFrom(Currency.timeTheorems.max);\n        this.showRequirement = !this.study.isBought && !Perk.bypassECDilation.canBeApplied;\n      }\n\n      if (this.id === 6) {\n        this.showRequirement = !Pelle.isDoomed;\n      }\n\n      this.currTT.copyFrom(Currency.timeTheorems.value);\n      this.ttGen.copyFrom(getTTPerSecond().times(getGameSpeedupFactor()));\n    },\n\n    clickHandler() {\n      switch (this.id) {\n        case 1:\n          return () => Tab.eternity.dilation.show();\n\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n          return () => Tab.dimensions.time.show();\n\n        case 6:\n          return () => Tab.reality.glyphs.show();\n\n        default:\n          throw new Error(\"Unrecognized Dilation study was clicked\");\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["DilationTimeStudy.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport DescriptionDisplay from \"@/components/DescriptionDisplay\";\r\nimport TimeStudyButton from \"./TimeStudyButton\";\r\n\r\nexport default {\r\n  name: \"DilationTimeStudy\",\r\n  components: {\r\n    DescriptionDisplay,\r\n    TimeStudyButton\r\n  },\r\n  props: {\r\n    setup: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      showRequirement: false,\r\n      maxTT: new Decimal(),\r\n      currTT: new Decimal(),\r\n      ttGen: new Decimal(),\r\n    };\r\n  },\r\n  computed: {\r\n    study() {\r\n      return this.setup.study;\r\n    },\r\n    id() {\r\n      return this.study.id;\r\n    },\r\n    requirement() {\r\n      if (this.id === 1) {\r\n        return `Requirement: ${formatInt(5)} EC11 and EC12 completions\r\n          and ${formatInt(this.maxTT)}/${formatInt(TimeStudy.dilation.totalTimeTheoremRequirement)}\r\n          total Time Theorems`;\r\n      }\r\n      if (this.id === 6) {\r\n        const achRows = Perk.firstPerk.isBought ? \"\" : ` and ${formatInt(13)} rows of Achievements`;\r\n        return `Requirement: ${format(\"1e4000\")} Eternity Points${achRows}`;\r\n      }\r\n      return \"\";\r\n    },\r\n    theoremTimeEstimate() {\r\n      if (this.study.isBought || !this.study.cost || this.ttGen.eq(0)) return null;\r\n      const time = Decimal.sub(this.study.cost, this.currTT).dividedBy(this.ttGen);\r\n      return time.gt(0) ? `Enough TT in ${TimeSpan.fromSeconds(time.toNumber()).toStringShort()}` : null;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      if (this.id === 1) {\r\n        this.maxTT.copyFrom(Currency.timeTheorems.max);\r\n        this.showRequirement = !this.study.isBought && !Perk.bypassECDilation.canBeApplied;\r\n      }\r\n      if (this.id === 6) {\r\n        this.showRequirement = !Pelle.isDoomed;\r\n      }\r\n      this.currTT.copyFrom(Currency.timeTheorems.value);\r\n      this.ttGen.copyFrom(getTTPerSecond().times(getGameSpeedupFactor()));\r\n    },\r\n    clickHandler() {\r\n      switch (this.id) {\r\n        case 1:\r\n          return () => Tab.eternity.dilation.show();\r\n        case 2:\r\n        case 3:\r\n        case 4:\r\n        case 5:\r\n          return () => Tab.dimensions.time.show();\r\n        case 6:\r\n          return () => Tab.reality.glyphs.show();\r\n        default:\r\n          throw new Error(\"Unrecognized Dilation study was clicked\");\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <TimeStudyButton\r\n    :setup=\"setup\"\r\n    :ach-tooltip=\"theoremTimeEstimate\"\r\n    :special-click=\"clickHandler()\"\r\n  >\r\n    <DescriptionDisplay :config=\"study.config\" />\r\n    <template v-if=\"showRequirement\">\r\n      <br>\r\n      <span>{{ requirement }}</span>\r\n    </template>\r\n  </TimeStudyButton>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/time-studies"},"metadata":{},"sourceType":"module"}