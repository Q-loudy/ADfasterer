{"ast":null,"code":"export default {\n  name: \"DarkMatterDimensionRow\",\n  props: {\n    tier: {\n      type: Number,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      isUnlocked: false,\n      ascension: 0,\n      hasAscended: false,\n      powerDMPerAscension: 0,\n      interval: 0,\n      powerDM: new Decimal(0),\n      powerDE: 0,\n      intervalCost: 0,\n      powerDMCost: 0,\n      powerDECost: 0,\n      amount: new Decimal(0),\n      canBuyInterval: false,\n      canBuyPowerDM: false,\n      canBuyPowerDE: false,\n      isIntervalCapped: false,\n      timer: 0,\n      timerPecent: 0,\n      intervalAscensionBump: 10000,\n      intervalAfterAscension: 0,\n      darkEnergyPerSecond: 0,\n      portionDE: 0,\n      productionPerSecond: new Decimal(0),\n      percentPerSecond: 0,\n      hoverOverAscension: false\n    };\n  },\n\n  computed: {\n    name() {\n      return `${DarkMatterDimension(this.tier).shortDisplayName} Dark Matter Dimension`;\n    },\n\n    ascensionText() {\n      return `(⯅${formatInt(this.ascension)})`;\n    },\n\n    intervalClassObject() {\n      return {\n        \"o-dark-matter-dimension-button\": true,\n        \"o-dark-matter-dimension-button--available\": this.canBuyInterval,\n        \"o-dark-matter-dimension-button--ascend\": this.isIntervalCapped\n      };\n    },\n\n    darkMatterClassObject() {\n      return {\n        \"o-dark-matter-dimension-button\": true,\n        \"o-dark-matter-dimension-button--available\": this.hoverOverAscension || this.canBuyPowerDM,\n        \"o-dark-matter-dimension-button--accent\": this.hoverOverAscension\n      };\n    },\n\n    darkEnergyClassObject() {\n      return {\n        \"o-dark-matter-dimension-button\": true,\n        \"o-dark-matter-dimension-button--available\": this.hoverOverAscension || this.canBuyPowerDE,\n        \"o-dark-matter-dimension-button--accent\": this.hoverOverAscension\n      };\n    },\n\n    intervalText() {\n      const interval = this.hoverOverAscension ? this.intervalAfterAscension : this.interval;\n      const str = interval > 1000 ? `${format(interval / 1000, 2, 2)}s` : `${format(interval, 2, 2)}ms`;\n      const line1 = this.hoverOverAscension ? `<b>${str}</b>` : str;\n      let line2;\n      if (this.isIntervalCapped) line2 = this.hoverOverAscension ? \"On ascend ➜\" : \"Ascend!\";else line2 = `Cost: ${this.formatDMCost(this.intervalCost)} DM`;\n      return ` ${line1}<br>${line2}`;\n    },\n\n    darkMatterText() {\n      const dm = this.powerDM.times(this.hoverOverAscension ? this.powerDMPerAscension : 1);\n      const str = `DM ${formatX(dm, 2, 2)}`;\n      const line1 = this.hoverOverAscension ? `<b>${str}</b>` : str;\n      const ascMult = this.powerDMPerAscension * this.interval / this.intervalAfterAscension;\n      const line2 = this.hoverOverAscension ? `${formatX(ascMult, 2, 2)} / sec` : `Cost: ${this.formatDMCost(this.powerDMCost)} DM`;\n      return `${line1}<br>${line2}`;\n    },\n\n    darkEnergyText() {\n      const de = this.powerDE * (this.hoverOverAscension ? POWER_DE_PER_ASCENSION : 1);\n      const str = `DE +${format(de, 2, 4)}`;\n      const line1 = this.hoverOverAscension ? `<b>${str}</b>` : str;\n      const ascMult = POWER_DE_PER_ASCENSION * this.interval / this.intervalAfterAscension;\n      const line2 = this.hoverOverAscension ? `${formatX(ascMult, 2, 2)} / sec` : `Cost: ${this.formatDMCost(this.powerDECost)} DM`;\n      return `${line1}<br>${line2}`;\n    },\n\n    ascensionTooltip() {\n      return `Interval is capped at ${formatInt(DarkMatterDimension(this.tier).intervalPurchaseCap)}ms.\n        Ascension multiplies interval by ${formatInt(this.intervalAscensionBump)},\n        DM by ${formatInt(this.powerDMPerAscension)}, and DE by ${formatInt(POWER_DE_PER_ASCENSION)}.`;\n    }\n\n  },\n  methods: {\n    update() {\n      const dim = DarkMatterDimension(this.tier);\n      this.isUnlocked = dim.isUnlocked;\n      this.ascension = dim.ascensions;\n      this.hasAscended = this.ascension > 0;\n      this.powerDMPerAscension = dim.powerDMPerAscension;\n      this.interval = dim.interval;\n      this.powerDM.copyFrom(dim.powerDM);\n      this.powerDE = dim.powerDE;\n      this.intervalCost = dim.intervalCost;\n      this.powerDMCost = dim.powerDMCost;\n      this.powerDECost = dim.powerDECost;\n      this.amount.copyFrom(dim.amount);\n      this.canBuyInterval = dim.canBuyInterval;\n      this.canBuyPowerDM = dim.canBuyPowerDM;\n      this.canBuyPowerDE = dim.canBuyPowerDE;\n      this.isIntervalCapped = dim.interval <= dim.intervalPurchaseCap;\n      this.timer = dim.timeSinceLastUpdate;\n      this.timerPercent = this.timer / this.interval;\n      this.intervalAscensionBump = SingularityMilestone.ascensionIntervalScaling.effectOrDefault(1200);\n      this.intervalAfterAscension = dim.intervalAfterAscension;\n      this.darkEnergyPerSecond = dim.productionPerSecond;\n      this.portionDE = this.darkEnergyPerSecond / Currency.darkEnergy.productionPerSecond;\n      this.productionPerSecond = this.dimensionProduction(this.tier);\n      this.percentPerSecond = Decimal.divide(this.productionPerSecond, this.amount).toNumber();\n      if (!this.isIntervalCapped) this.hoverOverAscension = false;\n    },\n\n    handleIntervalClick() {\n      if (this.isIntervalCapped) DarkMatterDimension(this.tier).ascend();else DarkMatterDimension(this.tier).buyInterval();\n    },\n\n    buyPowerDM() {\n      DarkMatterDimension(this.tier).buyPowerDM();\n    },\n\n    buyPowerDE() {\n      DarkMatterDimension(this.tier).buyPowerDE();\n    },\n\n    // All the values are internally Decimals and technically allowed to go above Infinity. This is a special case\n    // however; it looks better in-game if we just format it as Infinity instead, as the resource used for these costs\n    // is itself hardcapped at e308 and we specifically want to format here (and nowhere else) as Infinity.\n    formatDMCost(cost) {\n      return cost.gt(Number.MAX_VALUE) ? Notations.current.infinite : format(cost, 2);\n    },\n\n    dimensionProduction(tier) {\n      if (tier === 4) return SingularityMilestone.dim4Generation.effectOrDefault(0);\n      const prodDim = DarkMatterDimension(tier + 1);\n      return prodDim.amount.times(prodDim.powerDM).divide(prodDim.interval).times(1000);\n    },\n\n    hoverState(state) {\n      if (!this.isIntervalCapped) return;\n      this.hoverOverAscension = state;\n    }\n\n  }\n};","map":{"version":3,"sources":["DarkMatterDimensionRow.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nexport default {\r\n  name: \"DarkMatterDimensionRow\",\r\n  props: {\r\n    tier: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isUnlocked: false,\r\n      ascension: 0,\r\n      hasAscended: false,\r\n      powerDMPerAscension: 0,\r\n      interval: 0,\r\n      powerDM: new Decimal(0),\r\n      powerDE: 0,\r\n      intervalCost: 0,\r\n      powerDMCost: 0,\r\n      powerDECost: 0,\r\n      amount: new Decimal(0),\r\n      canBuyInterval: false,\r\n      canBuyPowerDM: false,\r\n      canBuyPowerDE: false,\r\n      isIntervalCapped: false,\r\n      timer: 0,\r\n      timerPecent: 0,\r\n      intervalAscensionBump: 10000,\r\n      intervalAfterAscension: 0,\r\n      darkEnergyPerSecond: 0,\r\n      portionDE: 0,\r\n      productionPerSecond: new Decimal(0),\r\n      percentPerSecond: 0,\r\n      hoverOverAscension: false,\r\n    };\r\n  },\r\n  computed: {\r\n    name() {\r\n      return `${DarkMatterDimension(this.tier).shortDisplayName} Dark Matter Dimension`;\r\n    },\r\n    ascensionText() {\r\n      return `(⯅${formatInt(this.ascension)})`;\r\n    },\r\n    intervalClassObject() {\r\n      return {\r\n        \"o-dark-matter-dimension-button\": true,\r\n        \"o-dark-matter-dimension-button--available\": this.canBuyInterval,\r\n        \"o-dark-matter-dimension-button--ascend\": this.isIntervalCapped\r\n      };\r\n    },\r\n    darkMatterClassObject() {\r\n      return {\r\n        \"o-dark-matter-dimension-button\": true,\r\n        \"o-dark-matter-dimension-button--available\": this.hoverOverAscension || this.canBuyPowerDM,\r\n        \"o-dark-matter-dimension-button--accent\": this.hoverOverAscension\r\n      };\r\n    },\r\n    darkEnergyClassObject() {\r\n      return {\r\n        \"o-dark-matter-dimension-button\": true,\r\n        \"o-dark-matter-dimension-button--available\": this.hoverOverAscension || this.canBuyPowerDE,\r\n        \"o-dark-matter-dimension-button--accent\": this.hoverOverAscension\r\n      };\r\n    },\r\n    intervalText() {\r\n      const interval = this.hoverOverAscension ? this.intervalAfterAscension : this.interval;\r\n      const str = interval > 1000 ? `${format(interval / 1000, 2, 2)}s` : `${format(interval, 2, 2)}ms`;\r\n      const line1 = this.hoverOverAscension ? `<b>${str}</b>` : str;\r\n\r\n      let line2;\r\n      if (this.isIntervalCapped) line2 = this.hoverOverAscension ? \"On ascend ➜\" : \"Ascend!\";\r\n      else line2 = `Cost: ${this.formatDMCost(this.intervalCost)} DM`;\r\n      return ` ${line1}<br>${line2}`;\r\n    },\r\n    darkMatterText() {\r\n      const dm = this.powerDM.times(this.hoverOverAscension ? this.powerDMPerAscension : 1);\r\n      const str = `DM ${formatX(dm, 2, 2)}`;\r\n      const line1 = this.hoverOverAscension ? `<b>${str}</b>` : str;\r\n\r\n      const ascMult = this.powerDMPerAscension * this.interval / this.intervalAfterAscension;\r\n      const line2 = this.hoverOverAscension\r\n        ? `${formatX(ascMult, 2, 2)} / sec`\r\n        : `Cost: ${this.formatDMCost(this.powerDMCost)} DM`;\r\n      return `${line1}<br>${line2}`;\r\n    },\r\n    darkEnergyText() {\r\n      const de = this.powerDE * (this.hoverOverAscension ? POWER_DE_PER_ASCENSION : 1);\r\n      const str = `DE +${format(de, 2, 4)}`;\r\n      const line1 = this.hoverOverAscension ? `<b>${str}</b>` : str;\r\n      const ascMult = POWER_DE_PER_ASCENSION * this.interval / this.intervalAfterAscension;\r\n      const line2 = this.hoverOverAscension\r\n        ? `${formatX(ascMult, 2, 2)} / sec`\r\n        : `Cost: ${this.formatDMCost(this.powerDECost)} DM`;\r\n      return `${line1}<br>${line2}`;\r\n    },\r\n    ascensionTooltip() {\r\n      return `Interval is capped at ${formatInt(DarkMatterDimension(this.tier).intervalPurchaseCap)}ms.\r\n        Ascension multiplies interval by ${formatInt(this.intervalAscensionBump)},\r\n        DM by ${formatInt(this.powerDMPerAscension)}, and DE by ${formatInt(POWER_DE_PER_ASCENSION)}.`;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      const dim = DarkMatterDimension(this.tier);\r\n      this.isUnlocked = dim.isUnlocked;\r\n      this.ascension = dim.ascensions;\r\n      this.hasAscended = this.ascension > 0;\r\n      this.powerDMPerAscension = dim.powerDMPerAscension;\r\n      this.interval = dim.interval;\r\n      this.powerDM.copyFrom(dim.powerDM);\r\n      this.powerDE = dim.powerDE;\r\n      this.intervalCost = dim.intervalCost;\r\n      this.powerDMCost = dim.powerDMCost;\r\n      this.powerDECost = dim.powerDECost;\r\n      this.amount.copyFrom(dim.amount);\r\n      this.canBuyInterval = dim.canBuyInterval;\r\n      this.canBuyPowerDM = dim.canBuyPowerDM;\r\n      this.canBuyPowerDE = dim.canBuyPowerDE;\r\n      this.isIntervalCapped = dim.interval <= dim.intervalPurchaseCap;\r\n      this.timer = dim.timeSinceLastUpdate;\r\n      this.timerPercent = this.timer / this.interval;\r\n      this.intervalAscensionBump = SingularityMilestone.ascensionIntervalScaling.effectOrDefault(1200);\r\n      this.intervalAfterAscension = dim.intervalAfterAscension;\r\n      this.darkEnergyPerSecond = dim.productionPerSecond;\r\n      this.portionDE = this.darkEnergyPerSecond / Currency.darkEnergy.productionPerSecond;\r\n      this.productionPerSecond = this.dimensionProduction(this.tier);\r\n      this.percentPerSecond = Decimal.divide(this.productionPerSecond, this.amount).toNumber();\r\n      if (!this.isIntervalCapped) this.hoverOverAscension = false;\r\n    },\r\n    handleIntervalClick() {\r\n      if (this.isIntervalCapped) DarkMatterDimension(this.tier).ascend();\r\n      else DarkMatterDimension(this.tier).buyInterval();\r\n    },\r\n    buyPowerDM() {\r\n      DarkMatterDimension(this.tier).buyPowerDM();\r\n    },\r\n    buyPowerDE() {\r\n      DarkMatterDimension(this.tier).buyPowerDE();\r\n    },\r\n    // All the values are internally Decimals and technically allowed to go above Infinity. This is a special case\r\n    // however; it looks better in-game if we just format it as Infinity instead, as the resource used for these costs\r\n    // is itself hardcapped at e308 and we specifically want to format here (and nowhere else) as Infinity.\r\n    formatDMCost(cost) {\r\n      return cost.gt(Number.MAX_VALUE) ? Notations.current.infinite : format(cost, 2);\r\n    },\r\n    dimensionProduction(tier) {\r\n      if (tier === 4) return SingularityMilestone.dim4Generation.effectOrDefault(0);\r\n      const prodDim = DarkMatterDimension(tier + 1);\r\n      return prodDim.amount.times(prodDim.powerDM).divide(prodDim.interval).times(1000);\r\n    },\r\n    hoverState(state) {\r\n      if (!this.isIntervalCapped) return;\r\n      this.hoverOverAscension = state;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    v-if=\"isUnlocked\"\r\n    class=\"c-dark-matter-dimension-container\"\r\n  >\r\n    <div class=\"o-dark-matter-dimension-amount\">\r\n      {{ name }}<span v-if=\"hasAscended\"> {{ ascensionText }}</span>: {{ format(amount, 2) }}\r\n    </div>\r\n    <div>\r\n      Average gain: {{ format(productionPerSecond, 2, 2) }}/s\r\n      (+{{ formatPercents(percentPerSecond, 2, 2) }}/s)\r\n    </div>\r\n    <div class=\"c-dark-matter-dimension-buttons\">\r\n      <button\r\n        :class=\"intervalClassObject\"\r\n        @click=\"handleIntervalClick\"\r\n        @mouseover=\"hoverState(true)\"\r\n        @mouseleave=\"hoverState(false)\"\r\n      >\r\n        <span\r\n          v-if=\"isIntervalCapped\"\r\n          :ach-tooltip=\"ascensionTooltip\"\r\n        >\r\n          <i class=\"fas fa-question-circle\" />\r\n        </span>\r\n        <span v-html=\"intervalText\" />\r\n      </button>\r\n      <button\r\n        :class=\"darkMatterClassObject\"\r\n        @click=\"buyPowerDM\"\r\n      >\r\n        <span v-html=\"darkMatterText\" />\r\n      </button>\r\n      <button\r\n        :class=\"darkEnergyClassObject\"\r\n        @click=\"buyPowerDE\"\r\n      >\r\n        <span v-html=\"darkEnergyText\" />\r\n      </button>\r\n    </div>\r\n    <div v-if=\"interval > 200\">\r\n      Tick: {{ formatInt(timer) }} ms ({{ formatPercents(timerPercent, 1) }})\r\n    </div>\r\n    <div v-else>\r\n      {{ format(1000 / interval, 2, 2) }} ticks / sec\r\n    </div>\r\n    <div>\r\n      Dark Energy: {{ format(darkEnergyPerSecond, 2, 4) }}/s ({{ formatPercents(portionDE, 1) }} of total)\r\n    </div>\r\n  </div>\r\n</template>"],"sourceRoot":"src/components/tabs/celestial-laitela"},"metadata":{},"sourceType":"module"}