{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport CostDisplay from \"@/components/CostDisplay\";\nimport DescriptionDisplay from \"@/components/DescriptionDisplay\";\nimport EffectDisplay from \"@/components/EffectDisplay\";\nexport default {\n  name: \"InfinityUpgradeButton\",\n  components: {\n    DescriptionDisplay,\n    EffectDisplay,\n    CostDisplay\n  },\n  props: {\n    upgrade: {\n      type: Object,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      showWorstChallenge: false,\n      worstChallengeString: \"\",\n      isUseless: false,\n      canBeBought: false,\n      chargePossible: false,\n      canBeCharged: false,\n      isBought: false,\n      isCharged: false,\n      isDisabled: false,\n      showingCharged: false,\n      hasTS31: false,\n      ts31Effect: new Decimal(0)\n    };\n  },\n\n  computed: {\n    isBasedOnInfinities() {\n      return /(18|27|36|45)Mult/.test(this.upgrade.id) || this.upgrade.id === \"infinitiedMult\";\n    },\n\n    shiftDown() {\n      return ui.view.shiftDown;\n    },\n\n    showChargedEffect() {\n      return this.chargePossible && (this.isCharged || this.showingCharged || this.shiftDown);\n    },\n\n    config() {\n      const config = this.upgrade.config;\n      return this.showChargedEffect ? config.charged : config;\n    },\n\n    classObject() {\n      return {\n        \"o-infinity-upgrade-btn\": true,\n        \"o-infinity-upgrade-btn--bought\": !this.isUseless && this.isBought,\n        \"o-infinity-upgrade-btn--available\": !this.isUseless && !this.isBought && this.canBeBought,\n        \"o-infinity-upgrade-btn--unavailable\": !this.isUseless && !this.isBought && !this.canBeBought,\n        \"o-infinity-upgrade-btn--useless\": this.isUseless,\n        \"o-pelle-disabled\": this.isUseless,\n        \"o-infinity-upgrade-btn--chargeable\": !this.isCharged && this.chargePossible && (this.showingCharged || this.shiftDown),\n        \"o-infinity-upgrade-btn--charged\": this.isCharged,\n        \"o-pelle-disabled-pointer\": this.isUseless\n      };\n    },\n\n    isImprovedByTS31() {\n      return this.hasTS31 && this.isBasedOnInfinities && !this.showChargedEffect;\n    }\n\n  },\n  methods: {\n    update() {\n      // Note that this component is used by both infinity upgrades and break infinity upgrades\n      // (putting this comment here rather than at the top of the component since this function\n      // seems more likely to be read).\n      const upgrade = this.upgrade;\n      this.isBought = upgrade.isBought || upgrade.isCapped;\n      this.chargePossible = Ra.unlocks.chargedInfinityUpgrades.canBeApplied && upgrade.hasChargeEffect && !Pelle.isDoomed;\n      this.canBeBought = upgrade.canBeBought;\n      this.canBeCharged = upgrade.canCharge;\n      this.isCharged = upgrade.isCharged; // A bit hacky, but the offline passive IP upgrade (the one that doesn't work online)\n      // should hide its effect value if offline progress is disabled, in order to be\n      // consistent with the other offline progress upgrades which hide as well.\n      // Also, the IP upgrade that works both online and offline should not\n      // show 0 if its value is 0. This is a bit inconvenient because sometimes,\n      // like after eternity, it can be bought but have value 0, but not showing the effect\n      // in this case doesn't feel too bad. Other upgrades, including the cost scaling\n      // rebuyables, should never hide their effect.\n\n      this.isDisabled = upgrade.config.isDisabled && upgrade.config.isDisabled(upgrade.config.effect());\n      this.isUseless = Pelle.uselessInfinityUpgrades.includes(upgrade.id) && Pelle.isDoomed;\n      this.hasTS31 = TimeStudy(31).canBeApplied;\n      if (!this.isDisabled && this.isImprovedByTS31) this.ts31Effect = Decimal.pow(upgrade.config.effect(), 4);\n      if (upgrade.id !== \"challengeMult\") return;\n      this.showWorstChallenge = upgrade.effectValue !== upgrade.cap && player.challenge.normal.bestTimes.sum() < Number.MAX_VALUE;\n      const worstChallengeTime = GameCache.worstChallengeTime.value;\n      const worstChallengeIndex = 2 + player.challenge.normal.bestTimes.indexOf(worstChallengeTime);\n      this.worstChallengeString = `(Challenge ${worstChallengeIndex}: ${timeDisplayShort(worstChallengeTime)})`;\n    }\n\n  }\n};","map":{"version":3,"sources":["InfinityUpgradeButton.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport CostDisplay from \"@/components/CostDisplay\";\r\nimport DescriptionDisplay from \"@/components/DescriptionDisplay\";\r\nimport EffectDisplay from \"@/components/EffectDisplay\";\r\n\r\nexport default {\r\n  name: \"InfinityUpgradeButton\",\r\n  components: {\r\n    DescriptionDisplay,\r\n    EffectDisplay,\r\n    CostDisplay,\r\n  },\r\n  props: {\r\n    upgrade: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      showWorstChallenge: false,\r\n      worstChallengeString: \"\",\r\n      isUseless: false,\r\n      canBeBought: false,\r\n      chargePossible: false,\r\n      canBeCharged: false,\r\n      isBought: false,\r\n      isCharged: false,\r\n      isDisabled: false,\r\n      showingCharged: false,\r\n      hasTS31: false,\r\n      ts31Effect: new Decimal(0)\r\n    };\r\n  },\r\n  computed: {\r\n    isBasedOnInfinities() {\r\n      return /(18|27|36|45)Mult/u.test(this.upgrade.id) || this.upgrade.id === \"infinitiedMult\";\r\n    },\r\n    shiftDown() {\r\n      return ui.view.shiftDown;\r\n    },\r\n    showChargedEffect() {\r\n      return this.chargePossible && (this.isCharged || this.showingCharged || this.shiftDown);\r\n    },\r\n    config() {\r\n      const config = this.upgrade.config;\r\n      return this.showChargedEffect\r\n        ? config.charged\r\n        : config;\r\n    },\r\n    classObject() {\r\n      return {\r\n        \"o-infinity-upgrade-btn\": true,\r\n        \"o-infinity-upgrade-btn--bought\": !this.isUseless && this.isBought,\r\n        \"o-infinity-upgrade-btn--available\": !this.isUseless && !this.isBought && this.canBeBought,\r\n        \"o-infinity-upgrade-btn--unavailable\": !this.isUseless && !this.isBought && !this.canBeBought,\r\n        \"o-infinity-upgrade-btn--useless\": this.isUseless,\r\n        \"o-pelle-disabled\": this.isUseless,\r\n        \"o-infinity-upgrade-btn--chargeable\": !this.isCharged && this.chargePossible &&\r\n          (this.showingCharged || this.shiftDown),\r\n        \"o-infinity-upgrade-btn--charged\": this.isCharged,\r\n        \"o-pelle-disabled-pointer\": this.isUseless\r\n      };\r\n    },\r\n    isImprovedByTS31() {\r\n      return this.hasTS31 && this.isBasedOnInfinities && !this.showChargedEffect;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      // Note that this component is used by both infinity upgrades and break infinity upgrades\r\n      // (putting this comment here rather than at the top of the component since this function\r\n      // seems more likely to be read).\r\n      const upgrade = this.upgrade;\r\n      this.isBought = upgrade.isBought || upgrade.isCapped;\r\n      this.chargePossible = Ra.unlocks.chargedInfinityUpgrades.canBeApplied &&\r\n        upgrade.hasChargeEffect && !Pelle.isDoomed;\r\n      this.canBeBought = upgrade.canBeBought;\r\n      this.canBeCharged = upgrade.canCharge;\r\n      this.isCharged = upgrade.isCharged;\r\n      // A bit hacky, but the offline passive IP upgrade (the one that doesn't work online)\r\n      // should hide its effect value if offline progress is disabled, in order to be\r\n      // consistent with the other offline progress upgrades which hide as well.\r\n      // Also, the IP upgrade that works both online and offline should not\r\n      // show 0 if its value is 0. This is a bit inconvenient because sometimes,\r\n      // like after eternity, it can be bought but have value 0, but not showing the effect\r\n      // in this case doesn't feel too bad. Other upgrades, including the cost scaling\r\n      // rebuyables, should never hide their effect.\r\n      this.isDisabled = upgrade.config.isDisabled && upgrade.config.isDisabled(upgrade.config.effect());\r\n      this.isUseless = Pelle.uselessInfinityUpgrades.includes(upgrade.id) && Pelle.isDoomed;\r\n      this.hasTS31 = TimeStudy(31).canBeApplied;\r\n      if (!this.isDisabled && this.isImprovedByTS31) this.ts31Effect = Decimal.pow(upgrade.config.effect(), 4);\r\n      if (upgrade.id !== \"challengeMult\") return;\r\n      this.showWorstChallenge = upgrade.effectValue !== upgrade.cap &&\r\n        player.challenge.normal.bestTimes.sum() < Number.MAX_VALUE;\r\n      const worstChallengeTime = GameCache.worstChallengeTime.value;\r\n      const worstChallengeIndex = 2 + player.challenge.normal.bestTimes.indexOf(worstChallengeTime);\r\n      this.worstChallengeString = `(Challenge ${worstChallengeIndex}: ${timeDisplayShort(worstChallengeTime)})`;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <button\r\n    :class=\"classObject\"\r\n    @mouseenter=\"showingCharged = canBeCharged\"\r\n    @mouseleave=\"showingCharged = false\"\r\n    @click=\"upgrade.purchase()\"\r\n  >\r\n    <span :class=\"{ 'o-pelle-disabled': isUseless }\">\r\n      <DescriptionDisplay\r\n        :config=\"config\"\r\n      />\r\n      <span v-if=\"showWorstChallenge\">\r\n        <br>\r\n        {{ worstChallengeString }}\r\n      </span>\r\n      <EffectDisplay\r\n        v-if=\"!isDisabled\"\r\n        br\r\n        :config=\"config\"\r\n      />\r\n      <template v-if=\"!isDisabled && isImprovedByTS31\">\r\n        <br>\r\n        After TS31: {{ formatX(ts31Effect, 2, 2) }}\r\n      </template>\r\n    </span>\r\n    <CostDisplay\r\n      v-if=\"!isBought\"\r\n      br\r\n      :config=\"config\"\r\n      name=\"Infinity Point\"\r\n    />\r\n    <slot />\r\n  </button>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components"},"metadata":{},"sourceType":"module"}