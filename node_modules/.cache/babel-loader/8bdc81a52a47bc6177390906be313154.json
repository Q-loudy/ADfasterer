{"ast":null,"code":"import wordShift from \"@/core/word-shift\";\nimport ReplicantiUpgradeButton, { ReplicantiUpgradeButtonSetup } from \"./ReplicantiUpgradeButton\";\nimport PrimaryButton from \"@/components/PrimaryButton\";\nimport ReplicantiGainText from \"./ReplicantiGainText\";\nimport ReplicantiGalaxyButton from \"./ReplicantiGalaxyButton\";\nexport default {\n  name: \"ReplicantiTab\",\n  components: {\n    PrimaryButton,\n    ReplicantiGainText,\n    ReplicantiUpgradeButton,\n    ReplicantiGalaxyButton\n  },\n\n  data() {\n    return {\n      isUnlocked: false,\n      isUnlockAffordable: false,\n      isInEC8: false,\n      ec8Purchases: 0,\n      amount: new Decimal(),\n      mult: new Decimal(),\n      hasTDMult: false,\n      multTD: new Decimal(),\n      hasDTMult: false,\n      multDT: new Decimal(),\n      hasIPMult: false,\n      multIP: new Decimal(),\n      hasRaisedCap: false,\n      replicantiCap: new Decimal(),\n      capMultText: \"\",\n      distantRG: 0,\n      remoteRG: 0,\n      effarigInfinityBonusRG: 0,\n      isUncapped: false,\n      nextEffarigRGThreshold: 0,\n      canSeeGalaxyButton: false,\n      unlockCost: new Decimal(),\n      scrambledText: \"\",\n      maxReplicanti: new Decimal(),\n      estimateToMax: 0\n    };\n  },\n\n  computed: {\n    isDoomed: () => Pelle.isDoomed,\n\n    replicantiChanceSetup() {\n      return new ReplicantiUpgradeButtonSetup(ReplicantiUpgrade.chance, value => `Replicate chance: ${formatPercents(value)}`, cost => `+${formatPercents(0.01)} Costs: ${format(cost)} IP`);\n    },\n\n    replicantiIntervalSetup() {\n      const upgrade = ReplicantiUpgrade.interval;\n\n      function formatInterval(interval) {\n        const actualInterval = upgrade.applyModifiers(interval);\n        const intervalNum = actualInterval.toNumber();\n\n        if (Number.isFinite(intervalNum) && intervalNum > 1 && upgrade.isCapped) {\n          // Checking isCapped() prevents text overflow when formatted as \"__ ➜ __\"\n          return TimeSpan.fromMilliseconds(intervalNum).toStringShort(false);\n        }\n\n        if (actualInterval.lt(0.01)) return `< ${format(0.01, 2, 2)}ms`;\n        if (actualInterval.gt(1000)) return `${format(actualInterval.div(1000), 2, 2)}s`;\n        return `${format(actualInterval, 2, 2)}ms`;\n      }\n\n      return new ReplicantiUpgradeButtonSetup(upgrade, value => `Interval: ${formatInterval(value)}`, cost => `➜ ${formatInterval(upgrade.nextValue)} Costs: ${format(cost)} IP`);\n    },\n\n    maxGalaxySetup() {\n      const upgrade = ReplicantiUpgrade.galaxies;\n      return new ReplicantiUpgradeButtonSetup(upgrade, value => {\n        let description = `Max Replicanti Galaxies: `;\n        const extra = upgrade.extra;\n\n        if (extra > 0) {\n          const total = value + extra;\n          description += `<br>${formatInt(value)} + ${formatInt(extra)} = ${formatInt(total)}`;\n        } else {\n          description += formatInt(value);\n        }\n\n        return description;\n      }, cost => `+${formatInt(1)} Costs: ${format(cost)} IP`);\n    },\n\n    boostText() {\n      const boostList = [];\n      boostList.push(`a <span class=\"c-replicanti-description__accent\">${formatX(this.mult, 2, 2)}</span>\n        multiplier on all Infinity Dimensions`);\n\n      if (this.hasTDMult) {\n        boostList.push(`a <span class=\"c-replicanti-description__accent\">${formatX(this.multTD, 2, 2)}</span>\n          multiplier on all Time Dimensions from a Dilation Upgrade`);\n      }\n\n      if (this.hasDTMult) {\n        const additionalEffect = GlyphAlteration.isAdded(\"replication\") ? \"and Replicanti speed \" : \"\";\n        boostList.push(`a <span class=\"c-replicanti-description__accent\">${formatX(this.multDT, 2, 2)}</span>\n          multiplier to Dilated Time ${additionalEffect}from Glyphs`);\n      }\n\n      if (this.hasIPMult) {\n        boostList.push(`a <span class=\"c-replicanti-description__accent\">${formatX(this.multIP)}</span>\n          multiplier to Infinity Points from Glyph Alchemy`);\n      }\n\n      if (boostList.length === 1) return `${boostList[0]}.`;\n      if (boostList.length === 2) return `${boostList[0]}<br> and ${boostList[1]}.`;\n      return `${boostList.slice(0, -1).join(\",<br>\")},<br> and ${boostList[boostList.length - 1]}.`;\n    },\n\n    hasMaxText: () => PlayerProgress.realityUnlocked() && !Pelle.isDoomed,\n\n    toMaxTooltip() {\n      if (this.amount.lte(this.replicantiCap)) return null;\n      return this.estimateToMax.lt(0.01) ? \"Currently Increasing\" : TimeSpan.fromSeconds(this.estimateToMax.toNumber()).toStringShort();\n    }\n\n  },\n  methods: {\n    update() {\n      this.isUnlocked = Replicanti.areUnlocked;\n      this.unlockCost = new Decimal(1e140).dividedByEffectOf(PelleRifts.vacuum.milestones[1]);\n      if (this.isDoomed) this.scrambledText = this.vacuumText();\n\n      if (!this.isUnlocked) {\n        this.isUnlockAffordable = Currency.infinityPoints.gte(this.unlockCost);\n        return;\n      }\n\n      this.isInEC8 = EternityChallenge(8).isRunning;\n\n      if (this.isInEC8) {\n        this.ec8Purchases = player.eterc8repl;\n      }\n\n      this.amount.copyFrom(Replicanti.amount);\n      this.mult.copyFrom(replicantiMult());\n      this.hasTDMult = DilationUpgrade.tdMultReplicanti.isBought;\n      this.multTD.copyFrom(DilationUpgrade.tdMultReplicanti.effectValue);\n      this.hasDTMult = getAdjustedGlyphEffect(\"replicationdtgain\") !== 0 && !Pelle.isDoomed;\n      this.multDT = Math.clampMin(Decimal.log10(Replicanti.amount) * getAdjustedGlyphEffect(\"replicationdtgain\"), 1);\n      this.hasIPMult = AlchemyResource.exponential.amount > 0 && !this.isDoomed;\n      this.multIP = Replicanti.amount.powEffectOf(AlchemyResource.exponential);\n      this.isUncapped = PelleRifts.vacuum.milestones[1].canBeApplied;\n      this.hasRaisedCap = EffarigUnlock.infinity.isUnlocked && !this.isUncapped;\n      this.replicantiCap.copyFrom(replicantiCap());\n\n      if (this.hasRaisedCap) {\n        const mult = this.replicantiCap.div(Decimal.NUMBER_MAX_VALUE);\n        this.capMultText = TimeStudy(31).canBeApplied ? `Base: ${formatX(mult.pow(1 / TimeStudy(31).effectValue), 2)}; after TS31: ${formatX(mult, 2)}` : formatX(mult, 2);\n      }\n\n      this.distantRG = ReplicantiUpgrade.galaxies.distantRGStart;\n      this.remoteRG = ReplicantiUpgrade.galaxies.remoteRGStart;\n      this.effarigInfinityBonusRG = Effarig.bonusRG;\n      this.nextEffarigRGThreshold = Decimal.NUMBER_MAX_VALUE.pow(Effarig.bonusRG + 2);\n      this.canSeeGalaxyButton = Replicanti.galaxies.max >= 1 || PlayerProgress.eternityUnlocked();\n      this.maxReplicanti.copyFrom(player.records.thisReality.maxReplicanti);\n      this.estimateToMax = this.calculateEstimate();\n    },\n\n    vacuumText() {\n      return wordShift.wordCycle(PelleRifts.vacuum.name);\n    },\n\n    // This is copied out of a short segment of ReplicantiGainText with comments and unneeded variables stripped\n    calculateEstimate() {\n      const updateRateMs = player.options.updateRate;\n      const logGainFactorPerTick = Decimal.divide(getGameSpeedupForDisplay() * updateRateMs * Math.log(player.replicanti.chance + 1), getReplicantiInterval());\n      const postScale = Math.log10(ReplicantiGrowth.scaleFactor) / ReplicantiGrowth.scaleLog10;\n      const nextMilestone = this.maxReplicanti;\n      const coeff = Decimal.divide(updateRateMs / 1000, logGainFactorPerTick.times(postScale));\n      return coeff.times(nextMilestone.divide(this.amount).pow(postScale).minus(1));\n    }\n\n  }\n};","map":{"version":3,"sources":["ReplicantiTab.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport wordShift from \"@/core/word-shift\";\r\n\r\nimport ReplicantiUpgradeButton, { ReplicantiUpgradeButtonSetup } from \"./ReplicantiUpgradeButton\";\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\nimport ReplicantiGainText from \"./ReplicantiGainText\";\r\nimport ReplicantiGalaxyButton from \"./ReplicantiGalaxyButton\";\r\n\r\nexport default {\r\n  name: \"ReplicantiTab\",\r\n  components: {\r\n    PrimaryButton,\r\n    ReplicantiGainText,\r\n    ReplicantiUpgradeButton,\r\n    ReplicantiGalaxyButton,\r\n  },\r\n  data() {\r\n    return {\r\n      isUnlocked: false,\r\n      isUnlockAffordable: false,\r\n      isInEC8: false,\r\n      ec8Purchases: 0,\r\n      amount: new Decimal(),\r\n      mult: new Decimal(),\r\n      hasTDMult: false,\r\n      multTD: new Decimal(),\r\n      hasDTMult: false,\r\n      multDT: new Decimal(),\r\n      hasIPMult: false,\r\n      multIP: new Decimal(),\r\n      hasRaisedCap: false,\r\n      replicantiCap: new Decimal(),\r\n      capMultText: \"\",\r\n      distantRG: 0,\r\n      remoteRG: 0,\r\n      effarigInfinityBonusRG: 0,\r\n      isUncapped: false,\r\n      nextEffarigRGThreshold: 0,\r\n      canSeeGalaxyButton: false,\r\n      unlockCost: new Decimal(),\r\n      scrambledText: \"\",\r\n      maxReplicanti: new Decimal(),\r\n      estimateToMax: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    isDoomed: () => Pelle.isDoomed,\r\n    replicantiChanceSetup() {\r\n      return new ReplicantiUpgradeButtonSetup(\r\n        ReplicantiUpgrade.chance,\r\n        value => `Replicate chance: ${formatPercents(value)}`,\r\n        cost => `+${formatPercents(0.01)} Costs: ${format(cost)} IP`\r\n      );\r\n    },\r\n    replicantiIntervalSetup() {\r\n      const upgrade = ReplicantiUpgrade.interval;\r\n      function formatInterval(interval) {\r\n        const actualInterval = upgrade.applyModifiers(interval);\r\n        const intervalNum = actualInterval.toNumber();\r\n        if (\r\n          Number.isFinite(intervalNum) &&\r\n          intervalNum > 1 &&\r\n          upgrade.isCapped\r\n        ) {\r\n          // Checking isCapped() prevents text overflow when formatted as \"__ ➜ __\"\r\n          return TimeSpan.fromMilliseconds(intervalNum).toStringShort(false);\r\n        }\r\n        if (actualInterval.lt(0.01)) return `< ${format(0.01, 2, 2)}ms`;\r\n        if (actualInterval.gt(1000))\r\n          return `${format(actualInterval.div(1000), 2, 2)}s`;\r\n        return `${format(actualInterval, 2, 2)}ms`;\r\n      }\r\n      return new ReplicantiUpgradeButtonSetup(\r\n        upgrade,\r\n        value => `Interval: ${formatInterval(value)}`,\r\n        cost =>\r\n          `➜ ${formatInterval(upgrade.nextValue)} Costs: ${format(cost)} IP`\r\n      );\r\n    },\r\n    maxGalaxySetup() {\r\n      const upgrade = ReplicantiUpgrade.galaxies;\r\n      return new ReplicantiUpgradeButtonSetup(\r\n        upgrade,\r\n        value => {\r\n          let description = `Max Replicanti Galaxies: `;\r\n          const extra = upgrade.extra;\r\n          if (extra > 0) {\r\n            const total = value + extra;\r\n            description += `<br>${formatInt(value)} + ${formatInt(extra)} = ${formatInt(total)}`;\r\n          } else {\r\n            description += formatInt(value);\r\n          }\r\n          return description;\r\n        },\r\n        cost => `+${formatInt(1)} Costs: ${format(cost)} IP`\r\n      );\r\n    },\r\n    boostText() {\r\n      const boostList = [];\r\n      boostList.push(`a <span class=\"c-replicanti-description__accent\">${formatX(this.mult, 2, 2)}</span>\r\n        multiplier on all Infinity Dimensions`);\r\n      if (this.hasTDMult) {\r\n        boostList.push(`a <span class=\"c-replicanti-description__accent\">${formatX(this.multTD, 2, 2)}</span>\r\n          multiplier on all Time Dimensions from a Dilation Upgrade`);\r\n      }\r\n      if (this.hasDTMult) {\r\n        const additionalEffect = GlyphAlteration.isAdded(\"replication\") ? \"and Replicanti speed \" : \"\";\r\n        boostList.push(`a <span class=\"c-replicanti-description__accent\">${formatX(this.multDT, 2, 2)}</span>\r\n          multiplier to Dilated Time ${additionalEffect}from Glyphs`);\r\n      }\r\n      if (this.hasIPMult) {\r\n        boostList.push(`a <span class=\"c-replicanti-description__accent\">${formatX(this.multIP)}</span>\r\n          multiplier to Infinity Points from Glyph Alchemy`);\r\n      }\r\n      if (boostList.length === 1) return `${boostList[0]}.`;\r\n      if (boostList.length === 2) return `${boostList[0]}<br> and ${boostList[1]}.`;\r\n      return `${boostList.slice(0, -1).join(\",<br>\")},<br> and ${boostList[boostList.length - 1]}.`;\r\n    },\r\n    hasMaxText: () => PlayerProgress.realityUnlocked() && !Pelle.isDoomed,\r\n    toMaxTooltip() {\r\n      if (this.amount.lte(this.replicantiCap)) return null;\r\n      return this.estimateToMax.lt(0.01)\r\n        ? \"Currently Increasing\"\r\n        : TimeSpan.fromSeconds(this.estimateToMax.toNumber()).toStringShort();\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isUnlocked = Replicanti.areUnlocked;\r\n      this.unlockCost = new Decimal(1e140).dividedByEffectOf(PelleRifts.vacuum.milestones[1]);\r\n      if (this.isDoomed) this.scrambledText = this.vacuumText();\r\n      if (!this.isUnlocked) {\r\n        this.isUnlockAffordable = Currency.infinityPoints.gte(this.unlockCost);\r\n        return;\r\n      }\r\n      this.isInEC8 = EternityChallenge(8).isRunning;\r\n      if (this.isInEC8) {\r\n        this.ec8Purchases = player.eterc8repl;\r\n      }\r\n      this.amount.copyFrom(Replicanti.amount);\r\n      this.mult.copyFrom(replicantiMult());\r\n      this.hasTDMult = DilationUpgrade.tdMultReplicanti.isBought;\r\n      this.multTD.copyFrom(DilationUpgrade.tdMultReplicanti.effectValue);\r\n      this.hasDTMult = getAdjustedGlyphEffect(\"replicationdtgain\") !== 0 && !Pelle.isDoomed;\r\n      this.multDT = Math.clampMin(\r\n        Decimal.log10(Replicanti.amount) *\r\n          getAdjustedGlyphEffect(\"replicationdtgain\"),\r\n        1\r\n      );\r\n      this.hasIPMult = AlchemyResource.exponential.amount > 0 && !this.isDoomed;\r\n      this.multIP = Replicanti.amount.powEffectOf(AlchemyResource.exponential);\r\n      this.isUncapped = PelleRifts.vacuum.milestones[1].canBeApplied;\r\n      this.hasRaisedCap = EffarigUnlock.infinity.isUnlocked && !this.isUncapped;\r\n      this.replicantiCap.copyFrom(replicantiCap());\r\n      if (this.hasRaisedCap) {\r\n        const mult = this.replicantiCap.div(Decimal.NUMBER_MAX_VALUE);\r\n        this.capMultText = TimeStudy(31).canBeApplied\r\n          ? `Base: ${formatX(mult.pow(1 / TimeStudy(31).effectValue), 2)}; after TS31: ${formatX(mult, 2)}`\r\n          : formatX(mult, 2);\r\n      }\r\n      this.distantRG = ReplicantiUpgrade.galaxies.distantRGStart;\r\n      this.remoteRG = ReplicantiUpgrade.galaxies.remoteRGStart;\r\n      this.effarigInfinityBonusRG = Effarig.bonusRG;\r\n      this.nextEffarigRGThreshold = Decimal.NUMBER_MAX_VALUE.pow(\r\n        Effarig.bonusRG + 2\r\n      );\r\n      this.canSeeGalaxyButton =\r\n        Replicanti.galaxies.max >= 1 || PlayerProgress.eternityUnlocked();\r\n      this.maxReplicanti.copyFrom(player.records.thisReality.maxReplicanti);\r\n      this.estimateToMax = this.calculateEstimate();\r\n    },\r\n    vacuumText() {\r\n      return wordShift.wordCycle(PelleRifts.vacuum.name);\r\n    },\r\n    // This is copied out of a short segment of ReplicantiGainText with comments and unneeded variables stripped\r\n    calculateEstimate() {\r\n      const updateRateMs = player.options.updateRate;\r\n      const logGainFactorPerTick = Decimal.divide(getGameSpeedupForDisplay() * updateRateMs *\r\n        (Math.log(player.replicanti.chance + 1)), getReplicantiInterval());\r\n      const postScale = Math.log10(ReplicantiGrowth.scaleFactor) / ReplicantiGrowth.scaleLog10;\r\n      const nextMilestone = this.maxReplicanti;\r\n      const coeff = Decimal.divide(updateRateMs / 1000, logGainFactorPerTick.times(postScale));\r\n      return coeff.times(nextMilestone.divide(this.amount).pow(postScale).minus(1));\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-replicanti-tab\">\r\n    <br>\r\n    <PrimaryButton\r\n      v-if=\"!isUnlocked\"\r\n      :enabled=\"isUnlockAffordable\"\r\n      class=\"o-primary-btn--replicanti-unlock\"\r\n      onclick=\"Replicanti.unlock();\"\r\n    >\r\n      Unlock Replicanti\r\n      <br>\r\n      Cost: {{ format(unlockCost) }} IP\r\n    </PrimaryButton>\r\n    <template v-else>\r\n      <div\r\n        v-if=\"isDoomed\"\r\n        class=\"modified-cap\"\r\n      >\r\n        Your Replicanti cap has been removed due to the second {{ scrambledText }} milestone.\r\n      </div>\r\n      <div\r\n        v-else-if=\"hasRaisedCap\"\r\n        class=\"modified-cap\"\r\n      >\r\n        Completion of Effarig's Infinity is giving you the following rewards:\r\n        <br>\r\n        Your Replicanti cap without TS192 is now {{ format(replicantiCap, 2) }}\r\n        ({{ capMultText }})\r\n        <br>\r\n        {{ quantifyInt(\"extra Replicanti Galaxy\", effarigInfinityBonusRG) }}\r\n        (Next Replicanti Galaxy at {{ format(nextEffarigRGThreshold, 2) }} cap)\r\n      </div>\r\n      <p class=\"c-replicanti-description\">\r\n        You have\r\n        <span class=\"c-replicanti-description__accent\">{{ format(amount, 2, 0) }}</span>\r\n        Replicanti, translated to\r\n        <br>\r\n        <span v-html=\"boostText\" />\r\n      </p>\r\n      <div\r\n        v-if=\"hasMaxText\"\r\n        class=\"c-replicanti-description\"\r\n      >\r\n        Your maximum Replicanti reached this Reality is\r\n        <span\r\n          v-tooltip=\"toMaxTooltip\"\r\n          class=\"max-accent\"\r\n        >{{ format(maxReplicanti, 2) }}</span>.\r\n      </div>\r\n      <br>\r\n      <div v-if=\"isInEC8\">\r\n        You have {{ quantifyInt(\"purchase\", ec8Purchases) }} left within Eternity Challenge 8.\r\n      </div>\r\n      <div class=\"l-replicanti-upgrade-row\">\r\n        <ReplicantiUpgradeButton :setup=\"replicantiChanceSetup\" />\r\n        <ReplicantiUpgradeButton :setup=\"replicantiIntervalSetup\" />\r\n        <ReplicantiUpgradeButton :setup=\"maxGalaxySetup\" />\r\n      </div>\r\n      <div>\r\n        The Max Replicanti Galaxy upgrade can be purchased endlessly, but costs increase\r\n        <br>\r\n        more rapidly above {{ formatInt(distantRG) }} Replicanti Galaxies\r\n        and even more so above {{ formatInt(remoteRG) }} Replicanti Galaxies.\r\n      </div>\r\n      <br><br>\r\n      <ReplicantiGainText />\r\n      <br>\r\n      <ReplicantiGalaxyButton v-if=\"canSeeGalaxyButton\" />\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.max-accent {\r\n  color: var(--color-accent);\r\n  text-shadow: 0 0 0.2rem var(--color-reality-dark);\r\n  cursor: default;\r\n}\r\n\r\n.modified-cap {\r\n  margin: -0.8rem 0 0.8rem;\r\n  font-weight: bold;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/replicanti"},"metadata":{},"sourceType":"module"}