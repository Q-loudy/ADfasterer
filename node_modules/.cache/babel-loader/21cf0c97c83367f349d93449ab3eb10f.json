{"ast":null,"code":"import RaPetLevelBar from \"./RaPetLevelBar\";\nimport RaUpgradeIcon from \"./RaUpgradeIcon\";\nexport default {\n  name: \"RaPet\",\n  components: {\n    RaUpgradeIcon,\n    RaPetLevelBar\n  },\n  props: {\n    petConfig: {\n      type: Object,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      isUnlocked: false,\n      isRaCapped: false,\n      isCapped: false,\n      level: 0,\n      memories: 0,\n      requiredMemories: 0,\n      memoryChunks: 0,\n      memoryChunksPerSecond: 0,\n      memoriesPerSecond: 0,\n      memoryMultiplier: 1,\n      canGetMemoryChunks: false,\n      memoryUpgradeCost: 0,\n      chunkUpgradeCost: 0,\n      memoryUpgradeCapped: false,\n      chunkUpgradeCapped: false,\n      currentMemoryMult: 0,\n      currentChunkMult: 0,\n      nextMemoryUpgradeEstimate: \"\",\n      nextMemoryChunkUpgradeEstimate: \"\"\n    };\n  },\n\n  computed: {\n    levelCap() {\n      return Ra.levelCap;\n    },\n\n    showScalingUpgrade() {\n      return this.petConfig.scalingUpgradeVisible(this.level);\n    },\n\n    scalingUpgradeText() {\n      return this.petConfig.scalingUpgradeText(this.level);\n    },\n\n    pet() {\n      return this.petConfig.pet;\n    },\n\n    name() {\n      return this.pet.name;\n    },\n\n    petStyle() {\n      return {\n        color: this.pet.color\n      };\n    },\n\n    unlocks() {\n      return this.pet.unlocks;\n    },\n\n    chunkTooltip() {\n      return `Based on ${this.pet.chunkGain}`;\n    },\n\n    memoryGainTooltip() {\n      return `Based on ${this.pet.memoryGain}`;\n    }\n\n  },\n  methods: {\n    update() {\n      this.isRaCapped = Ra.totalPetLevel === Ra.maxTotalPetLevel;\n      const pet = this.pet;\n      this.isCapped = pet.level === Ra.levelCap;\n      this.isUnlocked = pet.isUnlocked;\n      if (!this.isUnlocked) return;\n      this.level = pet.level;\n      this.memories = pet.memories;\n      this.requiredMemories = pet.requiredMemories;\n      this.memoryChunks = pet.memoryChunks;\n      this.memoryChunksPerSecond = pet.memoryChunksPerSecond;\n      this.memoriesPerSecond = pet.memoryChunks * Ra.productionPerMemoryChunk * this.currentMemoryMult;\n      this.canGetMemoryChunks = pet.canGetMemoryChunks;\n      this.memoryMultiplier = pet.memoryProductionMultiplier;\n      this.memoryUpgradeCost = pet.memoryUpgradeCost;\n      this.chunkUpgradeCost = pet.chunkUpgradeCost;\n      this.memoryUpgradeCapped = pet.memoryUpgradeCapped;\n      this.chunkUpgradeCapped = pet.chunkUpgradeCapped;\n      this.currentMemoryMult = pet.memoryUpgradeCurrentMult;\n      this.currentChunkMult = pet.chunkUpgradeCurrentMult;\n      this.nextMemoryUpgradeEstimate = Ra.timeToGoalString(pet, this.memoryUpgradeCost - this.memories);\n      this.nextMemoryChunkUpgradeEstimate = Ra.timeToGoalString(pet, this.chunkUpgradeCost - this.memories);\n    },\n\n    nextUnlockLevel() {\n      const missingUpgrades = this.pet.unlocks.map(u => u.level).filter(goal => goal > this.level);\n      return missingUpgrades.length === 0 ? 25 : missingUpgrades.min();\n    },\n\n    upgradeClassObject(type) {\n      const available = type === \"memory\" ? this.memoryUpgradeCost <= this.memories : this.chunkUpgradeCost <= this.memories;\n      const capped = type === \"memory\" ? this.memoryUpgradeCapped : this.chunkUpgradeCapped;\n      const pet = this.pet;\n      return {\n        \"c-ra-pet-upgrade\": true,\n        \"c-ra-pet-upgrade-memory\": type === \"memory\",\n        \"c-ra-pet-upgrade-chunk\": type === \"chunk\",\n        \"c-ra-pet-btn--available\": available,\n        [`c-ra-pet-btn--${pet.id}`]: available,\n        \"c-ra-pet-btn--available__capped\": capped,\n        [`c-ra-pet-btn--${pet.id}__capped`]: capped\n      };\n    },\n\n    barStyle(type) {\n      const cost = type === \"memory\" ? this.memoryUpgradeCost : this.chunkUpgradeCost;\n      const gone = type === \"memory\" && this.memoryUpgradeCapped || type === \"chunk\" && this.chunkUpgradeCapped ? cost : this.memories;\n      return {\n        width: `${100 * Math.min(1, gone / cost)}%`,\n        background: this.pet.color\n      };\n    }\n\n  }\n};","map":{"version":3,"sources":["RaPet.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport RaPetLevelBar from \"./RaPetLevelBar\";\r\nimport RaUpgradeIcon from \"./RaUpgradeIcon\";\r\n\r\nexport default {\r\n  name: \"RaPet\",\r\n  components: {\r\n    RaUpgradeIcon,\r\n    RaPetLevelBar\r\n  },\r\n  props: {\r\n    petConfig: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isUnlocked: false,\r\n      isRaCapped: false,\r\n      isCapped: false,\r\n      level: 0,\r\n      memories: 0,\r\n      requiredMemories: 0,\r\n      memoryChunks: 0,\r\n      memoryChunksPerSecond: 0,\r\n      memoriesPerSecond: 0,\r\n      memoryMultiplier: 1,\r\n      canGetMemoryChunks: false,\r\n      memoryUpgradeCost: 0,\r\n      chunkUpgradeCost: 0,\r\n      memoryUpgradeCapped: false,\r\n      chunkUpgradeCapped: false,\r\n      currentMemoryMult: 0,\r\n      currentChunkMult: 0,\r\n      nextMemoryUpgradeEstimate: \"\",\r\n      nextMemoryChunkUpgradeEstimate: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    levelCap() { return Ra.levelCap; },\r\n    showScalingUpgrade() {\r\n      return this.petConfig.scalingUpgradeVisible(this.level);\r\n    },\r\n    scalingUpgradeText() {\r\n      return this.petConfig.scalingUpgradeText(this.level);\r\n    },\r\n    pet() {\r\n      return this.petConfig.pet;\r\n    },\r\n    name() {\r\n      return this.pet.name;\r\n    },\r\n    petStyle() {\r\n      return {\r\n        color: this.pet.color\r\n      };\r\n    },\r\n    unlocks() {\r\n      return this.pet.unlocks;\r\n    },\r\n    chunkTooltip() {\r\n      return `Based on ${this.pet.chunkGain}`;\r\n    },\r\n    memoryGainTooltip() {\r\n      return `Based on ${this.pet.memoryGain}`;\r\n    },\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isRaCapped = Ra.totalPetLevel === Ra.maxTotalPetLevel;\r\n      const pet = this.pet;\r\n      this.isCapped = pet.level === Ra.levelCap;\r\n      this.isUnlocked = pet.isUnlocked;\r\n      if (!this.isUnlocked) return;\r\n      this.level = pet.level;\r\n      this.memories = pet.memories;\r\n      this.requiredMemories = pet.requiredMemories;\r\n      this.memoryChunks = pet.memoryChunks;\r\n      this.memoryChunksPerSecond = pet.memoryChunksPerSecond;\r\n      this.memoriesPerSecond = pet.memoryChunks * Ra.productionPerMemoryChunk * this.currentMemoryMult;\r\n      this.canGetMemoryChunks = pet.canGetMemoryChunks;\r\n      this.memoryMultiplier = pet.memoryProductionMultiplier;\r\n      this.memoryUpgradeCost = pet.memoryUpgradeCost;\r\n      this.chunkUpgradeCost = pet.chunkUpgradeCost;\r\n      this.memoryUpgradeCapped = pet.memoryUpgradeCapped;\r\n      this.chunkUpgradeCapped = pet.chunkUpgradeCapped;\r\n      this.currentMemoryMult = pet.memoryUpgradeCurrentMult;\r\n      this.currentChunkMult = pet.chunkUpgradeCurrentMult;\r\n\r\n      this.nextMemoryUpgradeEstimate = Ra.timeToGoalString(pet, this.memoryUpgradeCost - this.memories);\r\n      this.nextMemoryChunkUpgradeEstimate = Ra.timeToGoalString(pet, this.chunkUpgradeCost - this.memories);\r\n    },\r\n    nextUnlockLevel() {\r\n      const missingUpgrades = this.pet.unlocks\r\n        .map(u => u.level)\r\n        .filter(goal => goal > this.level);\r\n      return missingUpgrades.length === 0 ? 25 : missingUpgrades.min();\r\n    },\r\n    upgradeClassObject(type) {\r\n      const available = type === \"memory\"\r\n        ? this.memoryUpgradeCost <= this.memories\r\n        : this.chunkUpgradeCost <= this.memories;\r\n      const capped = type === \"memory\" ? this.memoryUpgradeCapped : this.chunkUpgradeCapped;\r\n      const pet = this.pet;\r\n      return {\r\n        \"c-ra-pet-upgrade\": true,\r\n        \"c-ra-pet-upgrade-memory\": type === \"memory\",\r\n        \"c-ra-pet-upgrade-chunk\": type === \"chunk\",\r\n        \"c-ra-pet-btn--available\": available,\r\n        [`c-ra-pet-btn--${pet.id}`]: available,\r\n        \"c-ra-pet-btn--available__capped\": capped,\r\n        [`c-ra-pet-btn--${pet.id}__capped`]: capped\r\n      };\r\n    },\r\n    barStyle(type) {\r\n      const cost = type === \"memory\" ? this.memoryUpgradeCost : this.chunkUpgradeCost;\r\n      const gone = (type === \"memory\" && this.memoryUpgradeCapped || type === \"chunk\" && this.chunkUpgradeCapped)\r\n        ? cost\r\n        : this.memories;\r\n      return {\r\n        width: `${100 * Math.min(1, gone / cost)}%`,\r\n        background: this.pet.color\r\n      };\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    v-if=\"isUnlocked\"\r\n    class=\"l-ra-pet-container\"\r\n  >\r\n    <div\r\n      class=\"c-ra-pet-header\"\r\n      :style=\"petStyle\"\r\n    >\r\n      <div class=\"c-ra-pet-title\">\r\n        <!-- The full name doesn't fit here, so we shorten it as a special case -->\r\n        {{ pet.id === \"enslaved\" ? \"Nameless\" : name }} Level {{ formatInt(level) }}/{{ formatInt(levelCap) }}\r\n      </div>\r\n      <div\r\n        v-if=\"showScalingUpgrade\"\r\n        :key=\"level\"\r\n      >\r\n        {{ scalingUpgradeText }}\r\n      </div>\r\n      <br v-else>\r\n      <div v-if=\"!isCapped\">\r\n        <div>\r\n          {{ name }} {{ pet.id === \"enslaved\" ? \"have\" : \"has\" }} {{ quantify(\"Memory\", memories, 2) }}\r\n        </div>\r\n      </div>\r\n      <div\r\n        v-if=\"!isCapped\"\r\n        class=\"l-ra-pet-middle-container\"\r\n      >\r\n        <div class=\"l-ra-pet-upgrade-container\">\r\n          <div class=\"l-ra-pet-upgrade c-ra-pet-upgrade__top\">\r\n            <div\r\n              :class=\"upgradeClassObject('memory')\"\r\n              @click=\"pet.purchaseMemoryUpgrade()\"\r\n            >\r\n              <span class=\"fas fa-brain\" />\r\n              <div\r\n                v-if=\"!memoryUpgradeCapped\"\r\n                class=\"c-ra-pet-upgrade__tooltip\"\r\n              >\r\n                <div class=\"c-ra-pet-upgrade__tooltip__name\">\r\n                  {{ name }}'s Recollection\r\n                </div>\r\n                <div class=\"c-ra-pet-upgrade__tooltip__description\">\r\n                  Gain {{ formatPercents(0.3) }} more Memories\r\n                </div>\r\n                <div class=\"c-ra-pet-upgrade__tooltip__footer\">\r\n                  Cost: {{ quantify(\"Memory\", memoryUpgradeCost, 2, 2) }}\r\n                  <span v-if=\"memories <= memoryUpgradeCost\">\r\n                    {{ nextMemoryUpgradeEstimate }}\r\n                  </span>\r\n                  <br>\r\n                  Currently: {{ formatX(currentMemoryMult, 2, 2) }}\r\n                </div>\r\n              </div>\r\n              <div\r\n                v-else\r\n                class=\"c-ra-pet-upgrade__tooltip\"\r\n              >\r\n                <div class=\"c-ra-pet-upgrade__tooltip__name\">\r\n                  {{ name }}'s Recollection\r\n                </div>\r\n                <div class=\"c-ra-pet-upgrade__tooltip__description\">\r\n                  Capped: {{ formatX(currentMemoryMult, 2, 2) }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"c-ra-upgrade-bar\">\r\n              <div\r\n                class=\"c-ra-upgrade-bar__inner\"\r\n                :style=\"barStyle('memory')\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div class=\"l-ra-pet-upgrade c-ra-pet-upgrade__bottom\">\r\n            <div\r\n              :class=\"upgradeClassObject('chunk')\"\r\n              @click=\"pet.purchaseChunkUpgrade()\"\r\n            >\r\n              <span class=\"fas fa-dice-d6\" />\r\n              <div\r\n                v-if=\"!chunkUpgradeCapped\"\r\n                class=\"c-ra-pet-upgrade__tooltip\"\r\n              >\r\n                <div class=\"c-ra-pet-upgrade__tooltip__name\">\r\n                  {{ name }}'s Fragmentation\r\n                </div>\r\n                <div class=\"c-ra-pet-upgrade__tooltip__description\">\r\n                  Gain {{ formatPercents(0.5) }} more Memory Chunks\r\n                </div>\r\n                <div class=\"c-ra-pet-upgrade__tooltip__footer\">\r\n                  Cost: {{ quantify(\"Memory\", chunkUpgradeCost, 2, 2) }}\r\n                  <span v-if=\"memories <= chunkUpgradeCost\">\r\n                    {{ nextMemoryChunkUpgradeEstimate }}\r\n                  </span>\r\n                  <br>\r\n                  Currently: {{ formatX(currentChunkMult, 2, 2) }}\r\n                </div>\r\n              </div>\r\n              <div\r\n                v-else\r\n                class=\"c-ra-pet-upgrade__tooltip\"\r\n              >\r\n                <div class=\"c-ra-pet-upgrade__tooltip__name\">\r\n                  {{ name }}'s Fragmentation\r\n                </div>\r\n                <div class=\"c-ra-pet-upgrade__tooltip__description\">\r\n                  Capped: {{ formatX(currentChunkMult, 2, 2) }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"c-ra-upgrade-bar c-ra-upgrade-bar--bottom\">\r\n              <div\r\n                class=\"c-ra-upgrade-bar__inner\"\r\n                :style=\"barStyle('chunk')\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <RaPetLevelBar\r\n          v-if=\"!isCapped\"\r\n          :pet-config=\"petConfig\"\r\n        />\r\n      </div>\r\n      <div v-if=\"!isCapped\">\r\n        <div>\r\n          {{ quantify(\"Memory Chunk\", memoryChunks, 2, 2) }}, {{ quantify(\"Memory\", memoriesPerSecond, 2, 2) }}/sec\r\n        </div>\r\n        <div>\r\n          Gaining {{ quantify(\"Memory Chunk\", memoryChunksPerSecond, 2, 2) }}/sec\r\n          <span :ach-tooltip=\"chunkTooltip\">\r\n            <i class=\"fas fa-question-circle\" />\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div v-if=\"memoryMultiplier > 1 && !isRaCapped\">\r\n        Multiplying all Memory production by {{ format(memoryMultiplier, 2, 3) }}\r\n        <span :ach-tooltip=\"memoryGainTooltip\">\r\n          <i class=\"fas fa-question-circle\" />\r\n        </span>\r\n      </div>\r\n      <br v-else-if=\"!isRaCapped\">\r\n      <br v-if=\"!isRaCapped\">\r\n      <div\r\n        v-else\r\n        class=\"l-ra-pet-postcompletion-spacer\"\r\n      />\r\n      <div class=\"l-ra-pet-milestones\">\r\n        <!-- This choice of key forces a UI update every level up -->\r\n        <RaUpgradeIcon\r\n          v-for=\"(unlock, i) in unlocks\"\r\n          :key=\"25 * level + i\"\r\n          :unlock=\"unlock\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.l-ra-pet-milestones {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.c-ra-pet-upgrade-memory {\r\n  border-top-right-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  border-bottom-left-radius: 0;\r\n}\r\n\r\n.c-ra-pet-upgrade-chunk {\r\n  border-top-left-radius: 0;\r\n  border-top-right-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n}\r\n\r\n.l-ra-pet-postcompletion-spacer {\r\n  margin-bottom: 0.8rem;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/celestial-ra"},"metadata":{},"sourceType":"module"}