{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\n\nclass TabNotificationState {\n  constructor(config) {\n    this.config = config;\n\n    if (config.events) {\n      for (const event of config.events) {\n        EventHub.logic.on(event, this.tryTrigger.bind(this), this);\n      }\n    }\n  }\n\n  get triggered() {\n    return player.triggeredTabNotificationBits & 1 << this.config.id;\n  }\n\n  tryTrigger() {\n    if (!this.config.condition() || this.triggered) return;\n    const currentTabKey = `${Tabs.current.key}${Tabs.current._currentSubtab.key}`;\n    this.config.tabsToHighLight.map(t => t.parent + t.tab).forEach(tab => {\n      if (tab !== currentTabKey) player.tabNotifications.add(tab);\n    });\n    player.triggeredTabNotificationBits |= 1 << this.config.id; // Force all tabs and subtabs of this notification to be unhidden\n\n    for (const location of this.config.tabsToHighLight) {\n      const tab = Tabs.all.find(t => t.config.key === location.parent);\n      const subtab = tab.subtabs.find(t => t.key === location.tab);\n      tab.unhideTab();\n      subtab.unhideTab();\n    }\n  } // In some cases we want to clear a trigger via an event that isn't tab-clicking, in order to show it again\n\n\n  clearTrigger() {\n    player.triggeredTabNotificationBits &= -1 - (1 << this.config.id);\n    this.config.tabsToHighLight.map(t => t.parent + t.tab).forEach(tab => player.tabNotifications.delete(tab));\n  }\n\n}\n\nexport const TabNotification = mapGameDataToObject(GameDatabase.tabNotifications, config => new TabNotificationState(config));","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/tab-notifications.js"],"names":["TabNotificationState","constructor","config","events","event","EventHub","logic","on","tryTrigger","bind","triggered","player","triggeredTabNotificationBits","id","condition","currentTabKey","Tabs","current","key","_currentSubtab","tabsToHighLight","map","t","parent","tab","forEach","tabNotifications","add","location","all","find","subtab","subtabs","unhideTab","clearTrigger","delete","TabNotification","mapGameDataToObject","GameDatabase"],"mappings":";;AAAA,MAAMA,oBAAN,CAA2B;AACzBC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,SAAKA,MAAL,GAAcA,MAAd;;AACA,QAAIA,MAAM,CAACC,MAAX,EAAmB;AACjB,WAAK,MAAMC,KAAX,IAAoBF,MAAM,CAACC,MAA3B,EAAmC;AACjCE,QAAAA,QAAQ,CAACC,KAAT,CAAeC,EAAf,CAAkBH,KAAlB,EAAyB,KAAKI,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAzB,EAAqD,IAArD;AACD;AACF;AACF;;AAEY,MAATC,SAAS,GAAG;AACd,WAAOC,MAAM,CAACC,4BAAP,GAAuC,KAAK,KAAKV,MAAL,CAAYW,EAA/D;AACD;;AAEDL,EAAAA,UAAU,GAAG;AACX,QAAI,CAAC,KAAKN,MAAL,CAAYY,SAAZ,EAAD,IAA4B,KAAKJ,SAArC,EAAgD;AAChD,UAAMK,aAAa,GAAI,GAAEC,IAAI,CAACC,OAAL,CAAaC,GAAI,GAAEF,IAAI,CAACC,OAAL,CAAaE,cAAb,CAA4BD,GAAI,EAA5E;AACA,SAAKhB,MAAL,CAAYkB,eAAZ,CAA4BC,GAA5B,CAAgCC,CAAC,IAAIA,CAAC,CAACC,MAAF,GAAWD,CAAC,CAACE,GAAlD,EACGC,OADH,CACWD,GAAG,IAAI;AACd,UAAIA,GAAG,KAAKT,aAAZ,EAA2BJ,MAAM,CAACe,gBAAP,CAAwBC,GAAxB,CAA4BH,GAA5B;AAC5B,KAHH;AAIAb,IAAAA,MAAM,CAACC,4BAAP,IAAuC,KAAK,KAAKV,MAAL,CAAYW,EAAxD,CAPW,CASX;;AACA,SAAK,MAAMe,QAAX,IAAuB,KAAK1B,MAAL,CAAYkB,eAAnC,EAAoD;AAClD,YAAMI,GAAG,GAAGR,IAAI,CAACa,GAAL,CAASC,IAAT,CAAcR,CAAC,IAAIA,CAAC,CAACpB,MAAF,CAASgB,GAAT,KAAiBU,QAAQ,CAACL,MAA7C,CAAZ;AACA,YAAMQ,MAAM,GAAGP,GAAG,CAACQ,OAAJ,CAAYF,IAAZ,CAAiBR,CAAC,IAAIA,CAAC,CAACJ,GAAF,KAAUU,QAAQ,CAACJ,GAAzC,CAAf;AACAA,MAAAA,GAAG,CAACS,SAAJ;AACAF,MAAAA,MAAM,CAACE,SAAP;AACD;AACF,GA9BwB,CAgCzB;;;AACAC,EAAAA,YAAY,GAAG;AACbvB,IAAAA,MAAM,CAACC,4BAAP,IAAuC,CAAC,CAAD,IAAM,KAAK,KAAKV,MAAL,CAAYW,EAAvB,CAAvC;AACA,SAAKX,MAAL,CAAYkB,eAAZ,CAA4BC,GAA5B,CAAgCC,CAAC,IAAIA,CAAC,CAACC,MAAF,GAAWD,CAAC,CAACE,GAAlD,EACGC,OADH,CACWD,GAAG,IAAIb,MAAM,CAACe,gBAAP,CAAwBS,MAAxB,CAA+BX,GAA/B,CADlB;AAED;;AArCwB;;AAwC3B,OAAO,MAAMY,eAAe,GAAGC,mBAAmB,CAChDC,YAAY,CAACZ,gBADmC,EAEhDxB,MAAM,IAAI,IAAIF,oBAAJ,CAAyBE,MAAzB,CAFsC,CAA3C","sourcesContent":["class TabNotificationState {\r\n  constructor(config) {\r\n    this.config = config;\r\n    if (config.events) {\r\n      for (const event of config.events) {\r\n        EventHub.logic.on(event, this.tryTrigger.bind(this), this);\r\n      }\r\n    }\r\n  }\r\n\r\n  get triggered() {\r\n    return player.triggeredTabNotificationBits & (1 << this.config.id);\r\n  }\r\n\r\n  tryTrigger() {\r\n    if (!this.config.condition() || this.triggered) return;\r\n    const currentTabKey = `${Tabs.current.key}${Tabs.current._currentSubtab.key}`;\r\n    this.config.tabsToHighLight.map(t => t.parent + t.tab)\r\n      .forEach(tab => {\r\n        if (tab !== currentTabKey) player.tabNotifications.add(tab);\r\n      });\r\n    player.triggeredTabNotificationBits |= 1 << this.config.id;\r\n\r\n    // Force all tabs and subtabs of this notification to be unhidden\r\n    for (const location of this.config.tabsToHighLight) {\r\n      const tab = Tabs.all.find(t => t.config.key === location.parent);\r\n      const subtab = tab.subtabs.find(t => t.key === location.tab);\r\n      tab.unhideTab();\r\n      subtab.unhideTab();\r\n    }\r\n  }\r\n\r\n  // In some cases we want to clear a trigger via an event that isn't tab-clicking, in order to show it again\r\n  clearTrigger() {\r\n    player.triggeredTabNotificationBits &= -1 - (1 << this.config.id);\r\n    this.config.tabsToHighLight.map(t => t.parent + t.tab)\r\n      .forEach(tab => player.tabNotifications.delete(tab));\r\n  }\r\n}\r\n\r\nexport const TabNotification = mapGameDataToObject(\r\n  GameDatabase.tabNotifications,\r\n  config => new TabNotificationState(config)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}