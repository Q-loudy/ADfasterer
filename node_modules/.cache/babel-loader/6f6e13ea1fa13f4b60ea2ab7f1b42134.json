{"ast":null,"code":"import { AutobuyerState } from \"./autobuyer\";\nexport class EternityAutobuyerState extends AutobuyerState {\n  get data() {\n    return player.auto.eternity;\n  }\n\n  get name() {\n    return `Eternity`;\n  }\n\n  get isUnlocked() {\n    return EternityMilestone.autobuyerEternity.isReached;\n  }\n\n  get mode() {\n    return this.data.mode;\n  }\n\n  set mode(value) {\n    this.data.mode = value;\n  }\n\n  get amount() {\n    return this.data.amount;\n  }\n\n  get increaseWithMult() {\n    return this.data.increaseWithMult;\n  }\n\n  set increaseWithMult(value) {\n    this.data.increaseWithMult = value;\n  }\n\n  set amount(value) {\n    this.data.amount = value;\n  }\n\n  get time() {\n    return this.data.time;\n  }\n\n  set time(value) {\n    this.data.time = value;\n  }\n\n  get xHighest() {\n    return this.data.xHighest;\n  }\n\n  set xHighest(value) {\n    this.data.xHighest = value;\n  }\n\n  get hasAdditionalModes() {\n    return RealityUpgrade(13).isBought;\n  }\n\n  autoEternitiesAvailable(considerMilestoneReached) {\n    return (considerMilestoneReached || EternityMilestone.autoEternities.isReached) && !Player.isInAnyChallenge && !player.dilation.active && player.auto.autobuyersOn && this.data.isActive && this.mode === AUTO_ETERNITY_MODE.AMOUNT && this.amount.equals(0);\n  }\n\n  bumpAmount(mult) {\n    if (this.isUnlocked && this.increaseWithMult) {\n      this.amount = this.amount.times(mult);\n    }\n  }\n\n  get highestPrevPrestige() {\n    return player.records.thisReality.maxEP;\n  }\n\n  get timeToNextTick() {\n    return Math.clampMin(this.time - Time.thisEternityRealTime.totalSeconds, 0);\n  }\n\n  get willEternity() {\n    if (EternityChallenge.isRunning) {\n      var _EternityChallenge$cu;\n\n      // We Eternity asap if we're in an Eternity Challenge and can't reach more completions.\n      // Code elsewhere ensures this hasMoreCompletions evaluates to false when ready to complete the EC at all\n      // without the ECB perk or when capped at max completions with it (and true otherwise)\n      return !((_EternityChallenge$cu = EternityChallenge.current) !== null && _EternityChallenge$cu !== void 0 && _EternityChallenge$cu.gainedCompletionStatus.hasMoreCompletions);\n    }\n\n    switch (this.mode) {\n      case AUTO_ETERNITY_MODE.AMOUNT:\n        return gainedEternityPoints().gte(this.amount);\n\n      case AUTO_ETERNITY_MODE.TIME:\n        return Time.thisEternityRealTime.totalSeconds > this.time;\n\n      case AUTO_ETERNITY_MODE.X_HIGHEST:\n      default:\n        return gainedEternityPoints().gte(this.highestPrevPrestige.times(this.xHighest));\n    }\n  }\n\n  tick() {\n    if (this.willEternity) eternity(false, true);\n  }\n\n  reset() {\n    if (!EternityMilestone.autobuyerEternity.isReached) {\n      this.isActive = false;\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/autobuyers/eternity-autobuyer.js"],"names":["AutobuyerState","EternityAutobuyerState","data","player","auto","eternity","name","isUnlocked","EternityMilestone","autobuyerEternity","isReached","mode","value","amount","increaseWithMult","time","xHighest","hasAdditionalModes","RealityUpgrade","isBought","autoEternitiesAvailable","considerMilestoneReached","autoEternities","Player","isInAnyChallenge","dilation","active","autobuyersOn","isActive","AUTO_ETERNITY_MODE","AMOUNT","equals","bumpAmount","mult","times","highestPrevPrestige","records","thisReality","maxEP","timeToNextTick","Math","clampMin","Time","thisEternityRealTime","totalSeconds","willEternity","EternityChallenge","isRunning","current","gainedCompletionStatus","hasMoreCompletions","gainedEternityPoints","gte","TIME","X_HIGHEST","tick","reset"],"mappings":"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","sourcesContent":["import { AutobuyerState } from \"./autobuyer\";\r\n\r\nexport class EternityAutobuyerState extends AutobuyerState {\r\n  get data() {\r\n    return player.auto.eternity;\r\n  }\r\n\r\n  get name() {\r\n    return `Eternity`;\r\n  }\r\n\r\n  get isUnlocked() {\r\n    return EternityMilestone.autobuyerEternity.isReached;\r\n  }\r\n\r\n  get mode() {\r\n    return this.data.mode;\r\n  }\r\n\r\n  set mode(value) {\r\n    this.data.mode = value;\r\n  }\r\n\r\n  get amount() {\r\n    return this.data.amount;\r\n  }\r\n\r\n  get increaseWithMult() {\r\n    return this.data.increaseWithMult;\r\n  }\r\n\r\n  set increaseWithMult(value) {\r\n    this.data.increaseWithMult = value;\r\n  }\r\n\r\n  set amount(value) {\r\n    this.data.amount = value;\r\n  }\r\n\r\n  get time() {\r\n    return this.data.time;\r\n  }\r\n\r\n  set time(value) {\r\n    this.data.time = value;\r\n  }\r\n\r\n  get xHighest() {\r\n    return this.data.xHighest;\r\n  }\r\n\r\n  set xHighest(value) {\r\n    this.data.xHighest = value;\r\n  }\r\n\r\n  get hasAdditionalModes() {\r\n    return RealityUpgrade(13).isBought;\r\n  }\r\n\r\n  autoEternitiesAvailable(considerMilestoneReached) {\r\n    return (considerMilestoneReached || EternityMilestone.autoEternities.isReached) &&\r\n      !Player.isInAnyChallenge && !player.dilation.active &&\r\n      player.auto.autobuyersOn && this.data.isActive &&\r\n      this.mode === AUTO_ETERNITY_MODE.AMOUNT &&\r\n      this.amount.equals(0);\r\n  }\r\n\r\n  bumpAmount(mult) {\r\n    if (this.isUnlocked && this.increaseWithMult) {\r\n      this.amount = this.amount.times(mult);\r\n    }\r\n  }\r\n\r\n  get highestPrevPrestige() {\r\n    return player.records.thisReality.maxEP;\r\n  }\r\n\r\n  get timeToNextTick() {\r\n    return Math.clampMin(this.time - Time.thisEternityRealTime.totalSeconds, 0);\r\n  }\r\n\r\n  get willEternity() {\r\n    if (EternityChallenge.isRunning) {\r\n      // We Eternity asap if we're in an Eternity Challenge and can't reach more completions.\r\n      // Code elsewhere ensures this hasMoreCompletions evaluates to false when ready to complete the EC at all\r\n      // without the ECB perk or when capped at max completions with it (and true otherwise)\r\n      return !EternityChallenge.current?.gainedCompletionStatus.hasMoreCompletions;\r\n    }\r\n\r\n    switch (this.mode) {\r\n      case AUTO_ETERNITY_MODE.AMOUNT:\r\n        return gainedEternityPoints().gte(this.amount);\r\n      case AUTO_ETERNITY_MODE.TIME:\r\n        return Time.thisEternityRealTime.totalSeconds > this.time;\r\n      case AUTO_ETERNITY_MODE.X_HIGHEST:\r\n      default:\r\n        return gainedEternityPoints().gte(this.highestPrevPrestige.times(this.xHighest));\r\n    }\r\n  }\r\n\r\n  tick() {\r\n    if (this.willEternity) eternity(false, true);\r\n  }\r\n\r\n  reset() {\r\n    if (!EternityMilestone.autobuyerEternity.isReached) {\r\n      this.isActive = false;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}