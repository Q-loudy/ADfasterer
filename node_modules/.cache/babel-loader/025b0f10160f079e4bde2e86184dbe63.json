{"ast":null,"code":"import GlyphSetPreview from \"@/components/GlyphSetPreview\";\nexport default {\n  name: \"GlyphSetRecordsTab\",\n  components: {\n    GlyphSetPreview\n  },\n\n  data() {\n    return {\n      recordGlyphInfo: []\n    };\n  },\n\n  methods: {\n    update() {\n      const bestReality = player.records.bestReality;\n      const laitelaDim = 8 - Laitela.difficultyTier;\n      this.recordGlyphInfo = [[true, Glyphs.copyForRecords(bestReality.RMSet), \"Best Reality Machines gained\", `${format(bestReality.RM, 2, 2)} RM`], [true, Glyphs.copyForRecords(bestReality.RMminSet), \"Best Reality Machines per minute\", `${format(bestReality.RMmin, 2, 2)} RM/min`], [true, Glyphs.copyForRecords(bestReality.glyphLevelSet), \"Best Glyph Level\", `Level ${formatInt(bestReality.glyphLevel)}`], [true, Glyphs.copyForRecords(bestReality.bestEPSet), \"Highest Eternity Points\", `${format(bestReality.bestEP, 2, 2)} EP`], [true, Glyphs.copyForRecords(bestReality.speedSet), \"Fastest Reality (real time)\", `${TimeSpan.fromMilliseconds(bestReality.realTime).toStringShort()}`], [player.celestials.teresa.bestRunAM.gt(1), Glyphs.copyForRecords(player.celestials.teresa.bestAMSet), `Highest Antimatter in ${Teresa.possessiveName} Reality`, `${format(player.celestials.teresa.bestRunAM, 2, 2)} Antimatter`], [Currency.imaginaryMachines.gt(0), Glyphs.copyForRecords(bestReality.iMCapSet), \"Highest Imaginary Machine cap\", `${format(MachineHandler.currentIMCap, 2, 2)} iM`], [Laitela.isUnlocked, Glyphs.copyForRecords(bestReality.laitelaSet), `Best ${Laitela.displayName} Destabilization`, `${TimeSpan.fromSeconds(player.celestials.laitela.fastestCompletion).toStringShort()},\n          ${laitelaDim} ${pluralize(\"Dimension\", laitelaDim)} (${formatX(Laitela.realityReward, 2, 2)} DM)`]];\n    }\n\n  }\n};","map":{"version":3,"sources":["GlyphSetRecordsTab.vue"],"names":[],"mappings":"AACA,OAAA,eAAA,MAAA,8BAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,oBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA;AADA,GAFA;;AAKA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,eAAA,EAAA;AADA,KAAA;AAGA,GATA;;AAUA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,YAAA,WAAA,GAAA,MAAA,CAAA,OAAA,CAAA,WAAA;AACA,YAAA,UAAA,GAAA,IAAA,OAAA,CAAA,cAAA;AACA,WAAA,eAAA,GAAA,CACA,CAAA,IAAA,EAAA,MAAA,CAAA,cAAA,CAAA,WAAA,CAAA,KAAA,CAAA,EAAA,8BAAA,EACA,GAAA,MAAA,CAAA,WAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,CAAA,KADA,CADA,EAGA,CAAA,IAAA,EAAA,MAAA,CAAA,cAAA,CAAA,WAAA,CAAA,QAAA,CAAA,EAAA,kCAAA,EACA,GAAA,MAAA,CAAA,WAAA,CAAA,KAAA,EAAA,CAAA,EAAA,CAAA,CAAA,SADA,CAHA,EAKA,CAAA,IAAA,EAAA,MAAA,CAAA,cAAA,CAAA,WAAA,CAAA,aAAA,CAAA,EAAA,kBAAA,EACA,SAAA,SAAA,CAAA,WAAA,CAAA,UAAA,CAAA,EADA,CALA,EAOA,CAAA,IAAA,EAAA,MAAA,CAAA,cAAA,CAAA,WAAA,CAAA,SAAA,CAAA,EAAA,yBAAA,EACA,GAAA,MAAA,CAAA,WAAA,CAAA,MAAA,EAAA,CAAA,EAAA,CAAA,CAAA,KADA,CAPA,EASA,CAAA,IAAA,EAAA,MAAA,CAAA,cAAA,CAAA,WAAA,CAAA,QAAA,CAAA,EAAA,6BAAA,EACA,GAAA,QAAA,CAAA,gBAAA,CAAA,WAAA,CAAA,QAAA,EAAA,aAAA,EAAA,EADA,CATA,EAWA,CAAA,MAAA,CAAA,UAAA,CAAA,MAAA,CAAA,SAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,cAAA,CAAA,MAAA,CAAA,UAAA,CAAA,MAAA,CAAA,SAAA,CAAA,EACA,yBAAA,MAAA,CAAA,cAAA,UADA,EAEA,GAAA,MAAA,CAAA,MAAA,CAAA,UAAA,CAAA,MAAA,CAAA,SAAA,EAAA,CAAA,EAAA,CAAA,CAAA,aAFA,CAXA,EAcA,CAAA,QAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,cAAA,CAAA,WAAA,CAAA,QAAA,CAAA,EACA,+BADA,EAEA,GAAA,MAAA,CAAA,cAAA,CAAA,YAAA,EAAA,CAAA,EAAA,CAAA,CAAA,KAFA,CAdA,EAiBA,CAAA,OAAA,CAAA,UAAA,EAAA,MAAA,CAAA,cAAA,CAAA,WAAA,CAAA,UAAA,CAAA,EACA,QAAA,OAAA,CAAA,WAAA,kBADA,EAEA,GAAA,QAAA,CAAA,WAAA,CAAA,MAAA,CAAA,UAAA,CAAA,OAAA,CAAA,iBAAA,EAAA,aAAA,EAAA;AACA,YAAA,UAAA,IAAA,SAAA,CAAA,WAAA,EAAA,UAAA,CAAA,KAAA,OAAA,CAAA,OAAA,CAAA,aAAA,EAAA,CAAA,EAAA,CAAA,CAAA,MAHA,CAjBA,CAAA;AAsBA;;AA1BA;AAVA,CAAA","sourcesContent":["<script>\r\nimport GlyphSetPreview from \"@/components/GlyphSetPreview\";\r\n\r\nexport default {\r\n  name: \"GlyphSetRecordsTab\",\r\n  components: {\r\n    GlyphSetPreview\r\n  },\r\n  data() {\r\n    return {\r\n      recordGlyphInfo: [],\r\n    };\r\n  },\r\n  methods: {\r\n    update() {\r\n      const bestReality = player.records.bestReality;\r\n      const laitelaDim = 8 - Laitela.difficultyTier;\r\n      this.recordGlyphInfo = [\r\n        [true, Glyphs.copyForRecords(bestReality.RMSet), \"Best Reality Machines gained\",\r\n          `${format(bestReality.RM, 2, 2)} RM`],\r\n        [true, Glyphs.copyForRecords(bestReality.RMminSet), \"Best Reality Machines per minute\",\r\n          `${format(bestReality.RMmin, 2, 2)} RM/min`],\r\n        [true, Glyphs.copyForRecords(bestReality.glyphLevelSet), \"Best Glyph Level\",\r\n          `Level ${formatInt(bestReality.glyphLevel)}`],\r\n        [true, Glyphs.copyForRecords(bestReality.bestEPSet), \"Highest Eternity Points\",\r\n          `${format(bestReality.bestEP, 2, 2)} EP`],\r\n        [true, Glyphs.copyForRecords(bestReality.speedSet), \"Fastest Reality (real time)\",\r\n          `${TimeSpan.fromMilliseconds(bestReality.realTime).toStringShort()}`],\r\n        [player.celestials.teresa.bestRunAM.gt(1), Glyphs.copyForRecords(player.celestials.teresa.bestAMSet),\r\n          `Highest Antimatter in ${Teresa.possessiveName} Reality`,\r\n          `${format(player.celestials.teresa.bestRunAM, 2, 2)} Antimatter`],\r\n        [Currency.imaginaryMachines.gt(0), Glyphs.copyForRecords(bestReality.iMCapSet),\r\n          \"Highest Imaginary Machine cap\",\r\n          `${format(MachineHandler.currentIMCap, 2, 2)} iM`],\r\n        [Laitela.isUnlocked, Glyphs.copyForRecords(bestReality.laitelaSet),\r\n          `Best ${Laitela.displayName} Destabilization`,\r\n          `${TimeSpan.fromSeconds(player.celestials.laitela.fastestCompletion).toStringShort()},\r\n          ${laitelaDim} ${pluralize(\"Dimension\", laitelaDim)} (${formatX(Laitela.realityReward, 2, 2)} DM)`],\r\n      ];\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-glyph-set-tab\">\r\n    <div\r\n      v-for=\"(set, idx) in recordGlyphInfo\"\r\n      :key=\"idx\"\r\n    >\r\n      <div\r\n        v-if=\"set[0]\"\r\n        class=\"l-glyph-set-entry\"\r\n      >\r\n        {{ set[2] }}:\r\n        <GlyphSetPreview\r\n          v-if=\"set[0]\"\r\n          :key=\"idx\"\r\n          :glyphs=\"set[1]\"\r\n          :text=\"set[2]\"\r\n          :text-hidden=\"true\"\r\n        />\r\n        {{ set[3] }}\r\n        <br>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n"],"sourceRoot":"src/components/tabs/glyph-set-records"},"metadata":{},"sourceType":"module"}