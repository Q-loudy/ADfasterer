{"ast":null,"code":"import { DC } from \"../constants\";\nimport { UpgradeableAutobuyerState } from \"./autobuyer\";\nexport class TickspeedAutobuyerState extends UpgradeableAutobuyerState {\n  get data() {\n    return player.auto.tickspeed;\n  }\n\n  get name() {\n    return `Tickspeed`;\n  }\n\n  get isUnlocked() {\n    if (Pelle.isDisabled(\"tickspeedAutobuyer\")) return false;\n    return this.canBeUpgraded;\n  }\n\n  get canBeUpgraded() {\n    return NormalChallenge(9).isCompleted;\n  }\n\n  get baseInterval() {\n    return Player.defaultStart.auto.tickspeed.interval;\n  }\n\n  get isBought() {\n    return this.data.isBought;\n  }\n\n  get antimatterCost() {\n    return DC.E140;\n  }\n\n  get canBeBought() {\n    return !Pelle.isDoomed;\n  }\n\n  get disabledByContinuum() {\n    return Laitela.continuumActive;\n  }\n\n  get mode() {\n    return this.data.mode;\n  }\n\n  set mode(value) {\n    this.data.mode = value;\n  }\n\n  get hasUnlimitedBulk() {\n    return this.mode === AUTOBUYER_MODE.BUY_MAX;\n  }\n\n  get canUnlockSlowVersion() {\n    return player.records.thisEternity.maxAM.gte(this.antimatterCost);\n  }\n\n  toggleMode() {\n    this.mode = [AUTOBUYER_MODE.BUY_SINGLE, AUTOBUYER_MODE.BUY_MAX].nextSibling(this.mode);\n  }\n\n  get canTick() {\n    return Tickspeed.isAvailableForPurchase && Tickspeed.isAffordable && super.canTick;\n  }\n\n  tick() {\n    super.tick();\n\n    switch (this.mode) {\n      case AUTOBUYER_MODE.BUY_SINGLE:\n        buyTickSpeed();\n        break;\n\n      case AUTOBUYER_MODE.BUY_MAX:\n        buyMaxTickSpeed();\n        break;\n    }\n  }\n\n  purchase() {\n    if (!this.canUnlockSlowVersion) return;\n    this.data.isBought = true;\n  }\n\n  get resetTickOn() {\n    return Perk.antimatterNoReset.canBeApplied ? PRESTIGE_EVENT.ANTIMATTER_GALAXY : PRESTIGE_EVENT.DIMENSION_BOOST;\n  }\n\n  reset() {\n    super.reset();\n    if (EternityMilestone.keepAutobuyers.isReached || PelleUpgrade.keepAutobuyers.canBeApplied) return;\n    this.data.mode = AUTOBUYER_MODE.BUY_SINGLE;\n    this.data.isUnlocked = false;\n    this.data.isBought = false;\n    TabNotification.newAutobuyer.clearTrigger();\n  }\n\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/autobuyers/tickspeed-autobuyer.js"],"names":["DC","UpgradeableAutobuyerState","TickspeedAutobuyerState","data","player","auto","tickspeed","name","isUnlocked","Pelle","isDisabled","canBeUpgraded","NormalChallenge","isCompleted","baseInterval","Player","defaultStart","interval","isBought","antimatterCost","E140","canBeBought","isDoomed","disabledByContinuum","Laitela","continuumActive","mode","value","hasUnlimitedBulk","AUTOBUYER_MODE","BUY_MAX","canUnlockSlowVersion","records","thisEternity","maxAM","gte","toggleMode","BUY_SINGLE","nextSibling","canTick","Tickspeed","isAvailableForPurchase","isAffordable","tick","buyTickSpeed","buyMaxTickSpeed","purchase","resetTickOn","Perk","antimatterNoReset","canBeApplied","PRESTIGE_EVENT","ANTIMATTER_GALAXY","DIMENSION_BOOST","reset","EternityMilestone","keepAutobuyers","isReached","PelleUpgrade","TabNotification","newAutobuyer","clearTrigger"],"mappings":"AAAA,SAASA,EAAT,QAAmB,cAAnB;AAEA,SAASC,yBAAT,QAA0C,aAA1C;AAEA,OAAO,MAAMC,uBAAN,SAAsCD,yBAAtC,CAAgE;AAC7D,MAAJE,IAAI,GAAG;AACT,WAAOC,MAAM,CAACC,IAAP,CAAYC,SAAnB;AACD;;AAEO,MAAJC,IAAI,GAAG;AACT,WAAQ,WAAR;AACD;;AAEa,MAAVC,UAAU,GAAG;AACf,QAAIC,KAAK,CAACC,UAAN,CAAiB,oBAAjB,CAAJ,EAA4C,OAAO,KAAP;AAC5C,WAAO,KAAKC,aAAZ;AACD;;AAEgB,MAAbA,aAAa,GAAG;AAClB,WAAOC,eAAe,CAAC,CAAD,CAAf,CAAmBC,WAA1B;AACD;;AAEe,MAAZC,YAAY,GAAG;AACjB,WAAOC,MAAM,CAACC,YAAP,CAAoBX,IAApB,CAAyBC,SAAzB,CAAmCW,QAA1C;AACD;;AAEW,MAARC,QAAQ,GAAG;AACb,WAAO,KAAKf,IAAL,CAAUe,QAAjB;AACD;;AAEiB,MAAdC,cAAc,GAAG;AACnB,WAAOnB,EAAE,CAACoB,IAAV;AACD;;AAEc,MAAXC,WAAW,GAAG;AAChB,WAAO,CAACZ,KAAK,CAACa,QAAd;AACD;;AAEsB,MAAnBC,mBAAmB,GAAG;AACxB,WAAOC,OAAO,CAACC,eAAf;AACD;;AAEO,MAAJC,IAAI,GAAG;AACT,WAAO,KAAKvB,IAAL,CAAUuB,IAAjB;AACD;;AAEO,MAAJA,IAAI,CAACC,KAAD,EAAQ;AACd,SAAKxB,IAAL,CAAUuB,IAAV,GAAiBC,KAAjB;AACD;;AAEmB,MAAhBC,gBAAgB,GAAG;AACrB,WAAO,KAAKF,IAAL,KAAcG,cAAc,CAACC,OAApC;AACD;;AAEuB,MAApBC,oBAAoB,GAAG;AACzB,WAAO3B,MAAM,CAAC4B,OAAP,CAAeC,YAAf,CAA4BC,KAA5B,CAAkCC,GAAlC,CAAsC,KAAKhB,cAA3C,CAAP;AACD;;AAEDiB,EAAAA,UAAU,GAAG;AACX,SAAKV,IAAL,GAAY,CACVG,cAAc,CAACQ,UADL,EAEVR,cAAc,CAACC,OAFL,EAITQ,WAJS,CAIG,KAAKZ,IAJR,CAAZ;AAKD;;AAEU,MAAPa,OAAO,GAAG;AACZ,WAAOC,SAAS,CAACC,sBAAV,IAAoCD,SAAS,CAACE,YAA9C,IAA8D,MAAMH,OAA3E;AACD;;AAEDI,EAAAA,IAAI,GAAG;AACL,UAAMA,IAAN;;AACA,YAAQ,KAAKjB,IAAb;AACE,WAAKG,cAAc,CAACQ,UAApB;AACEO,QAAAA,YAAY;AACZ;;AACF,WAAKf,cAAc,CAACC,OAApB;AACEe,QAAAA,eAAe;AACf;AANJ;AAQD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,QAAI,CAAC,KAAKf,oBAAV,EAAgC;AAChC,SAAK5B,IAAL,CAAUe,QAAV,GAAqB,IAArB;AACD;;AAEc,MAAX6B,WAAW,GAAG;AAChB,WAAOC,IAAI,CAACC,iBAAL,CAAuBC,YAAvB,GAAsCC,cAAc,CAACC,iBAArD,GAAyED,cAAc,CAACE,eAA/F;AACD;;AAEDC,EAAAA,KAAK,GAAG;AACN,UAAMA,KAAN;AACA,QAAIC,iBAAiB,CAACC,cAAlB,CAAiCC,SAAjC,IAA8CC,YAAY,CAACF,cAAb,CAA4BN,YAA9E,EAA4F;AAC5F,SAAK/C,IAAL,CAAUuB,IAAV,GAAiBG,cAAc,CAACQ,UAAhC;AACA,SAAKlC,IAAL,CAAUK,UAAV,GAAuB,KAAvB;AACA,SAAKL,IAAL,CAAUe,QAAV,GAAqB,KAArB;AACAyC,IAAAA,eAAe,CAACC,YAAhB,CAA6BC,YAA7B;AACD;;AA9FoE","sourcesContent":["import { DC } from \"../constants\";\r\n\r\nimport { UpgradeableAutobuyerState } from \"./autobuyer\";\r\n\r\nexport class TickspeedAutobuyerState extends UpgradeableAutobuyerState {\r\n  get data() {\r\n    return player.auto.tickspeed;\r\n  }\r\n\r\n  get name() {\r\n    return `Tickspeed`;\r\n  }\r\n\r\n  get isUnlocked() {\r\n    if (Pelle.isDisabled(\"tickspeedAutobuyer\")) return false;\r\n    return this.canBeUpgraded;\r\n  }\r\n\r\n  get canBeUpgraded() {\r\n    return NormalChallenge(9).isCompleted;\r\n  }\r\n\r\n  get baseInterval() {\r\n    return Player.defaultStart.auto.tickspeed.interval;\r\n  }\r\n\r\n  get isBought() {\r\n    return this.data.isBought;\r\n  }\r\n\r\n  get antimatterCost() {\r\n    return DC.E140;\r\n  }\r\n\r\n  get canBeBought() {\r\n    return !Pelle.isDoomed;\r\n  }\r\n\r\n  get disabledByContinuum() {\r\n    return Laitela.continuumActive;\r\n  }\r\n\r\n  get mode() {\r\n    return this.data.mode;\r\n  }\r\n\r\n  set mode(value) {\r\n    this.data.mode = value;\r\n  }\r\n\r\n  get hasUnlimitedBulk() {\r\n    return this.mode === AUTOBUYER_MODE.BUY_MAX;\r\n  }\r\n\r\n  get canUnlockSlowVersion() {\r\n    return player.records.thisEternity.maxAM.gte(this.antimatterCost);\r\n  }\r\n\r\n  toggleMode() {\r\n    this.mode = [\r\n      AUTOBUYER_MODE.BUY_SINGLE,\r\n      AUTOBUYER_MODE.BUY_MAX\r\n    ]\r\n      .nextSibling(this.mode);\r\n  }\r\n\r\n  get canTick() {\r\n    return Tickspeed.isAvailableForPurchase && Tickspeed.isAffordable && super.canTick;\r\n  }\r\n\r\n  tick() {\r\n    super.tick();\r\n    switch (this.mode) {\r\n      case AUTOBUYER_MODE.BUY_SINGLE:\r\n        buyTickSpeed();\r\n        break;\r\n      case AUTOBUYER_MODE.BUY_MAX:\r\n        buyMaxTickSpeed();\r\n        break;\r\n    }\r\n  }\r\n\r\n  purchase() {\r\n    if (!this.canUnlockSlowVersion) return;\r\n    this.data.isBought = true;\r\n  }\r\n\r\n  get resetTickOn() {\r\n    return Perk.antimatterNoReset.canBeApplied ? PRESTIGE_EVENT.ANTIMATTER_GALAXY : PRESTIGE_EVENT.DIMENSION_BOOST;\r\n  }\r\n\r\n  reset() {\r\n    super.reset();\r\n    if (EternityMilestone.keepAutobuyers.isReached || PelleUpgrade.keepAutobuyers.canBeApplied) return;\r\n    this.data.mode = AUTOBUYER_MODE.BUY_SINGLE;\r\n    this.data.isUnlocked = false;\r\n    this.data.isBought = false;\r\n    TabNotification.newAutobuyer.clearTrigger();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}