{"ast":null,"code":"import NormalAchievementRow from \"./NormalAchievementRow\";\nimport PrimaryToggleButton from \"@/components/PrimaryToggleButton\";\nimport SwapAchievementImagesButton from \"./SwapAchievementImagesButton\";\nexport default {\n  name: \"NormalAchievementsTab\",\n  components: {\n    SwapAchievementImagesButton,\n    NormalAchievementRow,\n    PrimaryToggleButton\n  },\n\n  data() {\n    return {\n      achievementPower: 0,\n      achTPEffect: 0,\n      achCountdown: 0,\n      totalCountdown: 0,\n      missingAchievements: 0,\n      showAutoAchieve: false,\n      isAutoAchieveActive: false,\n      hideCompletedRows: false,\n      achMultBreak: false,\n      achMultToIDS: false,\n      achMultToTDS: false,\n      achMultToBH: false,\n      achMultToTP: false,\n      achMultToTT: false,\n      renderedRowIndices: []\n    };\n  },\n\n  computed: {\n    isDoomed: () => Pelle.isDoomed,\n    rows: () => Achievements.allRows,\n\n    renderedRows() {\n      return this.rows.filter((_, i) => this.renderedRowIndices.includes(i));\n    },\n\n    boostText() {\n      const achievementPower = formatX(this.achievementPower, 2, 3);\n      const achTPEffect = formatX(this.achTPEffect, 2, 3);\n      const boostList = [];\n      const dimMultList = [];\n      dimMultList.push(\"Antimatter\");\n      if (this.achMultToIDS) dimMultList.push(\"Infinity\");\n      if (this.achMultToTDS) dimMultList.push(\"Time\");\n      boostList.push(`${makeEnumeration(dimMultList)} Dimensions: ${achievementPower}`);\n      if (this.achMultToTP) boostList.push(`Tachyon Particles: ${achTPEffect}`);\n      if (this.achMultToBH) boostList.push(`Black Hole Power: ${achievementPower}`);\n      if (this.achMultToTT) boostList.push(`Time Theorem production: ${achievementPower}`);\n      return `${boostList.join(\"<br>\")}`;\n    }\n\n  },\n  watch: {\n    isAutoAchieveActive(newValue) {\n      player.reality.autoAchieve = newValue;\n    },\n\n    hideCompletedRows(newValue) {\n      player.options.hideCompletedAchievementRows = newValue;\n      this.startRowRendering();\n    }\n\n  },\n\n  created() {\n    this.startRowRendering();\n  },\n\n  beforeDestroy() {\n    cancelAnimationFrame(this.renderAnimationId);\n  },\n\n  methods: {\n    update() {\n      const gameSpeedupFactor = getGameSpeedupFactor();\n      this.achievementPower = Achievements.power;\n      this.achTPEffect = RealityUpgrade(8).config.effect();\n      this.achCountdown = Achievements.timeToNextAutoAchieve / gameSpeedupFactor;\n      this.totalCountdown = ((Achievements.preReality.countWhere(a => !a.isUnlocked) - 1) * Achievements.period + Achievements.timeToNextAutoAchieve) / gameSpeedupFactor;\n      this.missingAchievements = Achievements.preReality.countWhere(a => !a.isUnlocked);\n      this.showAutoAchieve = PlayerProgress.realityUnlocked() && !Perk.achievementGroup5.isBought;\n      this.isAutoAchieveActive = player.reality.autoAchieve;\n      this.hideCompletedRows = player.options.hideCompletedAchievementRows;\n      this.achMultBreak = BreakInfinityUpgrade.achievementMult.canBeApplied;\n      this.achMultToIDS = Achievement(75).isUnlocked;\n      this.achMultToTDS = EternityUpgrade.tdMultAchs.isBought;\n      this.achMultToTP = RealityUpgrade(8).isBought;\n      this.achMultToBH = VUnlocks.achievementBH.canBeApplied;\n      this.achMultToTT = Ra.unlocks.achievementTTMult.canBeApplied;\n    },\n\n    startRowRendering() {\n      const unlockedRows = [];\n      const lockedRows = [];\n\n      for (let i = 0; i < this.rows.length; i++) {\n        const targetArray = this.rows[i].every(a => a.isUnlocked) ? unlockedRows : lockedRows;\n        targetArray.push(i);\n      }\n\n      const renderedLockedRows = lockedRows.filter(row => this.renderedRowIndices.includes(row));\n      const nonRenderedLockedRows = lockedRows.filter(row => !this.renderedRowIndices.includes(row));\n      let rowsToRender;\n\n      if (player.options.hideCompletedAchievementRows) {\n        this.renderedRowIndices = unlockedRows.concat(renderedLockedRows);\n        rowsToRender = nonRenderedLockedRows;\n      } else {\n        this.renderedRowIndices = renderedLockedRows;\n        rowsToRender = unlockedRows.concat(nonRenderedLockedRows);\n      }\n\n      const stepThroughRendering = () => {\n        const ROWS_PER_FRAME = 2;\n\n        for (let i = 0; i < ROWS_PER_FRAME; i++) {\n          if (rowsToRender.length === 0) {\n            return;\n          }\n\n          this.renderedRowIndices.push(rowsToRender.shift());\n        }\n\n        this.renderAnimationId = requestAnimationFrame(stepThroughRendering);\n      };\n\n      stepThroughRendering();\n    },\n\n    isRendered(row) {\n      return this.renderedRowIndices.includes(row);\n    },\n\n    isObscured(row) {\n      return this.isDoomed ? false : row === 17;\n    },\n\n    timeDisplay,\n    timeDisplayNoDecimals\n  }\n};","map":{"version":3,"sources":["NormalAchievementsTab.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport NormalAchievementRow from \"./NormalAchievementRow\";\r\nimport PrimaryToggleButton from \"@/components/PrimaryToggleButton\";\r\nimport SwapAchievementImagesButton from \"./SwapAchievementImagesButton\";\r\n\r\nexport default {\r\n  name: \"NormalAchievementsTab\",\r\n  components: {\r\n    SwapAchievementImagesButton,\r\n    NormalAchievementRow,\r\n    PrimaryToggleButton\r\n  },\r\n  data() {\r\n    return {\r\n      achievementPower: 0,\r\n      achTPEffect: 0,\r\n      achCountdown: 0,\r\n      totalCountdown: 0,\r\n      missingAchievements: 0,\r\n      showAutoAchieve: false,\r\n      isAutoAchieveActive: false,\r\n      hideCompletedRows: false,\r\n      achMultBreak: false,\r\n      achMultToIDS: false,\r\n      achMultToTDS: false,\r\n      achMultToBH: false,\r\n      achMultToTP: false,\r\n      achMultToTT: false,\r\n      renderedRowIndices: []\r\n    };\r\n  },\r\n  computed: {\r\n    isDoomed: () => Pelle.isDoomed,\r\n    rows: () => Achievements.allRows,\r\n    renderedRows() {\r\n      return this.rows.filter((_, i) => this.renderedRowIndices.includes(i));\r\n    },\r\n    boostText() {\r\n      const achievementPower = formatX(this.achievementPower, 2, 3);\r\n      const achTPEffect = formatX(this.achTPEffect, 2, 3);\r\n\r\n      const boostList = [];\r\n\r\n      const dimMultList = [];\r\n      dimMultList.push(\"Antimatter\");\r\n      if (this.achMultToIDS) dimMultList.push(\"Infinity\");\r\n      if (this.achMultToTDS) dimMultList.push(\"Time\");\r\n      boostList.push(`${makeEnumeration(dimMultList)} Dimensions: ${achievementPower}`);\r\n\r\n      if (this.achMultToTP) boostList.push(`Tachyon Particles: ${achTPEffect}`);\r\n      if (this.achMultToBH) boostList.push(`Black Hole Power: ${achievementPower}`);\r\n      if (this.achMultToTT) boostList.push(`Time Theorem production: ${achievementPower}`);\r\n      return `${boostList.join(\"<br>\")}`;\r\n    },\r\n  },\r\n  watch: {\r\n    isAutoAchieveActive(newValue) {\r\n      player.reality.autoAchieve = newValue;\r\n    },\r\n    hideCompletedRows(newValue) {\r\n      player.options.hideCompletedAchievementRows = newValue;\r\n      this.startRowRendering();\r\n    }\r\n  },\r\n  created() {\r\n    this.startRowRendering();\r\n  },\r\n  beforeDestroy() {\r\n    cancelAnimationFrame(this.renderAnimationId);\r\n  },\r\n  methods: {\r\n    update() {\r\n      const gameSpeedupFactor = getGameSpeedupFactor();\r\n      this.achievementPower = Achievements.power;\r\n      this.achTPEffect = RealityUpgrade(8).config.effect();\r\n      this.achCountdown = Achievements.timeToNextAutoAchieve / gameSpeedupFactor;\r\n      this.totalCountdown = ((Achievements.preReality.countWhere(a => !a.isUnlocked) - 1) * Achievements.period +\r\n        Achievements.timeToNextAutoAchieve) / gameSpeedupFactor;\r\n      this.missingAchievements = Achievements.preReality.countWhere(a => !a.isUnlocked);\r\n      this.showAutoAchieve = PlayerProgress.realityUnlocked() && !Perk.achievementGroup5.isBought;\r\n      this.isAutoAchieveActive = player.reality.autoAchieve;\r\n      this.hideCompletedRows = player.options.hideCompletedAchievementRows;\r\n      this.achMultBreak = BreakInfinityUpgrade.achievementMult.canBeApplied;\r\n      this.achMultToIDS = Achievement(75).isUnlocked;\r\n      this.achMultToTDS = EternityUpgrade.tdMultAchs.isBought;\r\n      this.achMultToTP = RealityUpgrade(8).isBought;\r\n      this.achMultToBH = VUnlocks.achievementBH.canBeApplied;\r\n      this.achMultToTT = Ra.unlocks.achievementTTMult.canBeApplied;\r\n    },\r\n    startRowRendering() {\r\n      const unlockedRows = [];\r\n      const lockedRows = [];\r\n      for (let i = 0; i < this.rows.length; i++) {\r\n        const targetArray = this.rows[i].every(a => a.isUnlocked) ? unlockedRows : lockedRows;\r\n        targetArray.push(i);\r\n      }\r\n      const renderedLockedRows = lockedRows.filter(row => this.renderedRowIndices.includes(row));\r\n      const nonRenderedLockedRows = lockedRows.filter(row => !this.renderedRowIndices.includes(row));\r\n      let rowsToRender;\r\n      if (player.options.hideCompletedAchievementRows) {\r\n        this.renderedRowIndices = unlockedRows.concat(renderedLockedRows);\r\n        rowsToRender = nonRenderedLockedRows;\r\n      } else {\r\n        this.renderedRowIndices = renderedLockedRows;\r\n        rowsToRender = unlockedRows.concat(nonRenderedLockedRows);\r\n      }\r\n      const stepThroughRendering = () => {\r\n        const ROWS_PER_FRAME = 2;\r\n        for (let i = 0; i < ROWS_PER_FRAME; i++) {\r\n          if (rowsToRender.length === 0) {\r\n            return;\r\n          }\r\n          this.renderedRowIndices.push(rowsToRender.shift());\r\n        }\r\n        this.renderAnimationId = requestAnimationFrame(stepThroughRendering);\r\n      };\r\n      stepThroughRendering();\r\n    },\r\n    isRendered(row) {\r\n      return this.renderedRowIndices.includes(row);\r\n    },\r\n    isObscured(row) {\r\n      return this.isDoomed ? false : row === 17;\r\n    },\r\n    timeDisplay,\r\n    timeDisplayNoDecimals,\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-achievements-tab\">\r\n    <div class=\"c-subtab-option-container\">\r\n      <PrimaryToggleButton\r\n        v-model=\"hideCompletedRows\"\r\n        class=\"o-primary-btn--subtab-option\"\r\n        label=\"Hide completed rows:\"\r\n      />\r\n      <PrimaryToggleButton\r\n        v-if=\"showAutoAchieve\"\r\n        v-model=\"isAutoAchieveActive\"\r\n        class=\"o-primary-btn--subtab-option\"\r\n        label=\"Auto Achievements:\"\r\n      />\r\n    </div>\r\n    <div class=\"c-achievements-tab__header c-achievements-tab__header--multipliers\">\r\n      <span v-if=\"isDoomed\">\r\n        All Achievement multipliers have been disabled<SwapAchievementImagesButton />\r\n      </span>\r\n      <span v-else>\r\n        Achievements provide a multiplier to<SwapAchievementImagesButton />\r\n        <div v-html=\"boostText\" />\r\n      </span>\r\n    </div>\r\n    <div class=\"c-achievements-tab__header\">\r\n      Achievements with a <i class=\"fas fa-star\" /> icon also give an additional reward.\r\n    </div>\r\n    <div\r\n      v-if=\"showAutoAchieve\"\r\n      class=\"c-achievements-tab__header\"\r\n    >\r\n      <div v-if=\"achCountdown > 0\">\r\n        Automatically gain the next missing Achievement in\r\n        {{ timeDisplayNoDecimals(achCountdown) }}<span v-if=\"!isAutoAchieveActive\"> once Auto is turned on</span>.\r\n        (left-to-right, top-to-bottom)\r\n      </div>\r\n      <div v-else-if=\"missingAchievements !== 0\">\r\n        Automatically gain the next missing Achievement as soon as you enable Auto Achievements.\r\n        (left-to-right, top-to-bottom)\r\n      </div>\r\n      <div v-if=\"totalCountdown > 0\">\r\n        You will regain all remaining achievements after {{ timeDisplayNoDecimals(totalCountdown) }} if Auto\r\n        Achievement <span v-if=\"isAutoAchieveActive\">stays enabled</span><span v-else>is turned on</span>.\r\n      </div>\r\n      <br>\r\n    </div>\r\n    <div class=\"l-achievement-grid\">\r\n      <NormalAchievementRow\r\n        v-for=\"(row, i) in renderedRows\"\r\n        :key=\"i\"\r\n        :row=\"row\"\r\n        :is-obscured=\"isObscured(i)\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n"],"sourceRoot":"src/components/tabs/normal-achievements"},"metadata":{},"sourceType":"module"}