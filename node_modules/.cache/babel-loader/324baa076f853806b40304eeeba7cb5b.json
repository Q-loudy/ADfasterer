{"ast":null,"code":"import { GameMechanicState } from \"./game-mechanic\";\n/**\r\n * @abstract\r\n */\n\nexport class BitUpgradeState extends GameMechanicState {\n  constructor(config) {\n    super(config);\n    if (this.id < 0 || this.id > 31) throw new Error(`Id ${this.id} out of bit range`);\n  }\n  /**\r\n   * @abstract\r\n   */\n\n\n  get bits() {\n    throw new NotImplementedError();\n  }\n\n  set bits(value) {\n    throw new NotImplementedError();\n  }\n\n  get isUnlocked() {\n    return Boolean(this.bits & 1 << this.id);\n  }\n\n  get canBeApplied() {\n    return this.isUnlocked && this.isEffectActive;\n  }\n\n  get canBeUnlocked() {\n    return !this.isUnlocked;\n  } // eslint-disable-next-line no-empty-function\n\n\n  onUnlock() {}\n\n  unlock() {\n    if (!this.canBeUnlocked) return;\n    this.bits |= 1 << this.id;\n    this.onUnlock();\n  }\n\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/game-mechanics/bit-upgrade-state.js"],"names":["GameMechanicState","BitUpgradeState","constructor","config","id","Error","bits","NotImplementedError","value","isUnlocked","Boolean","canBeApplied","isEffectActive","canBeUnlocked","onUnlock","unlock"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,iBAAlC;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,eAAN,SAA8BD,iBAA9B,CAAgD;AACrDE,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,UAAMA,MAAN;AACA,QAAI,KAAKC,EAAL,GAAU,CAAV,IAAe,KAAKA,EAAL,GAAU,EAA7B,EAAiC,MAAM,IAAIC,KAAJ,CAAW,MAAK,KAAKD,EAAG,mBAAxB,CAAN;AAClC;AAED;AACF;AACA;;;AACU,MAAJE,IAAI,GAAG;AAAE,UAAM,IAAIC,mBAAJ,EAAN;AAAkC;;AACvC,MAAJD,IAAI,CAACE,KAAD,EAAQ;AAAE,UAAM,IAAID,mBAAJ,EAAN;AAAkC;;AAEtC,MAAVE,UAAU,GAAG;AACf,WAAOC,OAAO,CAAC,KAAKJ,IAAL,GAAa,KAAK,KAAKF,EAAxB,CAAd;AACD;;AAEe,MAAZO,YAAY,GAAG;AACjB,WAAO,KAAKF,UAAL,IAAmB,KAAKG,cAA/B;AACD;;AAEgB,MAAbC,aAAa,GAAG;AAClB,WAAO,CAAC,KAAKJ,UAAb;AACD,GAtBoD,CAwBrD;;;AACAK,EAAAA,QAAQ,GAAG,CAAG;;AAEdC,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKF,aAAV,EAAyB;AACzB,SAAKP,IAAL,IAAc,KAAK,KAAKF,EAAxB;AACA,SAAKU,QAAL;AACD;;AA/BoD","sourcesContent":["import { GameMechanicState } from \"./game-mechanic\";\r\n\r\n/**\r\n * @abstract\r\n */\r\nexport class BitUpgradeState extends GameMechanicState {\r\n  constructor(config) {\r\n    super(config);\r\n    if (this.id < 0 || this.id > 31) throw new Error(`Id ${this.id} out of bit range`);\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   */\r\n  get bits() { throw new NotImplementedError(); }\r\n  set bits(value) { throw new NotImplementedError(); }\r\n\r\n  get isUnlocked() {\r\n    return Boolean(this.bits & (1 << this.id));\r\n  }\r\n\r\n  get canBeApplied() {\r\n    return this.isUnlocked && this.isEffectActive;\r\n  }\r\n\r\n  get canBeUnlocked() {\r\n    return !this.isUnlocked;\r\n  }\r\n\r\n  // eslint-disable-next-line no-empty-function\r\n  onUnlock() { }\r\n\r\n  unlock() {\r\n    if (!this.canBeUnlocked) return;\r\n    this.bits |= (1 << this.id);\r\n    this.onUnlock();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}