{"ast":null,"code":"import ModalWrapperChoice from \"@/components/modals/ModalWrapperChoice\";\nexport default {\n  name: \"RefineGlyphModal\",\n  components: {\n    ModalWrapperChoice\n  },\n  props: {\n    idx: {\n      type: Number,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      resourceAmount: 0,\n      resourceUnlocked: false,\n      gain: 0,\n      after: 0,\n      cap: 0,\n      confirmedRefine: false\n    };\n  },\n\n  computed: {\n    glyph() {\n      return Glyphs.findByInventoryIndex(this.idx);\n    },\n\n    resource() {\n      return GlyphSacrificeHandler.glyphAlchemyResource(this.glyph);\n    },\n\n    resourceName() {\n      return this.resource.name;\n    }\n\n  },\n  methods: {\n    update() {\n      const resource = this.resource;\n      this.resourceAmount = resource.amount;\n      this.resourceUnlocked = resource.isUnlocked;\n      this.gain = GlyphSacrificeHandler.glyphRefinementGain(this.glyph);\n      this.cap = GlyphSacrificeHandler.glyphEffectiveCap(this.glyph);\n      this.after = this.resourceAmount + this.gain;\n      const newGlyph = Glyphs.findByInventoryIndex(this.idx);\n\n      if (this.glyph !== newGlyph && !this.confirmedRefine) {\n        // Why is confirmedRefine here: refer to SacrificeGlyphModal.vue\n        this.emitClose();\n        Modal.message.show(\"The selected Glyph changed position or was otherwise changed!\");\n      }\n    },\n\n    handleYesClick() {\n      this.confirmedRefine = true;\n      GlyphSacrificeHandler.refineGlyph(this.glyph);\n    }\n\n  }\n};","map":{"version":3,"sources":["RefineGlyphModal.vue"],"names":[],"mappings":"AACA,OAAA,kBAAA,MAAA,wCAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,kBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA;AADA,GAFA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,GAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GALA;;AAWA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,cAAA,EAAA,CADA;AAEA,MAAA,gBAAA,EAAA,KAFA;AAGA,MAAA,IAAA,EAAA,CAHA;AAIA,MAAA,KAAA,EAAA,CAJA;AAKA,MAAA,GAAA,EAAA,CALA;AAMA,MAAA,eAAA,EAAA;AANA,KAAA;AAQA,GApBA;;AAqBA,EAAA,QAAA,EAAA;AACA,IAAA,KAAA,GAAA;AACA,aAAA,MAAA,CAAA,oBAAA,CAAA,KAAA,GAAA,CAAA;AACA,KAHA;;AAIA,IAAA,QAAA,GAAA;AACA,aAAA,qBAAA,CAAA,oBAAA,CAAA,KAAA,KAAA,CAAA;AACA,KANA;;AAOA,IAAA,YAAA,GAAA;AACA,aAAA,KAAA,QAAA,CAAA,IAAA;AACA;;AATA,GArBA;AAgCA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,YAAA,QAAA,GAAA,KAAA,QAAA;AACA,WAAA,cAAA,GAAA,QAAA,CAAA,MAAA;AACA,WAAA,gBAAA,GAAA,QAAA,CAAA,UAAA;AACA,WAAA,IAAA,GAAA,qBAAA,CAAA,mBAAA,CAAA,KAAA,KAAA,CAAA;AACA,WAAA,GAAA,GAAA,qBAAA,CAAA,iBAAA,CAAA,KAAA,KAAA,CAAA;AAEA,WAAA,KAAA,GAAA,KAAA,cAAA,GAAA,KAAA,IAAA;AAEA,YAAA,QAAA,GAAA,MAAA,CAAA,oBAAA,CAAA,KAAA,GAAA,CAAA;;AACA,UAAA,KAAA,KAAA,KAAA,QAAA,IAAA,CAAA,KAAA,eAAA,EAAA;AAEA;AAEA,aAAA,SAAA;AACA,QAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA,+DAAA;AACA;AACA,KAlBA;;AAmBA,IAAA,cAAA,GAAA;AACA,WAAA,eAAA,GAAA,IAAA;AACA,MAAA,qBAAA,CAAA,WAAA,CAAA,KAAA,KAAA;AACA;;AAtBA;AAhCA,CAAA","sourcesContent":["<script>\r\nimport ModalWrapperChoice from \"@/components/modals/ModalWrapperChoice\";\r\n\r\nexport default {\r\n  name: \"RefineGlyphModal\",\r\n  components: {\r\n    ModalWrapperChoice\r\n  },\r\n  props: {\r\n    idx: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      resourceAmount: 0,\r\n      resourceUnlocked: false,\r\n      gain: 0,\r\n      after: 0,\r\n      cap: 0,\r\n      confirmedRefine: false\r\n    };\r\n  },\r\n  computed: {\r\n    glyph() {\r\n      return Glyphs.findByInventoryIndex(this.idx);\r\n    },\r\n    resource() {\r\n      return GlyphSacrificeHandler.glyphAlchemyResource(this.glyph);\r\n    },\r\n    resourceName() {\r\n      return this.resource.name;\r\n    },\r\n  },\r\n  methods: {\r\n    update() {\r\n      const resource = this.resource;\r\n      this.resourceAmount = resource.amount;\r\n      this.resourceUnlocked = resource.isUnlocked;\r\n      this.gain = GlyphSacrificeHandler.glyphRefinementGain(this.glyph);\r\n      this.cap = GlyphSacrificeHandler.glyphEffectiveCap(this.glyph);\r\n\r\n      this.after = this.resourceAmount + this.gain;\r\n\r\n      const newGlyph = Glyphs.findByInventoryIndex(this.idx);\r\n      if (this.glyph !== newGlyph && !this.confirmedRefine) {\r\n\r\n        // Why is confirmedRefine here: refer to SacrificeGlyphModal.vue\r\n\r\n        this.emitClose();\r\n        Modal.message.show(\"The selected Glyph changed position or was otherwise changed!\");\r\n      }\r\n    },\r\n    handleYesClick() {\r\n      this.confirmedRefine = true;\r\n      GlyphSacrificeHandler.refineGlyph(this.glyph);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapperChoice\r\n    option=\"glyphRefine\"\r\n    @confirm=\"handleYesClick\"\r\n  >\r\n    <template #header>\r\n      You are about to refine a Glyph\r\n    </template>\r\n    <div\r\n      v-if=\"resourceUnlocked\"\r\n      class=\"c-modal-message__text\"\r\n    >\r\n      Refining a Glyph will remove the Glyph from your inventory, and in return,\r\n      you will increase your {{ resourceName }} Alchemy resource from\r\n      {{ format(resourceAmount, 2, 2) }} to {{ format(after, 2, 2) }}.\r\n      This Glyph can raise your {{ resourceName }} resource to at most {{ format(cap, 2, 2) }}.\r\n    </div>\r\n    <div\r\n      v-else\r\n      class=\"c-modal-message__text\"\r\n    >\r\n      You cannot gain any {{ resourceName }} alchemy resource because you have not\r\n      unlocked this Glyph's resource yet. You can still refine it anyway, but nothing\r\n      will happen. Consider sacrificing the Glyph instead.\r\n    </div>\r\n  </ModalWrapperChoice>\r\n</template>\r\n"],"sourceRoot":"src/components/modals/glyph-management"},"metadata":{},"sourceType":"module"}