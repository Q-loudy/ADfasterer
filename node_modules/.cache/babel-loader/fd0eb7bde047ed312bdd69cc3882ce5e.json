{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nexport default {\n  name: \"BigCrunchButton\",\n\n  data() {\n    return {\n      isVisible: false,\n      gainedIP: new Decimal(0),\n      currentIPRate: new Decimal(0),\n      peakIPRate: new Decimal(0),\n      peakIPRateVal: new Decimal(0),\n      currentIP: new Decimal(0),\n      tesseractAffordable: false,\n      canCrunch: false,\n      infinityGoal: new Decimal(0),\n      inAntimatterChallenge: false,\n      hover: false,\n      headerTextColored: true,\n      creditsClosed: false,\n      showIPRate: false\n    };\n  },\n\n  computed: {\n    buttonClassObject() {\n      return {\n        \"o-infinity-button--unavailable\": !this.canCrunch,\n        \"o-pelle-disabled-pointer\": this.creditsClosed\n      };\n    },\n\n    // Show IP/min below this threshold, color the IP number above it\n    rateThreshold: () => 5e11,\n\n    amountStyle() {\n      if (!this.headerTextColored || this.currentIP.lt(this.rateThreshold)) return {\n        \"transition-duration\": \"0s\"\n      };\n      if (this.hover) return {\n        color: \"black\",\n        \"transition-duration\": \"0.2s\"\n      }; // Dynamically generate red-text-green based on the CSS entry for text color, returning a raw 6-digit hex color\n      // code. stepRGB is an array specifying the three RGB codes, which are then interpolated between in order to\n      // generate the final color; only ratios between 0.9-1.1 give a color gradient\n\n      const textHexCode = getComputedStyle(document.body).getPropertyValue(\"--color-text\").split(\"#\")[1];\n      const stepRGB = [[255, 0, 0], [parseInt(textHexCode.substring(0, 2), 16), parseInt(textHexCode.substring(2, 4), 16), parseInt(textHexCode.substring(4), 16)], [0, 255, 0]];\n      const ratio = this.gainedIP.log10() / this.currentIP.log10();\n\n      const interFn = index => {\n        if (ratio < 0.9) return stepRGB[0][index];\n\n        if (ratio < 1) {\n          const r = 10 * (ratio - 0.9);\n          return Math.round(stepRGB[0][index] * (1 - r) + stepRGB[1][index] * r);\n        }\n\n        if (ratio < 1.1) {\n          const r = 10 * (ratio - 1);\n          return Math.round(stepRGB[1][index] * (1 - r) + stepRGB[2][index] * r);\n        }\n\n        return stepRGB[2][index];\n      };\n\n      const rgb = [interFn(0), interFn(1), interFn(2)];\n      return {\n        color: `rgb(${rgb.join(\",\")})`,\n        \"transition-duration\": \"0.2s\"\n      };\n    }\n\n  },\n  methods: {\n    update() {\n      this.isVisible = player.break;\n      this.tesseractAffordable = Tesseracts.canBuyTesseract;\n      if (!this.isVisible) return;\n      this.canCrunch = Player.canCrunch;\n      this.infinityGoal.copyFrom(Player.infinityGoal);\n      this.inAntimatterChallenge = Player.isInAntimatterChallenge;\n      this.headerTextColored = player.options.headerTextColored;\n      this.creditsClosed = GameEnd.creditsEverClosed;\n      const gainedIP = gainedInfinityPoints();\n      this.currentIP.copyFrom(Currency.infinityPoints);\n      this.gainedIP.copyFrom(gainedIP);\n      this.currentIPRate.copyFrom(gainedIP.dividedBy(Math.clampMin(0.0005, Time.thisInfinityRealTime.totalMinutes)));\n      this.peakIPRate.copyFrom(player.records.thisInfinity.bestIPmin);\n      this.peakIPRateVal.copyFrom(player.records.thisInfinity.bestIPminVal);\n      this.showIPRate = this.peakIPRate.lte(this.rateThreshold);\n    },\n\n    switchToInfinity() {\n      Tab.dimensions.infinity.show(true);\n    },\n\n    crunch() {\n      if (!Player.canCrunch) return;\n      manualBigCrunchResetRequest();\n    }\n\n  }\n};","map":{"version":3,"sources":["BigCrunchButton.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nexport default {\r\n  name: \"BigCrunchButton\",\r\n  data() {\r\n    return {\r\n      isVisible: false,\r\n      gainedIP: new Decimal(0),\r\n      currentIPRate: new Decimal(0),\r\n      peakIPRate: new Decimal(0),\r\n      peakIPRateVal: new Decimal(0),\r\n      currentIP: new Decimal(0),\r\n      tesseractAffordable: false,\r\n      canCrunch: false,\r\n      infinityGoal: new Decimal(0),\r\n      inAntimatterChallenge: false,\r\n      hover: false,\r\n      headerTextColored: true,\r\n      creditsClosed: false,\r\n      showIPRate: false,\r\n    };\r\n  },\r\n  computed: {\r\n    buttonClassObject() {\r\n      return {\r\n        \"o-infinity-button--unavailable\": !this.canCrunch,\r\n        \"o-pelle-disabled-pointer\": this.creditsClosed\r\n      };\r\n    },\r\n    // Show IP/min below this threshold, color the IP number above it\r\n    rateThreshold: () => 5e11,\r\n    amountStyle() {\r\n      if (!this.headerTextColored || this.currentIP.lt(this.rateThreshold)) return {\r\n        \"transition-duration\": \"0s\"\r\n      };\r\n      if (this.hover) return {\r\n        color: \"black\",\r\n        \"transition-duration\": \"0.2s\"\r\n      };\r\n\r\n      // Dynamically generate red-text-green based on the CSS entry for text color, returning a raw 6-digit hex color\r\n      // code. stepRGB is an array specifying the three RGB codes, which are then interpolated between in order to\r\n      // generate the final color; only ratios between 0.9-1.1 give a color gradient\r\n      const textHexCode = getComputedStyle(document.body).getPropertyValue(\"--color-text\").split(\"#\")[1];\r\n      const stepRGB = [\r\n        [255, 0, 0],\r\n        [\r\n          parseInt(textHexCode.substring(0, 2), 16),\r\n          parseInt(textHexCode.substring(2, 4), 16),\r\n          parseInt(textHexCode.substring(4), 16)\r\n        ],\r\n        [0, 255, 0]\r\n      ];\r\n      const ratio = this.gainedIP.log10() / this.currentIP.log10();\r\n      const interFn = index => {\r\n        if (ratio < 0.9) return stepRGB[0][index];\r\n        if (ratio < 1) {\r\n          const r = 10 * (ratio - 0.9);\r\n          return Math.round(stepRGB[0][index] * (1 - r) + stepRGB[1][index] * r);\r\n        }\r\n        if (ratio < 1.1) {\r\n          const r = 10 * (ratio - 1);\r\n          return Math.round(stepRGB[1][index] * (1 - r) + stepRGB[2][index] * r);\r\n        }\r\n        return stepRGB[2][index];\r\n      };\r\n      const rgb = [interFn(0), interFn(1), interFn(2)];\r\n      return {\r\n        color: `rgb(${rgb.join(\",\")})`,\r\n        \"transition-duration\": \"0.2s\"\r\n      };\r\n    },\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isVisible = player.break;\r\n      this.tesseractAffordable = Tesseracts.canBuyTesseract;\r\n      if (!this.isVisible) return;\r\n      this.canCrunch = Player.canCrunch;\r\n      this.infinityGoal.copyFrom(Player.infinityGoal);\r\n      this.inAntimatterChallenge = Player.isInAntimatterChallenge;\r\n      this.headerTextColored = player.options.headerTextColored;\r\n      this.creditsClosed = GameEnd.creditsEverClosed;\r\n\r\n      const gainedIP = gainedInfinityPoints();\r\n      this.currentIP.copyFrom(Currency.infinityPoints);\r\n      this.gainedIP.copyFrom(gainedIP);\r\n      this.currentIPRate.copyFrom(gainedIP.dividedBy(Math.clampMin(0.0005, Time.thisInfinityRealTime.totalMinutes)));\r\n      this.peakIPRate.copyFrom(player.records.thisInfinity.bestIPmin);\r\n      this.peakIPRateVal.copyFrom(player.records.thisInfinity.bestIPminVal);\r\n      this.showIPRate = this.peakIPRate.lte(this.rateThreshold);\r\n    },\r\n    switchToInfinity() {\r\n      Tab.dimensions.infinity.show(true);\r\n    },\r\n    crunch() {\r\n      if (!Player.canCrunch) return;\r\n      manualBigCrunchResetRequest();\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <button\r\n    v-if=\"isVisible && !tesseractAffordable\"\r\n    :class=\"buttonClassObject\"\r\n    class=\"o-prestige-button o-infinity-button\"\r\n    @click=\"crunch\"\r\n    @mouseover=\"hover = true\"\r\n    @mouseleave=\"hover = false\"\r\n  >\r\n    <!-- Cannot Crunch -->\r\n    <template v-if=\"!canCrunch\">\r\n      Reach {{ format(infinityGoal, 2, 2) }}\r\n      <br>\r\n      antimatter\r\n    </template>\r\n\r\n    <!-- Can Crunch in challenge -->\r\n    <template v-else-if=\"inAntimatterChallenge\">\r\n      Big Crunch to\r\n      <br>\r\n      complete the challenge\r\n    </template>\r\n\r\n    <!-- Can Crunch -->\r\n    <template v-else>\r\n      <div v-if=\"!showIPRate\" />\r\n      <b>\r\n        Big Crunch for\r\n        <span :style=\"amountStyle\">{{ format(gainedIP, 2) }}</span>\r\n        <span v-if=\"showIPRate\"> IP</span>\r\n        <span v-else> Infinity {{ pluralize(\"Point\", gainedIP) }}</span>\r\n      </b>\r\n      <template v-if=\"showIPRate\">\r\n        <br>\r\n        Current: {{ format(currentIPRate, 2) }} IP/min\r\n        <br>\r\n        Peak: {{ format(peakIPRate, 2) }} IP/min\r\n        <br>\r\n        at {{ format(peakIPRateVal, 2) }} IP\r\n      </template>\r\n      <div v-else />\r\n    </template>\r\n  </button>\r\n\r\n  <button\r\n    v-else-if=\"tesseractAffordable\"\r\n    class=\"o-prestige-button c-game-header__tesseract-available\"\r\n    :class=\"{ 'o-pelle-disabled-pointer': creditsClosed }\"\r\n    @click=\"switchToInfinity\"\r\n  >\r\n    <b>\r\n      You have enough Infinity Points to buy a Tesseract\r\n    </b>\r\n  </button>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/ui-modes/prestige-header"},"metadata":{},"sourceType":"module"}