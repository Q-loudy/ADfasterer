{"ast":null,"code":"export const speedrunMilestones = [{\n  id: 1,\n  key: \"firstBoost\",\n  name: \"First Dimboost\",\n  description: \"Get your first Dimboost\",\n  checkRequirement: () => true,\n  checkEvent: GAME_EVENT.DIMBOOST_AFTER\n}, {\n  id: 2,\n  key: \"firstGalaxy\",\n  name: \"First Galaxy\",\n  description: \"Get your first Galaxy\",\n  checkRequirement: () => true,\n  checkEvent: GAME_EVENT.GALAXY_RESET_AFTER\n}, {\n  id: 3,\n  key: \"firstInfinity\",\n  name: \"First Infinity\",\n  description: \"Complete your first Infinity\",\n  checkRequirement: () => true,\n  checkEvent: GAME_EVENT.BIG_CRUNCH_AFTER\n}, {\n  id: 4,\n  key: \"completeC9\",\n  name: \"Tickspeed Challenge\",\n  description: \"Complete the Tickspeed Autobuyer Challenge\",\n  checkRequirement: () => NormalChallenge(9).isCompleted,\n  checkEvent: GAME_EVENT.BIG_CRUNCH_AFTER\n}, {\n  id: 5,\n  key: \"completeAllNC\",\n  name: \"All Normal Challenges\",\n  description: \"Complete all Normal Challenges\",\n  checkRequirement: () => NormalChallenges.all.countWhere(c => !c.isCompleted) === 0,\n  checkEvent: GAME_EVENT.BIG_CRUNCH_AFTER\n}, {\n  id: 6,\n  key: \"breakInfinity\",\n  name: \"Break Infinity\",\n  description: \"Break Infinity for the first time\",\n  checkRequirement: () => player.break,\n  checkEvent: GAME_EVENT.BREAK_INFINITY\n}, {\n  id: 7,\n  key: \"upgrade5e11IP\",\n\n  get name() {\n    return `${format(5e11)} IP Upgrade`;\n  },\n\n  description: () => `Purchase the ${formatPercents(0.5)} stronger Galaxies upgrade`,\n  checkRequirement: () => true // This is checked within BreakInfinityUpgrade.onPurchased\n\n}, {\n  id: 8,\n  key: \"completeIC5\",\n  name: \"Infinity Challenge 5\",\n  description: \"Complete Infinity Challenge 5\",\n  checkRequirement: () => InfinityChallenge(5).isCompleted,\n  checkEvent: GAME_EVENT.BIG_CRUNCH_AFTER\n}, {\n  id: 9,\n  key: \"unlockReplicanti\",\n  name: \"Replicanti\",\n  description: \"Unlock Replicanti\",\n  checkRequirement: () => player.replicanti.unl,\n  checkEvent: GAME_EVENT.REPLICANTI_TICK_AFTER\n}, {\n  id: 10,\n  key: \"firstEternity\",\n  name: \"First Eternity\",\n  description: \"Complete your first Eternity\",\n  checkRequirement: () => true,\n  checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER\n}, {\n  id: 11,\n  key: \"allEternityMilestones\",\n  name: \"All Eternity Milestones\",\n  description: \"Unlock all Eternity Milestones\",\n  checkRequirement: () => EternityMilestone.all.every(m => m.isReached),\n  checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER\n}, {\n  id: 12,\n  key: \"completeFirstEC\",\n  name: \"First Eternity Challenge\",\n  description: \"Complete any tier of an Eternity Challenge\",\n  checkRequirement: () => EternityChallenges.completions > 0,\n  checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER\n}, {\n  id: 13,\n  key: \"completeEC10\",\n  name: \"Eternity Challenge 10\",\n  description: \"Complete Eternity Challenge 10 for the first time\",\n  checkRequirement: () => EternityChallenge(10).completions > 0,\n  checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER\n}, {\n  id: 14,\n  key: \"firstDilation\",\n  name: \"First Dilated Eternity\",\n  description: \"Complete a Dilated Eternity for the first time\",\n  checkRequirement: () => player.dilation.active,\n  checkEvent: GAME_EVENT.ETERNITY_RESET_BEFORE\n}, {\n  id: 15,\n  key: \"upgradeTTgen\",\n  name: \"Time Theorem Generation\",\n  description: \"Purchase the Time Theorem Generation Dilation Upgrade\",\n  checkRequirement: () => true // This is checked within DilationUpgradeState.onPurchased\n\n}, {\n  id: 16,\n  key: \"firstReality\",\n  name: \"First Reality\",\n  description: \"Complete your first Reality\",\n  checkRequirement: () => true,\n  checkEvent: GAME_EVENT.REALITY_RESET_AFTER\n}, {\n  id: 17,\n  key: \"upgradeBlackHole\",\n  name: \"Black Hole\",\n  description: \"Unlock the Black Hole\",\n  checkRequirement: () => true,\n  checkEvent: GAME_EVENT.BLACK_HOLE_UNLOCKED\n}, {\n  id: 18,\n  key: \"allRealityUpgrades\",\n  name: \"All Reality Upgrades\",\n  description: \"Purchase all Reality Upgrades\",\n  checkRequirement: () => RealityUpgrades.allBought,\n  checkEvent: GAME_EVENT.REALITY_UPGRADE_BOUGHT\n}, {\n  id: 19,\n  key: \"completeTeresaReality\",\n  name: \"Teresa's Reality\",\n  description: \"Complete Teresa's Reality\",\n  checkRequirement: () => Teresa.isRunning,\n  checkEvent: GAME_EVENT.REALITY_RESET_BEFORE\n}, {\n  id: 20,\n  key: \"completeEffarigReality\",\n  name: \"Effarig's Reality\",\n  description: \"Complete all tiers of Effarig's Reality\",\n  checkRequirement: () => Effarig.currentStage === EFFARIG_STAGES.COMPLETED,\n  checkEvent: GAME_EVENT.REALITY_RESET_AFTER\n}, {\n  id: 21,\n  key: \"completeEnslavedReality\",\n  name: \"The Nameless Ones' Reality\",\n  description: \"Complete The Nameless Ones' Reality\",\n  checkRequirement: () => Enslaved.isRunning,\n  checkEvent: GAME_EVENT.REALITY_RESET_BEFORE\n}, {\n  id: 22,\n  key: \"complete36VAchievement\",\n  name: \"All basic V-Achievements\",\n  description: () => `Complete ${formatInt(36)} V-Achievements`,\n  checkRequirement: () => true // In order to avoid unnecessary overhead, this is checked within V.checkForUnlocks instead of every tick\n\n}, {\n  id: 23,\n  key: \"completeRaMemories\",\n  name: \"Regain Ra's Memories\",\n  description: \"Regain all of Ra's Celestial Memories\",\n  checkRequirement: () => Ra.totalPetLevel >= Ra.maxTotalPetLevel,\n  checkEvent: GAME_EVENT.GAME_TICK_AFTER\n}, {\n  id: 24,\n  key: \"completeFullDestabilize\",\n  name: \"Full Destabilization\",\n  description: \"Disable all Dimensions within Lai'tela's Reality\",\n  checkRequirement: () => Laitela.isFullyDestabilized // Destabilization isn't a reality reset because it shortcuts gameLoop; this is checked in laitelaRealityTick\n\n}, {\n  id: 25,\n  key: \"completeFullGame\",\n  name: \"Game Completed!\",\n  description: \"Complete the entire game\",\n  checkRequirement: () => Achievement(188).isUnlocked,\n  checkEvent: GAME_EVENT.ACHIEVEMENT_UNLOCKED\n}];","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/speedrun-milestones.js"],"names":["speedrunMilestones","id","key","name","description","checkRequirement","checkEvent","GAME_EVENT","DIMBOOST_AFTER","GALAXY_RESET_AFTER","BIG_CRUNCH_AFTER","NormalChallenge","isCompleted","NormalChallenges","all","countWhere","c","player","break","BREAK_INFINITY","format","formatPercents","InfinityChallenge","replicanti","unl","REPLICANTI_TICK_AFTER","ETERNITY_RESET_AFTER","EternityMilestone","every","m","isReached","EternityChallenges","completions","EternityChallenge","dilation","active","ETERNITY_RESET_BEFORE","REALITY_RESET_AFTER","BLACK_HOLE_UNLOCKED","RealityUpgrades","allBought","REALITY_UPGRADE_BOUGHT","Teresa","isRunning","REALITY_RESET_BEFORE","Effarig","currentStage","EFFARIG_STAGES","COMPLETED","Enslaved","formatInt","Ra","totalPetLevel","maxTotalPetLevel","GAME_TICK_AFTER","Laitela","isFullyDestabilized","Achievement","isUnlocked","ACHIEVEMENT_UNLOCKED"],"mappings":"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","sourcesContent":["export const speedrunMilestones = [\r\n  {\r\n    id: 1,\r\n    key: \"firstBoost\",\r\n    name: \"First Dimboost\",\r\n    description: \"Get your first Dimboost\",\r\n    checkRequirement: () => true,\r\n    checkEvent: GAME_EVENT.DIMBOOST_AFTER,\r\n  },\r\n  {\r\n    id: 2,\r\n    key: \"firstGalaxy\",\r\n    name: \"First Galaxy\",\r\n    description: \"Get your first Galaxy\",\r\n    checkRequirement: () => true,\r\n    checkEvent: GAME_EVENT.GALAXY_RESET_AFTER,\r\n  },\r\n  {\r\n    id: 3,\r\n    key: \"firstInfinity\",\r\n    name: \"First Infinity\",\r\n    description: \"Complete your first Infinity\",\r\n    checkRequirement: () => true,\r\n    checkEvent: GAME_EVENT.BIG_CRUNCH_AFTER,\r\n  },\r\n  {\r\n    id: 4,\r\n    key: \"completeC9\",\r\n    name: \"Tickspeed Challenge\",\r\n    description: \"Complete the Tickspeed Autobuyer Challenge\",\r\n    checkRequirement: () => NormalChallenge(9).isCompleted,\r\n    checkEvent: GAME_EVENT.BIG_CRUNCH_AFTER,\r\n  },\r\n  {\r\n    id: 5,\r\n    key: \"completeAllNC\",\r\n    name: \"All Normal Challenges\",\r\n    description: \"Complete all Normal Challenges\",\r\n    checkRequirement: () => NormalChallenges.all.countWhere(c => !c.isCompleted) === 0,\r\n    checkEvent: GAME_EVENT.BIG_CRUNCH_AFTER,\r\n  },\r\n  {\r\n    id: 6,\r\n    key: \"breakInfinity\",\r\n    name: \"Break Infinity\",\r\n    description: \"Break Infinity for the first time\",\r\n    checkRequirement: () => player.break,\r\n    checkEvent: GAME_EVENT.BREAK_INFINITY,\r\n  },\r\n  {\r\n    id: 7,\r\n    key: \"upgrade5e11IP\",\r\n    get name() { return `${format(5e11)} IP Upgrade`; },\r\n    description: () => `Purchase the ${formatPercents(0.5)} stronger Galaxies upgrade`,\r\n    checkRequirement: () => true,\r\n    // This is checked within BreakInfinityUpgrade.onPurchased\r\n  },\r\n  {\r\n    id: 8,\r\n    key: \"completeIC5\",\r\n    name: \"Infinity Challenge 5\",\r\n    description: \"Complete Infinity Challenge 5\",\r\n    checkRequirement: () => InfinityChallenge(5).isCompleted,\r\n    checkEvent: GAME_EVENT.BIG_CRUNCH_AFTER,\r\n  },\r\n  {\r\n    id: 9,\r\n    key: \"unlockReplicanti\",\r\n    name: \"Replicanti\",\r\n    description: \"Unlock Replicanti\",\r\n    checkRequirement: () => player.replicanti.unl,\r\n    checkEvent: GAME_EVENT.REPLICANTI_TICK_AFTER,\r\n  },\r\n  {\r\n    id: 10,\r\n    key: \"firstEternity\",\r\n    name: \"First Eternity\",\r\n    description: \"Complete your first Eternity\",\r\n    checkRequirement: () => true,\r\n    checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER,\r\n  },\r\n  {\r\n    id: 11,\r\n    key: \"allEternityMilestones\",\r\n    name: \"All Eternity Milestones\",\r\n    description: \"Unlock all Eternity Milestones\",\r\n    checkRequirement: () => EternityMilestone.all.every(m => m.isReached),\r\n    checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER,\r\n  },\r\n  {\r\n    id: 12,\r\n    key: \"completeFirstEC\",\r\n    name: \"First Eternity Challenge\",\r\n    description: \"Complete any tier of an Eternity Challenge\",\r\n    checkRequirement: () => EternityChallenges.completions > 0,\r\n    checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER,\r\n  },\r\n  {\r\n    id: 13,\r\n    key: \"completeEC10\",\r\n    name: \"Eternity Challenge 10\",\r\n    description: \"Complete Eternity Challenge 10 for the first time\",\r\n    checkRequirement: () => EternityChallenge(10).completions > 0,\r\n    checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER,\r\n  },\r\n  {\r\n    id: 14,\r\n    key: \"firstDilation\",\r\n    name: \"First Dilated Eternity\",\r\n    description: \"Complete a Dilated Eternity for the first time\",\r\n    checkRequirement: () => player.dilation.active,\r\n    checkEvent: GAME_EVENT.ETERNITY_RESET_BEFORE,\r\n  },\r\n  {\r\n    id: 15,\r\n    key: \"upgradeTTgen\",\r\n    name: \"Time Theorem Generation\",\r\n    description: \"Purchase the Time Theorem Generation Dilation Upgrade\",\r\n    checkRequirement: () => true,\r\n    // This is checked within DilationUpgradeState.onPurchased\r\n  },\r\n  {\r\n    id: 16,\r\n    key: \"firstReality\",\r\n    name: \"First Reality\",\r\n    description: \"Complete your first Reality\",\r\n    checkRequirement: () => true,\r\n    checkEvent: GAME_EVENT.REALITY_RESET_AFTER,\r\n  },\r\n  {\r\n    id: 17,\r\n    key: \"upgradeBlackHole\",\r\n    name: \"Black Hole\",\r\n    description: \"Unlock the Black Hole\",\r\n    checkRequirement: () => true,\r\n    checkEvent: GAME_EVENT.BLACK_HOLE_UNLOCKED,\r\n  },\r\n  {\r\n    id: 18,\r\n    key: \"allRealityUpgrades\",\r\n    name: \"All Reality Upgrades\",\r\n    description: \"Purchase all Reality Upgrades\",\r\n    checkRequirement: () => RealityUpgrades.allBought,\r\n    checkEvent: GAME_EVENT.REALITY_UPGRADE_BOUGHT,\r\n  },\r\n  {\r\n    id: 19,\r\n    key: \"completeTeresaReality\",\r\n    name: \"Teresa's Reality\",\r\n    description: \"Complete Teresa's Reality\",\r\n    checkRequirement: () => Teresa.isRunning,\r\n    checkEvent: GAME_EVENT.REALITY_RESET_BEFORE,\r\n  },\r\n  {\r\n    id: 20,\r\n    key: \"completeEffarigReality\",\r\n    name: \"Effarig's Reality\",\r\n    description: \"Complete all tiers of Effarig's Reality\",\r\n    checkRequirement: () => Effarig.currentStage === EFFARIG_STAGES.COMPLETED,\r\n    checkEvent: GAME_EVENT.REALITY_RESET_AFTER,\r\n  },\r\n  {\r\n    id: 21,\r\n    key: \"completeEnslavedReality\",\r\n    name: \"The Nameless Ones' Reality\",\r\n    description: \"Complete The Nameless Ones' Reality\",\r\n    checkRequirement: () => Enslaved.isRunning,\r\n    checkEvent: GAME_EVENT.REALITY_RESET_BEFORE,\r\n  },\r\n  {\r\n    id: 22,\r\n    key: \"complete36VAchievement\",\r\n    name: \"All basic V-Achievements\",\r\n    description: () => `Complete ${formatInt(36)} V-Achievements`,\r\n    checkRequirement: () => true,\r\n    // In order to avoid unnecessary overhead, this is checked within V.checkForUnlocks instead of every tick\r\n  },\r\n  {\r\n    id: 23,\r\n    key: \"completeRaMemories\",\r\n    name: \"Regain Ra's Memories\",\r\n    description: \"Regain all of Ra's Celestial Memories\",\r\n    checkRequirement: () => Ra.totalPetLevel >= Ra.maxTotalPetLevel,\r\n    checkEvent: GAME_EVENT.GAME_TICK_AFTER,\r\n  },\r\n  {\r\n    id: 24,\r\n    key: \"completeFullDestabilize\",\r\n    name: \"Full Destabilization\",\r\n    description: \"Disable all Dimensions within Lai'tela's Reality\",\r\n    checkRequirement: () => Laitela.isFullyDestabilized,\r\n    // Destabilization isn't a reality reset because it shortcuts gameLoop; this is checked in laitelaRealityTick\r\n  },\r\n  {\r\n    id: 25,\r\n    key: \"completeFullGame\",\r\n    name: \"Game Completed!\",\r\n    description: \"Complete the entire game\",\r\n    checkRequirement: () => Achievement(188).isUnlocked,\r\n    checkEvent: GAME_EVENT.ACHIEVEMENT_UNLOCKED,\r\n  },\r\n];\r\n"]},"metadata":{},"sourceType":"module"}