{"ast":null,"code":"import \"core-js/modules/es.symbol.description.js\";\nimport { DC } from \"../../constants\";\n\nfunction rebuyable(config) {\n  const effectFunction = config.effect || (x => x);\n\n  const {\n    id,\n    maxUpgrades,\n    description,\n    isDisabled,\n    noLabel,\n    onPurchased\n  } = config;\n  return {\n    rebuyable: true,\n    id,\n    cost: () => config.initialCost * Math.pow(config.costIncrease, player.infinityRebuyables[config.id]),\n    maxUpgrades,\n    description,\n    effect: () => effectFunction(player.infinityRebuyables[config.id]),\n    isDisabled,\n    // There isn't enough room in the button to fit the EC reduction and \"Next:\" at the same time while still\n    // presenting all the information in an understandable way, so we only show it if the upgrade is maxed\n    formatEffect: config.formatEffect || (value => {\n      const afterECText = config.afterEC ? config.afterEC() : \"\";\n      return value === config.maxUpgrades ? `Currently: ${formatX(10 - value)} ${afterECText}` : `Currently: ${formatX(10 - value)} | Next: ${formatX(10 - value - 1)}`;\n    }),\n    formatCost: value => format(value, 2, 0),\n    noLabel,\n    onPurchased\n  };\n}\n\nexport const breakInfinityUpgrades = {\n  totalAMMult: {\n    id: \"totalMult\",\n    cost: 1e4,\n    description: \"Antimatter Dimensions gain a multiplier based on total antimatter produced\",\n    effect: () => Math.pow(player.records.totalAntimatter.exponent + 1, 0.5),\n    formatEffect: value => formatX(value, 2, 2)\n  },\n  currentAMMult: {\n    id: \"currentMult\",\n    cost: 5e4,\n    description: \"Antimatter Dimensions gain a multiplier based on current antimatter\",\n    effect: () => Math.pow(Currency.antimatter.exponent + 1, 0.5),\n    formatEffect: value => formatX(value, 2, 2)\n  },\n  galaxyBoost: {\n    id: \"postGalaxy\",\n    cost: 5e11,\n    description: () => `All Galaxies are ${formatPercents(0.5)} stronger`,\n    effect: 1.5\n  },\n  infinitiedMult: {\n    id: \"infinitiedMult\",\n    cost: 1e5,\n    description: \"Antimatter Dimensions gain a multiplier based on Infinities\",\n    effect: () => 1 + Currency.infinitiesTotal.value.pLog10() * 10,\n    formatEffect: value => formatX(value, 2, 2)\n  },\n  achievementMult: {\n    id: \"achievementMult\",\n    cost: 1e6,\n    description: \"Additional multiplier to Antimatter Dimensions based on Achievements completed\",\n    effect: () => Math.max(Math.pow(Achievements.effectiveCount - 30, 3) / 40, 1),\n    formatEffect: value => formatX(value, 2, 2)\n  },\n  slowestChallengeMult: {\n    id: \"challengeMult\",\n    cost: 1e7,\n    description: \"Antimatter Dimensions gain a multiplier based on slowest challenge run\",\n    effect: () => Decimal.clampMin(50 / Time.worstChallenge.totalMinutes, 1),\n    formatEffect: value => formatX(value, 2, 2),\n    hasCap: true,\n    cap: DC.D3E4\n  },\n  infinitiedGen: {\n    id: \"infinitiedGeneration\",\n    cost: 2e7,\n    description: \"Passively generate Infinities based on your fastest Infinity\",\n    effect: () => player.records.bestInfinity.time,\n    formatEffect: value => {\n      if (value === Number.MAX_VALUE && !Pelle.isDoomed) return \"No Infinity generation\";\n      let infinities = DC.D1;\n      infinities = infinities.timesEffectsOf(RealityUpgrade(5), RealityUpgrade(7), Ra.unlocks.continuousTTBoost.effects.infinity);\n      infinities = infinities.times(getAdjustedGlyphEffect(\"infinityinfmult\"));\n      const timeStr = Time.bestInfinity.totalMilliseconds <= 50 ? `${TimeSpan.fromMilliseconds(100).toStringShort()} (capped)` : `${Time.bestInfinity.times(2).toStringShort()}`;\n      return `${quantify(\"Infinity\", infinities)} every ${timeStr}`;\n    }\n  },\n  autobuyMaxDimboosts: {\n    id: \"autobuyMaxDimboosts\",\n    cost: 5e9,\n    description: \"Unlock the buy max Dimension Boost Autobuyer mode\"\n  },\n  autobuyerSpeed: {\n    id: \"autoBuyerUpgrade\",\n    cost: 1e15,\n    description: \"Autobuyers unlocked or improved by Normal Challenges work twice as fast\"\n  },\n  tickspeedCostMult: rebuyable({\n    id: 0,\n    initialCost: 1e6,\n    costIncrease: 5,\n    maxUpgrades: 8,\n    description: \"Reduce post-infinity Tickspeed Upgrade cost multiplier scaling\",\n    afterEC: () => EternityChallenge(11).completions > 0 ? `After EC11: ${formatX(Player.tickSpeedMultDecrease, 2, 2)}` : \"\",\n    noLabel: true,\n    onPurchased: () => GameCache.tickSpeedMultDecrease.invalidate()\n  }),\n  dimCostMult: rebuyable({\n    id: 1,\n    initialCost: 1e7,\n    costIncrease: 5e3,\n    maxUpgrades: 7,\n    description: \"Reduce post-infinity Antimatter Dimension cost multiplier scaling\",\n    afterEC: () => EternityChallenge(6).completions > 0 ? `After EC6: ${formatX(Player.dimensionMultDecrease, 2, 2)}` : \"\",\n    noLabel: true,\n    onPurchased: () => GameCache.dimensionMultDecrease.invalidate()\n  }),\n  ipGen: rebuyable({\n    id: 2,\n    initialCost: 1e7,\n    costIncrease: 10,\n    maxUpgrades: 10,\n    effect: value => Player.bestRunIPPM.times(value / 20),\n    description: () => {\n      let generation = `Generate ${formatInt(5 * player.infinityRebuyables[2])}%`;\n\n      if (!BreakInfinityUpgrade.ipGen.isCapped) {\n        generation += ` âžœ ${formatInt(5 * (1 + player.infinityRebuyables[2]))}%`;\n      }\n\n      return `${generation} of your best IP/min from your last 10 Infinities`;\n    },\n    isDisabled: effect => effect.eq(0),\n    formatEffect: value => `${format(value, 2, 1)} IP/min`,\n    noLabel: false\n  })\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/infinity/break-infinity-upgrades.js"],"names":["DC","rebuyable","config","effectFunction","effect","x","id","maxUpgrades","description","isDisabled","noLabel","onPurchased","cost","initialCost","Math","pow","costIncrease","player","infinityRebuyables","formatEffect","value","afterECText","afterEC","formatX","formatCost","format","breakInfinityUpgrades","totalAMMult","records","totalAntimatter","exponent","currentAMMult","Currency","antimatter","galaxyBoost","formatPercents","infinitiedMult","infinitiesTotal","pLog10","achievementMult","max","Achievements","effectiveCount","slowestChallengeMult","Decimal","clampMin","Time","worstChallenge","totalMinutes","hasCap","cap","D3E4","infinitiedGen","bestInfinity","time","Number","MAX_VALUE","Pelle","isDoomed","infinities","D1","timesEffectsOf","RealityUpgrade","Ra","unlocks","continuousTTBoost","effects","infinity","times","getAdjustedGlyphEffect","timeStr","totalMilliseconds","TimeSpan","fromMilliseconds","toStringShort","quantify","autobuyMaxDimboosts","autobuyerSpeed","tickspeedCostMult","EternityChallenge","completions","Player","tickSpeedMultDecrease","GameCache","invalidate","dimCostMult","dimensionMultDecrease","ipGen","bestRunIPPM","generation","formatInt","BreakInfinityUpgrade","isCapped","eq"],"mappings":"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","sourcesContent":["import { DC } from \"../../constants\";\r\n\r\nfunction rebuyable(config) {\r\n  const effectFunction = config.effect || (x => x);\r\n  const { id, maxUpgrades, description, isDisabled, noLabel, onPurchased } = config;\r\n  return {\r\n    rebuyable: true,\r\n    id,\r\n    cost: () => config.initialCost * Math.pow(config.costIncrease, player.infinityRebuyables[config.id]),\r\n    maxUpgrades,\r\n    description,\r\n    effect: () => effectFunction(player.infinityRebuyables[config.id]),\r\n    isDisabled,\r\n    // There isn't enough room in the button to fit the EC reduction and \"Next:\" at the same time while still\r\n    // presenting all the information in an understandable way, so we only show it if the upgrade is maxed\r\n    formatEffect: config.formatEffect ||\r\n      (value => {\r\n        const afterECText = config.afterEC ? config.afterEC() : \"\";\r\n        return value === config.maxUpgrades\r\n          ? `Currently: ${formatX(10 - value)} ${afterECText}`\r\n          : `Currently: ${formatX(10 - value)} | Next: ${formatX(10 - value - 1)}`;\r\n      }),\r\n    formatCost: value => format(value, 2, 0),\r\n    noLabel,\r\n    onPurchased\r\n  };\r\n}\r\n\r\nexport const breakInfinityUpgrades = {\r\n  totalAMMult: {\r\n    id: \"totalMult\",\r\n    cost: 1e4,\r\n    description: \"Antimatter Dimensions gain a multiplier based on total antimatter produced\",\r\n    effect: () => Math.pow(player.records.totalAntimatter.exponent + 1, 0.5),\r\n    formatEffect: value => formatX(value, 2, 2)\r\n  },\r\n  currentAMMult: {\r\n    id: \"currentMult\",\r\n    cost: 5e4,\r\n    description: \"Antimatter Dimensions gain a multiplier based on current antimatter\",\r\n    effect: () => Math.pow(Currency.antimatter.exponent + 1, 0.5),\r\n    formatEffect: value => formatX(value, 2, 2)\r\n  },\r\n  galaxyBoost: {\r\n    id: \"postGalaxy\",\r\n    cost: 5e11,\r\n    description: () => `All Galaxies are ${formatPercents(0.5)} stronger`,\r\n    effect: 1.5\r\n  },\r\n  infinitiedMult: {\r\n    id: \"infinitiedMult\",\r\n    cost: 1e5,\r\n    description: \"Antimatter Dimensions gain a multiplier based on Infinities\",\r\n    effect: () => 1 + Currency.infinitiesTotal.value.pLog10() * 10,\r\n    formatEffect: value => formatX(value, 2, 2)\r\n  },\r\n  achievementMult: {\r\n    id: \"achievementMult\",\r\n    cost: 1e6,\r\n    description: \"Additional multiplier to Antimatter Dimensions based on Achievements completed\",\r\n    effect: () => Math.max(Math.pow((Achievements.effectiveCount - 30), 3) / 40, 1),\r\n    formatEffect: value => formatX(value, 2, 2)\r\n  },\r\n  slowestChallengeMult: {\r\n    id: \"challengeMult\",\r\n    cost: 1e7,\r\n    description: \"Antimatter Dimensions gain a multiplier based on slowest challenge run\",\r\n    effect: () => Decimal.clampMin(50 / Time.worstChallenge.totalMinutes, 1),\r\n    formatEffect: value => formatX(value, 2, 2),\r\n    hasCap: true,\r\n    cap: DC.D3E4\r\n  },\r\n  infinitiedGen: {\r\n    id: \"infinitiedGeneration\",\r\n    cost: 2e7,\r\n    description: \"Passively generate Infinities based on your fastest Infinity\",\r\n    effect: () => player.records.bestInfinity.time,\r\n    formatEffect: value => {\r\n      if (value === Number.MAX_VALUE && !Pelle.isDoomed) return \"No Infinity generation\";\r\n      let infinities = DC.D1;\r\n      infinities = infinities.timesEffectsOf(\r\n        RealityUpgrade(5),\r\n        RealityUpgrade(7),\r\n        Ra.unlocks.continuousTTBoost.effects.infinity\r\n      );\r\n      infinities = infinities.times(getAdjustedGlyphEffect(\"infinityinfmult\"));\r\n      const timeStr = Time.bestInfinity.totalMilliseconds <= 50\r\n        ? `${TimeSpan.fromMilliseconds(100).toStringShort()} (capped)`\r\n        : `${Time.bestInfinity.times(2).toStringShort()}`;\r\n      return `${quantify(\"Infinity\", infinities)} every ${timeStr}`;\r\n    }\r\n  },\r\n  autobuyMaxDimboosts: {\r\n    id: \"autobuyMaxDimboosts\",\r\n    cost: 5e9,\r\n    description: \"Unlock the buy max Dimension Boost Autobuyer mode\"\r\n  },\r\n  autobuyerSpeed: {\r\n    id: \"autoBuyerUpgrade\",\r\n    cost: 1e15,\r\n    description: \"Autobuyers unlocked or improved by Normal Challenges work twice as fast\"\r\n  },\r\n  tickspeedCostMult: rebuyable({\r\n    id: 0,\r\n    initialCost: 1e6,\r\n    costIncrease: 5,\r\n    maxUpgrades: 8,\r\n    description: \"Reduce post-infinity Tickspeed Upgrade cost multiplier scaling\",\r\n    afterEC: () => (EternityChallenge(11).completions > 0\r\n      ? `After EC11: ${formatX(Player.tickSpeedMultDecrease, 2, 2)}`\r\n      : \"\"\r\n    ),\r\n    noLabel: true,\r\n    onPurchased: () => GameCache.tickSpeedMultDecrease.invalidate()\r\n  }),\r\n  dimCostMult: rebuyable({\r\n    id: 1,\r\n    initialCost: 1e7,\r\n    costIncrease: 5e3,\r\n    maxUpgrades: 7,\r\n    description: \"Reduce post-infinity Antimatter Dimension cost multiplier scaling\",\r\n    afterEC: () => (EternityChallenge(6).completions > 0\r\n      ? `After EC6: ${formatX(Player.dimensionMultDecrease, 2, 2)}`\r\n      : \"\"\r\n    ),\r\n    noLabel: true,\r\n    onPurchased: () => GameCache.dimensionMultDecrease.invalidate()\r\n  }),\r\n  ipGen: rebuyable({\r\n    id: 2,\r\n    initialCost: 1e7,\r\n    costIncrease: 10,\r\n    maxUpgrades: 10,\r\n    effect: value => Player.bestRunIPPM.times(value / 20),\r\n    description: () => {\r\n      let generation = `Generate ${formatInt(5 * player.infinityRebuyables[2])}%`;\r\n      if (!BreakInfinityUpgrade.ipGen.isCapped) {\r\n        generation += ` âžœ ${formatInt(5 * (1 + player.infinityRebuyables[2]))}%`;\r\n      }\r\n      return `${generation} of your best IP/min from your last 10 Infinities`;\r\n    },\r\n    isDisabled: effect => effect.eq(0),\r\n    formatEffect: value => `${format(value, 2, 1)} IP/min`,\r\n    noLabel: false\r\n  })\r\n};\r\n"]},"metadata":{},"sourceType":"module"}