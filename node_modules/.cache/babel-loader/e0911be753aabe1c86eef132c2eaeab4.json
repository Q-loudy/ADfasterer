{"ast":null,"code":"import \"core-js/modules/es.symbol.description.js\";\nexport default {\n  name: \"RaPetLevelBar\",\n  props: {\n    petConfig: {\n      type: Object,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      isUnlocked: false,\n      level: 0,\n      memories: 0,\n      requiredMemories: 0,\n      nextLevelEstimate: 0\n    };\n  },\n\n  computed: {\n    pet() {\n      return this.petConfig.pet;\n    },\n\n    shiftDown() {\n      return ui.view.shiftDown;\n    },\n\n    unlocks() {\n      return this.pet.unlocks;\n    },\n\n    importantLevels() {\n      return this.unlocks.map(u => u.level);\n    },\n\n    barStyle() {\n      return {\n        width: `${100 * Math.min(1, this.memories / this.requiredMemories)}%`,\n        background: this.pet.color\n      };\n    },\n\n    petStyle() {\n      return {\n        \"background-color\": this.pet.color\n      };\n    },\n\n    prevGoal() {\n      const currentUpgrades = this.importantLevels.filter(goal => goal <= this.level);\n      return Math.clampMax(currentUpgrades.max(), 15);\n    },\n\n    nextGoal() {\n      const missingUpgrades = this.importantLevels.filter(goal => goal > this.level);\n      return missingUpgrades.length === 0 ? 25 : missingUpgrades.min();\n    },\n\n    currentLevelGoal() {\n      return this.level + 1;\n    },\n\n    classObject() {\n      const available = this.memories >= this.requiredMemories;\n      const pet = this.pet;\n      return {\n        \"c-ra-level-up-btn\": true,\n        \"c-ra-pet-btn--available\": available,\n        [`c-ra-pet-btn--${pet.id}`]: available\n      };\n    },\n\n    nextUnlock() {\n      const unlock = this.pet.unlocks.find(unl => unl.level === this.level + 1);\n      return unlock !== null && unlock !== void 0 ? unlock : false;\n    },\n\n    showNextScalingUpgrade() {\n      switch (this.pet.name) {\n        case \"Teresa\":\n          return Math.min(12, Math.floor(this.level / 2)) !== Math.min(12, Math.floor((this.level + 1) / 2));\n\n        case \"Effarig\":\n          return AlchemyResources.all.filter(res => res.unlockedAt === this.level + 1).length > 0;\n\n        case \"Enslaved\":\n          return true;\n\n        case \"V\":\n          return Math.min(Math.floor(this.level / 6), 4) !== Math.min(Math.floor((this.level + 1) / 6), 4);\n\n        default:\n          return false;\n      }\n    },\n\n    nextScalingUpgrade() {\n      const effarigAlchemyResource = AlchemyResources.all.filter(res => res.unlockedAt === this.level + 1)[0];\n\n      switch (this.pet.name) {\n        case \"Teresa\":\n          return \"You can charge an additional Infinity Upgrade\";\n\n        case \"Effarig\":\n          return `Unlock the ${effarigAlchemyResource.name} resource in Glyph Alchemy, which\n          ${effarigAlchemyResource.description}`;\n\n        case \"Enslaved\":\n          return `${formatX(20)} to stored game time, and you can store an additional hour of real time`;\n\n        case \"V\":\n          return \"You can purchase an additional Triad Study\";\n\n        default:\n          return \"false\";\n      }\n    },\n\n    reward() {\n      return typeof this.nextUnlock.reward === \"function\" ? this.nextUnlock.reward() : this.nextUnlock.reward;\n    }\n\n  },\n  methods: {\n    update() {\n      const pet = this.pet;\n      this.isUnlocked = pet.isUnlocked;\n      if (!this.isUnlocked) return;\n      this.memories = pet.memories;\n      this.level = pet.level;\n      this.requiredMemories = pet.requiredMemories;\n      this.nextLevelEstimate = Ra.timeToGoalString(this.pet, this.requiredMemories - this.memories);\n    },\n\n    isImportant(level) {\n      return this.importantLevels.includes(level);\n    }\n\n  }\n};","map":{"version":3,"sources":["RaPetLevelBar.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nexport default {\r\n  name: \"RaPetLevelBar\",\r\n  props: {\r\n    petConfig: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isUnlocked: false,\r\n      level: 0,\r\n      memories: 0,\r\n      requiredMemories: 0,\r\n      nextLevelEstimate: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    pet() {\r\n      return this.petConfig.pet;\r\n    },\r\n    shiftDown() {\r\n      return ui.view.shiftDown;\r\n    },\r\n    unlocks() {\r\n      return this.pet.unlocks;\r\n    },\r\n    importantLevels() {\r\n      return this.unlocks.map(u => u.level);\r\n    },\r\n    barStyle() {\r\n      return {\r\n        width: `${100 * Math.min(1, this.memories / this.requiredMemories)}%`,\r\n        background: this.pet.color\r\n      };\r\n    },\r\n    petStyle() {\r\n      return {\r\n        \"background-color\": this.pet.color\r\n      };\r\n    },\r\n    prevGoal() {\r\n      const currentUpgrades = this.importantLevels.filter(goal => goal <= this.level);\r\n      return Math.clampMax(currentUpgrades.max(), 15);\r\n    },\r\n    nextGoal() {\r\n      const missingUpgrades = this.importantLevels.filter(goal => goal > this.level);\r\n      return missingUpgrades.length === 0 ? 25 : missingUpgrades.min();\r\n    },\r\n    currentLevelGoal() {\r\n      return this.level + 1;\r\n    },\r\n    classObject() {\r\n      const available = this.memories >= this.requiredMemories;\r\n      const pet = this.pet;\r\n      return {\r\n        \"c-ra-level-up-btn\": true,\r\n        \"c-ra-pet-btn--available\": available,\r\n        [`c-ra-pet-btn--${pet.id}`]: available\r\n      };\r\n    },\r\n    nextUnlock() {\r\n      const unlock = this.pet.unlocks.find(unl => unl.level === this.level + 1);\r\n      return unlock ?? false;\r\n    },\r\n    showNextScalingUpgrade() {\r\n      switch (this.pet.name) {\r\n        case \"Teresa\":\r\n          return Math.min(12, Math.floor(this.level / 2)) !== Math.min(12, Math.floor((this.level + 1) / 2));\r\n        case \"Effarig\":\r\n          return AlchemyResources.all.filter(res => res.unlockedAt === this.level + 1).length > 0;\r\n        case \"Enslaved\":\r\n          return true;\r\n        case \"V\":\r\n          return Math.min(Math.floor(this.level / 6), 4) !== Math.min(Math.floor((this.level + 1) / 6), 4);\r\n        default:\r\n          return false;\r\n      }\r\n    },\r\n    nextScalingUpgrade() {\r\n      const effarigAlchemyResource = AlchemyResources.all.filter(res => res.unlockedAt === this.level + 1)[0];\r\n      switch (this.pet.name) {\r\n        case \"Teresa\":\r\n          return \"You can charge an additional Infinity Upgrade\";\r\n        case \"Effarig\":\r\n          return `Unlock the ${effarigAlchemyResource.name} resource in Glyph Alchemy, which\r\n          ${effarigAlchemyResource.description}`;\r\n        case \"Enslaved\":\r\n          return `${formatX(20)} to stored game time, and you can store an additional hour of real time`;\r\n        case \"V\":\r\n          return \"You can purchase an additional Triad Study\";\r\n        default:\r\n          return \"false\";\r\n      }\r\n    },\r\n    reward() {\r\n      return (typeof this.nextUnlock.reward === \"function\") ? this.nextUnlock.reward() : this.nextUnlock.reward;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      const pet = this.pet;\r\n      this.isUnlocked = pet.isUnlocked;\r\n      if (!this.isUnlocked) return;\r\n      this.memories = pet.memories;\r\n      this.level = pet.level;\r\n      this.requiredMemories = pet.requiredMemories;\r\n      this.nextLevelEstimate = Ra.timeToGoalString(this.pet, this.requiredMemories - this.memories);\r\n    },\r\n    isImportant(level) {\r\n      return this.importantLevels.includes(level);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-ra-bar-container\">\r\n    <div class=\"c-ra-exp-bar\">\r\n      <div\r\n        class=\"c-ra-exp-bar-inner\"\r\n        :style=\"barStyle\"\r\n      />\r\n    </div>\r\n    <div\r\n      :class=\"classObject\"\r\n      @click=\"pet.levelUp()\"\r\n    >\r\n      <span class=\"fas fa-arrow-up\" />\r\n      <div class=\"c-ra-pet-upgrade__tooltip\">\r\n        <div class=\"c-ra-pet-upgrade__tooltip__name\">\r\n          Level {{ pet.name }} to {{ formatInt(level + 1) }}\r\n        </div>\r\n        <div class=\"c-ra-pet-upgrade__tooltip__description\">\r\n          {{ reward }}\r\n          <div\r\n            v-if=\"showNextScalingUpgrade\"\r\n            :style=\"{ 'margin-top': nextUnlock.reward ? '0.6rem' : '0' }\"\r\n          >\r\n            {{ nextScalingUpgrade }}\r\n          </div>\r\n        </div>\r\n        <div class=\"c-ra-pet-upgrade__tooltip__footer\">\r\n          Cost: {{ quantify(\"Memory\", requiredMemories, 2, 2) }}\r\n          <span v-if=\"memories <= requiredMemories\">{{ nextLevelEstimate }}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n"],"sourceRoot":"src/components/tabs/celestial-ra"},"metadata":{},"sourceType":"module"}