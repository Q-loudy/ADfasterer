{"ast":null,"code":"import \"core-js/modules/es.array.sort.js\";\nimport PrimaryButton from \"@/components/PrimaryButton\";\nexport default {\n  name: \"ClassicAntimatterGalaxyRow\",\n  components: {\n    PrimaryButton\n  },\n\n  data() {\n    return {\n      type: GALAXY_TYPE.NORMAL,\n      galaxies: {\n        normal: 0,\n        replicanti: 0,\n        dilation: 0\n      },\n      requirement: {\n        tier: 1,\n        amount: 0\n      },\n      canBeBought: false,\n      distantStart: 0,\n      remoteStart: 0,\n      lockText: null,\n      canBulkBuy: false,\n      creditsClosed: false,\n      scalingText: {\n        distant: null,\n        remote: null\n      },\n      hasTutorial: false\n    };\n  },\n\n  computed: {\n    isDoomed: () => Pelle.isDoomed,\n\n    dimName() {\n      return AntimatterDimension(this.requirement.tier).displayName;\n    },\n\n    buttonText() {\n      if (this.lockText !== null) return this.lockText;\n      const reset = [];\n      if (!Achievement(111).isUnlocked) reset.push(\"Dimensions\");\n      if (!Achievement(143).isUnlocked) reset.push(\"Dimension Boosts\");\n      return reset.length === 0 ? `Increase the power of Tickspeed upgrades` : `Reset your ${makeEnumeration(reset)} to increase the power of Tickspeed upgrades`;\n    },\n\n    sumText() {\n      const parts = [Math.max(this.galaxies.normal, 0)];\n      if (this.galaxies.replicanti > 0) parts.push(this.galaxies.replicanti);\n      if (this.galaxies.dilation > 0) parts.push(this.galaxies.dilation);\n      const sum = parts.map(this.formatGalaxies).join(\" + \");\n\n      if (parts.length >= 2) {\n        return `${sum} = ${this.formatGalaxies(parts.sum())}`;\n      }\n\n      return sum;\n    },\n\n    typeName() {\n      switch (this.type) {\n        case GALAXY_TYPE.NORMAL:\n          return \"Antimatter Galaxies\";\n\n        case GALAXY_TYPE.DISTANT:\n          return \"Distant Antimatter Galaxies\";\n\n        case GALAXY_TYPE.REMOTE:\n          return \"Remote Antimatter Galaxies\";\n      }\n\n      return undefined;\n    },\n\n    hasIncreasedScaling() {\n      return this.type !== GALAXY_TYPE.NORMAL;\n    },\n\n    costScalingText() {\n      switch (this.type) {\n        case GALAXY_TYPE.DISTANT:\n          return `Each Galaxy is more expensive past ${quantifyInt(\"Galaxy\", this.distantStart)}`;\n\n        case GALAXY_TYPE.REMOTE:\n          {\n            const scalings = [{\n              type: \"distant\",\n              function: \"quadratic\",\n              amount: this.distantStart\n            }, {\n              type: \"remote\",\n              function: \"exponential\",\n              amount: this.remoteStart\n            }];\n            return `Increased Galaxy cost scaling: ${scalings.sort((a, b) => a.amount - b.amount).map(scaling => `${scaling.function} scaling past ${this.formatGalaxies(scaling.amount)} (${scaling.type})`).join(\", \").capitalize()}`;\n          }\n      }\n\n      return undefined;\n    },\n\n    classObject() {\n      return {\n        \"o-primary-btn--galaxy l-dim-row__prestige-button\": true,\n        \"tutorial--glow\": this.canBeBought && this.hasTutorial,\n        \"o-pelle-disabled-pointer\": this.creditsClosed\n      };\n    }\n\n  },\n  methods: {\n    update() {\n      this.type = Galaxy.type;\n      this.galaxies.normal = player.galaxies + GalaxyGenerator.galaxies;\n      this.galaxies.replicanti = Replicanti.galaxies.total;\n      this.galaxies.dilation = player.dilation.totalTachyonGalaxies;\n      const requirement = Galaxy.requirement;\n      this.requirement.amount = requirement.amount;\n      this.requirement.tier = requirement.tier;\n      this.canBeBought = requirement.isSatisfied && Galaxy.canBeBought;\n      this.distantStart = EternityChallenge(5).isRunning ? 0 : Galaxy.costScalingStart;\n      this.remoteStart = Galaxy.remoteStart;\n      this.lockText = Galaxy.lockText;\n      this.canBulkBuy = EternityMilestone.autobuyMaxGalaxies.isReached;\n      this.creditsClosed = GameEnd.creditsEverClosed;\n      this.hasTutorial = Tutorial.isActive(TUTORIAL_STATE.GALAXY);\n    },\n\n    buyGalaxy(bulk) {\n      if (!this.canBeBought) return;\n      manualRequestGalaxyReset(this.canBulkBuy && bulk);\n    },\n\n    formatGalaxies(num) {\n      return num > 1e8 ? format(num, 2) : formatInt(num);\n    }\n\n  }\n};","map":{"version":3,"sources":["ClassicAntimatterGalaxyRow.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\n\r\nexport default {\r\n  name: \"ClassicAntimatterGalaxyRow\",\r\n  components: {\r\n    PrimaryButton\r\n  },\r\n  data() {\r\n    return {\r\n      type: GALAXY_TYPE.NORMAL,\r\n      galaxies: {\r\n        normal: 0,\r\n        replicanti: 0,\r\n        dilation: 0\r\n      },\r\n      requirement: {\r\n        tier: 1,\r\n        amount: 0\r\n      },\r\n      canBeBought: false,\r\n      distantStart: 0,\r\n      remoteStart: 0,\r\n      lockText: null,\r\n      canBulkBuy: false,\r\n      creditsClosed: false,\r\n      scalingText: {\r\n        distant: null,\r\n        remote: null,\r\n      },\r\n      hasTutorial: false,\r\n    };\r\n  },\r\n  computed: {\r\n    isDoomed: () => Pelle.isDoomed,\r\n    dimName() {\r\n      return AntimatterDimension(this.requirement.tier).displayName;\r\n    },\r\n    buttonText() {\r\n      if (this.lockText !== null) return this.lockText;\r\n      const reset = [];\r\n      if (!Achievement(111).isUnlocked) reset.push(\"Dimensions\");\r\n      if (!Achievement(143).isUnlocked) reset.push(\"Dimension Boosts\");\r\n      return reset.length === 0\r\n        ? `Increase the power of Tickspeed upgrades`\r\n        : `Reset your ${makeEnumeration(reset)} to increase the power of Tickspeed upgrades`;\r\n    },\r\n    sumText() {\r\n      const parts = [Math.max(this.galaxies.normal, 0)];\r\n      if (this.galaxies.replicanti > 0) parts.push(this.galaxies.replicanti);\r\n      if (this.galaxies.dilation > 0) parts.push(this.galaxies.dilation);\r\n      const sum = parts.map(this.formatGalaxies).join(\" + \");\r\n      if (parts.length >= 2) {\r\n        return `${sum} = ${this.formatGalaxies(parts.sum())}`;\r\n      }\r\n      return sum;\r\n    },\r\n    typeName() {\r\n      switch (this.type) {\r\n        case GALAXY_TYPE.NORMAL: return \"Antimatter Galaxies\";\r\n        case GALAXY_TYPE.DISTANT: return \"Distant Antimatter Galaxies\";\r\n        case GALAXY_TYPE.REMOTE: return \"Remote Antimatter Galaxies\";\r\n      }\r\n      return undefined;\r\n    },\r\n    hasIncreasedScaling() {\r\n      return this.type !== GALAXY_TYPE.NORMAL;\r\n    },\r\n    costScalingText() {\r\n      switch (this.type) {\r\n        case GALAXY_TYPE.DISTANT:\r\n          return `Each Galaxy is more expensive past ${quantifyInt(\"Galaxy\", this.distantStart)}`;\r\n        case GALAXY_TYPE.REMOTE: {\r\n          const scalings = [\r\n            { type: \"distant\", function: \"quadratic\", amount: this.distantStart },\r\n            { type: \"remote\", function: \"exponential\", amount: this.remoteStart }\r\n          ];\r\n          return `Increased Galaxy cost scaling: ${scalings.sort((a, b) => a.amount - b.amount)\r\n            .map(scaling => `${scaling.function} scaling past ${this.formatGalaxies(scaling.amount)} (${scaling.type})`)\r\n            .join(\", \").capitalize()}`;\r\n        }\r\n      }\r\n      return undefined;\r\n    },\r\n    classObject() {\r\n      return {\r\n        \"o-primary-btn--galaxy l-dim-row__prestige-button\": true,\r\n        \"tutorial--glow\": this.canBeBought && this.hasTutorial,\r\n        \"o-pelle-disabled-pointer\": this.creditsClosed,\r\n      };\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.type = Galaxy.type;\r\n      this.galaxies.normal = player.galaxies + GalaxyGenerator.galaxies;\r\n      this.galaxies.replicanti = Replicanti.galaxies.total;\r\n      this.galaxies.dilation = player.dilation.totalTachyonGalaxies;\r\n      const requirement = Galaxy.requirement;\r\n      this.requirement.amount = requirement.amount;\r\n      this.requirement.tier = requirement.tier;\r\n      this.canBeBought = requirement.isSatisfied && Galaxy.canBeBought;\r\n      this.distantStart = EternityChallenge(5).isRunning ? 0 : Galaxy.costScalingStart;\r\n      this.remoteStart = Galaxy.remoteStart;\r\n      this.lockText = Galaxy.lockText;\r\n      this.canBulkBuy = EternityMilestone.autobuyMaxGalaxies.isReached;\r\n      this.creditsClosed = GameEnd.creditsEverClosed;\r\n      this.hasTutorial = Tutorial.isActive(TUTORIAL_STATE.GALAXY);\r\n    },\r\n    buyGalaxy(bulk) {\r\n      if (!this.canBeBought) return;\r\n      manualRequestGalaxyReset(this.canBulkBuy && bulk);\r\n    },\r\n    formatGalaxies(num) {\r\n      return num > 1e8 ? format(num, 2) : formatInt(num);\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"c-dimension-row c-antimatter-dim-row c-antimatter-prestige-row\">\r\n    <div\r\n      class=\"l-dim-row__prestige-text c-dim-row__label c-dim-row__label--amount l-text-wrapper\"\r\n    >\r\n      {{ typeName }} ({{ sumText }}):\r\n      requires {{ formatInt(requirement.amount) }} {{ dimName }} Dimensions\r\n      <div class=\"l-scaling-text-wrapper\">\r\n        {{ hasIncreasedScaling ? costScalingText : \"\" }}\r\n      </div>\r\n    </div>\r\n    <PrimaryButton\r\n      :enabled=\"canBeBought\"\r\n      :class=\"classObject\"\r\n      @click.exact=\"buyGalaxy(true)\"\r\n      @click.shift.exact=\"buyGalaxy(false)\"\r\n    >\r\n      {{ buttonText }}\r\n      <div\r\n        v-if=\"hasTutorial\"\r\n        class=\"fas fa-circle-exclamation l-notification-icon\"\r\n      />\r\n    </PrimaryButton>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.l-text-wrapper {\r\n  height: 6rem;\r\n}\r\n\r\n.l-scaling-text-wrapper {\r\n  height: 2rem;\r\n}\r\n\r\n.o-primary-btn--galaxy {\r\n  width: 22rem;\r\n  height: 5.5rem;\r\n  position: relative;\r\n  font-size: 0.9rem;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/antimatter-dimensions"},"metadata":{},"sourceType":"module"}