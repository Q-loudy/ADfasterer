{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport { DC } from \"../constants\";\nimport { DimensionState } from \"./dimension\"; // Multiplier applied to all Antimatter Dimensions, regardless of tier. This is cached using a Lazy\n// and invalidated every update.\n\nexport function antimatterDimensionCommonMultiplier() {\n  let multiplier = DC.D1;\n  multiplier = multiplier.times(Achievements.power);\n  multiplier = multiplier.times(ShopPurchase.dimPurchases.currentMult);\n  multiplier = multiplier.times(ShopPurchase.allDimPurchases.currentMult);\n\n  if (!EternityChallenge(9).isRunning) {\n    multiplier = multiplier.times(Currency.infinityPower.value.pow(InfinityDimensions.powerConversionRate).max(1));\n  }\n\n  multiplier = multiplier.timesEffectsOf(BreakInfinityUpgrade.totalAMMult, BreakInfinityUpgrade.currentAMMult, BreakInfinityUpgrade.achievementMult, BreakInfinityUpgrade.slowestChallengeMult, InfinityUpgrade.totalTimeMult, InfinityUpgrade.thisInfinityTimeMult, Achievement(48), Achievement(56), Achievement(65), Achievement(72), Achievement(73), Achievement(74), Achievement(76), Achievement(84), Achievement(91), Achievement(92), TimeStudy(91), TimeStudy(101), TimeStudy(161), TimeStudy(193), InfinityChallenge(3), InfinityChallenge(3).reward, InfinityChallenge(8), EternityChallenge(10), AlchemyResource.dimensionality, PelleUpgrade.antimatterDimensionMult);\n  multiplier = multiplier.dividedByEffectOf(InfinityChallenge(6));\n  multiplier = multiplier.times(getAdjustedGlyphEffect(\"powermult\"));\n  multiplier = multiplier.times(Currency.realityMachines.value.powEffectOf(AlchemyResource.force));\n  if (Pelle.isDoomed) multiplier = multiplier.dividedBy(10);\n  return multiplier;\n}\nexport function getDimensionFinalMultiplierUncached(tier) {\n  if (tier < 1 || tier > 8) throw new Error(`Invalid Antimatter Dimension tier ${tier}`);\n  if (NormalChallenge(10).isRunning && tier > 6) return DC.D1;\n\n  if (EternityChallenge(11).isRunning) {\n    return Currency.infinityPower.value.pow(InfinityDimensions.powerConversionRate).max(1).times(DimBoost.multiplierToNDTier(tier));\n  }\n\n  let multiplier = DC.D1;\n  multiplier = applyNDMultipliers(multiplier, tier);\n  multiplier = applyNDPowers(multiplier, tier);\n  const glyphDilationPowMultiplier = getAdjustedGlyphEffect(\"dilationpow\");\n\n  if (player.dilation.active || PelleStrikes.dilation.hasStrike) {\n    multiplier = dilatedValueOf(multiplier.pow(glyphDilationPowMultiplier));\n  } else if (Enslaved.isRunning) {\n    multiplier = dilatedValueOf(multiplier);\n  }\n\n  multiplier = multiplier.timesEffectOf(DilationUpgrade.ndMultDT);\n\n  if (Effarig.isRunning) {\n    multiplier = Effarig.multiplier(multiplier);\n  } else if (V.isRunning) {\n    multiplier = multiplier.pow(0.5);\n  } // This power effect goes intentionally after all the nerf effects and shouldn't be moved before them\n\n\n  if (AlchemyResource.inflation.isUnlocked && multiplier.gte(AlchemyResource.inflation.effectValue)) {\n    multiplier = multiplier.pow(1.05);\n  }\n\n  return multiplier;\n}\n\nfunction applyNDMultipliers(mult, tier) {\n  let multiplier = mult.times(GameCache.antimatterDimensionCommonMultiplier.value);\n  let buy10Value;\n\n  if (Laitela.continuumActive) {\n    buy10Value = AntimatterDimension(tier).continuumValue;\n  } else {\n    buy10Value = Math.floor(AntimatterDimension(tier).bought / 10);\n  }\n\n  multiplier = multiplier.times(Decimal.pow(AntimatterDimensions.buyTenMultiplier, buy10Value));\n  multiplier = multiplier.times(DimBoost.multiplierToNDTier(tier));\n  let infinitiedMult = DC.D1.timesEffectsOf(AntimatterDimension(tier).infinityUpgrade, BreakInfinityUpgrade.infinitiedMult);\n  infinitiedMult = infinitiedMult.pow(TimeStudy(31).effectOrDefault(1));\n  multiplier = multiplier.times(infinitiedMult);\n\n  if (tier === 1) {\n    multiplier = multiplier.timesEffectsOf(InfinityUpgrade.unspentIPMult, InfinityUpgrade.unspentIPMult.chargedEffect, Achievement(28), Achievement(31), Achievement(68), Achievement(71), TimeStudy(234));\n  }\n\n  if (tier === 8) {\n    multiplier = multiplier.times(Sacrifice.totalBoost);\n  }\n\n  multiplier = multiplier.timesEffectsOf(tier === 8 ? Achievement(23) : null, tier < 8 ? Achievement(34) : null, tier <= 4 ? Achievement(64) : null, tier < 8 ? TimeStudy(71) : null, tier === 8 ? TimeStudy(214) : null, tier > 1 && tier < 8 ? InfinityChallenge(8).reward : null);\n\n  if (Achievement(43).isUnlocked) {\n    multiplier = multiplier.times(1 + tier / 100);\n  }\n\n  multiplier = multiplier.clampMin(1);\n  return multiplier;\n}\n\nfunction applyNDPowers(mult, tier) {\n  let multiplier = mult;\n  const glyphPowMultiplier = getAdjustedGlyphEffect(\"powerpow\");\n  const glyphEffarigPowMultiplier = getAdjustedGlyphEffect(\"effarigdimensions\");\n\n  if (InfinityChallenge(4).isRunning && player.postC4Tier !== tier) {\n    multiplier = multiplier.pow(InfinityChallenge(4).effectValue);\n  }\n\n  if (InfinityChallenge(4).isCompleted) {\n    multiplier = multiplier.pow(InfinityChallenge(4).reward.effectValue);\n  }\n\n  multiplier = multiplier.pow(glyphPowMultiplier * glyphEffarigPowMultiplier * Ra.momentumValue);\n  multiplier = multiplier.powEffectsOf(AntimatterDimension(tier).infinityUpgrade.chargedEffect, InfinityUpgrade.totalTimeMult.chargedEffect, InfinityUpgrade.thisInfinityTimeMult.chargedEffect, AlchemyResource.power, Achievement(183), PelleRifts.paradox);\n  multiplier = multiplier.pow(getAdjustedGlyphEffect(\"curseddimensions\"));\n  multiplier = multiplier.pow(VUnlocks.adPow.effectOrDefault(1));\n\n  if (PelleStrikes.infinity.hasStrike) {\n    multiplier = multiplier.pow(0.5);\n  }\n\n  return multiplier;\n}\n\nfunction onBuyDimension(tier) {\n  if (tier === 1) Tutorial.turnOffEffect(TUTORIAL_STATE.DIM1);\n  if (tier === 2) Tutorial.turnOffEffect(TUTORIAL_STATE.DIM2);\n  Achievement(10 + tier).unlock();\n  Achievement(23).tryUnlock();\n  if (player.speedrun.isActive && !player.speedrun.hasStarted) Speedrun.startTimer();\n  if (NormalChallenge(2).isRunning) player.chall2Pow = 0;\n\n  if (NormalChallenge(4).isRunning || InfinityChallenge(1).isRunning) {\n    AntimatterDimensions.resetAmountUpToTier(tier - 1);\n  }\n\n  player.postC4Tier = tier;\n  player.records.thisInfinity.lastBuyTime = player.records.thisInfinity.time;\n  if (tier !== 8) player.requirementChecks.eternity.onlyAD8 = false;\n  if (tier !== 1) player.requirementChecks.eternity.onlyAD1 = false;\n  if (tier === 8) player.requirementChecks.infinity.noAD8 = false;\n  if (tier === 1) player.requirementChecks.eternity.noAD1 = false;\n}\n\nexport function buyOneDimension(tier) {\n  const dimension = AntimatterDimension(tier);\n  if (Laitela.continuumActive || !dimension.isAvailableForPurchase || !dimension.isAffordable) return false;\n  const cost = dimension.cost;\n  if (tier === 8 && Enslaved.isRunning && AntimatterDimension(8).bought >= 1) return false;\n  dimension.currencyAmount = dimension.currencyAmount.minus(cost);\n\n  if (dimension.boughtBefore10 === 9) {\n    dimension.challengeCostBump();\n  }\n\n  dimension.amount = dimension.amount.plus(1);\n  dimension.bought++;\n\n  if (tier === 1) {\n    Achievement(28).tryUnlock();\n  }\n\n  onBuyDimension(tier);\n  return true;\n}\nexport function buyManyDimension(tier) {\n  const dimension = AntimatterDimension(tier);\n  if (Laitela.continuumActive || !dimension.isAvailableForPurchase || !dimension.isAffordableUntil10) return false;\n  const cost = dimension.costUntil10;\n  if (tier === 8 && Enslaved.isRunning) return buyOneDimension(8);\n  dimension.currencyAmount = dimension.currencyAmount.minus(cost);\n  dimension.challengeCostBump();\n  dimension.amount = dimension.amount.plus(dimension.remainingUntil10);\n  dimension.bought += dimension.remainingUntil10;\n  onBuyDimension(tier);\n  return true;\n}\nexport function buyAsManyAsYouCanBuy(tier) {\n  const dimension = AntimatterDimension(tier);\n  if (Laitela.continuumActive || !dimension.isAvailableForPurchase || !dimension.isAffordable) return false;\n  const howMany = dimension.howManyCanBuy;\n  const cost = dimension.cost.times(howMany);\n  if (tier === 8 && Enslaved.isRunning) return buyOneDimension(8);\n  dimension.currencyAmount = dimension.currencyAmount.minus(cost);\n  dimension.challengeCostBump();\n  dimension.amount = dimension.amount.plus(howMany);\n  dimension.bought += howMany;\n  onBuyDimension(tier);\n  return true;\n} // This function doesn't do cost checking as challenges generally modify costs, it just buys and updates dimensions\n\nfunction buyUntilTen(tier) {\n  if (Laitela.continuumActive) return;\n  const dimension = AntimatterDimension(tier);\n  dimension.challengeCostBump();\n  dimension.amount = Decimal.round(dimension.amount.plus(dimension.remainingUntil10));\n  dimension.bought += dimension.remainingUntil10;\n  onBuyDimension(tier);\n}\n\nexport function maxAll() {\n  if (Laitela.continuumActive) return;\n  player.requirementChecks.infinity.maxAll = true;\n\n  for (let tier = 1; tier < 9; tier++) {\n    buyMaxDimension(tier);\n  } // Do this here because tickspeed might not have been unlocked before\n  // (and maxAll might have unlocked it by buying dimensions).\n\n\n  buyMaxTickSpeed();\n}\nexport function buyMaxDimension(tier, bulk = Infinity) {\n  const dimension = AntimatterDimension(tier);\n  if (Laitela.continuumActive || !dimension.isAvailableForPurchase || !dimension.isAffordableUntil10) return;\n  const cost = dimension.costUntil10;\n  let bulkLeft = bulk;\n  const goal = Player.infinityGoal;\n  if (dimension.cost.gt(goal) && Player.isInAntimatterChallenge) return;\n\n  if (tier === 8 && Enslaved.isRunning) {\n    buyOneDimension(8);\n    return;\n  } // Buy any remaining until 10 before attempting to bulk-buy\n\n\n  if (dimension.currencyAmount.gte(cost)) {\n    dimension.currencyAmount = dimension.currencyAmount.minus(cost);\n    buyUntilTen(tier);\n    bulkLeft--;\n  }\n\n  if (bulkLeft <= 0) return; // Buy in a while loop in order to properly trigger abnormal price increases\n\n  if (NormalChallenge(9).isRunning || InfinityChallenge(5).isRunning) {\n    while (dimension.isAffordableUntil10 && dimension.cost.lt(goal) && bulkLeft > 0) {\n      // We can use dimension.currencyAmount or Currency.antimatter here, they're the same,\n      // but it seems safest to use dimension.currencyAmount for consistency.\n      dimension.currencyAmount = dimension.currencyAmount.minus(dimension.costUntil10);\n      buyUntilTen(tier);\n      bulkLeft--;\n    }\n\n    return;\n  } // This is the bulk-buy math, explicitly ignored if abnormal cost increases are active\n\n\n  const maxBought = dimension.costScale.getMaxBought(Math.floor(dimension.bought / 10) + dimension.costBumps, dimension.currencyAmount, 10);\n\n  if (maxBought === null) {\n    return;\n  }\n\n  let buying = maxBought.quantity;\n  if (buying > bulkLeft) buying = bulkLeft;\n  dimension.amount = dimension.amount.plus(10 * buying).round();\n  dimension.bought += 10 * buying;\n  dimension.currencyAmount = dimension.currencyAmount.minus(Decimal.pow10(maxBought.logPrice));\n}\n\nclass AntimatterDimensionState extends DimensionState {\n  constructor(tier) {\n    super(() => player.dimensions.antimatter, tier);\n    const BASE_COSTS = [null, 10, 100, 1e4, 1e6, 1e9, 1e13, 1e18, 1e24];\n    this._baseCost = BASE_COSTS[tier];\n    const BASE_COST_MULTIPLIERS = [null, 1e3, 1e4, 1e5, 1e6, 1e8, 1e10, 1e12, 1e15];\n    this._baseCostMultiplier = BASE_COST_MULTIPLIERS[tier];\n    const C6_BASE_COSTS = [null, 10, 100, 100, 500, 2500, 2e4, 2e5, 4e6];\n    this._c6BaseCost = C6_BASE_COSTS[tier];\n    const C6_BASE_COST_MULTIPLIERS = [null, 1e3, 5e3, 1e4, 1.2e4, 1.8e4, 2.6e4, 3.2e4, 4.2e4];\n    this._c6BaseCostMultiplier = C6_BASE_COST_MULTIPLIERS[tier];\n  }\n  /**\r\n   * @returns {ExponentialCostScaling}\r\n   */\n\n\n  get costScale() {\n    return new ExponentialCostScaling({\n      baseCost: NormalChallenge(6).isRunning ? this._c6BaseCost : this._baseCost,\n      baseIncrease: NormalChallenge(6).isRunning ? this._c6BaseCostMultiplier : this._baseCostMultiplier,\n      costScale: Player.dimensionMultDecrease,\n      scalingCostThreshold: Number.MAX_VALUE\n    });\n  }\n  /**\r\n   * @returns {Decimal}\r\n   */\n\n\n  get cost() {\n    return this.costScale.calculateCost(Math.floor(this.bought / 10) + this.costBumps);\n  }\n  /** @returns {number} */\n\n\n  get costBumps() {\n    return this.data.costBumps;\n  }\n  /** @param {number} value */\n\n\n  set costBumps(value) {\n    this.data.costBumps = value;\n  }\n  /**\r\n   * @returns {number}\r\n   */\n\n\n  get boughtBefore10() {\n    return this.bought % 10;\n  }\n  /**\r\n   * @returns {number}\r\n   */\n\n\n  get remainingUntil10() {\n    return 10 - this.boughtBefore10;\n  }\n  /**\r\n   * @returns {Decimal}\r\n   */\n\n\n  get costUntil10() {\n    return this.cost.times(this.remainingUntil10);\n  }\n\n  get howManyCanBuy() {\n    const ratio = this.currencyAmount.dividedBy(this.cost);\n    return Decimal.floor(Decimal.max(Decimal.min(ratio, 10 - this.boughtBefore10), 0)).toNumber();\n  }\n  /**\r\n   * @returns {InfinityUpgrade}\r\n   */\n\n\n  get infinityUpgrade() {\n    switch (this.tier) {\n      case 1:\n      case 8:\n        return InfinityUpgrade.dim18mult;\n\n      case 2:\n      case 7:\n        return InfinityUpgrade.dim27mult;\n\n      case 3:\n      case 6:\n        return InfinityUpgrade.dim36mult;\n\n      case 4:\n      case 5:\n        return InfinityUpgrade.dim45mult;\n    }\n\n    return false;\n  }\n  /**\r\n   * @returns {Decimal}\r\n   */\n\n\n  get rateOfChange() {\n    const tier = this.tier;\n\n    if (tier === 8 || tier > 3 && EternityChallenge(3).isRunning || tier > 6 && NormalChallenge(12).isRunning) {\n      return DC.D0;\n    }\n\n    let toGain;\n\n    if (tier === 7 && EternityChallenge(7).isRunning) {\n      toGain = InfinityDimension(1).productionPerSecond.times(10);\n    } else if (NormalChallenge(12).isRunning) {\n      toGain = AntimatterDimension(tier + 2).productionPerSecond;\n    } else {\n      toGain = AntimatterDimension(tier + 1).productionPerSecond;\n    }\n\n    return toGain.times(10).dividedBy(this.amount.max(1)).times(getGameSpeedupForDisplay());\n  }\n  /**\r\n   * @returns {boolean}\r\n   */\n\n\n  get isProducing() {\n    const tier = this.tier;\n\n    if (EternityChallenge(3).isRunning && tier > 4 || NormalChallenge(10).isRunning && tier > 6 || Laitela.isRunning && tier > Laitela.maxAllowedDimension) {\n      return false;\n    }\n\n    return this.totalAmount.gt(0);\n  }\n  /**\r\n   * @returns {Decimal}\r\n   */\n\n\n  get currencyAmount() {\n    return this.tier >= 3 && NormalChallenge(6).isRunning ? AntimatterDimension(this.tier - 2).amount : Currency.antimatter.value;\n  }\n  /**\r\n   * @param {Decimal} value\r\n   */\n\n\n  set currencyAmount(value) {\n    if (this.tier >= 3 && NormalChallenge(6).isRunning) AntimatterDimension(this.tier - 2).amount = value;else Currency.antimatter.value = value;\n  }\n  /**\r\n   * @returns {number}\r\n   */\n\n\n  get continuumValue() {\n    if (!this.isAvailableForPurchase) return 0; // Nameless limits dim 8 purchases to 1 only\n    // Continuum should be no different\n\n    if (this.tier === 8 && Enslaved.isRunning) return 1; // It's safe to use dimension.currencyAmount because this is\n    // a dimension-only method (so don't just copy it over to tickspeed).\n    // We need to use dimension.currencyAmount here because of different costs in NC6.\n\n    return this.costScale.getContinuumValue(this.currencyAmount, 10) * Laitela.matterExtraPurchaseFactor;\n  }\n  /**\r\n   * @returns {number}\r\n   */\n\n\n  get continuumAmount() {\n    if (!Laitela.continuumActive) return 0;\n    return Math.floor(10 * this.continuumValue);\n  }\n  /**\r\n   * Continuum doesn't continually update dimension amount because that would require making the code\r\n   * significantly messier to handle it properly. Instead an effective amount is calculated here, which\r\n   * is only used for production and checking for boost/galaxy. Doesn't affect achievements.\r\n   * Taking the max is kind of a hack but it seems to work in all cases. Obviously it works if\r\n   * continuum isn't unlocked. If the dimension is being produced and the continuum is unlocked,\r\n   * the dimension will be being produced in large numbers (since the save is endgame), so the amount\r\n   * will be larger than the continuum and so the continuum is insignificant, which is fine.\r\n   * If the dimension isn't being produced, the continuum will be at least the amount, so\r\n   * the continuum will be used and that's fine. Note that when continuum is first unlocked,\r\n   * both 8d amount and 8d continuum will be nonzero until the next infinity, so taking the sum\r\n   * doesn't work.\r\n   * @param {Decimal} value\r\n   */\n\n\n  get totalAmount() {\n    return this.amount.max(this.continuumAmount);\n  }\n  /**\r\n    * @returns {boolean}\r\n    */\n\n\n  get isAffordable() {\n    if (Laitela.continuumActive) return false;\n    if (!player.break && this.cost.gt(Decimal.NUMBER_MAX_VALUE)) return false;\n    return this.cost.lte(this.currencyAmount);\n  }\n  /**\r\n   * @returns {boolean}\r\n   */\n\n\n  get isAffordableUntil10() {\n    if (!player.break && this.cost.gt(Decimal.NUMBER_MAX_VALUE)) return false;\n    return this.costUntil10.lte(this.currencyAmount);\n  }\n\n  get isAvailableForPurchase() {\n    if (!EternityMilestone.unlockAllND.isReached && this.tier > DimBoost.totalBoosts + 4) return false;\n    const hasPrevTier = this.tier === 1 || AntimatterDimension(this.tier - 1).totalAmount.gt(0);\n    if (!EternityMilestone.unlockAllND.isReached && !hasPrevTier) return false;\n    return this.tier < 7 || !NormalChallenge(10).isRunning;\n  }\n\n  reset() {\n    this.amount = DC.D0;\n    this.bought = 0;\n    this.costBumps = 0;\n  }\n\n  resetAmount() {\n    this.amount = DC.D0;\n  }\n\n  challengeCostBump() {\n    if (InfinityChallenge(5).isRunning) this.multiplyIC5Costs();else if (NormalChallenge(9).isRunning) this.multiplySameCosts();\n  }\n\n  multiplySameCosts() {\n    for (const dimension of AntimatterDimensions.all.filter(dim => dim.tier !== this.tier)) {\n      if (dimension.cost.e === this.cost.e) {\n        dimension.costBumps++;\n      }\n    }\n\n    if (Tickspeed.cost.e === this.cost.e) player.chall9TickspeedCostBumps++;\n  }\n\n  multiplyIC5Costs() {\n    for (const dimension of AntimatterDimensions.all.filter(dim => dim.tier !== this.tier)) {\n      if (this.tier <= 4 && dimension.cost.lt(this.cost)) {\n        dimension.costBumps++;\n      } else if (this.tier >= 5 && dimension.cost.gt(this.cost)) {\n        dimension.costBumps++;\n      }\n    }\n  }\n\n  get multiplier() {\n    return GameCache.antimatterDimensionFinalMultipliers[this.tier].value;\n  }\n\n  get cappedProductionInNormalChallenges() {\n    const postBreak = player.break && !NormalChallenge.isRunning || InfinityChallenge.isRunning || Enslaved.isRunning;\n    return postBreak ? Decimal.MAX_VALUE : DC.E315;\n  }\n\n  get productionPerSecond() {\n    const tier = this.tier;\n    if (Laitela.isRunning && tier > Laitela.maxAllowedDimension) return DC.D0;\n    let amount = this.totalAmount;\n\n    if (NormalChallenge(12).isRunning) {\n      if (tier === 2) amount = amount.pow(1.6);\n      if (tier === 4) amount = amount.pow(1.4);\n      if (tier === 6) amount = amount.pow(1.2);\n    }\n\n    let production = amount.times(this.multiplier).times(Tickspeed.perSecond);\n\n    if (NormalChallenge(2).isRunning) {\n      production = production.times(player.chall2Pow);\n    }\n\n    if (tier === 1) {\n      if (NormalChallenge(3).isRunning) {\n        production = production.times(player.chall3Pow);\n      }\n\n      if (production.gt(10)) {\n        const log10 = production.log10();\n        production = Decimal.pow10(Math.pow(log10, getAdjustedGlyphEffect(\"effarigantimatter\")));\n      }\n    }\n\n    production = production.min(this.cappedProductionInNormalChallenges);\n    return production;\n  }\n\n}\n/**\r\n * @function\r\n * @param {number} tier\r\n * @return {AntimatterDimensionState}\r\n */\n\n\nexport const AntimatterDimension = AntimatterDimensionState.createAccessor();\nexport const AntimatterDimensions = {\n  /**\r\n   * @type {AntimatterDimensionState[]}\r\n   */\n  all: AntimatterDimension.index.compact(),\n\n  reset() {\n    for (const dimension of AntimatterDimensions.all) {\n      dimension.reset();\n    }\n\n    GameCache.dimensionMultDecrease.invalidate();\n  },\n\n  resetAmountUpToTier(maxTier) {\n    for (const dimension of AntimatterDimensions.all.slice(0, maxTier)) {\n      dimension.resetAmount();\n    }\n  },\n\n  get buyTenMultiplier() {\n    if (NormalChallenge(7).isRunning) return DC.D2.min(1 + DimBoost.totalBoosts / 5);\n    let mult = DC.D2.plusEffectsOf(Achievement(141).effects.buyTenMult, EternityChallenge(3).reward);\n    mult = mult.timesEffectsOf(InfinityUpgrade.buy10Mult, Achievement(58)).times(getAdjustedGlyphEffect(\"powerbuy10\"));\n    mult = mult.pow(getAdjustedGlyphEffect(\"effarigforgotten\")).powEffectOf(InfinityUpgrade.buy10Mult.chargedEffect);\n    mult = mult.pow(ImaginaryUpgrade(14).effectOrDefault(1));\n    return mult;\n  },\n\n  tick(diff) {\n    // Stop producing antimatter at Big Crunch goal because all the game elements\n    // are hidden when pre-break Big Crunch button is on screen.\n    const hasBigCrunchGoal = !player.break || Player.isInAntimatterChallenge;\n    if (hasBigCrunchGoal && Currency.antimatter.gte(Player.infinityGoal)) return;\n    let maxTierProduced = EternityChallenge(3).isRunning ? 3 : 7;\n    let nextTierOffset = 1;\n\n    if (NormalChallenge(12).isRunning) {\n      maxTierProduced--;\n      nextTierOffset++;\n    }\n\n    for (let tier = maxTierProduced; tier >= 1; --tier) {\n      AntimatterDimension(tier + nextTierOffset).produceDimensions(AntimatterDimension(tier), diff / 10);\n    }\n\n    if (AntimatterDimension(1).amount.gt(0)) {\n      player.requirementChecks.eternity.noAD1 = false;\n    }\n\n    AntimatterDimension(1).produceCurrency(Currency.antimatter, diff);\n\n    if (NormalChallenge(12).isRunning) {\n      AntimatterDimension(2).produceCurrency(Currency.antimatter, diff);\n    } // Production may overshoot the goal on the final tick of the challenge\n\n\n    if (hasBigCrunchGoal) Currency.antimatter.dropTo(Player.infinityGoal);\n  }\n\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/dimensions/antimatter-dimension.js"],"names":["DC","DimensionState","antimatterDimensionCommonMultiplier","multiplier","D1","times","Achievements","power","ShopPurchase","dimPurchases","currentMult","allDimPurchases","EternityChallenge","isRunning","Currency","infinityPower","value","pow","InfinityDimensions","powerConversionRate","max","timesEffectsOf","BreakInfinityUpgrade","totalAMMult","currentAMMult","achievementMult","slowestChallengeMult","InfinityUpgrade","totalTimeMult","thisInfinityTimeMult","Achievement","TimeStudy","InfinityChallenge","reward","AlchemyResource","dimensionality","PelleUpgrade","antimatterDimensionMult","dividedByEffectOf","getAdjustedGlyphEffect","realityMachines","powEffectOf","force","Pelle","isDoomed","dividedBy","getDimensionFinalMultiplierUncached","tier","Error","NormalChallenge","DimBoost","multiplierToNDTier","applyNDMultipliers","applyNDPowers","glyphDilationPowMultiplier","player","dilation","active","PelleStrikes","hasStrike","dilatedValueOf","Enslaved","timesEffectOf","DilationUpgrade","ndMultDT","Effarig","V","inflation","isUnlocked","gte","effectValue","mult","GameCache","buy10Value","Laitela","continuumActive","AntimatterDimension","continuumValue","Math","floor","bought","Decimal","AntimatterDimensions","buyTenMultiplier","infinitiedMult","infinityUpgrade","effectOrDefault","unspentIPMult","chargedEffect","Sacrifice","totalBoost","clampMin","glyphPowMultiplier","glyphEffarigPowMultiplier","postC4Tier","isCompleted","Ra","momentumValue","powEffectsOf","PelleRifts","paradox","VUnlocks","adPow","infinity","onBuyDimension","Tutorial","turnOffEffect","TUTORIAL_STATE","DIM1","DIM2","unlock","tryUnlock","speedrun","isActive","hasStarted","Speedrun","startTimer","chall2Pow","resetAmountUpToTier","records","thisInfinity","lastBuyTime","time","requirementChecks","eternity","onlyAD8","onlyAD1","noAD8","noAD1","buyOneDimension","dimension","isAvailableForPurchase","isAffordable","cost","currencyAmount","minus","boughtBefore10","challengeCostBump","amount","plus","buyManyDimension","isAffordableUntil10","costUntil10","remainingUntil10","buyAsManyAsYouCanBuy","howMany","howManyCanBuy","buyUntilTen","round","maxAll","buyMaxDimension","buyMaxTickSpeed","bulk","Infinity","bulkLeft","goal","Player","infinityGoal","gt","isInAntimatterChallenge","lt","maxBought","costScale","getMaxBought","costBumps","buying","quantity","pow10","logPrice","AntimatterDimensionState","constructor","dimensions","antimatter","BASE_COSTS","_baseCost","BASE_COST_MULTIPLIERS","_baseCostMultiplier","C6_BASE_COSTS","_c6BaseCost","C6_BASE_COST_MULTIPLIERS","_c6BaseCostMultiplier","ExponentialCostScaling","baseCost","baseIncrease","dimensionMultDecrease","scalingCostThreshold","Number","MAX_VALUE","calculateCost","data","ratio","min","toNumber","dim18mult","dim27mult","dim36mult","dim45mult","rateOfChange","D0","toGain","InfinityDimension","productionPerSecond","getGameSpeedupForDisplay","isProducing","maxAllowedDimension","totalAmount","getContinuumValue","matterExtraPurchaseFactor","continuumAmount","break","NUMBER_MAX_VALUE","lte","EternityMilestone","unlockAllND","isReached","totalBoosts","hasPrevTier","reset","resetAmount","multiplyIC5Costs","multiplySameCosts","all","filter","dim","e","Tickspeed","chall9TickspeedCostBumps","antimatterDimensionFinalMultipliers","cappedProductionInNormalChallenges","postBreak","E315","production","perSecond","chall3Pow","log10","createAccessor","index","compact","invalidate","maxTier","slice","D2","plusEffectsOf","effects","buyTenMult","buy10Mult","ImaginaryUpgrade","tick","diff","hasBigCrunchGoal","maxTierProduced","nextTierOffset","produceDimensions","produceCurrency","dropTo"],"mappings":"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","sourcesContent":["import { DC } from \"../constants\";\r\n\r\nimport { DimensionState } from \"./dimension\";\r\n\r\n// Multiplier applied to all Antimatter Dimensions, regardless of tier. This is cached using a Lazy\r\n// and invalidated every update.\r\nexport function antimatterDimensionCommonMultiplier() {\r\n  let multiplier = DC.D1;\r\n\r\n  multiplier = multiplier.times(Achievements.power);\r\n  multiplier = multiplier.times(ShopPurchase.dimPurchases.currentMult);\r\n  multiplier = multiplier.times(ShopPurchase.allDimPurchases.currentMult);\r\n\r\n  if (!EternityChallenge(9).isRunning) {\r\n    multiplier = multiplier.times(Currency.infinityPower.value.pow(InfinityDimensions.powerConversionRate).max(1));\r\n  }\r\n  multiplier = multiplier.timesEffectsOf(\r\n    BreakInfinityUpgrade.totalAMMult,\r\n    BreakInfinityUpgrade.currentAMMult,\r\n    BreakInfinityUpgrade.achievementMult,\r\n    BreakInfinityUpgrade.slowestChallengeMult,\r\n    InfinityUpgrade.totalTimeMult,\r\n    InfinityUpgrade.thisInfinityTimeMult,\r\n    Achievement(48),\r\n    Achievement(56),\r\n    Achievement(65),\r\n    Achievement(72),\r\n    Achievement(73),\r\n    Achievement(74),\r\n    Achievement(76),\r\n    Achievement(84),\r\n    Achievement(91),\r\n    Achievement(92),\r\n    TimeStudy(91),\r\n    TimeStudy(101),\r\n    TimeStudy(161),\r\n    TimeStudy(193),\r\n    InfinityChallenge(3),\r\n    InfinityChallenge(3).reward,\r\n    InfinityChallenge(8),\r\n    EternityChallenge(10),\r\n    AlchemyResource.dimensionality,\r\n    PelleUpgrade.antimatterDimensionMult\r\n  );\r\n\r\n  multiplier = multiplier.dividedByEffectOf(InfinityChallenge(6));\r\n  multiplier = multiplier.times(getAdjustedGlyphEffect(\"powermult\"));\r\n  multiplier = multiplier.times(Currency.realityMachines.value.powEffectOf(AlchemyResource.force));\r\n\r\n  if (Pelle.isDoomed) multiplier = multiplier.dividedBy(10);\r\n\r\n  return multiplier;\r\n}\r\n\r\nexport function getDimensionFinalMultiplierUncached(tier) {\r\n  if (tier < 1 || tier > 8) throw new Error(`Invalid Antimatter Dimension tier ${tier}`);\r\n  if (NormalChallenge(10).isRunning && tier > 6) return DC.D1;\r\n  if (EternityChallenge(11).isRunning) {\r\n    return Currency.infinityPower.value.pow(\r\n      InfinityDimensions.powerConversionRate\r\n    ).max(1).times(DimBoost.multiplierToNDTier(tier));\r\n  }\r\n\r\n  let multiplier = DC.D1;\r\n\r\n  multiplier = applyNDMultipliers(multiplier, tier);\r\n  multiplier = applyNDPowers(multiplier, tier);\r\n\r\n  const glyphDilationPowMultiplier = getAdjustedGlyphEffect(\"dilationpow\");\r\n  if (player.dilation.active || PelleStrikes.dilation.hasStrike) {\r\n    multiplier = dilatedValueOf(multiplier.pow(glyphDilationPowMultiplier));\r\n  } else if (Enslaved.isRunning) {\r\n    multiplier = dilatedValueOf(multiplier);\r\n  }\r\n  multiplier = multiplier.timesEffectOf(DilationUpgrade.ndMultDT);\r\n\r\n  if (Effarig.isRunning) {\r\n    multiplier = Effarig.multiplier(multiplier);\r\n  } else if (V.isRunning) {\r\n    multiplier = multiplier.pow(0.5);\r\n  }\r\n\r\n  // This power effect goes intentionally after all the nerf effects and shouldn't be moved before them\r\n  if (AlchemyResource.inflation.isUnlocked && multiplier.gte(AlchemyResource.inflation.effectValue)) {\r\n    multiplier = multiplier.pow(1.05);\r\n  }\r\n\r\n  return multiplier;\r\n}\r\n\r\nfunction applyNDMultipliers(mult, tier) {\r\n  let multiplier = mult.times(GameCache.antimatterDimensionCommonMultiplier.value);\r\n\r\n  let buy10Value;\r\n  if (Laitela.continuumActive) {\r\n    buy10Value = AntimatterDimension(tier).continuumValue;\r\n  } else {\r\n    buy10Value = Math.floor(AntimatterDimension(tier).bought / 10);\r\n  }\r\n\r\n  multiplier = multiplier.times(Decimal.pow(AntimatterDimensions.buyTenMultiplier, buy10Value));\r\n  multiplier = multiplier.times(DimBoost.multiplierToNDTier(tier));\r\n\r\n  let infinitiedMult = DC.D1.timesEffectsOf(\r\n    AntimatterDimension(tier).infinityUpgrade,\r\n    BreakInfinityUpgrade.infinitiedMult\r\n  );\r\n  infinitiedMult = infinitiedMult.pow(TimeStudy(31).effectOrDefault(1));\r\n  multiplier = multiplier.times(infinitiedMult);\r\n\r\n  if (tier === 1) {\r\n    multiplier = multiplier\r\n      .timesEffectsOf(\r\n        InfinityUpgrade.unspentIPMult,\r\n        InfinityUpgrade.unspentIPMult.chargedEffect,\r\n        Achievement(28),\r\n        Achievement(31),\r\n        Achievement(68),\r\n        Achievement(71),\r\n        TimeStudy(234)\r\n      );\r\n  }\r\n  if (tier === 8) {\r\n    multiplier = multiplier.times(Sacrifice.totalBoost);\r\n  }\r\n\r\n  multiplier = multiplier.timesEffectsOf(\r\n    tier === 8 ? Achievement(23) : null,\r\n    tier < 8 ? Achievement(34) : null,\r\n    tier <= 4 ? Achievement(64) : null,\r\n    tier < 8 ? TimeStudy(71) : null,\r\n    tier === 8 ? TimeStudy(214) : null,\r\n    tier > 1 && tier < 8 ? InfinityChallenge(8).reward : null\r\n  );\r\n  if (Achievement(43).isUnlocked) {\r\n    multiplier = multiplier.times(1 + tier / 100);\r\n  }\r\n\r\n  multiplier = multiplier.clampMin(1);\r\n\r\n  return multiplier;\r\n}\r\n\r\nfunction applyNDPowers(mult, tier) {\r\n  let multiplier = mult;\r\n  const glyphPowMultiplier = getAdjustedGlyphEffect(\"powerpow\");\r\n  const glyphEffarigPowMultiplier = getAdjustedGlyphEffect(\"effarigdimensions\");\r\n\r\n  if (InfinityChallenge(4).isRunning && player.postC4Tier !== tier) {\r\n    multiplier = multiplier.pow(InfinityChallenge(4).effectValue);\r\n  }\r\n  if (InfinityChallenge(4).isCompleted) {\r\n    multiplier = multiplier.pow(InfinityChallenge(4).reward.effectValue);\r\n  }\r\n\r\n  multiplier = multiplier.pow(glyphPowMultiplier * glyphEffarigPowMultiplier * Ra.momentumValue);\r\n\r\n  multiplier = multiplier\r\n    .powEffectsOf(\r\n      AntimatterDimension(tier).infinityUpgrade.chargedEffect,\r\n      InfinityUpgrade.totalTimeMult.chargedEffect,\r\n      InfinityUpgrade.thisInfinityTimeMult.chargedEffect,\r\n      AlchemyResource.power,\r\n      Achievement(183),\r\n      PelleRifts.paradox\r\n    );\r\n\r\n  multiplier = multiplier.pow(getAdjustedGlyphEffect(\"curseddimensions\"));\r\n\r\n  multiplier = multiplier.pow(VUnlocks.adPow.effectOrDefault(1));\r\n\r\n  if (PelleStrikes.infinity.hasStrike) {\r\n    multiplier = multiplier.pow(0.5);\r\n  }\r\n\r\n\r\n  return multiplier;\r\n}\r\n\r\nfunction onBuyDimension(tier) {\r\n  if (tier === 1) Tutorial.turnOffEffect(TUTORIAL_STATE.DIM1);\r\n  if (tier === 2) Tutorial.turnOffEffect(TUTORIAL_STATE.DIM2);\r\n  Achievement(10 + tier).unlock();\r\n  Achievement(23).tryUnlock();\r\n\r\n  if (player.speedrun.isActive && !player.speedrun.hasStarted) Speedrun.startTimer();\r\n\r\n  if (NormalChallenge(2).isRunning) player.chall2Pow = 0;\r\n  if (NormalChallenge(4).isRunning || InfinityChallenge(1).isRunning) {\r\n    AntimatterDimensions.resetAmountUpToTier(tier - 1);\r\n  }\r\n\r\n  player.postC4Tier = tier;\r\n  player.records.thisInfinity.lastBuyTime = player.records.thisInfinity.time;\r\n  if (tier !== 8) player.requirementChecks.eternity.onlyAD8 = false;\r\n  if (tier !== 1) player.requirementChecks.eternity.onlyAD1 = false;\r\n  if (tier === 8) player.requirementChecks.infinity.noAD8 = false;\r\n  if (tier === 1) player.requirementChecks.eternity.noAD1 = false;\r\n}\r\n\r\nexport function buyOneDimension(tier) {\r\n  const dimension = AntimatterDimension(tier);\r\n  if (Laitela.continuumActive || !dimension.isAvailableForPurchase || !dimension.isAffordable) return false;\r\n\r\n  const cost = dimension.cost;\r\n\r\n  if (tier === 8 && Enslaved.isRunning && AntimatterDimension(8).bought >= 1) return false;\r\n\r\n  dimension.currencyAmount = dimension.currencyAmount.minus(cost);\r\n\r\n  if (dimension.boughtBefore10 === 9) {\r\n    dimension.challengeCostBump();\r\n  }\r\n\r\n  dimension.amount = dimension.amount.plus(1);\r\n  dimension.bought++;\r\n\r\n  if (tier === 1) {\r\n    Achievement(28).tryUnlock();\r\n  }\r\n\r\n  onBuyDimension(tier);\r\n\r\n  return true;\r\n}\r\n\r\nexport function buyManyDimension(tier) {\r\n  const dimension = AntimatterDimension(tier);\r\n  if (Laitela.continuumActive || !dimension.isAvailableForPurchase || !dimension.isAffordableUntil10) return false;\r\n  const cost = dimension.costUntil10;\r\n\r\n  if (tier === 8 && Enslaved.isRunning) return buyOneDimension(8);\r\n\r\n  dimension.currencyAmount = dimension.currencyAmount.minus(cost);\r\n  dimension.challengeCostBump();\r\n  dimension.amount = dimension.amount.plus(dimension.remainingUntil10);\r\n  dimension.bought += dimension.remainingUntil10;\r\n\r\n  onBuyDimension(tier);\r\n\r\n  return true;\r\n}\r\n\r\nexport function buyAsManyAsYouCanBuy(tier) {\r\n  const dimension = AntimatterDimension(tier);\r\n  if (Laitela.continuumActive || !dimension.isAvailableForPurchase || !dimension.isAffordable) return false;\r\n  const howMany = dimension.howManyCanBuy;\r\n  const cost = dimension.cost.times(howMany);\r\n\r\n  if (tier === 8 && Enslaved.isRunning) return buyOneDimension(8);\r\n\r\n  dimension.currencyAmount = dimension.currencyAmount.minus(cost);\r\n  dimension.challengeCostBump();\r\n  dimension.amount = dimension.amount.plus(howMany);\r\n  dimension.bought += howMany;\r\n\r\n  onBuyDimension(tier);\r\n\r\n  return true;\r\n}\r\n\r\n// This function doesn't do cost checking as challenges generally modify costs, it just buys and updates dimensions\r\nfunction buyUntilTen(tier) {\r\n  if (Laitela.continuumActive) return;\r\n  const dimension = AntimatterDimension(tier);\r\n  dimension.challengeCostBump();\r\n  dimension.amount = Decimal.round(dimension.amount.plus(dimension.remainingUntil10));\r\n  dimension.bought += dimension.remainingUntil10;\r\n  onBuyDimension(tier);\r\n}\r\n\r\nexport function maxAll() {\r\n  if (Laitela.continuumActive) return;\r\n\r\n  player.requirementChecks.infinity.maxAll = true;\r\n\r\n  for (let tier = 1; tier < 9; tier++) {\r\n    buyMaxDimension(tier);\r\n  }\r\n\r\n  // Do this here because tickspeed might not have been unlocked before\r\n  // (and maxAll might have unlocked it by buying dimensions).\r\n  buyMaxTickSpeed();\r\n}\r\n\r\nexport function buyMaxDimension(tier, bulk = Infinity) {\r\n  const dimension = AntimatterDimension(tier);\r\n  if (Laitela.continuumActive || !dimension.isAvailableForPurchase || !dimension.isAffordableUntil10) return;\r\n  const cost = dimension.costUntil10;\r\n  let bulkLeft = bulk;\r\n  const goal = Player.infinityGoal;\r\n  if (dimension.cost.gt(goal) && Player.isInAntimatterChallenge) return;\r\n\r\n  if (tier === 8 && Enslaved.isRunning) {\r\n    buyOneDimension(8);\r\n    return;\r\n  }\r\n\r\n  // Buy any remaining until 10 before attempting to bulk-buy\r\n  if (dimension.currencyAmount.gte(cost)) {\r\n    dimension.currencyAmount = dimension.currencyAmount.minus(cost);\r\n    buyUntilTen(tier);\r\n    bulkLeft--;\r\n  }\r\n\r\n  if (bulkLeft <= 0) return;\r\n\r\n  // Buy in a while loop in order to properly trigger abnormal price increases\r\n  if (NormalChallenge(9).isRunning || InfinityChallenge(5).isRunning) {\r\n    while (dimension.isAffordableUntil10 && dimension.cost.lt(goal) && bulkLeft > 0) {\r\n      // We can use dimension.currencyAmount or Currency.antimatter here, they're the same,\r\n      // but it seems safest to use dimension.currencyAmount for consistency.\r\n      dimension.currencyAmount = dimension.currencyAmount.minus(dimension.costUntil10);\r\n      buyUntilTen(tier);\r\n      bulkLeft--;\r\n    }\r\n    return;\r\n  }\r\n\r\n  // This is the bulk-buy math, explicitly ignored if abnormal cost increases are active\r\n  const maxBought = dimension.costScale.getMaxBought(\r\n    Math.floor(dimension.bought / 10) + dimension.costBumps, dimension.currencyAmount, 10\r\n  );\r\n  if (maxBought === null) {\r\n    return;\r\n  }\r\n  let buying = maxBought.quantity;\r\n  if (buying > bulkLeft) buying = bulkLeft;\r\n  dimension.amount = dimension.amount.plus(10 * buying).round();\r\n  dimension.bought += 10 * buying;\r\n  dimension.currencyAmount = dimension.currencyAmount.minus(Decimal.pow10(maxBought.logPrice));\r\n}\r\n\r\nclass AntimatterDimensionState extends DimensionState {\r\n  constructor(tier) {\r\n    super(() => player.dimensions.antimatter, tier);\r\n    const BASE_COSTS = [null, 10, 100, 1e4, 1e6, 1e9, 1e13, 1e18, 1e24];\r\n    this._baseCost = BASE_COSTS[tier];\r\n    const BASE_COST_MULTIPLIERS = [null, 1e3, 1e4, 1e5, 1e6, 1e8, 1e10, 1e12, 1e15];\r\n    this._baseCostMultiplier = BASE_COST_MULTIPLIERS[tier];\r\n    const C6_BASE_COSTS = [null, 10, 100, 100, 500, 2500, 2e4, 2e5, 4e6];\r\n    this._c6BaseCost = C6_BASE_COSTS[tier];\r\n    const C6_BASE_COST_MULTIPLIERS = [null, 1e3, 5e3, 1e4, 1.2e4, 1.8e4, 2.6e4, 3.2e4, 4.2e4];\r\n    this._c6BaseCostMultiplier = C6_BASE_COST_MULTIPLIERS[tier];\r\n  }\r\n\r\n  /**\r\n   * @returns {ExponentialCostScaling}\r\n   */\r\n  get costScale() {\r\n    return new ExponentialCostScaling({\r\n      baseCost: NormalChallenge(6).isRunning ? this._c6BaseCost : this._baseCost,\r\n      baseIncrease: NormalChallenge(6).isRunning ? this._c6BaseCostMultiplier : this._baseCostMultiplier,\r\n      costScale: Player.dimensionMultDecrease,\r\n      scalingCostThreshold: Number.MAX_VALUE\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @returns {Decimal}\r\n   */\r\n  get cost() {\r\n    return this.costScale.calculateCost(Math.floor(this.bought / 10) + this.costBumps);\r\n  }\r\n\r\n  /** @returns {number} */\r\n  get costBumps() { return this.data.costBumps; }\r\n  /** @param {number} value */\r\n  set costBumps(value) { this.data.costBumps = value; }\r\n\r\n  /**\r\n   * @returns {number}\r\n   */\r\n  get boughtBefore10() {\r\n    return this.bought % 10;\r\n  }\r\n\r\n  /**\r\n   * @returns {number}\r\n   */\r\n  get remainingUntil10() {\r\n    return 10 - this.boughtBefore10;\r\n  }\r\n\r\n  /**\r\n   * @returns {Decimal}\r\n   */\r\n  get costUntil10() {\r\n    return this.cost.times(this.remainingUntil10);\r\n  }\r\n\r\n  get howManyCanBuy() {\r\n    const ratio = this.currencyAmount.dividedBy(this.cost);\r\n    return Decimal.floor(Decimal.max(Decimal.min(ratio, 10 - this.boughtBefore10), 0)).toNumber();\r\n  }\r\n\r\n  /**\r\n   * @returns {InfinityUpgrade}\r\n   */\r\n  get infinityUpgrade() {\r\n    switch (this.tier) {\r\n      case 1:\r\n      case 8:\r\n        return InfinityUpgrade.dim18mult;\r\n      case 2:\r\n      case 7:\r\n        return InfinityUpgrade.dim27mult;\r\n      case 3:\r\n      case 6:\r\n        return InfinityUpgrade.dim36mult;\r\n      case 4:\r\n      case 5:\r\n        return InfinityUpgrade.dim45mult;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @returns {Decimal}\r\n   */\r\n  get rateOfChange() {\r\n    const tier = this.tier;\r\n    if (tier === 8 ||\r\n      (tier > 3 && EternityChallenge(3).isRunning) ||\r\n      (tier > 6 && NormalChallenge(12).isRunning)) {\r\n      return DC.D0;\r\n    }\r\n\r\n    let toGain;\r\n    if (tier === 7 && EternityChallenge(7).isRunning) {\r\n      toGain = InfinityDimension(1).productionPerSecond.times(10);\r\n    } else if (NormalChallenge(12).isRunning) {\r\n      toGain = AntimatterDimension(tier + 2).productionPerSecond;\r\n    } else {\r\n      toGain = AntimatterDimension(tier + 1).productionPerSecond;\r\n    }\r\n    return toGain.times(10).dividedBy(this.amount.max(1)).times(getGameSpeedupForDisplay());\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean}\r\n   */\r\n  get isProducing() {\r\n    const tier = this.tier;\r\n    if ((EternityChallenge(3).isRunning && tier > 4) ||\r\n      (NormalChallenge(10).isRunning && tier > 6) ||\r\n      (Laitela.isRunning && tier > Laitela.maxAllowedDimension)) {\r\n      return false;\r\n    }\r\n    return this.totalAmount.gt(0);\r\n  }\r\n\r\n  /**\r\n   * @returns {Decimal}\r\n   */\r\n  get currencyAmount() {\r\n    return this.tier >= 3 && NormalChallenge(6).isRunning\r\n      ? AntimatterDimension(this.tier - 2).amount\r\n      : Currency.antimatter.value;\r\n  }\r\n\r\n  /**\r\n   * @param {Decimal} value\r\n   */\r\n  set currencyAmount(value) {\r\n    if (this.tier >= 3 && NormalChallenge(6).isRunning) AntimatterDimension(this.tier - 2).amount = value;\r\n    else Currency.antimatter.value = value;\r\n  }\r\n\r\n  /**\r\n   * @returns {number}\r\n   */\r\n  get continuumValue() {\r\n    if (!this.isAvailableForPurchase) return 0;\r\n    // Nameless limits dim 8 purchases to 1 only\r\n    // Continuum should be no different\r\n    if (this.tier === 8 && Enslaved.isRunning) return 1;\r\n    // It's safe to use dimension.currencyAmount because this is\r\n    // a dimension-only method (so don't just copy it over to tickspeed).\r\n    // We need to use dimension.currencyAmount here because of different costs in NC6.\r\n    return this.costScale.getContinuumValue(this.currencyAmount, 10) * Laitela.matterExtraPurchaseFactor;\r\n  }\r\n\r\n  /**\r\n   * @returns {number}\r\n   */\r\n  get continuumAmount() {\r\n    if (!Laitela.continuumActive) return 0;\r\n    return Math.floor(10 * this.continuumValue);\r\n  }\r\n\r\n  /**\r\n   * Continuum doesn't continually update dimension amount because that would require making the code\r\n   * significantly messier to handle it properly. Instead an effective amount is calculated here, which\r\n   * is only used for production and checking for boost/galaxy. Doesn't affect achievements.\r\n   * Taking the max is kind of a hack but it seems to work in all cases. Obviously it works if\r\n   * continuum isn't unlocked. If the dimension is being produced and the continuum is unlocked,\r\n   * the dimension will be being produced in large numbers (since the save is endgame), so the amount\r\n   * will be larger than the continuum and so the continuum is insignificant, which is fine.\r\n   * If the dimension isn't being produced, the continuum will be at least the amount, so\r\n   * the continuum will be used and that's fine. Note that when continuum is first unlocked,\r\n   * both 8d amount and 8d continuum will be nonzero until the next infinity, so taking the sum\r\n   * doesn't work.\r\n   * @param {Decimal} value\r\n   */\r\n  get totalAmount() {\r\n    return this.amount.max(this.continuumAmount);\r\n  }\r\n\r\n  /**\r\n    * @returns {boolean}\r\n    */\r\n  get isAffordable() {\r\n    if (Laitela.continuumActive) return false;\r\n    if (!player.break && this.cost.gt(Decimal.NUMBER_MAX_VALUE)) return false;\r\n    return this.cost.lte(this.currencyAmount);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean}\r\n   */\r\n  get isAffordableUntil10() {\r\n    if (!player.break && this.cost.gt(Decimal.NUMBER_MAX_VALUE)) return false;\r\n    return this.costUntil10.lte(this.currencyAmount);\r\n  }\r\n\r\n  get isAvailableForPurchase() {\r\n    if (!EternityMilestone.unlockAllND.isReached && this.tier > DimBoost.totalBoosts + 4) return false;\r\n    const hasPrevTier = this.tier === 1 || AntimatterDimension(this.tier - 1).totalAmount.gt(0);\r\n    if (!EternityMilestone.unlockAllND.isReached && !hasPrevTier) return false;\r\n    return this.tier < 7 || !NormalChallenge(10).isRunning;\r\n  }\r\n\r\n  reset() {\r\n    this.amount = DC.D0;\r\n    this.bought = 0;\r\n    this.costBumps = 0;\r\n  }\r\n\r\n  resetAmount() {\r\n    this.amount = DC.D0;\r\n  }\r\n\r\n  challengeCostBump() {\r\n    if (InfinityChallenge(5).isRunning) this.multiplyIC5Costs();\r\n    else if (NormalChallenge(9).isRunning) this.multiplySameCosts();\r\n  }\r\n\r\n  multiplySameCosts() {\r\n    for (const dimension of AntimatterDimensions.all.filter(dim => dim.tier !== this.tier)) {\r\n      if (dimension.cost.e === this.cost.e) {\r\n        dimension.costBumps++;\r\n      }\r\n    }\r\n    if (Tickspeed.cost.e === this.cost.e) player.chall9TickspeedCostBumps++;\r\n  }\r\n\r\n  multiplyIC5Costs() {\r\n    for (const dimension of AntimatterDimensions.all.filter(dim => dim.tier !== this.tier)) {\r\n      if (this.tier <= 4 && dimension.cost.lt(this.cost)) {\r\n        dimension.costBumps++;\r\n      } else if (this.tier >= 5 && dimension.cost.gt(this.cost)) {\r\n        dimension.costBumps++;\r\n      }\r\n    }\r\n  }\r\n\r\n  get multiplier() {\r\n    return GameCache.antimatterDimensionFinalMultipliers[this.tier].value;\r\n  }\r\n\r\n  get cappedProductionInNormalChallenges() {\r\n    const postBreak = (player.break && !NormalChallenge.isRunning) ||\r\n      InfinityChallenge.isRunning ||\r\n      Enslaved.isRunning;\r\n    return postBreak ? Decimal.MAX_VALUE : DC.E315;\r\n  }\r\n\r\n  get productionPerSecond() {\r\n    const tier = this.tier;\r\n    if (Laitela.isRunning && tier > Laitela.maxAllowedDimension) return DC.D0;\r\n    let amount = this.totalAmount;\r\n    if (NormalChallenge(12).isRunning) {\r\n      if (tier === 2) amount = amount.pow(1.6);\r\n      if (tier === 4) amount = amount.pow(1.4);\r\n      if (tier === 6) amount = amount.pow(1.2);\r\n    }\r\n    let production = amount.times(this.multiplier).times(Tickspeed.perSecond);\r\n    if (NormalChallenge(2).isRunning) {\r\n      production = production.times(player.chall2Pow);\r\n    }\r\n    if (tier === 1) {\r\n      if (NormalChallenge(3).isRunning) {\r\n        production = production.times(player.chall3Pow);\r\n      }\r\n      if (production.gt(10)) {\r\n        const log10 = production.log10();\r\n        production = Decimal.pow10(Math.pow(log10, getAdjustedGlyphEffect(\"effarigantimatter\")));\r\n      }\r\n    }\r\n    production = production.min(this.cappedProductionInNormalChallenges);\r\n    return production;\r\n  }\r\n}\r\n\r\n/**\r\n * @function\r\n * @param {number} tier\r\n * @return {AntimatterDimensionState}\r\n */\r\nexport const AntimatterDimension = AntimatterDimensionState.createAccessor();\r\n\r\nexport const AntimatterDimensions = {\r\n  /**\r\n   * @type {AntimatterDimensionState[]}\r\n   */\r\n  all: AntimatterDimension.index.compact(),\r\n\r\n  reset() {\r\n    for (const dimension of AntimatterDimensions.all) {\r\n      dimension.reset();\r\n    }\r\n    GameCache.dimensionMultDecrease.invalidate();\r\n  },\r\n\r\n  resetAmountUpToTier(maxTier) {\r\n    for (const dimension of AntimatterDimensions.all.slice(0, maxTier)) {\r\n      dimension.resetAmount();\r\n    }\r\n  },\r\n\r\n  get buyTenMultiplier() {\r\n    if (NormalChallenge(7).isRunning) return DC.D2.min(1 + DimBoost.totalBoosts / 5);\r\n\r\n    let mult = DC.D2.plusEffectsOf(\r\n      Achievement(141).effects.buyTenMult,\r\n      EternityChallenge(3).reward\r\n    );\r\n\r\n    mult = mult.timesEffectsOf(\r\n      InfinityUpgrade.buy10Mult,\r\n      Achievement(58)\r\n    ).times(getAdjustedGlyphEffect(\"powerbuy10\"));\r\n\r\n    mult = mult.pow(getAdjustedGlyphEffect(\"effarigforgotten\")).powEffectOf(InfinityUpgrade.buy10Mult.chargedEffect);\r\n    mult = mult.pow(ImaginaryUpgrade(14).effectOrDefault(1));\r\n\r\n    return mult;\r\n  },\r\n\r\n  tick(diff) {\r\n    // Stop producing antimatter at Big Crunch goal because all the game elements\r\n    // are hidden when pre-break Big Crunch button is on screen.\r\n    const hasBigCrunchGoal = !player.break || Player.isInAntimatterChallenge;\r\n    if (hasBigCrunchGoal && Currency.antimatter.gte(Player.infinityGoal)) return;\r\n\r\n    let maxTierProduced = EternityChallenge(3).isRunning ? 3 : 7;\r\n    let nextTierOffset = 1;\r\n    if (NormalChallenge(12).isRunning) {\r\n      maxTierProduced--;\r\n      nextTierOffset++;\r\n    }\r\n    for (let tier = maxTierProduced; tier >= 1; --tier) {\r\n      AntimatterDimension(tier + nextTierOffset).produceDimensions(AntimatterDimension(tier), diff / 10);\r\n    }\r\n    if (AntimatterDimension(1).amount.gt(0)) {\r\n      player.requirementChecks.eternity.noAD1 = false;\r\n    }\r\n    AntimatterDimension(1).produceCurrency(Currency.antimatter, diff);\r\n    if (NormalChallenge(12).isRunning) {\r\n      AntimatterDimension(2).produceCurrency(Currency.antimatter, diff);\r\n    }\r\n    // Production may overshoot the goal on the final tick of the challenge\r\n    if (hasBigCrunchGoal) Currency.antimatter.dropTo(Player.infinityGoal);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}