{"ast":null,"code":"import ChallengeGrid from \"@/components/ChallengeGrid\";\nimport ChallengeTabHeader from \"@/components/ChallengeTabHeader\";\nimport EternityChallengeBox from \"./EternityChallengeBox\";\nexport default {\n  name: \"EternityChallengesTab\",\n  components: {\n    ChallengeTabHeader,\n    ChallengeGrid,\n    EternityChallengeBox\n  },\n\n  data() {\n    return {\n      unlockedCount: 0,\n      showAllChallenges: false,\n      autoEC: false,\n      isAutoECVisible: false,\n      hasUpgradeLock: false,\n      remainingECTiers: 0,\n      untilNextEC: TimeSpan.zero,\n      untilAllEC: TimeSpan.zero,\n      hasECR: false\n    };\n  },\n\n  computed: {\n    challenges() {\n      return EternityChallenges.all;\n    },\n\n    upgradeLockNameText() {\n      return RealityUpgrade(12).isLockingMechanics ? RealityUpgrade(12).name : ImaginaryUpgrade(15).name;\n    },\n\n    nextECText() {\n      return this.untilNextEC.totalMilliseconds === 0 && !this.autoEC ? \"Immediately upon unpausing\" : `${this.untilNextEC} (real time)`;\n    },\n\n    allECText() {\n      return this.untilAllEC.totalMilliseconds === 0 && !this.autoEC ? \"Immediately upon unpausing\" : `After ${this.untilAllEC} (real time)`;\n    }\n\n  },\n  methods: {\n    update() {\n      this.showAllChallenges = player.options.showAllChallenges;\n      this.unlockedCount = EternityChallenges.all.filter(this.isChallengeVisible).length;\n      this.isAutoECVisible = Perk.autocompleteEC1.canBeApplied;\n      this.autoEC = player.reality.autoEC;\n      const shouldPreventEC7 = TimeDimension(1).amount.gt(0);\n      this.hasUpgradeLock = RealityUpgrade(12).isLockingMechanics || ImaginaryUpgrade(15).isLockingMechanics && shouldPreventEC7 && !Array.range(1, 6).some(ec => !EternityChallenge(ec).isFullyCompleted);\n      const remainingCompletions = EternityChallenges.remainingCompletions;\n      this.remainingECTiers = remainingCompletions;\n\n      if (remainingCompletions !== 0) {\n        const autoECInterval = EternityChallenges.autoComplete.interval;\n        const untilNextEC = Math.max(autoECInterval - player.reality.lastAutoEC, 0);\n        this.untilNextEC.setFrom(untilNextEC);\n        this.untilAllEC.setFrom(untilNextEC + autoECInterval * (remainingCompletions - 1));\n      }\n\n      this.hasECR = Perk.studyECRequirement.isBought;\n    },\n\n    isChallengeVisible(challenge) {\n      return challenge.completions > 0 || challenge.isUnlocked || challenge.hasUnlocked || this.showAllChallenges && PlayerProgress.realityUnlocked();\n    }\n\n  }\n};","map":{"version":3,"sources":["EternityChallengesTab.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport ChallengeGrid from \"@/components/ChallengeGrid\";\r\nimport ChallengeTabHeader from \"@/components/ChallengeTabHeader\";\r\nimport EternityChallengeBox from \"./EternityChallengeBox\";\r\n\r\nexport default {\r\n  name: \"EternityChallengesTab\",\r\n  components: {\r\n    ChallengeTabHeader,\r\n    ChallengeGrid,\r\n    EternityChallengeBox\r\n  },\r\n  data() {\r\n    return {\r\n      unlockedCount: 0,\r\n      showAllChallenges: false,\r\n      autoEC: false,\r\n      isAutoECVisible: false,\r\n      hasUpgradeLock: false,\r\n      remainingECTiers: 0,\r\n      untilNextEC: TimeSpan.zero,\r\n      untilAllEC: TimeSpan.zero,\r\n      hasECR: false,\r\n    };\r\n  },\r\n  computed: {\r\n    challenges() {\r\n      return EternityChallenges.all;\r\n    },\r\n    upgradeLockNameText() {\r\n      return RealityUpgrade(12).isLockingMechanics\r\n        ? RealityUpgrade(12).name\r\n        : ImaginaryUpgrade(15).name;\r\n    },\r\n    nextECText() {\r\n      return this.untilNextEC.totalMilliseconds === 0 && !this.autoEC\r\n        ? \"Immediately upon unpausing\"\r\n        : `${this.untilNextEC} (real time)`;\r\n    },\r\n    allECText() {\r\n      return this.untilAllEC.totalMilliseconds === 0 && !this.autoEC\r\n        ? \"Immediately upon unpausing\"\r\n        : `After ${this.untilAllEC} (real time)`;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.showAllChallenges = player.options.showAllChallenges;\r\n      this.unlockedCount = EternityChallenges.all\r\n        .filter(this.isChallengeVisible)\r\n        .length;\r\n      this.isAutoECVisible = Perk.autocompleteEC1.canBeApplied;\r\n      this.autoEC = player.reality.autoEC;\r\n      const shouldPreventEC7 = TimeDimension(1).amount.gt(0);\r\n      this.hasUpgradeLock = RealityUpgrade(12).isLockingMechanics ||\r\n        (ImaginaryUpgrade(15).isLockingMechanics && shouldPreventEC7 &&\r\n          !Array.range(1, 6).some(ec => !EternityChallenge(ec).isFullyCompleted));\r\n      const remainingCompletions = EternityChallenges.remainingCompletions;\r\n      this.remainingECTiers = remainingCompletions;\r\n      if (remainingCompletions !== 0) {\r\n        const autoECInterval = EternityChallenges.autoComplete.interval;\r\n        const untilNextEC = Math.max(autoECInterval - player.reality.lastAutoEC, 0);\r\n        this.untilNextEC.setFrom(untilNextEC);\r\n        this.untilAllEC.setFrom(untilNextEC + (autoECInterval * (remainingCompletions - 1)));\r\n      }\r\n      this.hasECR = Perk.studyECRequirement.isBought;\r\n    },\r\n    isChallengeVisible(challenge) {\r\n      return challenge.completions > 0 || challenge.isUnlocked || challenge.hasUnlocked ||\r\n        (this.showAllChallenges && PlayerProgress.realityUnlocked());\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-challenges-tab\">\r\n    <ChallengeTabHeader />\r\n    <div v-if=\"isAutoECVisible\">\r\n      Eternity Challenges are automatically completed sequentially, requiring all previous\r\n      Eternity Challenges to be fully completed before any progress is made.\r\n    </div>\r\n    <div\r\n      v-if=\"isAutoECVisible && remainingECTiers > 0\"\r\n      class=\"c-challenges-tab__auto-ec-info l-challenges-tab__auto-ec-info\"\r\n    >\r\n      <div class=\"l-challenges-tab__auto-ec-timers\">\r\n        <span\r\n          v-if=\"hasUpgradeLock\"\r\n          class=\"l-emphasis\"\r\n        >\r\n          Auto EC is currently disabled because of the \"{{ upgradeLockNameText }}\" upgrade requirement lock.\r\n        </span>\r\n        <span v-if=\"remainingECTiers > 0\">\r\n          Next Auto Eternity Challenge completion: {{ nextECText }}\r\n        </span>\r\n        <span>\r\n          All Auto Eternity Challenge completions: {{ allECText }}\r\n        </span>\r\n        <br>\r\n      </div>\r\n    </div>\r\n    <div>\r\n      Complete Eternity Challenges again for a bigger reward, maximum of {{ formatInt(5) }} times.<br>\r\n      The rewards are applied permanently with no need to have the respective Eternity Challenge Time Study purchased.\r\n    </div>\r\n    <div v-if=\"!hasECR\">\r\n      When you respec out of an unlocked Eternity Challenge, you don't need to redo the secondary requirement<br>\r\n      in order to unlock it again until you complete it; only the Time Theorems are required.\r\n    </div>\r\n    <div v-if=\"unlockedCount !== 12\">\r\n      You have seen {{ formatInt(unlockedCount) }} out of {{ formatInt(12) }} Eternity Challenges.\r\n    </div>\r\n    <div v-else>\r\n      You have seen all {{ formatInt(12) }} Eternity Challenges.\r\n    </div>\r\n    <ChallengeGrid\r\n      v-slot=\"{ challenge }\"\r\n      :challenges=\"challenges\"\r\n      :is-challenge-visible=\"isChallengeVisible\"\r\n    >\r\n      <EternityChallengeBox :challenge=\"challenge\" />\r\n    </ChallengeGrid>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.l-emphasis {\r\n  font-weight: bold;\r\n  color: var(--color-bad);\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/eternity-challenges"},"metadata":{},"sourceType":"module"}