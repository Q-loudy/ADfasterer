{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\n\nclass SubtabState {\n  constructor(parent, config) {\n    this._parent = parent;\n    this.config = config;\n  }\n\n  get name() {\n    return this.config.name;\n  }\n\n  get symbol() {\n    return this.config.symbol;\n  }\n\n  get isPermanentlyHidden() {\n    return this.config.hideAt < GameEnd.endState && !GameEnd.creditsClosed;\n  }\n\n  get hidable() {\n    return this.config.hidable;\n  }\n\n  get isHidden() {\n    if (Enslaved.isRunning || Pelle.hasGalaxyGenerator) return false;\n    return (player.options.hiddenSubtabBits[this._parent.id] & 1 << this.id) !== 0 && this.hidable;\n  }\n\n  get isUnlocked() {\n    return this.config.condition === undefined || this.config.condition();\n  }\n\n  get isAvailable() {\n    return !this.isPermanentlyHidden && (this.isOpen || !this.isHidden && this.isUnlocked);\n  }\n\n  get hasNotification() {\n    return player.tabNotifications.has(this._parent.key + this.key);\n  }\n\n  get key() {\n    return this.config.key;\n  }\n\n  get id() {\n    return this.config.id;\n  }\n\n  show(manual) {\n    this._parent.show(manual, this);\n  }\n\n  unhideTab() {\n    this._parent.unhideTab();\n\n    player.options.hiddenSubtabBits[this._parent.id] &= ~(1 << this.id);\n  }\n\n  toggleVisibility() {\n    if (this._parent.id === Tabs.current.id && this.id === Tabs.current._currentSubtab.id) return;\n    player.options.hiddenSubtabBits[this._parent.id] ^= 1 << this.id;\n    checkTabVisibilityForSecretAchievement();\n  }\n\n  get isOpen() {\n    return ui.view.tab === this._parent.key && ui.view.subtab === this.key;\n  }\n\n}\n\nfunction findLastOpenSubtab(tabId, subtabs) {\n  var _subtabs$find;\n\n  return (_subtabs$find = subtabs.find(s => s.id === player.options.lastOpenSubtab[tabId])) !== null && _subtabs$find !== void 0 ? _subtabs$find : subtabs[0];\n}\n\nfunction cycleThroughSubtabs(subtabs, currentSubtab) {\n  const availableTabs = subtabs.filter(tab => tab.isAvailable);\n  const currentIndex = availableTabs.indexOf(currentSubtab);\n  const direction = ui.view.shiftDown ? -1 : 1;\n  let newIndex = currentIndex + direction;\n  newIndex = newIndex < 0 ? availableTabs.length - 1 : newIndex;\n  newIndex = newIndex > availableTabs.length - 1 ? 0 : newIndex;\n  return availableTabs[newIndex];\n}\n\nclass TabState {\n  constructor(config) {\n    this.config = config;\n    this.isOpened = false;\n    const subtabs = [];\n\n    for (const subtabConfig of config.subtabs) {\n      const subtab = new SubtabState(this, subtabConfig);\n      this[subtabConfig.key] = subtab;\n      subtabs.push(subtab);\n    }\n\n    this.subtabs = subtabs;\n    this._currentSubtab = findLastOpenSubtab(this.id, subtabs);\n  }\n\n  get name() {\n    return this.config.name;\n  }\n\n  get key() {\n    return this.config.key;\n  }\n\n  get id() {\n    return this.config.id;\n  }\n\n  get isPermanentlyHidden() {\n    return this.config.hideAt < GameEnd.endState && !GameEnd.creditsClosed;\n  }\n\n  get hidable() {\n    return this.config.hidable;\n  }\n\n  get isHidden() {\n    if (Enslaved.isRunning || Pelle.hasGalaxyGenerator) return false;\n    const hasVisibleSubtab = this.subtabs.some(t => t.isAvailable);\n    return ((player.options.hiddenTabBits & 1 << this.id) !== 0 || !hasVisibleSubtab) && this.hidable;\n  }\n\n  get isUnlocked() {\n    return this.config.condition === undefined || this.config.condition();\n  }\n\n  get isAvailable() {\n    return !this.isPermanentlyHidden && (this.isOpen || !this.isHidden && this.isUnlocked);\n  }\n\n  get isOpen() {\n    return ui.view.tab === this.key;\n  }\n\n  get hasNotification() {\n    return this.subtabs.some(tab => tab.hasNotification);\n  }\n\n  show(manual, subtab = undefined) {\n    if (!manual && !player.options.automaticTabSwitching || Quote.isOpen) return;\n\n    if (subtab !== undefined) {\n      if (!Enslaved.isRunning) subtab.unhideTab();\n      this._currentSubtab = subtab;\n    } else if (ui.view.tab === this.key && ui.view.initialized && manual) {\n      this._currentSubtab = cycleThroughSubtabs(this.subtabs, this._currentSubtab);\n    } else {\n      this._currentSubtab = findLastOpenSubtab(this.id, this.subtabs);\n    }\n\n    if (!this._currentSubtab.isUnlocked) this.resetToUnlocked();\n    if (!this._currentSubtab.isAvailable) this.resetToAvailable();\n    ui.view.tab = this.key;\n    ui.view.subtab = this._currentSubtab.key;\n    const tabNotificationKey = this.key + this._currentSubtab.key;\n    if (player.tabNotifications.has(tabNotificationKey)) player.tabNotifications.delete(tabNotificationKey);\n    if (manual) Modal.hideAll();\n    EventHub.dispatch(GAME_EVENT.TAB_CHANGED, this, this._currentSubtab);\n  }\n\n  unhideTab() {\n    player.options.hiddenTabBits &= ~(1 << this.id);\n  }\n\n  toggleVisibility() {\n    if (this.id === Tabs.current.id) return;\n    player.options.hiddenTabBits ^= 1 << this.id;\n    checkTabVisibilityForSecretAchievement();\n  }\n\n  resetToAvailable() {\n    this._currentSubtab = this.subtabs.find(tab => tab.isAvailable);\n\n    if (this._currentSubtab === undefined) {\n      this._currentSubtab = this.subtabs[0];\n\n      this._currentSubtab.unhideTab();\n    }\n  }\n\n  resetToUnlocked() {\n    this._currentSubtab = this.subtabs.find(tab => tab.isUnlocked);\n  }\n\n}\n\nexport const Tab = GameDatabase.tabs.mapToObject(config => config.key, config => new TabState(config));\nexport const Tabs = function () {\n  return {\n    all: Object.values(Tab),\n\n    get current() {\n      return Tabs.all.find(tab => tab.isOpen);\n    },\n\n    oldUI: [Tab.dimensions, Tab.options, Tab.statistics, Tab.achievements, Tab.automation, Tab.challenges, Tab.infinity, Tab.eternity, Tab.reality, Tab.celestials, Tab.shop],\n    newUI: [Tab.dimensions, Tab.automation, Tab.challenges, Tab.infinity, Tab.eternity, Tab.reality, Tab.celestials, Tab.achievements, Tab.statistics, Tab.options, Tab.shop],\n\n    get currentUIFormat() {\n      return ui.view.newUI ? this.newUI : this.oldUI;\n    }\n\n  };\n}();\n\nconst checkTabVisibilityForSecretAchievement = () => {\n  // Checks if every unlocked tab that is hidable is hidden\n  if (Tabs.all.filter(t => t.isUnlocked && t.hidable).every(t => t.isHidden)) SecretAchievement(47).unlock();\n};\n\nEventHub.logic.on(GAME_EVENT.TAB_CHANGED, () => {\n  const currTab = Tabs.current.id;\n  player.options.lastOpenTab = currTab;\n  player.options.lastOpenSubtab[currTab] = Tabs.current._currentSubtab.id;\n});","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/tabs.js"],"names":["SubtabState","constructor","parent","config","_parent","name","symbol","isPermanentlyHidden","hideAt","GameEnd","endState","creditsClosed","hidable","isHidden","Enslaved","isRunning","Pelle","hasGalaxyGenerator","player","options","hiddenSubtabBits","id","isUnlocked","condition","undefined","isAvailable","isOpen","hasNotification","tabNotifications","has","key","show","manual","unhideTab","toggleVisibility","Tabs","current","_currentSubtab","checkTabVisibilityForSecretAchievement","ui","view","tab","subtab","findLastOpenSubtab","tabId","subtabs","find","s","lastOpenSubtab","cycleThroughSubtabs","currentSubtab","availableTabs","filter","currentIndex","indexOf","direction","shiftDown","newIndex","length","TabState","isOpened","subtabConfig","push","hasVisibleSubtab","some","t","hiddenTabBits","automaticTabSwitching","Quote","initialized","resetToUnlocked","resetToAvailable","tabNotificationKey","delete","Modal","hideAll","EventHub","dispatch","GAME_EVENT","TAB_CHANGED","Tab","GameDatabase","tabs","mapToObject","all","Object","values","oldUI","dimensions","statistics","achievements","automation","challenges","infinity","eternity","reality","celestials","shop","newUI","currentUIFormat","every","SecretAchievement","unlock","logic","on","currTab","lastOpenTab"],"mappings":"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","sourcesContent":["class SubtabState {\r\n  constructor(parent, config) {\r\n    this._parent = parent;\r\n    this.config = config;\r\n  }\r\n\r\n  get name() {\r\n    return this.config.name;\r\n  }\r\n\r\n  get symbol() {\r\n    return this.config.symbol;\r\n  }\r\n\r\n  get isPermanentlyHidden() {\r\n    return this.config.hideAt < GameEnd.endState && !GameEnd.creditsClosed;\r\n  }\r\n\r\n  get hidable() {\r\n    return this.config.hidable;\r\n  }\r\n\r\n  get isHidden() {\r\n    if (Enslaved.isRunning || Pelle.hasGalaxyGenerator) return false;\r\n    return ((player.options.hiddenSubtabBits[this._parent.id] & (1 << this.id)) !== 0) &&\r\n      this.hidable;\r\n  }\r\n\r\n  get isUnlocked() {\r\n    return this.config.condition === undefined || this.config.condition();\r\n  }\r\n\r\n  get isAvailable() {\r\n    return !this.isPermanentlyHidden && (this.isOpen || !this.isHidden && this.isUnlocked);\r\n  }\r\n\r\n  get hasNotification() {\r\n    return player.tabNotifications.has(this._parent.key + this.key);\r\n  }\r\n\r\n  get key() {\r\n    return this.config.key;\r\n  }\r\n\r\n  get id() {\r\n    return this.config.id;\r\n  }\r\n\r\n  show(manual) {\r\n    this._parent.show(manual, this);\r\n  }\r\n\r\n  unhideTab() {\r\n    this._parent.unhideTab();\r\n    player.options.hiddenSubtabBits[this._parent.id] &= ~(1 << this.id);\r\n  }\r\n\r\n  toggleVisibility() {\r\n    if (this._parent.id === Tabs.current.id && this.id === Tabs.current._currentSubtab.id) return;\r\n    player.options.hiddenSubtabBits[this._parent.id] ^= (1 << this.id);\r\n\r\n    checkTabVisibilityForSecretAchievement();\r\n  }\r\n\r\n  get isOpen() {\r\n    return ui.view.tab === this._parent.key && ui.view.subtab === this.key;\r\n  }\r\n}\r\n\r\nfunction findLastOpenSubtab(tabId, subtabs) {\r\n  return subtabs.find(s => s.id === player.options.lastOpenSubtab[tabId]) ?? subtabs[0];\r\n}\r\n\r\nfunction cycleThroughSubtabs(subtabs, currentSubtab) {\r\n  const availableTabs = subtabs.filter(tab => tab.isAvailable);\r\n  const currentIndex = availableTabs.indexOf(currentSubtab);\r\n  const direction = ui.view.shiftDown ? -1 : 1;\r\n  let newIndex = currentIndex + direction;\r\n  newIndex = newIndex < 0 ? availableTabs.length - 1 : newIndex;\r\n  newIndex = newIndex > availableTabs.length - 1 ? 0 : newIndex;\r\n  return availableTabs[newIndex];\r\n}\r\n\r\nclass TabState {\r\n  constructor(config) {\r\n    this.config = config;\r\n    this.isOpened = false;\r\n    const subtabs = [];\r\n    for (const subtabConfig of config.subtabs) {\r\n      const subtab = new SubtabState(this, subtabConfig);\r\n      this[subtabConfig.key] = subtab;\r\n      subtabs.push(subtab);\r\n    }\r\n    this.subtabs = subtabs;\r\n    this._currentSubtab = findLastOpenSubtab(this.id, subtabs);\r\n  }\r\n\r\n  get name() {\r\n    return this.config.name;\r\n  }\r\n\r\n  get key() {\r\n    return this.config.key;\r\n  }\r\n\r\n  get id() {\r\n    return this.config.id;\r\n  }\r\n\r\n  get isPermanentlyHidden() {\r\n    return this.config.hideAt < GameEnd.endState && !GameEnd.creditsClosed;\r\n  }\r\n\r\n  get hidable() {\r\n    return this.config.hidable;\r\n  }\r\n\r\n  get isHidden() {\r\n    if (Enslaved.isRunning || Pelle.hasGalaxyGenerator) return false;\r\n    const hasVisibleSubtab = this.subtabs.some(t => t.isAvailable);\r\n    return (((player.options.hiddenTabBits & (1 << this.id)) !== 0) || !hasVisibleSubtab) && this.hidable;\r\n  }\r\n\r\n  get isUnlocked() {\r\n    return this.config.condition === undefined || this.config.condition();\r\n  }\r\n\r\n  get isAvailable() {\r\n    return !this.isPermanentlyHidden && (this.isOpen || !this.isHidden && this.isUnlocked);\r\n  }\r\n\r\n  get isOpen() {\r\n    return ui.view.tab === this.key;\r\n  }\r\n\r\n  get hasNotification() {\r\n    return this.subtabs.some(tab => tab.hasNotification);\r\n  }\r\n\r\n  show(manual, subtab = undefined) {\r\n    if (!manual && !player.options.automaticTabSwitching || Quote.isOpen) return;\r\n    if (subtab !== undefined) {\r\n      if (!Enslaved.isRunning) subtab.unhideTab();\r\n      this._currentSubtab = subtab;\r\n    } else if (ui.view.tab === this.key && ui.view.initialized && manual) {\r\n      this._currentSubtab = cycleThroughSubtabs(this.subtabs, this._currentSubtab);\r\n    } else {\r\n      this._currentSubtab = findLastOpenSubtab(this.id, this.subtabs);\r\n    }\r\n\r\n    if (!this._currentSubtab.isUnlocked) this.resetToUnlocked();\r\n    if (!this._currentSubtab.isAvailable) this.resetToAvailable();\r\n\r\n    ui.view.tab = this.key;\r\n    ui.view.subtab = this._currentSubtab.key;\r\n    const tabNotificationKey = this.key + this._currentSubtab.key;\r\n    if (player.tabNotifications.has(tabNotificationKey)) player.tabNotifications.delete(tabNotificationKey);\r\n\r\n    if (manual) Modal.hideAll();\r\n    EventHub.dispatch(GAME_EVENT.TAB_CHANGED, this, this._currentSubtab);\r\n  }\r\n\r\n  unhideTab() {\r\n    player.options.hiddenTabBits &= ~(1 << this.id);\r\n  }\r\n\r\n  toggleVisibility() {\r\n    if (this.id === Tabs.current.id) return;\r\n    player.options.hiddenTabBits ^= (1 << this.id);\r\n\r\n    checkTabVisibilityForSecretAchievement();\r\n  }\r\n\r\n  resetToAvailable() {\r\n    this._currentSubtab = this.subtabs.find(tab => tab.isAvailable);\r\n    if (this._currentSubtab === undefined) {\r\n      this._currentSubtab = this.subtabs[0];\r\n      this._currentSubtab.unhideTab();\r\n    }\r\n  }\r\n\r\n  resetToUnlocked() {\r\n    this._currentSubtab = this.subtabs.find(tab => tab.isUnlocked);\r\n  }\r\n}\r\n\r\nexport const Tab = GameDatabase.tabs.mapToObject(\r\n  config => config.key,\r\n  config => new TabState(config)\r\n);\r\n\r\nexport const Tabs = (function() {\r\n  return {\r\n    all: Object.values(Tab),\r\n    get current() {\r\n      return Tabs.all.find(tab => tab.isOpen);\r\n    },\r\n    oldUI: [\r\n      Tab.dimensions,\r\n      Tab.options,\r\n      Tab.statistics,\r\n      Tab.achievements,\r\n      Tab.automation,\r\n      Tab.challenges,\r\n      Tab.infinity,\r\n      Tab.eternity,\r\n      Tab.reality,\r\n      Tab.celestials,\r\n      Tab.shop\r\n    ],\r\n    newUI: [\r\n      Tab.dimensions,\r\n      Tab.automation,\r\n      Tab.challenges,\r\n      Tab.infinity,\r\n      Tab.eternity,\r\n      Tab.reality,\r\n      Tab.celestials,\r\n      Tab.achievements,\r\n      Tab.statistics,\r\n      Tab.options,\r\n      Tab.shop\r\n    ],\r\n    get currentUIFormat() {\r\n      return ui.view.newUI ? this.newUI : this.oldUI;\r\n    },\r\n  };\r\n}());\r\n\r\nconst checkTabVisibilityForSecretAchievement = () => {\r\n  // Checks if every unlocked tab that is hidable is hidden\r\n  if (Tabs.all.filter(t => t.isUnlocked && t.hidable).every(t => t.isHidden)) SecretAchievement(47).unlock();\r\n};\r\n\r\nEventHub.logic.on(GAME_EVENT.TAB_CHANGED, () => {\r\n  const currTab = Tabs.current.id;\r\n  player.options.lastOpenTab = currTab;\r\n  player.options.lastOpenSubtab[currTab] = Tabs.current._currentSubtab.id;\r\n});\r\n"]},"metadata":{},"sourceType":"module"}