{"ast":null,"code":"import AutomatorBlockEditor from \"./AutomatorBlockEditor\";\nimport AutomatorControls from \"./AutomatorControls\";\nimport AutomatorTextEditor from \"./AutomatorTextEditor\";\nexport default {\n  name: \"AutomatorEditor\",\n  components: {\n    AutomatorBlockEditor,\n    AutomatorTextEditor,\n    AutomatorControls\n  },\n\n  data() {\n    return {\n      automatorType: 0\n    };\n  },\n\n  computed: {\n    currentScriptID: {\n      get() {\n        return this.$viewModel.tabs.reality.automator.editorScriptID;\n      },\n\n      set(value) {\n        this.$viewModel.tabs.reality.automator.editorScriptID = value;\n      }\n\n    },\n\n    currentScriptContent() {\n      return player.reality.automator.scripts[this.currentScriptID].content;\n    },\n\n    currentScript() {\n      return CodeMirror.Doc(this.currentScriptContent, \"automato\").getValue();\n    },\n\n    isTextAutomator() {\n      return this.automatorType === AUTOMATOR_TYPE.TEXT;\n    }\n\n  },\n\n  created() {\n    this.on$(GAME_EVENT.GAME_LOAD, () => this.onGameLoad());\n    this.on$(GAME_EVENT.AUTOMATOR_SAVE_CHANGED, () => this.onGameLoad());\n    this.updateCurrentScriptID();\n  },\n\n  methods: {\n    update() {\n      this.automatorType = player.reality.automator.type;\n\n      if (!AutomatorBackend.isOn && AutomatorTextUI.editor && AutomatorData.needsRecompile) {\n        AutomatorTextUI.editor.performLint();\n      }\n    },\n\n    onGameLoad() {\n      this.updateCurrentScriptID();\n    },\n\n    updateCurrentScriptID() {\n      const storedScripts = player.reality.automator.scripts;\n      this.currentScriptID = player.reality.automator.state.editorScript; // This shouldn't happen if things are loaded in the right order, but might as well be sure.\n\n      if (storedScripts[this.currentScriptID] === undefined) {\n        this.currentScriptID = Number(Object.keys(storedScripts)[0]);\n        player.reality.automator.state.editorScript = this.currentScriptID;\n        AutomatorData.clearUndoData();\n      } // This may happen if the player has errored textmato scripts and switches to them while in blockmato mode\n\n\n      if (BlockAutomator.hasUnparsableCommands(this.currentScript) && player.reality.automator.type === AUTOMATOR_TYPE.BLOCK) {\n        Modal.message.show(`Some incomplete blocks were unrecognizable - defaulting to text editor.`); // AutomatorBackend.changeModes initializes the new editor and savefile state from BlockAutomator.lines, which\n        // will be empty if this is running upon game load - this ends up wiping the entire script. So we instead set\n        // the new script content external to that method call to keep most of the script intact\n\n        const erroredScript = AutomatorData.currentScriptText();\n        AutomatorBackend.changeModes(this.currentScriptID);\n        player.reality.automator.scripts[this.currentScriptID].content = erroredScript;\n        this.automatorType = AUTOMATOR_TYPE.TEXT;\n      }\n\n      this.$nextTick(() => BlockAutomator.updateEditor(this.currentScript));\n    }\n\n  }\n};","map":{"version":3,"sources":["AutomatorEditor.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport AutomatorBlockEditor from \"./AutomatorBlockEditor\";\r\nimport AutomatorControls from \"./AutomatorControls\";\r\nimport AutomatorTextEditor from \"./AutomatorTextEditor\";\r\n\r\nexport default {\r\n  name: \"AutomatorEditor\",\r\n  components: {\r\n    AutomatorBlockEditor,\r\n    AutomatorTextEditor,\r\n    AutomatorControls,\r\n  },\r\n  data() {\r\n    return {\r\n      automatorType: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    currentScriptID: {\r\n      get() {\r\n        return this.$viewModel.tabs.reality.automator.editorScriptID;\r\n      },\r\n      set(value) {\r\n        this.$viewModel.tabs.reality.automator.editorScriptID = value;\r\n      }\r\n    },\r\n    currentScriptContent() {\r\n      return player.reality.automator.scripts[this.currentScriptID].content;\r\n    },\r\n    currentScript() {\r\n      return CodeMirror.Doc(this.currentScriptContent, \"automato\").getValue();\r\n    },\r\n    isTextAutomator() {\r\n      return this.automatorType === AUTOMATOR_TYPE.TEXT;\r\n    },\r\n  },\r\n  created() {\r\n    this.on$(GAME_EVENT.GAME_LOAD, () => this.onGameLoad());\r\n    this.on$(GAME_EVENT.AUTOMATOR_SAVE_CHANGED, () => this.onGameLoad());\r\n    this.updateCurrentScriptID();\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.automatorType = player.reality.automator.type;\r\n      if (!AutomatorBackend.isOn && AutomatorTextUI.editor && AutomatorData.needsRecompile) {\r\n        AutomatorTextUI.editor.performLint();\r\n      }\r\n    },\r\n    onGameLoad() {\r\n      this.updateCurrentScriptID();\r\n    },\r\n    updateCurrentScriptID() {\r\n      const storedScripts = player.reality.automator.scripts;\r\n      this.currentScriptID = player.reality.automator.state.editorScript;\r\n      // This shouldn't happen if things are loaded in the right order, but might as well be sure.\r\n      if (storedScripts[this.currentScriptID] === undefined) {\r\n        this.currentScriptID = Number(Object.keys(storedScripts)[0]);\r\n        player.reality.automator.state.editorScript = this.currentScriptID;\r\n        AutomatorData.clearUndoData();\r\n      }\r\n      // This may happen if the player has errored textmato scripts and switches to them while in blockmato mode\r\n      if (BlockAutomator.hasUnparsableCommands(this.currentScript) &&\r\n        player.reality.automator.type === AUTOMATOR_TYPE.BLOCK) {\r\n        Modal.message.show(`Some incomplete blocks were unrecognizable - defaulting to text editor.`);\r\n\r\n        // AutomatorBackend.changeModes initializes the new editor and savefile state from BlockAutomator.lines, which\r\n        // will be empty if this is running upon game load - this ends up wiping the entire script. So we instead set\r\n        // the new script content external to that method call to keep most of the script intact\r\n        const erroredScript = AutomatorData.currentScriptText();\r\n        AutomatorBackend.changeModes(this.currentScriptID);\r\n        player.reality.automator.scripts[this.currentScriptID].content = erroredScript;\r\n        this.automatorType = AUTOMATOR_TYPE.TEXT;\r\n      }\r\n      this.$nextTick(() => BlockAutomator.updateEditor(this.currentScript));\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-automator-pane\">\r\n    <AutomatorControls />\r\n    <AutomatorTextEditor\r\n      v-if=\"isTextAutomator\"\r\n      :current-script-id=\"currentScriptID\"\r\n    />\r\n    <AutomatorBlockEditor v-if=\"!isTextAutomator\" />\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-slider-toggle-button {\r\n  display: flex;\r\n  overflow: hidden;\r\n  position: relative;\r\n  align-items: center;\r\n  color: black;\r\n  background-color: #626262;\r\n  border: 0.2rem solid #767676;\r\n  border-radius: 0.2rem;\r\n  margin: 0.4rem;\r\n  padding: 0.3rem 0;\r\n  cursor: pointer;\r\n}\r\n\r\n.s.base--dark .c-slider-toggle-button {\r\n  background-color: #626262;\r\n}\r\n\r\n.c-slider-toggle-button .fas {\r\n  width: 3rem;\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\n.c-slider-toggle-button:before {\r\n  content: \"\";\r\n  width: 3rem;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 0;\r\n  background-color: white;\r\n  border-radius: 0.2rem;\r\n  transition: 0.3s ease all;\r\n}\r\n\r\n.c-slider-toggle-button--right:before {\r\n  left: 3rem;\r\n  background-color: white;\r\n}\r\n\r\n.tutorial--glow:after {\r\n  z-index: 2;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/automator"},"metadata":{},"sourceType":"module"}