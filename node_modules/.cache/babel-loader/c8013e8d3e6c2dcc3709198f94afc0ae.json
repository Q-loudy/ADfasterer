{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.replace-all.js\";\nimport { BitUpgradeState } from \"../game-mechanics\";\nimport wordShift from \"../word-shift\";\nexport const Quote = {\n  addToQueue(quote) {\n    ui.view.quotes.queue.push(quote);\n    if (!ui.view.quotes.current) this.advanceQueue();\n  },\n\n  advanceQueue() {\n    ui.view.quotes.current = ui.view.quotes.queue.shift();\n  },\n\n  showHistory(history) {\n    ui.view.quotes.history = history;\n  },\n\n  clearQueue() {\n    ui.view.quotes.queue = [];\n    ui.view.quotes.current = undefined;\n  },\n\n  clearHistory() {\n    ui.view.quotes.history = undefined;\n  },\n\n  clearAll() {\n    this.clearQueue();\n    this.clearHistory();\n  },\n\n  get isOpen() {\n    return ui.view.quotes.current !== undefined;\n  },\n\n  get isHistoryOpen() {\n    return ui.view.quotes.history !== undefined;\n  }\n\n}; // Gives an array specifying proportions of celestials to blend together on the modal, as a function of time, to\n// provide a smoother transition between different celestials to reduce potential photosensitivity issues\n\nfunction blendCel(cels) {\n  const totalTime = cels.map(cel => cel[1]).sum();\n  const tick = Date.now() / 1000 % totalTime; // Blend the first blendTime seconds with the previous celestial and the last blendTime seconds with the next;\n  // note that this results in a total transition time of 2*blendTime. We specifically set this to be half the duration\n  // of the first entry - this is because in the case of all intervals having the same duration, this guarantees two\n  // blended entries at all points in time.\n\n  const blendTime = cels[0][1] / 2;\n  let start = 0;\n\n  for (let index = 0; index < cels.length; index++) {\n    const prevCel = cels[(index + cels.length - 1) % cels.length],\n          currCel = cels[index],\n          nextCel = cels[(index + 1) % cels.length]; // Durations of time from after last transition and after next transition. May be negative, which is how we\n    // check to see if we're in the correct time interval (last should be positive, next should be negative)\n\n    const lastTime = tick - start,\n          nextTime = lastTime - currCel[1];\n\n    if (nextTime > 0) {\n      start += currCel[1];\n      continue;\n    }\n\n    if (lastTime <= blendTime) {\n      const t = 0.5 * lastTime / blendTime;\n      return [[prevCel[0], 0.5 - t], [currCel[0], 0.5 + t]];\n    }\n\n    if (-nextTime <= blendTime) {\n      const t = 0.5 * nextTime / blendTime;\n      return [[currCel[0], 0.5 - t], [nextCel[0], 0.5 + t]];\n    } // In principle the animation properties should never get to this return case, but we leave it here just in case -\n    // the worst side-effect of reaching here is that some UI elements may appear to lose click detection for a\n    // fraction of a second when transitioning from two blended entries to one\n\n\n    return [[currCel[0], 1]];\n  }\n\n  throw new Error(\"Could not blend celestial fractions in Quote modal\");\n}\n\nclass QuoteLine {\n  constructor(line, parent) {\n    var _line$showCelestialNa;\n\n    this._parent = parent;\n    this._showCelestialName = (_line$showCelestialNa = line.showCelestialName) !== null && _line$showCelestialNa !== void 0 ? _line$showCelestialNa : true;\n    this._celestialArray = line.background ? () => blendCel(line.background) : [[parent.celestial, 1]];\n    const replacementMatch = /\\$([0-9]+)/g;\n    this._line = typeof line === \"string\" ? line // This matches each digit after a $ and replaces it with the wordCycle of an array with the digit it matched.\n    : () => line.text.replaceAll(replacementMatch, (_, i) => wordShift.wordCycle(line[i]));\n  }\n\n  get line() {\n    return typeof this._line === \"function\" ? this._line() : this._line;\n  }\n\n  get celestials() {\n    return typeof this._celestialArray === \"function\" ? this._celestialArray() : this._celestialArray;\n  }\n\n  get celestialSymbols() {\n    return this.celestials.map(c => Celestials[c[0]].symbol);\n  }\n\n  get showCelestialName() {\n    return this._showCelestialName;\n  }\n\n  get celestialName() {\n    return Celestials[this._parent.celestial].displayName;\n  }\n\n}\n\nclass CelQuotes extends BitUpgradeState {\n  constructor(config, celestial) {\n    super(config);\n    this._celestial = celestial;\n    this._lines = config.lines.map(line => new QuoteLine(line, this));\n  }\n\n  get bits() {\n    return player.celestials[this._celestial].quoteBits;\n  }\n\n  set bits(value) {\n    player.celestials[this._celestial].quoteBits = value;\n  }\n\n  get requirement() {\n    var _this$config$requirem, _this$config;\n\n    // If requirement is defined, it is always a function returning a boolean.\n    return (_this$config$requirem = (_this$config = this.config).requirement) === null || _this$config$requirem === void 0 ? void 0 : _this$config$requirem.call(_this$config);\n  }\n\n  get celestial() {\n    return this._celestial;\n  }\n\n  line(id) {\n    return this._lines[id];\n  }\n\n  get totalLines() {\n    return this._lines.length;\n  }\n\n  show() {\n    this.unlock();\n  }\n\n  onUnlock() {\n    this.present();\n  }\n\n  present() {\n    Quote.addToQueue(this);\n  }\n\n}\n\nexport const Quotes = {\n  teresa: mapGameDataToObject(GameDatabase.celestials.quotes.teresa, config => new CelQuotes(config, \"teresa\")),\n  effarig: mapGameDataToObject(GameDatabase.celestials.quotes.effarig, config => new CelQuotes(config, \"effarig\")),\n  enslaved: mapGameDataToObject(GameDatabase.celestials.quotes.enslaved, config => new CelQuotes(config, \"enslaved\")),\n  v: mapGameDataToObject(GameDatabase.celestials.quotes.v, config => new CelQuotes(config, \"v\")),\n  ra: mapGameDataToObject(GameDatabase.celestials.quotes.ra, config => new CelQuotes(config, \"ra\")),\n  laitela: mapGameDataToObject(GameDatabase.celestials.quotes.laitela, config => new CelQuotes(config, \"laitela\")),\n  pelle: mapGameDataToObject(GameDatabase.celestials.quotes.pelle, config => new CelQuotes(config, \"pelle\"))\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/celestials/quotes.js"],"names":["BitUpgradeState","wordShift","Quote","addToQueue","quote","ui","view","quotes","queue","push","current","advanceQueue","shift","showHistory","history","clearQueue","undefined","clearHistory","clearAll","isOpen","isHistoryOpen","blendCel","cels","totalTime","map","cel","sum","tick","Date","now","blendTime","start","index","length","prevCel","currCel","nextCel","lastTime","nextTime","t","Error","QuoteLine","constructor","line","parent","_parent","_showCelestialName","showCelestialName","_celestialArray","background","celestial","replacementMatch","_line","text","replaceAll","_","i","wordCycle","celestials","celestialSymbols","c","Celestials","symbol","celestialName","displayName","CelQuotes","config","_celestial","_lines","lines","bits","player","quoteBits","value","requirement","id","totalLines","show","unlock","onUnlock","present","Quotes","teresa","mapGameDataToObject","GameDatabase","effarig","enslaved","v","ra","laitela","pelle"],"mappings":"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","sourcesContent":["import { BitUpgradeState } from \"../game-mechanics\";\r\nimport wordShift from \"../word-shift\";\r\n\r\nexport const Quote = {\r\n  addToQueue(quote) {\r\n    ui.view.quotes.queue.push(quote);\r\n    if (!ui.view.quotes.current) this.advanceQueue();\r\n  },\r\n  advanceQueue() {\r\n    ui.view.quotes.current = ui.view.quotes.queue.shift();\r\n  },\r\n  showHistory(history) {\r\n    ui.view.quotes.history = history;\r\n  },\r\n  clearQueue() {\r\n    ui.view.quotes.queue = [];\r\n    ui.view.quotes.current = undefined;\r\n  },\r\n  clearHistory() {\r\n    ui.view.quotes.history = undefined;\r\n  },\r\n  clearAll() {\r\n    this.clearQueue();\r\n    this.clearHistory();\r\n  },\r\n  get isOpen() {\r\n    return ui.view.quotes.current !== undefined;\r\n  },\r\n  get isHistoryOpen() {\r\n    return ui.view.quotes.history !== undefined;\r\n  }\r\n};\r\n\r\n// Gives an array specifying proportions of celestials to blend together on the modal, as a function of time, to\r\n// provide a smoother transition between different celestials to reduce potential photosensitivity issues\r\nfunction blendCel(cels) {\r\n  const totalTime = cels.map(cel => cel[1]).sum();\r\n  const tick = (Date.now() / 1000) % totalTime;\r\n\r\n  // Blend the first blendTime seconds with the previous celestial and the last blendTime seconds with the next;\r\n  // note that this results in a total transition time of 2*blendTime. We specifically set this to be half the duration\r\n  // of the first entry - this is because in the case of all intervals having the same duration, this guarantees two\r\n  // blended entries at all points in time.\r\n  const blendTime = cels[0][1] / 2;\r\n  let start = 0;\r\n  for (let index = 0; index < cels.length; index++) {\r\n    const prevCel = cels[(index + cels.length - 1) % cels.length], currCel = cels[index],\r\n      nextCel = cels[(index + 1) % cels.length];\r\n\r\n    // Durations of time from after last transition and after next transition. May be negative, which is how we\r\n    // check to see if we're in the correct time interval (last should be positive, next should be negative)\r\n    const lastTime = tick - start, nextTime = lastTime - currCel[1];\r\n    if (nextTime > 0) {\r\n      start += currCel[1];\r\n      continue;\r\n    }\r\n\r\n    if (lastTime <= blendTime) {\r\n      const t = 0.5 * lastTime / blendTime;\r\n      return [[prevCel[0], 0.5 - t], [currCel[0], 0.5 + t]];\r\n    }\r\n    if (-nextTime <= blendTime) {\r\n      const t = 0.5 * nextTime / blendTime;\r\n      return [[currCel[0], 0.5 - t], [nextCel[0], 0.5 + t]];\r\n    }\r\n\r\n    // In principle the animation properties should never get to this return case, but we leave it here just in case -\r\n    // the worst side-effect of reaching here is that some UI elements may appear to lose click detection for a\r\n    // fraction of a second when transitioning from two blended entries to one\r\n    return [[currCel[0], 1]];\r\n  }\r\n  throw new Error(\"Could not blend celestial fractions in Quote modal\");\r\n}\r\n\r\nclass QuoteLine {\r\n  constructor(line, parent) {\r\n    this._parent = parent;\r\n    this._showCelestialName = line.showCelestialName ?? true;\r\n\r\n    this._celestialArray = line.background\r\n      ? () => blendCel(line.background)\r\n      : [[parent.celestial, 1]];\r\n\r\n    const replacementMatch = /\\$(\\d+)/gu;\r\n\r\n    this._line = typeof line === \"string\"\r\n      ? line\r\n      // This matches each digit after a $ and replaces it with the wordCycle of an array with the digit it matched.\r\n      : () => line.text.replaceAll(replacementMatch, (_, i) => wordShift.wordCycle(line[i]));\r\n  }\r\n\r\n  get line() {\r\n    return typeof this._line === \"function\" ? this._line() : this._line;\r\n  }\r\n\r\n  get celestials() {\r\n    return typeof this._celestialArray === \"function\" ? this._celestialArray() : this._celestialArray;\r\n  }\r\n\r\n  get celestialSymbols() {\r\n    return this.celestials.map(c => Celestials[c[0]].symbol);\r\n  }\r\n\r\n  get showCelestialName() {\r\n    return this._showCelestialName;\r\n  }\r\n\r\n  get celestialName() {\r\n    return Celestials[this._parent.celestial].displayName;\r\n  }\r\n}\r\n\r\nclass CelQuotes extends BitUpgradeState {\r\n  constructor(config, celestial) {\r\n    super(config);\r\n    this._celestial = celestial;\r\n    this._lines = config.lines.map(line => new QuoteLine(line, this));\r\n  }\r\n\r\n  get bits() { return player.celestials[this._celestial].quoteBits; }\r\n  set bits(value) { player.celestials[this._celestial].quoteBits = value; }\r\n\r\n  get requirement() {\r\n    // If requirement is defined, it is always a function returning a boolean.\r\n    return this.config.requirement?.();\r\n  }\r\n\r\n  get celestial() {\r\n    return this._celestial;\r\n  }\r\n\r\n  line(id) {\r\n    return this._lines[id];\r\n  }\r\n\r\n  get totalLines() {\r\n    return this._lines.length;\r\n  }\r\n\r\n  show() { this.unlock(); }\r\n  onUnlock() { this.present(); }\r\n\r\n  present() {\r\n    Quote.addToQueue(this);\r\n  }\r\n}\r\n\r\n\r\nexport const Quotes = {\r\n  teresa: mapGameDataToObject(\r\n    GameDatabase.celestials.quotes.teresa,\r\n    config => new CelQuotes(config, \"teresa\")\r\n  ),\r\n  effarig: mapGameDataToObject(\r\n    GameDatabase.celestials.quotes.effarig,\r\n    config => new CelQuotes(config, \"effarig\")\r\n  ),\r\n  enslaved: mapGameDataToObject(\r\n    GameDatabase.celestials.quotes.enslaved,\r\n    config => new CelQuotes(config, \"enslaved\")\r\n  ),\r\n  v: mapGameDataToObject(\r\n    GameDatabase.celestials.quotes.v,\r\n    config => new CelQuotes(config, \"v\")\r\n  ),\r\n  ra: mapGameDataToObject(\r\n    GameDatabase.celestials.quotes.ra,\r\n    config => new CelQuotes(config, \"ra\")\r\n  ),\r\n  laitela: mapGameDataToObject(\r\n    GameDatabase.celestials.quotes.laitela,\r\n    config => new CelQuotes(config, \"laitela\")\r\n  ),\r\n  pelle: mapGameDataToObject(\r\n    GameDatabase.celestials.quotes.pelle,\r\n    config => new CelQuotes(config, \"pelle\")\r\n  ),\r\n};\r\n"]},"metadata":{},"sourceType":"module"}