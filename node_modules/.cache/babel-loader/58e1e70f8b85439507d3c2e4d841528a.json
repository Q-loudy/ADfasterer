{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport { deepmergeAll } from \"@/utility/deepmerge\"; // WARNING: Don't use state accessors and functions from global scope here, that's not safe in long-term\n\nexport const migrations = {\n  firstRealityMigration: 13,\n  patches: {\n    1: player => {\n      for (let i = 0; i < player.autobuyers.length; i++) {\n        if (player.autobuyers[i] % 1 !== 0) {\n          player.infinityPoints = player.infinityPoints.plus(player.autobuyers[i].cost - 1);\n        }\n      }\n\n      player.autobuyers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n    },\n    2: player => {\n      if (player.dimensionMultDecrease !== 10) {\n        if (player.dimensionMultDecrease === 9) {\n          player.dimensionMultDecrease = 10;\n          player.dimensionMultDecreaseCost = 1e8;\n          player.infinityPoints = player.infinityPoints.plus(1e8);\n        }\n\n        if (player.dimensionMultDecrease === 8) {\n          player.dimensionMultDecrease = 10;\n          player.dimensionMultDecreaseCost = 1e8;\n          player.infinityPoints = player.infinityPoints.plus(2.1e9);\n        }\n\n        if (player.dimensionMultDecrease === 7) {\n          player.dimensionMultDecrease = 10;\n          player.dimensionMultDecreaseCost = 1e8;\n          player.infinityPoints = player.infinityPoints.plus(4.21e10);\n        }\n      }\n    },\n    5: player => {\n      player.newsArray = [];\n    },\n    9: player => {\n      const achs = [];\n      if (player.achievements.delete(\"r22\")) achs.push(\"r35\");\n      if (player.achievements.delete(\"r35\")) achs.push(\"r76\");\n      if (player.achievements.delete(\"r41\")) achs.push(\"r22\");\n      if (player.achievements.delete(\"r76\")) achs.push(\"r41\");\n\n      for (const id of achs) player.achievements.add(id);\n\n      player.replicanti.intervalCost = player.replicanti.intervalCost.dividedBy(1e20);\n    },\n    9.5: player => {\n      if (player.timestudy.studies.includes(191)) player.timestudy.theorem = player.timestudy.theorem.plus(100);\n    },\n    10: player => {\n      if (player.timestudy.studies.includes(72)) {\n        for (let i = 4; i < 8; i++) {\n          player[`infinityDimension${i}`].amount = Decimal.div(player[`infinityDimension${i}`].amount, Sacrifice.totalBoost.pow(0.02));\n        }\n      }\n    },\n    12: player => {\n      const timeDimStartCosts = [null, 1, 5, 100, 1000];\n      const timeDimCostMults = [null, 3, 9, 27, 81]; // Updates TD costs to harsher scaling\n\n      if (player.timeDimension1) {\n        for (let i = 1; i < 5; i++) {\n          if (new Decimal(\"1e300\").lt(player[`timeDimension${i}`].cost)) {\n            player[`timeDimension${i}`].cost = Decimal.pow(timeDimCostMults[i] * 2.2, player[`timeDimension${i}`].bought).times(timeDimStartCosts[i]);\n          }\n        }\n      }\n    },\n    12.1: player => {\n      for (const achievement of player.achievements) {\n        if (achievement.includes(\"s\") && achievement.length <= 3) {\n          player.achievements.splice(player.achievements.indexOf(\"r36\"), 1);\n          break;\n        }\n      }\n    },\n    13: player => {\n      // 12.3 is currently on live, will be updated to 13 after release\n      // Last update version check, fix emoji/cancer issue,\n      // change diff value from 1/10 of a second to 1/1000 of a second, delete pointless properties from player\n      // And all other kinds of stuff\n      player.realTimePlayed = player.totalTimePlayed;\n      player.thisReality = player.totalTimePlayed;\n      player.thisInfinityRealTime = player.thisInfinityTime * 100;\n      player.thisEternityRealTime = player.thisEternity * 100;\n      player.thisRealityRealTime = player.thisReality * 100;\n      player.thisInfinityLastBuyTime = player.thisInfinityTime * 100;\n\n      for (let i = 0; i < 10; i++) {\n        player.lastTenEternities[i][2] = player.lastTenEternities[i][0];\n        player.lastTenRuns[i][2] = player.lastTenRuns[i][0];\n      }\n\n      player.options.newUI = false;\n      window.uiChoiceModalInterval = setInterval(() => {\n        if (GameUI.initialized) {\n          Modal.uiChoice.show();\n          clearInterval(window.uiChoiceModalInterval);\n        }\n      }, 1000);\n      migrations.normalizeTimespans(player);\n      migrations.convertAutobuyerMode(player);\n      migrations.fixChallengeIds(player);\n      migrations.adjustMultCosts(player);\n      migrations.convertAchivementsToNumbers(player);\n      migrations.adjustGameCreatedTime(player);\n      migrations.moveSavedStudyTrees(player);\n      migrations.convertEPMult(player);\n      migrations.moveChallengeInfo(player);\n      migrations.infinitiedConversion(player);\n      migrations.adjustWhy(player);\n      migrations.removeAchPow(player);\n      migrations.adjustSacrificeConfirmation(player);\n      migrations.migrateNotation(player);\n      migrations.fixAutobuyers(player);\n      migrations.removeAutoIPProperties(player);\n      migrations.adjustAchievementVars(player);\n      migrations.uniformDimensions(player);\n      migrations.removeEternityChallGoal(player);\n      migrations.removeTickspeed(player);\n      migrations.removePostC3Reward(player);\n      migrations.renameMoney(player);\n      migrations.moveAutobuyers(player);\n      migrations.convertEternityCountToDecimal(player);\n      migrations.renameDimboosts(player);\n      migrations.migrateConfirmations(player);\n      migrations.removeOtherTickspeedProps(player);\n      migrations.renameNewsOption(player);\n      migrations.removeDimensionCosts(player);\n      migrations.changeC8Handling(player);\n      migrations.convertAchievementsToBits(player);\n      migrations.setNoInfinitiesOrEternitiesThisReality(player);\n      migrations.setTutorialState(player);\n      migrations.migrateLastTenRuns(player);\n      migrations.migrateIPGen(player);\n      migrations.renameCloudVariable(player);\n      migrations.standardizeUncompletedTimes(player);\n      migrations.makeRecords(player);\n      migrations.deleteOldRecords(player);\n      migrations.migrateAutobuyers(player);\n      migrations.migratePlayerVars(player);\n      migrations.consolidateAuto(player);\n      migrations.convertTimeTheoremPurchases(player);\n      migrations.deleteDimboostBulk(player);\n      migrations.deleteFloatingTextOption(player);\n      migrations.refactorDoubleIPRebuyable(player);\n      migrations.infMultNameConversion(player);\n      migrations.convertNews(player);\n      migrations.etercreqConversion(player);\n      migrations.moveTS33(player);\n      migrations.addBestPrestigeCurrency(player);\n      migrations.migrateTheme(player);\n    },\n    // ALL MIGRATIONS BELOW THIS POINT ARE POST-RELEASE FOR THE REALITY UPDATE! THE PRECEEDING MIGRATION (13) IS\n    // THE FIRST MIGRATION WHICH DOES THE MAJORITY OF DATA FORMAT CHANGES\n    14: player => {\n      migrations.reworkBHPulsing(player); // Added glyph auto-sort by level; in order to keep the button state cycling consistent with the sort buttons' UI\n      // order, AUTO_SORT_MODE had to be changed to insert LEVEL mode at the top and shift the others down. This\n      // makes sure that older saves maintain the same settings after this shift\n\n      if (player.reality.autoSort !== 0) player.reality.autoSort++;\n    },\n    15: player => {\n      // Added additional resource tracking in last 10 prestige records and adjusted data format to be more consistent\n      // by reordering to be [game time, real time, prestige currency, prestige count, challenge, ...(other resources)]\n      // Also fixes a migration bug where values could be undefined or null by assigning defaults when necessary\n      for (let i = 0; i < 10; i++) {\n        if (player.records.lastTenInfinities) {\n          var _infRec$, _infRec$2, _infRec$3, _infRec$4;\n\n          const infRec = player.records.lastTenInfinities[i];\n          player.records.recentInfinities[i] = [(_infRec$ = infRec[0]) !== null && _infRec$ !== void 0 ? _infRec$ : Number.MAX_VALUE, Number((_infRec$2 = infRec[3]) !== null && _infRec$2 !== void 0 ? _infRec$2 : Number.MAX_VALUE), new Decimal((_infRec$3 = infRec[1]) !== null && _infRec$3 !== void 0 ? _infRec$3 : 1), new Decimal((_infRec$4 = infRec[2]) !== null && _infRec$4 !== void 0 ? _infRec$4 : 1), \"\"];\n        }\n\n        if (player.records.lastTenEternities) {\n          var _eterRec$, _eterRec$2, _eterRec$3, _eterRec$4;\n\n          const eterRec = player.records.lastTenEternities[i];\n          player.records.recentEternities[i] = [(_eterRec$ = eterRec[0]) !== null && _eterRec$ !== void 0 ? _eterRec$ : Number.MAX_VALUE, Number((_eterRec$2 = eterRec[3]) !== null && _eterRec$2 !== void 0 ? _eterRec$2 : Number.MAX_VALUE), new Decimal((_eterRec$3 = eterRec[1]) !== null && _eterRec$3 !== void 0 ? _eterRec$3 : 1), new Decimal((_eterRec$4 = eterRec[2]) !== null && _eterRec$4 !== void 0 ? _eterRec$4 : 1), \"\", new Decimal(0)];\n        }\n\n        if (player.records.lastTenRealities) {\n          var _realRec$, _realRec$2, _realRec$3, _realRec$4;\n\n          const realRec = player.records.lastTenRealities[i];\n          player.records.recentRealities[i] = [(_realRec$ = realRec[0]) !== null && _realRec$ !== void 0 ? _realRec$ : Number.MAX_VALUE, Number((_realRec$2 = realRec[3]) !== null && _realRec$2 !== void 0 ? _realRec$2 : Number.MAX_VALUE), new Decimal((_realRec$3 = realRec[1]) !== null && _realRec$3 !== void 0 ? _realRec$3 : 1), (_realRec$4 = realRec[2]) !== null && _realRec$4 !== void 0 ? _realRec$4 : 1, \"\", 0, 0];\n        }\n      }\n\n      delete player.records.lastTenInfinities;\n      delete player.records.lastTenEternities;\n      delete player.records.lastTenRealities;\n      delete player.options.showLastTenResourceGain; // Fixes a desync which occasionally causes unique > total seen due to total not being updated properly\n\n      if (player.news.seen) {\n        let unique = 0;\n\n        for (const bitmaskArray of Object.values(player.news.seen)) {\n          for (const bitmask of bitmaskArray) {\n            unique += countValuesFromBitmask(bitmask);\n          }\n        }\n\n        player.news.totalSeen = Math.max(player.news.totalSeen, unique);\n      }\n    },\n    16: player => {\n      // Migrate perk layouts to the new format which has more than a boolean toggle\n      player.options.perkLayout = player.options.fixedPerkStartingPos ? 0 : 1;\n      delete player.options.fixedPerkStartingPos; // This won't preserve *current* glyph choices, but is necessary to give uniformity moving forward. We need to\n      // prevent either seed from being 0 due to it being a special case that freezes up the RNG code\n\n      player.reality.initialSeed = player.reality.seed;\n      if (player.reality.initialSeed === 0) player.reality.initialSeed = 1; // In order to add cross-run speedrun time tracking without inflating savefile size too much, there was a\n      // refactor which changed the format from an object with a bunch of named props, to an array of times using\n      // the key-id pairs in GameDatabase.speedrunMilestones\n\n      const newArr = Array.repeat(0, 26);\n\n      for (const entry of GameDatabase.speedrunMilestones) {\n        newArr[entry.id] = player.speedrun.records[entry.key];\n      }\n\n      player.speedrun.records = newArr;\n      player.speedrun.seedSelection = SPEEDRUN_SEED_STATE.UNKNOWN; // This contains redundant info and was never cleaned up during the initial implementation\n\n      delete player.speedrun.milestones; // Add more glyph presets (older version had only 5, now default is 7)\n\n      while (player.reality.glyphs.sets.length < 7) {\n        player.reality.glyphs.sets.push({\n          name: \"\",\n          glyphs: []\n        });\n      }\n    },\n    17: player => {\n      var _player$options$curre;\n\n      // Moved all multiplier tab attributes to be scoped, and added replicanti subtab in the middle to preserve\n      // progression order - shift it up as needed in order to keep players on the same subtab\n      const oldSubtab = (_player$options$curre = player.options.currentMultiplierSubtab) !== null && _player$options$curre !== void 0 ? _player$options$curre : 0;\n      player.options.multiplierTab.currTab = oldSubtab + (oldSubtab > 5 ? 1 : 0);\n      delete player.options.currentMultiplierSubtab;\n    },\n    18: player => {\n      // These two props are technically redundant in their values, but we always update both in tandem in order\n      // to ensure a consistent UI sort order. However, before this version the sort order didn't exist, so we have\n      // to immediately fill it\n      player.reality.automator.constantSortOrder = Object.keys(player.reality.automator.constants);\n    },\n    19: player => {\n      // This was removed in favor of the more generic \"Exit challenge\" modal, but a few references were missing and\n      // this prop was left in the save file instead of being cleaned up\n      delete player.options.confirmations.resetCelestial;\n    },\n    20: player => {\n      var _effarig$mode, _effarig$glyphTrashMo, _effarig$simpleEffect;\n\n      // GLYPH FILTER INTERNAL FORMAT REFACTOR\n      // For the case of importing a save created before the reality update, many of these props are undefined due to\n      // having never been in the player object in the first place. In this case we fill with defaults, which are mostly\n      // zeroes. Otherwise we do our best to transfer over all the data we can\n      // Move all the filter props out of celestial/effarig scope and into reality/glyph scope, renaming a few of them.\n      const effarig = player.celestials.effarig;\n      player.reality.glyphs.filter = {\n        select: (_effarig$mode = effarig === null || effarig === void 0 ? void 0 : effarig.mode) !== null && _effarig$mode !== void 0 ? _effarig$mode : 0,\n        trash: (_effarig$glyphTrashMo = effarig === null || effarig === void 0 ? void 0 : effarig.glyphTrashMode) !== null && _effarig$glyphTrashMo !== void 0 ? _effarig$glyphTrashMo : 0,\n        simple: (_effarig$simpleEffect = effarig === null || effarig === void 0 ? void 0 : effarig.simpleEffectCount) !== null && _effarig$simpleEffect !== void 0 ? _effarig$simpleEffect : 0\n      }; // There are a few big things going on in this loop which are annotated within, but this largely transfers all the\n      // old filter data into the new prop\n\n      const reducedFilter = {};\n      const effectDB = Object.values(GameDatabase.reality.glyphEffects); // The previous filter format had entries for companion/reality/cursed glyphs, which are removed by only copying\n      // the types in ALCHEMY_BASIC_GLYPH_TYPES. Any errors which show up elsewhere for have also been resolved\n\n      for (const type of ALCHEMY_BASIC_GLYPH_TYPES) {\n        var _effarig$glyphScoreSe, _oldData$rarityThresh, _oldData$scoreThresho, _oldData$effectCount;\n\n        const oldData = (_effarig$glyphScoreSe = effarig.glyphScoreSettings) === null || _effarig$glyphScoreSe === void 0 ? void 0 : _effarig$glyphScoreSe.types[type];\n        const typeEffects = effectDB.filter(t => t.glyphTypes.includes(type)).sort((a, b) => a.bitmaskIndex - b.bitmaskIndex); // Two of these effects were renamed to be shorter\n\n        reducedFilter[type] = {\n          rarity: (_oldData$rarityThresh = oldData === null || oldData === void 0 ? void 0 : oldData.rarityThreshold) !== null && _oldData$rarityThresh !== void 0 ? _oldData$rarityThresh : 0,\n          score: (_oldData$scoreThresho = oldData === null || oldData === void 0 ? void 0 : oldData.scoreThreshold) !== null && _oldData$scoreThresho !== void 0 ? _oldData$scoreThresho : 0,\n          effectCount: (_oldData$effectCount = oldData === null || oldData === void 0 ? void 0 : oldData.effectCount) !== null && _oldData$effectCount !== void 0 ? _oldData$effectCount : 0\n        }; // These all used to stored as { effectKey: value } where effectKey is the ID string \"powerpow\" or similar,\n        // but have now been refactored to be stored as a bitmask and Number array instead. This significantly shortens\n        // filter data for serialization into glyph filter export strings\n\n        reducedFilter[type].specifiedMask = 0;\n        reducedFilter[type].effectScores = [];\n        if (!oldData) continue;\n\n        for (const effect of typeEffects) {\n          // The way we filter to generate typeEffects also gives an undefined entry which needs to be ignored\n          if (!effect) continue;\n          reducedFilter[type].specifiedMask |= oldData.effectChoices[effect.id] ? 1 << effect.bitmaskIndex : 0;\n          reducedFilter[type].effectScores.push(oldData.effectScores[effect.id]);\n        }\n      }\n\n      player.reality.glyphs.filter.types = reducedFilter; // Remove the old data after copying it all over\n\n      delete player.celestials.effarig.glyphScoreSettings;\n      delete player.celestials.effarig.glyphTrashMode; // EFFARIG GLYPH INTERNAL CHANGE\n      // In order to display all effarig glyph effects in \"celestial order\" we needed to either special-case a ton\n      // of UI code, or migrate all existing saves - the latter option seems safer and less likely to lead to repeated\n      // bug reports related to Vue reactivity. Worst case scenario if something is incorrect here is that some people\n      // will have some slightly weird saves. We don't need to modify the glyph filter settings here because these are\n      // migrated above by their effect keys; this properly places them into the correct bit positions automatically\n\n      const updateBitmask = bitmask => {\n        const modifiedBits = [20, 21, 22].map(b => 1 << b).sum();\n        const foundBits = [20, 21, 22].map(b => (bitmask & 1 << b) !== 0);\n        foundBits.push(foundBits.shift());\n        let newSubmask = 0;\n\n        for (let bit = 20; bit <= 22; bit++) {\n          if (foundBits[bit - 20]) newSubmask |= 1 << bit;\n        }\n\n        return bitmask & ~modifiedBits | newSubmask;\n      };\n\n      const allGlyphs = player.reality.glyphs.active.concat(player.reality.glyphs.inventory);\n\n      for (const glyph of allGlyphs) glyph.effects = updateBitmask(glyph.effects); // We also need to update glyphs that appear in the statistics tab records too\n\n\n      const glyphSetProps = [\"RMSet\", \"RMminSet\", \"glyphLevelSet\", \"bestEPSet\", \"speedSet\", \"iMCapSet\", \"laitelaSet\"];\n\n      for (const prop of glyphSetProps) {\n        const glyphSet = player.records.bestReality[prop];\n\n        for (const glyph of glyphSet) glyph.effects = updateBitmask(glyph.effects);\n      } // Glyph light/dark formatting was refactored as well; these values are in reference to the GLYPH_BG_SETTING enum\n\n\n      player.options.glyphBG = player.options.lightGlyphs ? 1 : 2;\n      delete player.options.lightGlyphs;\n    },\n    21: player => {\n      // Added tracking for unlocked ECs even after they re-lock - makes old save data consistent\n      for (let ec = 1; ec <= 12; ec++) {\n        if (player.eternityChalls[`eterc${ec}`] > 0) player.reality.unlockedEC |= 1 << ec;\n      } // Added max RM tracking for cel1 records - also for data consistency (though not 100% accurate)\n\n\n      player.reality.maxRM = new Decimal(player.reality.realityMachines);\n    },\n    22: player => {\n      // Added 3 new perk layouts, inserted before blob\n      if (player.options.perkLayout > 2) player.options.perkLayout += 3; // Changed recent prestige tab to allow for more than just gain rate and absolute gain\n\n      player.options.statTabResources = player.options.showRecentRate ? 1 : 0;\n      delete player.options.showRecentRate; // Added iM cap value to recent realities\n\n      for (let index = 0; index < player.records.recentRealities.length; index++) {\n        player.records.recentRealities[index].push(0);\n      } // This seems to have slipped through in some edge cases due to an old botched migration\n\n\n      if (player.options.themeClassic === undefined) player.options.themeClassic = \"Normal\";\n      if (player.options.themeModern === undefined) player.options.themeModern = \"Normal\"; // The glyph uniformity change did a few things to migrate old seeds as best it could, but it also had the\n      // side-effect of relying on player initialization and deepmerge for randomization in many cases. This made\n      // all existing pre-reality saves get initialized with a seed of 1, which we forcibly randomize here.\n      // A \"valid\" save can potentially get messed up, but this is exceedingly rare and impossible to detect\n\n      const newSeed = Math.floor(Date.now() * Math.random() + 1);\n      if (player.reality.seed === 1) player.reality.seed = newSeed;\n      if (player.reality.initialSeed === 1) player.reality.initialSeed = newSeed;\n    },\n    23: player => {\n      // We missed presets in effarig format migration\n      const updateBitmask = bitmask => {\n        const modifiedBits = [20, 21, 22].map(b => 1 << b).sum();\n        const foundBits = [20, 21, 22].map(b => (bitmask & 1 << b) !== 0);\n        foundBits.push(foundBits.shift());\n        let newSubmask = 0;\n\n        for (let bit = 20; bit <= 22; bit++) {\n          if (foundBits[bit - 20]) newSubmask |= 1 << bit;\n        }\n\n        return bitmask & ~modifiedBits | newSubmask;\n      };\n\n      for (const preset of player.reality.glyphs.sets) {\n        for (const glyph of preset.glyphs) {\n          glyph.effects = updateBitmask(glyph.effects);\n        }\n      }\n    },\n    24: player => {\n      // Automator constants didn't copy over properly across new games - retroactively fix bugged saves as well\n      const definedConstants = Object.keys(player.reality.automator.constants);\n\n      if (definedConstants.length !== player.reality.automator.constantSortOrder.length) {\n        player.reality.automator.constantSortOrder = [...definedConstants];\n      }\n    },\n    25: player => {\n      // If the player has r146 \"Perks of living\" achievement we give them the DAB perk automatically\n      if ((player.achievementBits[13] & 32) !== 0 && !player.reality.perks.has(107)) {\n        player.reality.perks.add(107);\n      } // This update has a rebalance that assumes the 3rd dilation repeatable is unpurchasable in cel7\n\n\n      if (player.celestials.pelle.doomed) player.dilation.rebuyables[3] = 0;\n    }\n  },\n\n  normalizeTimespans(player) {\n    player.realTimePlayed *= 100;\n    player.totalTimePlayed *= 100;\n    player.thisInfinityTime *= 100;\n    player.thisEternity *= 100;\n    player.thisReality *= 100;\n    player.bestInfinityTime = player.bestInfinityTime === 9999999999 ? 999999999999 : player.bestInfinityTime * 100;\n    player.bestEternity = player.bestEternity === 9999999999 ? 999999999999 : player.bestEternity * 100;\n\n    for (let i = 0; i < 10; i++) {\n      player.lastTenEternities[i][0] *= 100;\n      player.lastTenRuns[i][0] *= 100; // Nowadays this would be player.lastTenEternities[i][3] *= 100;\n      // However, this migration is done so early that it was player.lastTenEternities[i][2]\n      // (but late enough that player.lastTenEternities[i][2] is defined).\n\n      player.lastTenEternities[i][2] *= 100;\n      player.lastTenRuns[i][2] *= 100;\n    }\n\n    if (player.challengeTimes) {\n      player.challengeTimes = player.challengeTimes.map(e => e * 100);\n    }\n\n    if (player.infchallengeTimes) {\n      player.infchallengeTimes = player.infchallengeTimes.map(e => e * 100);\n    }\n  },\n\n  convertAutobuyerMode(player) {\n    for (let i = 0; i < 8; i++) {\n      const autobuyer = player.autobuyers[i];\n\n      if (autobuyer % 1 !== 0) {\n        if (autobuyer.target < 10) {\n          autobuyer.target = AUTOBUYER_MODE.BUY_SINGLE;\n        } else {\n          autobuyer.target = AUTOBUYER_MODE.BUY_10;\n        }\n      }\n    }\n\n    const tickspeedAutobuyer = player.autobuyers[8];\n\n    if (tickspeedAutobuyer % 1 !== 0) {\n      if (tickspeedAutobuyer.target < 10) {\n        tickspeedAutobuyer.target = AUTOBUYER_MODE.BUY_SINGLE;\n      } else {\n        tickspeedAutobuyer.target = AUTOBUYER_MODE.BUY_MAX;\n      }\n    }\n  },\n\n  fixChallengeIds(player) {\n    let wasFucked = false;\n\n    function unfuckChallengeId(id) {\n      if (!id.startsWith(\"challenge\")) return id;\n      wasFucked = true;\n      const legacyId = parseInt(id.substr(9), 10);\n      const config = GameDatabase.challenges.normal.find(c => c.legacyId === legacyId);\n      return `challenge${config.id}`;\n    }\n\n    player.currentChallenge = unfuckChallengeId(player.currentChallenge);\n    player.challenges = player.challenges.map(unfuckChallengeId);\n\n    if (wasFucked && player.challengeTimes) {\n      player.challengeTimes = GameDatabase.challenges.normal.slice(1).map(c => player.challengeTimes[c.legacyId - 2]);\n    }\n  },\n\n  adjustMultCosts(player) {\n    if (player.tickSpeedMultDecreaseCost !== undefined) {\n      player.infinityRebuyables[0] = Math.round(Math.log(player.tickSpeedMultDecreaseCost / 3e6) / Math.log(5));\n    }\n\n    if (player.dimensionMultDecreaseCost !== undefined) {\n      player.infinityRebuyables[1] = Math.round(Math.log(player.dimensionMultDecreaseCost / 1e8) / Math.log(5e3));\n    }\n\n    delete player.tickSpeedMultDecrease;\n    delete player.tickSpeedMultDecreaseCost;\n    delete player.dimensionMultDecrease;\n    delete player.dimensionMultDecreaseCost;\n  },\n\n  convertAchivementsToNumbers(player) {\n    if (player.achievements.length > 0 && player.achievements.every(e => typeof e === \"number\")) return;\n    const old = player.achievements; // In this case, player.secretAchievements should be an empty set\n\n    player.achievements = new Set();\n    player.secretAchievements = new Set();\n\n    for (const oldId of old) {\n      const achByName = GameDatabase.achievements.normal.find(a => a.name === oldId);\n\n      if (achByName !== undefined) {\n        // Legacy format\n        player.achievements.add(achByName.id);\n        continue;\n      }\n\n      const newId = parseInt(oldId.slice(1), 10);\n      if (isNaN(newId)) throw new Error(`Could not parse achievement id ${oldId}`);\n\n      if (oldId.startsWith(\"r\")) {\n        if (GameDatabase.achievements.normal.find(a => a.id === newId) === undefined) {\n          throw new Error(`Unrecognized achievement ${oldId}`);\n        }\n\n        player.achievements.add(newId);\n      } else if (oldId.startsWith(\"s\")) {\n        if (GameDatabase.achievements.secret.find(a => a.id === newId) === undefined) {\n          throw new Error(`Unrecognized secret achievement ${newId}`);\n        }\n\n        player.secretAchievements.add(newId);\n      }\n    }\n  },\n\n  adjustGameCreatedTime(player) {\n    player.gameCreatedTime = player.lastUpdate - player.realTimePlayed;\n  },\n\n  moveSavedStudyTrees(player) {\n    for (let num = 1; num <= 3; ++num) {\n      const tree = localStorage.getItem(`studyTree${num}`);\n      if (tree) player.timestudy.presets[num - 1].studies = tree;\n    }\n  },\n\n  convertEPMult(player) {\n    if (player.epmult === undefined) return;\n    const mult = new Decimal(player.epmult);\n    delete player.epmultCost;\n    delete player.epmult; // The multiplier should never be less than 1, but we don't want to break anyone's save\n\n    if (mult.lte(1)) {\n      player.epmultUpgrades = 0;\n      return;\n    }\n\n    player.epmultUpgrades = mult.log(5);\n  },\n\n  moveChallengeInfo(player) {\n    function parseChallengeName(name) {\n      if (name.startsWith(\"challenge\")) {\n        return {\n          type: \"normal\",\n          id: parseInt(name.slice(9), 10)\n        };\n      }\n\n      if (name.startsWith(\"postc\")) {\n        return {\n          type: \"infinity\",\n          id: parseInt(name.slice(5), 10)\n        };\n      }\n\n      if (name !== \"\") throw new Error(`Unrecognized challenge ID ${name}`);\n      return null;\n    }\n\n    if (player.challengeTimes) {\n      for (let i = 0; i < player.challengeTimes.length; ++i) {\n        player.challenge.normal.bestTimes[i] = Math.min(player.challenge.normal.bestTimes[i], player.challengeTimes[i]);\n      }\n\n      delete player.challengeTimes;\n    }\n\n    if (player.infchallengeTimes) {\n      for (let i = 0; i < player.infchallengeTimes.length; ++i) {\n        player.challenge.infinity.bestTimes[i] = Math.min(player.challenge.infinity.bestTimes[i], player.infchallengeTimes[i]);\n      }\n\n      delete player.infchallengeTimes;\n    }\n\n    if (player.currentChallenge !== undefined) {\n      const saved = parseChallengeName(player.currentChallenge);\n      delete player.currentChallenge;\n\n      if (saved) {\n        player.challenge[saved.type].current = saved.id;\n      }\n    }\n\n    if (player.challenges) {\n      for (const fullID of player.challenges) {\n        const parsed = parseChallengeName(fullID);\n        player.challenge[parsed.type].completedBits |= 1 << parsed.id;\n      }\n\n      delete player.challenges;\n    }\n\n    if (player.currentEternityChall !== undefined) {\n      const saved = player.currentEternityChall;\n      delete player.currentEternityChall;\n\n      if (saved.startsWith(\"eterc\")) {\n        player.challenge.eternity.current = parseInt(saved.slice(5), 10);\n      } else if (saved !== \"\") throw new Error(`Unrecognized eternity challenge ${saved}`);\n    }\n\n    if (player.eternityChallUnlocked !== undefined) {\n      player.challenge.eternity.unlocked = player.eternityChallUnlocked;\n      delete player.eternityChallUnlocked;\n    }\n\n    delete player.challengeTarget;\n  },\n\n  adjustWhy(player) {\n    var _player$why;\n\n    player.requirementChecks.permanent.singleTickspeed = (_player$why = player.why) !== null && _player$why !== void 0 ? _player$why : 0;\n    delete player.why;\n  },\n\n  adjustAchievementVars(player) {\n    player.requirementChecks.eternity.onlyAD1 = player.dead;\n    delete player.dead;\n    player.requirementChecks.eternity.onlyAD8 = player.dimlife;\n    delete player.dimlife; // Just initialize all these to false, which is basically always correct.\n\n    player.requirementChecks.reality.noAM = false;\n    player.requirementChecks.eternity.noAD1 = false;\n    player.requirementChecks.infinity.noAD8 = false; // If someone has 0 max replicanti galaxies, they can't have gotten any.\n    // If they have more than 0 max replicanti galaxies, we don't give them\n    // the benefit of the doubt.\n\n    player.requirementChecks.eternity.noRG = player.replicanti.gal === 0;\n    if (player.timestudy.theorem.gt(0) || player.timestudy.studies.length > 0 || player.challenge.eternity.unlocked !== 0) player.requirementChecks.reality.noPurchasedTT = false;\n    if (player.sacrificed.gt(0)) player.requirementChecks.infinity.noSacrifice = false;\n    player.requirementChecks.permanent.emojiGalaxies = player.spreadingCancer;\n    delete player.spreadingCancer;\n  },\n\n  removeAchPow(player) {\n    delete player.achPow;\n  },\n\n  adjustSacrificeConfirmation(player) {\n    if (player.options.sacrificeConfirmation !== undefined) {\n      player.options.confirmations.sacrifice = player.options.sacrificeConfirmation;\n      delete player.options.sacrificeConfirmation;\n    }\n  },\n\n  migrateNotation(player) {\n    const notation = player.options.notation;\n\n    if (notation === undefined) {\n      player.options.notation = \"Standard\";\n    }\n\n    const notationMigration = {\n      \"Mixed\": \"Mixed scientific\",\n      \"Default\": \"Brackets\",\n      \"Emojis\": \"Cancer\"\n    };\n\n    if (notationMigration[notation] !== undefined) {\n      player.options.notation = notationMigration[notation];\n    }\n  },\n\n  fixAutobuyers(player) {\n    for (let i = 0; i < 12; i++) {\n      if (player.autobuyers[i] % 1 !== 0 && player.autobuyers[i].target % 1 !== 0) {\n        player.autobuyers[i].target = AUTOBUYER_MODE.BUY_SINGLE;\n      }\n\n      if (player.autobuyers[i] % 1 !== 0 && (player.autobuyers[i].bulk === undefined || isNaN(player.autobuyers[i].bulk) || player.autobuyers[i].bulk === null)) {\n        player.autobuyers[i].bulk = 1;\n      }\n    }\n\n    if (typeof player.autobuyers[9] !== \"number\" && typeof player.autobuyers[9].bulk !== \"number\") {\n      player.autobuyers[9].bulk = 1;\n    }\n\n    if (player.autobuyers[11] % 1 !== 0 && player.autobuyers[11].priority !== undefined && player.autobuyers[11].priority !== null && player.autobuyers[11].priority !== \"undefined\") {\n      player.autobuyers[11].priority = new Decimal(player.autobuyers[11].priority);\n    }\n  },\n\n  removeAutoIPProperties(player) {\n    delete player.autoIP;\n    delete player.autoTime;\n  },\n\n  removeEternityChallGoal(player) {\n    delete player.eternityChallGoal;\n  },\n\n  removeTickspeed(player) {\n    delete player.tickspeed;\n    player.tickSpeedCost = new Decimal(1000);\n    player.tickspeedMultiplier = new Decimal(10);\n  },\n\n  removeOtherTickspeedProps(player) {\n    delete player.tickSpeedCost;\n    delete player.tickspeedMultiplier;\n  },\n\n  renameNewsOption(player) {\n    player.options.news.enabled = !player.options.newsHidden;\n    delete player.options.newsHidden;\n  },\n\n  removeDimensionCosts(player) {\n    for (const dimension of player.dimensions.antimatter) {\n      delete dimension.cost;\n      delete dimension.costMultiplier;\n    }\n  },\n\n  renameTickspeedPurchaseBumps(player) {\n    if (player.chall9TickspeedPurchaseBumps !== undefined) {\n      player.chall9TickspeedCostBumps = player.chall9TickspeedPurchaseBumps;\n      delete player.chall9TickspeedPurchaseBumps;\n    }\n  },\n\n  removePostC3Reward(player) {\n    delete player.postC3Reward;\n  },\n\n  renameMoney(player) {\n    player.antimatter = new Decimal(player.money);\n    player.totalAntimatter = new Decimal(player.totalmoney);\n    delete player.money;\n    delete player.totalmoney;\n  },\n\n  uniformDimensions(player) {\n    for (let tier = 1; tier <= 8; tier++) {\n      const name = [null, \"first\", \"second\", \"third\", \"fourth\", \"fifth\", \"sixth\", \"seventh\", \"eight\"][tier];\n      const oldProps = {\n        cost: `${name}Cost`,\n        amount: `${name}Amount`,\n        bought: `${name}Bought`,\n        pow: `${name}Pow`\n      };\n      const dimension = player.dimensions.antimatter[tier - 1];\n      dimension.cost = new Decimal(player[oldProps.cost]);\n      dimension.amount = new Decimal(player[oldProps.amount]);\n      dimension.bought = player[oldProps.bought];\n\n      if (player.costmultipliers) {\n        dimension.costMultiplier = new Decimal(player.costMultipliers[tier - 1]);\n      }\n\n      delete player[oldProps.cost];\n      delete player[oldProps.amount];\n      delete player[oldProps.bought];\n      delete player[oldProps.pow];\n    }\n\n    delete player.costMultipliers;\n\n    if (player.infinityDimension1) {\n      for (let tier = 1; tier <= 8; tier++) {\n        const dimension = player.dimensions.infinity[tier - 1];\n        const oldName = `infinityDimension${tier}`;\n        const old = player[oldName];\n        dimension.cost = new Decimal(old.cost);\n        dimension.amount = new Decimal(old.amount);\n        dimension.bought = old.bought;\n        dimension.baseAmount = old.baseAmount;\n        dimension.isUnlocked = player.infDimensionsUnlocked[tier - 1];\n        delete player[oldName];\n      }\n\n      delete player.infDimensionsUnlocked;\n    }\n\n    if (player.timeDimension1) {\n      for (let tier = 1; tier <= 8; tier++) {\n        const dimension = player.dimensions.time[tier - 1];\n        const oldName = `timeDimension${tier}`;\n        const old = player[oldName];\n\n        if (old !== undefined) {\n          dimension.cost = new Decimal(old.cost);\n          dimension.amount = new Decimal(old.amount);\n          dimension.bought = old.bought;\n          delete player[oldName];\n        }\n      }\n    }\n  },\n\n  moveAutobuyers(player) {\n    if (player.autobuyers[11] % 1 !== 0 && player.autobuyers[11].priority !== undefined && player.autobuyers[11].priority !== null && player.autobuyers[11].priority !== \"undefined\") {\n      player.autobuyers[11].priority = new Decimal(player.autobuyers[11].priority);\n    }\n\n    for (let i = 0; i < 8; i++) {\n      const old = player.autobuyers[i];\n      if (old % 1 === 0) continue;\n      const autobuyer = player.auto.antimatterDims.all[i];\n      autobuyer.cost = old.cost;\n      autobuyer.interval = old.interval;\n      autobuyer.bulk = old.bulk;\n      autobuyer.mode = old.target;\n      autobuyer.priority = old.priority;\n      autobuyer.isActive = old.isOn;\n      autobuyer.lastTick = player.realTimePlayed;\n    }\n\n    if (player.autobuyers[8] % 1 !== 0) {\n      const old = player.autobuyers[8];\n      const autobuyer = player.auto.tickspeed;\n      autobuyer.cost = old.cost;\n      autobuyer.interval = old.interval;\n      autobuyer.mode = old.target;\n      autobuyer.priority = old.priority;\n      autobuyer.isActive = old.isOn;\n      autobuyer.lastTick = player.realTimePlayed;\n    }\n\n    if (player.autobuyers[9] % 1 !== 0) {\n      const old = player.autobuyers[9];\n      const autobuyer = player.auto.dimBoost;\n      autobuyer.cost = old.cost;\n      autobuyer.interval = old.interval;\n      autobuyer.maxDimBoosts = old.priority;\n      autobuyer.galaxies = player.overXGalaxies;\n      autobuyer.bulk = old.bulk;\n      autobuyer.buyMaxInterval = old.bulk;\n      autobuyer.isActive = old.isOn;\n      autobuyer.lastTick = player.realTimePlayed;\n    }\n\n    delete player.overXGalaxies;\n\n    if (player.autobuyers[10] % 1 !== 0) {\n      const old = player.autobuyers[10];\n      const autobuyer = player.auto.galaxy;\n      autobuyer.cost = old.cost;\n      autobuyer.interval = old.interval;\n      autobuyer.maxGalaxies = old.priority;\n      autobuyer.buyMaxInterval = old.bulk;\n      autobuyer.buyMax = old.bulk > 0;\n      autobuyer.isActive = old.isOn;\n      autobuyer.lastTick = player.realTimePlayed;\n    }\n\n    if (player.autobuyers[11] % 1 !== 0) {\n      const old = player.autobuyers[11];\n      const autobuyer = player.auto.bigCrunch;\n      autobuyer.cost = old.cost;\n      autobuyer.interval = old.interval;\n      autobuyer.mode = [\"amount\", \"time\", \"relative\"].indexOf(player.autoCrunchMode);\n      const condition = new Decimal(old.priority);\n\n      switch (player.autoCrunchMode) {\n        case \"amount\":\n          autobuyer.amount = condition;\n          break;\n\n        case \"time\":\n          autobuyer.time = condition.lt(Decimal.NUMBER_MAX_VALUE) ? condition.toNumber() : autobuyer.time;\n          break;\n\n        case \"relative\":\n          autobuyer.xHighest = condition;\n          break;\n      }\n\n      autobuyer.isActive = old.isOn;\n      autobuyer.lastTick = player.realTimePlayed;\n    }\n\n    delete player.autoCrunchMode;\n    delete player.autobuyers;\n\n    if (player.autoSacrifice && player.autoSacrifice % 1 !== 0) {\n      const old = player.autoSacrifice;\n      const autobuyer = player.auto.sacrifice;\n      autobuyer.multiplier = new Decimal(old.priority);\n      autobuyer.isActive = old.isOn;\n    }\n\n    delete player.autoSacrifice;\n\n    if (player.eternityBuyer !== undefined) {\n      const old = player.eternityBuyer;\n      const autobuyer = player.auto.eternity; // Development saves have additional modes\n\n      if (player.autoEternityMode === undefined) {\n        autobuyer.time = Number(old.limit);\n      }\n\n      autobuyer.isActive = old.isOn;\n    }\n\n    delete player.eternityBuyer;\n  },\n\n  convertNews(player) {\n    if (player.newsArray === undefined) {\n      player.newsArray = [];\n    } else {\n      player.newsArray = player.newsArray.map(x => typeof x === \"number\" ? `a${x}` : x);\n    }\n\n    const oldNewsArray = new Set(player.newsArray);\n    player.news = {};\n    player.news.seen = {};\n    player.news.specialTickerData = {\n      uselessNewsClicks: 0,\n      paperclips: 0,\n      newsQueuePosition: 1000,\n      eiffelTowerChapter: 0\n    }; // This loop is copied more or less straight out of NewsHandler.addSeenNews with the extraneous comments and\n    // spacing removed. There was something strange with variable scoping that was causing player.news.seen to be\n    // updated within NewsHandler, but then immediately becoming empty again once we were back at this level of\n    // function calls (ie. out of the scope of NewsHandler). Sloppy, but nevertheless it does seem to work.\n\n    const maskLength = NewsHandler.BITS_PER_MASK;\n\n    for (const id of oldNewsArray) {\n      const groups = id.match(/([a-z]+)([0-9]+)/);\n      const type = groups[1];\n      const number = parseInt(groups[2], 10);\n      if (!player.news.seen[type]) player.news.seen[type] = [];\n\n      while (maskLength * player.news.seen[type].length < number) player.news.seen[type].push(0);\n\n      player.news.seen[type][Math.floor(number / maskLength)] |= 1 << number % maskLength;\n    }\n\n    player.news.totalSeen = NewsHandler.uniqueTickersSeen;\n    delete player.newsArray;\n  },\n\n  convertEternityCountToDecimal(player) {\n    player.eternities = new Decimal(player.eternities);\n    player.reality.partEternitied = new Decimal(player.reality.partEternitied);\n  },\n\n  renameDimboosts(player) {\n    player.dimensionBoosts = player.resets;\n    delete player.resets;\n  },\n\n  migrateConfirmations(player) {\n    player.options.confirmations.challenges = !player.options.challConf;\n    delete player.options.challConf;\n    player.options.confirmations.eternity = player.options.eternityconfirm;\n    delete player.options.eternityconfirm; // This did nothing on live and continues to do nothing...?\n\n    delete player.tickDecrease;\n  },\n\n  changeC8Handling(player) {\n    player.chall8TotalSacrifice = Decimal.pow(player.chall11Pow, 2);\n    delete player.chall11Pow;\n  },\n\n  convertAchievementsToBits(player) {\n    // Also switches achievement positions\n    // So far there've been three swaps\n    // (1) a three-way swap of zero deaths, 1 million is a lot, and antitables\n    // (2) a two-way swap of costco sells dimboosts now and 8 nobody got time for that\n    // (3) a two-way swap of long lasting relationship and eternities are the new infinity\n    const swaps = {\n      \"4,3\": \"6,4\",\n      \"6,4\": \"7,7\",\n      \"7,7\": \"4,3\",\n      \"10,1\": \"11,7\",\n      \"11,7\": \"10,1\",\n      \"11,3\": \"12,4\",\n      \"12,4\": \"11,3\"\n    };\n\n    const convertAchievementArray = (newAchievements, oldAchievements, isSecret) => {\n      for (const oldId of oldAchievements) {\n        let row = Math.floor(oldId / 10);\n        let column = oldId % 10;\n\n        if (!isSecret && [row, column].join(\",\") in swaps) {\n          [row, column] = swaps[[row, column].join(\",\")].split(\",\");\n        }\n\n        newAchievements[row - 1] |= 1 << column - 1;\n      } // Handle the changed achievement \"No DLC Required\" correctly (otherwise saves could miss it).\n\n\n      if (!isSecret && (player.infinityUpgrades.size >= 16 || player.eternities.gt(0) || player.realities > 0)) {\n        newAchievements[3] |= 1;\n      } else {\n        newAchievements[3] &= ~1;\n      } // \"Professional Bodybuilder\" (s38) was changed and shouldn't be migrated\n\n\n      if (isSecret) {\n        newAchievements[2] &= ~128;\n      }\n    };\n\n    player.achievementBits = Array.repeat(0, 15);\n    convertAchievementArray(player.achievementBits, player.achievements, false);\n    delete player.achievements;\n    player.secretAchievementBits = Array.repeat(0, 4);\n    convertAchievementArray(player.secretAchievementBits, player.secretAchievements, true);\n    delete player.secretAchievements;\n  },\n\n  setNoInfinitiesOrEternitiesThisReality(player) {\n    player.requirementChecks.reality.noInfinities = player.infinities.eq(0) && player.eternities.eq(0);\n    player.requirementChecks.reality.noEternities = player.eternities.eq(0);\n  },\n\n  setTutorialState(player) {\n    if (player.infinities.gt(0) || player.eternities.gt(0) || player.realities > 0 || player.galaxies > 0) {\n      player.tutorialState = 4;\n    } else if (player.dimensionBoosts > 0) player.tutorialState = TUTORIAL_STATE.GALAXY;\n  },\n\n  migrateLastTenRuns(player) {\n    // Move infinities before time in infinity, and make them Decimal.\n    // I know new Decimal(x).toNumber() can't actually be the best way of converting a value\n    // that might be either Decimal or number to number, but it's the best way I know.\n    player.lastTenRuns = player.lastTenRuns.map(x => [x[0], x[1], new Decimal(x[3]), new Decimal(x[2]).toNumber()]); // Put in a default value of 1 for eternities.\n\n    player.lastTenEternities = player.lastTenEternities.map(x => [x[0], x[1], new Decimal(1), new Decimal(x[2]).toNumber()]);\n  },\n\n  migrateIPGen(player) {\n    player.infinityRebuyables[2] = player.offlineProd / 5;\n    delete player.offlineProd;\n    delete player.offlineProdCost;\n  },\n\n  renameCloudVariable(player) {\n    player.options.cloudEnabled = player.options.cloud;\n    delete player.options.cloud;\n  },\n\n  standardizeUncompletedTimes(player) {\n    if (player.bestInfinityTime === 999999999999) player.bestInfinityTime = Number.MAX_VALUE;\n    if (player.bestInfinityRealTime === 999999999999) player.bestInfinityRealTime = Number.MAX_VALUE;\n    if (player.bestEternity === 999999999999) player.bestEternity = Number.MAX_VALUE;\n\n    for (let i = 0; i < player.challenge.normal.bestTimes.length; i++) {\n      if (player.challenge.normal.bestTimes[i] === 2678400000) player.challenge.normal.bestTimes[i] = Number.MAX_VALUE;\n    }\n\n    for (let i = 0; i < player.challenge.infinity.bestTimes.length; i++) {\n      if (player.challenge.infinity.bestTimes[i] === 2678400000) {\n        player.challenge.infinity.bestTimes[i] = Number.MAX_VALUE;\n      }\n    }\n\n    for (let i = 0; i < 10; i++) {\n      if (player.lastTenRuns[i][0] === 2678400000) player.lastTenRuns[i][0] = Number.MAX_VALUE;\n      if (player.lastTenRuns[i][3] === 26784000) player.lastTenRuns[i][3] = Number.MAX_VALUE;\n      if (player.lastTenEternities[i][0] === 2678400000) player.lastTenEternities[i][0] = Number.MAX_VALUE;\n      if (player.lastTenEternities[i][3] === 26784000) player.lastTenEternities[i][3] = Number.MAX_VALUE;\n    }\n  },\n\n  makeRecords(player) {\n    player.records.gameCreatedTime = player.gameCreatedTime;\n    player.records.totalTimePlayed = player.totalTimePlayed;\n    player.records.realTimePlayed = player.realTimePlayed;\n    player.records.totalAntimatter = new Decimal(player.totalAntimatter);\n    player.records.lastTenInfinities = player.lastTenRuns;\n    player.records.lastTenEternities = player.lastTenEternities;\n\n    for (let i = 0; i < 10; i++) {\n      player.records.lastTenInfinities[i][1] = new Decimal(player.lastTenRuns[i][1]);\n      player.records.lastTenEternities[i][1] = new Decimal(player.lastTenEternities[i][1]);\n    }\n\n    player.records.thisInfinity.time = player.thisInfinityTime;\n    player.records.thisInfinity.realTime = player.thisInfinityTime;\n    player.records.bestInfinity.time = player.bestInfinityTime;\n    player.records.thisEternity.time = player.thisEternity;\n    player.records.thisEternity.realTime = player.thisEternity;\n    player.records.bestEternity.time = player.bestEternity;\n    player.records.thisReality.time = player.thisReality;\n    player.records.thisReality.realTime = player.thisReality;\n  },\n\n  deleteOldRecords(player) {\n    delete player.gameCreatedTime;\n    delete player.totalTimePlayed;\n    delete player.realTimePlayed;\n    delete player.totalAntimatter;\n    delete player.lastTenRuns;\n    delete player.lastTenEternities;\n    delete player.thisInfinityTime;\n    delete player.bestInfinityTime;\n    delete player.thisEternity;\n    delete player.bestEternity;\n    delete player.thisReality;\n  },\n\n  migrateAutobuyers(player) {\n    player.auto.autobuyerOn = player.options.autobuyerOn;\n    delete player.options.bulkOn;\n    delete player.options.autobuyerOn;\n  },\n\n  migratePlayerVars(player) {\n    player.replicanti.boughtGalaxyCap = player.replicanti.gal;\n    player.dilation.totalTachyonGalaxies = player.dilation.freeGalaxies;\n    delete player.replicanti.gal;\n    delete player.dilation.freeGalaxies;\n  },\n\n  consolidateAuto(player) {\n    for (let i = 0; i < 8; i++) {\n      player.auto.infinityDims.all[i].isActive = player.infDimBuyers[i];\n    }\n\n    for (let i = 0; i < 3; i++) {\n      player.auto.replicantiUpgrades.all[i].isActive = player.replicanti.auto[i];\n    }\n\n    player.auto.replicantiGalaxies.isActive = player.replicanti.galaxybuyer;\n    player.auto.ipMultBuyer.isActive = player.infMultBuyer;\n    delete player.infDimBuyers;\n    delete player.auto.infDimTimer;\n    delete player.replicanti.galaxybuyer;\n    delete player.replicanti.auto;\n    delete player.auto.repUpgradeTimer;\n    delete player.infMultBuyer;\n  },\n\n  convertTimeTheoremPurchases(player) {\n    player.timestudy.amBought = new Decimal(player.timestudy.amcost).exponent / 20000 - 1;\n    player.timestudy.ipBought = new Decimal(player.timestudy.ipcost).exponent / 100;\n    player.timestudy.epBought = Math.round(new Decimal(player.timestudy.epcost).log2());\n    delete player.timestudy.amcost;\n    delete player.timestudy.ipcost;\n    delete player.timestudy.epcost;\n  },\n\n  infinitiedConversion(player) {\n    player.infinities = new Decimal(player.infinitied);\n    player.infinitiesBanked = new Decimal(player.infinitiedBank);\n    delete player.infinitied;\n    delete player.infinitiedBank;\n  },\n\n  deleteDimboostBulk(player) {\n    delete player.auto.dimBoost.bulk;\n\n    if (player.infinityUpgrades.delete(\"bulkBoost\")) {\n      player.infinityUpgrades.add(\"autobuyMaxDimboosts\");\n    }\n  },\n\n  removePriority(player) {\n    var _player$auto$antimatt;\n\n    const dims = (_player$auto$antimatt = player.auto.antimatterDims.all) !== null && _player$auto$antimatt !== void 0 ? _player$auto$antimatt : player.auto.antimatterDims;\n\n    for (let i = 0; i < 8; i++) {\n      delete dims[i].priority;\n    }\n\n    delete player.auto.tickspeed.priority;\n  },\n\n  deleteFloatingTextOption(player) {\n    delete player.options.animations.floatingText;\n  },\n\n  refactorDoubleIPRebuyable(player) {\n    // A bit of a hack, but needs to be done this way to not trigger the non-Decimal assignment crash check code\n    const purchases = new Decimal(player.infMult).log2();\n    delete player.infMult;\n    player.infMult = Math.round(purchases);\n    delete player.infMultCost;\n  },\n\n  deletePostChallUnlocked(player) {\n    delete player.postChallUnlocked;\n  },\n\n  infMultNameConversion(player) {\n    player.IPMultPurchases = player.infMult;\n    delete player.infMult;\n  },\n\n  etercreqConversion(player) {\n    if (player.etercreq) player.challenge.eternity.requirementBits |= 1 << player.etercreq;\n    delete player.etercreq;\n  },\n\n  moveTS33(player) {\n    if (player.timestudy.studies.includes(33) && !player.timestudy.studies.includes(22)) {\n      player.timestudy.studies.splice(player.timestudy.studies.indexOf(33), 1);\n      player.timestudy.theorem = new Decimal(player.timestudy.theorem).plus(2);\n    }\n  },\n\n  addBestPrestigeCurrency(player) {\n    player.records.thisReality.maxEP = player.eternityPoints;\n    player.records.bestReality.bestEP = player.eternityPoints;\n    player.records.thisEternity.maxIP = player.infinityPoints;\n    player.records.thisReality.maxIP = player.infinityPoints;\n  },\n\n  migrateTheme(player) {\n    player.options.themeClassic = player.options.theme === undefined ? \"Normal\" : player.options.theme;\n    delete player.options.themes;\n    delete player.options.secretThemeKey;\n  },\n\n  // This change removed the ability to adjust stored time rate after Ra-Nameless 10, instead forcing it to be 99%\n  reworkBHPulsing(player) {\n    delete player.celestials.enslaved.storedFraction;\n  },\n\n  prePatch(saveData) {\n    // Initialize all possibly undefined properties that were not present in\n    // previous versions and which could be overwritten by deepmerge\n    saveData.totalAntimatter = saveData.totalAntimatter || saveData.totalmoney || saveData.money;\n    saveData.thisEternity = saveData.thisEternity || saveData.totalTimePlayed;\n    saveData.version = saveData.version || 0;\n  },\n\n  // Patch up to the specified version; we need this functionality in order to properly migrate both saves from\n  // much older versions and saves from in-development versions\n  patch(saveData, maxVersion) {\n    this.prePatch(saveData); // This adds all the undefined properties to the save which are in player.js\n\n    const player = deepmergeAll([Player.defaultStart, saveData]);\n    const versions = Object.keys(this.patches).map(parseFloat).sort();\n    let version;\n\n    while ((version = versions.find(v => player.version < v && v < maxVersion)) !== undefined) {\n      const patch = this.patches[version];\n      patch(player);\n      player.version = version;\n    }\n\n    return player;\n  },\n\n  patchPreReality(saveData) {\n    return this.patch(saveData, this.firstRealityMigration);\n  },\n\n  patchPostReality(saveData) {\n    // Plus 1 because this the threshold is exclusive (it migrates up to but not including the maxVersion)\n    return this.patch(saveData, Object.keys(migrations.patches).map(k => Number(k)).max() + 1);\n  }\n\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/storage/migrations.js"],"names":["deepmergeAll","migrations","firstRealityMigration","patches","player","i","autobuyers","length","infinityPoints","plus","cost","dimensionMultDecrease","dimensionMultDecreaseCost","newsArray","achs","achievements","delete","push","id","add","replicanti","intervalCost","dividedBy","timestudy","studies","includes","theorem","amount","Decimal","div","Sacrifice","totalBoost","pow","timeDimStartCosts","timeDimCostMults","timeDimension1","lt","bought","times","achievement","splice","indexOf","realTimePlayed","totalTimePlayed","thisReality","thisInfinityRealTime","thisInfinityTime","thisEternityRealTime","thisEternity","thisRealityRealTime","thisInfinityLastBuyTime","lastTenEternities","lastTenRuns","options","newUI","window","uiChoiceModalInterval","setInterval","GameUI","initialized","Modal","uiChoice","show","clearInterval","normalizeTimespans","convertAutobuyerMode","fixChallengeIds","adjustMultCosts","convertAchivementsToNumbers","adjustGameCreatedTime","moveSavedStudyTrees","convertEPMult","moveChallengeInfo","infinitiedConversion","adjustWhy","removeAchPow","adjustSacrificeConfirmation","migrateNotation","fixAutobuyers","removeAutoIPProperties","adjustAchievementVars","uniformDimensions","removeEternityChallGoal","removeTickspeed","removePostC3Reward","renameMoney","moveAutobuyers","convertEternityCountToDecimal","renameDimboosts","migrateConfirmations","removeOtherTickspeedProps","renameNewsOption","removeDimensionCosts","changeC8Handling","convertAchievementsToBits","setNoInfinitiesOrEternitiesThisReality","setTutorialState","migrateLastTenRuns","migrateIPGen","renameCloudVariable","standardizeUncompletedTimes","makeRecords","deleteOldRecords","migrateAutobuyers","migratePlayerVars","consolidateAuto","convertTimeTheoremPurchases","deleteDimboostBulk","deleteFloatingTextOption","refactorDoubleIPRebuyable","infMultNameConversion","convertNews","etercreqConversion","moveTS33","addBestPrestigeCurrency","migrateTheme","reworkBHPulsing","reality","autoSort","records","lastTenInfinities","infRec","recentInfinities","Number","MAX_VALUE","eterRec","recentEternities","lastTenRealities","realRec","recentRealities","showLastTenResourceGain","news","seen","unique","bitmaskArray","Object","values","bitmask","countValuesFromBitmask","totalSeen","Math","max","perkLayout","fixedPerkStartingPos","initialSeed","seed","newArr","Array","repeat","entry","GameDatabase","speedrunMilestones","speedrun","key","seedSelection","SPEEDRUN_SEED_STATE","UNKNOWN","milestones","glyphs","sets","name","oldSubtab","currentMultiplierSubtab","multiplierTab","currTab","automator","constantSortOrder","keys","constants","confirmations","resetCelestial","effarig","celestials","filter","select","mode","trash","glyphTrashMode","simple","simpleEffectCount","reducedFilter","effectDB","glyphEffects","type","ALCHEMY_BASIC_GLYPH_TYPES","oldData","glyphScoreSettings","types","typeEffects","t","glyphTypes","sort","a","b","bitmaskIndex","rarity","rarityThreshold","score","scoreThreshold","effectCount","specifiedMask","effectScores","effect","effectChoices","updateBitmask","modifiedBits","map","sum","foundBits","shift","newSubmask","bit","allGlyphs","active","concat","inventory","glyph","effects","glyphSetProps","prop","glyphSet","bestReality","glyphBG","lightGlyphs","ec","eternityChalls","unlockedEC","maxRM","realityMachines","statTabResources","showRecentRate","index","themeClassic","undefined","themeModern","newSeed","floor","Date","now","random","preset","definedConstants","achievementBits","perks","has","pelle","doomed","dilation","rebuyables","bestInfinityTime","bestEternity","challengeTimes","e","infchallengeTimes","autobuyer","target","AUTOBUYER_MODE","BUY_SINGLE","BUY_10","tickspeedAutobuyer","BUY_MAX","wasFucked","unfuckChallengeId","startsWith","legacyId","parseInt","substr","config","challenges","normal","find","c","currentChallenge","slice","tickSpeedMultDecreaseCost","infinityRebuyables","round","log","tickSpeedMultDecrease","every","old","Set","secretAchievements","oldId","achByName","newId","isNaN","Error","secret","gameCreatedTime","lastUpdate","num","tree","localStorage","getItem","presets","epmult","mult","epmultCost","lte","epmultUpgrades","parseChallengeName","challenge","bestTimes","min","infinity","saved","current","fullID","parsed","completedBits","currentEternityChall","eternity","eternityChallUnlocked","unlocked","challengeTarget","requirementChecks","permanent","singleTickspeed","why","onlyAD1","dead","onlyAD8","dimlife","noAM","noAD1","noAD8","noRG","gal","gt","noPurchasedTT","sacrificed","noSacrifice","emojiGalaxies","spreadingCancer","achPow","sacrificeConfirmation","sacrifice","notation","notationMigration","bulk","priority","autoIP","autoTime","eternityChallGoal","tickspeed","tickSpeedCost","tickspeedMultiplier","enabled","newsHidden","dimension","dimensions","antimatter","costMultiplier","renameTickspeedPurchaseBumps","chall9TickspeedPurchaseBumps","chall9TickspeedCostBumps","postC3Reward","money","totalAntimatter","totalmoney","tier","oldProps","costmultipliers","costMultipliers","infinityDimension1","oldName","baseAmount","isUnlocked","infDimensionsUnlocked","time","auto","antimatterDims","all","interval","isActive","isOn","lastTick","dimBoost","maxDimBoosts","galaxies","overXGalaxies","buyMaxInterval","galaxy","maxGalaxies","buyMax","bigCrunch","autoCrunchMode","condition","NUMBER_MAX_VALUE","toNumber","xHighest","autoSacrifice","multiplier","eternityBuyer","autoEternityMode","limit","x","oldNewsArray","specialTickerData","uselessNewsClicks","paperclips","newsQueuePosition","eiffelTowerChapter","maskLength","NewsHandler","BITS_PER_MASK","groups","match","number","uniqueTickersSeen","eternities","partEternitied","dimensionBoosts","resets","challConf","eternityconfirm","tickDecrease","chall8TotalSacrifice","chall11Pow","swaps","convertAchievementArray","newAchievements","oldAchievements","isSecret","row","column","join","split","infinityUpgrades","size","realities","secretAchievementBits","noInfinities","infinities","eq","noEternities","tutorialState","TUTORIAL_STATE","GALAXY","offlineProd","offlineProdCost","cloudEnabled","cloud","bestInfinityRealTime","thisInfinity","realTime","bestInfinity","autobuyerOn","bulkOn","boughtGalaxyCap","totalTachyonGalaxies","freeGalaxies","infinityDims","infDimBuyers","replicantiUpgrades","replicantiGalaxies","galaxybuyer","ipMultBuyer","infMultBuyer","infDimTimer","repUpgradeTimer","amBought","amcost","exponent","ipBought","ipcost","epBought","epcost","log2","infinitied","infinitiesBanked","infinitiedBank","removePriority","dims","animations","floatingText","purchases","infMult","infMultCost","deletePostChallUnlocked","postChallUnlocked","IPMultPurchases","etercreq","requirementBits","maxEP","eternityPoints","bestEP","maxIP","theme","themes","secretThemeKey","enslaved","storedFraction","prePatch","saveData","version","patch","maxVersion","Player","defaultStart","versions","parseFloat","v","patchPreReality","patchPostReality","k"],"mappings":"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","sourcesContent":["import { deepmergeAll } from \"@/utility/deepmerge\";\r\n\r\n// WARNING: Don't use state accessors and functions from global scope here, that's not safe in long-term\r\nexport const migrations = {\r\n  firstRealityMigration: 13,\r\n  patches: {\r\n    1: player => {\r\n      for (let i = 0; i < player.autobuyers.length; i++) {\r\n        if (player.autobuyers[i] % 1 !== 0) {\r\n          player.infinityPoints = player.infinityPoints.plus(player.autobuyers[i].cost - 1);\r\n        }\r\n      }\r\n      player.autobuyers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n    },\r\n    2: player => {\r\n      if (player.dimensionMultDecrease !== 10) {\r\n        if (player.dimensionMultDecrease === 9) {\r\n          player.dimensionMultDecrease = 10;\r\n          player.dimensionMultDecreaseCost = 1e8;\r\n          player.infinityPoints = player.infinityPoints.plus(1e8);\r\n        }\r\n        if (player.dimensionMultDecrease === 8) {\r\n          player.dimensionMultDecrease = 10;\r\n          player.dimensionMultDecreaseCost = 1e8;\r\n          player.infinityPoints = player.infinityPoints.plus(2.1e9);\r\n        }\r\n        if (player.dimensionMultDecrease === 7) {\r\n          player.dimensionMultDecrease = 10;\r\n          player.dimensionMultDecreaseCost = 1e8;\r\n          player.infinityPoints = player.infinityPoints.plus(4.21e10);\r\n        }\r\n      }\r\n    },\r\n    5: player => {\r\n      player.newsArray = [];\r\n    },\r\n    9: player => {\r\n      const achs = [];\r\n      if (player.achievements.delete(\"r22\")) achs.push(\"r35\");\r\n      if (player.achievements.delete(\"r35\")) achs.push(\"r76\");\r\n      if (player.achievements.delete(\"r41\")) achs.push(\"r22\");\r\n      if (player.achievements.delete(\"r76\")) achs.push(\"r41\");\r\n      for (const id of achs) player.achievements.add(id);\r\n      player.replicanti.intervalCost = player.replicanti.intervalCost.dividedBy(1e20);\r\n    },\r\n    9.5: player => {\r\n      if (player.timestudy.studies.includes(191)) player.timestudy.theorem = player.timestudy.theorem.plus(100);\r\n    },\r\n    10: player => {\r\n      if (player.timestudy.studies.includes(72)) {\r\n        for (let i = 4; i < 8; i++) {\r\n          player[`infinityDimension${i}`].amount = Decimal.div(player[`infinityDimension${i}`].amount,\r\n            Sacrifice.totalBoost.pow(0.02));\r\n        }\r\n      }\r\n    },\r\n    12: player => {\r\n      const timeDimStartCosts = [null, 1, 5, 100, 1000];\r\n      const timeDimCostMults = [null, 3, 9, 27, 81];\r\n      // Updates TD costs to harsher scaling\r\n      if (player.timeDimension1) {\r\n        for (let i = 1; i < 5; i++) {\r\n          if (new Decimal(\"1e300\").lt(player[`timeDimension${i}`].cost)) {\r\n            player[`timeDimension${i}`].cost = Decimal.pow(\r\n              timeDimCostMults[i] * 2.2,\r\n              player[`timeDimension${i}`].bought\r\n            ).times(timeDimStartCosts[i]);\r\n          }\r\n        }\r\n      }\r\n    },\r\n    12.1: player => {\r\n      for (const achievement of player.achievements) {\r\n        if (achievement.includes(\"s\") && achievement.length <= 3) {\r\n          player.achievements.splice(player.achievements.indexOf(\"r36\"), 1);\r\n          break;\r\n        }\r\n      }\r\n    },\r\n    13: player => {\r\n      // 12.3 is currently on live, will be updated to 13 after release\r\n\r\n      // Last update version check, fix emoji/cancer issue,\r\n      // change diff value from 1/10 of a second to 1/1000 of a second, delete pointless properties from player\r\n      // And all other kinds of stuff\r\n      player.realTimePlayed = player.totalTimePlayed;\r\n      player.thisReality = player.totalTimePlayed;\r\n      player.thisInfinityRealTime = player.thisInfinityTime * 100;\r\n      player.thisEternityRealTime = player.thisEternity * 100;\r\n      player.thisRealityRealTime = player.thisReality * 100;\r\n      player.thisInfinityLastBuyTime = player.thisInfinityTime * 100;\r\n      for (let i = 0; i < 10; i++) {\r\n        player.lastTenEternities[i][2] = player.lastTenEternities[i][0];\r\n        player.lastTenRuns[i][2] = player.lastTenRuns[i][0];\r\n      }\r\n      player.options.newUI = false;\r\n      window.uiChoiceModalInterval = setInterval(() => {\r\n        if (GameUI.initialized) {\r\n          Modal.uiChoice.show();\r\n          clearInterval(window.uiChoiceModalInterval);\r\n        }\r\n      }, 1000);\r\n\r\n      migrations.normalizeTimespans(player);\r\n      migrations.convertAutobuyerMode(player);\r\n      migrations.fixChallengeIds(player);\r\n      migrations.adjustMultCosts(player);\r\n      migrations.convertAchivementsToNumbers(player);\r\n      migrations.adjustGameCreatedTime(player);\r\n      migrations.moveSavedStudyTrees(player);\r\n      migrations.convertEPMult(player);\r\n      migrations.moveChallengeInfo(player);\r\n      migrations.infinitiedConversion(player);\r\n      migrations.adjustWhy(player);\r\n      migrations.removeAchPow(player);\r\n      migrations.adjustSacrificeConfirmation(player);\r\n      migrations.migrateNotation(player);\r\n      migrations.fixAutobuyers(player);\r\n      migrations.removeAutoIPProperties(player);\r\n      migrations.adjustAchievementVars(player);\r\n      migrations.uniformDimensions(player);\r\n      migrations.removeEternityChallGoal(player);\r\n      migrations.removeTickspeed(player);\r\n      migrations.removePostC3Reward(player);\r\n      migrations.renameMoney(player);\r\n      migrations.moveAutobuyers(player);\r\n      migrations.convertEternityCountToDecimal(player);\r\n      migrations.renameDimboosts(player);\r\n      migrations.migrateConfirmations(player);\r\n      migrations.removeOtherTickspeedProps(player);\r\n      migrations.renameNewsOption(player);\r\n      migrations.removeDimensionCosts(player);\r\n      migrations.changeC8Handling(player);\r\n      migrations.convertAchievementsToBits(player);\r\n      migrations.setNoInfinitiesOrEternitiesThisReality(player);\r\n      migrations.setTutorialState(player);\r\n      migrations.migrateLastTenRuns(player);\r\n      migrations.migrateIPGen(player);\r\n      migrations.renameCloudVariable(player);\r\n      migrations.standardizeUncompletedTimes(player);\r\n      migrations.makeRecords(player);\r\n      migrations.deleteOldRecords(player);\r\n      migrations.migrateAutobuyers(player);\r\n      migrations.migratePlayerVars(player);\r\n      migrations.consolidateAuto(player);\r\n      migrations.convertTimeTheoremPurchases(player);\r\n      migrations.deleteDimboostBulk(player);\r\n      migrations.deleteFloatingTextOption(player);\r\n      migrations.refactorDoubleIPRebuyable(player);\r\n      migrations.infMultNameConversion(player);\r\n      migrations.convertNews(player);\r\n      migrations.etercreqConversion(player);\r\n      migrations.moveTS33(player);\r\n      migrations.addBestPrestigeCurrency(player);\r\n      migrations.migrateTheme(player);\r\n    },\r\n\r\n    // ALL MIGRATIONS BELOW THIS POINT ARE POST-RELEASE FOR THE REALITY UPDATE! THE PRECEEDING MIGRATION (13) IS\r\n    // THE FIRST MIGRATION WHICH DOES THE MAJORITY OF DATA FORMAT CHANGES\r\n\r\n    14: player => {\r\n      migrations.reworkBHPulsing(player);\r\n\r\n      // Added glyph auto-sort by level; in order to keep the button state cycling consistent with the sort buttons' UI\r\n      // order, AUTO_SORT_MODE had to be changed to insert LEVEL mode at the top and shift the others down. This\r\n      // makes sure that older saves maintain the same settings after this shift\r\n      if (player.reality.autoSort !== 0) player.reality.autoSort++;\r\n    },\r\n    15: player => {\r\n      // Added additional resource tracking in last 10 prestige records and adjusted data format to be more consistent\r\n      // by reordering to be [game time, real time, prestige currency, prestige count, challenge, ...(other resources)]\r\n      // Also fixes a migration bug where values could be undefined or null by assigning defaults when necessary\r\n      for (let i = 0; i < 10; i++) {\r\n        if (player.records.lastTenInfinities) {\r\n          const infRec = player.records.lastTenInfinities[i];\r\n          player.records.recentInfinities[i] = [\r\n            infRec[0] ?? Number.MAX_VALUE,\r\n            Number(infRec[3] ?? Number.MAX_VALUE),\r\n            new Decimal(infRec[1] ?? 1),\r\n            new Decimal(infRec[2] ?? 1),\r\n            \"\"\r\n          ];\r\n        }\r\n\r\n        if (player.records.lastTenEternities) {\r\n          const eterRec = player.records.lastTenEternities[i];\r\n          player.records.recentEternities[i] = [\r\n            eterRec[0] ?? Number.MAX_VALUE,\r\n            Number(eterRec[3] ?? Number.MAX_VALUE),\r\n            new Decimal(eterRec[1] ?? 1),\r\n            new Decimal(eterRec[2] ?? 1),\r\n            \"\",\r\n            new Decimal(0)\r\n          ];\r\n        }\r\n\r\n        if (player.records.lastTenRealities) {\r\n          const realRec = player.records.lastTenRealities[i];\r\n          player.records.recentRealities[i] = [\r\n            realRec[0] ?? Number.MAX_VALUE,\r\n            Number(realRec[3] ?? Number.MAX_VALUE),\r\n            new Decimal(realRec[1] ?? 1),\r\n            realRec[2] ?? 1,\r\n            \"\",\r\n            0,\r\n            0\r\n          ];\r\n        }\r\n      }\r\n\r\n      delete player.records.lastTenInfinities;\r\n      delete player.records.lastTenEternities;\r\n      delete player.records.lastTenRealities;\r\n      delete player.options.showLastTenResourceGain;\r\n\r\n      // Fixes a desync which occasionally causes unique > total seen due to total not being updated properly\r\n      if (player.news.seen) {\r\n        let unique = 0;\r\n        for (const bitmaskArray of Object.values(player.news.seen)) {\r\n          for (const bitmask of bitmaskArray) {\r\n            unique += countValuesFromBitmask(bitmask);\r\n          }\r\n        }\r\n        player.news.totalSeen = Math.max(player.news.totalSeen, unique);\r\n      }\r\n    },\r\n    16: player => {\r\n      // Migrate perk layouts to the new format which has more than a boolean toggle\r\n      player.options.perkLayout = player.options.fixedPerkStartingPos ? 0 : 1;\r\n      delete player.options.fixedPerkStartingPos;\r\n\r\n      // This won't preserve *current* glyph choices, but is necessary to give uniformity moving forward. We need to\r\n      // prevent either seed from being 0 due to it being a special case that freezes up the RNG code\r\n      player.reality.initialSeed = player.reality.seed;\r\n      if (player.reality.initialSeed === 0) player.reality.initialSeed = 1;\r\n\r\n      // In order to add cross-run speedrun time tracking without inflating savefile size too much, there was a\r\n      // refactor which changed the format from an object with a bunch of named props, to an array of times using\r\n      // the key-id pairs in GameDatabase.speedrunMilestones\r\n      const newArr = Array.repeat(0, 26);\r\n      for (const entry of GameDatabase.speedrunMilestones) {\r\n        newArr[entry.id] = player.speedrun.records[entry.key];\r\n      }\r\n      player.speedrun.records = newArr;\r\n      player.speedrun.seedSelection = SPEEDRUN_SEED_STATE.UNKNOWN;\r\n\r\n      // This contains redundant info and was never cleaned up during the initial implementation\r\n      delete player.speedrun.milestones;\r\n\r\n      // Add more glyph presets (older version had only 5, now default is 7)\r\n      while (player.reality.glyphs.sets.length < 7) {\r\n        player.reality.glyphs.sets.push({ name: \"\", glyphs: [] });\r\n      }\r\n    },\r\n    17: player => {\r\n      // Moved all multiplier tab attributes to be scoped, and added replicanti subtab in the middle to preserve\r\n      // progression order - shift it up as needed in order to keep players on the same subtab\r\n      const oldSubtab = player.options.currentMultiplierSubtab ?? 0;\r\n      player.options.multiplierTab.currTab = oldSubtab + (oldSubtab > 5 ? 1 : 0);\r\n      delete player.options.currentMultiplierSubtab;\r\n    },\r\n    18: player => {\r\n      // These two props are technically redundant in their values, but we always update both in tandem in order\r\n      // to ensure a consistent UI sort order. However, before this version the sort order didn't exist, so we have\r\n      // to immediately fill it\r\n      player.reality.automator.constantSortOrder = Object.keys(player.reality.automator.constants);\r\n    },\r\n    19: player => {\r\n      // This was removed in favor of the more generic \"Exit challenge\" modal, but a few references were missing and\r\n      // this prop was left in the save file instead of being cleaned up\r\n      delete player.options.confirmations.resetCelestial;\r\n    },\r\n    20: player => {\r\n      // GLYPH FILTER INTERNAL FORMAT REFACTOR\r\n      // For the case of importing a save created before the reality update, many of these props are undefined due to\r\n      // having never been in the player object in the first place. In this case we fill with defaults, which are mostly\r\n      // zeroes. Otherwise we do our best to transfer over all the data we can\r\n\r\n      // Move all the filter props out of celestial/effarig scope and into reality/glyph scope, renaming a few of them.\r\n      const effarig = player.celestials.effarig;\r\n      player.reality.glyphs.filter = {\r\n        select: effarig?.mode ?? 0,\r\n        trash: effarig?.glyphTrashMode ?? 0,\r\n        simple: effarig?.simpleEffectCount ?? 0\r\n      };\r\n\r\n      // There are a few big things going on in this loop which are annotated within, but this largely transfers all the\r\n      // old filter data into the new prop\r\n      const reducedFilter = {};\r\n      const effectDB = Object.values(GameDatabase.reality.glyphEffects);\r\n      // The previous filter format had entries for companion/reality/cursed glyphs, which are removed by only copying\r\n      // the types in ALCHEMY_BASIC_GLYPH_TYPES. Any errors which show up elsewhere for have also been resolved\r\n      for (const type of ALCHEMY_BASIC_GLYPH_TYPES) {\r\n        const oldData = effarig.glyphScoreSettings?.types[type];\r\n        const typeEffects = effectDB\r\n          .filter(t => t.glyphTypes.includes(type))\r\n          .sort((a, b) => a.bitmaskIndex - b.bitmaskIndex);\r\n\r\n        // Two of these effects were renamed to be shorter\r\n        reducedFilter[type] = {\r\n          rarity: oldData?.rarityThreshold ?? 0,\r\n          score: oldData?.scoreThreshold ?? 0,\r\n          effectCount: oldData?.effectCount ?? 0,\r\n        };\r\n\r\n        // These all used to stored as { effectKey: value } where effectKey is the ID string \"powerpow\" or similar,\r\n        // but have now been refactored to be stored as a bitmask and Number array instead. This significantly shortens\r\n        // filter data for serialization into glyph filter export strings\r\n        reducedFilter[type].specifiedMask = 0;\r\n        reducedFilter[type].effectScores = [];\r\n        if (!oldData) continue;\r\n        for (const effect of typeEffects) {\r\n          // The way we filter to generate typeEffects also gives an undefined entry which needs to be ignored\r\n          if (!effect) continue;\r\n          reducedFilter[type].specifiedMask |= oldData.effectChoices[effect.id] ? 1 << effect.bitmaskIndex : 0;\r\n          reducedFilter[type].effectScores.push(oldData.effectScores[effect.id]);\r\n        }\r\n      }\r\n      player.reality.glyphs.filter.types = reducedFilter;\r\n\r\n      // Remove the old data after copying it all over\r\n      delete player.celestials.effarig.glyphScoreSettings;\r\n      delete player.celestials.effarig.glyphTrashMode;\r\n\r\n      // EFFARIG GLYPH INTERNAL CHANGE\r\n      // In order to display all effarig glyph effects in \"celestial order\" we needed to either special-case a ton\r\n      // of UI code, or migrate all existing saves - the latter option seems safer and less likely to lead to repeated\r\n      // bug reports related to Vue reactivity. Worst case scenario if something is incorrect here is that some people\r\n      // will have some slightly weird saves. We don't need to modify the glyph filter settings here because these are\r\n      // migrated above by their effect keys; this properly places them into the correct bit positions automatically\r\n      const updateBitmask = bitmask => {\r\n        const modifiedBits = [20, 21, 22].map(b => 1 << b).sum();\r\n        const foundBits = [20, 21, 22].map(b => (bitmask & (1 << b)) !== 0);\r\n        foundBits.push(foundBits.shift());\r\n        let newSubmask = 0;\r\n        for (let bit = 20; bit <= 22; bit++) {\r\n          if (foundBits[bit - 20]) newSubmask |= 1 << bit;\r\n        }\r\n        return (bitmask & ~modifiedBits) | newSubmask;\r\n      };\r\n      const allGlyphs = player.reality.glyphs.active.concat(player.reality.glyphs.inventory);\r\n      for (const glyph of allGlyphs) glyph.effects = updateBitmask(glyph.effects);\r\n\r\n      // We also need to update glyphs that appear in the statistics tab records too\r\n      const glyphSetProps = [\"RMSet\", \"RMminSet\", \"glyphLevelSet\", \"bestEPSet\", \"speedSet\", \"iMCapSet\", \"laitelaSet\"];\r\n      for (const prop of glyphSetProps) {\r\n        const glyphSet = player.records.bestReality[prop];\r\n        for (const glyph of glyphSet) glyph.effects = updateBitmask(glyph.effects);\r\n      }\r\n\r\n      // Glyph light/dark formatting was refactored as well; these values are in reference to the GLYPH_BG_SETTING enum\r\n      player.options.glyphBG = player.options.lightGlyphs ? 1 : 2;\r\n      delete player.options.lightGlyphs;\r\n    },\r\n    21: player => {\r\n      // Added tracking for unlocked ECs even after they re-lock - makes old save data consistent\r\n      for (let ec = 1; ec <= 12; ec++) {\r\n        if (player.eternityChalls[`eterc${ec}`] > 0) player.reality.unlockedEC |= 1 << ec;\r\n      }\r\n\r\n      // Added max RM tracking for cel1 records - also for data consistency (though not 100% accurate)\r\n      player.reality.maxRM = new Decimal(player.reality.realityMachines);\r\n    },\r\n    22: player => {\r\n      // Added 3 new perk layouts, inserted before blob\r\n      if (player.options.perkLayout > 2) player.options.perkLayout += 3;\r\n\r\n      // Changed recent prestige tab to allow for more than just gain rate and absolute gain\r\n      player.options.statTabResources = player.options.showRecentRate ? 1 : 0;\r\n      delete player.options.showRecentRate;\r\n\r\n      // Added iM cap value to recent realities\r\n      for (let index = 0; index < player.records.recentRealities.length; index++) {\r\n        player.records.recentRealities[index].push(0);\r\n      }\r\n\r\n      // This seems to have slipped through in some edge cases due to an old botched migration\r\n      if (player.options.themeClassic === undefined) player.options.themeClassic = \"Normal\";\r\n      if (player.options.themeModern === undefined) player.options.themeModern = \"Normal\";\r\n\r\n      // The glyph uniformity change did a few things to migrate old seeds as best it could, but it also had the\r\n      // side-effect of relying on player initialization and deepmerge for randomization in many cases. This made\r\n      // all existing pre-reality saves get initialized with a seed of 1, which we forcibly randomize here.\r\n      // A \"valid\" save can potentially get messed up, but this is exceedingly rare and impossible to detect\r\n      const newSeed = Math.floor(Date.now() * Math.random() + 1);\r\n      if (player.reality.seed === 1) player.reality.seed = newSeed;\r\n      if (player.reality.initialSeed === 1) player.reality.initialSeed = newSeed;\r\n    },\r\n    23: player => {\r\n      // We missed presets in effarig format migration\r\n      const updateBitmask = bitmask => {\r\n        const modifiedBits = [20, 21, 22].map(b => 1 << b).sum();\r\n        const foundBits = [20, 21, 22].map(b => (bitmask & (1 << b)) !== 0);\r\n        foundBits.push(foundBits.shift());\r\n        let newSubmask = 0;\r\n        for (let bit = 20; bit <= 22; bit++) {\r\n          if (foundBits[bit - 20]) newSubmask |= 1 << bit;\r\n        }\r\n        return (bitmask & ~modifiedBits) | newSubmask;\r\n      };\r\n      for (const preset of player.reality.glyphs.sets) {\r\n        for (const glyph of preset.glyphs) {\r\n          glyph.effects = updateBitmask(glyph.effects);\r\n        }\r\n      }\r\n    },\r\n    24: player => {\r\n      // Automator constants didn't copy over properly across new games - retroactively fix bugged saves as well\r\n      const definedConstants = Object.keys(player.reality.automator.constants);\r\n      if (definedConstants.length !== player.reality.automator.constantSortOrder.length) {\r\n        player.reality.automator.constantSortOrder = [...definedConstants];\r\n      }\r\n    },\r\n    25: player => {\r\n      // If the player has r146 \"Perks of living\" achievement we give them the DAB perk automatically\r\n      if ((player.achievementBits[13] & 32) !== 0 && !player.reality.perks.has(107)) {\r\n        player.reality.perks.add(107);\r\n      }\r\n\r\n      // This update has a rebalance that assumes the 3rd dilation repeatable is unpurchasable in cel7\r\n      if (player.celestials.pelle.doomed) player.dilation.rebuyables[3] = 0;\r\n    }\r\n  },\r\n\r\n  normalizeTimespans(player) {\r\n    player.realTimePlayed *= 100;\r\n    player.totalTimePlayed *= 100;\r\n    player.thisInfinityTime *= 100;\r\n    player.thisEternity *= 100;\r\n    player.thisReality *= 100;\r\n    player.bestInfinityTime = player.bestInfinityTime === 9999999999\r\n      ? 999999999999\r\n      : player.bestInfinityTime * 100;\r\n    player.bestEternity = player.bestEternity === 9999999999\r\n      ? 999999999999\r\n      : player.bestEternity * 100;\r\n    for (let i = 0; i < 10; i++) {\r\n      player.lastTenEternities[i][0] *= 100;\r\n      player.lastTenRuns[i][0] *= 100;\r\n      // Nowadays this would be player.lastTenEternities[i][3] *= 100;\r\n      // However, this migration is done so early that it was player.lastTenEternities[i][2]\r\n      // (but late enough that player.lastTenEternities[i][2] is defined).\r\n      player.lastTenEternities[i][2] *= 100;\r\n      player.lastTenRuns[i][2] *= 100;\r\n    }\r\n\r\n    if (player.challengeTimes) {\r\n      player.challengeTimes = player.challengeTimes.map(e => e * 100);\r\n    }\r\n    if (player.infchallengeTimes) {\r\n      player.infchallengeTimes = player.infchallengeTimes.map(e => e * 100);\r\n    }\r\n  },\r\n\r\n  convertAutobuyerMode(player) {\r\n    for (let i = 0; i < 8; i++) {\r\n      const autobuyer = player.autobuyers[i];\r\n      if (autobuyer % 1 !== 0) {\r\n        if (autobuyer.target < 10) {\r\n          autobuyer.target = AUTOBUYER_MODE.BUY_SINGLE;\r\n        } else {\r\n          autobuyer.target = AUTOBUYER_MODE.BUY_10;\r\n        }\r\n      }\r\n    }\r\n    const tickspeedAutobuyer = player.autobuyers[8];\r\n    if (tickspeedAutobuyer % 1 !== 0) {\r\n      if (tickspeedAutobuyer.target < 10) {\r\n        tickspeedAutobuyer.target = AUTOBUYER_MODE.BUY_SINGLE;\r\n      } else {\r\n        tickspeedAutobuyer.target = AUTOBUYER_MODE.BUY_MAX;\r\n      }\r\n    }\r\n  },\r\n\r\n  fixChallengeIds(player) {\r\n    let wasFucked = false;\r\n    function unfuckChallengeId(id) {\r\n      if (!id.startsWith(\"challenge\")) return id;\r\n      wasFucked = true;\r\n      const legacyId = parseInt(id.substr(9), 10);\r\n      const config = GameDatabase.challenges.normal.find(c => c.legacyId === legacyId);\r\n      return `challenge${config.id}`;\r\n    }\r\n    player.currentChallenge = unfuckChallengeId(player.currentChallenge);\r\n    player.challenges = player.challenges.map(unfuckChallengeId);\r\n    if (wasFucked && player.challengeTimes) {\r\n      player.challengeTimes = GameDatabase.challenges.normal\r\n        .slice(1)\r\n        .map(c => player.challengeTimes[c.legacyId - 2]);\r\n    }\r\n  },\r\n\r\n  adjustMultCosts(player) {\r\n    if (player.tickSpeedMultDecreaseCost !== undefined) {\r\n      player.infinityRebuyables[0] = Math.round(Math.log(player.tickSpeedMultDecreaseCost / 3e6) / Math.log(5));\r\n    }\r\n    if (player.dimensionMultDecreaseCost !== undefined) {\r\n      player.infinityRebuyables[1] = Math.round(Math.log(player.dimensionMultDecreaseCost / 1e8) / Math.log(5e3));\r\n    }\r\n    delete player.tickSpeedMultDecrease;\r\n    delete player.tickSpeedMultDecreaseCost;\r\n    delete player.dimensionMultDecrease;\r\n    delete player.dimensionMultDecreaseCost;\r\n  },\r\n\r\n  convertAchivementsToNumbers(player) {\r\n    if (player.achievements.length > 0 && player.achievements.every(e => typeof e === \"number\")) return;\r\n    const old = player.achievements;\r\n    // In this case, player.secretAchievements should be an empty set\r\n    player.achievements = new Set();\r\n    player.secretAchievements = new Set();\r\n    for (const oldId of old) {\r\n      const achByName = GameDatabase.achievements.normal.find(a => a.name === oldId);\r\n      if (achByName !== undefined) {\r\n        // Legacy format\r\n        player.achievements.add(achByName.id);\r\n        continue;\r\n      }\r\n      const newId = parseInt(oldId.slice(1), 10);\r\n      if (isNaN(newId)) throw new Error(`Could not parse achievement id ${oldId}`);\r\n      if (oldId.startsWith(\"r\")) {\r\n        if (GameDatabase.achievements.normal.find(a => a.id === newId) === undefined) {\r\n          throw new Error(`Unrecognized achievement ${oldId}`);\r\n        }\r\n        player.achievements.add(newId);\r\n      } else if (oldId.startsWith(\"s\")) {\r\n        if (GameDatabase.achievements.secret.find(a => a.id === newId) === undefined) {\r\n          throw new Error(`Unrecognized secret achievement ${newId}`);\r\n        }\r\n        player.secretAchievements.add(newId);\r\n      }\r\n    }\r\n  },\r\n\r\n  adjustGameCreatedTime(player) {\r\n    player.gameCreatedTime = player.lastUpdate - player.realTimePlayed;\r\n  },\r\n\r\n  moveSavedStudyTrees(player) {\r\n    for (let num = 1; num <= 3; ++num) {\r\n      const tree = localStorage.getItem(`studyTree${num}`);\r\n      if (tree) player.timestudy.presets[num - 1].studies = tree;\r\n    }\r\n  },\r\n\r\n  convertEPMult(player) {\r\n    if (player.epmult === undefined) return;\r\n    const mult = new Decimal(player.epmult);\r\n    delete player.epmultCost;\r\n    delete player.epmult;\r\n    // The multiplier should never be less than 1, but we don't want to break anyone's save\r\n    if (mult.lte(1)) {\r\n      player.epmultUpgrades = 0;\r\n      return;\r\n    }\r\n    player.epmultUpgrades = mult.log(5);\r\n  },\r\n\r\n  moveChallengeInfo(player) {\r\n    function parseChallengeName(name) {\r\n      if (name.startsWith(\"challenge\")) {\r\n        return { type: \"normal\", id: parseInt(name.slice(9), 10) };\r\n      }\r\n      if (name.startsWith(\"postc\")) {\r\n        return { type: \"infinity\", id: parseInt(name.slice(5), 10) };\r\n      }\r\n      if (name !== \"\") throw new Error(`Unrecognized challenge ID ${name}`);\r\n      return null;\r\n    }\r\n    if (player.challengeTimes) {\r\n      for (let i = 0; i < player.challengeTimes.length; ++i) {\r\n        player.challenge.normal.bestTimes[i] = Math.min(player.challenge.normal.bestTimes[i],\r\n          player.challengeTimes[i]);\r\n      }\r\n      delete player.challengeTimes;\r\n    }\r\n    if (player.infchallengeTimes) {\r\n      for (let i = 0; i < player.infchallengeTimes.length; ++i) {\r\n        player.challenge.infinity.bestTimes[i] = Math.min(player.challenge.infinity.bestTimes[i],\r\n          player.infchallengeTimes[i]);\r\n      }\r\n      delete player.infchallengeTimes;\r\n    }\r\n    if (player.currentChallenge !== undefined) {\r\n      const saved = parseChallengeName(player.currentChallenge);\r\n      delete player.currentChallenge;\r\n      if (saved) {\r\n        player.challenge[saved.type].current = saved.id;\r\n      }\r\n    }\r\n    if (player.challenges) {\r\n      for (const fullID of player.challenges) {\r\n        const parsed = parseChallengeName(fullID);\r\n        player.challenge[parsed.type].completedBits |= 1 << parsed.id;\r\n      }\r\n      delete player.challenges;\r\n    }\r\n    if (player.currentEternityChall !== undefined) {\r\n      const saved = player.currentEternityChall;\r\n      delete player.currentEternityChall;\r\n      if (saved.startsWith(\"eterc\")) {\r\n        player.challenge.eternity.current = parseInt(saved.slice(5), 10);\r\n      } else if (saved !== \"\") throw new Error(`Unrecognized eternity challenge ${saved}`);\r\n    }\r\n    if (player.eternityChallUnlocked !== undefined) {\r\n      player.challenge.eternity.unlocked = player.eternityChallUnlocked;\r\n      delete player.eternityChallUnlocked;\r\n    }\r\n    delete player.challengeTarget;\r\n  },\r\n\r\n  adjustWhy(player) {\r\n    player.requirementChecks.permanent.singleTickspeed = player.why ?? 0;\r\n    delete player.why;\r\n  },\r\n\r\n  adjustAchievementVars(player) {\r\n    player.requirementChecks.eternity.onlyAD1 = player.dead;\r\n    delete player.dead;\r\n    player.requirementChecks.eternity.onlyAD8 = player.dimlife;\r\n    delete player.dimlife;\r\n    // Just initialize all these to false, which is basically always correct.\r\n    player.requirementChecks.reality.noAM = false;\r\n    player.requirementChecks.eternity.noAD1 = false;\r\n    player.requirementChecks.infinity.noAD8 = false;\r\n    // If someone has 0 max replicanti galaxies, they can't have gotten any.\r\n    // If they have more than 0 max replicanti galaxies, we don't give them\r\n    // the benefit of the doubt.\r\n    player.requirementChecks.eternity.noRG = player.replicanti.gal === 0;\r\n    if (\r\n      player.timestudy.theorem.gt(0) ||\r\n      player.timestudy.studies.length > 0 ||\r\n      player.challenge.eternity.unlocked !== 0\r\n    ) player.requirementChecks.reality.noPurchasedTT = false;\r\n    if (player.sacrificed.gt(0)) player.requirementChecks.infinity.noSacrifice = false;\r\n    player.requirementChecks.permanent.emojiGalaxies = player.spreadingCancer;\r\n    delete player.spreadingCancer;\r\n  },\r\n\r\n  removeAchPow(player) {\r\n    delete player.achPow;\r\n  },\r\n\r\n  adjustSacrificeConfirmation(player) {\r\n    if (player.options.sacrificeConfirmation !== undefined) {\r\n      player.options.confirmations.sacrifice = player.options.sacrificeConfirmation;\r\n      delete player.options.sacrificeConfirmation;\r\n    }\r\n  },\r\n\r\n  migrateNotation(player) {\r\n    const notation = player.options.notation;\r\n    if (notation === undefined) {\r\n      player.options.notation = \"Standard\";\r\n    }\r\n    const notationMigration = {\r\n      \"Mixed\": \"Mixed scientific\",\r\n      \"Default\": \"Brackets\",\r\n      \"Emojis\": \"Cancer\"\r\n    };\r\n    if (notationMigration[notation] !== undefined) {\r\n      player.options.notation = notationMigration[notation];\r\n    }\r\n  },\r\n\r\n  fixAutobuyers(player) {\r\n    for (let i = 0; i < 12; i++) {\r\n      if (player.autobuyers[i] % 1 !== 0 && player.autobuyers[i].target % 1 !== 0) {\r\n        player.autobuyers[i].target = AUTOBUYER_MODE.BUY_SINGLE;\r\n      }\r\n\r\n      if (\r\n        player.autobuyers[i] % 1 !== 0 &&\r\n          (player.autobuyers[i].bulk === undefined ||\r\n            isNaN(player.autobuyers[i].bulk) ||\r\n            player.autobuyers[i].bulk === null)\r\n      ) {\r\n        player.autobuyers[i].bulk = 1;\r\n      }\r\n    }\r\n    if (typeof player.autobuyers[9] !== \"number\" && typeof player.autobuyers[9].bulk !== \"number\") {\r\n      player.autobuyers[9].bulk = 1;\r\n    }\r\n    if (\r\n      player.autobuyers[11] % 1 !== 0 &&\r\n      player.autobuyers[11].priority !== undefined &&\r\n      player.autobuyers[11].priority !== null &&\r\n      player.autobuyers[11].priority !== \"undefined\"\r\n    ) {\r\n      player.autobuyers[11].priority = new Decimal(player.autobuyers[11].priority);\r\n    }\r\n  },\r\n\r\n  removeAutoIPProperties(player) {\r\n    delete player.autoIP;\r\n    delete player.autoTime;\r\n  },\r\n\r\n  removeEternityChallGoal(player) {\r\n    delete player.eternityChallGoal;\r\n  },\r\n\r\n  removeTickspeed(player) {\r\n    delete player.tickspeed;\r\n    player.tickSpeedCost = new Decimal(1000);\r\n    player.tickspeedMultiplier = new Decimal(10);\r\n  },\r\n\r\n  removeOtherTickspeedProps(player) {\r\n    delete player.tickSpeedCost;\r\n    delete player.tickspeedMultiplier;\r\n  },\r\n\r\n  renameNewsOption(player) {\r\n    player.options.news.enabled = !player.options.newsHidden;\r\n    delete player.options.newsHidden;\r\n  },\r\n\r\n  removeDimensionCosts(player) {\r\n    for (const dimension of player.dimensions.antimatter) {\r\n      delete dimension.cost;\r\n      delete dimension.costMultiplier;\r\n    }\r\n  },\r\n\r\n  renameTickspeedPurchaseBumps(player) {\r\n    if (player.chall9TickspeedPurchaseBumps !== undefined) {\r\n      player.chall9TickspeedCostBumps = player.chall9TickspeedPurchaseBumps;\r\n      delete player.chall9TickspeedPurchaseBumps;\r\n    }\r\n  },\r\n\r\n  removePostC3Reward(player) {\r\n    delete player.postC3Reward;\r\n  },\r\n\r\n  renameMoney(player) {\r\n    player.antimatter = new Decimal(player.money);\r\n    player.totalAntimatter = new Decimal(player.totalmoney);\r\n    delete player.money;\r\n    delete player.totalmoney;\r\n  },\r\n\r\n  uniformDimensions(player) {\r\n    for (let tier = 1; tier <= 8; tier++) {\r\n      const name = [null, \"first\", \"second\", \"third\", \"fourth\", \"fifth\", \"sixth\", \"seventh\", \"eight\"][tier];\r\n      const oldProps = {\r\n        cost: `${name}Cost`,\r\n        amount: `${name}Amount`,\r\n        bought: `${name}Bought`,\r\n        pow: `${name}Pow`\r\n      };\r\n      const dimension = player.dimensions.antimatter[tier - 1];\r\n      dimension.cost = new Decimal(player[oldProps.cost]);\r\n      dimension.amount = new Decimal(player[oldProps.amount]);\r\n      dimension.bought = player[oldProps.bought];\r\n      if (player.costmultipliers) {\r\n        dimension.costMultiplier = new Decimal(player.costMultipliers[tier - 1]);\r\n      }\r\n      delete player[oldProps.cost];\r\n      delete player[oldProps.amount];\r\n      delete player[oldProps.bought];\r\n      delete player[oldProps.pow];\r\n    }\r\n    delete player.costMultipliers;\r\n\r\n    if (player.infinityDimension1) {\r\n      for (let tier = 1; tier <= 8; tier++) {\r\n        const dimension = player.dimensions.infinity[tier - 1];\r\n        const oldName = `infinityDimension${tier}`;\r\n        const old = player[oldName];\r\n        dimension.cost = new Decimal(old.cost);\r\n        dimension.amount = new Decimal(old.amount);\r\n        dimension.bought = old.bought;\r\n        dimension.baseAmount = old.baseAmount;\r\n        dimension.isUnlocked = player.infDimensionsUnlocked[tier - 1];\r\n        delete player[oldName];\r\n      }\r\n      delete player.infDimensionsUnlocked;\r\n    }\r\n\r\n    if (player.timeDimension1) {\r\n      for (let tier = 1; tier <= 8; tier++) {\r\n        const dimension = player.dimensions.time[tier - 1];\r\n        const oldName = `timeDimension${tier}`;\r\n        const old = player[oldName];\r\n        if (old !== undefined) {\r\n          dimension.cost = new Decimal(old.cost);\r\n          dimension.amount = new Decimal(old.amount);\r\n          dimension.bought = old.bought;\r\n          delete player[oldName];\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  moveAutobuyers(player) {\r\n    if (\r\n      player.autobuyers[11] % 1 !== 0 &&\r\n      player.autobuyers[11].priority !== undefined &&\r\n      player.autobuyers[11].priority !== null &&\r\n      player.autobuyers[11].priority !== \"undefined\"\r\n    ) {\r\n      player.autobuyers[11].priority = new Decimal(player.autobuyers[11].priority);\r\n    }\r\n\r\n    for (let i = 0; i < 8; i++) {\r\n      const old = player.autobuyers[i];\r\n      if (old % 1 === 0) continue;\r\n      const autobuyer = player.auto.antimatterDims.all[i];\r\n      autobuyer.cost = old.cost;\r\n      autobuyer.interval = old.interval;\r\n      autobuyer.bulk = old.bulk;\r\n      autobuyer.mode = old.target;\r\n      autobuyer.priority = old.priority;\r\n      autobuyer.isActive = old.isOn;\r\n      autobuyer.lastTick = player.realTimePlayed;\r\n    }\r\n\r\n    if (player.autobuyers[8] % 1 !== 0) {\r\n      const old = player.autobuyers[8];\r\n      const autobuyer = player.auto.tickspeed;\r\n      autobuyer.cost = old.cost;\r\n      autobuyer.interval = old.interval;\r\n      autobuyer.mode = old.target;\r\n      autobuyer.priority = old.priority;\r\n      autobuyer.isActive = old.isOn;\r\n      autobuyer.lastTick = player.realTimePlayed;\r\n    }\r\n\r\n    if (player.autobuyers[9] % 1 !== 0) {\r\n      const old = player.autobuyers[9];\r\n      const autobuyer = player.auto.dimBoost;\r\n      autobuyer.cost = old.cost;\r\n      autobuyer.interval = old.interval;\r\n      autobuyer.maxDimBoosts = old.priority;\r\n      autobuyer.galaxies = player.overXGalaxies;\r\n      autobuyer.bulk = old.bulk;\r\n      autobuyer.buyMaxInterval = old.bulk;\r\n      autobuyer.isActive = old.isOn;\r\n      autobuyer.lastTick = player.realTimePlayed;\r\n    }\r\n\r\n    delete player.overXGalaxies;\r\n\r\n    if (player.autobuyers[10] % 1 !== 0) {\r\n      const old = player.autobuyers[10];\r\n      const autobuyer = player.auto.galaxy;\r\n      autobuyer.cost = old.cost;\r\n      autobuyer.interval = old.interval;\r\n      autobuyer.maxGalaxies = old.priority;\r\n      autobuyer.buyMaxInterval = old.bulk;\r\n      autobuyer.buyMax = old.bulk > 0;\r\n      autobuyer.isActive = old.isOn;\r\n      autobuyer.lastTick = player.realTimePlayed;\r\n    }\r\n\r\n    if (player.autobuyers[11] % 1 !== 0) {\r\n      const old = player.autobuyers[11];\r\n      const autobuyer = player.auto.bigCrunch;\r\n      autobuyer.cost = old.cost;\r\n      autobuyer.interval = old.interval;\r\n      autobuyer.mode = [\"amount\", \"time\", \"relative\"].indexOf(player.autoCrunchMode);\r\n      const condition = new Decimal(old.priority);\r\n      switch (player.autoCrunchMode) {\r\n        case \"amount\":\r\n          autobuyer.amount = condition;\r\n          break;\r\n        case \"time\":\r\n          autobuyer.time = condition.lt(Decimal.NUMBER_MAX_VALUE) ? condition.toNumber() : autobuyer.time;\r\n          break;\r\n        case \"relative\":\r\n          autobuyer.xHighest = condition;\r\n          break;\r\n      }\r\n      autobuyer.isActive = old.isOn;\r\n      autobuyer.lastTick = player.realTimePlayed;\r\n    }\r\n\r\n    delete player.autoCrunchMode;\r\n    delete player.autobuyers;\r\n\r\n    if (player.autoSacrifice && player.autoSacrifice % 1 !== 0) {\r\n      const old = player.autoSacrifice;\r\n      const autobuyer = player.auto.sacrifice;\r\n      autobuyer.multiplier = new Decimal(old.priority);\r\n      autobuyer.isActive = old.isOn;\r\n    }\r\n\r\n    delete player.autoSacrifice;\r\n\r\n    if (player.eternityBuyer !== undefined) {\r\n      const old = player.eternityBuyer;\r\n      const autobuyer = player.auto.eternity;\r\n      // Development saves have additional modes\r\n      if (player.autoEternityMode === undefined) {\r\n        autobuyer.time = Number(old.limit);\r\n      }\r\n      autobuyer.isActive = old.isOn;\r\n    }\r\n\r\n    delete player.eternityBuyer;\r\n  },\r\n\r\n  convertNews(player) {\r\n    if (player.newsArray === undefined) {\r\n      player.newsArray = [];\r\n    } else {\r\n      player.newsArray = player.newsArray.map(x => (typeof(x) === \"number\" ? `a${x}` : x));\r\n    }\r\n    const oldNewsArray = new Set(player.newsArray);\r\n    player.news = {};\r\n    player.news.seen = {};\r\n    player.news.specialTickerData = {\r\n      uselessNewsClicks: 0,\r\n      paperclips: 0,\r\n      newsQueuePosition: 1000,\r\n      eiffelTowerChapter: 0\r\n    };\r\n\r\n    // This loop is copied more or less straight out of NewsHandler.addSeenNews with the extraneous comments and\r\n    // spacing removed. There was something strange with variable scoping that was causing player.news.seen to be\r\n    // updated within NewsHandler, but then immediately becoming empty again once we were back at this level of\r\n    // function calls (ie. out of the scope of NewsHandler). Sloppy, but nevertheless it does seem to work.\r\n    const maskLength = NewsHandler.BITS_PER_MASK;\r\n    for (const id of oldNewsArray) {\r\n      const groups = id.match(/([a-z]+)(\\d+)/u);\r\n      const type = groups[1];\r\n      const number = parseInt(groups[2], 10);\r\n      if (!player.news.seen[type]) player.news.seen[type] = [];\r\n      while (maskLength * player.news.seen[type].length < number) player.news.seen[type].push(0);\r\n      player.news.seen[type][Math.floor(number / maskLength)] |= 1 << (number % maskLength);\r\n    }\r\n\r\n    player.news.totalSeen = NewsHandler.uniqueTickersSeen;\r\n    delete player.newsArray;\r\n  },\r\n\r\n  convertEternityCountToDecimal(player) {\r\n    player.eternities = new Decimal(player.eternities);\r\n    player.reality.partEternitied = new Decimal(player.reality.partEternitied);\r\n  },\r\n\r\n  renameDimboosts(player) {\r\n    player.dimensionBoosts = player.resets;\r\n    delete player.resets;\r\n  },\r\n\r\n  migrateConfirmations(player) {\r\n    player.options.confirmations.challenges = !player.options.challConf;\r\n    delete player.options.challConf;\r\n    player.options.confirmations.eternity = player.options.eternityconfirm;\r\n    delete player.options.eternityconfirm;\r\n\r\n    // This did nothing on live and continues to do nothing...?\r\n    delete player.tickDecrease;\r\n  },\r\n\r\n  changeC8Handling(player) {\r\n    player.chall8TotalSacrifice = Decimal.pow(player.chall11Pow, 2);\r\n    delete player.chall11Pow;\r\n  },\r\n\r\n  convertAchievementsToBits(player) {\r\n    // Also switches achievement positions\r\n    // So far there've been three swaps\r\n    // (1) a three-way swap of zero deaths, 1 million is a lot, and antitables\r\n    // (2) a two-way swap of costco sells dimboosts now and 8 nobody got time for that\r\n    // (3) a two-way swap of long lasting relationship and eternities are the new infinity\r\n    const swaps = { \"4,3\": \"6,4\", \"6,4\": \"7,7\", \"7,7\": \"4,3\",\r\n      \"10,1\": \"11,7\", \"11,7\": \"10,1\", \"11,3\": \"12,4\", \"12,4\": \"11,3\" };\r\n    const convertAchievementArray = (newAchievements, oldAchievements, isSecret) => {\r\n      for (const oldId of oldAchievements) {\r\n        let row = Math.floor(oldId / 10);\r\n        let column = oldId % 10;\r\n        if (!isSecret && [row, column].join(\",\") in swaps) {\r\n          [row, column] = swaps[[row, column].join(\",\")].split(\",\");\r\n        }\r\n        newAchievements[row - 1] |= (1 << (column - 1));\r\n      }\r\n      // Handle the changed achievement \"No DLC Required\" correctly (otherwise saves could miss it).\r\n      if (!isSecret && (player.infinityUpgrades.size >= 16 || player.eternities.gt(0) || player.realities > 0)) {\r\n        newAchievements[3] |= 1;\r\n      } else {\r\n        newAchievements[3] &= ~1;\r\n      }\r\n\r\n      // \"Professional Bodybuilder\" (s38) was changed and shouldn't be migrated\r\n      if (isSecret) {\r\n        newAchievements[2] &= ~128;\r\n      }\r\n    };\r\n\r\n    player.achievementBits = Array.repeat(0, 15);\r\n    convertAchievementArray(player.achievementBits, player.achievements, false);\r\n    delete player.achievements;\r\n\r\n    player.secretAchievementBits = Array.repeat(0, 4);\r\n    convertAchievementArray(player.secretAchievementBits, player.secretAchievements, true);\r\n    delete player.secretAchievements;\r\n  },\r\n\r\n  setNoInfinitiesOrEternitiesThisReality(player) {\r\n    player.requirementChecks.reality.noInfinities = player.infinities.eq(0) && player.eternities.eq(0);\r\n    player.requirementChecks.reality.noEternities = player.eternities.eq(0);\r\n  },\r\n\r\n  setTutorialState(player) {\r\n    if (player.infinities.gt(0) || player.eternities.gt(0) || player.realities > 0 || player.galaxies > 0) {\r\n      player.tutorialState = 4;\r\n    } else if (player.dimensionBoosts > 0) player.tutorialState = TUTORIAL_STATE.GALAXY;\r\n  },\r\n\r\n  migrateLastTenRuns(player) {\r\n    // Move infinities before time in infinity, and make them Decimal.\r\n    // I know new Decimal(x).toNumber() can't actually be the best way of converting a value\r\n    // that might be either Decimal or number to number, but it's the best way I know.\r\n    player.lastTenRuns = player.lastTenRuns.map(\r\n      x => [x[0], x[1], new Decimal(x[3]), new Decimal(x[2]).toNumber()]);\r\n    // Put in a default value of 1 for eternities.\r\n    player.lastTenEternities = player.lastTenEternities.map(\r\n      x => [x[0], x[1], new Decimal(1), new Decimal(x[2]).toNumber()]);\r\n  },\r\n\r\n  migrateIPGen(player) {\r\n    player.infinityRebuyables[2] = player.offlineProd / 5;\r\n    delete player.offlineProd;\r\n    delete player.offlineProdCost;\r\n  },\r\n\r\n  renameCloudVariable(player) {\r\n    player.options.cloudEnabled = player.options.cloud;\r\n    delete player.options.cloud;\r\n  },\r\n\r\n  standardizeUncompletedTimes(player) {\r\n    if (player.bestInfinityTime === 999999999999) player.bestInfinityTime = Number.MAX_VALUE;\r\n    if (player.bestInfinityRealTime === 999999999999) player.bestInfinityRealTime = Number.MAX_VALUE;\r\n    if (player.bestEternity === 999999999999) player.bestEternity = Number.MAX_VALUE;\r\n    for (let i = 0; i < player.challenge.normal.bestTimes.length; i++) {\r\n      if (player.challenge.normal.bestTimes[i] === 2678400000) player.challenge.normal.bestTimes[i] = Number.MAX_VALUE;\r\n    }\r\n    for (let i = 0; i < player.challenge.infinity.bestTimes.length; i++) {\r\n      if (player.challenge.infinity.bestTimes[i] === 2678400000) {\r\n        player.challenge.infinity.bestTimes[i] = Number.MAX_VALUE;\r\n      }\r\n    }\r\n    for (let i = 0; i < 10; i++) {\r\n      if (player.lastTenRuns[i][0] === 2678400000) player.lastTenRuns[i][0] = Number.MAX_VALUE;\r\n      if (player.lastTenRuns[i][3] === 26784000) player.lastTenRuns[i][3] = Number.MAX_VALUE;\r\n      if (player.lastTenEternities[i][0] === 2678400000) player.lastTenEternities[i][0] = Number.MAX_VALUE;\r\n      if (player.lastTenEternities[i][3] === 26784000) player.lastTenEternities[i][3] = Number.MAX_VALUE;\r\n    }\r\n  },\r\n\r\n  makeRecords(player) {\r\n    player.records.gameCreatedTime = player.gameCreatedTime;\r\n    player.records.totalTimePlayed = player.totalTimePlayed;\r\n    player.records.realTimePlayed = player.realTimePlayed;\r\n    player.records.totalAntimatter = new Decimal(player.totalAntimatter);\r\n    player.records.lastTenInfinities = player.lastTenRuns;\r\n    player.records.lastTenEternities = player.lastTenEternities;\r\n    for (let i = 0; i < 10; i++) {\r\n      player.records.lastTenInfinities[i][1] = new Decimal(player.lastTenRuns[i][1]);\r\n      player.records.lastTenEternities[i][1] = new Decimal(player.lastTenEternities[i][1]);\r\n    }\r\n    player.records.thisInfinity.time = player.thisInfinityTime;\r\n    player.records.thisInfinity.realTime = player.thisInfinityTime;\r\n    player.records.bestInfinity.time = player.bestInfinityTime;\r\n    player.records.thisEternity.time = player.thisEternity;\r\n    player.records.thisEternity.realTime = player.thisEternity;\r\n    player.records.bestEternity.time = player.bestEternity;\r\n    player.records.thisReality.time = player.thisReality;\r\n    player.records.thisReality.realTime = player.thisReality;\r\n  },\r\n\r\n  deleteOldRecords(player) {\r\n    delete player.gameCreatedTime;\r\n    delete player.totalTimePlayed;\r\n    delete player.realTimePlayed;\r\n    delete player.totalAntimatter;\r\n    delete player.lastTenRuns;\r\n    delete player.lastTenEternities;\r\n    delete player.thisInfinityTime;\r\n    delete player.bestInfinityTime;\r\n    delete player.thisEternity;\r\n    delete player.bestEternity;\r\n    delete player.thisReality;\r\n  },\r\n\r\n  migrateAutobuyers(player) {\r\n    player.auto.autobuyerOn = player.options.autobuyerOn;\r\n\r\n    delete player.options.bulkOn;\r\n    delete player.options.autobuyerOn;\r\n  },\r\n\r\n  migratePlayerVars(player) {\r\n    player.replicanti.boughtGalaxyCap = player.replicanti.gal;\r\n    player.dilation.totalTachyonGalaxies = player.dilation.freeGalaxies;\r\n\r\n    delete player.replicanti.gal;\r\n    delete player.dilation.freeGalaxies;\r\n  },\r\n\r\n  consolidateAuto(player) {\r\n    for (let i = 0; i < 8; i++) {\r\n      player.auto.infinityDims.all[i].isActive = player.infDimBuyers[i];\r\n    }\r\n    for (let i = 0; i < 3; i++) {\r\n      player.auto.replicantiUpgrades.all[i].isActive = player.replicanti.auto[i];\r\n    }\r\n    player.auto.replicantiGalaxies.isActive = player.replicanti.galaxybuyer;\r\n    player.auto.ipMultBuyer.isActive = player.infMultBuyer;\r\n\r\n    delete player.infDimBuyers;\r\n    delete player.auto.infDimTimer;\r\n    delete player.replicanti.galaxybuyer;\r\n    delete player.replicanti.auto;\r\n    delete player.auto.repUpgradeTimer;\r\n    delete player.infMultBuyer;\r\n  },\r\n\r\n  convertTimeTheoremPurchases(player) {\r\n    player.timestudy.amBought = new Decimal(player.timestudy.amcost).exponent / 20000 - 1;\r\n    player.timestudy.ipBought = new Decimal(player.timestudy.ipcost).exponent / 100;\r\n    player.timestudy.epBought = Math.round(new Decimal(player.timestudy.epcost).log2());\r\n\r\n    delete player.timestudy.amcost;\r\n    delete player.timestudy.ipcost;\r\n    delete player.timestudy.epcost;\r\n  },\r\n\r\n  infinitiedConversion(player) {\r\n    player.infinities = new Decimal(player.infinitied);\r\n    player.infinitiesBanked = new Decimal(player.infinitiedBank);\r\n\r\n    delete player.infinitied;\r\n    delete player.infinitiedBank;\r\n  },\r\n\r\n  deleteDimboostBulk(player) {\r\n    delete player.auto.dimBoost.bulk;\r\n    if (player.infinityUpgrades.delete(\"bulkBoost\")) {\r\n      player.infinityUpgrades.add(\"autobuyMaxDimboosts\");\r\n    }\r\n  },\r\n\r\n  removePriority(player) {\r\n    const dims = player.auto.antimatterDims.all ?? player.auto.antimatterDims;\r\n    for (let i = 0; i < 8; i++) {\r\n      delete dims[i].priority;\r\n    }\r\n    delete player.auto.tickspeed.priority;\r\n  },\r\n\r\n  deleteFloatingTextOption(player) {\r\n    delete player.options.animations.floatingText;\r\n  },\r\n\r\n  refactorDoubleIPRebuyable(player) {\r\n    // A bit of a hack, but needs to be done this way to not trigger the non-Decimal assignment crash check code\r\n    const purchases = new Decimal(player.infMult).log2();\r\n    delete player.infMult;\r\n    player.infMult = Math.round(purchases);\r\n    delete player.infMultCost;\r\n  },\r\n\r\n  deletePostChallUnlocked(player) {\r\n    delete player.postChallUnlocked;\r\n  },\r\n\r\n  infMultNameConversion(player) {\r\n    player.IPMultPurchases = player.infMult;\r\n    delete player.infMult;\r\n  },\r\n\r\n  etercreqConversion(player) {\r\n    if (player.etercreq) player.challenge.eternity.requirementBits |= 1 << player.etercreq;\r\n    delete player.etercreq;\r\n  },\r\n\r\n  moveTS33(player) {\r\n    if (player.timestudy.studies.includes(33) && !player.timestudy.studies.includes(22)) {\r\n      player.timestudy.studies.splice(player.timestudy.studies.indexOf(33), 1);\r\n      player.timestudy.theorem = new Decimal(player.timestudy.theorem).plus(2);\r\n    }\r\n  },\r\n\r\n  addBestPrestigeCurrency(player) {\r\n    player.records.thisReality.maxEP = player.eternityPoints;\r\n    player.records.bestReality.bestEP = player.eternityPoints;\r\n    player.records.thisEternity.maxIP = player.infinityPoints;\r\n    player.records.thisReality.maxIP = player.infinityPoints;\r\n  },\r\n\r\n  migrateTheme(player) {\r\n    player.options.themeClassic = player.options.theme === undefined\r\n      ? \"Normal\"\r\n      : player.options.theme;\r\n    delete player.options.themes;\r\n    delete player.options.secretThemeKey;\r\n  },\r\n\r\n  // This change removed the ability to adjust stored time rate after Ra-Nameless 10, instead forcing it to be 99%\r\n  reworkBHPulsing(player) {\r\n    delete player.celestials.enslaved.storedFraction;\r\n  },\r\n\r\n  prePatch(saveData) {\r\n    // Initialize all possibly undefined properties that were not present in\r\n    // previous versions and which could be overwritten by deepmerge\r\n    saveData.totalAntimatter = saveData.totalAntimatter || saveData.totalmoney || saveData.money;\r\n    saveData.thisEternity = saveData.thisEternity || saveData.totalTimePlayed;\r\n    saveData.version = saveData.version || 0;\r\n  },\r\n\r\n  // Patch up to the specified version; we need this functionality in order to properly migrate both saves from\r\n  // much older versions and saves from in-development versions\r\n  patch(saveData, maxVersion) {\r\n    this.prePatch(saveData);\r\n    // This adds all the undefined properties to the save which are in player.js\r\n    const player = deepmergeAll([Player.defaultStart, saveData]);\r\n    const versions = Object.keys(this.patches).map(parseFloat).sort();\r\n    let version;\r\n    while ((version = versions.find(v => player.version < v && v < maxVersion)) !== undefined) {\r\n      const patch = this.patches[version];\r\n      patch(player);\r\n      player.version = version;\r\n    }\r\n    return player;\r\n  },\r\n\r\n  patchPreReality(saveData) {\r\n    return this.patch(saveData, this.firstRealityMigration);\r\n  },\r\n\r\n  patchPostReality(saveData) {\r\n    // Plus 1 because this the threshold is exclusive (it migrates up to but not including the maxVersion)\r\n    return this.patch(saveData, Object.keys(migrations.patches).map(k => Number(k)).max() + 1);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}