{"ast":null,"code":"import \"core-js/modules/es.array.sort.js\";\nimport { RebuyableMechanicState } from \"../../game-mechanics/rebuyable\";\nimport { PelleRifts } from \"./rifts\";\nexport const GalaxyGenerator = {\n  // This is used for a slightly annoying workaround in order to visually update the glyph tab when the rifts\n  // are refilling and the single glyph slot (which was lost during the drain) becomes available again\n  hasReturnedGlyphSlot: false,\n\n  get generationCaps() {\n    return PelleRifts.all.map(x => ({\n      rift: x.config.key,\n      cap: x.config.galaxyGeneratorThreshold\n    })).sort((a, b) => a.cap - b.cap);\n  },\n\n  get spentGalaxies() {\n    return player.celestials.pelle.galaxyGenerator.spentGalaxies;\n  },\n\n  get generatedGalaxies() {\n    return player.celestials.pelle.galaxyGenerator.generatedGalaxies;\n  },\n\n  get galaxies() {\n    return this.generatedGalaxies - this.spentGalaxies;\n  },\n\n  get gainPerSecond() {\n    if (!Pelle.hasGalaxyGenerator) return 0;\n    return new Decimal(GalaxyGeneratorUpgrades.additive.effectValue).timesEffectsOf(GalaxyGeneratorUpgrades.multiplicative, GalaxyGeneratorUpgrades.antimatterMult, GalaxyGeneratorUpgrades.IPMult, GalaxyGeneratorUpgrades.EPMult).toNumber();\n  },\n\n  get capObj() {\n    return this.generationCaps[player.celestials.pelle.galaxyGenerator.phase];\n  },\n\n  get generationCap() {\n    return this.capObj ? this.capObj.cap : Infinity;\n  },\n\n  get capRift() {\n    var _this$capObj;\n\n    return PelleRifts[(_this$capObj = this.capObj) === null || _this$capObj === void 0 ? void 0 : _this$capObj.rift];\n  },\n\n  get isCapped() {\n    return this.generationCap === this.generatedGalaxies;\n  },\n\n  get sacrificeActive() {\n    return player.celestials.pelle.galaxyGenerator.sacrificeActive;\n  },\n\n  startSacrifice() {\n    player.celestials.pelle.collapsed.rifts = false;\n    player.celestials.pelle.galaxyGenerator.sacrificeActive = true;\n  },\n\n  loop(diff) {\n    if (this.isCapped) {\n      Pelle.quotes.galaxyGeneratorRifts.show();\n    }\n\n    if (this.sacrificeActive) {\n      this.capRift.reducedTo = Math.max(this.capRift.reducedTo - 0.03 * diff / 1000, 0);\n\n      if (this.capRift.reducedTo === 0) {\n        player.celestials.pelle.galaxyGenerator.sacrificeActive = false;\n        player.celestials.pelle.galaxyGenerator.phase++;\n        const phase = player.celestials.pelle.galaxyGenerator.phase;\n\n        if (phase === 1) {\n          Pelle.quotes.galaxyGeneratorPhase1.show();\n        } else if (phase === 4) {\n          Pelle.quotes.galaxyGeneratorPhase4.show();\n        }\n\n        if (!this.capObj) {\n          Pelle.quotes.end.show();\n        }\n      }\n\n      PelleRifts.all.forEach(x => x.checkMilestoneStates()); // Force-unequip glyphs when the player loses the respective milestone. We call the respec option as normally\n      // except for one particular case - when we want to respec into protected slots but have no room to do so. In\n      // that case, we force-respec into the inventory instead\n\n      if (!PelleRifts.vacuum.milestones[0].canBeApplied && Glyphs.active.filter(g => g).length > 0) {\n        Glyphs.unequipAll(player.options.respecIntoProtected && Glyphs.findFreeIndex(true) === -1);\n        Glyphs.refreshActive();\n      }\n    }\n\n    player.celestials.pelle.galaxyGenerator.generatedGalaxies += this.gainPerSecond * diff / 1000;\n    player.celestials.pelle.galaxyGenerator.generatedGalaxies = Math.min(player.celestials.pelle.galaxyGenerator.generatedGalaxies, this.generationCap);\n\n    if (!this.capRift) {\n      PelleRifts.all.forEach(r => r.reducedTo = Math.min(r.reducedTo + 0.03 * diff / 1000, 2));\n\n      if (PelleRifts.vacuum.milestones[0].canBeApplied && !this.hasReturnedGlyphSlot) {\n        Glyphs.refreshActive();\n        EventHub.dispatch(GAME_EVENT.GLYPHS_EQUIPPED_CHANGED);\n        this.hasReturnedGlyphSlot = true;\n      }\n    }\n  }\n\n};\nexport class GalaxyGeneratorUpgrade extends RebuyableMechanicState {\n  get currency() {\n    return this.config.currency();\n  }\n\n  get boughtAmount() {\n    return player.celestials.pelle.rebuyables[this.id];\n  }\n\n  set boughtAmount(value) {\n    player.celestials.pelle.rebuyables[this.id] = value;\n  }\n\n  get isCustomEffect() {\n    return true;\n  }\n\n  get effectValue() {\n    return this.config.effect(this.boughtAmount);\n  }\n\n}\nexport const GalaxyGeneratorUpgrades = mapGameDataToObject(GameDatabase.celestials.pelle.galaxyGeneratorUpgrades, config => new GalaxyGeneratorUpgrade(config));","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/celestials/pelle/galaxy-generator.js"],"names":["RebuyableMechanicState","PelleRifts","GalaxyGenerator","hasReturnedGlyphSlot","generationCaps","all","map","x","rift","config","key","cap","galaxyGeneratorThreshold","sort","a","b","spentGalaxies","player","celestials","pelle","galaxyGenerator","generatedGalaxies","galaxies","gainPerSecond","Pelle","hasGalaxyGenerator","Decimal","GalaxyGeneratorUpgrades","additive","effectValue","timesEffectsOf","multiplicative","antimatterMult","IPMult","EPMult","toNumber","capObj","phase","generationCap","Infinity","capRift","isCapped","sacrificeActive","startSacrifice","collapsed","rifts","loop","diff","quotes","galaxyGeneratorRifts","show","reducedTo","Math","max","galaxyGeneratorPhase1","galaxyGeneratorPhase4","end","forEach","checkMilestoneStates","vacuum","milestones","canBeApplied","Glyphs","active","filter","g","length","unequipAll","options","respecIntoProtected","findFreeIndex","refreshActive","min","r","EventHub","dispatch","GAME_EVENT","GLYPHS_EQUIPPED_CHANGED","GalaxyGeneratorUpgrade","currency","boughtAmount","rebuyables","id","value","isCustomEffect","effect","mapGameDataToObject","GameDatabase","galaxyGeneratorUpgrades"],"mappings":"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","sourcesContent":["import { RebuyableMechanicState } from \"../../game-mechanics/rebuyable\";\r\n\r\nimport { PelleRifts } from \"./rifts\";\r\n\r\nexport const GalaxyGenerator = {\r\n  // This is used for a slightly annoying workaround in order to visually update the glyph tab when the rifts\r\n  // are refilling and the single glyph slot (which was lost during the drain) becomes available again\r\n  hasReturnedGlyphSlot: false,\r\n\r\n  get generationCaps() {\r\n    return PelleRifts.all\r\n      .map(x => ({ rift: x.config.key, cap: x.config.galaxyGeneratorThreshold }))\r\n      .sort((a, b) => a.cap - b.cap);\r\n  },\r\n\r\n  get spentGalaxies() {\r\n    return player.celestials.pelle.galaxyGenerator.spentGalaxies;\r\n  },\r\n\r\n  get generatedGalaxies() {\r\n    return player.celestials.pelle.galaxyGenerator.generatedGalaxies;\r\n  },\r\n\r\n  get galaxies() {\r\n    return this.generatedGalaxies - this.spentGalaxies;\r\n  },\r\n\r\n  get gainPerSecond() {\r\n    if (!Pelle.hasGalaxyGenerator) return 0;\r\n    return new Decimal(GalaxyGeneratorUpgrades.additive.effectValue).timesEffectsOf(\r\n      GalaxyGeneratorUpgrades.multiplicative,\r\n      GalaxyGeneratorUpgrades.antimatterMult,\r\n      GalaxyGeneratorUpgrades.IPMult,\r\n      GalaxyGeneratorUpgrades.EPMult,\r\n    ).toNumber();\r\n  },\r\n\r\n  get capObj() {\r\n    return this.generationCaps[player.celestials.pelle.galaxyGenerator.phase];\r\n  },\r\n\r\n  get generationCap() {\r\n    return this.capObj ? this.capObj.cap : Infinity;\r\n  },\r\n\r\n  get capRift() {\r\n    return PelleRifts[this.capObj?.rift];\r\n  },\r\n\r\n  get isCapped() {\r\n    return this.generationCap === this.generatedGalaxies;\r\n  },\r\n\r\n  get sacrificeActive() {\r\n    return player.celestials.pelle.galaxyGenerator.sacrificeActive;\r\n  },\r\n\r\n  startSacrifice() {\r\n    player.celestials.pelle.collapsed.rifts = false;\r\n    player.celestials.pelle.galaxyGenerator.sacrificeActive = true;\r\n  },\r\n\r\n  loop(diff) {\r\n    if (this.isCapped) {\r\n      Pelle.quotes.galaxyGeneratorRifts.show();\r\n    }\r\n    if (this.sacrificeActive) {\r\n      this.capRift.reducedTo = Math.max(this.capRift.reducedTo - 0.03 * diff / 1000, 0);\r\n      if (this.capRift.reducedTo === 0) {\r\n        player.celestials.pelle.galaxyGenerator.sacrificeActive = false;\r\n        player.celestials.pelle.galaxyGenerator.phase++;\r\n\r\n        const phase = player.celestials.pelle.galaxyGenerator.phase;\r\n        if (phase === 1) {\r\n          Pelle.quotes.galaxyGeneratorPhase1.show();\r\n        } else if (phase === 4) {\r\n          Pelle.quotes.galaxyGeneratorPhase4.show();\r\n        }\r\n\r\n        if (!this.capObj) {\r\n          Pelle.quotes.end.show();\r\n        }\r\n      }\r\n      PelleRifts.all.forEach(x => x.checkMilestoneStates());\r\n\r\n      // Force-unequip glyphs when the player loses the respective milestone. We call the respec option as normally\r\n      // except for one particular case - when we want to respec into protected slots but have no room to do so. In\r\n      // that case, we force-respec into the inventory instead\r\n      if (!PelleRifts.vacuum.milestones[0].canBeApplied && Glyphs.active.filter(g => g).length > 0) {\r\n        Glyphs.unequipAll(player.options.respecIntoProtected && Glyphs.findFreeIndex(true) === -1);\r\n        Glyphs.refreshActive();\r\n      }\r\n\r\n    }\r\n    player.celestials.pelle.galaxyGenerator.generatedGalaxies += this.gainPerSecond * diff / 1000;\r\n    player.celestials.pelle.galaxyGenerator.generatedGalaxies = Math.min(\r\n      player.celestials.pelle.galaxyGenerator.generatedGalaxies,\r\n      this.generationCap\r\n    );\r\n\r\n    if (!this.capRift) {\r\n      PelleRifts.all.forEach(r => r.reducedTo = Math.min(r.reducedTo + 0.03 * diff / 1000, 2));\r\n      if (PelleRifts.vacuum.milestones[0].canBeApplied && !this.hasReturnedGlyphSlot) {\r\n        Glyphs.refreshActive();\r\n        EventHub.dispatch(GAME_EVENT.GLYPHS_EQUIPPED_CHANGED);\r\n        this.hasReturnedGlyphSlot = true;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport class GalaxyGeneratorUpgrade extends RebuyableMechanicState {\r\n  get currency() {\r\n    return this.config.currency();\r\n  }\r\n\r\n  get boughtAmount() {\r\n    return player.celestials.pelle.rebuyables[this.id];\r\n  }\r\n\r\n  set boughtAmount(value) {\r\n    player.celestials.pelle.rebuyables[this.id] = value;\r\n  }\r\n\r\n  get isCustomEffect() { return true; }\r\n\r\n  get effectValue() {\r\n    return this.config.effect(this.boughtAmount);\r\n  }\r\n}\r\n\r\nexport const GalaxyGeneratorUpgrades = mapGameDataToObject(\r\n  GameDatabase.celestials.pelle.galaxyGeneratorUpgrades,\r\n  config => new GalaxyGeneratorUpgrade(config)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}