{"ast":null,"code":"import { DC } from \"./constants\";\n\nclass DimBoostRequirement {\n  constructor(tier, amount) {\n    this.tier = tier;\n    this.amount = amount;\n  }\n\n  get isSatisfied() {\n    const dimension = AntimatterDimension(this.tier);\n    return dimension.totalAmount.gte(this.amount);\n  }\n\n}\n\nexport class DimBoost {\n  static get power() {\n    if (NormalChallenge(8).isRunning) {\n      return DC.D1;\n    }\n\n    let boost = Effects.max(2, InfinityUpgrade.dimboostMult, InfinityChallenge(7).reward, InfinityChallenge(7), TimeStudy(81)).toDecimal().timesEffectsOf(TimeStudy(83), TimeStudy(231), Achievement(117), Achievement(142), GlyphEffect.dimBoostPower, PelleRifts.recursion.milestones[0]).powEffectsOf(InfinityUpgrade.dimboostMult.chargedEffect);\n    if (GlyphAlteration.isAdded(\"effarig\")) boost = boost.pow(getSecondaryGlyphEffect(\"effarigforgotten\"));\n    return boost;\n  }\n\n  static multiplierToNDTier(tier) {\n    const normalBoostMult = DimBoost.power.pow(this.purchasedBoosts + 1 - tier).clampMin(1);\n    const imaginaryBoostMult = DimBoost.power.times(ImaginaryUpgrade(24).effectOrDefault(1)).pow(this.imaginaryBoosts).clampMin(1);\n    return normalBoostMult.times(imaginaryBoostMult);\n  }\n\n  static get maxDimensionsUnlockable() {\n    return NormalChallenge(10).isRunning ? 6 : 8;\n  }\n\n  static get canUnlockNewDimension() {\n    return DimBoost.purchasedBoosts + 4 < DimBoost.maxDimensionsUnlockable;\n  }\n\n  static get maxBoosts() {\n    if (Ra.isRunning) {\n      // Ra makes boosting impossible. Note that this function isn't called\n      // when giving initial boosts, so the player will still get those.\n      return 0;\n    }\n\n    if (InfinityChallenge(1).isRunning) {\n      // Usually, in Challenge 8, the only boosts that are useful are the first 5\n      // (the fifth unlocks sacrifice). In IC1 (Challenge 8 and Challenge 10\n      // combined, among other things), only the first 2 are useful\n      // (they unlock new dimensions).\n      // There's no actual problem with bulk letting the player get\n      // more boosts than this; it's just that boosts beyond this are pointless.\n      return 2;\n    }\n\n    if (NormalChallenge(8).isRunning) {\n      // See above. It's important we check for this after checking for IC1 since otherwise\n      // this case would trigger when we're in IC1.\n      return 5;\n    }\n\n    return Infinity;\n  }\n\n  static get canBeBought() {\n    if (DimBoost.purchasedBoosts >= this.maxBoosts) return false;\n    if (player.records.thisInfinity.maxAM.gt(Player.infinityGoal) && (!player.break || Player.isInAntimatterChallenge)) return false;\n    return true;\n  }\n\n  static get lockText() {\n    if (DimBoost.purchasedBoosts >= this.maxBoosts) {\n      if (Ra.isRunning) return \"Locked (Ra's Reality)\";\n      if (InfinityChallenge(1).isRunning) return \"Locked (Infinity Challenge 1)\";\n      if (NormalChallenge(8).isRunning) return \"Locked (8th Antimatter Dimension Autobuyer Challenge)\";\n    }\n\n    return null;\n  }\n\n  static get requirement() {\n    return this.bulkRequirement(1);\n  }\n\n  static bulkRequirement(bulk) {\n    const targetResets = DimBoost.purchasedBoosts + bulk;\n    const tier = Math.min(targetResets + 3, this.maxDimensionsUnlockable);\n    let amount = 20;\n    const discount = Effects.sum(TimeStudy(211), TimeStudy(222));\n\n    if (tier === 6 && NormalChallenge(10).isRunning) {\n      amount += Math.round((targetResets - 3) * (20 - discount));\n    } else if (tier === 8) {\n      amount += Math.round((targetResets - 5) * (15 - discount));\n    }\n\n    if (EternityChallenge(5).isRunning) {\n      amount += Math.pow(targetResets - 1, 3) + targetResets - 1;\n    }\n\n    amount -= Effects.sum(InfinityUpgrade.resetBoost);\n    if (InfinityChallenge(5).isCompleted) amount -= 1;\n    amount *= InfinityUpgrade.resetBoost.chargedEffect.effectOrDefault(1);\n    amount = Math.round(amount);\n    return new DimBoostRequirement(tier, amount);\n  }\n\n  static get unlockedByBoost() {\n    if (DimBoost.lockText !== null) return DimBoost.lockText;\n    const boosts = DimBoost.purchasedBoosts;\n    const allNDUnlocked = EternityMilestone.unlockAllND.isReached;\n    let newUnlock = \"\";\n\n    if (!allNDUnlocked && boosts < DimBoost.maxDimensionsUnlockable - 4) {\n      newUnlock = `unlock the ${boosts + 5}th Dimension`;\n    } else if (boosts === 4 && !NormalChallenge(10).isRunning && !EternityChallenge(3).isRunning) {\n      newUnlock = \"unlock Sacrifice\";\n    }\n\n    const formattedMultText = `give a ${formatX(DimBoost.power, 2, 1)} multiplier `;\n    let dimensionRange = `to the 1st Dimension`;\n    if (boosts > 0) dimensionRange = `to Dimensions 1-${Math.min(boosts + 1, 8)}`;\n    if (boosts >= DimBoost.maxDimensionsUnlockable - 1) dimensionRange = `to all Dimensions`;\n    let boostEffects;\n    if (NormalChallenge(8).isRunning) boostEffects = newUnlock;else if (newUnlock === \"\") boostEffects = `${formattedMultText} ${dimensionRange}`;else boostEffects = `${newUnlock} and ${formattedMultText} ${dimensionRange}`;\n    if (boostEffects === \"\") return \"Dimension Boosts are currently useless\";\n    const areDimensionsKept = (Perk.antimatterNoReset.isBought || Achievement(111).canBeApplied) && (!Pelle.isDoomed || PelleUpgrade.dimBoostResetsNothing.isBought);\n    if (areDimensionsKept) return boostEffects[0].toUpperCase() + boostEffects.substring(1);\n    return `Reset your Dimensions to ${boostEffects}`;\n  }\n\n  static get purchasedBoosts() {\n    return Math.floor(player.dimensionBoosts);\n  }\n\n  static get imaginaryBoosts() {\n    return Ra.isRunning ? 0 : ImaginaryUpgrade(12).effectOrDefault(0) * ImaginaryUpgrade(23).effectOrDefault(1);\n  }\n\n  static get totalBoosts() {\n    return Math.floor(this.purchasedBoosts + this.imaginaryBoosts);\n  }\n\n  static get startingDimensionBoosts() {\n    if (InfinityUpgrade.skipResetGalaxy.isBought) return 4;\n    if (InfinityUpgrade.skipReset3.isBought) return 3;\n    if (InfinityUpgrade.skipReset2.isBought) return 2;\n    if (InfinityUpgrade.skipReset1.isBought) return 1;\n    return 0;\n  }\n\n} // eslint-disable-next-line max-params\n\nexport function softReset(tempBulk, forcedADReset = false, forcedAMReset = false, enteringAntimatterChallenge = false) {\n  if (Currency.antimatter.gt(Player.infinityLimit)) return;\n  const bulk = Math.min(tempBulk, DimBoost.maxBoosts - player.dimensionBoosts);\n  EventHub.dispatch(GAME_EVENT.DIMBOOST_BEFORE, bulk);\n  player.dimensionBoosts = Math.max(0, player.dimensionBoosts + bulk);\n  resetChallengeStuff();\n  const canKeepDimensions = Pelle.isDoomed ? PelleUpgrade.dimBoostResetsNothing.canBeApplied : Perk.antimatterNoReset.canBeApplied;\n\n  if (forcedADReset || !canKeepDimensions) {\n    AntimatterDimensions.reset();\n    player.sacrificed = DC.D0;\n    resetTickspeed();\n  }\n\n  skipResetsIfPossible(enteringAntimatterChallenge);\n  const canKeepAntimatter = Pelle.isDoomed ? PelleUpgrade.dimBoostResetsNothing.canBeApplied : Achievement(111).isUnlocked || Perk.antimatterNoReset.canBeApplied;\n\n  if (!forcedAMReset && canKeepAntimatter) {\n    Currency.antimatter.bumpTo(Currency.antimatter.startingValue);\n  } else {\n    Currency.antimatter.reset();\n  }\n\n  EventHub.dispatch(GAME_EVENT.DIMBOOST_AFTER, bulk);\n}\nexport function skipResetsIfPossible(enteringAntimatterChallenge) {\n  if (enteringAntimatterChallenge || Player.isInAntimatterChallenge) return;\n\n  if (InfinityUpgrade.skipResetGalaxy.isBought && player.dimensionBoosts < 4) {\n    player.dimensionBoosts = 4;\n    if (player.galaxies === 0) player.galaxies = 1;\n  } else if (InfinityUpgrade.skipReset3.isBought && player.dimensionBoosts < 3) player.dimensionBoosts = 3;else if (InfinityUpgrade.skipReset2.isBought && player.dimensionBoosts < 2) player.dimensionBoosts = 2;else if (InfinityUpgrade.skipReset1.isBought && player.dimensionBoosts < 1) player.dimensionBoosts = 1;\n}\nexport function manualRequestDimensionBoost(bulk) {\n  if (Currency.antimatter.gt(Player.infinityLimit) || !DimBoost.requirement.isSatisfied) return;\n  if (!DimBoost.canBeBought) return;\n  if (GameEnd.creditsEverClosed) return;\n\n  if (player.options.confirmations.dimensionBoost) {\n    Modal.dimensionBoost.show({\n      bulk\n    });\n    return;\n  }\n\n  requestDimensionBoost(bulk);\n}\nexport function requestDimensionBoost(bulk) {\n  if (Currency.antimatter.gt(Player.infinityLimit) || !DimBoost.requirement.isSatisfied) return;\n  if (!DimBoost.canBeBought) return;\n  Tutorial.turnOffEffect(TUTORIAL_STATE.DIMBOOST);\n  if (BreakInfinityUpgrade.autobuyMaxDimboosts.isBought && bulk) maxBuyDimBoosts();else softReset(1);\n}\n\nfunction maxBuyDimBoosts() {\n  // Boosts that unlock new dims are bought one at a time, unlocking the next dimension\n  if (DimBoost.canUnlockNewDimension) {\n    if (DimBoost.requirement.isSatisfied) softReset(1);\n    return;\n  }\n\n  const req1 = DimBoost.bulkRequirement(1);\n  if (!req1.isSatisfied) return;\n  const req2 = DimBoost.bulkRequirement(2);\n\n  if (!req2.isSatisfied) {\n    softReset(1);\n    return;\n  } // Linearly extrapolate dimboost costs. req1 = a * 1 + b, req2 = a * 2 + b\n  // so a = req2 - req1, b = req1 - a = 2 req1 - req2, num = (dims - b) / a\n\n\n  const increase = req2.amount - req1.amount;\n  const dim = AntimatterDimension(req1.tier);\n  let maxBoosts = Math.min(Number.MAX_VALUE, 1 + Math.floor((dim.totalAmount.toNumber() - req1.amount) / increase));\n\n  if (DimBoost.bulkRequirement(maxBoosts).isSatisfied) {\n    softReset(maxBoosts);\n    return;\n  } // But in case of EC5 it's not, so do binary search for appropriate boost amount\n\n\n  let minBoosts = 2;\n\n  while (maxBoosts !== minBoosts + 1) {\n    const middle = Math.floor((maxBoosts + minBoosts) / 2);\n    if (DimBoost.bulkRequirement(middle).isSatisfied) minBoosts = middle;else maxBoosts = middle;\n  }\n\n  softReset(minBoosts);\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/dimboost.js"],"names":["DC","DimBoostRequirement","constructor","tier","amount","isSatisfied","dimension","AntimatterDimension","totalAmount","gte","DimBoost","power","NormalChallenge","isRunning","D1","boost","Effects","max","InfinityUpgrade","dimboostMult","InfinityChallenge","reward","TimeStudy","toDecimal","timesEffectsOf","Achievement","GlyphEffect","dimBoostPower","PelleRifts","recursion","milestones","powEffectsOf","chargedEffect","GlyphAlteration","isAdded","pow","getSecondaryGlyphEffect","multiplierToNDTier","normalBoostMult","purchasedBoosts","clampMin","imaginaryBoostMult","times","ImaginaryUpgrade","effectOrDefault","imaginaryBoosts","maxDimensionsUnlockable","canUnlockNewDimension","maxBoosts","Ra","Infinity","canBeBought","player","records","thisInfinity","maxAM","gt","Player","infinityGoal","break","isInAntimatterChallenge","lockText","requirement","bulkRequirement","bulk","targetResets","Math","min","discount","sum","round","EternityChallenge","resetBoost","isCompleted","unlockedByBoost","boosts","allNDUnlocked","EternityMilestone","unlockAllND","isReached","newUnlock","formattedMultText","formatX","dimensionRange","boostEffects","areDimensionsKept","Perk","antimatterNoReset","isBought","canBeApplied","Pelle","isDoomed","PelleUpgrade","dimBoostResetsNothing","toUpperCase","substring","floor","dimensionBoosts","totalBoosts","startingDimensionBoosts","skipResetGalaxy","skipReset3","skipReset2","skipReset1","softReset","tempBulk","forcedADReset","forcedAMReset","enteringAntimatterChallenge","Currency","antimatter","infinityLimit","EventHub","dispatch","GAME_EVENT","DIMBOOST_BEFORE","resetChallengeStuff","canKeepDimensions","AntimatterDimensions","reset","sacrificed","D0","resetTickspeed","skipResetsIfPossible","canKeepAntimatter","isUnlocked","bumpTo","startingValue","DIMBOOST_AFTER","galaxies","manualRequestDimensionBoost","GameEnd","creditsEverClosed","options","confirmations","dimensionBoost","Modal","show","requestDimensionBoost","Tutorial","turnOffEffect","TUTORIAL_STATE","DIMBOOST","BreakInfinityUpgrade","autobuyMaxDimboosts","maxBuyDimBoosts","req1","req2","increase","dim","Number","MAX_VALUE","toNumber","minBoosts","middle"],"mappings":"AAAA,SAASA,EAAT,QAAmB,aAAnB;;AAEA,MAAMC,mBAAN,CAA0B;AACxBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACxB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;AAEc,MAAXC,WAAW,GAAG;AAChB,UAAMC,SAAS,GAAGC,mBAAmB,CAAC,KAAKJ,IAAN,CAArC;AACA,WAAOG,SAAS,CAACE,WAAV,CAAsBC,GAAtB,CAA0B,KAAKL,MAA/B,CAAP;AACD;;AATuB;;AAY1B,OAAO,MAAMM,QAAN,CAAe;AACJ,aAALC,KAAK,GAAG;AACjB,QAAIC,eAAe,CAAC,CAAD,CAAf,CAAmBC,SAAvB,EAAkC;AAChC,aAAOb,EAAE,CAACc,EAAV;AACD;;AAED,QAAIC,KAAK,GAAGC,OAAO,CAACC,GAAR,CACV,CADU,EAEVC,eAAe,CAACC,YAFN,EAGVC,iBAAiB,CAAC,CAAD,CAAjB,CAAqBC,MAHX,EAIVD,iBAAiB,CAAC,CAAD,CAJP,EAKVE,SAAS,CAAC,EAAD,CALC,EAOTC,SAPS,GAQTC,cARS,CASRF,SAAS,CAAC,EAAD,CATD,EAURA,SAAS,CAAC,GAAD,CAVD,EAWRG,WAAW,CAAC,GAAD,CAXH,EAYRA,WAAW,CAAC,GAAD,CAZH,EAaRC,WAAW,CAACC,aAbJ,EAcRC,UAAU,CAACC,SAAX,CAAqBC,UAArB,CAAgC,CAAhC,CAdQ,EAeRC,YAfQ,CAeKb,eAAe,CAACC,YAAhB,CAA6Ba,aAflC,CAAZ;AAgBA,QAAIC,eAAe,CAACC,OAAhB,CAAwB,SAAxB,CAAJ,EAAwCnB,KAAK,GAAGA,KAAK,CAACoB,GAAN,CAAUC,uBAAuB,CAAC,kBAAD,CAAjC,CAAR;AACxC,WAAOrB,KAAP;AACD;;AAEwB,SAAlBsB,kBAAkB,CAAClC,IAAD,EAAO;AAC9B,UAAMmC,eAAe,GAAG5B,QAAQ,CAACC,KAAT,CAAewB,GAAf,CAAmB,KAAKI,eAAL,GAAuB,CAAvB,GAA2BpC,IAA9C,EAAoDqC,QAApD,CAA6D,CAA7D,CAAxB;AACA,UAAMC,kBAAkB,GAAG/B,QAAQ,CAACC,KAAT,CAAe+B,KAAf,CAAqBC,gBAAgB,CAAC,EAAD,CAAhB,CAAqBC,eAArB,CAAqC,CAArC,CAArB,EACxBT,GADwB,CACpB,KAAKU,eADe,EACEL,QADF,CACW,CADX,CAA3B;AAEA,WAAOF,eAAe,CAACI,KAAhB,CAAsBD,kBAAtB,CAAP;AACD;;AAEiC,aAAvBK,uBAAuB,GAAG;AACnC,WAAOlC,eAAe,CAAC,EAAD,CAAf,CAAoBC,SAApB,GAAgC,CAAhC,GAAoC,CAA3C;AACD;;AAE+B,aAArBkC,qBAAqB,GAAG;AACjC,WAAOrC,QAAQ,CAAC6B,eAAT,GAA2B,CAA3B,GAA+B7B,QAAQ,CAACoC,uBAA/C;AACD;;AAEmB,aAATE,SAAS,GAAG;AACrB,QAAIC,EAAE,CAACpC,SAAP,EAAkB;AAChB;AACA;AACA,aAAO,CAAP;AACD;;AACD,QAAIO,iBAAiB,CAAC,CAAD,CAAjB,CAAqBP,SAAzB,EAAoC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,aAAO,CAAP;AACD;;AACD,QAAID,eAAe,CAAC,CAAD,CAAf,CAAmBC,SAAvB,EAAkC;AAChC;AACA;AACA,aAAO,CAAP;AACD;;AACD,WAAOqC,QAAP;AACD;;AAEqB,aAAXC,WAAW,GAAG;AACvB,QAAIzC,QAAQ,CAAC6B,eAAT,IAA4B,KAAKS,SAArC,EAAgD,OAAO,KAAP;AAChD,QAAII,MAAM,CAACC,OAAP,CAAeC,YAAf,CAA4BC,KAA5B,CAAkCC,EAAlC,CAAqCC,MAAM,CAACC,YAA5C,MACA,CAACN,MAAM,CAACO,KAAR,IAAiBF,MAAM,CAACG,uBADxB,CAAJ,EACsD,OAAO,KAAP;AACtD,WAAO,IAAP;AACD;;AAEkB,aAARC,QAAQ,GAAG;AACpB,QAAInD,QAAQ,CAAC6B,eAAT,IAA4B,KAAKS,SAArC,EAAgD;AAC9C,UAAIC,EAAE,CAACpC,SAAP,EAAkB,OAAO,uBAAP;AAClB,UAAIO,iBAAiB,CAAC,CAAD,CAAjB,CAAqBP,SAAzB,EAAoC,OAAO,+BAAP;AACpC,UAAID,eAAe,CAAC,CAAD,CAAf,CAAmBC,SAAvB,EAAkC,OAAO,uDAAP;AACnC;;AACD,WAAO,IAAP;AACD;;AAEqB,aAAXiD,WAAW,GAAG;AACvB,WAAO,KAAKC,eAAL,CAAqB,CAArB,CAAP;AACD;;AAEqB,SAAfA,eAAe,CAACC,IAAD,EAAO;AAC3B,UAAMC,YAAY,GAAGvD,QAAQ,CAAC6B,eAAT,GAA2ByB,IAAhD;AACA,UAAM7D,IAAI,GAAG+D,IAAI,CAACC,GAAL,CAASF,YAAY,GAAG,CAAxB,EAA2B,KAAKnB,uBAAhC,CAAb;AACA,QAAI1C,MAAM,GAAG,EAAb;AACA,UAAMgE,QAAQ,GAAGpD,OAAO,CAACqD,GAAR,CACf/C,SAAS,CAAC,GAAD,CADM,EAEfA,SAAS,CAAC,GAAD,CAFM,CAAjB;;AAIA,QAAInB,IAAI,KAAK,CAAT,IAAcS,eAAe,CAAC,EAAD,CAAf,CAAoBC,SAAtC,EAAiD;AAC/CT,MAAAA,MAAM,IAAI8D,IAAI,CAACI,KAAL,CAAW,CAACL,YAAY,GAAG,CAAhB,KAAsB,KAAKG,QAA3B,CAAX,CAAV;AACD,KAFD,MAEO,IAAIjE,IAAI,KAAK,CAAb,EAAgB;AACrBC,MAAAA,MAAM,IAAI8D,IAAI,CAACI,KAAL,CAAW,CAACL,YAAY,GAAG,CAAhB,KAAsB,KAAKG,QAA3B,CAAX,CAAV;AACD;;AACD,QAAIG,iBAAiB,CAAC,CAAD,CAAjB,CAAqB1D,SAAzB,EAAoC;AAClCT,MAAAA,MAAM,IAAI8D,IAAI,CAAC/B,GAAL,CAAS8B,YAAY,GAAG,CAAxB,EAA2B,CAA3B,IAAgCA,YAAhC,GAA+C,CAAzD;AACD;;AAED7D,IAAAA,MAAM,IAAIY,OAAO,CAACqD,GAAR,CAAYnD,eAAe,CAACsD,UAA5B,CAAV;AACA,QAAIpD,iBAAiB,CAAC,CAAD,CAAjB,CAAqBqD,WAAzB,EAAsCrE,MAAM,IAAI,CAAV;AAEtCA,IAAAA,MAAM,IAAIc,eAAe,CAACsD,UAAhB,CAA2BxC,aAA3B,CAAyCY,eAAzC,CAAyD,CAAzD,CAAV;AAEAxC,IAAAA,MAAM,GAAG8D,IAAI,CAACI,KAAL,CAAWlE,MAAX,CAAT;AAEA,WAAO,IAAIH,mBAAJ,CAAwBE,IAAxB,EAA8BC,MAA9B,CAAP;AACD;;AAEyB,aAAfsE,eAAe,GAAG;AAC3B,QAAIhE,QAAQ,CAACmD,QAAT,KAAsB,IAA1B,EAAgC,OAAOnD,QAAQ,CAACmD,QAAhB;AAChC,UAAMc,MAAM,GAAGjE,QAAQ,CAAC6B,eAAxB;AACA,UAAMqC,aAAa,GAAGC,iBAAiB,CAACC,WAAlB,CAA8BC,SAApD;AAEA,QAAIC,SAAS,GAAG,EAAhB;;AACA,QAAI,CAACJ,aAAD,IAAkBD,MAAM,GAAGjE,QAAQ,CAACoC,uBAAT,GAAmC,CAAlE,EAAqE;AACnEkC,MAAAA,SAAS,GAAI,cAAaL,MAAM,GAAG,CAAE,cAArC;AACD,KAFD,MAEO,IAAIA,MAAM,KAAK,CAAX,IAAgB,CAAC/D,eAAe,CAAC,EAAD,CAAf,CAAoBC,SAArC,IAAkD,CAAC0D,iBAAiB,CAAC,CAAD,CAAjB,CAAqB1D,SAA5E,EAAuF;AAC5FmE,MAAAA,SAAS,GAAG,kBAAZ;AACD;;AAED,UAAMC,iBAAiB,GAAI,UAASC,OAAO,CAACxE,QAAQ,CAACC,KAAV,EAAiB,CAAjB,EAAoB,CAApB,CAAuB,cAAlE;AACA,QAAIwE,cAAc,GAAI,sBAAtB;AACA,QAAIR,MAAM,GAAG,CAAb,EAAgBQ,cAAc,GAAI,mBAAkBjB,IAAI,CAACC,GAAL,CAASQ,MAAM,GAAG,CAAlB,EAAqB,CAArB,CAAwB,EAA5D;AAChB,QAAIA,MAAM,IAAIjE,QAAQ,CAACoC,uBAAT,GAAmC,CAAjD,EAAoDqC,cAAc,GAAI,mBAAlB;AAEpD,QAAIC,YAAJ;AACA,QAAIxE,eAAe,CAAC,CAAD,CAAf,CAAmBC,SAAvB,EAAkCuE,YAAY,GAAGJ,SAAf,CAAlC,KACK,IAAIA,SAAS,KAAK,EAAlB,EAAsBI,YAAY,GAAI,GAAEH,iBAAkB,IAAGE,cAAe,EAAtD,CAAtB,KACAC,YAAY,GAAI,GAAEJ,SAAU,QAAOC,iBAAkB,IAAGE,cAAe,EAAvE;AAEL,QAAIC,YAAY,KAAK,EAArB,EAAyB,OAAO,wCAAP;AACzB,UAAMC,iBAAiB,GAAG,CAACC,IAAI,CAACC,iBAAL,CAAuBC,QAAvB,IAAmC/D,WAAW,CAAC,GAAD,CAAX,CAAiBgE,YAArD,MACvB,CAACC,KAAK,CAACC,QAAP,IAAmBC,YAAY,CAACC,qBAAb,CAAmCL,QAD/B,CAA1B;AAEA,QAAIH,iBAAJ,EAAuB,OAAOD,YAAY,CAAC,CAAD,CAAZ,CAAgBU,WAAhB,KAAgCV,YAAY,CAACW,SAAb,CAAuB,CAAvB,CAAvC;AACvB,WAAQ,4BAA2BX,YAAa,EAAhD;AACD;;AAEyB,aAAf7C,eAAe,GAAG;AAC3B,WAAO2B,IAAI,CAAC8B,KAAL,CAAW5C,MAAM,CAAC6C,eAAlB,CAAP;AACD;;AAEyB,aAAfpD,eAAe,GAAG;AAC3B,WAAOI,EAAE,CAACpC,SAAH,GAAe,CAAf,GAAmB8B,gBAAgB,CAAC,EAAD,CAAhB,CAAqBC,eAArB,CAAqC,CAArC,IAA0CD,gBAAgB,CAAC,EAAD,CAAhB,CAAqBC,eAArB,CAAqC,CAArC,CAApE;AACD;;AAEqB,aAAXsD,WAAW,GAAG;AACvB,WAAOhC,IAAI,CAAC8B,KAAL,CAAW,KAAKzD,eAAL,GAAuB,KAAKM,eAAvC,CAAP;AACD;;AAEiC,aAAvBsD,uBAAuB,GAAG;AACnC,QAAIjF,eAAe,CAACkF,eAAhB,CAAgCZ,QAApC,EAA8C,OAAO,CAAP;AAC9C,QAAItE,eAAe,CAACmF,UAAhB,CAA2Bb,QAA/B,EAAyC,OAAO,CAAP;AACzC,QAAItE,eAAe,CAACoF,UAAhB,CAA2Bd,QAA/B,EAAyC,OAAO,CAAP;AACzC,QAAItE,eAAe,CAACqF,UAAhB,CAA2Bf,QAA/B,EAAyC,OAAO,CAAP;AACzC,WAAO,CAAP;AACD;;AA9JmB,C,CAiKtB;;AACA,OAAO,SAASgB,SAAT,CAAmBC,QAAnB,EAA6BC,aAAa,GAAG,KAA7C,EAAoDC,aAAa,GAAG,KAApE,EAA2EC,2BAA2B,GAAG,KAAzG,EAAgH;AACrH,MAAIC,QAAQ,CAACC,UAAT,CAAoBtD,EAApB,CAAuBC,MAAM,CAACsD,aAA9B,CAAJ,EAAkD;AAClD,QAAM/C,IAAI,GAAGE,IAAI,CAACC,GAAL,CAASsC,QAAT,EAAmB/F,QAAQ,CAACsC,SAAT,GAAqBI,MAAM,CAAC6C,eAA/C,CAAb;AACAe,EAAAA,QAAQ,CAACC,QAAT,CAAkBC,UAAU,CAACC,eAA7B,EAA8CnD,IAA9C;AACAZ,EAAAA,MAAM,CAAC6C,eAAP,GAAyB/B,IAAI,CAACjD,GAAL,CAAS,CAAT,EAAYmC,MAAM,CAAC6C,eAAP,GAAyBjC,IAArC,CAAzB;AACAoD,EAAAA,mBAAmB;AACnB,QAAMC,iBAAiB,GAAG3B,KAAK,CAACC,QAAN,GACtBC,YAAY,CAACC,qBAAb,CAAmCJ,YADb,GAEtBH,IAAI,CAACC,iBAAL,CAAuBE,YAF3B;;AAGA,MAAIiB,aAAa,IAAI,CAACW,iBAAtB,EAAyC;AACvCC,IAAAA,oBAAoB,CAACC,KAArB;AACAnE,IAAAA,MAAM,CAACoE,UAAP,GAAoBxH,EAAE,CAACyH,EAAvB;AACAC,IAAAA,cAAc;AACf;;AACDC,EAAAA,oBAAoB,CAACf,2BAAD,CAApB;AACA,QAAMgB,iBAAiB,GAAGlC,KAAK,CAACC,QAAN,GACtBC,YAAY,CAACC,qBAAb,CAAmCJ,YADb,GAErBhE,WAAW,CAAC,GAAD,CAAX,CAAiBoG,UAAjB,IAA+BvC,IAAI,CAACC,iBAAL,CAAuBE,YAF3D;;AAGA,MAAI,CAACkB,aAAD,IAAkBiB,iBAAtB,EAAyC;AACvCf,IAAAA,QAAQ,CAACC,UAAT,CAAoBgB,MAApB,CAA2BjB,QAAQ,CAACC,UAAT,CAAoBiB,aAA/C;AACD,GAFD,MAEO;AACLlB,IAAAA,QAAQ,CAACC,UAAT,CAAoBS,KAApB;AACD;;AACDP,EAAAA,QAAQ,CAACC,QAAT,CAAkBC,UAAU,CAACc,cAA7B,EAA6ChE,IAA7C;AACD;AAED,OAAO,SAAS2D,oBAAT,CAA8Bf,2BAA9B,EAA2D;AAChE,MAAIA,2BAA2B,IAAInD,MAAM,CAACG,uBAA1C,EAAmE;;AACnE,MAAI1C,eAAe,CAACkF,eAAhB,CAAgCZ,QAAhC,IAA4CpC,MAAM,CAAC6C,eAAP,GAAyB,CAAzE,EAA4E;AAC1E7C,IAAAA,MAAM,CAAC6C,eAAP,GAAyB,CAAzB;AACA,QAAI7C,MAAM,CAAC6E,QAAP,KAAoB,CAAxB,EAA2B7E,MAAM,CAAC6E,QAAP,GAAkB,CAAlB;AAC5B,GAHD,MAGO,IAAI/G,eAAe,CAACmF,UAAhB,CAA2Bb,QAA3B,IAAuCpC,MAAM,CAAC6C,eAAP,GAAyB,CAApE,EAAuE7C,MAAM,CAAC6C,eAAP,GAAyB,CAAzB,CAAvE,KACF,IAAI/E,eAAe,CAACoF,UAAhB,CAA2Bd,QAA3B,IAAuCpC,MAAM,CAAC6C,eAAP,GAAyB,CAApE,EAAuE7C,MAAM,CAAC6C,eAAP,GAAyB,CAAzB,CAAvE,KACA,IAAI/E,eAAe,CAACqF,UAAhB,CAA2Bf,QAA3B,IAAuCpC,MAAM,CAAC6C,eAAP,GAAyB,CAApE,EAAuE7C,MAAM,CAAC6C,eAAP,GAAyB,CAAzB;AAC7E;AAED,OAAO,SAASiC,2BAAT,CAAqClE,IAArC,EAA2C;AAChD,MAAI6C,QAAQ,CAACC,UAAT,CAAoBtD,EAApB,CAAuBC,MAAM,CAACsD,aAA9B,KAAgD,CAACrG,QAAQ,CAACoD,WAAT,CAAqBzD,WAA1E,EAAuF;AACvF,MAAI,CAACK,QAAQ,CAACyC,WAAd,EAA2B;AAC3B,MAAIgF,OAAO,CAACC,iBAAZ,EAA+B;;AAC/B,MAAIhF,MAAM,CAACiF,OAAP,CAAeC,aAAf,CAA6BC,cAAjC,EAAiD;AAC/CC,IAAAA,KAAK,CAACD,cAAN,CAAqBE,IAArB,CAA0B;AAAEzE,MAAAA;AAAF,KAA1B;AACA;AACD;;AACD0E,EAAAA,qBAAqB,CAAC1E,IAAD,CAArB;AACD;AAED,OAAO,SAAS0E,qBAAT,CAA+B1E,IAA/B,EAAqC;AAC1C,MAAI6C,QAAQ,CAACC,UAAT,CAAoBtD,EAApB,CAAuBC,MAAM,CAACsD,aAA9B,KAAgD,CAACrG,QAAQ,CAACoD,WAAT,CAAqBzD,WAA1E,EAAuF;AACvF,MAAI,CAACK,QAAQ,CAACyC,WAAd,EAA2B;AAC3BwF,EAAAA,QAAQ,CAACC,aAAT,CAAuBC,cAAc,CAACC,QAAtC;AACA,MAAIC,oBAAoB,CAACC,mBAArB,CAAyCxD,QAAzC,IAAqDxB,IAAzD,EAA+DiF,eAAe,GAA9E,KACKzC,SAAS,CAAC,CAAD,CAAT;AACN;;AAED,SAASyC,eAAT,GAA2B;AACzB;AACA,MAAIvI,QAAQ,CAACqC,qBAAb,EAAoC;AAClC,QAAIrC,QAAQ,CAACoD,WAAT,CAAqBzD,WAAzB,EAAsCmG,SAAS,CAAC,CAAD,CAAT;AACtC;AACD;;AACD,QAAM0C,IAAI,GAAGxI,QAAQ,CAACqD,eAAT,CAAyB,CAAzB,CAAb;AACA,MAAI,CAACmF,IAAI,CAAC7I,WAAV,EAAuB;AACvB,QAAM8I,IAAI,GAAGzI,QAAQ,CAACqD,eAAT,CAAyB,CAAzB,CAAb;;AACA,MAAI,CAACoF,IAAI,CAAC9I,WAAV,EAAuB;AACrBmG,IAAAA,SAAS,CAAC,CAAD,CAAT;AACA;AACD,GAZwB,CAazB;AACA;;;AACA,QAAM4C,QAAQ,GAAGD,IAAI,CAAC/I,MAAL,GAAc8I,IAAI,CAAC9I,MAApC;AACA,QAAMiJ,GAAG,GAAG9I,mBAAmB,CAAC2I,IAAI,CAAC/I,IAAN,CAA/B;AACA,MAAI6C,SAAS,GAAGkB,IAAI,CAACC,GAAL,CAASmF,MAAM,CAACC,SAAhB,EACd,IAAIrF,IAAI,CAAC8B,KAAL,CAAW,CAACqD,GAAG,CAAC7I,WAAJ,CAAgBgJ,QAAhB,KAA6BN,IAAI,CAAC9I,MAAnC,IAA6CgJ,QAAxD,CADU,CAAhB;;AAEA,MAAI1I,QAAQ,CAACqD,eAAT,CAAyBf,SAAzB,EAAoC3C,WAAxC,EAAqD;AACnDmG,IAAAA,SAAS,CAACxD,SAAD,CAAT;AACA;AACD,GAtBwB,CAuBzB;;;AACA,MAAIyG,SAAS,GAAG,CAAhB;;AACA,SAAOzG,SAAS,KAAKyG,SAAS,GAAG,CAAjC,EAAoC;AAClC,UAAMC,MAAM,GAAGxF,IAAI,CAAC8B,KAAL,CAAW,CAAChD,SAAS,GAAGyG,SAAb,IAA0B,CAArC,CAAf;AACA,QAAI/I,QAAQ,CAACqD,eAAT,CAAyB2F,MAAzB,EAAiCrJ,WAArC,EAAkDoJ,SAAS,GAAGC,MAAZ,CAAlD,KACK1G,SAAS,GAAG0G,MAAZ;AACN;;AACDlD,EAAAA,SAAS,CAACiD,SAAD,CAAT;AACD","sourcesContent":["import { DC } from \"./constants\";\r\n\r\nclass DimBoostRequirement {\r\n  constructor(tier, amount) {\r\n    this.tier = tier;\r\n    this.amount = amount;\r\n  }\r\n\r\n  get isSatisfied() {\r\n    const dimension = AntimatterDimension(this.tier);\r\n    return dimension.totalAmount.gte(this.amount);\r\n  }\r\n}\r\n\r\nexport class DimBoost {\r\n  static get power() {\r\n    if (NormalChallenge(8).isRunning) {\r\n      return DC.D1;\r\n    }\r\n\r\n    let boost = Effects.max(\r\n      2,\r\n      InfinityUpgrade.dimboostMult,\r\n      InfinityChallenge(7).reward,\r\n      InfinityChallenge(7),\r\n      TimeStudy(81)\r\n    )\r\n      .toDecimal()\r\n      .timesEffectsOf(\r\n        TimeStudy(83),\r\n        TimeStudy(231),\r\n        Achievement(117),\r\n        Achievement(142),\r\n        GlyphEffect.dimBoostPower,\r\n        PelleRifts.recursion.milestones[0]\r\n      ).powEffectsOf(InfinityUpgrade.dimboostMult.chargedEffect);\r\n    if (GlyphAlteration.isAdded(\"effarig\")) boost = boost.pow(getSecondaryGlyphEffect(\"effarigforgotten\"));\r\n    return boost;\r\n  }\r\n\r\n  static multiplierToNDTier(tier) {\r\n    const normalBoostMult = DimBoost.power.pow(this.purchasedBoosts + 1 - tier).clampMin(1);\r\n    const imaginaryBoostMult = DimBoost.power.times(ImaginaryUpgrade(24).effectOrDefault(1))\r\n      .pow(this.imaginaryBoosts).clampMin(1);\r\n    return normalBoostMult.times(imaginaryBoostMult);\r\n  }\r\n\r\n  static get maxDimensionsUnlockable() {\r\n    return NormalChallenge(10).isRunning ? 6 : 8;\r\n  }\r\n\r\n  static get canUnlockNewDimension() {\r\n    return DimBoost.purchasedBoosts + 4 < DimBoost.maxDimensionsUnlockable;\r\n  }\r\n\r\n  static get maxBoosts() {\r\n    if (Ra.isRunning) {\r\n      // Ra makes boosting impossible. Note that this function isn't called\r\n      // when giving initial boosts, so the player will still get those.\r\n      return 0;\r\n    }\r\n    if (InfinityChallenge(1).isRunning) {\r\n      // Usually, in Challenge 8, the only boosts that are useful are the first 5\r\n      // (the fifth unlocks sacrifice). In IC1 (Challenge 8 and Challenge 10\r\n      // combined, among other things), only the first 2 are useful\r\n      // (they unlock new dimensions).\r\n      // There's no actual problem with bulk letting the player get\r\n      // more boosts than this; it's just that boosts beyond this are pointless.\r\n      return 2;\r\n    }\r\n    if (NormalChallenge(8).isRunning) {\r\n      // See above. It's important we check for this after checking for IC1 since otherwise\r\n      // this case would trigger when we're in IC1.\r\n      return 5;\r\n    }\r\n    return Infinity;\r\n  }\r\n\r\n  static get canBeBought() {\r\n    if (DimBoost.purchasedBoosts >= this.maxBoosts) return false;\r\n    if (player.records.thisInfinity.maxAM.gt(Player.infinityGoal) &&\r\n       (!player.break || Player.isInAntimatterChallenge)) return false;\r\n    return true;\r\n  }\r\n\r\n  static get lockText() {\r\n    if (DimBoost.purchasedBoosts >= this.maxBoosts) {\r\n      if (Ra.isRunning) return \"Locked (Ra's Reality)\";\r\n      if (InfinityChallenge(1).isRunning) return \"Locked (Infinity Challenge 1)\";\r\n      if (NormalChallenge(8).isRunning) return \"Locked (8th Antimatter Dimension Autobuyer Challenge)\";\r\n    }\r\n    return null;\r\n  }\r\n\r\n  static get requirement() {\r\n    return this.bulkRequirement(1);\r\n  }\r\n\r\n  static bulkRequirement(bulk) {\r\n    const targetResets = DimBoost.purchasedBoosts + bulk;\r\n    const tier = Math.min(targetResets + 3, this.maxDimensionsUnlockable);\r\n    let amount = 20;\r\n    const discount = Effects.sum(\r\n      TimeStudy(211),\r\n      TimeStudy(222)\r\n    );\r\n    if (tier === 6 && NormalChallenge(10).isRunning) {\r\n      amount += Math.round((targetResets - 3) * (20 - discount));\r\n    } else if (tier === 8) {\r\n      amount += Math.round((targetResets - 5) * (15 - discount));\r\n    }\r\n    if (EternityChallenge(5).isRunning) {\r\n      amount += Math.pow(targetResets - 1, 3) + targetResets - 1;\r\n    }\r\n\r\n    amount -= Effects.sum(InfinityUpgrade.resetBoost);\r\n    if (InfinityChallenge(5).isCompleted) amount -= 1;\r\n\r\n    amount *= InfinityUpgrade.resetBoost.chargedEffect.effectOrDefault(1);\r\n\r\n    amount = Math.round(amount);\r\n\r\n    return new DimBoostRequirement(tier, amount);\r\n  }\r\n\r\n  static get unlockedByBoost() {\r\n    if (DimBoost.lockText !== null) return DimBoost.lockText;\r\n    const boosts = DimBoost.purchasedBoosts;\r\n    const allNDUnlocked = EternityMilestone.unlockAllND.isReached;\r\n\r\n    let newUnlock = \"\";\r\n    if (!allNDUnlocked && boosts < DimBoost.maxDimensionsUnlockable - 4) {\r\n      newUnlock = `unlock the ${boosts + 5}th Dimension`;\r\n    } else if (boosts === 4 && !NormalChallenge(10).isRunning && !EternityChallenge(3).isRunning) {\r\n      newUnlock = \"unlock Sacrifice\";\r\n    }\r\n\r\n    const formattedMultText = `give a ${formatX(DimBoost.power, 2, 1)} multiplier `;\r\n    let dimensionRange = `to the 1st Dimension`;\r\n    if (boosts > 0) dimensionRange = `to Dimensions 1-${Math.min(boosts + 1, 8)}`;\r\n    if (boosts >= DimBoost.maxDimensionsUnlockable - 1) dimensionRange = `to all Dimensions`;\r\n\r\n    let boostEffects;\r\n    if (NormalChallenge(8).isRunning) boostEffects = newUnlock;\r\n    else if (newUnlock === \"\") boostEffects = `${formattedMultText} ${dimensionRange}`;\r\n    else boostEffects = `${newUnlock} and ${formattedMultText} ${dimensionRange}`;\r\n\r\n    if (boostEffects === \"\") return \"Dimension Boosts are currently useless\";\r\n    const areDimensionsKept = (Perk.antimatterNoReset.isBought || Achievement(111).canBeApplied) &&\r\n      (!Pelle.isDoomed || PelleUpgrade.dimBoostResetsNothing.isBought);\r\n    if (areDimensionsKept) return boostEffects[0].toUpperCase() + boostEffects.substring(1);\r\n    return `Reset your Dimensions to ${boostEffects}`;\r\n  }\r\n\r\n  static get purchasedBoosts() {\r\n    return Math.floor(player.dimensionBoosts);\r\n  }\r\n\r\n  static get imaginaryBoosts() {\r\n    return Ra.isRunning ? 0 : ImaginaryUpgrade(12).effectOrDefault(0) * ImaginaryUpgrade(23).effectOrDefault(1);\r\n  }\r\n\r\n  static get totalBoosts() {\r\n    return Math.floor(this.purchasedBoosts + this.imaginaryBoosts);\r\n  }\r\n\r\n  static get startingDimensionBoosts() {\r\n    if (InfinityUpgrade.skipResetGalaxy.isBought) return 4;\r\n    if (InfinityUpgrade.skipReset3.isBought) return 3;\r\n    if (InfinityUpgrade.skipReset2.isBought) return 2;\r\n    if (InfinityUpgrade.skipReset1.isBought) return 1;\r\n    return 0;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line max-params\r\nexport function softReset(tempBulk, forcedADReset = false, forcedAMReset = false, enteringAntimatterChallenge = false) {\r\n  if (Currency.antimatter.gt(Player.infinityLimit)) return;\r\n  const bulk = Math.min(tempBulk, DimBoost.maxBoosts - player.dimensionBoosts);\r\n  EventHub.dispatch(GAME_EVENT.DIMBOOST_BEFORE, bulk);\r\n  player.dimensionBoosts = Math.max(0, player.dimensionBoosts + bulk);\r\n  resetChallengeStuff();\r\n  const canKeepDimensions = Pelle.isDoomed\r\n    ? PelleUpgrade.dimBoostResetsNothing.canBeApplied\r\n    : Perk.antimatterNoReset.canBeApplied;\r\n  if (forcedADReset || !canKeepDimensions) {\r\n    AntimatterDimensions.reset();\r\n    player.sacrificed = DC.D0;\r\n    resetTickspeed();\r\n  }\r\n  skipResetsIfPossible(enteringAntimatterChallenge);\r\n  const canKeepAntimatter = Pelle.isDoomed\r\n    ? PelleUpgrade.dimBoostResetsNothing.canBeApplied\r\n    : (Achievement(111).isUnlocked || Perk.antimatterNoReset.canBeApplied);\r\n  if (!forcedAMReset && canKeepAntimatter) {\r\n    Currency.antimatter.bumpTo(Currency.antimatter.startingValue);\r\n  } else {\r\n    Currency.antimatter.reset();\r\n  }\r\n  EventHub.dispatch(GAME_EVENT.DIMBOOST_AFTER, bulk);\r\n}\r\n\r\nexport function skipResetsIfPossible(enteringAntimatterChallenge) {\r\n  if (enteringAntimatterChallenge || Player.isInAntimatterChallenge) return;\r\n  if (InfinityUpgrade.skipResetGalaxy.isBought && player.dimensionBoosts < 4) {\r\n    player.dimensionBoosts = 4;\r\n    if (player.galaxies === 0) player.galaxies = 1;\r\n  } else if (InfinityUpgrade.skipReset3.isBought && player.dimensionBoosts < 3) player.dimensionBoosts = 3;\r\n  else if (InfinityUpgrade.skipReset2.isBought && player.dimensionBoosts < 2) player.dimensionBoosts = 2;\r\n  else if (InfinityUpgrade.skipReset1.isBought && player.dimensionBoosts < 1) player.dimensionBoosts = 1;\r\n}\r\n\r\nexport function manualRequestDimensionBoost(bulk) {\r\n  if (Currency.antimatter.gt(Player.infinityLimit) || !DimBoost.requirement.isSatisfied) return;\r\n  if (!DimBoost.canBeBought) return;\r\n  if (GameEnd.creditsEverClosed) return;\r\n  if (player.options.confirmations.dimensionBoost) {\r\n    Modal.dimensionBoost.show({ bulk });\r\n    return;\r\n  }\r\n  requestDimensionBoost(bulk);\r\n}\r\n\r\nexport function requestDimensionBoost(bulk) {\r\n  if (Currency.antimatter.gt(Player.infinityLimit) || !DimBoost.requirement.isSatisfied) return;\r\n  if (!DimBoost.canBeBought) return;\r\n  Tutorial.turnOffEffect(TUTORIAL_STATE.DIMBOOST);\r\n  if (BreakInfinityUpgrade.autobuyMaxDimboosts.isBought && bulk) maxBuyDimBoosts();\r\n  else softReset(1);\r\n}\r\n\r\nfunction maxBuyDimBoosts() {\r\n  // Boosts that unlock new dims are bought one at a time, unlocking the next dimension\r\n  if (DimBoost.canUnlockNewDimension) {\r\n    if (DimBoost.requirement.isSatisfied) softReset(1);\r\n    return;\r\n  }\r\n  const req1 = DimBoost.bulkRequirement(1);\r\n  if (!req1.isSatisfied) return;\r\n  const req2 = DimBoost.bulkRequirement(2);\r\n  if (!req2.isSatisfied) {\r\n    softReset(1);\r\n    return;\r\n  }\r\n  // Linearly extrapolate dimboost costs. req1 = a * 1 + b, req2 = a * 2 + b\r\n  // so a = req2 - req1, b = req1 - a = 2 req1 - req2, num = (dims - b) / a\r\n  const increase = req2.amount - req1.amount;\r\n  const dim = AntimatterDimension(req1.tier);\r\n  let maxBoosts = Math.min(Number.MAX_VALUE,\r\n    1 + Math.floor((dim.totalAmount.toNumber() - req1.amount) / increase));\r\n  if (DimBoost.bulkRequirement(maxBoosts).isSatisfied) {\r\n    softReset(maxBoosts);\r\n    return;\r\n  }\r\n  // But in case of EC5 it's not, so do binary search for appropriate boost amount\r\n  let minBoosts = 2;\r\n  while (maxBoosts !== minBoosts + 1) {\r\n    const middle = Math.floor((maxBoosts + minBoosts) / 2);\r\n    if (DimBoost.bulkRequirement(middle).isSatisfied) minBoosts = middle;\r\n    else maxBoosts = middle;\r\n  }\r\n  softReset(minBoosts);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}