{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nexport default {\n  name: \"CurrentGlyphEffect\",\n  props: {\n    isColored: {\n      type: Boolean,\n      default: true\n    },\n    effect: {\n      type: Object,\n      required: true\n    }\n  },\n  computed: {\n    effectConfig() {\n      return GlyphEffects[this.effect.id];\n    },\n\n    formatValue() {\n      if (this.effectConfig.isDisabledByDoomed) return \"\";\n      const baseValue = this.effect.value.value;\n      const value1 = this.effectConfig.formatEffect(baseValue);\n      const value2 = this.effectConfig.conversion === undefined ? \"\" : this.effectConfig.formatSecondaryEffect(this.effectConfig.conversion(baseValue));\n      const desc = this.effectConfig.totalDesc;\n      return desc.replace(\"{value}\", value1).replace(\"{value2}\", value2);\n    },\n\n    textColor() {\n      if (!this.isColored) return {};\n      const typeObject = this.effectConfig.id === \"timeshardpow\" ? CosmeticGlyphTypes.time : CosmeticGlyphTypes[this.effectConfig.glyphTypes];\n      let glyphColor = typeObject.currentColor.border;\n      if (typeObject.id === \"cursed\") glyphColor = \"var(--color-celestials)\";\n      return {\n        color: glyphColor,\n        \"text-shadow\": `-1px 1px 1px var(--color-text-base), 1px 1px 1px var(--color-text-base),\n                            -1px -1px 1px var(--color-text-base), 1px -1px 1px var(--color-text-base),\n                            0 0 3px ${typeObject.currentColor.border}`,\n        animation: typeObject.id === \"reality\" ? \"a-reality-glyph-description-cycle 10s infinite\" : undefined\n      };\n    },\n\n    valueClass() {\n      return this.effect.value.capped ? \"c-current-glyph-effects__effect--capped\" : \"\";\n    }\n\n  },\n\n  created() {\n    this.on$(GAME_EVENT.GLYPH_VISUAL_CHANGE, () => {\n      this.$recompute(\"effectConfig\");\n    });\n  }\n\n};","map":{"version":3,"sources":["CurrentGlyphEffect.vue"],"names":[],"mappings":";;AACA,eAAA;AACA,EAAA,IAAA,EAAA,oBADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAKA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AALA,GAFA;AAYA,EAAA,QAAA,EAAA;AACA,IAAA,YAAA,GAAA;AACA,aAAA,YAAA,CAAA,KAAA,MAAA,CAAA,EAAA,CAAA;AACA,KAHA;;AAIA,IAAA,WAAA,GAAA;AACA,UAAA,KAAA,YAAA,CAAA,kBAAA,EAAA,OAAA,EAAA;AACA,YAAA,SAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,KAAA;AACA,YAAA,MAAA,GAAA,KAAA,YAAA,CAAA,YAAA,CAAA,SAAA,CAAA;AACA,YAAA,MAAA,GAAA,KAAA,YAAA,CAAA,UAAA,KAAA,SAAA,GACA,EADA,GAEA,KAAA,YAAA,CAAA,qBAAA,CAAA,KAAA,YAAA,CAAA,UAAA,CAAA,SAAA,CAAA,CAFA;AAGA,YAAA,IAAA,GAAA,KAAA,YAAA,CAAA,SAAA;AACA,aAAA,IAAA,CACA,OADA,CACA,SADA,EACA,MADA,EAEA,OAFA,CAEA,UAFA,EAEA,MAFA,CAAA;AAGA,KAfA;;AAgBA,IAAA,SAAA,GAAA;AACA,UAAA,CAAA,KAAA,SAAA,EAAA,OAAA,EAAA;AACA,YAAA,UAAA,GAAA,KAAA,YAAA,CAAA,EAAA,KAAA,cAAA,GACA,kBAAA,CAAA,IADA,GAEA,kBAAA,CAAA,KAAA,YAAA,CAAA,UAAA,CAFA;AAIA,UAAA,UAAA,GAAA,UAAA,CAAA,YAAA,CAAA,MAAA;AACA,UAAA,UAAA,CAAA,EAAA,KAAA,QAAA,EAAA,UAAA,GAAA,yBAAA;AAEA,aAAA;AACA,QAAA,KAAA,EAAA,UADA;AAEA,uBAAA;AACA;AACA,sCAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAJA;AAKA,QAAA,SAAA,EAAA,UAAA,CAAA,EAAA,KAAA,SAAA,GAAA,gDAAA,GAAA;AALA,OAAA;AAOA,KAhCA;;AAiCA,IAAA,UAAA,GAAA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,MAAA,GAAA,yCAAA,GAAA,EAAA;AACA;;AAnCA,GAZA;;AAiDA,EAAA,OAAA,GAAA;AACA,SAAA,GAAA,CAAA,UAAA,CAAA,mBAAA,EAAA,MAAA;AACA,WAAA,UAAA,CAAA,cAAA;AACA,KAFA;AAGA;;AArDA,CAAA","sourcesContent":["<script>\r\nexport default {\r\n  name: \"CurrentGlyphEffect\",\r\n  props: {\r\n    isColored: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    effect: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  computed: {\r\n    effectConfig() {\r\n      return GlyphEffects[this.effect.id];\r\n    },\r\n    formatValue() {\r\n      if (this.effectConfig.isDisabledByDoomed) return \"\";\r\n      const baseValue = this.effect.value.value;\r\n      const value1 = this.effectConfig.formatEffect(baseValue);\r\n      const value2 = this.effectConfig.conversion === undefined\r\n        ? \"\"\r\n        : this.effectConfig.formatSecondaryEffect(this.effectConfig.conversion(baseValue));\r\n      const desc = this.effectConfig.totalDesc;\r\n      return desc\r\n        .replace(\"{value}\", value1)\r\n        .replace(\"{value2}\", value2);\r\n    },\r\n    textColor() {\r\n      if (!this.isColored) return { };\r\n      const typeObject = this.effectConfig.id === \"timeshardpow\"\r\n        ? CosmeticGlyphTypes.time\r\n        : CosmeticGlyphTypes[this.effectConfig.glyphTypes];\r\n\r\n      let glyphColor = typeObject.currentColor.border;\r\n      if (typeObject.id === \"cursed\") glyphColor = \"var(--color-celestials)\";\r\n\r\n      return {\r\n        color: glyphColor,\r\n        \"text-shadow\": `-1px 1px 1px var(--color-text-base), 1px 1px 1px var(--color-text-base),\r\n                            -1px -1px 1px var(--color-text-base), 1px -1px 1px var(--color-text-base),\r\n                            0 0 3px ${typeObject.currentColor.border}`,\r\n        animation: typeObject.id === \"reality\" ? \"a-reality-glyph-description-cycle 10s infinite\" : undefined,\r\n      };\r\n    },\r\n    valueClass() {\r\n      return this.effect.value.capped ? \"c-current-glyph-effects__effect--capped\" : \"\";\r\n    }\r\n  },\r\n  created() {\r\n    this.on$(GAME_EVENT.GLYPH_VISUAL_CHANGE, () => {\r\n      this.$recompute(\"effectConfig\");\r\n    });\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <span\r\n      :style=\"textColor\"\r\n      :class=\"valueClass\"\r\n    >\r\n      {{ formatValue }}\r\n    </span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/glyphs"},"metadata":{},"sourceType":"module"}