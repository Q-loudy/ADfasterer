{"ast":null,"code":"import \"core-js/modules/es.array.reduce.js\";\nimport { DC } from \"../../constants\";\nimport { MultiplierTabHelper } from \"./helper-functions\";\nimport { MultiplierTabIcons } from \"./icons\"; // See index.js for documentation\n\nexport const general = {\n  achievement: {\n    name: (ach, dim) => (dim === null || dim === void 0 ? void 0 : dim.length) === 2 ? `Achievement ${ach} (${dim})` : `Achievement ${ach}`,\n    multValue: (ach, dim) => {\n      // There is also a banked infinities gain effect, but we don't track that in the multiplier tab\n      if (ach === 131) return Achievement(131).canBeApplied ? Achievement(131).effects.infinitiesGain.effectOrDefault(1) : 1; // There is also a buy10 effect, but we don't track that in the multiplier tab\n\n      if (ach === 141) return Achievement(141).canBeApplied ? Achievement(141).effects.ipGain.effectOrDefault(1) : 1;\n      if (ach === 183) return 1;\n      if (!dim) return Achievement(ach).canBeApplied ? Achievement(ach).effectOrDefault(1) : 1;\n\n      if ((dim === null || dim === void 0 ? void 0 : dim.length) === 2) {\n        let totalEffect = DC.D1;\n\n        for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(dim); tier++) {\n          let singleEffect;\n          if (ach === 43) singleEffect = Achievement(43).canBeApplied ? 1 + tier / 100 : 1;else singleEffect = MultiplierTabHelper.achievementDimCheck(ach, `${dim}${tier}`) && Achievement(ach).canBeApplied ? Achievement(ach).effectOrDefault(1) : 1;\n          totalEffect = totalEffect.times(singleEffect);\n        }\n\n        return totalEffect;\n      }\n\n      if (ach === 43) return Achievement(43).canBeApplied ? 1 + Number(dim.charAt(2)) / 100 : 1;\n      return MultiplierTabHelper.achievementDimCheck(ach, dim) && Achievement(ach).canBeApplied ? Achievement(ach).effectOrDefault(1) : 1;\n    },\n    // 183 is the only time a power effect is in an Achievement, so we special-case it here and return a x1 multiplier\n    powValue: ach => ach === 183 ? Achievement(183).effectOrDefault(1) : 1,\n    isActive: ach => Achievement(ach).canBeApplied,\n    icon: ach => {\n      const base = MultiplierTabIcons.ACHIEVEMENT;\n      return {\n        color: base.color,\n        symbol: `${base.symbol}${ach}`\n      };\n    }\n  },\n  timeStudy: {\n    name: (ts, dim) => (dim === null || dim === void 0 ? void 0 : dim.length) === 2 ? `Time Study ${ts} (${dim})` : `Time Study ${ts}`,\n    multValue: (ts, dim) => {\n      // This is a special case for the passive path RG study, as its effect is 0.4 (for galaxy power) but\n      // in the multiplier tab we only reference its replicanti speed value (which is 1.5)\n      // The PASS perk doubles this effect\n      if (ts === 132) {\n        const passPerkMult = Perk.studyPassive.isBought ? 2 : 1;\n        return TimeStudy(ts).canBeApplied ? 1.5 * passPerkMult : 1;\n      }\n\n      if (!dim) return TimeStudy(ts).canBeApplied ? TimeStudy(ts).effectOrDefault(1) : 1;\n\n      if ((dim === null || dim === void 0 ? void 0 : dim.length) === 2) {\n        let totalEffect = DC.D1;\n\n        for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(dim); tier++) {\n          totalEffect = totalEffect.times(MultiplierTabHelper.timeStudyDimCheck(ts, `${dim}${tier}`) && TimeStudy(ts).isBought ? TimeStudy(ts).effectOrDefault(1) : 1);\n        }\n\n        return totalEffect;\n      } // The new Decimal() wrapper is necessary because, for some inexplicable reason, replicanti becomes\n      // reactive through TS101 if that isn't there\n\n\n      return MultiplierTabHelper.timeStudyDimCheck(ts, dim) && TimeStudy(ts).isBought ? new Decimal(TimeStudy(ts).effectOrDefault(1)) : 1;\n    },\n    isActive: ts => TimeStudy(ts).isBought,\n    icon: ts => {\n      const base = MultiplierTabIcons.TIME_STUDY;\n      return {\n        color: base.color,\n        symbol: `${base.symbol}${ts}`\n      };\n    }\n  },\n  infinityChallenge: {\n    name: ic => `Infinity Challenge ${ic}`,\n    displayOverride: ic => ic === 4 ? formatPow(InfinityChallenge(4).reward.effectValue, 0, 3) : \"\",\n    multValue: (ic, dim) => {\n      // We cheat here by actually giving IC4 a multiplier of a value equal to its effect on the final\n      // value in order to represent its proportion accurately. It's hidden by displayOverride\n      if (ic === 4) {\n        const ic4Pow = InfinityChallenge(4).reward.effectValue;\n        const mults = AntimatterDimensions.all.map(ad => ad.multiplier.pow((ic4Pow - 1) / ic4Pow));\n        if ((dim === null || dim === void 0 ? void 0 : dim.length) === 2) return mults.reduce((x, y) => x.times(y), DC.D1);\n        return mults[Number(dim.charAt(2)) - 1];\n      }\n\n      if ((dim === null || dim === void 0 ? void 0 : dim.length) === 2) {\n        let totalEffect = DC.D1;\n\n        for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(dim); tier++) {\n          totalEffect = totalEffect.times(MultiplierTabHelper.ICDimCheck(ic, `${dim}${tier}`) && InfinityChallenge(ic).isCompleted ? InfinityChallenge(ic).reward.effectOrDefault(1) : 1);\n        }\n\n        return totalEffect;\n      }\n\n      const num = Number(dim.charAt(2));\n      if (ic === 8) return num > 1 && num < 8 ? InfinityChallenge(ic).reward.effectValue : DC.D1;\n      return InfinityChallenge(ic).reward.effectValue;\n    },\n    isActive: ic => InfinityChallenge(ic).isCompleted,\n    icon: ic => {\n      const base = MultiplierTabIcons.CHALLENGE(\"infinity\");\n      return {\n        color: base.color,\n        symbol: `${base.symbol}${ic}`\n      };\n    }\n  },\n  eternityChallenge: {\n    name: ec => `Eternity Challenge ${ec}`,\n    multValue: (ec, dim) => {\n      if ((dim === null || dim === void 0 ? void 0 : dim.length) === 2) {\n        let totalEffect = DC.D1;\n\n        for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(dim); tier++) {\n          totalEffect = totalEffect.times(MultiplierTabHelper.ECDimCheck(ec, `${dim}${tier}`) && EternityChallenge(ec).reward.canBeApplied ? EternityChallenge(ec).reward.effectOrDefault(1).clampMin(1) : 1);\n        }\n\n        return totalEffect;\n      }\n\n      if (ec === 2) return dim === \"ID1\" ? EternityChallenge(ec).reward.effectValue : DC.D1;\n      return EternityChallenge(ec).reward.effectOrDefault(1);\n    },\n    isActive: ec => EternityChallenge(ec).reward.canBeApplied,\n    icon: ec => {\n      const base = MultiplierTabIcons.CHALLENGE(\"eternity\");\n      return {\n        color: base.color,\n        symbol: `${base.symbol}${ec}`\n      };\n    }\n  }\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/multiplier-tab/general.js"],"names":["DC","MultiplierTabHelper","MultiplierTabIcons","general","achievement","name","ach","dim","length","multValue","Achievement","canBeApplied","effects","infinitiesGain","effectOrDefault","ipGain","totalEffect","D1","tier","activeDimCount","singleEffect","achievementDimCheck","times","Number","charAt","powValue","isActive","icon","base","ACHIEVEMENT","color","symbol","timeStudy","ts","passPerkMult","Perk","studyPassive","isBought","TimeStudy","timeStudyDimCheck","Decimal","TIME_STUDY","infinityChallenge","ic","displayOverride","formatPow","InfinityChallenge","reward","effectValue","ic4Pow","mults","AntimatterDimensions","all","map","ad","multiplier","pow","reduce","x","y","ICDimCheck","isCompleted","num","CHALLENGE","eternityChallenge","ec","ECDimCheck","EternityChallenge","clampMin"],"mappings":"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","sourcesContent":["import { DC } from \"../../constants\";\r\n\r\nimport { MultiplierTabHelper } from \"./helper-functions\";\r\nimport { MultiplierTabIcons } from \"./icons\";\r\n\r\n// See index.js for documentation\r\nexport const general = {\r\n  achievement: {\r\n    name: (ach, dim) => (dim?.length === 2\r\n      ? `Achievement ${ach} (${dim})`\r\n      : `Achievement ${ach}`),\r\n    multValue: (ach, dim) => {\r\n      // There is also a banked infinities gain effect, but we don't track that in the multiplier tab\r\n      if (ach === 131) return Achievement(131).canBeApplied\r\n        ? Achievement(131).effects.infinitiesGain.effectOrDefault(1) : 1;\r\n      // There is also a buy10 effect, but we don't track that in the multiplier tab\r\n      if (ach === 141) return Achievement(141).canBeApplied ? Achievement(141).effects.ipGain.effectOrDefault(1) : 1;\r\n      if (ach === 183) return 1;\r\n      if (!dim) return Achievement(ach).canBeApplied ? Achievement(ach).effectOrDefault(1) : 1;\r\n\r\n      if (dim?.length === 2) {\r\n        let totalEffect = DC.D1;\r\n        for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(dim); tier++) {\r\n          let singleEffect;\r\n          if (ach === 43) singleEffect = Achievement(43).canBeApplied ? (1 + tier / 100) : 1;\r\n          else singleEffect = (MultiplierTabHelper.achievementDimCheck(ach, `${dim}${tier}`) &&\r\n              Achievement(ach).canBeApplied) ? Achievement(ach).effectOrDefault(1) : 1;\r\n          totalEffect = totalEffect.times(singleEffect);\r\n        }\r\n        return totalEffect;\r\n      }\r\n\r\n      if (ach === 43) return Achievement(43).canBeApplied ? (1 + Number(dim.charAt(2)) / 100) : 1;\r\n      return (MultiplierTabHelper.achievementDimCheck(ach, dim) && Achievement(ach).canBeApplied)\r\n        ? Achievement(ach).effectOrDefault(1) : 1;\r\n    },\r\n    // 183 is the only time a power effect is in an Achievement, so we special-case it here and return a x1 multiplier\r\n    powValue: ach => (ach === 183 ? Achievement(183).effectOrDefault(1) : 1),\r\n    isActive: ach => Achievement(ach).canBeApplied,\r\n    icon: ach => {\r\n      const base = MultiplierTabIcons.ACHIEVEMENT;\r\n      return {\r\n        color: base.color,\r\n        symbol: `${base.symbol}${ach}`,\r\n      };\r\n    },\r\n  },\r\n  timeStudy: {\r\n    name: (ts, dim) => (dim?.length === 2\r\n      ? `Time Study ${ts} (${dim})`\r\n      : `Time Study ${ts}`),\r\n    multValue: (ts, dim) => {\r\n      // This is a special case for the passive path RG study, as its effect is 0.4 (for galaxy power) but\r\n      // in the multiplier tab we only reference its replicanti speed value (which is 1.5)\r\n      // The PASS perk doubles this effect\r\n      if (ts === 132) {\r\n        const passPerkMult = Perk.studyPassive.isBought ? 2 : 1;\r\n        return TimeStudy(ts).canBeApplied ? 1.5 * passPerkMult : 1;\r\n      }\r\n\r\n      if (!dim) return TimeStudy(ts).canBeApplied ? TimeStudy(ts).effectOrDefault(1) : 1;\r\n      if (dim?.length === 2) {\r\n        let totalEffect = DC.D1;\r\n        for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(dim); tier++) {\r\n          totalEffect = totalEffect.times((MultiplierTabHelper.timeStudyDimCheck(ts, `${dim}${tier}`) &&\r\n              TimeStudy(ts).isBought) ? TimeStudy(ts).effectOrDefault(1) : 1);\r\n        }\r\n        return totalEffect;\r\n      }\r\n      // The new Decimal() wrapper is necessary because, for some inexplicable reason, replicanti becomes\r\n      // reactive through TS101 if that isn't there\r\n      return (MultiplierTabHelper.timeStudyDimCheck(ts, dim) && TimeStudy(ts).isBought)\r\n        ? new Decimal(TimeStudy(ts).effectOrDefault(1)) : 1;\r\n    },\r\n    isActive: ts => TimeStudy(ts).isBought,\r\n    icon: ts => {\r\n      const base = MultiplierTabIcons.TIME_STUDY;\r\n      return {\r\n        color: base.color,\r\n        symbol: `${base.symbol}${ts}`,\r\n      };\r\n    },\r\n  },\r\n  infinityChallenge: {\r\n    name: ic => `Infinity Challenge ${ic}`,\r\n    displayOverride: ic => (ic === 4 ? formatPow(InfinityChallenge(4).reward.effectValue, 0, 3) : \"\"),\r\n    multValue: (ic, dim) => {\r\n      // We cheat here by actually giving IC4 a multiplier of a value equal to its effect on the final\r\n      // value in order to represent its proportion accurately. It's hidden by displayOverride\r\n      if (ic === 4) {\r\n        const ic4Pow = InfinityChallenge(4).reward.effectValue;\r\n        const mults = AntimatterDimensions.all.map(ad => ad.multiplier.pow((ic4Pow - 1) / ic4Pow));\r\n        if (dim?.length === 2) return mults.reduce((x, y) => x.times(y), DC.D1);\r\n        return mults[Number(dim.charAt(2)) - 1];\r\n      }\r\n\r\n      if (dim?.length === 2) {\r\n        let totalEffect = DC.D1;\r\n        for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(dim); tier++) {\r\n          totalEffect = totalEffect.times((MultiplierTabHelper.ICDimCheck(ic, `${dim}${tier}`) &&\r\n              InfinityChallenge(ic).isCompleted) ? InfinityChallenge(ic).reward.effectOrDefault(1) : 1);\r\n        }\r\n        return totalEffect;\r\n      }\r\n      const num = Number(dim.charAt(2));\r\n      if (ic === 8) return (num > 1 && num < 8) ? InfinityChallenge(ic).reward.effectValue : DC.D1;\r\n      return InfinityChallenge(ic).reward.effectValue;\r\n    },\r\n    isActive: ic => InfinityChallenge(ic).isCompleted,\r\n    icon: ic => {\r\n      const base = MultiplierTabIcons.CHALLENGE(\"infinity\");\r\n      return {\r\n        color: base.color,\r\n        symbol: `${base.symbol}${ic}`,\r\n      };\r\n    },\r\n  },\r\n  eternityChallenge: {\r\n    name: ec => `Eternity Challenge ${ec}`,\r\n    multValue: (ec, dim) => {\r\n      if (dim?.length === 2) {\r\n        let totalEffect = DC.D1;\r\n        for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(dim); tier++) {\r\n          totalEffect = totalEffect.times(\r\n            (MultiplierTabHelper.ECDimCheck(ec, `${dim}${tier}`) && EternityChallenge(ec).reward.canBeApplied)\r\n              ? EternityChallenge(ec).reward.effectOrDefault(1).clampMin(1)\r\n              : 1);\r\n        }\r\n        return totalEffect;\r\n      }\r\n      if (ec === 2) return dim === \"ID1\" ? EternityChallenge(ec).reward.effectValue : DC.D1;\r\n      return EternityChallenge(ec).reward.effectOrDefault(1);\r\n    },\r\n    isActive: ec => EternityChallenge(ec).reward.canBeApplied,\r\n    icon: ec => {\r\n      const base = MultiplierTabIcons.CHALLENGE(\"eternity\");\r\n      return {\r\n        color: base.color,\r\n        symbol: `${base.symbol}${ec}`,\r\n      };\r\n    },\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}