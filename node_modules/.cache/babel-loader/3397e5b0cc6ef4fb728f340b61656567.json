{"ast":null,"code":"import OpenModalHotkeysButton from \"@/components/OpenModalHotkeysButton\";\nimport OptionsButton from \"@/components/OptionsButton\";\nimport PrimaryToggleButton from \"@/components/PrimaryToggleButton\";\nimport SliderComponent from \"@/components/SliderComponent\";\nexport default {\n  name: \"OptionsGameplayTab\",\n  components: {\n    OpenModalHotkeysButton,\n    OptionsButton,\n    PrimaryToggleButton,\n    SliderComponent\n  },\n\n  data() {\n    return {\n      offlineProgress: false,\n      hibernationCatchup: false,\n      hotkeys: false,\n      offlineSlider: 0,\n      offlineTicks: 0,\n      automaticTabSwitching: false,\n      infinityUnlocked: false,\n      automatorUnlocked: false,\n      automatorLogSize: 0,\n      gamePaused: false\n    };\n  },\n\n  computed: {\n    sliderPropsOfflineTicks() {\n      return {\n        min: 22,\n        max: 54,\n        interval: 1,\n        width: \"100%\",\n        tooltip: false\n      };\n    },\n\n    sliderPropsAutomatorLogSize() {\n      return {\n        min: 50,\n        max: 500,\n        interval: 50,\n        width: \"100%\",\n        tooltip: false\n      };\n    }\n\n  },\n  watch: {\n    offlineProgress(newValue) {\n      player.options.offlineProgress = newValue;\n    },\n\n    hibernationCatchup(newValue) {\n      player.options.hibernationCatchup = newValue;\n    },\n\n    hotkeys(newValue) {\n      player.options.hotkeys = newValue;\n    },\n\n    offlineSlider(newValue) {\n      player.options.offlineTicks = this.parseOfflineSlider(newValue);\n    },\n\n    automaticTabSwitching(newValue) {\n      player.options.automaticTabSwitching = newValue;\n    },\n\n    automatorLogSize(newValue) {\n      player.options.automatorEvents.maxEntries = parseInt(newValue, 10);\n    },\n\n    gamePaused(newValue) {\n      if (player.options.gamePaused !== newValue) {\n        GameUI.notify.info(newValue ? \"Game paused\" : \"Game resumed\", 2000);\n      }\n\n      player.options.gamePaused = newValue;\n    }\n\n  },\n\n  // This puts the slider in the right spot on initialization\n  created() {\n    const ticks = player.options.offlineTicks;\n    const exponent = Math.floor(Math.log10(ticks));\n    const mantissa = ticks / Math.pow(10, exponent) - 1;\n    this.offlineSlider = 9 * exponent + mantissa;\n  },\n\n  methods: {\n    update() {\n      const options = player.options;\n      this.offlineProgress = options.offlineProgress;\n      this.hibernationCatchup = options.hibernationCatchup;\n      this.hotkeys = options.hotkeys;\n      this.offlineTicks = player.options.offlineTicks;\n      this.automaticTabSwitching = options.automaticTabSwitching;\n      this.infinityUnlocked = PlayerProgress.current.isInfinityUnlocked;\n      this.automatorUnlocked = Player.automatorUnlocked;\n      this.automatorLogSize = options.automatorEvents.maxEntries;\n      this.gamePaused = options.gamePaused;\n    },\n\n    // Given the endpoints of 22-54, this produces 500, 600, ... , 900, 1000, 2000, ... , 1e6 ticks\n    // It's essentially 10^(x/10) but with the mantissa spaced linearly instead of logarithmically\n    parseOfflineSlider(str) {\n      const value = parseInt(str, 10);\n      return (1 + value % 9) * Math.pow(10, Math.floor(value / 9));\n    },\n\n    adjustSliderValueOfflineTicks(value) {\n      this.offlineSlider = value;\n      player.options.offlineTicks = this.parseOfflineSlider(value);\n    },\n\n    adjustSliderValueAutomatorLogSize(value) {\n      this.automatorLogSize = value;\n      player.options.automatorEvents.maxEntries = this.automatorLogSize;\n    }\n\n  }\n};","map":{"version":3,"sources":["OptionsGameplayTab.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport OpenModalHotkeysButton from \"@/components/OpenModalHotkeysButton\";\r\nimport OptionsButton from \"@/components/OptionsButton\";\r\nimport PrimaryToggleButton from \"@/components/PrimaryToggleButton\";\r\nimport SliderComponent from \"@/components/SliderComponent\";\r\n\r\nexport default {\r\n  name: \"OptionsGameplayTab\",\r\n  components: {\r\n    OpenModalHotkeysButton,\r\n    OptionsButton,\r\n    PrimaryToggleButton,\r\n    SliderComponent\r\n  },\r\n  data() {\r\n    return {\r\n      offlineProgress: false,\r\n      hibernationCatchup: false,\r\n      hotkeys: false,\r\n      offlineSlider: 0,\r\n      offlineTicks: 0,\r\n      automaticTabSwitching: false,\r\n      infinityUnlocked: false,\r\n      automatorUnlocked: false,\r\n      automatorLogSize: 0,\r\n      gamePaused: false,\r\n    };\r\n  },\r\n  computed: {\r\n    sliderPropsOfflineTicks() {\r\n      return {\r\n        min: 22,\r\n        max: 54,\r\n        interval: 1,\r\n        width: \"100%\",\r\n        tooltip: false\r\n      };\r\n    },\r\n    sliderPropsAutomatorLogSize() {\r\n      return {\r\n        min: 50,\r\n        max: 500,\r\n        interval: 50,\r\n        width: \"100%\",\r\n        tooltip: false\r\n      };\r\n    }\r\n  },\r\n  watch: {\r\n    offlineProgress(newValue) {\r\n      player.options.offlineProgress = newValue;\r\n    },\r\n    hibernationCatchup(newValue) {\r\n      player.options.hibernationCatchup = newValue;\r\n    },\r\n    hotkeys(newValue) {\r\n      player.options.hotkeys = newValue;\r\n    },\r\n    offlineSlider(newValue) {\r\n      player.options.offlineTicks = this.parseOfflineSlider(newValue);\r\n    },\r\n    automaticTabSwitching(newValue) {\r\n      player.options.automaticTabSwitching = newValue;\r\n    },\r\n    automatorLogSize(newValue) {\r\n      player.options.automatorEvents.maxEntries = parseInt(newValue, 10);\r\n    },\r\n    gamePaused(newValue) {\r\n      if (player.options.gamePaused !== newValue) {\r\n        GameUI.notify.info(newValue ? \"Game paused\" : \"Game resumed\", 2000);\r\n      }\r\n      player.options.gamePaused = newValue;\r\n    },\r\n  },\r\n  // This puts the slider in the right spot on initialization\r\n  created() {\r\n    const ticks = player.options.offlineTicks;\r\n    const exponent = Math.floor(Math.log10(ticks));\r\n    const mantissa = (ticks / Math.pow(10, exponent)) - 1;\r\n    this.offlineSlider = 9 * exponent + mantissa;\r\n  },\r\n  methods: {\r\n    update() {\r\n      const options = player.options;\r\n      this.offlineProgress = options.offlineProgress;\r\n      this.hibernationCatchup = options.hibernationCatchup;\r\n      this.hotkeys = options.hotkeys;\r\n      this.offlineTicks = player.options.offlineTicks;\r\n      this.automaticTabSwitching = options.automaticTabSwitching;\r\n      this.infinityUnlocked = PlayerProgress.current.isInfinityUnlocked;\r\n      this.automatorUnlocked = Player.automatorUnlocked;\r\n      this.automatorLogSize = options.automatorEvents.maxEntries;\r\n      this.gamePaused = options.gamePaused;\r\n    },\r\n    // Given the endpoints of 22-54, this produces 500, 600, ... , 900, 1000, 2000, ... , 1e6 ticks\r\n    // It's essentially 10^(x/10) but with the mantissa spaced linearly instead of logarithmically\r\n    parseOfflineSlider(str) {\r\n      const value = parseInt(str, 10);\r\n      return (1 + value % 9) * Math.pow(10, Math.floor(value / 9));\r\n    },\r\n    adjustSliderValueOfflineTicks(value) {\r\n      this.offlineSlider = value;\r\n      player.options.offlineTicks = this.parseOfflineSlider(value);\r\n    },\r\n    adjustSliderValueAutomatorLogSize(value) {\r\n      this.automatorLogSize = value;\r\n      player.options.automatorEvents.maxEntries = this.automatorLogSize;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-options-tab\">\r\n    <div class=\"l-options-grid\">\r\n      <div class=\"l-options-grid__row\">\r\n        <OptionsButton\r\n          class=\"o-primary-btn--option\"\r\n          onclick=\"Modal.confirmationOptions.show()\"\r\n        >\r\n          Open Confirmation Options\r\n        </OptionsButton>\r\n        <PrimaryToggleButton\r\n          v-model=\"hotkeys\"\r\n          class=\"o-primary-btn--option l-options-grid__button\"\r\n          label=\"Hotkeys:\"\r\n          on=\"Enabled\"\r\n          off=\"Disabled\"\r\n        />\r\n        <PrimaryToggleButton\r\n          v-model=\"automaticTabSwitching\"\r\n          class=\"o-primary-btn--option l-options-grid__button l-toggle-button\"\r\n          label=\"Switch tabs on some events (e.g. entering challenges):\"\r\n        />\r\n      </div>\r\n      <div class=\"l-options-grid__row\">\r\n        <PrimaryToggleButton\r\n          v-model=\"offlineProgress\"\r\n          class=\"o-primary-btn--option l-options-grid__button\"\r\n          label=\"Offline progress:\"\r\n        />\r\n        <div class=\"o-primary-btn o-primary-btn--option o-primary-btn--slider l-options-grid__button\">\r\n          <b>Offline ticks: {{ formatInt(offlineTicks) }}</b>\r\n          <SliderComponent\r\n            class=\"o-primary-btn--slider__slider\"\r\n            v-bind=\"sliderPropsOfflineTicks\"\r\n            :value=\"offlineSlider\"\r\n            @input=\"adjustSliderValueOfflineTicks($event)\"\r\n          />\r\n        </div>\r\n        <PrimaryToggleButton\r\n          v-model=\"hibernationCatchup\"\r\n          class=\"o-primary-btn--option l-options-grid__button\"\r\n          label=\"Run suspended time as offline:\"\r\n        />\r\n      </div>\r\n      <div class=\"l-options-grid__row\">\r\n        <PrimaryToggleButton\r\n          v-model=\"gamePaused\"\r\n          class=\"o-primary-btn--option l-options-grid__button\"\r\n          label=\"\"\r\n          on=\"Resume the game\"\r\n          off=\"Pause the game\"\r\n        />\r\n        <div\r\n          v-if=\"automatorUnlocked\"\r\n          class=\"o-primary-btn o-primary-btn--option o-primary-btn--slider l-options-grid__button\"\r\n        >\r\n          <b>Automator Log Max: {{ formatInt(parseInt(automatorLogSize)) }}</b>\r\n          <SliderComponent\r\n            class=\"o-primary-btn--slider__slider\"\r\n            v-bind=\"sliderPropsAutomatorLogSize\"\r\n            :value=\"automatorLogSize\"\r\n            @input=\"adjustSliderValueAutomatorLogSize($event)\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <OpenModalHotkeysButton />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.l-toggle-button {\r\n  font-size: 12px;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/options-gameplay"},"metadata":{},"sourceType":"module"}