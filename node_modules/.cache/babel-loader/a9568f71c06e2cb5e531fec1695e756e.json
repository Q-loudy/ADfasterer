{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport { GameMechanicState } from \"../game-mechanics\";\n\nfunction showSecondPreferredWarning(currTree) {\n  const canPickSecond = currTree.allowedDimPathCount === 2 && currTree.currDimPathCount < 2; // Show a warning if the player can choose the second preferred dimension path and hasn't yet done so.\n\n  if (canPickSecond && TimeStudy.preferredPaths.dimension.path.length < 2) {\n    GameUI.notify.error(\"You haven't selected a second preferred Dimension path.\");\n    return true;\n  }\n\n  return false;\n} // This is only ever called from manual player actions, which means we can immediately commit them to the game state\n// eslint-disable-next-line complexity\n\n\nexport function buyStudiesUntil(id, ec = -1) {\n  let studyArray = [];\n  const lastInPrevRow = Math.floor(id / 10) * 10 - 1;\n  const requestedPath = TimeStudy(id).path;\n  const currTree = GameCache.currentStudyTree.value; // Makes an array [start, start+1, ... , end], empty if end < start\n\n  const range = (start, end) => [...Array(Math.clampMin(end - start + 1, 0)).keys()].map(i => i + start);\n\n  const ecHasRequirement = !Perk.studyECRequirement.isBought; // If the player tries to buy a study which is immediately buyable, we try to buy it first in case buying other\n  // studies up to that point renders it unaffordable. Effectively the clicked study is higher priority than all others\n\n  studyArray.push(id); // Greddily buy all studies before the dimension split then try again; if the requested study was above the dimension\n  // split, then we're done and don't need to attempt to buy any more\n\n  studyArray.push(...range(11, Math.min(lastInPrevRow, 70)));\n  studyArray.push(id);\n  if (id < 71) return studyArray; // Priority for behavior when buying in the Dimension split; we follow only the first applicable entry below:\n  // - If we're buying a study within the split, we first buy just the requested path up to the requested study.\n  //   (stops buying)\n  // - If we want to buy EC11 or EC12 we only buy the required dimension path unless we have the EC requirement perk\n  //   (continues onward)\n  // - If we can't buy any additional paths or have 3 paths available, we attempt to buy everything here, prioritizing\n  //   preferred paths. With less than 3 paths available, this only purchases the rest of any unfinished paths\n  //   (continues onward)\n  // - If the player has a preferred path, we attempt to buy it (continues onward)\n  // - If the player doesn't have a preferred path, we say so and do nothing (stops buying)\n  // - Otherwise we do nothing (stops buying)\n\n  if (id < 111) {\n    studyArray.push(...NormalTimeStudies.paths[requestedPath].filter(s => s <= id));\n    return studyArray;\n  }\n\n  if (ec === 11 && ecHasRequirement) {\n    studyArray.push(...NormalTimeStudies.paths[TIME_STUDY_PATH.ANTIMATTER_DIM].filter(s => s <= id));\n  } else if (ec === 12 && ecHasRequirement) {\n    studyArray.push(...NormalTimeStudies.paths[TIME_STUDY_PATH.TIME_DIM].filter(s => s <= id));\n  } else if (currTree.currDimPathCount === currTree.allowedDimPathCount || currTree.allowedDimPathCount === 3) {\n    studyArray.push(...TimeStudy.preferredPaths.dimension.studies);\n    studyArray.push(...range(71, 103));\n  } else if (TimeStudy.preferredPaths.dimension.path.length > 0) {\n    studyArray.push(...TimeStudy.preferredPaths.dimension.studies);\n  } else if (currTree.currDimPathCount === 0) {\n    GameUI.notify.error(\"You haven't selected a preferred Dimension path.\");\n    return studyArray;\n  } // Explicitly purchase 111 here if it's included and stop if applicable, as it isn't covered by logic in either split.\n\n\n  if (id >= 111) studyArray.push(111);\n  const secondPreferredWarningShown = showSecondPreferredWarning(currTree);\n  if (id < 121) return studyArray; // Priority for behavior when buying in the Pace split; we follow only the first applicable entry below. In contrast\n  // to the Dimension split, here we instead err on the side of not buying extra studies since they will cost ST.\n  // - If we're buying a study within the split, we first buy just the requested path up to the requested study.\n  //   We don't attempt to buy other paths here because that may waste ST (stops buying)\n  // - If V has been fully completed, we just brute-force this whole group (continues onward)\n  // - If we already have part of a single path, we buy the rest of it (continues onward)\n  // - If we have a preferred path, we buy it all (continues onward)\n  // - If we don't have any pace paths at this point, there's no way to objectively choose one (stops buying)\n  // - Fallback case: we have more than one path and intentionally do nothing here (continues onward)\n\n  if (id < 151) {\n    studyArray.push(...NormalTimeStudies.paths[TimeStudy(id).path].filter(s => s <= id));\n    return studyArray;\n  }\n\n  const pacePaths = currTree.pacePaths.map(pathName => NormalTimeStudies.pathList.find(p => p.name === pathName).path);\n\n  if (V.isFullyCompleted && !Pelle.isDoomed) {\n    const allPace = NormalTimeStudies.paths[TIME_STUDY_PATH.ACTIVE].concat(NormalTimeStudies.paths[TIME_STUDY_PATH.PASSIVE]).concat(NormalTimeStudies.paths[TIME_STUDY_PATH.IDLE]);\n    studyArray.push(...allPace);\n  } else if (pacePaths.length === 1) {\n    studyArray.push(...NormalTimeStudies.paths[pacePaths[0]]);\n  } else if (TimeStudy.preferredPaths.pace.path !== 0) {\n    studyArray.push(...TimeStudy.preferredPaths.pace.studies);\n  } else if (pacePaths.length === 0) {\n    GameUI.notify.error(\"You haven't selected a preferred Pace path.\");\n    return studyArray;\n  } // First we buy up to 201 so we can buy the second preferred path if needed\n\n\n  studyArray.push(...range(151, Math.min(id, 201)));\n  if (id < 201) return studyArray; // If we want to buy EC11 or EC12 we don't want 201 unless we have the EC study requirement perk\n\n  if (!(ecHasRequirement && (ec === 11 || ec === 12))) {\n    // We need to commit what we have to the game state, because the check for priorityRequirement\n    // requires us knowing if we have actually purchased 201.\n    TimeStudyTree.commitToGameState(studyArray);\n    studyArray = []; // Buy the second preferred dimension path if we have one\n\n    if (TimeStudy.preferredPaths.dimension.path.length > 0) {\n      studyArray.push(...TimeStudy.preferredPaths.dimension.studies); // We need to commit the dimension paths to the game state in order\n      // to know if we should display the second preferred path warning.\n\n      TimeStudyTree.commitToGameState(studyArray);\n      studyArray = [];\n    }\n\n    if (!secondPreferredWarningShown) showSecondPreferredWarning(GameCache.currentStudyTree.value);\n    studyArray.push(...range(211, Math.min(lastInPrevRow, 214))); // If the user clicked on a study in rows 19-22, we've tried to buy up to the previous\n    // row. Try to buy that study now:\n\n    studyArray.push(id);\n  } // Don't bother buying any more studies at or below row 22 unless the player has fully finished V, in which case just\n  // brute-force all of them up to the specified study. This buys all pre-triads, then triads sequentially up to the id\n\n\n  if (id < 221 || !V.isFullyCompleted) return studyArray;\n  studyArray.push(...range(221, Math.max(id, 234)));\n  return studyArray;\n}\nexport function respecTimeStudies(auto) {\n  for (const study of TimeStudy.boughtNormalTS()) {\n    study.refund();\n  }\n\n  player.timestudy.studies = [];\n  GameCache.timeStudies.invalidate();\n  player.celestials.v.STSpent = 0;\n  const ecStudy = TimeStudy.eternityChallenge.current();\n\n  if (ecStudy !== undefined) {\n    ecStudy.refund();\n    player.challenge.eternity.unlocked = 0;\n  }\n\n  if (!auto) {\n    Tab.eternity.studies.show();\n  }\n\n  GameCache.currentStudyTree.invalidate();\n}\nexport class TimeStudyState extends GameMechanicState {\n  constructor(config, type) {\n    super(config);\n    this.type = type;\n  }\n\n  get cost() {\n    return this.config.cost;\n  }\n\n  get STCost() {\n    const base = this.config.STCost;\n    return VUnlocks.raUnlock.canBeApplied ? base - 2 : base;\n  }\n\n  refund() {\n    Currency.timeTheorems.add(this.cost);\n  }\n\n  get isAffordable() {\n    return Currency.timeTheorems.gte(this.cost);\n  }\n\n  get canBeBought() {\n    return true;\n  }\n\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/time-studies/time-studies.js"],"names":["GameMechanicState","showSecondPreferredWarning","currTree","canPickSecond","allowedDimPathCount","currDimPathCount","TimeStudy","preferredPaths","dimension","path","length","GameUI","notify","error","buyStudiesUntil","id","ec","studyArray","lastInPrevRow","Math","floor","requestedPath","GameCache","currentStudyTree","value","range","start","end","Array","clampMin","keys","map","i","ecHasRequirement","Perk","studyECRequirement","isBought","push","min","NormalTimeStudies","paths","filter","s","TIME_STUDY_PATH","ANTIMATTER_DIM","TIME_DIM","studies","secondPreferredWarningShown","pacePaths","pathName","pathList","find","p","name","V","isFullyCompleted","Pelle","isDoomed","allPace","ACTIVE","concat","PASSIVE","IDLE","pace","TimeStudyTree","commitToGameState","max","respecTimeStudies","auto","study","boughtNormalTS","refund","player","timestudy","timeStudies","invalidate","celestials","v","STSpent","ecStudy","eternityChallenge","current","undefined","challenge","eternity","unlocked","Tab","show","TimeStudyState","constructor","config","type","cost","STCost","base","VUnlocks","raUnlock","canBeApplied","Currency","timeTheorems","add","isAffordable","gte","canBeBought"],"mappings":"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","sourcesContent":["import { GameMechanicState } from \"../game-mechanics\";\r\n\r\nfunction showSecondPreferredWarning(currTree) {\r\n  const canPickSecond = currTree.allowedDimPathCount === 2 && currTree.currDimPathCount < 2;\r\n  // Show a warning if the player can choose the second preferred dimension path and hasn't yet done so.\r\n  if (canPickSecond && TimeStudy.preferredPaths.dimension.path.length < 2) {\r\n    GameUI.notify.error(\"You haven't selected a second preferred Dimension path.\");\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n// This is only ever called from manual player actions, which means we can immediately commit them to the game state\r\n// eslint-disable-next-line complexity\r\nexport function buyStudiesUntil(id, ec = -1) {\r\n  let studyArray = [];\r\n  const lastInPrevRow = Math.floor(id / 10) * 10 - 1;\r\n  const requestedPath = TimeStudy(id).path;\r\n  const currTree = GameCache.currentStudyTree.value;\r\n  // Makes an array [start, start+1, ... , end], empty if end < start\r\n  const range = (start, end) => [...Array(Math.clampMin(end - start + 1, 0)).keys()].map(i => i + start);\r\n  const ecHasRequirement = !Perk.studyECRequirement.isBought;\r\n\r\n  // If the player tries to buy a study which is immediately buyable, we try to buy it first in case buying other\r\n  // studies up to that point renders it unaffordable. Effectively the clicked study is higher priority than all others\r\n  studyArray.push(id);\r\n\r\n  // Greddily buy all studies before the dimension split then try again; if the requested study was above the dimension\r\n  // split, then we're done and don't need to attempt to buy any more\r\n  studyArray.push(...range(11, Math.min(lastInPrevRow, 70)));\r\n  studyArray.push(id);\r\n\r\n  if (id < 71) return studyArray;\r\n\r\n  // Priority for behavior when buying in the Dimension split; we follow only the first applicable entry below:\r\n  // - If we're buying a study within the split, we first buy just the requested path up to the requested study.\r\n  //   (stops buying)\r\n  // - If we want to buy EC11 or EC12 we only buy the required dimension path unless we have the EC requirement perk\r\n  //   (continues onward)\r\n  // - If we can't buy any additional paths or have 3 paths available, we attempt to buy everything here, prioritizing\r\n  //   preferred paths. With less than 3 paths available, this only purchases the rest of any unfinished paths\r\n  //   (continues onward)\r\n  // - If the player has a preferred path, we attempt to buy it (continues onward)\r\n  // - If the player doesn't have a preferred path, we say so and do nothing (stops buying)\r\n  // - Otherwise we do nothing (stops buying)\r\n  if (id < 111) {\r\n    studyArray.push(...NormalTimeStudies.paths[requestedPath].filter(s => (s <= id)));\r\n    return studyArray;\r\n  }\r\n\r\n  if (ec === 11 && ecHasRequirement) {\r\n    studyArray.push(...NormalTimeStudies.paths[TIME_STUDY_PATH.ANTIMATTER_DIM].filter(s => (s <= id)));\r\n  } else if (ec === 12 && ecHasRequirement) {\r\n    studyArray.push(...NormalTimeStudies.paths[TIME_STUDY_PATH.TIME_DIM].filter(s => (s <= id)));\r\n  } else if (currTree.currDimPathCount === currTree.allowedDimPathCount || currTree.allowedDimPathCount === 3) {\r\n    studyArray.push(...TimeStudy.preferredPaths.dimension.studies);\r\n    studyArray.push(...range(71, 103));\r\n  } else if (TimeStudy.preferredPaths.dimension.path.length > 0) {\r\n    studyArray.push(...TimeStudy.preferredPaths.dimension.studies);\r\n  } else if (currTree.currDimPathCount === 0) {\r\n    GameUI.notify.error(\"You haven't selected a preferred Dimension path.\");\r\n    return studyArray;\r\n  }\r\n\r\n  // Explicitly purchase 111 here if it's included and stop if applicable, as it isn't covered by logic in either split.\r\n  if (id >= 111) studyArray.push(111);\r\n\r\n  const secondPreferredWarningShown = showSecondPreferredWarning(currTree);\r\n\r\n  if (id < 121) return studyArray;\r\n\r\n  // Priority for behavior when buying in the Pace split; we follow only the first applicable entry below. In contrast\r\n  // to the Dimension split, here we instead err on the side of not buying extra studies since they will cost ST.\r\n  // - If we're buying a study within the split, we first buy just the requested path up to the requested study.\r\n  //   We don't attempt to buy other paths here because that may waste ST (stops buying)\r\n  // - If V has been fully completed, we just brute-force this whole group (continues onward)\r\n  // - If we already have part of a single path, we buy the rest of it (continues onward)\r\n  // - If we have a preferred path, we buy it all (continues onward)\r\n  // - If we don't have any pace paths at this point, there's no way to objectively choose one (stops buying)\r\n  // - Fallback case: we have more than one path and intentionally do nothing here (continues onward)\r\n\r\n  if (id < 151) {\r\n    studyArray.push(...NormalTimeStudies.paths[TimeStudy(id).path].filter(s => (s <= id)));\r\n    return studyArray;\r\n  }\r\n\r\n  const pacePaths = currTree.pacePaths\r\n    .map(pathName => NormalTimeStudies.pathList.find(p => p.name === pathName).path);\r\n  if (V.isFullyCompleted && !Pelle.isDoomed) {\r\n    const allPace = NormalTimeStudies.paths[TIME_STUDY_PATH.ACTIVE]\r\n      .concat(NormalTimeStudies.paths[TIME_STUDY_PATH.PASSIVE])\r\n      .concat(NormalTimeStudies.paths[TIME_STUDY_PATH.IDLE]);\r\n    studyArray.push(...allPace);\r\n  } else if (pacePaths.length === 1) {\r\n    studyArray.push(...NormalTimeStudies.paths[pacePaths[0]]);\r\n  } else if (TimeStudy.preferredPaths.pace.path !== 0) {\r\n    studyArray.push(...TimeStudy.preferredPaths.pace.studies);\r\n  } else if (pacePaths.length === 0) {\r\n    GameUI.notify.error(\"You haven't selected a preferred Pace path.\");\r\n    return studyArray;\r\n  }\r\n\r\n  // First we buy up to 201 so we can buy the second preferred path if needed\r\n  studyArray.push(...range(151, Math.min(id, 201)));\r\n  if (id < 201) return studyArray;\r\n\r\n  // If we want to buy EC11 or EC12 we don't want 201 unless we have the EC study requirement perk\r\n  if (!(ecHasRequirement && (ec === 11 || ec === 12))) {\r\n    // We need to commit what we have to the game state, because the check for priorityRequirement\r\n    // requires us knowing if we have actually purchased 201.\r\n    TimeStudyTree.commitToGameState(studyArray);\r\n    studyArray = [];\r\n\r\n    // Buy the second preferred dimension path if we have one\r\n    if (TimeStudy.preferredPaths.dimension.path.length > 0) {\r\n      studyArray.push(...TimeStudy.preferredPaths.dimension.studies);\r\n      // We need to commit the dimension paths to the game state in order\r\n      // to know if we should display the second preferred path warning.\r\n      TimeStudyTree.commitToGameState(studyArray);\r\n      studyArray = [];\r\n    }\r\n\r\n    if (!secondPreferredWarningShown) showSecondPreferredWarning(GameCache.currentStudyTree.value);\r\n\r\n    studyArray.push(...range(211, Math.min(lastInPrevRow, 214)));\r\n\r\n    // If the user clicked on a study in rows 19-22, we've tried to buy up to the previous\r\n    // row. Try to buy that study now:\r\n    studyArray.push(id);\r\n  }\r\n\r\n  // Don't bother buying any more studies at or below row 22 unless the player has fully finished V, in which case just\r\n  // brute-force all of them up to the specified study. This buys all pre-triads, then triads sequentially up to the id\r\n  if (id < 221 || !V.isFullyCompleted) return studyArray;\r\n  studyArray.push(...range(221, Math.max(id, 234)));\r\n  return studyArray;\r\n}\r\n\r\nexport function respecTimeStudies(auto) {\r\n  for (const study of TimeStudy.boughtNormalTS()) {\r\n    study.refund();\r\n  }\r\n  player.timestudy.studies = [];\r\n  GameCache.timeStudies.invalidate();\r\n  player.celestials.v.STSpent = 0;\r\n  const ecStudy = TimeStudy.eternityChallenge.current();\r\n  if (ecStudy !== undefined) {\r\n    ecStudy.refund();\r\n    player.challenge.eternity.unlocked = 0;\r\n  }\r\n  if (!auto) {\r\n    Tab.eternity.studies.show();\r\n  }\r\n  GameCache.currentStudyTree.invalidate();\r\n}\r\n\r\nexport class TimeStudyState extends GameMechanicState {\r\n  constructor(config, type) {\r\n    super(config);\r\n    this.type = type;\r\n  }\r\n\r\n  get cost() {\r\n    return this.config.cost;\r\n  }\r\n\r\n  get STCost() {\r\n    const base = this.config.STCost;\r\n    return VUnlocks.raUnlock.canBeApplied\r\n      ? base - 2\r\n      : base;\r\n  }\r\n\r\n  refund() {\r\n    Currency.timeTheorems.add(this.cost);\r\n  }\r\n\r\n  get isAffordable() {\r\n    return Currency.timeTheorems.gte(this.cost);\r\n  }\r\n\r\n  get canBeBought() {\r\n    return true;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}