{"ast":null,"code":"const MAX_DATA_POINTS = 10;\nexport class PercentageRollingAverage {\n  constructor() {\n    this.dataPoints = [];\n  }\n\n  add(dataPoint) {\n    this.dataPoints.push(dataPoint);\n\n    if (this.dataPoints.length > MAX_DATA_POINTS) {\n      this.dataPoints.shift();\n    }\n  }\n\n  get average() {\n    const dataPoints = this.dataPoints.filter(p => p !== undefined);\n\n    if (dataPoints.length === 0) {\n      return [];\n    }\n\n    const average = [];\n    const reference = dataPoints[0];\n\n    for (let i = 0; i < reference.length; i++) {\n      average[i] = dataPoints.map(p => p[i]).sum() / dataPoints.length;\n    }\n\n    return average;\n  }\n\n  clear() {\n    this.dataPoints = [];\n  }\n\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/components/tabs/statistics/percentage-rolling-average.js"],"names":["MAX_DATA_POINTS","PercentageRollingAverage","constructor","dataPoints","add","dataPoint","push","length","shift","average","filter","p","undefined","reference","i","map","sum","clear"],"mappings":"AAAA,MAAMA,eAAe,GAAG,EAAxB;AAEA,OAAO,MAAMC,wBAAN,CAA+B;AACpCC,EAAAA,WAAW,GAAG;AACZ,SAAKC,UAAL,GAAkB,EAAlB;AACD;;AAEDC,EAAAA,GAAG,CAACC,SAAD,EAAY;AACb,SAAKF,UAAL,CAAgBG,IAAhB,CAAqBD,SAArB;;AACA,QAAI,KAAKF,UAAL,CAAgBI,MAAhB,GAAyBP,eAA7B,EAA8C;AAC5C,WAAKG,UAAL,CAAgBK,KAAhB;AACD;AACF;;AAEU,MAAPC,OAAO,GAAG;AACZ,UAAMN,UAAU,GAAG,KAAKA,UAAL,CAAgBO,MAAhB,CAAuBC,CAAC,IAAIA,CAAC,KAAKC,SAAlC,CAAnB;;AACA,QAAIT,UAAU,CAACI,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,aAAO,EAAP;AACD;;AAED,UAAME,OAAO,GAAG,EAAhB;AACA,UAAMI,SAAS,GAAGV,UAAU,CAAC,CAAD,CAA5B;;AACA,SAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,SAAS,CAACN,MAA9B,EAAsCO,CAAC,EAAvC,EAA2C;AACzCL,MAAAA,OAAO,CAACK,CAAD,CAAP,GAAaX,UAAU,CAACY,GAAX,CAAeJ,CAAC,IAAIA,CAAC,CAACG,CAAD,CAArB,EAA0BE,GAA1B,KAAkCb,UAAU,CAACI,MAA1D;AACD;;AAED,WAAOE,OAAP;AACD;;AAEDQ,EAAAA,KAAK,GAAG;AACN,SAAKd,UAAL,GAAkB,EAAlB;AACD;;AA7BmC","sourcesContent":["const MAX_DATA_POINTS = 10;\r\n\r\nexport class PercentageRollingAverage {\r\n  constructor() {\r\n    this.dataPoints = [];\r\n  }\r\n\r\n  add(dataPoint) {\r\n    this.dataPoints.push(dataPoint);\r\n    if (this.dataPoints.length > MAX_DATA_POINTS) {\r\n      this.dataPoints.shift();\r\n    }\r\n  }\r\n\r\n  get average() {\r\n    const dataPoints = this.dataPoints.filter(p => p !== undefined);\r\n    if (dataPoints.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const average = [];\r\n    const reference = dataPoints[0];\r\n    for (let i = 0; i < reference.length; i++) {\r\n      average[i] = dataPoints.map(p => p[i]).sum() / dataPoints.length;\r\n    }\r\n\r\n    return average;\r\n  }\r\n\r\n  clear() {\r\n    this.dataPoints = [];\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}