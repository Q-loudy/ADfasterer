{"ast":null,"code":"import \"core-js/modules/es.array.reduce.js\";\nimport { DC } from \"../../constants\";\nexport const MultiplierTabHelper = {\n  // Helper method for counting enabled dimensions\n  activeDimCount(type) {\n    switch (type) {\n      case \"AD\":\n        // Technically not 100% correct, but within EC7 any AD8 production is going to be irrelevant compared to AD7\n        // and making the UI behave as if it's inactive produces a better look overall\n        return Math.clamp(AntimatterDimensions.all.filter(ad => ad.isProducing).length, 1, EternityChallenge(7).isRunning ? 7 : 8);\n\n      case \"ID\":\n        return InfinityDimensions.all.filter(id => id.isProducing).length;\n\n      case \"TD\":\n        return TimeDimensions.all.filter(td => td.isProducing).length;\n\n      default:\n        throw new Error(\"Unrecognized Dimension type in Multiplier tab GameDB entry\");\n    }\n  },\n\n  // Helper method for galaxy strength multipliers affecting all galaxy types (this is used a large number of times)\n  globalGalaxyMult() {\n    return Effects.product(InfinityUpgrade.galaxyBoost, InfinityUpgrade.galaxyBoost.chargedEffect, BreakInfinityUpgrade.galaxyBoost, TimeStudy(212), TimeStudy(232), Achievement(86), Achievement(178), InfinityChallenge(5).reward, PelleUpgrade.galaxyPower, PelleRifts.decay.milestones[1]) * Pelle.specialGlyphEffect.power;\n  },\n\n  // Helper method for galaxies and tickspeed, broken up as contributions of tickspeed*log(perGalaxy) and galaxyCount to\n  // their product, which is proportional to log(tickspeed)\n  decomposeTickspeed() {\n    let effectiveCount = effectiveBaseGalaxies();\n    const effects = this.globalGalaxyMult();\n    let galFrac, tickFrac;\n\n    if (effectiveCount < 3) {\n      let baseMult = 1.1245;\n      if (player.galaxies === 1) baseMult = 1.11888888;\n      if (player.galaxies === 2) baseMult = 1.11267177;\n\n      if (NormalChallenge(5).isRunning) {\n        baseMult = 1.08;\n        if (player.galaxies === 1) baseMult = 1.07632;\n        if (player.galaxies === 2) baseMult = 1.072;\n      } // This is needed for numerical consistency with the other conditional case\n\n\n      baseMult /= 0.965 ** 2;\n      const logBase = Math.log10(baseMult);\n      const perGalaxy = 0.02 * effects;\n      effectiveCount *= Pelle.specialGlyphEffect.power;\n      tickFrac = Tickspeed.totalUpgrades * logBase;\n      galFrac = -Math.log10(Math.max(0.01, 1 / baseMult - effectiveCount * perGalaxy)) / logBase;\n    } else {\n      effectiveCount -= 2;\n      effectiveCount *= effects;\n      effectiveCount *= getAdjustedGlyphEffect(\"realitygalaxies\") * (1 + ImaginaryUpgrade(9).effectOrDefault(0));\n      effectiveCount *= Pelle.specialGlyphEffect.power; // These all need to be framed as INCREASING x/sec tick rate (ie. all multipliers > 1, all logs > 0)\n\n      const baseMult = 0.965 ** 2 / (NormalChallenge(5).isRunning ? 0.83 : 0.8);\n      const logBase = Math.log10(baseMult);\n      const logPerGalaxy = -DC.D0_965.log10();\n      tickFrac = Tickspeed.totalUpgrades * logBase;\n      galFrac = 1 + effectiveCount / logBase * logPerGalaxy;\n    } // Artificially inflate the galaxy portion in order to make the breakdown closer to 50/50 in common situations\n\n\n    galFrac *= 3; // Calculate what proportion base tickspeed takes out of the entire tickspeed multiplier\n\n    const base = DC.D1.dividedByEffectsOf(Achievement(36), Achievement(45), Achievement(66), Achievement(83));\n    let baseFrac = base.log10() / Tickspeed.perSecond.log10(); // We want to make sure to zero out components in some edge cases\n\n    if (base.eq(1)) baseFrac = 0;\n    if (effectiveCount === 0) galFrac = 0; // Normalize the sum by splitting tickspeed and galaxies across what's leftover besides the base value. These three\n    // values must be scaled so that they sum to 1 and none are negative\n\n    let factor = (1 - baseFrac) / (tickFrac + galFrac); // The actual base tickspeed calculation multiplies things in a different order, which can lead to precision issues\n    // when no tickspeed upgrades have been bought if we don't explicitly set this to zero\n\n    if (Tickspeed.totalUpgrades === 0) factor = 0;\n    return {\n      base: baseFrac,\n      tickspeed: tickFrac * factor,\n      galaxies: galFrac * factor\n    };\n  },\n\n  // Helper method to check for whether an achievement affects a particular dimension or not. Format of dimStr is\n  // expected to be a three-character string \"XXN\", eg. \"AD3\" or \"TD2\"\n  achievementDimCheck(ach, dimStr) {\n    switch (ach) {\n      case 23:\n        return dimStr === \"AD8\";\n\n      case 28:\n      case 31:\n      case 68:\n      case 71:\n        return dimStr === \"AD1\";\n\n      case 94:\n        return dimStr === \"ID1\";\n\n      case 34:\n        return dimStr.substr(0, 2) === \"AD\" && Number(dimStr.charAt(2)) !== 8;\n\n      case 64:\n        return dimStr.substr(0, 2) === \"AD\" && Number(dimStr.charAt(2)) <= 4;\n\n      default:\n        return true;\n    }\n  },\n\n  // Helper method to check for whether a time study affects a particular dimension or not, see achievementDimCheck()\n  timeStudyDimCheck(ts, dimStr) {\n    switch (ts) {\n      case 11:\n        return dimStr === \"TD1\";\n\n      case 71:\n        return dimStr.substr(0, 2) === \"AD\" && Number(dimStr.charAt(2)) !== 8;\n\n      case 72:\n        return dimStr === \"ID4\";\n\n      case 73:\n        return dimStr === \"TD3\";\n\n      case 214:\n        return dimStr === \"AD8\";\n\n      case 227:\n        return dimStr === \"TD4\";\n\n      case 234:\n        return dimStr === \"AD1\";\n\n      default:\n        return true;\n    }\n  },\n\n  // Helper method to check for whether an IC reward affects a particular dimension or not, see achievementDimCheck()\n  ICDimCheck(ic, dimStr) {\n    switch (ic) {\n      case 1:\n      case 6:\n        return dimStr.substr(0, 2) === \"ID\";\n\n      case 3:\n      case 4:\n        return dimStr.substr(0, 2) === \"AD\";\n\n      case 8:\n        return dimStr.substr(0, 2) === \"AD\" && Number(dimStr.charAt(2)) > 1 && Number(dimStr.charAt(2)) < 8;\n\n      default:\n        return false;\n    }\n  },\n\n  // Helper method to check for whether an EC reward affects a particular dimension or not, see achievementDimCheck()\n  ECDimCheck(ec, dimStr) {\n    switch (ec) {\n      case 1:\n      case 10:\n        return dimStr.substr(0, 2) === \"TD\";\n\n      case 2:\n        return dimStr === \"ID1\";\n\n      case 4:\n      case 9:\n        return dimStr.substr(0, 2) === \"ID\";\n\n      case 7:\n        return dimStr === \"ID8\";\n\n      default:\n        return false;\n    }\n  },\n\n  blackHoleSpeeds() {\n    const currBH = BlackHoles.list.filter(bh => bh.isUnlocked).map(bh => bh.isActive ? bh.power : 1).reduce((x, y) => x * y, 1); // Calculate an average black hole speedup factor\n\n    const bh1 = BlackHole(1);\n    const bh2 = BlackHole(2);\n    const avgBH = 1 + (bh1.isUnlocked ? bh1.dutyCycle * (bh1.power - 1) : 0) + (bh2.isUnlocked ? bh1.dutyCycle * bh2.dutyCycle * bh1.power * (bh2.power - 1) : 0);\n    return {\n      current: currBH,\n      average: avgBH\n    };\n  },\n\n  pluralizeDimensions(dims) {\n    return dims === 1 ? \"Dimension\\xa0\" : \"Dimensions\";\n  },\n\n  // All of the following NC12-related functions are to make the parsing within the GameDB entry easier in terms of\n  // which set of Dimensions are actually producing within NC12 - in nearly every case, one of the odd/even sets will\n  // produce significantly more than the other, so we simply assume the larger one is active and the other isn't\n  evenDimNC12Production() {\n    const nc12Pow = tier => [2, 4, 6].includes(tier) ? 0.1 * (8 - tier) : 0;\n\n    const maxTier = Math.clampMin(2 * Math.floor(MultiplierTabHelper.activeDimCount(\"AD\") / 2), 2);\n    return AntimatterDimensions.all.filter(ad => ad.isProducing && ad.tier % 2 === 0).map(ad => ad.multiplier.times(ad.amount.pow(nc12Pow(ad.tier)))).reduce((x, y) => x.times(y), DC.D1).times(AntimatterDimension(maxTier).totalAmount);\n  },\n\n  oddDimNC12Production() {\n    const maxTier = Math.clampMin(2 * Math.floor(MultiplierTabHelper.activeDimCount(\"AD\") / 2 - 0.5) + 1, 1);\n    return AntimatterDimensions.all.filter(ad => ad.isProducing && ad.tier % 2 === 1).map(ad => ad.multiplier).reduce((x, y) => x.times(y), DC.D1).times(AntimatterDimension(maxTier).totalAmount);\n  },\n\n  actualNC12Production() {\n    return Decimal.max(this.evenDimNC12Production(), this.oddDimNC12Production());\n  },\n\n  multInNC12(dim) {\n    const nc12Pow = tier => [2, 4, 6].includes(tier) ? 0.1 * (8 - tier) : 0;\n\n    const ad = AntimatterDimension(dim);\n    return ad.isProducing ? ad.multiplier.times(ad.totalAmount.pow(nc12Pow(dim))) : DC.D1;\n  },\n\n  isNC12ProducingEven() {\n    return this.evenDimNC12Production().gt(this.oddDimNC12Production());\n  }\n\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/multiplier-tab/helper-functions.js"],"names":["DC","MultiplierTabHelper","activeDimCount","type","Math","clamp","AntimatterDimensions","all","filter","ad","isProducing","length","EternityChallenge","isRunning","InfinityDimensions","id","TimeDimensions","td","Error","globalGalaxyMult","Effects","product","InfinityUpgrade","galaxyBoost","chargedEffect","BreakInfinityUpgrade","TimeStudy","Achievement","InfinityChallenge","reward","PelleUpgrade","galaxyPower","PelleRifts","decay","milestones","Pelle","specialGlyphEffect","power","decomposeTickspeed","effectiveCount","effectiveBaseGalaxies","effects","galFrac","tickFrac","baseMult","player","galaxies","NormalChallenge","logBase","log10","perGalaxy","Tickspeed","totalUpgrades","max","getAdjustedGlyphEffect","ImaginaryUpgrade","effectOrDefault","logPerGalaxy","D0_965","base","D1","dividedByEffectsOf","baseFrac","perSecond","eq","factor","tickspeed","achievementDimCheck","ach","dimStr","substr","Number","charAt","timeStudyDimCheck","ts","ICDimCheck","ic","ECDimCheck","ec","blackHoleSpeeds","currBH","BlackHoles","list","bh","isUnlocked","map","isActive","reduce","x","y","bh1","BlackHole","bh2","avgBH","dutyCycle","current","average","pluralizeDimensions","dims","evenDimNC12Production","nc12Pow","tier","includes","maxTier","clampMin","floor","multiplier","times","amount","pow","AntimatterDimension","totalAmount","oddDimNC12Production","actualNC12Production","Decimal","multInNC12","dim","isNC12ProducingEven","gt"],"mappings":";AAAA,SAASA,EAAT,QAAmB,iBAAnB;AAEA,OAAO,MAAMC,mBAAmB,GAAG;AACjC;AACAC,EAAAA,cAAc,CAACC,IAAD,EAAO;AACnB,YAAQA,IAAR;AACE,WAAK,IAAL;AACE;AACA;AACA,eAAOC,IAAI,CAACC,KAAL,CAAWC,oBAAoB,CAACC,GAArB,CAAyBC,MAAzB,CAAgCC,EAAE,IAAIA,EAAE,CAACC,WAAzC,EAAsDC,MAAjE,EACL,CADK,EACFC,iBAAiB,CAAC,CAAD,CAAjB,CAAqBC,SAArB,GAAiC,CAAjC,GAAqC,CADnC,CAAP;;AAEF,WAAK,IAAL;AACE,eAAOC,kBAAkB,CAACP,GAAnB,CAAuBC,MAAvB,CAA8BO,EAAE,IAAIA,EAAE,CAACL,WAAvC,EAAoDC,MAA3D;;AACF,WAAK,IAAL;AACE,eAAOK,cAAc,CAACT,GAAf,CAAmBC,MAAnB,CAA0BS,EAAE,IAAIA,EAAE,CAACP,WAAnC,EAAgDC,MAAvD;;AACF;AACE,cAAM,IAAIO,KAAJ,CAAU,4DAAV,CAAN;AAXJ;AAaD,GAhBgC;;AAkBjC;AACAC,EAAAA,gBAAgB,GAAG;AACjB,WAAOC,OAAO,CAACC,OAAR,CACLC,eAAe,CAACC,WADX,EAELD,eAAe,CAACC,WAAhB,CAA4BC,aAFvB,EAGLC,oBAAoB,CAACF,WAHhB,EAILG,SAAS,CAAC,GAAD,CAJJ,EAKLA,SAAS,CAAC,GAAD,CALJ,EAMLC,WAAW,CAAC,EAAD,CANN,EAOLA,WAAW,CAAC,GAAD,CAPN,EAQLC,iBAAiB,CAAC,CAAD,CAAjB,CAAqBC,MARhB,EASLC,YAAY,CAACC,WATR,EAULC,UAAU,CAACC,KAAX,CAAiBC,UAAjB,CAA4B,CAA5B,CAVK,IAWHC,KAAK,CAACC,kBAAN,CAAyBC,KAX7B;AAYD,GAhCgC;;AAkCjC;AACA;AACAC,EAAAA,kBAAkB,GAAG;AACnB,QAAIC,cAAc,GAAGC,qBAAqB,EAA1C;AACA,UAAMC,OAAO,GAAG,KAAKtB,gBAAL,EAAhB;AAEA,QAAIuB,OAAJ,EAAaC,QAAb;;AACA,QAAIJ,cAAc,GAAG,CAArB,EAAwB;AACtB,UAAIK,QAAQ,GAAG,MAAf;AACA,UAAIC,MAAM,CAACC,QAAP,KAAoB,CAAxB,EAA2BF,QAAQ,GAAG,UAAX;AAC3B,UAAIC,MAAM,CAACC,QAAP,KAAoB,CAAxB,EAA2BF,QAAQ,GAAG,UAAX;;AAC3B,UAAIG,eAAe,CAAC,CAAD,CAAf,CAAmBlC,SAAvB,EAAkC;AAChC+B,QAAAA,QAAQ,GAAG,IAAX;AACA,YAAIC,MAAM,CAACC,QAAP,KAAoB,CAAxB,EAA2BF,QAAQ,GAAG,OAAX;AAC3B,YAAIC,MAAM,CAACC,QAAP,KAAoB,CAAxB,EAA2BF,QAAQ,GAAG,KAAX;AAC5B,OARqB,CAStB;;;AACAA,MAAAA,QAAQ,IAAI,SAAS,CAArB;AACA,YAAMI,OAAO,GAAG5C,IAAI,CAAC6C,KAAL,CAAWL,QAAX,CAAhB;AAEA,YAAMM,SAAS,GAAG,OAAOT,OAAzB;AACAF,MAAAA,cAAc,IAAIJ,KAAK,CAACC,kBAAN,CAAyBC,KAA3C;AAEAM,MAAAA,QAAQ,GAAGQ,SAAS,CAACC,aAAV,GAA0BJ,OAArC;AACAN,MAAAA,OAAO,GAAG,CAACtC,IAAI,CAAC6C,KAAL,CAAW7C,IAAI,CAACiD,GAAL,CAAS,IAAT,EAAe,IAAIT,QAAJ,GAAgBL,cAAc,GAAGW,SAAhD,CAAX,CAAD,GAA2EF,OAArF;AACD,KAlBD,MAkBO;AACLT,MAAAA,cAAc,IAAI,CAAlB;AACAA,MAAAA,cAAc,IAAIE,OAAlB;AACAF,MAAAA,cAAc,IAAIe,sBAAsB,CAAC,iBAAD,CAAtB,IAA6C,IAAIC,gBAAgB,CAAC,CAAD,CAAhB,CAAoBC,eAApB,CAAoC,CAApC,CAAjD,CAAlB;AACAjB,MAAAA,cAAc,IAAIJ,KAAK,CAACC,kBAAN,CAAyBC,KAA3C,CAJK,CAML;;AACA,YAAMO,QAAQ,GAAG,SAAS,CAAT,IAAcG,eAAe,CAAC,CAAD,CAAf,CAAmBlC,SAAnB,GAA+B,IAA/B,GAAsC,GAApD,CAAjB;AACA,YAAMmC,OAAO,GAAG5C,IAAI,CAAC6C,KAAL,CAAWL,QAAX,CAAhB;AACA,YAAMa,YAAY,GAAG,CAACzD,EAAE,CAAC0D,MAAH,CAAUT,KAAV,EAAtB;AAEAN,MAAAA,QAAQ,GAAGQ,SAAS,CAACC,aAAV,GAA0BJ,OAArC;AACAN,MAAAA,OAAO,GAAI,IAAIH,cAAc,GAAGS,OAAjB,GAA2BS,YAA1C;AACD,KApCkB,CAsCnB;;;AACAf,IAAAA,OAAO,IAAI,CAAX,CAvCmB,CAyCnB;;AACA,UAAMiB,IAAI,GAAG3D,EAAE,CAAC4D,EAAH,CAAMC,kBAAN,CACXlC,WAAW,CAAC,EAAD,CADA,EAEXA,WAAW,CAAC,EAAD,CAFA,EAGXA,WAAW,CAAC,EAAD,CAHA,EAIXA,WAAW,CAAC,EAAD,CAJA,CAAb;AAMA,QAAImC,QAAQ,GAAGH,IAAI,CAACV,KAAL,KAAeE,SAAS,CAACY,SAAV,CAAoBd,KAApB,EAA9B,CAhDmB,CAkDnB;;AACA,QAAIU,IAAI,CAACK,EAAL,CAAQ,CAAR,CAAJ,EAAgBF,QAAQ,GAAG,CAAX;AAChB,QAAIvB,cAAc,KAAK,CAAvB,EAA0BG,OAAO,GAAG,CAAV,CApDP,CAsDnB;AACA;;AACA,QAAIuB,MAAM,GAAG,CAAC,IAAIH,QAAL,KAAkBnB,QAAQ,GAAGD,OAA7B,CAAb,CAxDmB,CAyDnB;AACA;;AACA,QAAIS,SAAS,CAACC,aAAV,KAA4B,CAAhC,EAAmCa,MAAM,GAAG,CAAT;AACnC,WAAO;AACLN,MAAAA,IAAI,EAAEG,QADD;AAELI,MAAAA,SAAS,EAAEvB,QAAQ,GAAGsB,MAFjB;AAGLnB,MAAAA,QAAQ,EAAEJ,OAAO,GAAGuB;AAHf,KAAP;AAKD,GArGgC;;AAuGjC;AACA;AACAE,EAAAA,mBAAmB,CAACC,GAAD,EAAMC,MAAN,EAAc;AAC/B,YAAQD,GAAR;AACE,WAAK,EAAL;AACE,eAAOC,MAAM,KAAK,KAAlB;;AACF,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACE,eAAOA,MAAM,KAAK,KAAlB;;AACF,WAAK,EAAL;AACE,eAAOA,MAAM,KAAK,KAAlB;;AACF,WAAK,EAAL;AACE,eAAOA,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiB,CAAjB,MAAwB,IAAxB,IAAgCC,MAAM,CAACF,MAAM,CAACG,MAAP,CAAc,CAAd,CAAD,CAAN,KAA6B,CAApE;;AACF,WAAK,EAAL;AACE,eAAOH,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiB,CAAjB,MAAwB,IAAxB,IAAgCC,MAAM,CAACF,MAAM,CAACG,MAAP,CAAc,CAAd,CAAD,CAAN,IAA4B,CAAnE;;AACF;AACE,eAAO,IAAP;AAfJ;AAiBD,GA3HgC;;AA6HjC;AACAC,EAAAA,iBAAiB,CAACC,EAAD,EAAKL,MAAL,EAAa;AAC5B,YAAQK,EAAR;AACE,WAAK,EAAL;AACE,eAAOL,MAAM,KAAK,KAAlB;;AACF,WAAK,EAAL;AACE,eAAOA,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiB,CAAjB,MAAwB,IAAxB,IAAgCC,MAAM,CAACF,MAAM,CAACG,MAAP,CAAc,CAAd,CAAD,CAAN,KAA6B,CAApE;;AACF,WAAK,EAAL;AACE,eAAOH,MAAM,KAAK,KAAlB;;AACF,WAAK,EAAL;AACE,eAAOA,MAAM,KAAK,KAAlB;;AACF,WAAK,GAAL;AACE,eAAOA,MAAM,KAAK,KAAlB;;AACF,WAAK,GAAL;AACE,eAAOA,MAAM,KAAK,KAAlB;;AACF,WAAK,GAAL;AACE,eAAOA,MAAM,KAAK,KAAlB;;AACF;AACE,eAAO,IAAP;AAhBJ;AAkBD,GAjJgC;;AAmJjC;AACAM,EAAAA,UAAU,CAACC,EAAD,EAAKP,MAAL,EAAa;AACrB,YAAQO,EAAR;AACE,WAAK,CAAL;AACA,WAAK,CAAL;AACE,eAAOP,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiB,CAAjB,MAAwB,IAA/B;;AACF,WAAK,CAAL;AACA,WAAK,CAAL;AACE,eAAOD,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiB,CAAjB,MAAwB,IAA/B;;AACF,WAAK,CAAL;AACE,eAAOD,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiB,CAAjB,MAAwB,IAAxB,IAAgCC,MAAM,CAACF,MAAM,CAACG,MAAP,CAAc,CAAd,CAAD,CAAN,GAA2B,CAA3D,IAAgED,MAAM,CAACF,MAAM,CAACG,MAAP,CAAc,CAAd,CAAD,CAAN,GAA2B,CAAlG;;AACF;AACE,eAAO,KAAP;AAVJ;AAYD,GAjKgC;;AAmKjC;AACAK,EAAAA,UAAU,CAACC,EAAD,EAAKT,MAAL,EAAa;AACrB,YAAQS,EAAR;AACE,WAAK,CAAL;AACA,WAAK,EAAL;AACE,eAAOT,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiB,CAAjB,MAAwB,IAA/B;;AACF,WAAK,CAAL;AACE,eAAOD,MAAM,KAAK,KAAlB;;AACF,WAAK,CAAL;AACA,WAAK,CAAL;AACE,eAAOA,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiB,CAAjB,MAAwB,IAA/B;;AACF,WAAK,CAAL;AACE,eAAOD,MAAM,KAAK,KAAlB;;AACF;AACE,eAAO,KAAP;AAZJ;AAcD,GAnLgC;;AAqLjCU,EAAAA,eAAe,GAAG;AAChB,UAAMC,MAAM,GAAGC,UAAU,CAACC,IAAX,CACZ1E,MADY,CACL2E,EAAE,IAAIA,EAAE,CAACC,UADJ,EAEZC,GAFY,CAERF,EAAE,IAAKA,EAAE,CAACG,QAAH,GAAcH,EAAE,CAAC9C,KAAjB,GAAyB,CAFxB,EAGZkD,MAHY,CAGL,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAHT,EAGY,CAHZ,CAAf,CADgB,CAMhB;;AACA,UAAMC,GAAG,GAAGC,SAAS,CAAC,CAAD,CAArB;AACA,UAAMC,GAAG,GAAGD,SAAS,CAAC,CAAD,CAArB;AACA,UAAME,KAAK,GAAG,KAAKH,GAAG,CAACN,UAAJ,GAAiBM,GAAG,CAACI,SAAJ,IAAiBJ,GAAG,CAACrD,KAAJ,GAAY,CAA7B,CAAjB,GAAmD,CAAxD,KACTuD,GAAG,CAACR,UAAJ,GAAiBM,GAAG,CAACI,SAAJ,GAAgBF,GAAG,CAACE,SAApB,GAAgCJ,GAAG,CAACrD,KAApC,IAA6CuD,GAAG,CAACvD,KAAJ,GAAY,CAAzD,CAAjB,GAA+E,CADtE,CAAd;AAGA,WAAO;AACL0D,MAAAA,OAAO,EAAEf,MADJ;AAELgB,MAAAA,OAAO,EAAEH;AAFJ,KAAP;AAID,GArMgC;;AAuMjCI,EAAAA,mBAAmB,CAACC,IAAD,EAAO;AACxB,WAAOA,IAAI,KAAK,CAAT,GAAa,eAAb,GAA+B,YAAtC;AACD,GAzMgC;;AA2MjC;AACA;AACA;AACAC,EAAAA,qBAAqB,GAAG;AACtB,UAAMC,OAAO,GAAGC,IAAI,IAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUC,QAAV,CAAmBD,IAAnB,IAA2B,OAAO,IAAIA,IAAX,CAA3B,GAA8C,CAAvE;;AACA,UAAME,OAAO,GAAGnG,IAAI,CAACoG,QAAL,CAAc,IAAIpG,IAAI,CAACqG,KAAL,CAAWxG,mBAAmB,CAACC,cAApB,CAAmC,IAAnC,IAA2C,CAAtD,CAAlB,EAA4E,CAA5E,CAAhB;AACA,WAAOI,oBAAoB,CAACC,GAArB,CACJC,MADI,CACGC,EAAE,IAAIA,EAAE,CAACC,WAAH,IAAkBD,EAAE,CAAC4F,IAAH,GAAU,CAAV,KAAgB,CAD3C,EAEJhB,GAFI,CAEA5E,EAAE,IAAIA,EAAE,CAACiG,UAAH,CAAcC,KAAd,CAAoBlG,EAAE,CAACmG,MAAH,CAAUC,GAAV,CAAcT,OAAO,CAAC3F,EAAE,CAAC4F,IAAJ,CAArB,CAApB,CAFN,EAGJd,MAHI,CAGG,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACmB,KAAF,CAAQlB,CAAR,CAHb,EAGyBzF,EAAE,CAAC4D,EAH5B,EAIJ+C,KAJI,CAIEG,mBAAmB,CAACP,OAAD,CAAnB,CAA6BQ,WAJ/B,CAAP;AAKD,GAtNgC;;AAwNjCC,EAAAA,oBAAoB,GAAG;AACrB,UAAMT,OAAO,GAAGnG,IAAI,CAACoG,QAAL,CAAc,IAAIpG,IAAI,CAACqG,KAAL,CAAWxG,mBAAmB,CAACC,cAApB,CAAmC,IAAnC,IAA2C,CAA3C,GAA+C,GAA1D,CAAJ,GAAqE,CAAnF,EAAsF,CAAtF,CAAhB;AACA,WAAOI,oBAAoB,CAACC,GAArB,CACJC,MADI,CACGC,EAAE,IAAIA,EAAE,CAACC,WAAH,IAAkBD,EAAE,CAAC4F,IAAH,GAAU,CAAV,KAAgB,CAD3C,EAEJhB,GAFI,CAEA5E,EAAE,IAAIA,EAAE,CAACiG,UAFT,EAGJnB,MAHI,CAGG,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACmB,KAAF,CAAQlB,CAAR,CAHb,EAGyBzF,EAAE,CAAC4D,EAH5B,EAIJ+C,KAJI,CAIEG,mBAAmB,CAACP,OAAD,CAAnB,CAA6BQ,WAJ/B,CAAP;AAKD,GA/NgC;;AAiOjCE,EAAAA,oBAAoB,GAAG;AACrB,WAAOC,OAAO,CAAC7D,GAAR,CAAY,KAAK8C,qBAAL,EAAZ,EAA0C,KAAKa,oBAAL,EAA1C,CAAP;AACD,GAnOgC;;AAqOjCG,EAAAA,UAAU,CAACC,GAAD,EAAM;AACd,UAAMhB,OAAO,GAAGC,IAAI,IAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUC,QAAV,CAAmBD,IAAnB,IAA2B,OAAO,IAAIA,IAAX,CAA3B,GAA8C,CAAvE;;AACA,UAAM5F,EAAE,GAAGqG,mBAAmB,CAACM,GAAD,CAA9B;AACA,WAAO3G,EAAE,CAACC,WAAH,GAAiBD,EAAE,CAACiG,UAAH,CAAcC,KAAd,CAAoBlG,EAAE,CAACsG,WAAH,CAAeF,GAAf,CAAmBT,OAAO,CAACgB,GAAD,CAA1B,CAApB,CAAjB,GAAyEpH,EAAE,CAAC4D,EAAnF;AACD,GAzOgC;;AA2OjCyD,EAAAA,mBAAmB,GAAG;AACpB,WAAO,KAAKlB,qBAAL,GAA6BmB,EAA7B,CAAgC,KAAKN,oBAAL,EAAhC,CAAP;AACD;;AA7OgC,CAA5B","sourcesContent":["import { DC } from \"../../constants\";\r\n\r\nexport const MultiplierTabHelper = {\r\n  // Helper method for counting enabled dimensions\r\n  activeDimCount(type) {\r\n    switch (type) {\r\n      case \"AD\":\r\n        // Technically not 100% correct, but within EC7 any AD8 production is going to be irrelevant compared to AD7\r\n        // and making the UI behave as if it's inactive produces a better look overall\r\n        return Math.clamp(AntimatterDimensions.all.filter(ad => ad.isProducing).length,\r\n          1, EternityChallenge(7).isRunning ? 7 : 8);\r\n      case \"ID\":\r\n        return InfinityDimensions.all.filter(id => id.isProducing).length;\r\n      case \"TD\":\r\n        return TimeDimensions.all.filter(td => td.isProducing).length;\r\n      default:\r\n        throw new Error(\"Unrecognized Dimension type in Multiplier tab GameDB entry\");\r\n    }\r\n  },\r\n\r\n  // Helper method for galaxy strength multipliers affecting all galaxy types (this is used a large number of times)\r\n  globalGalaxyMult() {\r\n    return Effects.product(\r\n      InfinityUpgrade.galaxyBoost,\r\n      InfinityUpgrade.galaxyBoost.chargedEffect,\r\n      BreakInfinityUpgrade.galaxyBoost,\r\n      TimeStudy(212),\r\n      TimeStudy(232),\r\n      Achievement(86),\r\n      Achievement(178),\r\n      InfinityChallenge(5).reward,\r\n      PelleUpgrade.galaxyPower,\r\n      PelleRifts.decay.milestones[1]\r\n    ) * Pelle.specialGlyphEffect.power;\r\n  },\r\n\r\n  // Helper method for galaxies and tickspeed, broken up as contributions of tickspeed*log(perGalaxy) and galaxyCount to\r\n  // their product, which is proportional to log(tickspeed)\r\n  decomposeTickspeed() {\r\n    let effectiveCount = effectiveBaseGalaxies();\r\n    const effects = this.globalGalaxyMult();\r\n\r\n    let galFrac, tickFrac;\r\n    if (effectiveCount < 3) {\r\n      let baseMult = 1.1245;\r\n      if (player.galaxies === 1) baseMult = 1.11888888;\r\n      if (player.galaxies === 2) baseMult = 1.11267177;\r\n      if (NormalChallenge(5).isRunning) {\r\n        baseMult = 1.08;\r\n        if (player.galaxies === 1) baseMult = 1.07632;\r\n        if (player.galaxies === 2) baseMult = 1.072;\r\n      }\r\n      // This is needed for numerical consistency with the other conditional case\r\n      baseMult /= 0.965 ** 2;\r\n      const logBase = Math.log10(baseMult);\r\n\r\n      const perGalaxy = 0.02 * effects;\r\n      effectiveCount *= Pelle.specialGlyphEffect.power;\r\n\r\n      tickFrac = Tickspeed.totalUpgrades * logBase;\r\n      galFrac = -Math.log10(Math.max(0.01, 1 / baseMult - (effectiveCount * perGalaxy))) / logBase;\r\n    } else {\r\n      effectiveCount -= 2;\r\n      effectiveCount *= effects;\r\n      effectiveCount *= getAdjustedGlyphEffect(\"realitygalaxies\") * (1 + ImaginaryUpgrade(9).effectOrDefault(0));\r\n      effectiveCount *= Pelle.specialGlyphEffect.power;\r\n\r\n      // These all need to be framed as INCREASING x/sec tick rate (ie. all multipliers > 1, all logs > 0)\r\n      const baseMult = 0.965 ** 2 / (NormalChallenge(5).isRunning ? 0.83 : 0.8);\r\n      const logBase = Math.log10(baseMult);\r\n      const logPerGalaxy = -DC.D0_965.log10();\r\n\r\n      tickFrac = Tickspeed.totalUpgrades * logBase;\r\n      galFrac = (1 + effectiveCount / logBase * logPerGalaxy);\r\n    }\r\n\r\n    // Artificially inflate the galaxy portion in order to make the breakdown closer to 50/50 in common situations\r\n    galFrac *= 3;\r\n\r\n    // Calculate what proportion base tickspeed takes out of the entire tickspeed multiplier\r\n    const base = DC.D1.dividedByEffectsOf(\r\n      Achievement(36),\r\n      Achievement(45),\r\n      Achievement(66),\r\n      Achievement(83)\r\n    );\r\n    let baseFrac = base.log10() / Tickspeed.perSecond.log10();\r\n\r\n    // We want to make sure to zero out components in some edge cases\r\n    if (base.eq(1)) baseFrac = 0;\r\n    if (effectiveCount === 0) galFrac = 0;\r\n\r\n    // Normalize the sum by splitting tickspeed and galaxies across what's leftover besides the base value. These three\r\n    // values must be scaled so that they sum to 1 and none are negative\r\n    let factor = (1 - baseFrac) / (tickFrac + galFrac);\r\n    // The actual base tickspeed calculation multiplies things in a different order, which can lead to precision issues\r\n    // when no tickspeed upgrades have been bought if we don't explicitly set this to zero\r\n    if (Tickspeed.totalUpgrades === 0) factor = 0;\r\n    return {\r\n      base: baseFrac,\r\n      tickspeed: tickFrac * factor,\r\n      galaxies: galFrac * factor,\r\n    };\r\n  },\r\n\r\n  // Helper method to check for whether an achievement affects a particular dimension or not. Format of dimStr is\r\n  // expected to be a three-character string \"XXN\", eg. \"AD3\" or \"TD2\"\r\n  achievementDimCheck(ach, dimStr) {\r\n    switch (ach) {\r\n      case 23:\r\n        return dimStr === \"AD8\";\r\n      case 28:\r\n      case 31:\r\n      case 68:\r\n      case 71:\r\n        return dimStr === \"AD1\";\r\n      case 94:\r\n        return dimStr === \"ID1\";\r\n      case 34:\r\n        return dimStr.substr(0, 2) === \"AD\" && Number(dimStr.charAt(2)) !== 8;\r\n      case 64:\r\n        return dimStr.substr(0, 2) === \"AD\" && Number(dimStr.charAt(2)) <= 4;\r\n      default:\r\n        return true;\r\n    }\r\n  },\r\n\r\n  // Helper method to check for whether a time study affects a particular dimension or not, see achievementDimCheck()\r\n  timeStudyDimCheck(ts, dimStr) {\r\n    switch (ts) {\r\n      case 11:\r\n        return dimStr === \"TD1\";\r\n      case 71:\r\n        return dimStr.substr(0, 2) === \"AD\" && Number(dimStr.charAt(2)) !== 8;\r\n      case 72:\r\n        return dimStr === \"ID4\";\r\n      case 73:\r\n        return dimStr === \"TD3\";\r\n      case 214:\r\n        return dimStr === \"AD8\";\r\n      case 227:\r\n        return dimStr === \"TD4\";\r\n      case 234:\r\n        return dimStr === \"AD1\";\r\n      default:\r\n        return true;\r\n    }\r\n  },\r\n\r\n  // Helper method to check for whether an IC reward affects a particular dimension or not, see achievementDimCheck()\r\n  ICDimCheck(ic, dimStr) {\r\n    switch (ic) {\r\n      case 1:\r\n      case 6:\r\n        return dimStr.substr(0, 2) === \"ID\";\r\n      case 3:\r\n      case 4:\r\n        return dimStr.substr(0, 2) === \"AD\";\r\n      case 8:\r\n        return dimStr.substr(0, 2) === \"AD\" && Number(dimStr.charAt(2)) > 1 && Number(dimStr.charAt(2)) < 8;\r\n      default:\r\n        return false;\r\n    }\r\n  },\r\n\r\n  // Helper method to check for whether an EC reward affects a particular dimension or not, see achievementDimCheck()\r\n  ECDimCheck(ec, dimStr) {\r\n    switch (ec) {\r\n      case 1:\r\n      case 10:\r\n        return dimStr.substr(0, 2) === \"TD\";\r\n      case 2:\r\n        return dimStr === \"ID1\";\r\n      case 4:\r\n      case 9:\r\n        return dimStr.substr(0, 2) === \"ID\";\r\n      case 7:\r\n        return dimStr === \"ID8\";\r\n      default:\r\n        return false;\r\n    }\r\n  },\r\n\r\n  blackHoleSpeeds() {\r\n    const currBH = BlackHoles.list\r\n      .filter(bh => bh.isUnlocked)\r\n      .map(bh => (bh.isActive ? bh.power : 1))\r\n      .reduce((x, y) => x * y, 1);\r\n\r\n    // Calculate an average black hole speedup factor\r\n    const bh1 = BlackHole(1);\r\n    const bh2 = BlackHole(2);\r\n    const avgBH = 1 + (bh1.isUnlocked ? bh1.dutyCycle * (bh1.power - 1) : 0) +\r\n        (bh2.isUnlocked ? bh1.dutyCycle * bh2.dutyCycle * bh1.power * (bh2.power - 1) : 0);\r\n\r\n    return {\r\n      current: currBH,\r\n      average: avgBH\r\n    };\r\n  },\r\n\r\n  pluralizeDimensions(dims) {\r\n    return dims === 1 ? \"Dimension\\xa0\" : \"Dimensions\";\r\n  },\r\n\r\n  // All of the following NC12-related functions are to make the parsing within the GameDB entry easier in terms of\r\n  // which set of Dimensions are actually producing within NC12 - in nearly every case, one of the odd/even sets will\r\n  // produce significantly more than the other, so we simply assume the larger one is active and the other isn't\r\n  evenDimNC12Production() {\r\n    const nc12Pow = tier => ([2, 4, 6].includes(tier) ? 0.1 * (8 - tier) : 0);\r\n    const maxTier = Math.clampMin(2 * Math.floor(MultiplierTabHelper.activeDimCount(\"AD\") / 2), 2);\r\n    return AntimatterDimensions.all\r\n      .filter(ad => ad.isProducing && ad.tier % 2 === 0)\r\n      .map(ad => ad.multiplier.times(ad.amount.pow(nc12Pow(ad.tier))))\r\n      .reduce((x, y) => x.times(y), DC.D1)\r\n      .times(AntimatterDimension(maxTier).totalAmount);\r\n  },\r\n\r\n  oddDimNC12Production() {\r\n    const maxTier = Math.clampMin(2 * Math.floor(MultiplierTabHelper.activeDimCount(\"AD\") / 2 - 0.5) + 1, 1);\r\n    return AntimatterDimensions.all\r\n      .filter(ad => ad.isProducing && ad.tier % 2 === 1)\r\n      .map(ad => ad.multiplier)\r\n      .reduce((x, y) => x.times(y), DC.D1)\r\n      .times(AntimatterDimension(maxTier).totalAmount);\r\n  },\r\n\r\n  actualNC12Production() {\r\n    return Decimal.max(this.evenDimNC12Production(), this.oddDimNC12Production());\r\n  },\r\n\r\n  multInNC12(dim) {\r\n    const nc12Pow = tier => ([2, 4, 6].includes(tier) ? 0.1 * (8 - tier) : 0);\r\n    const ad = AntimatterDimension(dim);\r\n    return ad.isProducing ? ad.multiplier.times(ad.totalAmount.pow(nc12Pow(dim))) : DC.D1;\r\n  },\r\n\r\n  isNC12ProducingEven() {\r\n    return this.evenDimNC12Production().gt(this.oddDimNC12Production());\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}