{"ast":null,"code":"import PrimaryButton from \"@/components/PrimaryButton\";\nexport default {\n  name: \"PerkPointLabel\",\n  components: {\n    PrimaryButton\n  },\n\n  data() {\n    return {\n      pp: 0,\n      treeLayout: 0,\n      physicsEnabled: false,\n      physicsOverride: false\n    };\n  },\n\n  computed: {\n    layoutText() {\n      return PerkLayouts[this.treeLayout].buttonText;\n    },\n\n    physicsText() {\n      var _this$physicsOverride;\n\n      const enableStr = ((_this$physicsOverride = this.physicsOverride) !== null && _this$physicsOverride !== void 0 ? _this$physicsOverride : this.physicsEnabled) ? \"Enabled\" : \"Disabled\";\n      return `${enableStr}${this.physicsOverride === undefined ? \"\" : \" (fixed)\"}`;\n    }\n\n  },\n\n  created() {\n    this.treeLayout = player.options.perkLayout;\n    this.physicsOverride = PerkLayouts[this.treeLayout].forcePhysics;\n  },\n\n  methods: {\n    update() {\n      this.pp = Math.floor(Currency.perkPoints.value);\n      this.physicsEnabled = player.options.perkPhysicsEnabled;\n    },\n\n    togglePhysics() {\n      if (this.physicsOverride !== undefined) return;\n      player.options.perkPhysicsEnabled = !player.options.perkPhysicsEnabled;\n      PerkNetwork.setPhysics(player.options.perkPhysicsEnabled);\n    },\n\n    physicsClassObject() {\n      return {\n        \"o-primary-btn c-button-physics\": true,\n        \"o-primary-btn--disabled\": this.physicsOverride !== undefined\n      };\n    },\n\n    centerTree() {\n      PerkNetwork.resetPosition(true);\n    },\n\n    straightenEdges() {\n      PerkNetwork.setEdgeCurve(false);\n      PerkNetwork.setEdgeCurve(true);\n    },\n\n    cycleLayout() {\n      // Step forward once, but if this lands us on a locked layout, keep stepping until it doesn't\n      let newIndex = (player.options.perkLayout + 1) % PerkLayouts.length;\n\n      while (!((_PerkLayouts$newIndex = (_PerkLayouts$newIndex2 = (_PerkLayouts$newIndex3 = PerkLayouts[newIndex]).isUnlocked) === null || _PerkLayouts$newIndex2 === void 0 ? void 0 : _PerkLayouts$newIndex2.call(_PerkLayouts$newIndex3)) !== null && _PerkLayouts$newIndex !== void 0 ? _PerkLayouts$newIndex : true)) {\n        var _PerkLayouts$newIndex, _PerkLayouts$newIndex2, _PerkLayouts$newIndex3;\n\n        newIndex = (newIndex + 1) % PerkLayouts.length;\n      }\n\n      player.options.perkLayout = newIndex;\n      this.treeLayout = newIndex;\n      this.physicsOverride = PerkLayouts[this.treeLayout].forcePhysics;\n      PerkNetwork.currentLayout = PerkLayouts[this.treeLayout];\n      PerkNetwork.setPhysics(player.options.perkPhysicsEnabled);\n      PerkNetwork.moveToDefaultLayoutPositions(this.treeLayout);\n    }\n\n  }\n};","map":{"version":3,"sources":["PerkPointLabel.vue"],"names":[],"mappings":"AACA,OAAA,aAAA,MAAA,4BAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,gBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA;AADA,GAFA;;AAKA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,EAAA,EAAA,CADA;AAEA,MAAA,UAAA,EAAA,CAFA;AAGA,MAAA,cAAA,EAAA,KAHA;AAIA,MAAA,eAAA,EAAA;AAJA,KAAA;AAMA,GAZA;;AAaA,EAAA,QAAA,EAAA;AACA,IAAA,UAAA,GAAA;AACA,aAAA,WAAA,CAAA,KAAA,UAAA,CAAA,CAAA,UAAA;AACA,KAHA;;AAIA,IAAA,WAAA,GAAA;AAAA;;AACA,YAAA,SAAA,GAAA,0BAAA,KAAA,eAAA,yEAAA,KAAA,cAAA,IAAA,SAAA,GAAA,UAAA;AACA,aAAA,GAAA,SAAA,GAAA,KAAA,eAAA,KAAA,SAAA,GAAA,EAAA,GAAA,UAAA,EAAA;AACA;;AAPA,GAbA;;AAsBA,EAAA,OAAA,GAAA;AACA,SAAA,UAAA,GAAA,MAAA,CAAA,OAAA,CAAA,UAAA;AACA,SAAA,eAAA,GAAA,WAAA,CAAA,KAAA,UAAA,CAAA,CAAA,YAAA;AACA,GAzBA;;AA0BA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,EAAA,GAAA,IAAA,CAAA,KAAA,CAAA,QAAA,CAAA,UAAA,CAAA,KAAA,CAAA;AACA,WAAA,cAAA,GAAA,MAAA,CAAA,OAAA,CAAA,kBAAA;AACA,KAJA;;AAKA,IAAA,aAAA,GAAA;AACA,UAAA,KAAA,eAAA,KAAA,SAAA,EAAA;AACA,MAAA,MAAA,CAAA,OAAA,CAAA,kBAAA,GAAA,CAAA,MAAA,CAAA,OAAA,CAAA,kBAAA;AACA,MAAA,WAAA,CAAA,UAAA,CAAA,MAAA,CAAA,OAAA,CAAA,kBAAA;AACA,KATA;;AAUA,IAAA,kBAAA,GAAA;AACA,aAAA;AACA,0CAAA,IADA;AAEA,mCAAA,KAAA,eAAA,KAAA;AAFA,OAAA;AAIA,KAfA;;AAgBA,IAAA,UAAA,GAAA;AACA,MAAA,WAAA,CAAA,aAAA,CAAA,IAAA;AACA,KAlBA;;AAmBA,IAAA,eAAA,GAAA;AACA,MAAA,WAAA,CAAA,YAAA,CAAA,KAAA;AACA,MAAA,WAAA,CAAA,YAAA,CAAA,IAAA;AACA,KAtBA;;AAuBA,IAAA,WAAA,GAAA;AACA;AACA,UAAA,QAAA,GAAA,CAAA,MAAA,CAAA,OAAA,CAAA,UAAA,GAAA,CAAA,IAAA,WAAA,CAAA,MAAA;;AACA,aAAA,qDAAA,0BAAA,WAAA,CAAA,QAAA,CAAA,EAAA,UAAA,2DAAA,mDAAA,yEAAA,IAAA,CAAA,EAAA;AAAA;;AACA,QAAA,QAAA,GAAA,CAAA,QAAA,GAAA,CAAA,IAAA,WAAA,CAAA,MAAA;AACA;;AAEA,MAAA,MAAA,CAAA,OAAA,CAAA,UAAA,GAAA,QAAA;AACA,WAAA,UAAA,GAAA,QAAA;AACA,WAAA,eAAA,GAAA,WAAA,CAAA,KAAA,UAAA,CAAA,CAAA,YAAA;AACA,MAAA,WAAA,CAAA,aAAA,GAAA,WAAA,CAAA,KAAA,UAAA,CAAA;AACA,MAAA,WAAA,CAAA,UAAA,CAAA,MAAA,CAAA,OAAA,CAAA,kBAAA;AACA,MAAA,WAAA,CAAA,4BAAA,CAAA,KAAA,UAAA;AACA;;AApCA;AA1BA,CAAA","sourcesContent":["<script>\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\n\r\nexport default {\r\n  name: \"PerkPointLabel\",\r\n  components: {\r\n    PrimaryButton\r\n  },\r\n  data() {\r\n    return {\r\n      pp: 0,\r\n      treeLayout: 0,\r\n      physicsEnabled: false,\r\n      physicsOverride: false,\r\n    };\r\n  },\r\n  computed: {\r\n    layoutText() {\r\n      return PerkLayouts[this.treeLayout].buttonText;\r\n    },\r\n    physicsText() {\r\n      const enableStr = (this.physicsOverride ?? this.physicsEnabled) ? \"Enabled\" : \"Disabled\";\r\n      return `${enableStr}${this.physicsOverride === undefined ? \"\" : \" (fixed)\"}`;\r\n    }\r\n  },\r\n  created() {\r\n    this.treeLayout = player.options.perkLayout;\r\n    this.physicsOverride = PerkLayouts[this.treeLayout].forcePhysics;\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.pp = Math.floor(Currency.perkPoints.value);\r\n      this.physicsEnabled = player.options.perkPhysicsEnabled;\r\n    },\r\n    togglePhysics() {\r\n      if (this.physicsOverride !== undefined) return;\r\n      player.options.perkPhysicsEnabled = !player.options.perkPhysicsEnabled;\r\n      PerkNetwork.setPhysics(player.options.perkPhysicsEnabled);\r\n    },\r\n    physicsClassObject() {\r\n      return {\r\n        \"o-primary-btn c-button-physics\": true,\r\n        \"o-primary-btn--disabled\": this.physicsOverride !== undefined\r\n      };\r\n    },\r\n    centerTree() {\r\n      PerkNetwork.resetPosition(true);\r\n    },\r\n    straightenEdges() {\r\n      PerkNetwork.setEdgeCurve(false);\r\n      PerkNetwork.setEdgeCurve(true);\r\n    },\r\n    cycleLayout() {\r\n      // Step forward once, but if this lands us on a locked layout, keep stepping until it doesn't\r\n      let newIndex = (player.options.perkLayout + 1) % PerkLayouts.length;\r\n      while (!(PerkLayouts[newIndex].isUnlocked?.() ?? true)) {\r\n        newIndex = (newIndex + 1) % PerkLayouts.length;\r\n      }\r\n\r\n      player.options.perkLayout = newIndex;\r\n      this.treeLayout = newIndex;\r\n      this.physicsOverride = PerkLayouts[this.treeLayout].forcePhysics;\r\n      PerkNetwork.currentLayout = PerkLayouts[this.treeLayout];\r\n      PerkNetwork.setPhysics(player.options.perkPhysicsEnabled);\r\n      PerkNetwork.moveToDefaultLayoutPositions(this.treeLayout);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"c-perk-tab__header\">\r\n    You have <span class=\"c-perk-tab__perk-points\">{{ format(pp, 2) }}</span> {{ pluralize(\"Perk Point\", pp) }}.\r\n    <br>\r\n    Perk choices are permanent and cannot be respecced.\r\n    <br>\r\n    Diamond-shaped perks also give Automator Points.\r\n    <br>\r\n    <div class=\"perk-settings\">\r\n      <PrimaryButton\r\n        class=\"o-primary-btn c-button-perk-layout\"\r\n        @click=\"cycleLayout\"\r\n      >\r\n        Perk Layout: {{ layoutText }}\r\n      </PrimaryButton>\r\n      <PrimaryButton\r\n        :class=\"physicsClassObject()\"\r\n        @click=\"togglePhysics\"\r\n      >\r\n        Physics: {{ physicsText }}\r\n      </PrimaryButton>\r\n      <br>\r\n      <PrimaryButton\r\n        class=\"o-primary-btn\"\r\n        @click=\"centerTree\"\r\n      >\r\n        Center Tree on START\r\n      </PrimaryButton>\r\n      <PrimaryButton\r\n        class=\"o-primary-btn\"\r\n        @click=\"straightenEdges\"\r\n      >\r\n        Straighten Edges\r\n      </PrimaryButton>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.perk-settings > button {\r\n  margin-right: 1rem;\r\n}\r\n\r\n.c-button-perk-layout {\r\n  width: 30rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.c-button-physics {\r\n  width: 27rem;\r\n  margin-bottom: 1rem;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/perks"},"metadata":{},"sourceType":"module"}