{"ast":null,"code":"window.TimeSpan = class TimeSpan {\n  /**\r\n   * @param {Number} value\r\n   * @returns {TimeSpan}\r\n   */\n  static fromYears(value) {\n    return new TimeSpan(value * 31536e6);\n  }\n  /**\r\n   * @param {Number} value\r\n   * @returns {TimeSpan}\r\n   */\n\n\n  static fromDays(value) {\n    return new TimeSpan(value * 864e5);\n  }\n  /**\r\n   * @param {Number} value\r\n   * @returns {TimeSpan}\r\n   */\n\n\n  static fromHours(value) {\n    return new TimeSpan(value * 36e5);\n  }\n  /**\r\n   * @param {Number} value\r\n   * @returns {TimeSpan}\r\n   */\n\n\n  static fromMinutes(value) {\n    return new TimeSpan(value * 6e4);\n  }\n  /**\r\n   * @param {Number} value\r\n   * @returns {TimeSpan}\r\n   */\n\n\n  static fromSeconds(value) {\n    return new TimeSpan(value * 1e3);\n  }\n  /**\r\n   * @param {Number} value\r\n   * @returns {TimeSpan}\r\n   */\n\n\n  static fromMilliseconds(value) {\n    return new TimeSpan(value);\n  }\n  /**\r\n   * @param {Number} ms\r\n   */\n\n\n  constructor(ms) {\n    Guard.isNumber(ms, \"Value 'ms' must be a number\");\n    this._ms = ms;\n  }\n  /**\r\n   * @param {TimeSpan} other\r\n   */\n\n\n  copyFrom(other) {\n    Guard.isTimeSpan(other);\n    this._ms = other._ms;\n  }\n  /**\r\n   * @param {Number} ms\r\n   */\n\n\n  setFrom(ms) {\n    Guard.isNumber(ms);\n    this._ms = ms;\n  }\n  /**\r\n   * @returns {Number}\r\n   */\n\n\n  get years() {\n    return Math.floor(this.totalYears);\n  }\n  /**\r\n   * @returns {Number}\r\n   */\n\n\n  get days() {\n    return Math.floor(this.totalDays % 365);\n  }\n  /**\r\n   * @returns {Number}\r\n   */\n\n\n  get hours() {\n    return Math.floor(this.totalHours % 24);\n  }\n  /**\r\n   * @returns {Number}\r\n   */\n\n\n  get minutes() {\n    return Math.floor(this.totalMinutes % 60);\n  }\n  /**\r\n   * @returns {Number}\r\n   */\n\n\n  get seconds() {\n    return Math.floor(this.totalSeconds % 60);\n  }\n  /**\r\n   * @returns {Number}\r\n   */\n\n\n  get milliseconds() {\n    return Math.floor(this.totalMilliseconds % 1e3);\n  }\n  /**\r\n   * @returns {Number}\r\n   */\n\n\n  get totalYears() {\n    return this._ms / 31536e6;\n  }\n  /**\r\n   * @returns {Number}\r\n   */\n\n\n  get totalDays() {\n    return this._ms / 864e5;\n  }\n  /**\r\n   * @returns {Number}\r\n   */\n\n\n  get totalHours() {\n    return this._ms / 36e5;\n  }\n  /**\r\n   * @returns {Number}\r\n   */\n\n\n  get totalMinutes() {\n    return this._ms / 6e4;\n  }\n  /**\r\n   * @returns {Number}\r\n   */\n\n\n  get totalSeconds() {\n    return this._ms / 1e3;\n  }\n  /**\r\n   * @returns {Number}\r\n   */\n\n\n  get totalMilliseconds() {\n    return this._ms;\n  }\n  /**\r\n   * @param {TimeSpan} other\r\n   * @returns {TimeSpan}\r\n   */\n\n\n  plus(other) {\n    Guard.isTimeSpan(other);\n    return new TimeSpan(this._ms + other._ms);\n  }\n  /**\r\n   * @param {TimeSpan} other\r\n   * @returns {TimeSpan}\r\n   */\n\n\n  minus(other) {\n    Guard.isTimeSpan(other);\n    return new TimeSpan(this._ms - other._ms);\n  }\n  /**\r\n   * @param {Number} other\r\n   * @returns {TimeSpan}\r\n   */\n\n\n  times(other) {\n    Guard.isNumber(other);\n    return new TimeSpan(this._ms * other);\n  }\n  /**\r\n   * @param {Number} other\r\n   * @returns {TimeSpan}\r\n   */\n\n\n  dividedBy(other) {\n    Guard.isNumber(other);\n    return new TimeSpan(this._ms / other);\n  }\n  /**\r\n   * @returns {String}\r\n   */\n\n\n  toString() {\n    if (this.years > 1e6) {\n      return `${format(this.totalYears, 3, 0)} years`;\n    }\n\n    if (this.totalSeconds >= 10) {\n      return this.toStringNoDecimals();\n    }\n\n    return this.toStringShort();\n  }\n  /**\r\n   * @returns {String}\r\n   */\n\n\n  toStringNoDecimals() {\n    const parts = [];\n\n    function addCheckedComponent(value, name) {\n      if (value === 0) {\n        return;\n      }\n\n      addComponent(value, name);\n    }\n\n    function addComponent(value, name) {\n      parts.push(value === 1 ? `${formatInt(value)} ${name}` : `${formatInt(value)} ${name}s`);\n    }\n\n    addCheckedComponent(this.years, \"year\");\n    addCheckedComponent(this.days, \"day\");\n    addCheckedComponent(this.hours, \"hour\");\n    addCheckedComponent(this.minutes, \"minute\");\n    addCheckedComponent(this.seconds, \"second\"); // Join with commas and 'and' in the end.\n\n    if (parts.length === 0) return `${formatInt(0)} seconds`;\n    return [parts.slice(0, -1).join(\", \"), parts.slice(-1)[0]].join(parts.length < 2 ? \"\" : \" and \");\n  }\n  /**\r\n   * Note: For speedruns, we give 3 digits of hours on HMS formatting, a decimal point on seconds, and\r\n   *  suppress END formatting on the speedrun record tabs\r\n   * @param {boolean} useHMS If true, will display times as HH:MM:SS in between a minute and 100 hours.\r\n   * @returns {String}\r\n   */\n\n\n  toStringShort(useHMS = true, isSpeedrun = false) {\n    // Probably not worth the trouble of importing the isEND function from formatting since this accomplishes the same\n    // thing; we do however need this to prevent strings like \"02:32\" from showing up though\n    if (format(0) === \"END\" && !isSpeedrun) return \"END\";\n    const totalSeconds = this.totalSeconds;\n\n    if (totalSeconds > 5e-7 && totalSeconds < 1e-3) {\n      // This conditional happens when when the time is less than 1 millisecond\n      // but big enough not to round to 0 with 3 decimal places (so showing decimal places\n      // won't just show 0 and waste space).\n      return `${format(1000 * totalSeconds, 0, 3)} ms`;\n    }\n\n    if (totalSeconds < 1) {\n      // This catches all the cases when totalSeconds is less than 1 but not\n      // between 5e-7 and 1e-3. This includes two types of cases:\n      // (1) those less than or equal to 5e-7, which most notations will format as 0\n      // (the most notable case of this kind is 0 itself).\n      // (2) those greater than or equal to 1e-3, which will be formatted with default settings\n      // (for most notations, rounding to the nearest integer number of milliseconds)\n      return `${format(1000 * totalSeconds)} ms`;\n    }\n\n    if (totalSeconds < 10) {\n      return `${format(totalSeconds, 0, 3)} seconds`;\n    }\n\n    if (totalSeconds < 60) {\n      return `${format(totalSeconds, 0, 2)} seconds`;\n    }\n\n    if (this.totalHours < 100 || isSpeedrun && this.totalHours < 1000) {\n      if (useHMS && !Notations.current.isPainful) {\n        const sec = seconds(this.seconds, this.milliseconds);\n        if (Math.floor(this.totalHours) === 0) return `${formatHMS(this.minutes)}:${sec}`;\n        return `${formatHMS(Math.floor(this.totalHours))}:${formatHMS(this.minutes)}:${sec}`;\n      }\n\n      if (this.totalMinutes < 60) {\n        return `${format(this.totalMinutes, 0, 2)} minutes`;\n      }\n\n      if (this.totalHours < 24) {\n        return `${format(this.totalHours, 0, 2)} hours`;\n      }\n    }\n\n    if (this.totalDays < 500) {\n      return `${isSpeedrun ? this.totalDays.toFixed(2) : format(this.totalDays, 0, 2)} days`;\n    }\n\n    return `${isSpeedrun ? this.totalYears.toFixed(3) : format(this.totalYears, 3, 2)} years`;\n\n    function formatHMS(value) {\n      const s = value.toString();\n      return s.length === 1 ? `0${s}` : s;\n    }\n\n    function seconds(s, ms) {\n      const sec = formatHMS(s);\n      return isSpeedrun ? `${sec}.${Math.floor(ms / 100)}` : sec;\n    }\n  }\n\n  toTimeEstimate() {\n    const seconds = this.totalSeconds;\n    if (seconds < 1) return `< ${formatInt(1)} second`;\n    if (seconds > 86400 * 365.25) return `> ${formatInt(1)} year`;\n    return this.toStringShort();\n  }\n\n  static get zero() {\n    return new TimeSpan(0);\n  }\n\n  static get maxValue() {\n    return new TimeSpan(Number.MAX_VALUE);\n  }\n\n  static get minValue() {\n    return new TimeSpan(Number.MIN_VALUE);\n  }\n\n};\nconst Guard = {\n  isDefined(value, message) {\n    if (value !== undefined) return;\n    if (message) throw message;\n    throw \"Value is defined\";\n  },\n\n  isNumber(value, message) {\n    if (typeof value === \"number\") return;\n    if (message) throw message;\n    throw \"Value is not a number\";\n  },\n\n  isTimeSpan(value, message) {\n    if (value instanceof TimeSpan) return;\n    if (message) throw message;\n    throw \"Value is not a TimeSpan\";\n  }\n\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/timespan.js"],"names":["window","TimeSpan","fromYears","value","fromDays","fromHours","fromMinutes","fromSeconds","fromMilliseconds","constructor","ms","Guard","isNumber","_ms","copyFrom","other","isTimeSpan","setFrom","years","Math","floor","totalYears","days","totalDays","hours","totalHours","minutes","totalMinutes","seconds","totalSeconds","milliseconds","totalMilliseconds","plus","minus","times","dividedBy","toString","format","toStringNoDecimals","toStringShort","parts","addCheckedComponent","name","addComponent","push","formatInt","length","slice","join","useHMS","isSpeedrun","Notations","current","isPainful","sec","formatHMS","toFixed","s","toTimeEstimate","zero","maxValue","Number","MAX_VALUE","minValue","MIN_VALUE","isDefined","message","undefined"],"mappings":"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","sourcesContent":["window.TimeSpan = class TimeSpan {\r\n  /**\r\n   * @param {Number} value\r\n   * @returns {TimeSpan}\r\n   */\r\n  static fromYears(value) {\r\n    return new TimeSpan(value * 31536e6);\r\n  }\r\n\r\n  /**\r\n   * @param {Number} value\r\n   * @returns {TimeSpan}\r\n   */\r\n  static fromDays(value) {\r\n    return new TimeSpan(value * 864e5);\r\n  }\r\n\r\n  /**\r\n   * @param {Number} value\r\n   * @returns {TimeSpan}\r\n   */\r\n  static fromHours(value) {\r\n    return new TimeSpan(value * 36e5);\r\n  }\r\n\r\n  /**\r\n   * @param {Number} value\r\n   * @returns {TimeSpan}\r\n   */\r\n  static fromMinutes(value) {\r\n    return new TimeSpan(value * 6e4);\r\n  }\r\n\r\n  /**\r\n   * @param {Number} value\r\n   * @returns {TimeSpan}\r\n   */\r\n  static fromSeconds(value) {\r\n    return new TimeSpan(value * 1e3);\r\n  }\r\n\r\n  /**\r\n   * @param {Number} value\r\n   * @returns {TimeSpan}\r\n   */\r\n  static fromMilliseconds(value) {\r\n    return new TimeSpan(value);\r\n  }\r\n\r\n  /**\r\n   * @param {Number} ms\r\n   */\r\n  constructor(ms) {\r\n    Guard.isNumber(ms, \"Value 'ms' must be a number\");\r\n    this._ms = ms;\r\n  }\r\n\r\n  /**\r\n   * @param {TimeSpan} other\r\n   */\r\n  copyFrom(other) {\r\n    Guard.isTimeSpan(other);\r\n    this._ms = other._ms;\r\n  }\r\n\r\n  /**\r\n   * @param {Number} ms\r\n   */\r\n  setFrom(ms) {\r\n    Guard.isNumber(ms);\r\n    this._ms = ms;\r\n  }\r\n\r\n  /**\r\n   * @returns {Number}\r\n   */\r\n  get years() {\r\n    return Math.floor(this.totalYears);\r\n  }\r\n\r\n  /**\r\n   * @returns {Number}\r\n   */\r\n  get days() {\r\n    return Math.floor(this.totalDays % 365);\r\n  }\r\n\r\n  /**\r\n   * @returns {Number}\r\n   */\r\n  get hours() {\r\n    return Math.floor(this.totalHours % 24);\r\n  }\r\n\r\n  /**\r\n   * @returns {Number}\r\n   */\r\n  get minutes() {\r\n    return Math.floor(this.totalMinutes % 60);\r\n  }\r\n\r\n  /**\r\n   * @returns {Number}\r\n   */\r\n  get seconds() {\r\n    return Math.floor(this.totalSeconds % 60);\r\n  }\r\n\r\n  /**\r\n   * @returns {Number}\r\n   */\r\n  get milliseconds() {\r\n    return Math.floor(this.totalMilliseconds % 1e3);\r\n  }\r\n\r\n  /**\r\n   * @returns {Number}\r\n   */\r\n  get totalYears() {\r\n    return this._ms / 31536e6;\r\n  }\r\n\r\n  /**\r\n   * @returns {Number}\r\n   */\r\n  get totalDays() {\r\n    return this._ms / 864e5;\r\n  }\r\n\r\n  /**\r\n   * @returns {Number}\r\n   */\r\n  get totalHours() {\r\n    return this._ms / 36e5;\r\n  }\r\n\r\n  /**\r\n   * @returns {Number}\r\n   */\r\n  get totalMinutes() {\r\n    return this._ms / 6e4;\r\n  }\r\n\r\n  /**\r\n   * @returns {Number}\r\n   */\r\n  get totalSeconds() {\r\n    return this._ms / 1e3;\r\n  }\r\n\r\n  /**\r\n   * @returns {Number}\r\n   */\r\n  get totalMilliseconds() {\r\n    return this._ms;\r\n  }\r\n\r\n  /**\r\n   * @param {TimeSpan} other\r\n   * @returns {TimeSpan}\r\n   */\r\n  plus(other) {\r\n    Guard.isTimeSpan(other);\r\n    return new TimeSpan(this._ms + other._ms);\r\n  }\r\n\r\n  /**\r\n   * @param {TimeSpan} other\r\n   * @returns {TimeSpan}\r\n   */\r\n  minus(other) {\r\n    Guard.isTimeSpan(other);\r\n    return new TimeSpan(this._ms - other._ms);\r\n  }\r\n\r\n  /**\r\n   * @param {Number} other\r\n   * @returns {TimeSpan}\r\n   */\r\n  times(other) {\r\n    Guard.isNumber(other);\r\n    return new TimeSpan(this._ms * other);\r\n  }\r\n\r\n  /**\r\n   * @param {Number} other\r\n   * @returns {TimeSpan}\r\n   */\r\n  dividedBy(other) {\r\n    Guard.isNumber(other);\r\n    return new TimeSpan(this._ms / other);\r\n  }\r\n\r\n  /**\r\n   * @returns {String}\r\n   */\r\n  toString() {\r\n    if (this.years > 1e6) {\r\n      return `${format(this.totalYears, 3, 0)} years`;\r\n    }\r\n    if (this.totalSeconds >= 10) {\r\n      return this.toStringNoDecimals();\r\n    }\r\n    return this.toStringShort();\r\n  }\r\n\r\n  /**\r\n   * @returns {String}\r\n   */\r\n  toStringNoDecimals() {\r\n    const parts = [];\r\n    function addCheckedComponent(value, name) {\r\n      if (value === 0) {\r\n        return;\r\n      }\r\n      addComponent(value, name);\r\n    }\r\n    function addComponent(value, name) {\r\n      parts.push(value === 1 ? `${formatInt(value)} ${name}` : `${formatInt(value)} ${name}s`);\r\n    }\r\n    addCheckedComponent(this.years, \"year\");\r\n    addCheckedComponent(this.days, \"day\");\r\n    addCheckedComponent(this.hours, \"hour\");\r\n    addCheckedComponent(this.minutes, \"minute\");\r\n    addCheckedComponent(this.seconds, \"second\");\r\n    // Join with commas and 'and' in the end.\r\n    if (parts.length === 0) return `${formatInt(0)} seconds`;\r\n    return [parts.slice(0, -1).join(\", \"), parts.slice(-1)[0]].join(parts.length < 2 ? \"\" : \" and \");\r\n  }\r\n\r\n  /**\r\n   * Note: For speedruns, we give 3 digits of hours on HMS formatting, a decimal point on seconds, and\r\n   *  suppress END formatting on the speedrun record tabs\r\n   * @param {boolean} useHMS If true, will display times as HH:MM:SS in between a minute and 100 hours.\r\n   * @returns {String}\r\n   */\r\n  toStringShort(useHMS = true, isSpeedrun = false) {\r\n    // Probably not worth the trouble of importing the isEND function from formatting since this accomplishes the same\r\n    // thing; we do however need this to prevent strings like \"02:32\" from showing up though\r\n    if (format(0) === \"END\" && !isSpeedrun) return \"END\";\r\n\r\n    const totalSeconds = this.totalSeconds;\r\n    if (totalSeconds > 5e-7 && totalSeconds < 1e-3) {\r\n      // This conditional happens when when the time is less than 1 millisecond\r\n      // but big enough not to round to 0 with 3 decimal places (so showing decimal places\r\n      // won't just show 0 and waste space).\r\n      return `${format(1000 * totalSeconds, 0, 3)} ms`;\r\n    }\r\n    if (totalSeconds < 1) {\r\n      // This catches all the cases when totalSeconds is less than 1 but not\r\n      // between 5e-7 and 1e-3. This includes two types of cases:\r\n      // (1) those less than or equal to 5e-7, which most notations will format as 0\r\n      // (the most notable case of this kind is 0 itself).\r\n      // (2) those greater than or equal to 1e-3, which will be formatted with default settings\r\n      // (for most notations, rounding to the nearest integer number of milliseconds)\r\n      return `${format(1000 * totalSeconds)} ms`;\r\n    }\r\n    if (totalSeconds < 10) {\r\n      return `${format(totalSeconds, 0, 3)} seconds`;\r\n    }\r\n    if (totalSeconds < 60) {\r\n      return `${format(totalSeconds, 0, 2)} seconds`;\r\n    }\r\n    if (this.totalHours < 100 || (isSpeedrun && this.totalHours < 1000)) {\r\n      if (useHMS && !Notations.current.isPainful) {\r\n        const sec = seconds(this.seconds, this.milliseconds);\r\n        if (Math.floor(this.totalHours) === 0) return `${formatHMS(this.minutes)}:${sec}`;\r\n        return `${formatHMS(Math.floor(this.totalHours))}:${formatHMS(this.minutes)}:${sec}`;\r\n      }\r\n      if (this.totalMinutes < 60) {\r\n        return `${format(this.totalMinutes, 0, 2)} minutes`;\r\n      }\r\n      if (this.totalHours < 24) {\r\n        return `${format(this.totalHours, 0, 2)} hours`;\r\n      }\r\n    }\r\n    if (this.totalDays < 500) {\r\n      return `${isSpeedrun ? this.totalDays.toFixed(2) : format(this.totalDays, 0, 2)} days`;\r\n    }\r\n    return `${isSpeedrun ? this.totalYears.toFixed(3) : format(this.totalYears, 3, 2)} years`;\r\n\r\n    function formatHMS(value) {\r\n      const s = value.toString();\r\n      return s.length === 1 ? `0${s}` : s;\r\n    }\r\n\r\n    function seconds(s, ms) {\r\n      const sec = formatHMS(s);\r\n      return isSpeedrun ? `${sec}.${Math.floor(ms / 100)}` : sec;\r\n    }\r\n  }\r\n\r\n  toTimeEstimate() {\r\n    const seconds = this.totalSeconds;\r\n    if (seconds < 1) return `< ${formatInt(1)} second`;\r\n    if (seconds > 86400 * 365.25) return `> ${formatInt(1)} year`;\r\n    return this.toStringShort();\r\n  }\r\n\r\n  static get zero() {\r\n    return new TimeSpan(0);\r\n  }\r\n\r\n  static get maxValue() {\r\n    return new TimeSpan(Number.MAX_VALUE);\r\n  }\r\n\r\n  static get minValue() {\r\n    return new TimeSpan(Number.MIN_VALUE);\r\n  }\r\n};\r\n\r\nconst Guard = {\r\n  isDefined(value, message) {\r\n    if (value !== undefined) return;\r\n    if (message) throw message;\r\n    throw \"Value is defined\";\r\n  },\r\n  isNumber(value, message) {\r\n    if (typeof value === \"number\") return;\r\n    if (message) throw message;\r\n    throw \"Value is not a number\";\r\n  },\r\n  isTimeSpan(value, message) {\r\n    if (value instanceof TimeSpan) return;\r\n    if (message) throw message;\r\n    throw \"Value is not a TimeSpan\";\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}