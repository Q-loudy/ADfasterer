{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.flat-map.js\";\nimport \"core-js/modules/es.array.unscopables.flat-map.js\";\nimport Mousetrap from \"mousetrap\";\nimport { ElectronRuntime } from \"@/steam\";\nimport { GameKeyboard } from \"./keyboard\"; // Add your hotkeys and combinations here\n// GameKeyboard.bind for single press combinations\n// GameKeyboard.bindRepeatable for repeatable combinations\n// Hotkeys obey player.options.hotkeys option, and should be everying relating to the functionality of the game itself\n// GameKeyboard.bindHotkey for single press hotkeys\n// GameKeyboard.bindRepeatableHotkey for repeatable hotkeys\n// GameKeyboard class uses Mousetrap under the hood, so for more details visit\n// https://craig.is/killing/mice\n// Note: mod is a function key helper by Mousetap for both ctrl and command,\n// and should be used to provide support for both Windows and Max\n// Note: DON'T add repeatables with modifier keys other than shift\n// because Mousetrap is crap, and we needed to plug it up to work\n// properly with shift, so you will need to plug it up additionally\n// for the other modifier keys (#3093).\n// Free keys:\n// i, j, k, l, n, o, p, q, v, w, x\n\nexport const shortcuts = [{\n  name: \"Toggle Autobuyers\",\n  keys: [\"a\"],\n  type: \"bindHotkey\",\n  function: () => keyboardToggleAutobuyers(),\n  visible: true\n}, {\n  name: \"Buy one Tickspeed\",\n  keys: [\"shift\", \"t\"],\n  type: \"bindRepeatableHotkey\",\n  function: () => buyTickSpeed(),\n  visible: true\n}, {\n  name: \"Buy max Tickspeed\",\n  keys: [\"t\"],\n  type: \"bindRepeatableHotkey\",\n  function: () => buyMaxTickSpeed(),\n  visible: true\n}, {\n  name: \"Max all\",\n  keys: [\"m\"],\n  type: \"bindRepeatableHotkey\",\n  function: () => maxAll(),\n  visible: true\n}, {\n  name: \"Dimensional Sacrifice\",\n  keys: [\"s\"],\n  type: \"bindRepeatableHotkey\",\n  function: () => sacrificeBtnClick(),\n  visible: true\n}, {\n  name: \"Dimension Boost\",\n  keys: [\"d\"],\n  type: \"bindRepeatableHotkey\",\n  function: () => manualRequestDimensionBoost(true),\n  visible: true\n}, {\n  name: \"Single Dimension Boost\",\n  keys: [\"shift\", \"d\"],\n  type: \"bindRepeatableHotkey\",\n  function: () => manualRequestDimensionBoost(false),\n  visible: false\n}, {\n  name: \"Antimatter Galaxy\",\n  keys: [\"g\"],\n  type: \"bindRepeatableHotkey\",\n  function: () => manualRequestGalaxyReset(true),\n  visible: true\n}, {\n  name: \"Single Antimatter Galaxy\",\n  keys: [\"shift\", \"g\"],\n  type: \"bindRepeatableHotkey\",\n  function: () => manualRequestGalaxyReset(false),\n  visible: false\n}, {\n  name: \"Big Crunch\",\n  keys: [\"c\"],\n  type: \"bindRepeatableHotkey\",\n  function: () => manualBigCrunchResetRequest(),\n  visible: true\n}, {\n  name: \"Replicanti Galaxy\",\n  keys: [\"r\"],\n  type: \"bindHotkey\",\n  function: () => {\n    replicantiGalaxyRequest();\n    setHoldingR(true);\n  },\n  visible: () => Replicanti.areUnlocked || PlayerProgress.eternityUnlocked()\n}, {\n  name: \"Eternity\",\n  keys: [\"e\"],\n  type: \"bindRepeatableHotkey\",\n  function: () => eternityResetRequest(),\n  visible: () => PlayerProgress.eternityUnlocked() || Player.canEternity\n}, {\n  name: \"Toggle Time Study respec\",\n  keys: [\"shift\", \"e\"],\n  type: \"bindHotkey\",\n  function: () => {\n    player.respec = !player.respec;\n    GameUI.notify.info(`Time Study respec is now ${player.respec ? \"active\" : \"inactive\"}`);\n  },\n  visible: () => PlayerProgress.eternityUnlocked()\n}, {\n  name: \"Enter/Exit Dilation\",\n  keys: [\"l\"],\n  type: \"bindRepeatableHotkey\",\n  function: () => startDilatedEternityRequest(),\n  visible: () => PlayerProgress.realityUnlocked() || PlayerProgress.dilationUnlocked()\n}, {\n  name: \"Reality\",\n  keys: [\"y\"],\n  type: \"bindRepeatableHotkey\",\n  function: () => requestManualReality(),\n  visible: () => PlayerProgress.realityUnlocked() || isRealityAvailable()\n}, {\n  name: \"Toggle Glyph unequip\",\n  keys: [\"shift\", \"y\"],\n  type: \"bindHotkey\",\n  function: () => {\n    player.reality.respec = !player.reality.respec;\n    GameUI.notify.info(`Glyph respec is now ${player.reality.respec ? \"active\" : \"inactive\"}`);\n  },\n  visible: () => PlayerProgress.realityUnlocked()\n}, {\n  name: \"Start/Pause Automator\",\n  keys: [\"u\"],\n  type: \"bindHotkey\",\n  function: () => keyboardAutomatorToggle(),\n  visible: () => Player.automatorUnlocked\n}, {\n  name: \"Restart Automator\",\n  keys: [\"shift\", \"u\"],\n  type: \"bindHotkey\",\n  function: () => keyboardAutomatorRestart(),\n  visible: () => Player.automatorUnlocked\n}, {\n  name: \"Undo Edit (Automator)\",\n  keys: [\"mod\", \"z\"],\n  type: \"bind\",\n  function: () => AutomatorData.undoScriptEdit(),\n  visible: () => Player.automatorUnlocked\n}, {\n  name: \"Redo Edit (Automator)\",\n  keys: [\"mod\", \"y\"],\n  type: \"bind\",\n  function: () => AutomatorData.redoScriptEdit(),\n  visible: () => Player.automatorUnlocked\n}, {\n  name: \"Toggle Black Hole\",\n  keys: [\"b\"],\n  type: \"bindHotkey\",\n  function: () => BlackHoles.togglePause(),\n  visible: () => PlayerProgress.realityUnlocked()\n}, {\n  name: \"Toggle Continuum\",\n  keys: [\"alt\", \"a\"],\n  type: \"bindHotkey\",\n  function: () => keyboardToggleContinuum(),\n  visible: () => Laitela.continuumUnlocked\n}, {\n  name: \"Armageddon\",\n  keys: [\"z\"],\n  type: \"bindRepeatableHotkey\",\n  function: () => armageddonRequest(),\n  visible: () => Pelle.isDoomed\n}, {\n  name: \"Toggle Glyph unequip (Pelle)\",\n  keys: [\"shift\", \"z\"],\n  type: \"bindHotkey\",\n  function: () => {\n    if (!Pelle.isDoomed) return;\n    player.reality.respec = !player.reality.respec;\n    GameUI.notify.info(`Glyph respec is now ${player.reality.respec ? \"active\" : \"inactive\"}`);\n  },\n  visible: () => Pelle.isDoomed\n}, {\n  name: \"Save game\",\n  keys: [\"mod\", \"s\"],\n  type: \"bind\",\n  function: () => {\n    GameStorage.save(false, true);\n    return false;\n  },\n  visible: true\n}, {\n  name: \"Export game\",\n  keys: [\"mod\", \"e\"],\n  type: \"bind\",\n  function: () => {\n    GameStorage.export();\n    return false;\n  },\n  visible: true\n}, {\n  name: \"Open Hotkey List Modal\",\n  keys: [\"?\"],\n  type: \"bind\",\n  function: () => {\n    keyboardPressQuestionMark();\n    return false;\n  },\n  visible: true\n}, {\n  name: \"Open How To Play Modal\",\n  keys: [\"h\"],\n  type: \"bind\",\n  function: () => {\n    keyboardH2PToggle();\n    return false;\n  },\n  visible: true\n}, {\n  name: \"Modify visible tabs\",\n  keys: [\"tab\"],\n  type: \"bind\",\n  function: () => {\n    keyboardVisibleTabsToggle();\n    return false;\n  },\n  visible: true\n}, {\n  name: \"Confirm Modal\",\n  keys: [\"enter\"],\n  type: \"bind\",\n  function: () => {\n    EventHub.dispatch(GAME_EVENT.ENTER_PRESSED);\n    return true;\n  },\n  visible: true\n}, {\n  name: \"Close Modal or open Options\",\n  keys: [\"esc\"],\n  type: \"bind\",\n  function: () => {\n    keyboardPressEscape();\n    return false;\n  },\n  visible: true\n}, {\n  name: \"Paying respects\",\n  keys: [\"f\"],\n  type: \"bindRepeatable\",\n  function: () => {\n    GameUI.notify.info(\"Paying respects\");\n    SecretAchievement(13).unlock();\n  },\n  visible: false\n}, {\n  name: \"Change Tab\",\n  keys: [\"up\"],\n  type: \"bind\",\n  function: () => {\n    EventHub.dispatch(GAME_EVENT.ARROW_KEY_PRESSED, \"up\");\n    return false;\n  },\n  visible: false\n}, {\n  name: \"Change Tab\",\n  keys: [\"down\"],\n  type: \"bind\",\n  function: () => {\n    EventHub.dispatch(GAME_EVENT.ARROW_KEY_PRESSED, \"down\");\n    return false;\n  },\n  visible: false\n}, {\n  name: \"Change Subtab\",\n  keys: [\"left\"],\n  type: \"bind\",\n  function: () => {\n    EventHub.dispatch(GAME_EVENT.ARROW_KEY_PRESSED, \"left\");\n    return false;\n  },\n  visible: false\n}, {\n  name: \"Change Subtab\",\n  keys: [\"right\"],\n  type: \"bind\",\n  function: () => {\n    EventHub.dispatch(GAME_EVENT.ARROW_KEY_PRESSED, \"right\");\n    return false;\n  },\n  visible: false\n}, {\n  name: \"Doesn't exist\",\n  keys: [\"9\"],\n  type: \"bind\",\n  function: () => SecretAchievement(41).unlock(),\n  visible: false\n}, {\n  name: \"Adjust Autobuyers\",\n  keys: [\"mod\", \"alt\", \"a\"],\n  type: \"bind\",\n  function: () => keyboardEditAutobuyers(),\n  visible: () => Autobuyers.hasAutobuyersForEditModal\n}, {\n  name: \"Fullscreen\",\n  keys: [\"F10\"],\n  type: \"bind\",\n  function: () => {},\n  visible: () => false\n}, {\n  name: \"Zoom In\",\n  keys: [\"ctrl\", \"=\"],\n  type: \"bind\",\n  function: () => ElectronRuntime.increaseZoom(),\n  visible: () => false\n}, {\n  name: \"Zoom In\",\n  keys: [\"ctrl\", \"+\"],\n  type: \"bind\",\n  function: () => ElectronRuntime.increaseZoom(),\n  visible: () => false\n}, {\n  name: \"Zoom Out\",\n  keys: [\"ctrl\", \"-\"],\n  type: \"bind\",\n  function: () => ElectronRuntime.decreaseZoom(),\n  visible: () => false\n}, {\n  name: \"Reset Zoom\",\n  keys: [\"ctrl\", \"0\"],\n  type: \"bind\",\n  function: () => ElectronRuntime.resetZoom(),\n  visible: () => false\n}, {\n  name: \"Pause/Resume Game\",\n  keys: [\"p\"],\n  type: \"bind\",\n  function: () => {\n    player.options.gamePaused = !player.options.gamePaused;\n    GameUI.notify.info(player.options.gamePaused ? \"Game paused\" : \"Game resumed\", 2000);\n  },\n  visible: () => true\n}];\n\nfor (const hotkey of shortcuts) {\n  GameKeyboard[hotkey.type](hotkey.keys.join(\"+\"), hotkey.function);\n} // We need to know whether the player is holding R or not for the replicanti galaxy\n// The keydown version is above, with the replicantiGalaxyRequest, as otherwise it would be overridden\n\n\nGameKeyboard.bind(\"r\", () => setHoldingR(false), \"keyup\"); // Same thing with Shift; we need to double-up on ctrl-shift as well since they're technically different keybinds\n\nGameKeyboard.bind(\"shift\", () => setShiftKey(true), \"keydown\");\nGameKeyboard.bind(\"shift\", () => setShiftKey(false), \"keyup\");\nGameKeyboard.bind(\"ctrl+shift\", () => setShiftKey(true), \"keydown\");\nGameKeyboard.bind(\"ctrl+shift\", () => setShiftKey(false), \"keyup\");\nGameKeyboard.bind(\"alt+shift\", () => setShiftKey(true), \"keydown\");\nGameKeyboard.bind(\"alt+shift\", () => setShiftKey(false), \"keyup\");\nGameKeyboard.bindHotkey(\"alt+t\", () => toggleAutobuyer(Autobuyer.tickspeed));\nGameKeyboard.bindHotkey(\"shift+alt+t\", () => toggleBuySingles(Autobuyer.tickspeed));\nGameKeyboard.bindHotkey(\"alt+s\", () => toggleAutobuyer(Autobuyer.sacrifice));\nGameKeyboard.bindHotkey(\"alt+d\", () => toggleAutobuyer(Autobuyer.dimboost));\nGameKeyboard.bindHotkey(\"alt+g\", () => toggleAutobuyer(Autobuyer.galaxy));\nGameKeyboard.bindHotkey(\"alt+r\", () => toggleAutobuyer(Autobuyer.replicantiGalaxy));\nGameKeyboard.bindHotkey(\"alt+c\", () => toggleAutobuyer(Autobuyer.bigCrunch));\nGameKeyboard.bindHotkey(\"alt+e\", () => toggleAutobuyer(Autobuyer.eternity));\nGameKeyboard.bindHotkey(\"alt+y\", () => toggleAutobuyer(Autobuyer.reality));\n\n(function () {\n  function bindDimensionHotkeys(tier) {\n    GameKeyboard.bindRepeatableHotkey(`${tier}`, () => buyManyDimension(tier));\n    GameKeyboard.bindRepeatableHotkey(`num${tier}`, () => buyManyDimension(tier));\n    GameKeyboard.bindRepeatableHotkey(`shift+${tier}`, () => buyOneDimension(tier));\n    GameKeyboard.bindRepeatableHotkey(`shift+num${tier}`, () => buyOneDimension(tier));\n    GameKeyboard.bindHotkey(`alt+${tier}`, () => toggleAutobuyer(Autobuyer.antimatterDimension(tier)));\n    GameKeyboard.bindHotkey(`alt+num${tier}`, () => toggleAutobuyer(Autobuyer.antimatterDimension(tier)));\n    GameKeyboard.bindHotkey(`shift+alt+${tier}`, () => toggleBuySingles(Autobuyer.antimatterDimension(tier)));\n    GameKeyboard.bindHotkey(`shift+alt+num${tier}`, () => toggleBuySingles(Autobuyer.antimatterDimension(tier)));\n  }\n\n  for (let i = 1; i < 9; i++) bindDimensionHotkeys(i);\n})(); // A few special GameKeyboards\n\n\nGameKeyboard.bind([\"mod+shift+c\", \"mod+shift+i\", \"mod+shift+j\", \"f12\"], () => SecretAchievement(23).unlock()); // Toggle autobuyers\n\nfunction toggleAutobuyer(buyer) {\n  // Autobuyer.tickspeed.isUnlocked is false without NC9, but we still want the simpler one to be togglable via hotkey\n  const isSimpleTickspeed = buyer === Autobuyer.tickspeed && buyer.isBought;\n\n  if (buyer.disabledByContinuum) {\n    GameUI.notify.info(\"Continuum is enabled, you cannot alter this autobuyer\");\n  } else if (buyer.isUnlocked || isSimpleTickspeed) {\n    buyer.toggle();\n    GameUI.notify.info(`${buyer.name} Autobuyer toggled ${buyer.isActive ? \"on\" : \"off\"}`);\n  }\n\n  return false;\n}\n\nfunction toggleBuySingles(buyer) {\n  if (buyer.disabledByContinuum) {\n    GameUI.notify.info(\"Continuum is enabled, you cannot alter this autobuyer\");\n  } else if (buyer.isUnlocked && buyer.toggleMode !== null) {\n    buyer.toggleMode();\n    const bulkName = buyer.name === \"Tickspeed\" || buyer.hasUnlimitedBulk ? \"max\" : \"10\";\n    GameUI.notify.info(`${buyer.name} Autobuyer set to buy ${buyer.mode === 1 ? \"singles\" : bulkName}`);\n  }\n\n  return false;\n}\n\nfunction keyboardToggleAutobuyers() {\n  if (Tab.automation.isUnlocked) {\n    Autobuyers.toggle();\n    GameUI.notify.info(`Autobuyers ${player.auto.autobuyersOn ? \"resumed\" : \"paused\"}`);\n  }\n}\n\nfunction keyboardToggleContinuum() {\n  if (!Laitela.continuumUnlocked) return;\n\n  if (ImaginaryUpgrade(21).isLockingMechanics && player.auto.disableContinuum) {\n    ImaginaryUpgrade(21).tryShowWarningModal();\n    return;\n  } // This is a toggle despite the lack of !, because player.auto.disableContinuum\n  // is negated compared to whether continuum is on.\n\n\n  Laitela.setContinuum(player.auto.disableContinuum);\n  GameUI.notify.info(`${player.auto.disableContinuum ? \"Disabled\" : \"Enabled\"} Continuum`);\n}\n\nfunction keyboardAutomatorToggle() {\n  // Automator must be unlocked\n  if (Player.automatorUnlocked) {\n    if (AutomatorBackend.isRunning) {\n      AutomatorBackend.pause();\n    } else if (AutomatorBackend.isOn) {\n      AutomatorBackend.mode = AUTOMATOR_MODE.RUN;\n    } else {\n      // Only attempt to start the visible script instead of the existing script if it isn't already running\n      const visibleIndex = player.reality.automator.state.editorScript;\n      AutomatorBackend.restart();\n      AutomatorBackend.start(visibleIndex);\n\n      if (AutomatorData.currentErrors().length === 0) {\n        GameUI.notify.automator(`Starting script \"${AutomatorBackend.scriptName}\"`);\n      } else {\n        GameUI.notify.error(`Cannot start script \"${AutomatorBackend.scriptName}\" (has errors)`);\n      }\n\n      return;\n    }\n\n    const action = AutomatorBackend.isRunning ? \"Resuming\" : \"Pausing\";\n    const linenum = AutomatorBackend.currentLineNumber;\n    GameUI.notify.automator(`${action} script \"${AutomatorBackend.scriptName}\" at line ${linenum}`);\n  }\n}\n\nfunction keyboardAutomatorRestart() {\n  if (Player.automatorUnlocked) {\n    const action = AutomatorBackend.isOn ? \"Restarting\" : \"Starting\";\n    GameUI.notify.automator(`${action} script \"${AutomatorBackend.scriptName}\"`);\n    AutomatorBackend.restart();\n    AutomatorBackend.start();\n  }\n}\n\nfunction armageddonRequest() {\n  if (!Pelle.canArmageddon) return;\n  Pelle.armageddon(true);\n}\n\nfunction keyboardPressEscape() {\n  if (Quote.isOpen || Quote.isHistoryOpen) Quote.clearAll();else if (Modal.isOpen) Modal.hideAll();else Tab.options.show(true);\n}\n\nfunction keyboardPressQuestionMark() {\n  if (Modal.hotkeys.isOpen) {\n    EventHub.dispatch(GAME_EVENT.CLOSE_MODAL);\n    return;\n  }\n\n  if (Modal.isOpen) Modal.hideAll();\n  Modal.hotkeys.show();\n}\n\nfunction keyboardH2PToggle() {\n  if (Modal.h2p.isOpen) {\n    EventHub.dispatch(GAME_EVENT.CLOSE_MODAL);\n    return;\n  }\n\n  if (Modal.isOpen) Modal.hideAll();\n  Modal.h2p.show();\n}\n\nfunction keyboardEditAutobuyers() {\n  if (Modal.autobuyerEditModal.isOpen) {\n    EventHub.dispatch(GAME_EVENT.CLOSE_MODAL);\n    return;\n  }\n\n  if (!Autobuyers.hasAutobuyersForEditModal) return;\n  if (Modal.isOpen) Modal.hideAll();\n  Modal.autobuyerEditModal.show();\n}\n\nfunction keyboardVisibleTabsToggle() {\n  if (Modal.hiddenTabs.isOpen) {\n    EventHub.dispatch(GAME_EVENT.CLOSE_MODAL);\n    return;\n  }\n\n  if (Modal.isOpen) Modal.hideAll();\n  Modal.hiddenTabs.show();\n}\n\nEventHub.logic.on(GAME_EVENT.ARROW_KEY_PRESSED, direction => {\n  if (Quote.isOpen || Quote.isHistoryOpen) return; // Current tabs. Defined here as both tab and subtab movements require knowing your current tab.\n\n  const currentTab = Tabs.current.key;\n\n  if (direction[0] === \"up\" || direction[0] === \"down\") {\n    // Make an array of the keys of all the unlocked and visible tabs\n    const tabs = Tabs.currentUIFormat.flatMap(i => i.isAvailable ? [i.key] : []); // Find the index of the tab we are on\n\n    let top = tabs.indexOf(currentTab); // Move in the desired direction\n\n    if (direction[0] === \"up\") top--;else top++; // Loop around if needed\n\n    top = (top + tabs.length) % tabs.length; // And now we go there.\n\n    Tab[tabs[top]].show(true);\n  } else if (direction[0] === \"left\" || direction[0] === \"right\") {\n    // Current subtabs\n    const currentSubtab = Tabs.current._currentSubtab.key; // Make an array of the keys of all the unlocked and visible subtabs\n\n    const subtabs = Tabs.current.subtabs.flatMap(i => i.isAvailable ? [i.key] : []); // Find the index of the subtab we are on\n\n    let sub = subtabs.indexOf(currentSubtab); // Move in the desired direction\n\n    if (direction[0] === \"left\") sub--;else sub++; // Loop around if needed\n\n    sub = (sub + subtabs.length) % subtabs.length; // And now we go there.\n\n    Tab[currentTab][subtabs[sub]].show(true);\n  }\n});\nconst konamiCode = [\"up\", \"up\", \"down\", \"down\", \"left\", \"right\", \"left\", \"right\", \"b\", \"a\", \"enter\"];\nlet konamiStep = 0;\n\nfunction testKonami(character) {\n  if (SecretAchievement(17).isUnlocked) return; // This conditional is structured weirdly in order to make sure more than 2 consecutive \"up\" inputs doesn't\n  // reset the sequence state unnecessarily, and that interrupting the sequence later on with the starting\n  // input will correctly set the state to one step in\n\n  if (konamiCode[konamiStep] === character) konamiStep++;else if (konamiStep === 2 && character === \"up\") konamiStep = 2;else if (character === konamiCode[0]) konamiStep = 1;else konamiStep = 0;\n\n  if (konamiCode.length <= konamiStep) {\n    SecretAchievement(17).unlock();\n    Currency.antimatter.bumpTo(30);\n    Speedrun.startTimer();\n  }\n} // Remember that Mousetrap handles the backend for GameKeyboard\n// Without this, Mousetrap become confused when the \"up\" key is pressed, as it is the starting key of a sequence\n// and an individual key. To allow both the up keybind and the konami code to work, we will change how Mousetrap handles\n// all keys so the konami code functions entirely separately from the normal handling.\n\n\nconst originalHandleKey = Mousetrap.prototype.handleKey;\n\nMousetrap.prototype.handleKey = function (character, modifiers, e) {\n  if (e.type === \"keydown\") testKonami(character);\n  return originalHandleKey.apply(this, [character, modifiers, e]);\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/hotkeys.js"],"names":["Mousetrap","ElectronRuntime","GameKeyboard","shortcuts","name","keys","type","function","keyboardToggleAutobuyers","visible","buyTickSpeed","buyMaxTickSpeed","maxAll","sacrificeBtnClick","manualRequestDimensionBoost","manualRequestGalaxyReset","manualBigCrunchResetRequest","replicantiGalaxyRequest","setHoldingR","Replicanti","areUnlocked","PlayerProgress","eternityUnlocked","eternityResetRequest","Player","canEternity","player","respec","GameUI","notify","info","startDilatedEternityRequest","realityUnlocked","dilationUnlocked","requestManualReality","isRealityAvailable","reality","keyboardAutomatorToggle","automatorUnlocked","keyboardAutomatorRestart","AutomatorData","undoScriptEdit","redoScriptEdit","BlackHoles","togglePause","keyboardToggleContinuum","Laitela","continuumUnlocked","armageddonRequest","Pelle","isDoomed","GameStorage","save","export","keyboardPressQuestionMark","keyboardH2PToggle","keyboardVisibleTabsToggle","EventHub","dispatch","GAME_EVENT","ENTER_PRESSED","keyboardPressEscape","SecretAchievement","unlock","ARROW_KEY_PRESSED","keyboardEditAutobuyers","Autobuyers","hasAutobuyersForEditModal","increaseZoom","decreaseZoom","resetZoom","options","gamePaused","hotkey","join","bind","setShiftKey","bindHotkey","toggleAutobuyer","Autobuyer","tickspeed","toggleBuySingles","sacrifice","dimboost","galaxy","replicantiGalaxy","bigCrunch","eternity","bindDimensionHotkeys","tier","bindRepeatableHotkey","buyManyDimension","buyOneDimension","antimatterDimension","i","buyer","isSimpleTickspeed","isBought","disabledByContinuum","isUnlocked","toggle","isActive","toggleMode","bulkName","hasUnlimitedBulk","mode","Tab","automation","auto","autobuyersOn","ImaginaryUpgrade","isLockingMechanics","disableContinuum","tryShowWarningModal","setContinuum","AutomatorBackend","isRunning","pause","isOn","AUTOMATOR_MODE","RUN","visibleIndex","automator","state","editorScript","restart","start","currentErrors","length","scriptName","error","action","linenum","currentLineNumber","canArmageddon","armageddon","Quote","isOpen","isHistoryOpen","clearAll","Modal","hideAll","show","hotkeys","CLOSE_MODAL","h2p","autobuyerEditModal","hiddenTabs","logic","on","direction","currentTab","Tabs","current","key","tabs","currentUIFormat","flatMap","isAvailable","top","indexOf","currentSubtab","_currentSubtab","subtabs","sub","konamiCode","konamiStep","testKonami","character","Currency","antimatter","bumpTo","Speedrun","startTimer","originalHandleKey","prototype","handleKey","modifiers","e","apply"],"mappings":"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","sourcesContent":["import Mousetrap from \"mousetrap\";\r\n\r\nimport { ElectronRuntime } from \"@/steam\";\r\n\r\nimport { GameKeyboard } from \"./keyboard\";\r\n\r\n// Add your hotkeys and combinations here\r\n// GameKeyboard.bind for single press combinations\r\n// GameKeyboard.bindRepeatable for repeatable combinations\r\n// Hotkeys obey player.options.hotkeys option, and should be everying relating to the functionality of the game itself\r\n// GameKeyboard.bindHotkey for single press hotkeys\r\n// GameKeyboard.bindRepeatableHotkey for repeatable hotkeys\r\n// GameKeyboard class uses Mousetrap under the hood, so for more details visit\r\n// https://craig.is/killing/mice\r\n\r\n// Note: mod is a function key helper by Mousetap for both ctrl and command,\r\n// and should be used to provide support for both Windows and Max\r\n\r\n// Note: DON'T add repeatables with modifier keys other than shift\r\n// because Mousetrap is crap, and we needed to plug it up to work\r\n// properly with shift, so you will need to plug it up additionally\r\n// for the other modifier keys (#3093).\r\n\r\n// Free keys:\r\n// i, j, k, l, n, o, p, q, v, w, x\r\n\r\n\r\nexport const shortcuts = [\r\n  {\r\n    name: \"Toggle Autobuyers\",\r\n    keys: [\"a\"],\r\n    type: \"bindHotkey\",\r\n    function: () => keyboardToggleAutobuyers(),\r\n    visible: true\r\n  }, {\r\n    name: \"Buy one Tickspeed\",\r\n    keys: [\"shift\", \"t\"],\r\n    type: \"bindRepeatableHotkey\",\r\n    function: () => buyTickSpeed(),\r\n    visible: true\r\n  }, {\r\n    name: \"Buy max Tickspeed\",\r\n    keys: [\"t\"],\r\n    type: \"bindRepeatableHotkey\",\r\n    function: () => buyMaxTickSpeed(),\r\n    visible: true\r\n  }, {\r\n    name: \"Max all\",\r\n    keys: [\"m\"],\r\n    type: \"bindRepeatableHotkey\",\r\n    function: () => maxAll(),\r\n    visible: true\r\n  }, {\r\n    name: \"Dimensional Sacrifice\",\r\n    keys: [\"s\"],\r\n    type: \"bindRepeatableHotkey\",\r\n    function: () => sacrificeBtnClick(),\r\n    visible: true\r\n  }, {\r\n    name: \"Dimension Boost\",\r\n    keys: [\"d\"],\r\n    type: \"bindRepeatableHotkey\",\r\n    function: () => manualRequestDimensionBoost(true),\r\n    visible: true\r\n  }, {\r\n    name: \"Single Dimension Boost\",\r\n    keys: [\"shift\", \"d\"],\r\n    type: \"bindRepeatableHotkey\",\r\n    function: () => manualRequestDimensionBoost(false),\r\n    visible: false\r\n  }, {\r\n    name: \"Antimatter Galaxy\",\r\n    keys: [\"g\"],\r\n    type: \"bindRepeatableHotkey\",\r\n    function: () => manualRequestGalaxyReset(true),\r\n    visible: true\r\n  }, {\r\n    name: \"Single Antimatter Galaxy\",\r\n    keys: [\"shift\", \"g\"],\r\n    type: \"bindRepeatableHotkey\",\r\n    function: () => manualRequestGalaxyReset(false),\r\n    visible: false\r\n  }, {\r\n    name: \"Big Crunch\",\r\n    keys: [\"c\"],\r\n    type: \"bindRepeatableHotkey\",\r\n    function: () => manualBigCrunchResetRequest(),\r\n    visible: true\r\n  }, {\r\n    name: \"Replicanti Galaxy\",\r\n    keys: [\"r\"],\r\n    type: \"bindHotkey\",\r\n    function: () => {\r\n      replicantiGalaxyRequest();\r\n      setHoldingR(true);\r\n    },\r\n    visible: () => Replicanti.areUnlocked || PlayerProgress.eternityUnlocked()\r\n  }, {\r\n    name: \"Eternity\",\r\n    keys: [\"e\"],\r\n    type: \"bindRepeatableHotkey\",\r\n    function: () => eternityResetRequest(),\r\n    visible: () => PlayerProgress.eternityUnlocked() || Player.canEternity\r\n  }, {\r\n    name: \"Toggle Time Study respec\",\r\n    keys: [\"shift\", \"e\"],\r\n    type: \"bindHotkey\",\r\n    function: () => {\r\n      player.respec = !player.respec;\r\n      GameUI.notify.info(`Time Study respec is now ${player.respec ? \"active\" : \"inactive\"}`);\r\n    },\r\n    visible: () => PlayerProgress.eternityUnlocked()\r\n  }, {\r\n    name: \"Enter/Exit Dilation\",\r\n    keys: [\"l\"],\r\n    type: \"bindRepeatableHotkey\",\r\n    function: () => startDilatedEternityRequest(),\r\n    visible: () => PlayerProgress.realityUnlocked() || PlayerProgress.dilationUnlocked()\r\n  }, {\r\n    name: \"Reality\",\r\n    keys: [\"y\"],\r\n    type: \"bindRepeatableHotkey\",\r\n    function: () => requestManualReality(),\r\n    visible: () => PlayerProgress.realityUnlocked() || isRealityAvailable()\r\n  }, {\r\n    name: \"Toggle Glyph unequip\",\r\n    keys: [\"shift\", \"y\"],\r\n    type: \"bindHotkey\",\r\n    function: () => {\r\n      player.reality.respec = !player.reality.respec;\r\n      GameUI.notify.info(`Glyph respec is now ${player.reality.respec ? \"active\" : \"inactive\"}`);\r\n    },\r\n    visible: () => PlayerProgress.realityUnlocked()\r\n  }, {\r\n    name: \"Start/Pause Automator\",\r\n    keys: [\"u\"],\r\n    type: \"bindHotkey\",\r\n    function: () => keyboardAutomatorToggle(),\r\n    visible: () => Player.automatorUnlocked\r\n  }, {\r\n    name: \"Restart Automator\",\r\n    keys: [\"shift\", \"u\"],\r\n    type: \"bindHotkey\",\r\n    function: () => keyboardAutomatorRestart(),\r\n    visible: () => Player.automatorUnlocked\r\n  }, {\r\n    name: \"Undo Edit (Automator)\",\r\n    keys: [\"mod\", \"z\"],\r\n    type: \"bind\",\r\n    function: () => AutomatorData.undoScriptEdit(),\r\n    visible: () => Player.automatorUnlocked\r\n  }, {\r\n    name: \"Redo Edit (Automator)\",\r\n    keys: [\"mod\", \"y\"],\r\n    type: \"bind\",\r\n    function: () => AutomatorData.redoScriptEdit(),\r\n    visible: () => Player.automatorUnlocked\r\n  }, {\r\n    name: \"Toggle Black Hole\",\r\n    keys: [\"b\"],\r\n    type: \"bindHotkey\",\r\n    function: () => BlackHoles.togglePause(),\r\n    visible: () => PlayerProgress.realityUnlocked()\r\n  }, {\r\n    name: \"Toggle Continuum\",\r\n    keys: [\"alt\", \"a\"],\r\n    type: \"bindHotkey\",\r\n    function: () => keyboardToggleContinuum(),\r\n    visible: () => Laitela.continuumUnlocked\r\n  }, {\r\n    name: \"Armageddon\",\r\n    keys: [\"z\"],\r\n    type: \"bindRepeatableHotkey\",\r\n    function: () => armageddonRequest(),\r\n    visible: () => Pelle.isDoomed\r\n  }, {\r\n    name: \"Toggle Glyph unequip (Pelle)\",\r\n    keys: [\"shift\", \"z\"],\r\n    type: \"bindHotkey\",\r\n    function: () => {\r\n      if (!Pelle.isDoomed) return;\r\n      player.reality.respec = !player.reality.respec;\r\n      GameUI.notify.info(`Glyph respec is now ${player.reality.respec ? \"active\" : \"inactive\"}`);\r\n    },\r\n    visible: () => Pelle.isDoomed\r\n  }, {\r\n    name: \"Save game\",\r\n    keys: [\"mod\", \"s\"],\r\n    type: \"bind\",\r\n    function: () => {\r\n      GameStorage.save(false, true);\r\n      return false;\r\n    },\r\n    visible: true\r\n  }, {\r\n    name: \"Export game\",\r\n    keys: [\"mod\", \"e\"],\r\n    type: \"bind\",\r\n    function: () => {\r\n      GameStorage.export();\r\n      return false;\r\n    },\r\n    visible: true\r\n  }, {\r\n    name: \"Open Hotkey List Modal\",\r\n    keys: [\"?\"],\r\n    type: \"bind\",\r\n    function: () => {\r\n      keyboardPressQuestionMark();\r\n      return false;\r\n    },\r\n    visible: true\r\n  }, {\r\n    name: \"Open How To Play Modal\",\r\n    keys: [\"h\"],\r\n    type: \"bind\",\r\n    function: () => {\r\n      keyboardH2PToggle();\r\n      return false;\r\n    },\r\n    visible: true\r\n  }, {\r\n    name: \"Modify visible tabs\",\r\n    keys: [\"tab\"],\r\n    type: \"bind\",\r\n    function: () => {\r\n      keyboardVisibleTabsToggle();\r\n      return false;\r\n    },\r\n    visible: true\r\n  }, {\r\n    name: \"Confirm Modal\",\r\n    keys: [\"enter\"],\r\n    type: \"bind\",\r\n    function: () => {\r\n      EventHub.dispatch(GAME_EVENT.ENTER_PRESSED);\r\n      return true;\r\n    },\r\n    visible: true\r\n  }, {\r\n    name: \"Close Modal or open Options\",\r\n    keys: [\"esc\"],\r\n    type: \"bind\",\r\n    function: () => {\r\n      keyboardPressEscape();\r\n      return false;\r\n    },\r\n    visible: true\r\n  }, {\r\n    name: \"Paying respects\",\r\n    keys: [\"f\"],\r\n    type: \"bindRepeatable\",\r\n    function: () => {\r\n      GameUI.notify.info(\"Paying respects\");\r\n      SecretAchievement(13).unlock();\r\n    },\r\n    visible: false\r\n  }, {\r\n    name: \"Change Tab\",\r\n    keys: [\"up\"],\r\n    type: \"bind\",\r\n    function: () => {\r\n      EventHub.dispatch(GAME_EVENT.ARROW_KEY_PRESSED, \"up\");\r\n      return false;\r\n    },\r\n    visible: false\r\n  }, {\r\n    name: \"Change Tab\",\r\n    keys: [\"down\"],\r\n    type: \"bind\",\r\n    function: () => {\r\n      EventHub.dispatch(GAME_EVENT.ARROW_KEY_PRESSED, \"down\");\r\n      return false;\r\n    },\r\n    visible: false\r\n  }, {\r\n    name: \"Change Subtab\",\r\n    keys: [\"left\"],\r\n    type: \"bind\",\r\n    function: () => {\r\n      EventHub.dispatch(GAME_EVENT.ARROW_KEY_PRESSED, \"left\");\r\n      return false;\r\n    },\r\n    visible: false\r\n  }, {\r\n    name: \"Change Subtab\",\r\n    keys: [\"right\"],\r\n    type: \"bind\",\r\n    function: () => {\r\n      EventHub.dispatch(GAME_EVENT.ARROW_KEY_PRESSED, \"right\");\r\n      return false;\r\n    },\r\n    visible: false\r\n  }, {\r\n    name: \"Doesn't exist\",\r\n    keys: [\"9\"],\r\n    type: \"bind\",\r\n    function: () => SecretAchievement(41).unlock(),\r\n    visible: false\r\n  },\r\n  {\r\n    name: \"Adjust Autobuyers\",\r\n    keys: [\"mod\", \"alt\", \"a\"],\r\n    type: \"bind\",\r\n    function: () => keyboardEditAutobuyers(),\r\n    visible: () => Autobuyers.hasAutobuyersForEditModal\r\n  },\r\n  {\r\n    name: \"Fullscreen\",\r\n    keys: [\"F10\"],\r\n    type: \"bind\",\r\n    function: () => {},\r\n    visible: () => false\r\n  },\r\n  {\r\n    name: \"Zoom In\",\r\n    keys: [\"ctrl\", \"=\"],\r\n    type: \"bind\",\r\n    function: () => ElectronRuntime.increaseZoom(),\r\n    visible: () => false\r\n  },\r\n  {\r\n    name: \"Zoom In\",\r\n    keys: [\"ctrl\", \"+\"],\r\n    type: \"bind\",\r\n    function: () => ElectronRuntime.increaseZoom(),\r\n    visible: () => false\r\n  },\r\n  {\r\n    name: \"Zoom Out\",\r\n    keys: [\"ctrl\", \"-\"],\r\n    type: \"bind\",\r\n    function: () => ElectronRuntime.decreaseZoom(),\r\n    visible: () => false\r\n  },\r\n  {\r\n    name: \"Reset Zoom\",\r\n    keys: [\"ctrl\", \"0\"],\r\n    type: \"bind\",\r\n    function: () => ElectronRuntime.resetZoom(),\r\n    visible: () => false\r\n  },\r\n  {\r\n    name: \"Pause/Resume Game\",\r\n    keys: [\"p\"],\r\n    type: \"bind\",\r\n    function: () => {\r\n      player.options.gamePaused = !player.options.gamePaused;\r\n      GameUI.notify.info(player.options.gamePaused ? \"Game paused\" : \"Game resumed\", 2000);\r\n    },\r\n    visible: () => true\r\n  },\r\n];\r\n\r\nfor (const hotkey of shortcuts) {\r\n  GameKeyboard[hotkey.type](hotkey.keys.join(\"+\"), hotkey.function);\r\n}\r\n\r\n// We need to know whether the player is holding R or not for the replicanti galaxy\r\n// The keydown version is above, with the replicantiGalaxyRequest, as otherwise it would be overridden\r\nGameKeyboard.bind(\"r\", () => setHoldingR(false), \"keyup\");\r\n\r\n// Same thing with Shift; we need to double-up on ctrl-shift as well since they're technically different keybinds\r\nGameKeyboard.bind(\"shift\", () => setShiftKey(true), \"keydown\");\r\nGameKeyboard.bind(\"shift\", () => setShiftKey(false), \"keyup\");\r\nGameKeyboard.bind(\"ctrl+shift\", () => setShiftKey(true), \"keydown\");\r\nGameKeyboard.bind(\"ctrl+shift\", () => setShiftKey(false), \"keyup\");\r\nGameKeyboard.bind(\"alt+shift\", () => setShiftKey(true), \"keydown\");\r\nGameKeyboard.bind(\"alt+shift\", () => setShiftKey(false), \"keyup\");\r\n\r\n\r\nGameKeyboard.bindHotkey(\"alt+t\", () => toggleAutobuyer(Autobuyer.tickspeed));\r\nGameKeyboard.bindHotkey(\"shift+alt+t\", () => toggleBuySingles(Autobuyer.tickspeed));\r\nGameKeyboard.bindHotkey(\"alt+s\", () => toggleAutobuyer(Autobuyer.sacrifice));\r\nGameKeyboard.bindHotkey(\"alt+d\", () => toggleAutobuyer(Autobuyer.dimboost));\r\nGameKeyboard.bindHotkey(\"alt+g\", () => toggleAutobuyer(Autobuyer.galaxy));\r\nGameKeyboard.bindHotkey(\"alt+r\", () => toggleAutobuyer(Autobuyer.replicantiGalaxy));\r\n\r\nGameKeyboard.bindHotkey(\"alt+c\", () => toggleAutobuyer(Autobuyer.bigCrunch));\r\nGameKeyboard.bindHotkey(\"alt+e\", () => toggleAutobuyer(Autobuyer.eternity));\r\nGameKeyboard.bindHotkey(\"alt+y\", () => toggleAutobuyer(Autobuyer.reality));\r\n\r\n(function() {\r\n  function bindDimensionHotkeys(tier) {\r\n    GameKeyboard.bindRepeatableHotkey(`${tier}`, () => buyManyDimension(tier));\r\n    GameKeyboard.bindRepeatableHotkey(`num${tier}`, () => buyManyDimension(tier));\r\n    GameKeyboard.bindRepeatableHotkey(`shift+${tier}`, () => buyOneDimension(tier));\r\n    GameKeyboard.bindRepeatableHotkey(`shift+num${tier}`, () => buyOneDimension(tier));\r\n    GameKeyboard.bindHotkey(`alt+${tier}`, () => toggleAutobuyer(Autobuyer.antimatterDimension(tier)));\r\n    GameKeyboard.bindHotkey(`alt+num${tier}`, () => toggleAutobuyer(Autobuyer.antimatterDimension(tier)));\r\n    GameKeyboard.bindHotkey(`shift+alt+${tier}`, () => toggleBuySingles(Autobuyer.antimatterDimension(tier)));\r\n    GameKeyboard.bindHotkey(`shift+alt+num${tier}`, () => toggleBuySingles(Autobuyer.antimatterDimension(tier)));\r\n  }\r\n  for (let i = 1; i < 9; i++) bindDimensionHotkeys(i);\r\n}());\r\n\r\n// A few special GameKeyboards\r\nGameKeyboard.bind(\r\n  [\"mod+shift+c\", \"mod+shift+i\", \"mod+shift+j\", \"f12\"],\r\n  () => SecretAchievement(23).unlock()\r\n);\r\n\r\n// Toggle autobuyers\r\nfunction toggleAutobuyer(buyer) {\r\n  // Autobuyer.tickspeed.isUnlocked is false without NC9, but we still want the simpler one to be togglable via hotkey\r\n  const isSimpleTickspeed = buyer === Autobuyer.tickspeed && buyer.isBought;\r\n  if (buyer.disabledByContinuum) {\r\n    GameUI.notify.info(\"Continuum is enabled, you cannot alter this autobuyer\");\r\n  } else if (buyer.isUnlocked || isSimpleTickspeed) {\r\n    buyer.toggle();\r\n    GameUI.notify.info(`${buyer.name} Autobuyer toggled ${(buyer.isActive) ? \"on\" : \"off\"}`);\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction toggleBuySingles(buyer) {\r\n  if (buyer.disabledByContinuum) {\r\n    GameUI.notify.info(\"Continuum is enabled, you cannot alter this autobuyer\");\r\n  } else if (buyer.isUnlocked && buyer.toggleMode !== null) {\r\n    buyer.toggleMode();\r\n    const bulkName = (buyer.name === \"Tickspeed\" || buyer.hasUnlimitedBulk) ? \"max\" : \"10\";\r\n    GameUI.notify.info(`${buyer.name} Autobuyer set to buy ${(buyer.mode === 1) ? \"singles\" : bulkName}`);\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction keyboardToggleAutobuyers() {\r\n  if (Tab.automation.isUnlocked) {\r\n    Autobuyers.toggle();\r\n    GameUI.notify.info(`Autobuyers ${player.auto.autobuyersOn ? \"resumed\" : \"paused\"}`);\r\n  }\r\n}\r\n\r\nfunction keyboardToggleContinuum() {\r\n  if (!Laitela.continuumUnlocked) return;\r\n  if (ImaginaryUpgrade(21).isLockingMechanics && player.auto.disableContinuum) {\r\n    ImaginaryUpgrade(21).tryShowWarningModal();\r\n    return;\r\n  }\r\n  // This is a toggle despite the lack of !, because player.auto.disableContinuum\r\n  // is negated compared to whether continuum is on.\r\n  Laitela.setContinuum(player.auto.disableContinuum);\r\n  GameUI.notify.info(`${(player.auto.disableContinuum) ? \"Disabled\" : \"Enabled\"} Continuum`);\r\n}\r\n\r\nfunction keyboardAutomatorToggle() {\r\n  // Automator must be unlocked\r\n  if (Player.automatorUnlocked) {\r\n    if (AutomatorBackend.isRunning) {\r\n      AutomatorBackend.pause();\r\n    } else if (AutomatorBackend.isOn) {\r\n      AutomatorBackend.mode = AUTOMATOR_MODE.RUN;\r\n    } else {\r\n      // Only attempt to start the visible script instead of the existing script if it isn't already running\r\n      const visibleIndex = player.reality.automator.state.editorScript;\r\n      AutomatorBackend.restart();\r\n      AutomatorBackend.start(visibleIndex);\r\n      if (AutomatorData.currentErrors().length === 0) {\r\n        GameUI.notify.automator(`Starting script \"${AutomatorBackend.scriptName}\"`);\r\n      } else {\r\n        GameUI.notify.error(`Cannot start script \"${AutomatorBackend.scriptName}\" (has errors)`);\r\n      }\r\n      return;\r\n    }\r\n    const action = AutomatorBackend.isRunning ? \"Resuming\" : \"Pausing\";\r\n    const linenum = AutomatorBackend.currentLineNumber;\r\n    GameUI.notify.automator(`${action} script \"${AutomatorBackend.scriptName}\" at line ${linenum}`);\r\n  }\r\n}\r\n\r\nfunction keyboardAutomatorRestart() {\r\n  if (Player.automatorUnlocked) {\r\n    const action = AutomatorBackend.isOn ? \"Restarting\" : \"Starting\";\r\n    GameUI.notify.automator(`${action} script \"${AutomatorBackend.scriptName}\"`);\r\n\r\n    AutomatorBackend.restart();\r\n    AutomatorBackend.start();\r\n  }\r\n}\r\n\r\nfunction armageddonRequest() {\r\n  if (!Pelle.canArmageddon) return;\r\n  Pelle.armageddon(true);\r\n}\r\n\r\nfunction keyboardPressEscape() {\r\n  if (Quote.isOpen || Quote.isHistoryOpen) Quote.clearAll();\r\n  else if (Modal.isOpen) Modal.hideAll();\r\n  else Tab.options.show(true);\r\n}\r\n\r\nfunction keyboardPressQuestionMark() {\r\n  if (Modal.hotkeys.isOpen) {\r\n    EventHub.dispatch(GAME_EVENT.CLOSE_MODAL);\r\n    return;\r\n  }\r\n  if (Modal.isOpen) Modal.hideAll();\r\n  Modal.hotkeys.show();\r\n}\r\n\r\nfunction keyboardH2PToggle() {\r\n  if (Modal.h2p.isOpen) {\r\n    EventHub.dispatch(GAME_EVENT.CLOSE_MODAL);\r\n    return;\r\n  }\r\n  if (Modal.isOpen) Modal.hideAll();\r\n  Modal.h2p.show();\r\n}\r\n\r\nfunction keyboardEditAutobuyers() {\r\n  if (Modal.autobuyerEditModal.isOpen) {\r\n    EventHub.dispatch(GAME_EVENT.CLOSE_MODAL);\r\n    return;\r\n  }\r\n  if (!Autobuyers.hasAutobuyersForEditModal) return;\r\n  if (Modal.isOpen) Modal.hideAll();\r\n  Modal.autobuyerEditModal.show();\r\n}\r\n\r\nfunction keyboardVisibleTabsToggle() {\r\n  if (Modal.hiddenTabs.isOpen) {\r\n    EventHub.dispatch(GAME_EVENT.CLOSE_MODAL);\r\n    return;\r\n  }\r\n  if (Modal.isOpen) Modal.hideAll();\r\n  Modal.hiddenTabs.show();\r\n}\r\n\r\nEventHub.logic.on(GAME_EVENT.ARROW_KEY_PRESSED, direction => {\r\n  if (Quote.isOpen || Quote.isHistoryOpen) return;\r\n  // Current tabs. Defined here as both tab and subtab movements require knowing your current tab.\r\n  const currentTab = Tabs.current.key;\r\n  if (direction[0] === \"up\" || direction[0] === \"down\") {\r\n    // Make an array of the keys of all the unlocked and visible tabs\r\n    const tabs = Tabs.currentUIFormat.flatMap(i => (i.isAvailable ? [i.key] : []));\r\n    // Find the index of the tab we are on\r\n    let top = tabs.indexOf(currentTab);\r\n    // Move in the desired direction\r\n    if (direction[0] === \"up\") top--;\r\n    else top++;\r\n    // Loop around if needed\r\n    top = (top + tabs.length) % tabs.length;\r\n    // And now we go there.\r\n    Tab[tabs[top]].show(true);\r\n  } else if (direction[0] === \"left\" || direction[0] === \"right\") {\r\n    // Current subtabs\r\n    const currentSubtab = Tabs.current._currentSubtab.key;\r\n    // Make an array of the keys of all the unlocked and visible subtabs\r\n    const subtabs = Tabs.current.subtabs.flatMap(i => (i.isAvailable ? [i.key] : []));\r\n    // Find the index of the subtab we are on\r\n    let sub = subtabs.indexOf(currentSubtab);\r\n    // Move in the desired direction\r\n    if (direction[0] === \"left\") sub--;\r\n    else sub++;\r\n    // Loop around if needed\r\n    sub = (sub + subtabs.length) % subtabs.length;\r\n    // And now we go there.\r\n    Tab[currentTab][subtabs[sub]].show(true);\r\n  }\r\n});\r\n\r\nconst konamiCode = [\"up\", \"up\", \"down\", \"down\", \"left\", \"right\", \"left\", \"right\", \"b\", \"a\", \"enter\"];\r\nlet konamiStep = 0;\r\n\r\nfunction testKonami(character) {\r\n  if (SecretAchievement(17).isUnlocked) return;\r\n  // This conditional is structured weirdly in order to make sure more than 2 consecutive \"up\" inputs doesn't\r\n  // reset the sequence state unnecessarily, and that interrupting the sequence later on with the starting\r\n  // input will correctly set the state to one step in\r\n  if (konamiCode[konamiStep] === character) konamiStep++;\r\n  else if (konamiStep === 2 && character === \"up\") konamiStep = 2;\r\n  else if (character === konamiCode[0]) konamiStep = 1;\r\n  else konamiStep = 0;\r\n  if (konamiCode.length <= konamiStep) {\r\n    SecretAchievement(17).unlock();\r\n    Currency.antimatter.bumpTo(30);\r\n    Speedrun.startTimer();\r\n  }\r\n}\r\n\r\n// Remember that Mousetrap handles the backend for GameKeyboard\r\n// Without this, Mousetrap become confused when the \"up\" key is pressed, as it is the starting key of a sequence\r\n// and an individual key. To allow both the up keybind and the konami code to work, we will change how Mousetrap handles\r\n// all keys so the konami code functions entirely separately from the normal handling.\r\nconst originalHandleKey = Mousetrap.prototype.handleKey;\r\nMousetrap.prototype.handleKey = function(character, modifiers, e) {\r\n  if (e.type === \"keydown\") testKonami(character);\r\n  return originalHandleKey.apply(this, [character, modifiers, e]);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}