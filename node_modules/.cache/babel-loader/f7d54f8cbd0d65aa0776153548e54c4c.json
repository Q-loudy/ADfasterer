{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport DilationButton from \"./DilationButton\";\nimport DilationUpgradeButton from \"./DilationUpgradeButton\";\nexport default {\n  name: \"TimeDilationTab\",\n  components: {\n    DilationButton,\n    DilationUpgradeButton\n  },\n\n  data() {\n    return {\n      tachyons: new Decimal(),\n      dilatedTime: new Decimal(),\n      dilatedTimeIncome: new Decimal(),\n      galaxyThreshold: new Decimal(),\n      baseGalaxies: 0,\n      totalGalaxies: 0,\n      tachyonGalaxyGain: 1,\n      hasPelleDilationUpgrades: false,\n      galaxyTimeEstimate: \"\",\n      maxDT: new Decimal(),\n      toMaxTooltip: \"\",\n      isHovering: false\n    };\n  },\n\n  computed: {\n    rebuyables() {\n      return [DilationUpgrade.dtGain, DilationUpgrade.galaxyThreshold, DilationUpgrade.tachyonGain];\n    },\n\n    upgrades() {\n      return [[DilationUpgrade.doubleGalaxies, DilationUpgrade.tdMultReplicanti, DilationUpgrade.ndMultDT], [DilationUpgrade.ipMultDT, DilationUpgrade.timeStudySplit, DilationUpgrade.dilationPenalty]];\n    },\n\n    // This might be negative due to rift drain, so we need to add \"+\" iff the value is positive. The actual\n    // addition of a negative sign (or not) is assumed to be handled in a notation-specific way\n    dilatedTimeGainText() {\n      const sign = this.dilatedTimeIncome.gte(0) ? \"+\" : \"\";\n      return `${sign}${format(this.dilatedTimeIncome, 2, 1)}`;\n    },\n\n    pelleRebuyables() {\n      return [DilationUpgrade.dtGainPelle, DilationUpgrade.galaxyMultiplier, DilationUpgrade.tickspeedPower];\n    },\n\n    pelleUpgrades() {\n      return [DilationUpgrade.galaxyThresholdPelle, DilationUpgrade.flatDilationMult];\n    },\n\n    ttGenerator() {\n      return DilationUpgrade.ttGenerator;\n    },\n\n    baseGalaxyText() {\n      return `${formatInt(this.baseGalaxies)} Base`;\n    },\n\n    hasMaxText: () => PlayerProgress.realityUnlocked() && !Pelle.isDoomed,\n\n    allRebuyables() {\n      const upgradeRows = [];\n      upgradeRows.push(this.rebuyables);\n      if (this.hasPelleDilationUpgrades) upgradeRows.push(this.pelleRebuyables);\n      return upgradeRows;\n    },\n\n    allSingleUpgrades() {\n      const upgradeRows = [];\n      upgradeRows.push(...this.upgrades);\n      if (this.hasPelleDilationUpgrades) upgradeRows.push(this.pelleUpgrades);\n      upgradeRows.push([this.ttGenerator]);\n      return upgradeRows;\n    }\n\n  },\n  methods: {\n    update() {\n      this.tachyons.copyFrom(Currency.tachyonParticles);\n      this.dilatedTime.copyFrom(Currency.dilatedTime);\n      const rawDTGain = getDilationGainPerSecond().times(getGameSpeedupForDisplay());\n      this.galaxyTimeEstimate = getDilationTimeEstimate(this.galaxyThreshold);\n\n      if (PelleRifts.paradox.isActive) {\n        // The number can be small and either positive or negative with the rift active, which means that extra care\n        // needs to be taken to get the calculation as close to correct as possible. This relies on some details\n        // related to tick microstructure to make things accurate, and it seems to be to roughly 1 part in 5e6\n        const tickProp = player.options.updateRate / 1000;\n        const drainFactorPerTick = 1 - (1 - Pelle.riftDrainPercent) ** tickProp;\n        const drainPerSecond = this.dilatedTime.add(rawDTGain.times(tickProp)).times(drainFactorPerTick / tickProp);\n        this.dilatedTimeIncome = rawDTGain.minus(drainPerSecond);\n      } else {\n        this.dilatedTimeIncome = rawDTGain;\n      }\n\n      this.galaxyThreshold.copyFrom(player.dilation.nextThreshold);\n      this.baseGalaxies = player.dilation.baseTachyonGalaxies;\n      this.totalGalaxies = player.dilation.totalTachyonGalaxies;\n      this.hasPelleDilationUpgrades = PelleRifts.paradox.milestones[0].canBeApplied;\n\n      if (this.baseGalaxies < 500 && DilationUpgrade.doubleGalaxies.isBought) {\n        this.tachyonGalaxyGain = DilationUpgrade.doubleGalaxies.effectValue;\n      } else {\n        this.tachyonGalaxyGain = 1;\n      }\n\n      this.tachyonGalaxyGain *= DilationUpgrade.galaxyMultiplier.effectValue;\n      this.maxDT.copyFrom(player.records.thisReality.maxDT);\n      const estimateText = getDilationTimeEstimate(this.maxDT);\n      if (this.dilatedTimeIncome.lte(0)) this.toMaxTooltip = \"No DT gain\";else this.toMaxTooltip = estimateText.startsWith(\"<\") ? \"Currently Increasing\" : estimateText;\n    }\n\n  }\n};","map":{"version":3,"sources":["TimeDilationTab.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport DilationButton from \"./DilationButton\";\r\nimport DilationUpgradeButton from \"./DilationUpgradeButton\";\r\n\r\nexport default {\r\n  name: \"TimeDilationTab\",\r\n  components: {\r\n    DilationButton,\r\n    DilationUpgradeButton\r\n  },\r\n  data() {\r\n    return {\r\n      tachyons: new Decimal(),\r\n      dilatedTime: new Decimal(),\r\n      dilatedTimeIncome: new Decimal(),\r\n      galaxyThreshold: new Decimal(),\r\n      baseGalaxies: 0,\r\n      totalGalaxies: 0,\r\n      tachyonGalaxyGain: 1,\r\n      hasPelleDilationUpgrades: false,\r\n      galaxyTimeEstimate: \"\",\r\n      maxDT: new Decimal(),\r\n      toMaxTooltip: \"\",\r\n      isHovering: false,\r\n    };\r\n  },\r\n  computed: {\r\n    rebuyables() {\r\n      return [\r\n        DilationUpgrade.dtGain,\r\n        DilationUpgrade.galaxyThreshold,\r\n        DilationUpgrade.tachyonGain\r\n      ];\r\n    },\r\n    upgrades() {\r\n      return [\r\n        [\r\n          DilationUpgrade.doubleGalaxies,\r\n          DilationUpgrade.tdMultReplicanti,\r\n          DilationUpgrade.ndMultDT\r\n        ],\r\n        [\r\n          DilationUpgrade.ipMultDT,\r\n          DilationUpgrade.timeStudySplit,\r\n          DilationUpgrade.dilationPenalty\r\n        ],\r\n      ];\r\n    },\r\n    // This might be negative due to rift drain, so we need to add \"+\" iff the value is positive. The actual\r\n    // addition of a negative sign (or not) is assumed to be handled in a notation-specific way\r\n    dilatedTimeGainText() {\r\n      const sign = this.dilatedTimeIncome.gte(0) ? \"+\" : \"\";\r\n      return `${sign}${format(this.dilatedTimeIncome, 2, 1)}`;\r\n    },\r\n    pelleRebuyables() {\r\n      return [\r\n        DilationUpgrade.dtGainPelle,\r\n        DilationUpgrade.galaxyMultiplier,\r\n        DilationUpgrade.tickspeedPower\r\n      ];\r\n    },\r\n    pelleUpgrades() {\r\n      return [\r\n        DilationUpgrade.galaxyThresholdPelle,\r\n        DilationUpgrade.flatDilationMult\r\n      ];\r\n    },\r\n    ttGenerator() {\r\n      return DilationUpgrade.ttGenerator;\r\n    },\r\n    baseGalaxyText() {\r\n      return `${formatInt(this.baseGalaxies)} Base`;\r\n    },\r\n    hasMaxText: () => PlayerProgress.realityUnlocked() && !Pelle.isDoomed,\r\n    allRebuyables() {\r\n      const upgradeRows = [];\r\n      upgradeRows.push(this.rebuyables);\r\n      if (this.hasPelleDilationUpgrades) upgradeRows.push(this.pelleRebuyables);\r\n      return upgradeRows;\r\n    },\r\n    allSingleUpgrades() {\r\n      const upgradeRows = [];\r\n      upgradeRows.push(...this.upgrades);\r\n      if (this.hasPelleDilationUpgrades) upgradeRows.push(this.pelleUpgrades);\r\n      upgradeRows.push([this.ttGenerator]);\r\n      return upgradeRows;\r\n    },\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.tachyons.copyFrom(Currency.tachyonParticles);\r\n      this.dilatedTime.copyFrom(Currency.dilatedTime);\r\n      const rawDTGain = getDilationGainPerSecond().times(getGameSpeedupForDisplay());\r\n      this.galaxyTimeEstimate = getDilationTimeEstimate(this.galaxyThreshold);\r\n      if (PelleRifts.paradox.isActive) {\r\n        // The number can be small and either positive or negative with the rift active, which means that extra care\r\n        // needs to be taken to get the calculation as close to correct as possible. This relies on some details\r\n        // related to tick microstructure to make things accurate, and it seems to be to roughly 1 part in 5e6\r\n        const tickProp = player.options.updateRate / 1000;\r\n        const drainFactorPerTick = 1 - (1 - Pelle.riftDrainPercent) ** tickProp;\r\n        const drainPerSecond = this.dilatedTime.add(rawDTGain.times(tickProp)).times(drainFactorPerTick / tickProp);\r\n        this.dilatedTimeIncome = rawDTGain.minus(drainPerSecond);\r\n      } else {\r\n        this.dilatedTimeIncome = rawDTGain;\r\n      }\r\n      this.galaxyThreshold.copyFrom(player.dilation.nextThreshold);\r\n      this.baseGalaxies = player.dilation.baseTachyonGalaxies;\r\n      this.totalGalaxies = player.dilation.totalTachyonGalaxies;\r\n      this.hasPelleDilationUpgrades = PelleRifts.paradox.milestones[0].canBeApplied;\r\n      if (this.baseGalaxies < 500 && DilationUpgrade.doubleGalaxies.isBought) {\r\n        this.tachyonGalaxyGain = DilationUpgrade.doubleGalaxies.effectValue;\r\n      } else {\r\n        this.tachyonGalaxyGain = 1;\r\n      }\r\n      this.tachyonGalaxyGain *= DilationUpgrade.galaxyMultiplier.effectValue;\r\n      this.maxDT.copyFrom(player.records.thisReality.maxDT);\r\n\r\n      const estimateText = getDilationTimeEstimate(this.maxDT);\r\n      if (this.dilatedTimeIncome.lte(0)) this.toMaxTooltip = \"No DT gain\";\r\n      else this.toMaxTooltip = estimateText.startsWith(\"<\") ? \"Currently Increasing\" : estimateText;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-dilation-tab\">\r\n    <span>\r\n      You have\r\n      <span class=\"c-dilation-tab__tachyons\">{{ format(tachyons, 2, 1) }}</span>\r\n      {{ pluralize(\"Tachyon Particle\", tachyons) }}.\r\n    </span>\r\n    <div\r\n      @mouseover=\"isHovering = true\"\r\n      @mouseleave=\"isHovering = false\"\r\n    >\r\n      <DilationButton />\r\n    </div>\r\n    <span>\r\n      You have\r\n      <span class=\"c-dilation-tab__dilated-time\">{{ format(dilatedTime, 2, 1) }}</span>\r\n      Dilated Time.\r\n      <span class=\"c-dilation-tab__dilated-time-income\">{{ dilatedTimeGainText }}/s</span>\r\n    </span>\r\n    <span>\r\n      Next\r\n      <span v-if=\"tachyonGalaxyGain > 1\">{{ formatInt(tachyonGalaxyGain) }}</span>\r\n      {{ pluralize(\"Tachyon Galaxy\", tachyonGalaxyGain) }} at\r\n      <span\r\n        class=\"c-dilation-tab__galaxy-threshold\"\r\n        :ach-tooltip=\"galaxyTimeEstimate\"\r\n      >{{ format(galaxyThreshold, 2, 1) }}</span>\r\n      Dilated Time, gained total of\r\n      <span\r\n        class=\"c-dilation-tab__galaxies\"\r\n        :ach-tooltip=\"baseGalaxyText\"\r\n      >{{ formatInt(totalGalaxies) }}</span>\r\n      {{ pluralize(\"Tachyon Galaxy\", totalGalaxies) }}\r\n    </span>\r\n    <span v-if=\"hasMaxText\">\r\n      Your maximum Dilated Time reached this Reality is\r\n      <span\r\n        v-tooltip=\"toMaxTooltip\"\r\n        class=\"max-accent\"\r\n      >{{ format(maxDT, 2, 1) }}</span>.\r\n    </span>\r\n    <div class=\"l-dilation-upgrades-grid\">\r\n      <div\r\n        v-for=\"(upgradeRow, row) in allRebuyables\"\r\n        :key=\"'rebuyable' + row\"\r\n        class=\"l-dilation-upgrades-grid__row\"\r\n      >\r\n        <DilationUpgradeButton\r\n          v-for=\"upgrade in upgradeRow\"\r\n          :key=\"upgrade.id\"\r\n          :upgrade=\"upgrade\"\r\n          :is-rebuyable=\"true\"\r\n          class=\"l-dilation-upgrades-grid__cell\"\r\n          :show-tooltip=\"isHovering\"\r\n        />\r\n      </div>\r\n      <div\r\n        v-for=\"(upgradeRow, row) in allSingleUpgrades\"\r\n        :key=\"'single' + row\"\r\n        class=\"l-dilation-upgrades-grid__row\"\r\n      >\r\n        <DilationUpgradeButton\r\n          v-for=\"upgrade in upgradeRow\"\r\n          :key=\"upgrade.id\"\r\n          :upgrade=\"upgrade\"\r\n          :is-rebuyable=\"false\"\r\n          class=\"l-dilation-upgrades-grid__cell\"\r\n          :show-tooltip=\"isHovering\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.max-accent {\r\n  color: var(--color-dilation);\r\n  font-size: 1.5rem;\r\n  text-shadow: 0 0 0.2rem var(--color-reality-dark);\r\n  cursor: default;\r\n}\r\n\r\n.l-dilation-upgrades-grid {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.l-dilation-upgrades-grid__row {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n}\r\n\r\n.l-dilation-upgrades-grid__cell {\r\n  margin: 1.2rem 1.5rem;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/time-dilation"},"metadata":{},"sourceType":"module"}