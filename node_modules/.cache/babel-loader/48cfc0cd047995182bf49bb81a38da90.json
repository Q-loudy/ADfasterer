{"ast":null,"code":"import _objectSpread from \"C:/Games/ADFasterer/ADfasterer/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.string.replace-all.js\";\nimport { migrations } from \"./migrations\";\n\nfunction arrayToBits(array) {\n  let bits = 0;\n\n  for (const id of array) bits |= 1 << id;\n\n  return bits;\n} // WARNING: Don't use state accessors and functions from global scope here, that's not safe in long-term\n\n\nexport const devMigrations = {\n  patches: [player => {\n    migrations.normalizeTimespans(player);\n    player.bestReality = player.bestReality === 9999999999 ? 999999999999 : player.bestReality * 100;\n\n    for (let i = 0; i < 10; i++) {\n      player.lastTenRealities[i][0] *= 100;\n    }\n  }, player => {\n    player.reality.glyphs.last = \"\";\n  }, player => {\n    player.secretUnlocks.themes = [];\n  }, player => {\n    player.wormhole.power *= 36;\n  }, player => {\n    player.reality.rebuyables = {\n      1: 0,\n      2: 0,\n      3: 0,\n      4: 0,\n      5: 0\n    };\n\n    for (let i = 1; i < 6; i++) {\n      if (player.reality.upg.includes(i)) {\n        player.reality.rebuyables[i] = 1;\n        player.reality.upg.splice(player.reality.upg.indexOf(i), 1);\n      }\n    }\n  }, player => {\n    player.reality.tdbuyer = {\n      on: false,\n      threshhold: 1\n    };\n    player.reality.epmultbuyer = {\n      on: false,\n      threshhold: 1\n    };\n  }, player => {\n    player.reality.perks = new Set();\n  }, player => {\n    player.reality.pp = 0;\n  }, player => {\n    player.reality.pp = player.realities;\n  }, player => {\n    // Give starting perk\n    if (player.reality.pp > 0) {\n      player.reality.pp -= 1;\n      player.reality.perks.add(0);\n    }\n  }, player => {\n    // Var for s45\n    player.secretUnlocks.dragging = 0;\n  }, player => {\n    for (let i = 0; i < player.reality.glyphs.active.length; i++) {\n      const glyph = player.reality.glyphs.active[i];\n\n      if (glyph.effects.autochall !== undefined) {\n        delete glyph.effects.autochall;\n        glyph.effects.buy10 = 1 + Math.pow(glyph.level * glyph.strength, 0.8) / 10;\n      }\n    }\n\n    for (let i = 0; i < player.reality.glyphs.inventory.length; i++) {\n      const glyph = player.reality.glyphs.inventory[i];\n\n      if (glyph.effects.autochall !== undefined) {\n        delete glyph.effects.autochall;\n        glyph.effects.buy10 = 1 + Math.pow(glyph.level * glyph.strength, 0.8) / 10;\n      }\n    }\n  }, player => {\n    player.reality.upgReqs.push(false, false, false, false, false);\n  }, player => {\n    player.reality.realityMachines = new Decimal(player.reality.realityMachines);\n  }, player => {\n    player.reality.glyphs.sac = {\n      power: 0,\n      infinity: 0,\n      time: 0,\n      replication: 0,\n      dilation: 0,\n      effarig: 0\n    };\n  }, player => {\n    player.wormhole.pause = false;\n  }, player => {\n    player.wormholePause = false;\n    if (player.wormhole[0] !== undefined) return;\n    player.wormhole = [player.wormhole, {\n      speed: 60 * 6,\n      power: 90,\n      duration: 7,\n      phase: 0,\n      active: false,\n      unlocked: false\n    }, {\n      speed: 6 * 6,\n      power: 45,\n      duration: 4,\n      phase: 0,\n      active: false,\n      unlocked: false\n    }];\n  }, player => {\n    if (player.reality.upg.includes(20)) {\n      player.wormhole[1].unlocked = true;\n    }\n  }, player => {\n    player.reality.upgReqs.push(false, false, false, false, false);\n  }, player => {\n    player.reality.tdbuyer = undefined;\n    player.reality.tdbuyers = [false, false, false, false, false, false, false, false];\n    player.reality.epmultbuyer = false;\n  }, player => {\n    if (![\"rm\", \"glyph\", \"either\", \"both\"].includes(player.autoRealityMode)) {\n      player.autoRealityMode = \"rm\";\n    }\n  }, migrations.convertAutobuyerMode, player => {\n    for (const key in player.celestials.effarig.glyphWeights) {\n      player.celestials.effarig.glyphWeights[key] *= 100;\n    }\n  }, player => {\n    // The previous migration didn't work if loading a test save before celestials were added, whoops\n    for (const key in player.celestials.effarig.glyphWeights) {\n      player.celestials.effarig.glyphWeights[key] = 25;\n    }\n  }, // eslint-disable-next-line no-unused-vars\n  player => {// The following patch is deeply incompatible with current player object:\n    // Patch that changes wormhole => black hole will be applied later in this patch chain\n    // (see the warning at the top of this file)\n    // Following logic from autobuyers (before the addition of wall clock time stats)\n    // const speedup = getGameSpeedupFactor([GAME_SPEED_EFFECT.EC12, GAME_SPEED_EFFECT.WORMHOLE]);\n    // player.thisInfinityRealTime = Time.thisInfinity.totalSeconds / speedup;\n    // player.thisEternityRealTime = Time.thisEternity.totalSeconds / speedup;\n    // player.thisRealityRealTime = Time.thisReality.totalSeconds / speedup;\n    // for (var i=0; i<10; i++) {\n    //   player.lastTenRuns[i][2] = undefined;\n    //   player.lastTenEternities[i][2] = undefined;\n    //   player.lastTenRealities[i][3] = undefined;\n    // }\n    // For anyone who is looking at this part of the code for debugging purposes, note that GAME_SPEED_EFFECT.EC12\n    // has been replaced by GAME_SPEED_EFFECT.FIXED_SPEED since EC12 is no longer the only fixed-speed effect\n  }, migrations.fixChallengeIds, migrations.adjustMultCosts, player => {\n    const teresa = player.celestials.effarig;\n    player.celestials.effarig = player.celestials.teresa;\n    player.celestials.teresa = teresa;\n\n    for (const i in player.reality.glyphs.active) {\n      const g = player.reality.glyphs.active[i];\n\n      if (g.type === \"teresa\") {\n        g.type = \"effarig\";\n      }\n    }\n\n    for (const i in player.reality.glyphs.inventory) {\n      const g = player.reality.glyphs.inventory[i];\n\n      if (g.type === \"teresa\") {\n        g.type = \"effarig\";\n      }\n    }\n  }, player => {\n    // The previous migration messed things up pretty badly. The swap was done\n    // after deepmerge with defaultPlayer, which means that default values got added correctly,\n    // and then swapped into the incorrect place. We can blow away glyph weights and auto sac\n    // settings\n    // eslint-disable-next-line max-params\n    function movePropIfPossible(celestial1, celestial2, prop, defaultValue, merge = null) {\n      if (player.celestials[celestial1][prop] !== undefined) {\n        if (player.celestials[celestial2][prop] === undefined) {\n          player.celestials[celestial2][prop] = player.celestials[celestial1][prop];\n        } else if (merge) {\n          player.celestials[celestial2][prop] = merge(player.celestials[celestial1][prop], player.celestials[celestial2][prop]);\n        }\n\n        delete player.celestials[celestial1][prop];\n      } else if (player.celestials[celestial2][prop] === undefined) {\n        // Both undefined shouldn't really happen, but might as well be thorough here\n        player.celestials[celestial2][prop] = defaultValue;\n      }\n    }\n\n    movePropIfPossible(\"teresa\", \"effarig\", \"glyphWeights\", {\n      ep: 25,\n      repl: 25,\n      dt: 25,\n      eternities: 25\n    }); // There was a big glyph filter refactor done at some point, and it's infeasible to properly preserve old\n    // filter settings through this old migration. Any imported saves from before the Teresa/Effarig name swap\n    // which had glyph filtering unlocked are likely going to be invalid as a result.\n\n    movePropIfPossible(\"teresa\", \"effarig\", \"autoGlyphSac\", {\n      mode: AUTO_GLYPH_SCORE.LOWEST_SACRIFICE,\n      types: GlyphTypes.list.mapToObject(t => t.id, t => ({\n        rarityThreshold: 0,\n        scoreThreshold: 0,\n        effectScores: t.effects.mapToObject(e => e.id, () => 0)\n      }))\n    });\n    movePropIfPossible(\"teresa\", \"effarig\", \"autoGlyphPick\", {\n      mode: AUTO_GLYPH_REJECT.SACRIFICE\n    });\n    movePropIfPossible(\"teresa\", \"effarig\", \"relicShards\", 0, Math.max);\n    movePropIfPossible(\"effarig\", \"teresa\", \"quoteIdx\", 0);\n    movePropIfPossible(\"effarig\", \"teresa\", \"bestRunAM\", 0, Decimal.max);\n    movePropIfPossible(\"effarig\", \"teresa\", \"rmStore\", 0, Math.max);\n    movePropIfPossible(\"effarig\", \"teresa\", \"glyphLevelMult\", 1, Math.max);\n    movePropIfPossible(\"effarig\", \"teresa\", \"rmMult\", 1, Math.max);\n    movePropIfPossible(\"effarig\", \"teresa\", \"dtBulk\", 1, Math.max); // These are unused now\n\n    delete player.celestials.effarig.typePriorityOrder;\n    delete player.celestials.teresa.typePriorityOrder; // This property didn't even exist at the time of this change\n\n    movePropIfPossible(\"teresa\", \"effarig\", \"glyphScoreSettings\", {\n      mode: AUTO_GLYPH_SCORE.LOWEST_SACRIFICE,\n      simpleEffectCount: 0,\n      types: GlyphTypes.list.mapToObject(t => t.id, t => ({\n        rarityThreshold: 0,\n        scoreThreshold: 0,\n        effectCount: 0,\n        effectChoices: t.effects.mapToObject(e => e.id, () => false),\n        effectScores: t.effects.mapToObject(e => e.id, () => 0)\n      }))\n    });\n    movePropIfPossible(\"effarig\", \"teresa\", \"bestAMSet\", []);\n  }, player => {\n    player.blackHole = player.wormhole;\n    player.blackHolePause = player.wormholePause;\n    delete player.wormhole;\n    delete player.wormholePause;\n  }, player => {\n    for (let i = 0; i < player.blackHole.length; i++) {\n      player.blackHole[i].id = i;\n      player.blackHole[i].intervalUpgrades = Math.round(Math.log(player.blackHole[i].speed / (3600 / Math.pow(10, i))) / Math.log(0.8));\n      player.blackHole[i].powerUpgrades = Math.round(Math.log(player.blackHole[i].power / (180 / Math.pow(2, i))) / Math.log(1.35));\n      player.blackHole[i].durationUpgrades = Math.round(Math.log(player.blackHole[i].duration / (10 - i * 3)) / Math.log(1.3));\n      delete player.blackHole[i].speed;\n      delete player.blackHole[i].power;\n      delete player.blackHole[i].duration;\n    }\n  }, () => {// This migration was created by a mistake\n  }, migrations.convertAchivementsToNumbers, migrations.adjustGameCreatedTime, migrations.moveSavedStudyTrees, player => {\n    // Leftover stuff from dev.updateTestSave\n    if (player.celestials.teresa.rmStore > Teresa.rmStoreMax) {\n      player.reality.realityMachines = player.reality.realityMachines.plus(player.celestials.teresa.rmStore - Teresa.rmStoreMax);\n      player.celestials.teresa.rmStore = Teresa.rmStoreMax;\n    }\n\n    if (player.reality.upg) {\n      player.reality.upgradeBits = arrayToBits(player.reality.upg);\n      delete player.reality.upg;\n    }\n\n    if ((player.reality.upgradeBits & 1 << 25) === 0) {\n      player.realityBuyer.isOn = false;\n    }\n\n    for (let i = 0; i < player.reality.glyphs.active.length; i++) {\n      const glyph = player.reality.glyphs.active[i];\n\n      if (glyph.type === \"power\" && glyph.effects.mult !== undefined) {\n        glyph.effects.mult = new Decimal(glyph.effects.mult);\n      }\n    }\n\n    for (let i = 0; i < player.reality.glyphs.inventory.length; i++) {\n      const glyph = player.reality.glyphs.inventory[i];\n\n      if (glyph.type === \"power\" && glyph.effects.mult !== undefined) {\n        glyph.effects.mult = new Decimal(glyph.effects.mult);\n      }\n    }\n  }, migrations.convertEPMult, migrations.moveChallengeInfo, migrations.adjustWhy, migrations.adjustThemes, migrations.removeAchPow, migrations.adjustSacrificeConfirmation, migrations.migrateNotation, migrations.fixAutobuyers, migrations.removeAutoIPProperties, player => {\n    // Swapping glyph level with reality real time\n    player.lastTenRealities = player.lastTenRealities.map(a => [a[0], a[1], a[3], a[2]]);\n  }, player => {\n    player.achievements.delete(157);\n    player.achievements.delete(156);\n    player.achievements.delete(155);\n    player.achievements.delete(153); // Have to call this a second time, as player.why wasn't removed from the player.js the first time\n\n    migrations.adjustWhy(player);\n    migrations.adjustAchievementVars(player);\n  }, migrations.uniformDimensions, migrations.removeEternityChallGoal, player => {\n    // There were 3 black holes in player object\n    delete player.blackHole.pop();\n  }, player => {\n    const allGlyphs = player.reality.glyphs.active.concat(player.reality.glyphs.inventory);\n\n    for (let i = 0; i < allGlyphs.length; i++) {\n      allGlyphs[i].id = i;\n    }\n  }, // eslint-disable-next-line no-unused-vars\n  player => {// This used to clearNewsArray, which cleared all news entries completely. Unsure what exactly that accomplished,\n    // but convertNews should accomplish the same migration purpose. However, this entry still needs to stay here as\n    // a no-op because otherwise save conversion will have an off-by-one error and generally break entirely.\n  }, player => {\n    migrations.removeTickspeed(player);\n    migrations.removePostC3Reward(player);\n  }, player => {\n    const allGlyphs = player.reality.glyphs.active.concat(player.reality.glyphs.inventory);\n\n    for (const glyph of allGlyphs) {\n      let effectBitmask = 0;\n\n      for (const effect of orderedEffectList) {\n        const typeEffect = separateEffectKey(effect);\n\n        if (glyph.type === typeEffect[0] && glyph.effects[typeEffect[1]] !== undefined) {\n          effectBitmask += 1 << GlyphEffects[effect].bitmaskIndex;\n        }\n      }\n\n      glyph.effects = effectBitmask;\n    }\n  }, // Ra exp formula changed\n  player => {\n    const pets = player.celestials.ra.pets;\n\n    for (const prop in pets) {\n      if (!Object.prototype.hasOwnProperty.call(pets, prop)) continue;\n      const pet = pets[prop];\n      const oldExp = pet.exp + 10000 * (Math.pow(1.12, pet.level - 1) - 1) / 0.12;\n      pet.level = 1;\n      pet.exp = Math.clampMin(oldExp, 0);\n    }\n\n    player.celestials.ra.unlocks = [];\n  }, // Ra exp formula changed again\n  player => {\n    const pets = player.celestials.ra.pets;\n\n    for (const prop in pets) {\n      if (!Object.prototype.hasOwnProperty.call(pets, prop)) continue;\n      const pet = pets[prop];\n      let oldExp = pet.exp;\n\n      for (let lv = 1; lv < pet.level; lv++) {\n        const floor5 = Math.floor(lv / 5);\n        const adjustedLevel = 2.5 * floor5 * (floor5 + 1) + lv % 5 * (floor5 + 1);\n        oldExp += Math.floor(10000 * Math.pow(1.12, adjustedLevel - 1));\n      }\n\n      pet.level = 1;\n      pet.exp = Math.clampMin(oldExp, 0);\n    }\n\n    player.celestials.ra.unlocks = [];\n  }, migrations.renameMoney, player => {\n    migrations.moveAutobuyers(player);\n    const old = player.realityBuyer;\n    const realityAutobuyer = player.auto.reality;\n    realityAutobuyer.mode = [\"rm\", \"glyph\", \"either\", \"both\"].indexOf(player.autoRealityMode);\n    realityAutobuyer.rm = old.rm;\n    realityAutobuyer.glyph = old.glyph;\n    realityAutobuyer.isActive = old.isOn;\n    const eternityAutobuyer = player.auto.eternity;\n    eternityAutobuyer.mode = [\"amount\", \"time\", \"relative\"].indexOf(player.autoEternityMode);\n    const condition = new Decimal(old.limit);\n\n    switch (player.autoEternityMode) {\n      case \"amount\":\n        eternityAutobuyer.amount = condition;\n        break;\n\n      case \"time\":\n        eternityAutobuyer.time = condition.lt(Decimal.NUMBER_MAX_VALUE) ? condition.toNumber() : eternityAutobuyer.time;\n        break;\n\n      case \"relative\":\n        eternityAutobuyer.xLast = condition;\n        break;\n    }\n\n    delete player.realityBuyer;\n    delete player.autoRealityMode;\n    delete player.autoEternityMode;\n  }, migrations.convertNews, migrations.convertEternityCountToDecimal, migrations.renameDimboosts, player => {\n    // Reset reality autobuyer mode, since AUTO_REALITY_MODE was incorrectly starting from 1 and not from 0.\n    // Disable it also to not wreck people's long runs or smth\n    player.auto.reality.mode = 0;\n    player.auto.reality.isActive = false;\n  }, player => {\n    // Perk shop refactor\n    player.celestials.teresa.perkShop = [Math.floor(Math.log(player.celestials.teresa.glyphLevelMult) / Math.log(1.05)), Math.floor(Math.log(player.celestials.teresa.rmMult) / Math.log(2)), Math.floor(Math.log(player.celestials.teresa.dtBulk) / Math.log(2)), 0];\n    delete player.celestials.teresa.glyphLevelMult;\n    delete player.celestials.teresa.rmMult;\n    delete player.celestials.teresa.dtBulk;\n  }, migrations.migrateConfirmations, migrations.removeOtherTickspeedProps, player => {\n    // These were accidentally added back in due to a bad merge conflict resolution\n    delete player.resets;\n    delete player.tickDecrease;\n  }, migrations.renameNewsOption, migrations.removeDimensionCosts, migrations.renameTickspeedPurchaseBumps, player => {\n    const safeArrayToBits = x => x === undefined ? 0 : arrayToBits(x);\n\n    player.celestials.teresa.unlockBits = safeArrayToBits(player.celestials.teresa.unlocks);\n    delete player.celestials.teresa.unlocks;\n    player.celestials.effarig.unlockBits = safeArrayToBits(player.celestials.effarig.unlocks);\n    delete player.celestials.effarig.unlocks;\n    player.celestials.v.unlockBits = safeArrayToBits(player.celestials.v.unlocks);\n    delete player.celestials.v.unlocks;\n    player.celestials.ra.unlockBits = safeArrayToBits(player.celestials.ra.unlocks);\n    delete player.celestials.ra.unlocks;\n    player.celestials.laitela.unlockBits = safeArrayToBits(player.celestials.laitela.unlocks);\n    delete player.celestials.laitela.unlocks;\n  }, player => {\n    player.reality.seed = Math.floor(Math.abs(player.reality.seed)) % 0xFFFFFFFF;\n  }, player => {\n    player.auto.sacrifice.multiplier = new Decimal(player.auto.sacrifice.multiplier);\n  }, migrations.changeC8Handling, player => {\n    while (player.celestials.teresa.perkShop.length < 5) player.celestials.teresa.perkShop.push(0);\n  }, player => {\n    delete player.secretUnlocks.fixed;\n  }, player => {\n    delete player.celestials.effarig.quoteIdx;\n    delete player.celestials.enslaved.quoteIdx;\n  }, player => {\n    const tempAuto = player.celestials.teresa.perkShop[4];\n    const tempMusic = player.celestials.teresa.perkShop[3];\n    player.celestials.teresa.perkShop[3] = tempAuto;\n    player.celestials.teresa.perkShop[4] = tempMusic;\n  }, migrations.convertAchievementsToBits, player => {\n    for (const dimension of player.dimensions.antimatter) {\n      delete dimension.power;\n    }\n\n    for (const dimension of player.dimensions.infinity) {\n      delete dimension.power;\n    }\n\n    for (const dimension of player.dimensions.time) {\n      delete dimension.power;\n    }\n  }, player => {\n    const cursedMask = 15;\n    const allGlyphs = player.reality.glyphs.active.concat(player.reality.glyphs.inventory);\n\n    for (const glyph of allGlyphs) {\n      if (glyph.type === \"cursed\") glyph.effects = cursedMask;\n    }\n  }, player => {\n    player.options.showHintText.alchemy = player.options.showAlchemyResources;\n    delete player.options.showAlchemyResources;\n  }, player => {\n    // Adds in effect selection settings and removes non-generated types while preserving old glyph filter settings\n    const oldSettings = player.celestials.effarig.autoGlyphSac.types;\n    const newSettings = GlyphTypes.list.filter(type => generatedTypes.includes(type.id)).mapToObject(t => t.id, t => ({\n      rarityThreshold: 0,\n      scoreThreshold: 0,\n      effectCount: 0,\n      effectChoices: t.effects.mapToObject(e => e.id, () => false),\n      effectScores: t.effects.mapToObject(e => e.id, () => 0)\n    }));\n\n    for (const type of generatedTypes) {\n      newSettings[type].rarityThreshold = oldSettings[type].rarityThreshold;\n      newSettings[type].scoreThreshold = oldSettings[type].scoreThreshold;\n\n      for (const effect of Object.keys(newSettings[type].effectScores)) {\n        newSettings[type].effectScores[effect] = oldSettings[type].effectScores[effect];\n      }\n    }\n\n    player.celestials.effarig.autoGlyphSac.types = newSettings;\n  }, player => {\n    player.reality.glyphs.inventorySize += 10;\n  }, player => {\n    player.celestials.v.unlockBits = 0; // Adding this in case the player is loading a save (otherwise it\n    // doesn't update immediately and the player still has nonzero ST\n    // for the purpose of checking unlocks).\n\n    V.updateTotalRunUnlocks();\n    V.checkForUnlocks();\n  }, player => {\n    // Reset the v-unlocks again\n    player.celestials.v.unlockBits = 0; // See above migration for an explanation of the below line.\n\n    V.updateTotalRunUnlocks();\n    V.checkForUnlocks();\n  }, player => {\n    player.reality.autoAchieve = !player.reality.disableAutoAchieve;\n    delete player.reality.disableAutoAchieve;\n    delete player.newEC10Test;\n  }, player => {\n    // Some older saves have screwed up Ra unlocks for some reason, this should fix that\n    player.celestials.ra.unlockBits = 0;\n    Ra.checkForUnlocks();\n  }, player => {\n    // Required for compatibility after V records refactor\n    player.celestials.v.runRecords[0] = -10;\n  }, player => {\n    delete player.celestials.v.cursedThisRun;\n  }, player => {\n    // Reset Ra unlocks again, because apparently Ra-Teresa Lv1 upgrades were always active due to an oversight\n    player.celestials.ra.unlockBits = 0;\n    Ra.checkForUnlocks();\n  }, player => {\n    // Glyph filter refactor (not worth the trouble of translating between the modes, but copy the configs)\n    Object.assign(player.celestials.effarig.glyphScoreSettings, player.celestials.effarig.autoGlyphSac);\n    player.celestials.effarig.glyphTrashMode = 0;\n    delete player.celestials.effarig.autoGlyphSac;\n    delete player.celestials.effarig.autoGlyphPick;\n  }, player => {\n    delete player.reality.glyphs.inventorySize;\n\n    for (const glyph of player.reality.glyphs.inventory) {\n      if (glyph.idx >= 10) {\n        glyph.idx += 10;\n      }\n    }\n  }, player => {\n    // Typo fix, as long as we have to delete a player property let's also\n    // correctly initialize the new one.\n    player.onlyEighthDimensions = player.onlyEighthDimensons;\n    delete player.onlyEighthDimensons;\n  }, player => {\n    for (const pet of Ra.pets.all) {\n      pet.level = Math.clampMax(pet.level, 25);\n    }\n\n    delete player.celestials.ra.compression;\n\n    if (Ra.unlocks.allGamespeedGlyphs.canBeApplied) {\n      const allGlyphs = player.reality.glyphs.active.concat(player.reality.glyphs.inventory);\n\n      for (const glyph of allGlyphs) {\n        Glyphs.applyGamespeed(glyph);\n      }\n    }\n  }, player => {\n    for (let i = 0; i < player.celestials.ra.alchemy.length; i++) {\n      player.celestials.ra.alchemy[i].amount = Math.clampMax(player.celestials.ra.alchemy[i].amount, Ra.alchemyResourceCap);\n    }\n  }, player => {\n    delete player.celestials.laitela.maxAmGained;\n\n    for (const dim of player.celestials.laitela.dimensions) {\n      dim.powerDMUpgrades = dim.powerUpgrades;\n      dim.powerDEUpgrades = 0;\n      delete dim.chanceUpgrades;\n      delete dim.powerUpgrades;\n    } // Note that player.celestials.laitela.higgs is actually a string at this point\n    // (since conversion to Decimal hasn't happened yet).\n\n\n    player.celestials.laitela.darkMatterMult = Number(player.celestials.laitela.higgs) + 1;\n    delete player.celestials.laitela.anomalies;\n  }, player => {\n    delete player.achPow;\n    delete player.interval;\n    delete player.tickThreshold;\n    delete player.celestials.enslaved.maxQuotes;\n    delete player.celestials.v.quoteIdx;\n    delete player.celestials.ra.quoteIdx;\n  }, player => {\n    player.celestials.enslaved.totalDimCapIncrease = 0;\n    player.celestials.enslaved.tesseracts = 0;\n  }, player => {\n    delete player.auto.galaxy.buyMax;\n  }, player => {\n    delete player.reality.glyphs.sac.cursed;\n    Achievement(153).lock();\n    Achievement(157).lock();\n  }, player => {\n    // Return all PP spent on old V goal reduction\n    if (player.celestials.v.ppSpent) {\n      player.reality.pp += player.celestials.v.ppSpent;\n      delete player.celestials.v.ppSpent;\n    }\n  }, player => {\n    player.thisEternityMaxAM = new Decimal(0);\n  }, player => {\n    migrations.migrateLastTenRuns(player); //  Put in a default value of 1 for realities.\n\n    player.lastTenRealities = player.lastTenRealities.map(x => [x[0], x[1], 1, Number(x[2]), x[3]]);\n    migrations.migrateIPGen(player);\n  }, player => {\n    player.noReplicantiGalaxies = player.reality.upgReqChecks[0];\n    delete player.reality.upgReqChecks;\n  }, player => {\n    player.bestGlyphStrength = player.reality.glyphs.active.concat(player.reality.glyphs.inventory).map(g => g.strength).max();\n  }, player => {\n    player.options.showHintText.glyphEffectDots = player.options.showGlyphEffectDots;\n    delete player.options.showGlyphEffectDots;\n    migrations.renameCloudVariable(player);\n  }, player => {\n    const newPerks = new Set([...player.reality.perks].filter(x => x < 20 || x > 25));\n    const gainedPerkPoints = player.reality.perks.size - newPerks.size;\n    player.reality.pp += gainedPerkPoints;\n    player.reality.perks = newPerks;\n\n    if (gainedPerkPoints > 0) {\n      Modal.message.show(\"Some of your perks (glyph perks) were removed. The perk points you spent on them have been refunded.\");\n    }\n  }, player => {\n    delete player.reality.glyphs.last;\n  }, player => {\n    if (player.reality.secondGaussian === null) {\n      // Future-proof against potential changes to the default value\n      // (as a special case of not using state accessors).\n      player.reality.secondGaussian = 1e6;\n    }\n  }, player => {\n    delete player.celestials.laitela.reachedSingularityCapLimit;\n    delete player.celestials.laitela.secondsSinceCappedTime;\n    delete player.celestials.laitela.singularityAutoCapLimit;\n    delete player.celestials.laitela.singularityTime;\n    delete player.celestials.laitela.autoAnnihilationTimer;\n    delete player.celestials.laitela.annihilated;\n    delete player.celestials.laitela.secondsSinceReachedSingularity;\n    player.celestials.laitela.darkMatterMult = Math.clampMin(player.celestials.laitela.darkMatterMult, 1);\n    player.celestials.laitela.dimensions.forEach(d => d.ascensionCount = 0);\n  }, player => {\n    const allRandomGlyphs = player.reality.glyphs.active.concat(player.reality.glyphs.inventory).filter(i => i.type !== \"companion\");\n\n    for (const glyph of allRandomGlyphs) {\n      glyph.strength = Math.ceil(glyph.strength * 400) / 400;\n    }\n  }, player => {\n    if (player.dimensions.normal !== undefined) {\n      for (let i = 0; i < player.dimensions.normal.length; i++) {\n        const dimension = player.dimensions.normal[i];\n        player.dimensions.antimatter[i].bought = dimension.bought;\n        player.dimensions.antimatter[i].costBumps = dimension.costBumps;\n        player.dimensions.antimatter[i].amount = new Decimal(dimension.amount);\n      }\n\n      delete player.dimensions.normal;\n    }\n  }, player => {\n    if (player.options.news.enabled === undefined) {\n      player.options.news = {\n        enabled: player.options.news,\n        repeatBuffer: 40,\n        AIChance: 0,\n        speed: 1\n      };\n    }\n  }, player => {\n    delete player.options.confirmations.glyphTrash;\n  }, player => {\n    migrations.standardizeUncompletedTimes(player);\n    if (player.bestReality === 999999999999) player.bestReality = Number.MAX_VALUE;\n    if (player.bestRealityRealTime === 999999999999) player.bestRealityRealTime = Number.MAX_VALUE;\n\n    for (let i = 0; i < 10; i++) {\n      if (player.lastTenRealities[i][0] === 2678400000) player.lastTenRealities[i][0] = Number.MAX_VALUE;\n      if (player.lastTenRealities[i][3] === 26784000) player.lastTenRealities[i][3] = Number.MAX_VALUE;\n    }\n  }, player => {\n    for (const script of Object.values(player.reality.automator.scripts)) {\n      script.content = script.content.replace(/^([\\t ]*)(wait|if|while|until)([\\t ]+)(completion[s\\u017F])/igm, \"$1$2$3pending $4\");\n    }\n  }, player => {\n    player.celestials.ra.unlockBits &= ~(1 << 29);\n  }, player => {\n    player.records.gameCreatedTime = player.gameCreatedTime;\n    player.records.totalTimePlayed = player.totalTimePlayed;\n    player.records.realTimePlayed = player.realTimePlayed;\n    player.records.totalAntimatter = new Decimal(player.totalAntimatter);\n\n    for (let i = 0; i < 10; i++) {\n      player.records.lastTenInfinities[i][0] = player.lastTenRuns[i][0];\n      player.records.lastTenEternities[i][0] = player.lastTenEternities[i][0];\n      player.records.lastTenRealities[i][0] = player.lastTenRealities[i][0];\n    }\n\n    player.options.showLastTenInfinitiesGainPerTime = player.options.showLastTenRunsGainPerTime;\n    delete player.options.showLastTenRunsGainPerTime;\n    player.records.thisInfinity.time = player.thisInfinityTime;\n    player.records.thisInfinity.realTime = player.thisInfinityRealTime;\n    player.records.thisInfinity.lastBuyTime = player.thisInfinityLastBuyTime;\n    player.records.thisInfinity.maxAM = new Decimal(player.thisInfinityMaxAM);\n    player.records.thisInfinity.bestIPmin = new Decimal(player.bestIPminThisInfinity);\n    player.records.bestInfinity.time = player.bestInfinityTime;\n    player.records.bestInfinity.realTime = player.bestInfinityRealTime;\n    player.records.bestInfinity.bestIPminEternity = new Decimal(player.bestIPminThisEternity);\n    player.records.bestInfinity.bestIPminReality = new Decimal(player.bestEPThisReality);\n    player.records.thisEternity.time = player.thisEternity;\n    player.records.thisEternity.realTime = player.thisEternityRealTime;\n    player.records.thisEternity.maxAM = new Decimal(player.thisEternityMaxAM);\n    player.records.thisEternity.maxIP = new Decimal(player.thisEternityMaxIP);\n    player.records.thisEternity.bestIPMsWithoutMaxAll = new Decimal(player.bestIpPerMsWithoutMaxAll);\n    player.records.thisEternity.bestEPmin = new Decimal(player.bestEPminThisEternity);\n    player.records.thisEternity.bestInfinitiesPerMs = new Decimal(player.bestInfinitiesPerMs);\n    player.records.bestEternity.time = player.bestEternity; // I have no idea where real time best Eternity is, not sure if it exists?\n\n    player.records.bestEternity.bestEPminReality = new Decimal(player.bestEPminThisReality);\n    player.records.thisReality.time = player.thisReality;\n    player.records.thisReality.realTime = player.thisRealityRealTime;\n    player.records.thisReality.bestEternitiesPerMs = new Decimal(player.bestEternitiesPerMs);\n    player.records.bestReality.RMmin = new Decimal(player.bestRMmin);\n    player.records.bestReality.RMminSet = player.bestRMminSet;\n    player.records.bestReality.glyphLevel = player.bestGlyphLevel;\n    player.records.bestReality.glyphStrength = player.bestGlyphStrength;\n    player.records.bestReality.glyphLevelSet = player.bestGlyphLevelSet;\n    player.records.bestReality.bestEP = new Decimal(player.bestEP);\n    player.records.bestReality.bestEPSet = player.bestEPSet;\n    player.records.bestReality.time = player.bestReality;\n    player.records.bestReality.realTime = player.bestRealityRealTime;\n    player.records.bestReality.speedSet = player.bestSpeedSet;\n    delete player.gameCreatedTime;\n    delete player.totalTimePlayed;\n    delete player.realTimePlayed;\n    delete player.totalAntimatter;\n    delete player.lastTenRuns;\n    delete player.lastTenEternities;\n    delete player.lastTenRealities;\n    delete player.thisInfinityTime;\n    delete player.thisInfinityRealTime;\n    delete player.thisInfinityLastBuyTime;\n    delete player.thisInfinityMaxAM;\n    delete player.bestIPminThisInfinity;\n    delete player.bestInfinityTime;\n    delete player.bestInfinityRealTime;\n    delete player.bestIPminThisEternity;\n    delete player.thisEternity;\n    delete player.thisEternityRealTime;\n    delete player.thisEternityMaxAM;\n    delete player.thisEternityMaxIP;\n    delete player.bestIpPerMsWithoutMaxAll;\n    delete player.bestEPminThisEternity;\n    delete player.bestInfinitiesPerMs;\n    delete player.bestIPminThisEternity;\n    delete player.bestEternity;\n    delete player.bestEPminThisReality;\n    delete player.thisReality;\n    delete player.thisRealityRealTime;\n    delete player.bestEternitiesPerMs;\n    delete player.bestEPThisReality;\n    delete player.bestRMmin;\n    delete player.bestRMminSet;\n    delete player.bestGlyphLevel;\n    delete player.bestGlyphStrength;\n    delete player.bestGlyphLevelSet;\n    delete player.bestEP;\n    delete player.bestEPSet;\n    delete player.bestReality;\n    delete player.bestRealityRealTime;\n    delete player.bestSpeedSet;\n  }, player => {\n    player.replicanti.boughtGalaxyCap = player.replicanti.gal;\n    player.reality.perkPoints = player.reality.pp;\n    player.celestials.teresa.pouredAmount = player.celestials.teresa.rmStore;\n    player.celestials.laitela.darkMatter = new Decimal(player.celestials.laitela.matter);\n    player.celestials.laitela.maxDarkMatter = new Decimal(player.celestials.laitela.maxMatter);\n    player.celestials.ra.pets.teresa.memories = player.celestials.ra.pets.teresa.exp;\n    player.celestials.ra.pets.effarig.memories = player.celestials.ra.pets.effarig.exp;\n    player.celestials.ra.pets.enslaved.memories = player.celestials.ra.pets.enslaved.exp;\n    player.celestials.ra.pets.v.memories = player.celestials.ra.pets.v.exp;\n    player.achievementChecks = {\n      noSacrifices: player.noSacrifices,\n      onlyEighthDimensions: player.onlyEighthDimensions,\n      onlyFirstDimensions: player.onlyFirstDimensions,\n      noEighthDimensions: player.noEighthDimensions,\n      noFirstDimensions: player.noFirstDimensions,\n      noAntimatterProduced: player.noAntimatterProduced,\n      noTriadStudies: player.noTriadStudies,\n      noTheoremPurchases: player.noTheoremPurchases,\n      noInfinitiesThisReality: player.noInfinitiesThisReality,\n      noEternitiesThisReality: player.noEternitiesThisReality,\n      noReplicantiGalaxies: player.noReplicantiGalaxies,\n      // Not necessarily accurate, but these defaults prevent some people from effortlessly completing some\n      // otherwise very difficult unlocks immediately upon migration\n      maxID1ThisReality: new Decimal(1),\n      continuumThisReality: true\n    };\n    player.dilation.baseTachyonGalaxies = player.dilation.baseFreeGalaxies;\n    player.dilation.totalTachyonGalaxies = player.dilation.freeGalaxies;\n    delete player.replicanti.gal;\n    delete player.reality.pp;\n    delete player.celestials.teresa.rmStore;\n    delete player.celestials.laitela.matter;\n    delete player.celestials.laitela.maxMatter;\n    delete player.celestials.ra.pets.teresa.exp;\n    delete player.celestials.ra.pets.effarig.exp;\n    delete player.celestials.ra.pets.enslaved.exp;\n    delete player.celestials.ra.pets.v.exp;\n    delete player.noSacrifices;\n    delete player.onlyEighthDimensions;\n    delete player.onlyFirstDimensions;\n    delete player.noEighthDimensions;\n    delete player.noFirstDimensions;\n    delete player.noAntimatterProduced;\n    delete player.noTriadStudies;\n    delete player.noTheoremPurchases;\n    delete player.noInfinitiesThisReality;\n    delete player.noEternitiesThisReality;\n    delete player.noReplicantiGalaxies;\n    delete player.dilation.baseFreeGalaxies;\n    delete player.dilation.freeGalaxies;\n  }, player => {\n    player.auto.infinityDims = Array.range(0, 8).map(() => ({\n      lastTick: 0\n    }));\n\n    for (let i = 0; i < 8; i++) {\n      player.auto.infinityDims[i].isActive = player.infDimBuyers[i];\n    }\n\n    player.auto.timeDims = Array.range(0, 8).map(() => ({\n      lastTick: 0\n    }));\n\n    for (let i = 0; i < 8; i++) {\n      player.auto.timeDims[i].isActive = player.reality.tdbuyers[i];\n    }\n\n    player.auto.replicantiUpgrades = Array.range(0, 3).map(() => ({\n      lastTick: 0\n    }));\n\n    for (let i = 0; i < 3; i++) {\n      player.auto.replicantiUpgrades[i].isActive = player.replicanti.auto[i];\n    }\n\n    if (player.dilation.auto === undefined) {\n      // Not defined on old saves, we define it only to delete it later in this migration\n      player.dilation.auto = [true, true, true];\n    }\n\n    player.auto.dilationUpgrades = Array.range(0, 3).map(() => ({\n      lastTick: 0\n    }));\n\n    for (let i = 0; i < 3; i++) {\n      player.auto.dilationUpgrades[i].isActive = player.dilation.auto[i];\n    }\n\n    player.auto.blackHolePower = Array.range(0, 2).map(() => ({\n      lastTick: 0\n    }));\n\n    for (let i = 0; i < 2; i++) {\n      player.auto.blackHolePower[i].isActive = player.blackHole[i].autoPower;\n    }\n\n    if (player.reality.rebuyablesAuto === undefined) {\n      // Not defined on old saves, we define it only to delete it later in this migration\n      player.reality.rebuyablesAuto = [true, true, true, true, true];\n    }\n\n    player.auto.realityUpgrades = Array.range(0, 5).map(() => ({\n      lastTick: 0\n    }));\n\n    for (let i = 0; i < 5; i++) {\n      player.auto.realityUpgrades[i].isActive = player.reality.rebuyablesAuto[i];\n    } // Note: player.autobuyers, the old way of storing autobuyers, seems to have gotten lost in dev migrations\n\n\n    if (player.auto.antimatterDims === undefined) {\n      player.auto.antimatterDims = player.auto.dimensions;\n    }\n\n    player.auto.replicantiGalaxies.isActive = player.replicanti.galaxybuyer;\n    player.auto.ipMultBuyer.isActive = player.infMultBuyer;\n    player.auto.epMultBuyer.isActive = player.reality.epmultbuyer;\n    player.auto.timeTheorems.isActive = player.ttbuyer;\n    player.auto.bigCrunch.xCurrent = player.auto.bigCrunch.xLast;\n    player.auto.eternity.xCurrent = player.auto.eternity.xLast;\n    player.auto.bulkOn = player.options.bulkOn;\n    player.auto.autobuyerOn = player.options.autobuyerOn;\n    player.auto.disableContinuum = player.options.disableContinuum;\n    delete player.auto.dimensions;\n    delete player.infDimBuyers;\n    delete player.auto.infDimTimer;\n    delete player.reality.tdbuyers;\n    delete player.auto.timeDimTimer;\n    delete player.replicanti.galaxybuyer;\n    delete player.replicanti.auto;\n    delete player.auto.repUpgradeTimer;\n    delete player.ttbuyer;\n    delete player.auto.ttTimer;\n    delete player.dilation.auto;\n    delete player.auto.dilUpgradeTimer;\n    delete player.blackHole[0].autoPower;\n    delete player.blackHole[1].autoPower;\n    delete player.reality.rebuyablesAuto;\n    delete player.reality.epmultbuyer;\n    delete player.infMultBuyer;\n    delete player.auto.bigCrunch.xLast;\n    delete player.auto.eternity.xLast;\n    delete player.options.bulkOn;\n    delete player.options.autobuyerOn;\n    delete player.options.disableContinuum;\n  }, migrations.convertTimeTheoremPurchases, migrations.infinitiedConversion, player => {\n    delete player.saveOverThresholdFlag;\n    delete player.saveOverThresholdFlagModalDisplayed;\n  }, player => {\n    if (!Autobuyer.reality.isUnlocked) player.auto.reality.isActive = false;\n  }, player => {\n    // Delete PEC5 (id 64)\n    if (player.reality.perks.has(64)) {\n      player.reality.perks.delete(64);\n      player.reality.perkPoints++;\n    }\n\n    let reqBitmask = 0;\n\n    for (let i = 0; i <= player.reality.upgReqs.length; i++) {\n      if (player.reality.upgReqs[i]) reqBitmask |= 1 << i;\n    }\n\n    player.reality.upgReqs = reqBitmask;\n  }, player => {\n    // Delete SAM2 (id 11)\n    if (player.reality.perks.has(11)) {\n      player.reality.perks.delete(11);\n      player.reality.perkPoints++;\n    }\n\n    if (player.reality.perks.has(10)) Perk.startAM.onPurchased();\n  }, player => {\n    player.achievementChecks.maxStudiesThisReality = player.timestudy.studies.length;\n    player.celestials.teresa.lastRepeatedMachines = new Decimal(player.celestials.teresa.lastRepeatedRM);\n    delete player.celestials.teresa.lastRepeatedRM;\n  }, player => {\n    // Make sure scripts don't have any gaps in indices, and load up the correct script on migration\n    let newID = 1;\n    let selectedID = 1;\n    const shiftedScripts = {};\n\n    for (const id of Object.keys(player.reality.automator.scripts)) {\n      shiftedScripts[newID] = player.reality.automator.scripts[id];\n      shiftedScripts[newID].id = newID;\n      if (id === player.reality.automator.state.editorScript) selectedID = newID;\n      newID++;\n    }\n\n    player.reality.automator.scripts = shiftedScripts;\n    player.reality.automator.state.editorScript = selectedID;\n    delete player.reality.automator.lastID;\n  }, migrations.deleteDimboostBulk, migrations.removePriority, player => {\n    player.reality.realityMachines = player.reality.realityMachines.floor();\n  }, migrations.deleteFloatingTextOption, player => {\n    // Delete ACH5\n    if (player.reality.perks.has(206)) {\n      player.reality.perks.delete(206);\n      player.reality.perkPoints++;\n    }\n  }, player => {\n    player.records.thisEternity.maxIP = new Decimal(player.infinityPoints);\n    player.auto.bigCrunch.xHighest = player.auto.bigCrunch.xCurrent;\n    player.auto.eternity.xHighest = player.auto.eternity.xCurrent;\n    delete player.auto.bigCrunch.xCurrent;\n    delete player.auto.eternity.xCurrent;\n  }, player => {\n    // Fix an issue where a boolean property could become int and trigger number checking code.\n    player.achievementChecks.continuumThisReality = Boolean(player.achievementChecks.continuumThisReality);\n  }, player => {\n    player.secretUnlocks.spreadingCancer = player.spreadingCancer;\n    delete player.spreadingCancer;\n  }, player => {\n    delete player.celestials.enslaved.totalDimCapIncrease;\n  }, player => {\n    for (const i of player.reality.glyphs.undo) {\n      for (const j of [\"thisInfinityTime\", \"thisInfinityRealTime\", \"thisEternityTime\", \"thisEternityRealTime\"]) {\n        if (!(j in i)) {\n          // This is 1 second, seems like a solid default value for saves without the property.\n          i[j] = 1000;\n        }\n      }\n    }\n  }, player => {\n    // Requirement migration/refactor\n    const oldChecks = player.achievementChecks;\n    player.requirementChecks = {\n      infinity: {\n        maxAll: player.usedMaxAll,\n        noSacrifice: oldChecks.noSacrifices,\n        noAD8: oldChecks.noEighthDimensions\n      },\n      eternity: {\n        onlyAD1: oldChecks.onlyFirstDimensions,\n        onlyAD8: oldChecks.onlyEighthDimensions,\n        noAD1: oldChecks.noFirstDimensions,\n        noRG: oldChecks.noEighthDimensions\n      },\n      reality: {\n        noAM: oldChecks.noAntimatterProduced,\n        noTriads: oldChecks.noTriadStudies,\n        noPurchasedTT: oldChecks.noTheoremPurchases,\n        noInfinities: oldChecks.noInfinitiesThisReality,\n        noEternities: oldChecks.noEternitiesThisReality,\n        noContinuum: !oldChecks.continuumThisReality,\n        maxID1: new Decimal(oldChecks.maxID1ThisReality),\n        maxStudies: oldChecks.maxStudiesThisReality,\n        maxGlyphs: player.celestials.v.maxGlyphsThisRun,\n        slowestBH: player.minNegativeBlackHoleThisReality\n      },\n      permanent: {\n        cancerGalaxies: player.secretUnlocks.spreadingCancer,\n        singleTickspeed: player.secretUnlocks.why,\n        perkTreeDragging: player.secretUnlocks.dragging\n      }\n    };\n    delete player.usedMaxAll;\n    delete player.secretUnlocks.spreadingCancer;\n    delete player.secretUnlocks.why;\n    delete player.secretUnlocks.dragging;\n    delete player.achievementChecks;\n    delete player.minNegativeBlackHoleThisReality;\n    delete player.celestials.v.maxGlyphsThisRun; // Refactor news storage format to bitmask array\n\n    if (Array.isArray(player.news)) {\n      const oldNewsArray = player.news;\n      delete player.news;\n      player.news = {};\n      player.news.seen = {};\n\n      for (const id of oldNewsArray) NewsHandler.addSeenNews(id);\n\n      player.news.totalSeen = NewsHandler.uniqueTickersSeen;\n    } // Separate news-specific data\n\n\n    player.news.specialTickerData = {\n      uselessNewsClicks: player.secretUnlocks.uselessNewsClicks,\n      paperclips: player.secretUnlocks.paperclips,\n      newsQueuePosition: player.secretUnlocks.newsQueuePosition,\n      eiffelTowerChapter: player.secretUnlocks.eiffelTowerChapter\n    };\n    delete player.secretUnlocks.uselessNewsClicks;\n    delete player.secretUnlocks.paperclips;\n    delete player.secretUnlocks.newsQueuePosition;\n    delete player.secretUnlocks.eiffelTowerChapter;\n  }, migrations.refactorDoubleIPRebuyable, player => {\n    if (player.requirementChecks.reality.slowestBH === 0) player.requirementChecks.reality.slowestBH = 1;\n  }, player => {\n    // #1764 fix - EM200 bug from eternity autobuyer appearing to be zero but not actually being zero\n    if (player.auto.eternity.amount.lt(0.01)) player.auto.eternity.amount = new Decimal(0);\n  }, player => {\n    player.options.hiddenSubtabBits = Array.repeat(0, 11);\n    player.options.lastOpenSubtab = Array.repeat(0, 11);\n  }, player => {\n    const highestRefinementData = [{\n      name: \"power\",\n      id: ALCHEMY_RESOURCE.POWER\n    }, {\n      name: \"infinity\",\n      id: ALCHEMY_RESOURCE.INFINITY\n    }, {\n      name: \"time\",\n      id: ALCHEMY_RESOURCE.TIME\n    }, {\n      name: \"replication\",\n      id: ALCHEMY_RESOURCE.REPLICATION\n    }, {\n      name: \"dilation\",\n      id: ALCHEMY_RESOURCE.DILATION\n    }, {\n      name: \"effarig\",\n      id: ALCHEMY_RESOURCE.EFFARIG\n    }];\n\n    for (const resource of highestRefinementData) {\n      player.celestials.ra.highestRefinementValue[resource.name] = player.celestials.ra.alchemy[resource.id].amount;\n    }\n  }, migrations.deletePostChallUnlocked, player => {\n    // Delete PEC4 (id 63)\n    if (player.reality.perks.has(63)) {\n      player.reality.perks.delete(63);\n      player.reality.perkPoints++;\n    } // Delete TTMA4 (id 107)\n\n\n    if (player.reality.perks.has(107)) {\n      player.reality.perks.delete(107);\n      player.reality.perkPoints++;\n    }\n\n    delete player.auto.timeTheorems.lastTick;\n  }, player => {\n    // We can't reliably check if the player has or hasn't unlocked the automator via automator points without\n    // essentially copy-pasting all the automator point code here (in the interest of avoiding use of globals).\n    // So, in the range of progress where it's unclear, we stop it entirely in case it hasn't actually unlocked yet.\n    if (player.realities > 5 && player.realities < 50) {\n      player.reality.automator.state.mode = 1;\n      player.reality.automator.state.stack = [];\n      player.reality.automator.state.repeat = false;\n      player.reality.automator.state.forceRestart = false;\n    }\n  }, player => {\n    for (const resource of player.celestials.ra.alchemy) {\n      // We shouldn't access global variables in migrations so instead of Ra.alchemyResourceCap we use 25000.\n      resource.amount = Math.clampMax(resource.amount, 25000);\n    }\n  }, player => {\n    const triadRegex = new RegExp(`T(\\\\d)`, \"gu\");\n    player.timestudy.presets.forEach(p => p.studies = p.studies.replaceAll(triadRegex, \"30$1\")); // This may also potentially change variable or preset names in scripts, breaking them, but the likelihood of\n    // this being a widespread issue is low enough that this is probably a better option than a really obtuse regex\n\n    for (const script of Object.values(player.reality.automator.scripts)) {\n      script.content = script.content.replaceAll(triadRegex, \"30$1\");\n    }\n\n    if (player.celestials.v.triadStudies !== undefined) {\n      player.timestudy.studies = player.timestudy.studies.concat(player.celestials.v.triadStudies.map(id => id + 300));\n      delete player.celestials.v.triadStudies;\n    }\n  }, player => {\n    delete player.options.confirmations.harshAutoClean;\n  }, player => {\n    player.celestials.laitela.singularitySorting = {\n      // Added more support in singularity milestone list, uses enum SINGULARITY_MILESTONE_RESOURCE in constants.js\n      displayResource: player.options.showCondenseToMilestone ? 1 : 0,\n      sortResource: 0,\n      showCompleted: 0,\n      sortOrder: 0\n    };\n    delete player.options.showCondenseToMilestone;\n  }, () => {// This is just an empty patch because some orders got really messed up. Sorry -Scar\n  }, player => {\n    player.reality.glyphs.sets = player.reality.glyphs.sets.map(glyphs => ({\n      glyphs,\n      name: \"\"\n    }));\n  }, player => {\n    // Remove any accidental recursion that may have been introduced by the above patch\n    while (!Array.isArray(player.reality.glyphs.sets[0].glyphs)) {\n      player.reality.glyphs.sets = player.reality.glyphs.sets.map(glyphs => glyphs.glyphs);\n    }\n  }, player => {\n    // For saves before cel7 existed, it will first add this prop (as a number) and then run this migration code. For\n    // saves which are already in cel7, this prop will already exist as a Decimal. This workaround handles both cases\n    player.celestials.pelle.rifts.chaos.fill = new Decimal(player.celestials.pelle.rifts.chaos.fill).toNumber();\n    delete player.celestials.pelle.compact;\n    player.celestials.pelle.collapsed = {\n      upgrades: false,\n      rifts: false,\n      galaxies: false\n    };\n    player.celestials.pelle.galaxyGenerator.unlocked = player.celestials.pelle.galaxyGenerator.generatedGalaxies > 0;\n  }, player => {\n    if (player.celestials.pelle.doomed) player.achievementBits[17] |= 1;\n    if (player.celestials.pelle.upgrades.has(4)) player.achievementBits[17] |= 2;\n\n    if (player.celestials.pelle.doomed && player.challenge.infinity.completedBits === 510) {\n      player.achievementBits[17] |= 1 << 2;\n    }\n\n    if (player.timestudy.studies.compact().includes(181)) player.achievementBits[17] |= 1 << 5;\n  }, player => {\n    player.achievementBits[16] |= (player.achievementBits[16] & 1 << 4) << 3;\n    player.achievementBits[16] &= ~(1 << 4);\n    player.achievementBits[16] |= (player.achievementBits[16] & 1 << 2) << 2;\n    player.achievementBits[16] &= ~(1 << 2);\n  }, player => {\n    player.achievementBits[17] &= ~(1 << 5);\n\n    if (player.timestudy.studies.compact().includes(181) && player.celestials.pelle.doomed) {\n      player.achievementBits[17] |= 1 << 5;\n    }\n  }, player => {\n    if (player.celestials.pelle.doomed && (player.challenge.infinity.completedBits & 1 << 5) !== 0) {\n      player.achievementBits[17] |= 1 << 2;\n    } else {\n      player.achievementBits[17] &= ~(1 << 2);\n    }\n  }, player => {\n    player.celestials.pelle.collapsed = player.celestials.collapsed;\n    player.celestials.pelle.showBought = player.celestials.showBought;\n    delete player.celestials.collapsed;\n    delete player.celestials.showBought;\n  }, migrations.infMultNameConversion, player => {\n    if (player.celestials.pelle.collapsed === undefined) {\n      player.celestials.pelle.collapsed = {\n        upgrades: false,\n        rifts: false,\n        galaxies: false\n      };\n    }\n  }, player => {\n    const from = player.celestials.laitela;\n\n    if (from.automation) {\n      player.auto.darkMatterDims.isActive = from.automation.dimensions;\n      player.auto.ascension.isActive = from.automation.ascension;\n      player.auto.annihilation.isActive = from.automation.singularity;\n      player.auto.singularity.isActive = from.automation.annihilation;\n      delete player.celestials.laitela.automation.dimensions;\n      delete player.celestials.laitela.automation.ascension;\n      delete player.celestials.laitela.automation.singularity;\n      delete player.celestials.laitela.automation.annihilation;\n    }\n\n    player.auto.darkMatterDims.lastTick = from.darkAutobuyerTimer;\n    player.auto.ascension.lastTick = from.darkAutobuyerTimer;\n    player.auto.annihilation.multiplier = from.autoAnnihilationSetting;\n    delete player.celestials.laitela.darkAutobuyerTimer;\n    delete player.celestials.laitela.darkAutobuyerTimer;\n    delete player.celestials.laitela.autoAnnihilationSetting;\n  }, migrations.etercreqConversion, player => {\n    delete player.options.confirmations.reality;\n  }, player => {\n    const hasDimboost = player.celestials.pelle.upgrades.has(19);\n    const hasDilUpg = player.celestials.pelle.upgrades.has(18);\n    player.celestials.pelle.upgrades.delete(18);\n    player.celestials.pelle.upgrades.delete(19);\n    if (hasDimboost) player.celestials.pelle.upgrades.add(18);\n    if (hasDilUpg) player.celestials.pelle.upgrades.add(19);\n  }, player => {\n    delete player.auto.bulkOn;\n  }, player => {\n    player.requirementChecks.permanent.emojiGalaxies = player.requirementChecks.permanent.cancerGalaxies;\n    delete player.requirementChecks.permanent.cancerGalaxies;\n  }, player => {\n    delete player.celestials.effarig.unlocksBits;\n    delete player.celestials.ra.unlocksBits;\n  }, player => {\n    for (const script of Object.values(player.reality.automator.scripts)) {\n      script.id = parseInt(script.id, 10);\n    }\n  }, player => {\n    player.secretUnlocks.themes.delete(\"S4Cancer\");\n    player.secretUnlocks.themes.add(\"S4Design\");\n  }, player => {\n    player.reality.automator.state.editorScript = Number(player.reality.automator.state.editorScript); // I'm not sure if there's any error with the type of topLevelScript, but better safe than sorry\n\n    player.reality.automator.state.topLevelScript = Number(player.reality.automator.state.topLevelScript);\n  }, player => {\n    // Move dil upg no reset and tachyon particles no reset\n    if (player.celestials.pelle.upgrades.delete(20)) player.celestials.pelle.upgrades.add(21);\n    if (player.celestials.pelle.upgrades.delete(19)) player.celestials.pelle.upgrades.add(20); // Dimboost upgrade id was moved from 18 to 7 -- Make the corresponding change\n    // Galaxy upgrade was inserted at 11. 7-10 should only be moved forward 1 place\n    // and 10-17 2 places forward.\n\n    const hasDimboostsResetNothing = player.celestials.pelle.upgrades.delete(18);\n\n    for (let i = 17; i >= 10; i--) {\n      if (player.celestials.pelle.upgrades.delete(i)) player.celestials.pelle.upgrades.add(i + 2);\n    }\n\n    for (let i = 9; i >= 7; i--) {\n      if (player.celestials.pelle.upgrades.delete(i)) player.celestials.pelle.upgrades.add(i + 1);\n    }\n\n    if (hasDimboostsResetNothing) player.celestials.pelle.upgrades.add(7);\n  }, player => {\n    const cel = player.celestials;\n\n    const convToBit = x => x.toBitmask() >> 1;\n\n    if (cel.teresa.quotes) player.celestials.teresa.quoteBits = convToBit(cel.teresa.quotes);\n    if (cel.effarig.quotes) player.celestials.effarig.quoteBits = convToBit(cel.effarig.quotes);\n    if (cel.enslaved.quotes) player.celestials.enslaved.quoteBits = convToBit(cel.enslaved.quotes);\n    if (cel.v.quotes) player.celestials.v.quoteBits = convToBit(cel.v.quotes);\n    if (cel.ra.quotes) player.celestials.ra.quoteBits = convToBit(cel.ra.quotes);\n    if (cel.laitela.quotes) player.celestials.laitela.quoteBits = convToBit(cel.laitela.quotes);\n    if (cel.pelle.quotes) player.celestials.pelle.quoteBits = convToBit(cel.pelle.quotes);\n    delete player.celestials.teresa.quotes;\n    delete player.celestials.effarig.quotes;\n    delete player.celestials.enslaved.quotes;\n    delete player.celestials.v.quotes;\n    delete player.celestials.ra.quotes;\n    delete player.celestials.laitela.quotes;\n    delete player.celestials.pelle.quotes;\n  }, player => {\n    if (player.celestials.pelle.rifts.famine) {\n      player.celestials.pelle.rifts.vacuum = _objectSpread(_objectSpread({}, player.celestials.pelle.rifts.famine), {}, {\n        fill: new Decimal(player.celestials.pelle.rifts.famine.fill)\n      });\n      delete player.celestials.pelle.rifts.famine;\n    }\n\n    if (player.celestials.pelle.rifts.pestilence) {\n      player.celestials.pelle.rifts.decay = _objectSpread(_objectSpread({}, player.celestials.pelle.rifts.pestilence), {}, {\n        fill: new Decimal(player.celestials.pelle.rifts.pestilence.fill)\n      });\n      delete player.celestials.pelle.rifts.pestilence;\n    }\n\n    if (player.celestials.pelle.rifts.war) {\n      player.celestials.pelle.rifts.recursion = _objectSpread(_objectSpread({}, player.celestials.pelle.rifts.war), {}, {\n        fill: new Decimal(player.celestials.pelle.rifts.war.fill)\n      });\n      delete player.celestials.pelle.rifts.war;\n    }\n\n    if (player.celestials.pelle.rifts.death) {\n      player.celestials.pelle.rifts.paradox = _objectSpread(_objectSpread({}, player.celestials.pelle.rifts.death), {}, {\n        fill: new Decimal(player.celestials.pelle.rifts.death.fill)\n      });\n      delete player.celestials.pelle.rifts.death;\n    }\n  }, player => {\n    delete player.newGame;\n  }, migrations.moveTS33, player => {\n    const toMove = [\"antimatterDims\", \"infinityDims\", \"timeDims\", \"replicantiUpgrades\", \"dilationUpgrades\", \"blackHolePower\", \"realityUpgrades\", \"imaginaryUpgrades\"];\n\n    for (const x of toMove) {\n      if (player.auto[x].all !== undefined) {\n        // Already up to date\n        continue;\n      }\n\n      const all = player.auto[x];\n      delete player.auto[x];\n      player.auto[x] = {\n        all,\n        isActive: true\n      };\n    }\n  }, player => {\n    player.celestials.ra.petWithRemembrance = player.celestials.ra.petWithRecollection;\n    delete player.celestials.ra.petWithRecollection;\n  }, player => {\n    for (const key of Object.keys(player.reality.automator.scripts)) {\n      const lines = player.reality.automator.scripts[key].content.split(\"\\n\");\n\n      for (let num = 0; num < lines.length; num++) {\n        let rawLine = lines[num]; // TT command removed\n\n        rawLine = rawLine.replace(/^[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*tt(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*$/i, \"\"); // Changes to \"studies\" commands\n        // For some reason `studies nowait load` would get caught by the following system without explicitly defining\n        // that \"nowait load\" should not be captured. Probably because it treats nowait as nonexisting and then sees\n        // that nowait is neither respec nor load. I tried consuming the nowait if it existed but that messed up the\n        // replace function so this is the best I've got for now\n\n        rawLine = rawLine.replace(/[s\\u017F]tudie[s\\u017F]( nowait)? (?!re[s\\u017F]pec|load|nowait re[s\\u017F]pec|nowait load)((?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)$/i, \"studies$1 purchase $2\");\n        rawLine = rawLine.replace(/[s\\u017F]tudie[s\\u017F]( nowait)? load pre[s\\u017F]et ([1-6])/i, \"studies$1 load id $2\");\n        rawLine = rawLine.replace(/[s\\u017F]tudie[s\\u017F]( nowait)? load pre[s\\u017F]et ((?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)/i, \"studies$1 load name $2\"); // Autobuyer mode change (this is a much older change which wasn't migrated at the time)\n\n        rawLine = rawLine.replace(/x current/i, \"x highest\"); // Variable definitions\n\n        const defineMatch = rawLine.match(/define ((?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*)[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*=[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*((?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*)$/i);\n\n        if (defineMatch) {\n          player.reality.automator.constants[defineMatch[1]] = defineMatch[2];\n          rawLine = \"\";\n        }\n\n        lines[num] = rawLine;\n      }\n\n      player.reality.automator.scripts[key].content = lines.join(\"\\n\");\n    } // Migrate IDs for all saves made during wave 3 testing, to prevent odd overwriting behavior on importing\n\n\n    const newScripts = {};\n    const oldScriptKeys = Object.keys(player.reality.automator.scripts);\n\n    for (let newID = 1; newID <= oldScriptKeys.length; newID++) {\n      newScripts[newID] = player.reality.automator.scripts[oldScriptKeys[newID - 1]];\n      newScripts[newID].id = newID;\n    }\n\n    player.reality.automator.scripts = newScripts;\n  }, player => {\n    delete player.celestials.pelle.armageddonDuration;\n    delete player.celestials.pelle.maxAMThisArmageddon;\n    delete player.options.sidebarMinimized;\n    delete player.options.chart;\n    delete player.devMode;\n  }, player => {\n    const swap1 = player.achievementBits[10] & 4;\n    const swap2 = player.achievementBits[11] & 8;\n\n    if (swap1) {\n      player.achievementBits[11] |= 8;\n    } else {\n      player.achievementBits[11] &= ~8;\n    }\n\n    if (swap2) {\n      player.achievementBits[10] |= 4;\n    } else {\n      player.achievementBits[10] &= ~4;\n    }\n  }, player => {\n    if (player.options.newUI) {\n      var _player$options$theme;\n\n      player.options.themeModern = (_player$options$theme = player.options.theme) !== null && _player$options$theme !== void 0 ? _player$options$theme : player.options.themeModern;\n    } else {\n      var _player$options$theme2;\n\n      player.options.themeClassic = (_player$options$theme2 = player.options.theme) !== null && _player$options$theme2 !== void 0 ? _player$options$theme2 : player.options.themeClassic;\n    }\n\n    delete player.options.theme;\n    if (BlackHole(1).isUnlocked) player.records.timePlayedAtBHUnlock = player.records.totalTimePlayed;\n  }, player => {\n    player.IAP.enabled = !player.IAP.disabled;\n    const toDelete = [\"totalSTD\", \"spentSTD\", \"exportSTD\", \"IPPurchases\", \"EPPurchases\", \"RMPurchases\", \"dimPurchases\", \"allDimPurchases\", \"replicantiPurchases\", \"dilatedTimePurchases\", \"disabled\"];\n\n    for (const key of toDelete) delete player.IAP[key];\n  }, player => {\n    const allGlyphs = player.reality.glyphs.active.concat(player.reality.glyphs.inventory);\n\n    for (const glyph of allGlyphs) {\n      if (glyph.symbol === \"key266b\") {\n        glyph.symbol = undefined;\n        glyph.color = undefined;\n        glyph.cosmetic = \"music\";\n      }\n\n      if (glyph.type === \"companion\") glyph.color = undefined;\n    }\n  }, player => {\n    player.options.lightGlyphs = !player.options.forceDarkGlyphs;\n    delete player.options.forceDarkGlyphs;\n  }],\n\n  patch(player) {\n    player.options.testVersion = player.options.testVersion || 0;\n\n    for (let version = player.options.testVersion; version < this.patches.length; version++) {\n      const patch = this.patches[version];\n      patch(player);\n    }\n\n    this.setLatestTestVersion(player);\n  },\n\n  setLatestTestVersion(player) {\n    player.options.testVersion = this.patches.length;\n  }\n\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/storage/dev-migrations.js"],"names":["migrations","arrayToBits","array","bits","id","devMigrations","patches","player","normalizeTimespans","bestReality","i","lastTenRealities","reality","glyphs","last","secretUnlocks","themes","wormhole","power","rebuyables","upg","includes","splice","indexOf","tdbuyer","on","threshhold","epmultbuyer","perks","Set","pp","realities","add","dragging","active","length","glyph","effects","autochall","undefined","buy10","Math","pow","level","strength","inventory","upgReqs","push","realityMachines","Decimal","sac","infinity","time","replication","dilation","effarig","pause","wormholePause","speed","duration","phase","unlocked","tdbuyers","autoRealityMode","convertAutobuyerMode","key","celestials","glyphWeights","fixChallengeIds","adjustMultCosts","teresa","g","type","movePropIfPossible","celestial1","celestial2","prop","defaultValue","merge","ep","repl","dt","eternities","mode","AUTO_GLYPH_SCORE","LOWEST_SACRIFICE","types","GlyphTypes","list","mapToObject","t","rarityThreshold","scoreThreshold","effectScores","e","AUTO_GLYPH_REJECT","SACRIFICE","max","typePriorityOrder","simpleEffectCount","effectCount","effectChoices","blackHole","blackHolePause","intervalUpgrades","round","log","powerUpgrades","durationUpgrades","convertAchivementsToNumbers","adjustGameCreatedTime","moveSavedStudyTrees","rmStore","Teresa","rmStoreMax","plus","upgradeBits","realityBuyer","isOn","mult","convertEPMult","moveChallengeInfo","adjustWhy","adjustThemes","removeAchPow","adjustSacrificeConfirmation","migrateNotation","fixAutobuyers","removeAutoIPProperties","map","a","achievements","delete","adjustAchievementVars","uniformDimensions","removeEternityChallGoal","pop","allGlyphs","concat","removeTickspeed","removePostC3Reward","effectBitmask","effect","orderedEffectList","typeEffect","separateEffectKey","GlyphEffects","bitmaskIndex","pets","ra","Object","prototype","hasOwnProperty","call","pet","oldExp","exp","clampMin","unlocks","lv","floor5","floor","adjustedLevel","renameMoney","moveAutobuyers","old","realityAutobuyer","auto","rm","isActive","eternityAutobuyer","eternity","autoEternityMode","condition","limit","amount","lt","NUMBER_MAX_VALUE","toNumber","xLast","convertNews","convertEternityCountToDecimal","renameDimboosts","perkShop","glyphLevelMult","rmMult","dtBulk","migrateConfirmations","removeOtherTickspeedProps","resets","tickDecrease","renameNewsOption","removeDimensionCosts","renameTickspeedPurchaseBumps","safeArrayToBits","x","unlockBits","v","laitela","seed","abs","sacrifice","multiplier","changeC8Handling","fixed","quoteIdx","enslaved","tempAuto","tempMusic","convertAchievementsToBits","dimension","dimensions","antimatter","cursedMask","options","showHintText","alchemy","showAlchemyResources","oldSettings","autoGlyphSac","newSettings","filter","generatedTypes","keys","inventorySize","V","updateTotalRunUnlocks","checkForUnlocks","autoAchieve","disableAutoAchieve","newEC10Test","Ra","runRecords","cursedThisRun","assign","glyphScoreSettings","glyphTrashMode","autoGlyphPick","idx","onlyEighthDimensions","onlyEighthDimensons","all","clampMax","compression","allGamespeedGlyphs","canBeApplied","Glyphs","applyGamespeed","alchemyResourceCap","maxAmGained","dim","powerDMUpgrades","powerDEUpgrades","chanceUpgrades","darkMatterMult","Number","higgs","anomalies","achPow","interval","tickThreshold","maxQuotes","totalDimCapIncrease","tesseracts","galaxy","buyMax","cursed","Achievement","lock","ppSpent","thisEternityMaxAM","migrateLastTenRuns","migrateIPGen","noReplicantiGalaxies","upgReqChecks","bestGlyphStrength","glyphEffectDots","showGlyphEffectDots","renameCloudVariable","newPerks","gainedPerkPoints","size","Modal","message","show","secondGaussian","reachedSingularityCapLimit","secondsSinceCappedTime","singularityAutoCapLimit","singularityTime","autoAnnihilationTimer","annihilated","secondsSinceReachedSingularity","forEach","d","ascensionCount","allRandomGlyphs","ceil","normal","bought","costBumps","news","enabled","repeatBuffer","AIChance","confirmations","glyphTrash","standardizeUncompletedTimes","MAX_VALUE","bestRealityRealTime","script","values","automator","scripts","content","replace","records","gameCreatedTime","totalTimePlayed","realTimePlayed","totalAntimatter","lastTenInfinities","lastTenRuns","lastTenEternities","showLastTenInfinitiesGainPerTime","showLastTenRunsGainPerTime","thisInfinity","thisInfinityTime","realTime","thisInfinityRealTime","lastBuyTime","thisInfinityLastBuyTime","maxAM","thisInfinityMaxAM","bestIPmin","bestIPminThisInfinity","bestInfinity","bestInfinityTime","bestInfinityRealTime","bestIPminEternity","bestIPminThisEternity","bestIPminReality","bestEPThisReality","thisEternity","thisEternityRealTime","maxIP","thisEternityMaxIP","bestIPMsWithoutMaxAll","bestIpPerMsWithoutMaxAll","bestEPmin","bestEPminThisEternity","bestInfinitiesPerMs","bestEternity","bestEPminReality","bestEPminThisReality","thisReality","thisRealityRealTime","bestEternitiesPerMs","RMmin","bestRMmin","RMminSet","bestRMminSet","glyphLevel","bestGlyphLevel","glyphStrength","glyphLevelSet","bestGlyphLevelSet","bestEP","bestEPSet","speedSet","bestSpeedSet","replicanti","boughtGalaxyCap","gal","perkPoints","pouredAmount","darkMatter","matter","maxDarkMatter","maxMatter","memories","achievementChecks","noSacrifices","onlyFirstDimensions","noEighthDimensions","noFirstDimensions","noAntimatterProduced","noTriadStudies","noTheoremPurchases","noInfinitiesThisReality","noEternitiesThisReality","maxID1ThisReality","continuumThisReality","baseTachyonGalaxies","baseFreeGalaxies","totalTachyonGalaxies","freeGalaxies","infinityDims","Array","range","lastTick","infDimBuyers","timeDims","replicantiUpgrades","dilationUpgrades","blackHolePower","autoPower","rebuyablesAuto","realityUpgrades","antimatterDims","replicantiGalaxies","galaxybuyer","ipMultBuyer","infMultBuyer","epMultBuyer","timeTheorems","ttbuyer","bigCrunch","xCurrent","bulkOn","autobuyerOn","disableContinuum","infDimTimer","timeDimTimer","repUpgradeTimer","ttTimer","dilUpgradeTimer","convertTimeTheoremPurchases","infinitiedConversion","saveOverThresholdFlag","saveOverThresholdFlagModalDisplayed","Autobuyer","isUnlocked","has","reqBitmask","Perk","startAM","onPurchased","maxStudiesThisReality","timestudy","studies","lastRepeatedMachines","lastRepeatedRM","newID","selectedID","shiftedScripts","state","editorScript","lastID","deleteDimboostBulk","removePriority","deleteFloatingTextOption","infinityPoints","xHighest","Boolean","spreadingCancer","undo","j","oldChecks","requirementChecks","maxAll","usedMaxAll","noSacrifice","noAD8","onlyAD1","onlyAD8","noAD1","noRG","noAM","noTriads","noPurchasedTT","noInfinities","noEternities","noContinuum","maxID1","maxStudies","maxGlyphs","maxGlyphsThisRun","slowestBH","minNegativeBlackHoleThisReality","permanent","cancerGalaxies","singleTickspeed","why","perkTreeDragging","isArray","oldNewsArray","seen","NewsHandler","addSeenNews","totalSeen","uniqueTickersSeen","specialTickerData","uselessNewsClicks","paperclips","newsQueuePosition","eiffelTowerChapter","refactorDoubleIPRebuyable","hiddenSubtabBits","repeat","lastOpenSubtab","highestRefinementData","name","ALCHEMY_RESOURCE","POWER","INFINITY","TIME","REPLICATION","DILATION","EFFARIG","resource","highestRefinementValue","deletePostChallUnlocked","stack","forceRestart","triadRegex","RegExp","presets","p","replaceAll","triadStudies","harshAutoClean","singularitySorting","displayResource","showCondenseToMilestone","sortResource","showCompleted","sortOrder","sets","pelle","rifts","chaos","fill","compact","collapsed","upgrades","galaxies","galaxyGenerator","generatedGalaxies","doomed","achievementBits","challenge","completedBits","showBought","infMultNameConversion","from","automation","darkMatterDims","ascension","annihilation","singularity","darkAutobuyerTimer","autoAnnihilationSetting","etercreqConversion","hasDimboost","hasDilUpg","emojiGalaxies","unlocksBits","parseInt","topLevelScript","hasDimboostsResetNothing","cel","convToBit","toBitmask","quotes","quoteBits","famine","vacuum","pestilence","decay","war","recursion","death","paradox","newGame","moveTS33","toMove","petWithRemembrance","petWithRecollection","lines","split","num","rawLine","defineMatch","match","constants","join","newScripts","oldScriptKeys","armageddonDuration","maxAMThisArmageddon","sidebarMinimized","chart","devMode","swap1","swap2","newUI","themeModern","theme","themeClassic","BlackHole","timePlayedAtBHUnlock","IAP","disabled","toDelete","symbol","color","cosmetic","lightGlyphs","forceDarkGlyphs","patch","testVersion","version","setLatestTestVersion"],"mappings":"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","sourcesContent":["import { migrations } from \"./migrations\";\r\n\r\nfunction arrayToBits(array) {\r\n  let bits = 0;\r\n  for (const id of array) bits |= (1 << id);\r\n  return bits;\r\n}\r\n\r\n// WARNING: Don't use state accessors and functions from global scope here, that's not safe in long-term\r\nexport const devMigrations = {\r\n  patches: [\r\n    player => {\r\n      migrations.normalizeTimespans(player);\r\n      player.bestReality = player.bestReality === 9999999999\r\n        ? 999999999999\r\n        : player.bestReality * 100;\r\n      for (let i = 0; i < 10; i++) {\r\n        player.lastTenRealities[i][0] *= 100;\r\n      }\r\n    },\r\n    player => {\r\n      player.reality.glyphs.last = \"\";\r\n    },\r\n    player => {\r\n      player.secretUnlocks.themes = [];\r\n    },\r\n    player => {\r\n      player.wormhole.power *= 36;\r\n    },\r\n    player => {\r\n      player.reality.rebuyables = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };\r\n      for (let i = 1; i < 6; i++) {\r\n        if (player.reality.upg.includes(i)) {\r\n          player.reality.rebuyables[i] = 1;\r\n          player.reality.upg.splice(player.reality.upg.indexOf(i), 1);\r\n        }\r\n      }\r\n    },\r\n    player => {\r\n      player.reality.tdbuyer = {\r\n        on: false,\r\n        threshhold: 1\r\n      };\r\n      player.reality.epmultbuyer = {\r\n        on: false,\r\n        threshhold: 1\r\n      };\r\n    },\r\n    player => {\r\n      player.reality.perks = new Set();\r\n    },\r\n    player => {\r\n      player.reality.pp = 0;\r\n    },\r\n    player => {\r\n      player.reality.pp = player.realities;\r\n    },\r\n    player => {\r\n      // Give starting perk\r\n      if (player.reality.pp > 0) {\r\n        player.reality.pp -= 1;\r\n        player.reality.perks.add(0);\r\n      }\r\n    },\r\n    player => {\r\n      // Var for s45\r\n      player.secretUnlocks.dragging = 0;\r\n    },\r\n    player => {\r\n      for (let i = 0; i < player.reality.glyphs.active.length; i++) {\r\n        const glyph = player.reality.glyphs.active[i];\r\n        if (glyph.effects.autochall !== undefined) {\r\n          delete glyph.effects.autochall;\r\n          glyph.effects.buy10 = 1 + Math.pow(glyph.level * glyph.strength, 0.8) / 10;\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < player.reality.glyphs.inventory.length; i++) {\r\n        const glyph = player.reality.glyphs.inventory[i];\r\n        if (glyph.effects.autochall !== undefined) {\r\n          delete glyph.effects.autochall;\r\n          glyph.effects.buy10 = 1 + Math.pow(glyph.level * glyph.strength, 0.8) / 10;\r\n        }\r\n      }\r\n    },\r\n    player => {\r\n      player.reality.upgReqs.push(false, false, false, false, false);\r\n    },\r\n    player => {\r\n      player.reality.realityMachines = new Decimal(player.reality.realityMachines);\r\n    },\r\n    player => {\r\n      player.reality.glyphs.sac = {\r\n        power: 0,\r\n        infinity: 0,\r\n        time: 0,\r\n        replication: 0,\r\n        dilation: 0,\r\n        effarig: 0,\r\n      };\r\n    },\r\n    player => {\r\n      player.wormhole.pause = false;\r\n    },\r\n    player => {\r\n      player.wormholePause = false;\r\n      if (player.wormhole[0] !== undefined) return;\r\n      player.wormhole = [\r\n        player.wormhole,\r\n        {\r\n          speed: 60 * 6,\r\n          power: 90,\r\n          duration: 7,\r\n          phase: 0,\r\n          active: false,\r\n          unlocked: false,\r\n        },\r\n        {\r\n          speed: 6 * 6,\r\n          power: 45,\r\n          duration: 4,\r\n          phase: 0,\r\n          active: false,\r\n          unlocked: false,\r\n        }\r\n      ];\r\n    },\r\n    player => {\r\n      if (player.reality.upg.includes(20)) {\r\n        player.wormhole[1].unlocked = true;\r\n      }\r\n    },\r\n    player => {\r\n      player.reality.upgReqs.push(false, false, false, false, false);\r\n    },\r\n    player => {\r\n      player.reality.tdbuyer = undefined;\r\n      player.reality.tdbuyers = [false, false, false, false, false, false, false, false];\r\n      player.reality.epmultbuyer = false;\r\n    },\r\n    player => {\r\n      if (![\"rm\", \"glyph\", \"either\", \"both\"].includes(player.autoRealityMode)) {\r\n        player.autoRealityMode = \"rm\";\r\n      }\r\n    },\r\n    migrations.convertAutobuyerMode,\r\n    player => {\r\n      for (const key in player.celestials.effarig.glyphWeights) {\r\n        player.celestials.effarig.glyphWeights[key] *= 100;\r\n      }\r\n    },\r\n    player => {\r\n      // The previous migration didn't work if loading a test save before celestials were added, whoops\r\n      for (const key in player.celestials.effarig.glyphWeights) {\r\n        player.celestials.effarig.glyphWeights[key] = 25;\r\n      }\r\n    },\r\n    // eslint-disable-next-line no-unused-vars\r\n    player => {\r\n      // The following patch is deeply incompatible with current player object:\r\n      // Patch that changes wormhole => black hole will be applied later in this patch chain\r\n      // (see the warning at the top of this file)\r\n\r\n      // Following logic from autobuyers (before the addition of wall clock time stats)\r\n      // const speedup = getGameSpeedupFactor([GAME_SPEED_EFFECT.EC12, GAME_SPEED_EFFECT.WORMHOLE]);\r\n      // player.thisInfinityRealTime = Time.thisInfinity.totalSeconds / speedup;\r\n      // player.thisEternityRealTime = Time.thisEternity.totalSeconds / speedup;\r\n      // player.thisRealityRealTime = Time.thisReality.totalSeconds / speedup;\r\n      // for (var i=0; i<10; i++) {\r\n      //   player.lastTenRuns[i][2] = undefined;\r\n      //   player.lastTenEternities[i][2] = undefined;\r\n      //   player.lastTenRealities[i][3] = undefined;\r\n      // }\r\n\r\n      // For anyone who is looking at this part of the code for debugging purposes, note that GAME_SPEED_EFFECT.EC12\r\n      // has been replaced by GAME_SPEED_EFFECT.FIXED_SPEED since EC12 is no longer the only fixed-speed effect\r\n    },\r\n    migrations.fixChallengeIds,\r\n    migrations.adjustMultCosts,\r\n    player => {\r\n      const teresa = player.celestials.effarig;\r\n      player.celestials.effarig = player.celestials.teresa;\r\n      player.celestials.teresa = teresa;\r\n\r\n      for (const i in player.reality.glyphs.active) {\r\n        const g = player.reality.glyphs.active[i];\r\n        if (g.type === \"teresa\") {\r\n          g.type = \"effarig\";\r\n        }\r\n      }\r\n\r\n      for (const i in player.reality.glyphs.inventory) {\r\n        const g = player.reality.glyphs.inventory[i];\r\n        if (g.type === \"teresa\") {\r\n          g.type = \"effarig\";\r\n        }\r\n      }\r\n    },\r\n    player => {\r\n      // The previous migration messed things up pretty badly. The swap was done\r\n      // after deepmerge with defaultPlayer, which means that default values got added correctly,\r\n      // and then swapped into the incorrect place. We can blow away glyph weights and auto sac\r\n      // settings\r\n      // eslint-disable-next-line max-params\r\n      function movePropIfPossible(celestial1, celestial2, prop, defaultValue, merge = null) {\r\n        if (player.celestials[celestial1][prop] !== undefined) {\r\n          if (player.celestials[celestial2][prop] === undefined) {\r\n            player.celestials[celestial2][prop] = player.celestials[celestial1][prop];\r\n          } else if (merge) {\r\n            player.celestials[celestial2][prop] = merge(player.celestials[celestial1][prop],\r\n              player.celestials[celestial2][prop]);\r\n          }\r\n          delete player.celestials[celestial1][prop];\r\n        } else if (player.celestials[celestial2][prop] === undefined) {\r\n          // Both undefined shouldn't really happen, but might as well be thorough here\r\n          player.celestials[celestial2][prop] = defaultValue;\r\n        }\r\n      }\r\n      movePropIfPossible(\"teresa\", \"effarig\", \"glyphWeights\", {\r\n        ep: 25,\r\n        repl: 25,\r\n        dt: 25,\r\n        eternities: 25\r\n      });\r\n      // There was a big glyph filter refactor done at some point, and it's infeasible to properly preserve old\r\n      // filter settings through this old migration. Any imported saves from before the Teresa/Effarig name swap\r\n      // which had glyph filtering unlocked are likely going to be invalid as a result.\r\n      movePropIfPossible(\"teresa\", \"effarig\", \"autoGlyphSac\", {\r\n        mode: AUTO_GLYPH_SCORE.LOWEST_SACRIFICE,\r\n        types: GlyphTypes.list.mapToObject(t => t.id, t => ({\r\n          rarityThreshold: 0,\r\n          scoreThreshold: 0,\r\n          effectScores: t.effects.mapToObject(e => e.id, () => 0),\r\n        })),\r\n      });\r\n      movePropIfPossible(\"teresa\", \"effarig\", \"autoGlyphPick\", {\r\n        mode: AUTO_GLYPH_REJECT.SACRIFICE,\r\n      });\r\n      movePropIfPossible(\"teresa\", \"effarig\", \"relicShards\", 0, Math.max);\r\n      movePropIfPossible(\"effarig\", \"teresa\", \"quoteIdx\", 0);\r\n      movePropIfPossible(\"effarig\", \"teresa\", \"bestRunAM\", 0, Decimal.max);\r\n      movePropIfPossible(\"effarig\", \"teresa\", \"rmStore\", 0, Math.max);\r\n      movePropIfPossible(\"effarig\", \"teresa\", \"glyphLevelMult\", 1, Math.max);\r\n      movePropIfPossible(\"effarig\", \"teresa\", \"rmMult\", 1, Math.max);\r\n      movePropIfPossible(\"effarig\", \"teresa\", \"dtBulk\", 1, Math.max);\r\n      // These are unused now\r\n      delete player.celestials.effarig.typePriorityOrder;\r\n      delete player.celestials.teresa.typePriorityOrder;\r\n      // This property didn't even exist at the time of this change\r\n      movePropIfPossible(\"teresa\", \"effarig\", \"glyphScoreSettings\", {\r\n        mode: AUTO_GLYPH_SCORE.LOWEST_SACRIFICE,\r\n        simpleEffectCount: 0,\r\n        types: GlyphTypes.list.mapToObject(t => t.id, t => ({\r\n          rarityThreshold: 0,\r\n          scoreThreshold: 0,\r\n          effectCount: 0,\r\n          effectChoices: t.effects.mapToObject(e => e.id, () => false),\r\n          effectScores: t.effects.mapToObject(e => e.id, () => 0),\r\n        })),\r\n      });\r\n      movePropIfPossible(\"effarig\", \"teresa\", \"bestAMSet\", []);\r\n    },\r\n    player => {\r\n      player.blackHole = player.wormhole;\r\n      player.blackHolePause = player.wormholePause;\r\n      delete player.wormhole;\r\n      delete player.wormholePause;\r\n    },\r\n    player => {\r\n      for (let i = 0; i < player.blackHole.length; i++) {\r\n        player.blackHole[i].id = i;\r\n        player.blackHole[i].intervalUpgrades = Math.round(\r\n          Math.log(player.blackHole[i].speed / (3600 / (Math.pow(10, i)))) / Math.log(0.8)\r\n        );\r\n        player.blackHole[i].powerUpgrades = Math.round(\r\n          Math.log(player.blackHole[i].power / (180 / Math.pow(2, i))) / Math.log(1.35)\r\n        );\r\n        player.blackHole[i].durationUpgrades = Math.round(\r\n          Math.log(player.blackHole[i].duration / (10 - i * 3)) / Math.log(1.3)\r\n        );\r\n        delete player.blackHole[i].speed;\r\n        delete player.blackHole[i].power;\r\n        delete player.blackHole[i].duration;\r\n      }\r\n    },\r\n    () => {\r\n      // This migration was created by a mistake\r\n    },\r\n    migrations.convertAchivementsToNumbers,\r\n    migrations.adjustGameCreatedTime,\r\n    migrations.moveSavedStudyTrees,\r\n    player => {\r\n      // Leftover stuff from dev.updateTestSave\r\n      if (player.celestials.teresa.rmStore > Teresa.rmStoreMax) {\r\n        player.reality.realityMachines =\r\n          player.reality.realityMachines.plus(player.celestials.teresa.rmStore - Teresa.rmStoreMax);\r\n        player.celestials.teresa.rmStore = Teresa.rmStoreMax;\r\n      }\r\n      if (player.reality.upg) {\r\n        player.reality.upgradeBits = arrayToBits(player.reality.upg);\r\n        delete player.reality.upg;\r\n      }\r\n      if ((player.reality.upgradeBits & (1 << 25)) === 0) {\r\n        player.realityBuyer.isOn = false;\r\n      }\r\n      for (let i = 0; i < player.reality.glyphs.active.length; i++) {\r\n        const glyph = player.reality.glyphs.active[i];\r\n        if (glyph.type === \"power\" && glyph.effects.mult !== undefined) {\r\n          glyph.effects.mult = new Decimal(glyph.effects.mult);\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < player.reality.glyphs.inventory.length; i++) {\r\n        const glyph = player.reality.glyphs.inventory[i];\r\n        if (glyph.type === \"power\" && glyph.effects.mult !== undefined) {\r\n          glyph.effects.mult = new Decimal(glyph.effects.mult);\r\n        }\r\n      }\r\n    },\r\n    migrations.convertEPMult,\r\n    migrations.moveChallengeInfo,\r\n    migrations.adjustWhy,\r\n    migrations.adjustThemes,\r\n    migrations.removeAchPow,\r\n    migrations.adjustSacrificeConfirmation,\r\n    migrations.migrateNotation,\r\n    migrations.fixAutobuyers,\r\n    migrations.removeAutoIPProperties,\r\n    player => {\r\n      // Swapping glyph level with reality real time\r\n      player.lastTenRealities = player.lastTenRealities\r\n        .map(a => [a[0], a[1], a[3], a[2]]);\r\n    },\r\n    player => {\r\n      player.achievements.delete(157);\r\n      player.achievements.delete(156);\r\n      player.achievements.delete(155);\r\n      player.achievements.delete(153);\r\n      // Have to call this a second time, as player.why wasn't removed from the player.js the first time\r\n      migrations.adjustWhy(player);\r\n      migrations.adjustAchievementVars(player);\r\n    },\r\n    migrations.uniformDimensions,\r\n    migrations.removeEternityChallGoal,\r\n    player => {\r\n      // There were 3 black holes in player object\r\n      delete player.blackHole.pop();\r\n    },\r\n    player => {\r\n      const allGlyphs = player.reality.glyphs.active.concat(player.reality.glyphs.inventory);\r\n      for (let i = 0; i < allGlyphs.length; i++) {\r\n        allGlyphs[i].id = i;\r\n      }\r\n    },\r\n    // eslint-disable-next-line no-unused-vars\r\n    player => {\r\n      // This used to clearNewsArray, which cleared all news entries completely. Unsure what exactly that accomplished,\r\n      // but convertNews should accomplish the same migration purpose. However, this entry still needs to stay here as\r\n      // a no-op because otherwise save conversion will have an off-by-one error and generally break entirely.\r\n    },\r\n    player => {\r\n      migrations.removeTickspeed(player);\r\n      migrations.removePostC3Reward(player);\r\n    },\r\n    player => {\r\n      const allGlyphs = player.reality.glyphs.active.concat(player.reality.glyphs.inventory);\r\n      for (const glyph of allGlyphs) {\r\n        let effectBitmask = 0;\r\n        for (const effect of orderedEffectList) {\r\n          const typeEffect = separateEffectKey(effect);\r\n          if (glyph.type === typeEffect[0] && glyph.effects[typeEffect[1]] !== undefined) {\r\n            effectBitmask += 1 << GlyphEffects[effect].bitmaskIndex;\r\n          }\r\n        }\r\n        glyph.effects = effectBitmask;\r\n      }\r\n    },\r\n    // Ra exp formula changed\r\n    player => {\r\n      const pets = player.celestials.ra.pets;\r\n      for (const prop in pets) {\r\n        if (!Object.prototype.hasOwnProperty.call(pets, prop)) continue;\r\n        const pet = pets[prop];\r\n        const oldExp = pet.exp + 10000 * (Math.pow(1.12, pet.level - 1) - 1) / (0.12);\r\n        pet.level = 1;\r\n        pet.exp = Math.clampMin(oldExp, 0);\r\n      }\r\n      player.celestials.ra.unlocks = [];\r\n    },\r\n    // Ra exp formula changed again\r\n    player => {\r\n      const pets = player.celestials.ra.pets;\r\n      for (const prop in pets) {\r\n        if (!Object.prototype.hasOwnProperty.call(pets, prop)) continue;\r\n        const pet = pets[prop];\r\n        let oldExp = pet.exp;\r\n        for (let lv = 1; lv < pet.level; lv++) {\r\n          const floor5 = Math.floor(lv / 5);\r\n          const adjustedLevel = 2.5 * floor5 * (floor5 + 1) + (lv % 5) * (floor5 + 1);\r\n          oldExp += Math.floor(10000 * Math.pow(1.12, adjustedLevel - 1));\r\n        }\r\n        pet.level = 1;\r\n        pet.exp = Math.clampMin(oldExp, 0);\r\n      }\r\n      player.celestials.ra.unlocks = [];\r\n    },\r\n    migrations.renameMoney,\r\n    player => {\r\n      migrations.moveAutobuyers(player);\r\n      const old = player.realityBuyer;\r\n      const realityAutobuyer = player.auto.reality;\r\n      realityAutobuyer.mode = [\"rm\", \"glyph\", \"either\", \"both\"].indexOf(player.autoRealityMode);\r\n      realityAutobuyer.rm = old.rm;\r\n      realityAutobuyer.glyph = old.glyph;\r\n      realityAutobuyer.isActive = old.isOn;\r\n\r\n      const eternityAutobuyer = player.auto.eternity;\r\n      eternityAutobuyer.mode = [\"amount\", \"time\", \"relative\"].indexOf(player.autoEternityMode);\r\n      const condition = new Decimal(old.limit);\r\n      switch (player.autoEternityMode) {\r\n        case \"amount\":\r\n          eternityAutobuyer.amount = condition;\r\n          break;\r\n        case \"time\":\r\n          eternityAutobuyer.time = condition.lt(Decimal.NUMBER_MAX_VALUE)\r\n            ? condition.toNumber()\r\n            : eternityAutobuyer.time;\r\n          break;\r\n        case \"relative\":\r\n          eternityAutobuyer.xLast = condition;\r\n          break;\r\n      }\r\n\r\n      delete player.realityBuyer;\r\n      delete player.autoRealityMode;\r\n      delete player.autoEternityMode;\r\n    },\r\n    migrations.convertNews,\r\n    migrations.convertEternityCountToDecimal,\r\n    migrations.renameDimboosts,\r\n    player => {\r\n      // Reset reality autobuyer mode, since AUTO_REALITY_MODE was incorrectly starting from 1 and not from 0.\r\n      // Disable it also to not wreck people's long runs or smth\r\n      player.auto.reality.mode = 0;\r\n      player.auto.reality.isActive = false;\r\n    },\r\n    player => {\r\n      // Perk shop refactor\r\n      player.celestials.teresa.perkShop = [\r\n        Math.floor(Math.log(player.celestials.teresa.glyphLevelMult) / Math.log(1.05)),\r\n        Math.floor(Math.log(player.celestials.teresa.rmMult) / Math.log(2)),\r\n        Math.floor(Math.log(player.celestials.teresa.dtBulk) / Math.log(2)),\r\n        0];\r\n      delete player.celestials.teresa.glyphLevelMult;\r\n      delete player.celestials.teresa.rmMult;\r\n      delete player.celestials.teresa.dtBulk;\r\n    },\r\n    migrations.migrateConfirmations,\r\n    migrations.removeOtherTickspeedProps,\r\n    player => {\r\n      // These were accidentally added back in due to a bad merge conflict resolution\r\n      delete player.resets;\r\n      delete player.tickDecrease;\r\n    },\r\n    migrations.renameNewsOption,\r\n    migrations.removeDimensionCosts,\r\n    migrations.renameTickspeedPurchaseBumps,\r\n    player => {\r\n      const safeArrayToBits = x => ((x === undefined) ? 0 : arrayToBits(x));\r\n      player.celestials.teresa.unlockBits = safeArrayToBits(player.celestials.teresa.unlocks);\r\n      delete player.celestials.teresa.unlocks;\r\n      player.celestials.effarig.unlockBits = safeArrayToBits(player.celestials.effarig.unlocks);\r\n      delete player.celestials.effarig.unlocks;\r\n      player.celestials.v.unlockBits = safeArrayToBits(player.celestials.v.unlocks);\r\n      delete player.celestials.v.unlocks;\r\n      player.celestials.ra.unlockBits = safeArrayToBits(player.celestials.ra.unlocks);\r\n      delete player.celestials.ra.unlocks;\r\n      player.celestials.laitela.unlockBits = safeArrayToBits(player.celestials.laitela.unlocks);\r\n      delete player.celestials.laitela.unlocks;\r\n    },\r\n    player => {\r\n      player.reality.seed = Math.floor(Math.abs(player.reality.seed)) % 0xFFFFFFFF;\r\n    },\r\n    player => {\r\n      player.auto.sacrifice.multiplier = new Decimal(player.auto.sacrifice.multiplier);\r\n    },\r\n    migrations.changeC8Handling,\r\n    player => {\r\n      while (player.celestials.teresa.perkShop.length < 5) player.celestials.teresa.perkShop.push(0);\r\n    },\r\n    player => {\r\n      delete player.secretUnlocks.fixed;\r\n    },\r\n    player => {\r\n      delete player.celestials.effarig.quoteIdx;\r\n      delete player.celestials.enslaved.quoteIdx;\r\n    },\r\n    player => {\r\n      const tempAuto = player.celestials.teresa.perkShop[4];\r\n      const tempMusic = player.celestials.teresa.perkShop[3];\r\n      player.celestials.teresa.perkShop[3] = tempAuto;\r\n      player.celestials.teresa.perkShop[4] = tempMusic;\r\n    },\r\n    migrations.convertAchievementsToBits,\r\n    player => {\r\n      for (const dimension of player.dimensions.antimatter) {\r\n        delete dimension.power;\r\n      }\r\n      for (const dimension of player.dimensions.infinity) {\r\n        delete dimension.power;\r\n      }\r\n      for (const dimension of player.dimensions.time) {\r\n        delete dimension.power;\r\n      }\r\n    },\r\n    player => {\r\n      const cursedMask = 15;\r\n      const allGlyphs = player.reality.glyphs.active.concat(player.reality.glyphs.inventory);\r\n      for (const glyph of allGlyphs) {\r\n        if (glyph.type === \"cursed\") glyph.effects = cursedMask;\r\n      }\r\n    },\r\n    player => {\r\n      player.options.showHintText.alchemy = player.options.showAlchemyResources;\r\n      delete player.options.showAlchemyResources;\r\n    },\r\n    player => {\r\n      // Adds in effect selection settings and removes non-generated types while preserving old glyph filter settings\r\n      const oldSettings = player.celestials.effarig.autoGlyphSac.types;\r\n      const newSettings = GlyphTypes.list\r\n        .filter(type => generatedTypes.includes(type.id))\r\n        .mapToObject(t => t.id, t => ({\r\n          rarityThreshold: 0,\r\n          scoreThreshold: 0,\r\n          effectCount: 0,\r\n          effectChoices: t.effects.mapToObject(e => e.id, () => false),\r\n          effectScores: t.effects.mapToObject(e => e.id, () => 0),\r\n        }));\r\n      for (const type of generatedTypes) {\r\n        newSettings[type].rarityThreshold = oldSettings[type].rarityThreshold;\r\n        newSettings[type].scoreThreshold = oldSettings[type].scoreThreshold;\r\n        for (const effect of Object.keys(newSettings[type].effectScores)) {\r\n          newSettings[type].effectScores[effect] = oldSettings[type].effectScores[effect];\r\n        }\r\n      }\r\n      player.celestials.effarig.autoGlyphSac.types = newSettings;\r\n    },\r\n    player => {\r\n      player.reality.glyphs.inventorySize += 10;\r\n    },\r\n    player => {\r\n      player.celestials.v.unlockBits = 0;\r\n      // Adding this in case the player is loading a save (otherwise it\r\n      // doesn't update immediately and the player still has nonzero ST\r\n      // for the purpose of checking unlocks).\r\n      V.updateTotalRunUnlocks();\r\n      V.checkForUnlocks();\r\n    },\r\n    player => {\r\n      // Reset the v-unlocks again\r\n      player.celestials.v.unlockBits = 0;\r\n      // See above migration for an explanation of the below line.\r\n      V.updateTotalRunUnlocks();\r\n      V.checkForUnlocks();\r\n    },\r\n    player => {\r\n      player.reality.autoAchieve = !player.reality.disableAutoAchieve;\r\n      delete player.reality.disableAutoAchieve;\r\n      delete player.newEC10Test;\r\n    },\r\n    player => {\r\n      // Some older saves have screwed up Ra unlocks for some reason, this should fix that\r\n      player.celestials.ra.unlockBits = 0;\r\n      Ra.checkForUnlocks();\r\n    },\r\n    player => {\r\n      // Required for compatibility after V records refactor\r\n      player.celestials.v.runRecords[0] = -10;\r\n    },\r\n    player => {\r\n      delete player.celestials.v.cursedThisRun;\r\n    },\r\n    player => {\r\n      // Reset Ra unlocks again, because apparently Ra-Teresa Lv1 upgrades were always active due to an oversight\r\n      player.celestials.ra.unlockBits = 0;\r\n      Ra.checkForUnlocks();\r\n    },\r\n    player => {\r\n      // Glyph filter refactor (not worth the trouble of translating between the modes, but copy the configs)\r\n      Object.assign(player.celestials.effarig.glyphScoreSettings, player.celestials.effarig.autoGlyphSac);\r\n      player.celestials.effarig.glyphTrashMode = 0;\r\n      delete player.celestials.effarig.autoGlyphSac;\r\n      delete player.celestials.effarig.autoGlyphPick;\r\n    },\r\n    player => {\r\n      delete player.reality.glyphs.inventorySize;\r\n      for (const glyph of player.reality.glyphs.inventory) {\r\n        if (glyph.idx >= 10) {\r\n          glyph.idx += 10;\r\n        }\r\n      }\r\n    },\r\n    player => {\r\n      // Typo fix, as long as we have to delete a player property let's also\r\n      // correctly initialize the new one.\r\n      player.onlyEighthDimensions = player.onlyEighthDimensons;\r\n      delete player.onlyEighthDimensons;\r\n    },\r\n    player => {\r\n      for (const pet of Ra.pets.all) {\r\n        pet.level = Math.clampMax(pet.level, 25);\r\n      }\r\n      delete player.celestials.ra.compression;\r\n      if (Ra.unlocks.allGamespeedGlyphs.canBeApplied) {\r\n        const allGlyphs = player.reality.glyphs.active\r\n          .concat(player.reality.glyphs.inventory);\r\n        for (const glyph of allGlyphs) {\r\n          Glyphs.applyGamespeed(glyph);\r\n        }\r\n      }\r\n    },\r\n    player => {\r\n      for (let i = 0; i < player.celestials.ra.alchemy.length; i++) {\r\n        player.celestials.ra.alchemy[i].amount = Math.clampMax(\r\n          player.celestials.ra.alchemy[i].amount, Ra.alchemyResourceCap);\r\n      }\r\n    },\r\n    player => {\r\n      delete player.celestials.laitela.maxAmGained;\r\n      for (const dim of player.celestials.laitela.dimensions) {\r\n        dim.powerDMUpgrades = dim.powerUpgrades;\r\n        dim.powerDEUpgrades = 0;\r\n        delete dim.chanceUpgrades;\r\n        delete dim.powerUpgrades;\r\n      }\r\n      // Note that player.celestials.laitela.higgs is actually a string at this point\r\n      // (since conversion to Decimal hasn't happened yet).\r\n      player.celestials.laitela.darkMatterMult = Number(player.celestials.laitela.higgs) + 1;\r\n      delete player.celestials.laitela.anomalies;\r\n    },\r\n    player => {\r\n      delete player.achPow;\r\n      delete player.interval;\r\n      delete player.tickThreshold;\r\n      delete player.celestials.enslaved.maxQuotes;\r\n      delete player.celestials.v.quoteIdx;\r\n      delete player.celestials.ra.quoteIdx;\r\n    },\r\n    player => {\r\n      player.celestials.enslaved.totalDimCapIncrease = 0;\r\n      player.celestials.enslaved.tesseracts = 0;\r\n    },\r\n    player => {\r\n      delete player.auto.galaxy.buyMax;\r\n    },\r\n    player => {\r\n      delete player.reality.glyphs.sac.cursed;\r\n      Achievement(153).lock();\r\n      Achievement(157).lock();\r\n    },\r\n    player => {\r\n      // Return all PP spent on old V goal reduction\r\n      if (player.celestials.v.ppSpent) {\r\n        player.reality.pp += player.celestials.v.ppSpent;\r\n        delete player.celestials.v.ppSpent;\r\n      }\r\n    },\r\n    player => {\r\n      player.thisEternityMaxAM = new Decimal(0);\r\n    },\r\n    player => {\r\n      migrations.migrateLastTenRuns(player);\r\n      //  Put in a default value of 1 for realities.\r\n      player.lastTenRealities = player.lastTenRealities.map(x => [x[0], x[1], 1, Number(x[2]), x[3]]);\r\n      migrations.migrateIPGen(player);\r\n    },\r\n    player => {\r\n      player.noReplicantiGalaxies = player.reality.upgReqChecks[0];\r\n      delete player.reality.upgReqChecks;\r\n    },\r\n    player => {\r\n      player.bestGlyphStrength = player.reality.glyphs.active.concat(\r\n        player.reality.glyphs.inventory).map(g => g.strength).max();\r\n    },\r\n    player => {\r\n      player.options.showHintText.glyphEffectDots = player.options.showGlyphEffectDots;\r\n      delete player.options.showGlyphEffectDots;\r\n      migrations.renameCloudVariable(player);\r\n    },\r\n    player => {\r\n      const newPerks = new Set([...player.reality.perks].filter(x => x < 20 || x > 25));\r\n      const gainedPerkPoints = player.reality.perks.size - newPerks.size;\r\n      player.reality.pp += gainedPerkPoints;\r\n      player.reality.perks = newPerks;\r\n      if (gainedPerkPoints > 0) {\r\n        Modal.message.show(\r\n          \"Some of your perks (glyph perks) were removed. The perk points you spent on them have been refunded.\");\r\n      }\r\n    },\r\n    player => {\r\n      delete player.reality.glyphs.last;\r\n    },\r\n    player => {\r\n      if (player.reality.secondGaussian === null) {\r\n        // Future-proof against potential changes to the default value\r\n        // (as a special case of not using state accessors).\r\n        player.reality.secondGaussian = 1e6;\r\n      }\r\n    },\r\n    player => {\r\n      delete player.celestials.laitela.reachedSingularityCapLimit;\r\n      delete player.celestials.laitela.secondsSinceCappedTime;\r\n      delete player.celestials.laitela.singularityAutoCapLimit;\r\n      delete player.celestials.laitela.singularityTime;\r\n      delete player.celestials.laitela.autoAnnihilationTimer;\r\n      delete player.celestials.laitela.annihilated;\r\n      delete player.celestials.laitela.secondsSinceReachedSingularity;\r\n      player.celestials.laitela.darkMatterMult = Math.clampMin(player.celestials.laitela.darkMatterMult, 1);\r\n      player.celestials.laitela.dimensions.forEach(d => d.ascensionCount = 0);\r\n    },\r\n    player => {\r\n      const allRandomGlyphs = player.reality.glyphs.active\r\n        .concat(player.reality.glyphs.inventory)\r\n        .filter(i => i.type !== \"companion\");\r\n      for (const glyph of allRandomGlyphs) {\r\n        glyph.strength = Math.ceil(glyph.strength * 400) / 400;\r\n      }\r\n    },\r\n    player => {\r\n      if (player.dimensions.normal !== undefined) {\r\n        for (let i = 0; i < player.dimensions.normal.length; i++) {\r\n          const dimension = player.dimensions.normal[i];\r\n          player.dimensions.antimatter[i].bought = dimension.bought;\r\n          player.dimensions.antimatter[i].costBumps = dimension.costBumps;\r\n          player.dimensions.antimatter[i].amount = new Decimal(dimension.amount);\r\n        }\r\n        delete player.dimensions.normal;\r\n      }\r\n    },\r\n    player => {\r\n      if (player.options.news.enabled === undefined) {\r\n        player.options.news = {\r\n          enabled: player.options.news,\r\n          repeatBuffer: 40,\r\n          AIChance: 0,\r\n          speed: 1\r\n        };\r\n      }\r\n    },\r\n    player => {\r\n      delete player.options.confirmations.glyphTrash;\r\n    },\r\n    player => {\r\n      migrations.standardizeUncompletedTimes(player);\r\n      if (player.bestReality === 999999999999) player.bestReality = Number.MAX_VALUE;\r\n      if (player.bestRealityRealTime === 999999999999) player.bestRealityRealTime = Number.MAX_VALUE;\r\n      for (let i = 0; i < 10; i++) {\r\n        if (player.lastTenRealities[i][0] === 2678400000) player.lastTenRealities[i][0] = Number.MAX_VALUE;\r\n        if (player.lastTenRealities[i][3] === 26784000) player.lastTenRealities[i][3] = Number.MAX_VALUE;\r\n      }\r\n    },\r\n    player => {\r\n      for (const script of Object.values(player.reality.automator.scripts)) {\r\n        script.content =\r\n          script.content.replace(/^([ \\t]*)(wait|if|while|until)([\\t ]+)(completions)/igmu, \"$1$2$3pending $4\");\r\n      }\r\n    },\r\n    player => {\r\n      player.celestials.ra.unlockBits &= ~(1 << 29);\r\n    },\r\n    player => {\r\n      player.records.gameCreatedTime = player.gameCreatedTime;\r\n      player.records.totalTimePlayed = player.totalTimePlayed;\r\n      player.records.realTimePlayed = player.realTimePlayed;\r\n      player.records.totalAntimatter = new Decimal(player.totalAntimatter);\r\n      for (let i = 0; i < 10; i++) {\r\n        player.records.lastTenInfinities[i][0] = player.lastTenRuns[i][0];\r\n        player.records.lastTenEternities[i][0] = player.lastTenEternities[i][0];\r\n        player.records.lastTenRealities[i][0] = player.lastTenRealities[i][0];\r\n      }\r\n      player.options.showLastTenInfinitiesGainPerTime = player.options.showLastTenRunsGainPerTime;\r\n      delete player.options.showLastTenRunsGainPerTime;\r\n\r\n      player.records.thisInfinity.time = player.thisInfinityTime;\r\n      player.records.thisInfinity.realTime = player.thisInfinityRealTime;\r\n      player.records.thisInfinity.lastBuyTime = player.thisInfinityLastBuyTime;\r\n      player.records.thisInfinity.maxAM = new Decimal(player.thisInfinityMaxAM);\r\n      player.records.thisInfinity.bestIPmin = new Decimal(player.bestIPminThisInfinity);\r\n\r\n      player.records.bestInfinity.time = player.bestInfinityTime;\r\n      player.records.bestInfinity.realTime = player.bestInfinityRealTime;\r\n      player.records.bestInfinity.bestIPminEternity = new Decimal(player.bestIPminThisEternity);\r\n      player.records.bestInfinity.bestIPminReality = new Decimal(player.bestEPThisReality);\r\n\r\n      player.records.thisEternity.time = player.thisEternity;\r\n      player.records.thisEternity.realTime = player.thisEternityRealTime;\r\n      player.records.thisEternity.maxAM = new Decimal(player.thisEternityMaxAM);\r\n      player.records.thisEternity.maxIP = new Decimal(player.thisEternityMaxIP);\r\n      player.records.thisEternity.bestIPMsWithoutMaxAll = new Decimal(player.bestIpPerMsWithoutMaxAll);\r\n      player.records.thisEternity.bestEPmin = new Decimal(player.bestEPminThisEternity);\r\n      player.records.thisEternity.bestInfinitiesPerMs = new Decimal(player.bestInfinitiesPerMs);\r\n\r\n      player.records.bestEternity.time = player.bestEternity;\r\n      // I have no idea where real time best Eternity is, not sure if it exists?\r\n      player.records.bestEternity.bestEPminReality = new Decimal(player.bestEPminThisReality);\r\n\r\n      player.records.thisReality.time = player.thisReality;\r\n      player.records.thisReality.realTime = player.thisRealityRealTime;\r\n      player.records.thisReality.bestEternitiesPerMs = new Decimal(player.bestEternitiesPerMs);\r\n\r\n      player.records.bestReality.RMmin = new Decimal(player.bestRMmin);\r\n      player.records.bestReality.RMminSet = player.bestRMminSet;\r\n      player.records.bestReality.glyphLevel = player.bestGlyphLevel;\r\n      player.records.bestReality.glyphStrength = player.bestGlyphStrength;\r\n      player.records.bestReality.glyphLevelSet = player.bestGlyphLevelSet;\r\n      player.records.bestReality.bestEP = new Decimal(player.bestEP);\r\n      player.records.bestReality.bestEPSet = player.bestEPSet;\r\n      player.records.bestReality.time = player.bestReality;\r\n      player.records.bestReality.realTime = player.bestRealityRealTime;\r\n      player.records.bestReality.speedSet = player.bestSpeedSet;\r\n\r\n      delete player.gameCreatedTime;\r\n      delete player.totalTimePlayed;\r\n      delete player.realTimePlayed;\r\n      delete player.totalAntimatter;\r\n      delete player.lastTenRuns;\r\n      delete player.lastTenEternities;\r\n      delete player.lastTenRealities;\r\n\r\n      delete player.thisInfinityTime;\r\n      delete player.thisInfinityRealTime;\r\n      delete player.thisInfinityLastBuyTime;\r\n      delete player.thisInfinityMaxAM;\r\n      delete player.bestIPminThisInfinity;\r\n\r\n      delete player.bestInfinityTime;\r\n      delete player.bestInfinityRealTime;\r\n      delete player.bestIPminThisEternity;\r\n\r\n      delete player.thisEternity;\r\n      delete player.thisEternityRealTime;\r\n      delete player.thisEternityMaxAM;\r\n      delete player.thisEternityMaxIP;\r\n      delete player.bestIpPerMsWithoutMaxAll;\r\n      delete player.bestEPminThisEternity;\r\n      delete player.bestInfinitiesPerMs;\r\n      delete player.bestIPminThisEternity;\r\n\r\n      delete player.bestEternity;\r\n      delete player.bestEPminThisReality;\r\n\r\n      delete player.thisReality;\r\n      delete player.thisRealityRealTime;\r\n      delete player.bestEternitiesPerMs;\r\n      delete player.bestEPThisReality;\r\n\r\n      delete player.bestRMmin;\r\n      delete player.bestRMminSet;\r\n      delete player.bestGlyphLevel;\r\n      delete player.bestGlyphStrength;\r\n      delete player.bestGlyphLevelSet;\r\n      delete player.bestEP;\r\n      delete player.bestEPSet;\r\n      delete player.bestReality;\r\n      delete player.bestRealityRealTime;\r\n      delete player.bestSpeedSet;\r\n    },\r\n    player => {\r\n      player.replicanti.boughtGalaxyCap = player.replicanti.gal;\r\n      player.reality.perkPoints = player.reality.pp;\r\n      player.celestials.teresa.pouredAmount = player.celestials.teresa.rmStore;\r\n      player.celestials.laitela.darkMatter = new Decimal(player.celestials.laitela.matter);\r\n      player.celestials.laitela.maxDarkMatter = new Decimal(player.celestials.laitela.maxMatter);\r\n      player.celestials.ra.pets.teresa.memories = player.celestials.ra.pets.teresa.exp;\r\n      player.celestials.ra.pets.effarig.memories = player.celestials.ra.pets.effarig.exp;\r\n      player.celestials.ra.pets.enslaved.memories = player.celestials.ra.pets.enslaved.exp;\r\n      player.celestials.ra.pets.v.memories = player.celestials.ra.pets.v.exp;\r\n      player.achievementChecks = {\r\n        noSacrifices: player.noSacrifices,\r\n        onlyEighthDimensions: player.onlyEighthDimensions,\r\n        onlyFirstDimensions: player.onlyFirstDimensions,\r\n        noEighthDimensions: player.noEighthDimensions,\r\n        noFirstDimensions: player.noFirstDimensions,\r\n        noAntimatterProduced: player.noAntimatterProduced,\r\n        noTriadStudies: player.noTriadStudies,\r\n        noTheoremPurchases: player.noTheoremPurchases,\r\n        noInfinitiesThisReality: player.noInfinitiesThisReality,\r\n        noEternitiesThisReality: player.noEternitiesThisReality,\r\n        noReplicantiGalaxies: player.noReplicantiGalaxies,\r\n        // Not necessarily accurate, but these defaults prevent some people from effortlessly completing some\r\n        // otherwise very difficult unlocks immediately upon migration\r\n        maxID1ThisReality: new Decimal(1),\r\n        continuumThisReality: true,\r\n      };\r\n      player.dilation.baseTachyonGalaxies = player.dilation.baseFreeGalaxies;\r\n      player.dilation.totalTachyonGalaxies = player.dilation.freeGalaxies;\r\n\r\n      delete player.replicanti.gal;\r\n      delete player.reality.pp;\r\n      delete player.celestials.teresa.rmStore;\r\n      delete player.celestials.laitela.matter;\r\n      delete player.celestials.laitela.maxMatter;\r\n      delete player.celestials.ra.pets.teresa.exp;\r\n      delete player.celestials.ra.pets.effarig.exp;\r\n      delete player.celestials.ra.pets.enslaved.exp;\r\n      delete player.celestials.ra.pets.v.exp;\r\n      delete player.noSacrifices;\r\n      delete player.onlyEighthDimensions;\r\n      delete player.onlyFirstDimensions;\r\n      delete player.noEighthDimensions;\r\n      delete player.noFirstDimensions;\r\n      delete player.noAntimatterProduced;\r\n      delete player.noTriadStudies;\r\n      delete player.noTheoremPurchases;\r\n      delete player.noInfinitiesThisReality;\r\n      delete player.noEternitiesThisReality;\r\n      delete player.noReplicantiGalaxies;\r\n      delete player.dilation.baseFreeGalaxies;\r\n      delete player.dilation.freeGalaxies;\r\n    },\r\n    player => {\r\n      player.auto.infinityDims = Array.range(0, 8).map(() => ({ lastTick: 0 }));\r\n      for (let i = 0; i < 8; i++) {\r\n        player.auto.infinityDims[i].isActive = player.infDimBuyers[i];\r\n      }\r\n      player.auto.timeDims = Array.range(0, 8).map(() => ({ lastTick: 0 }));\r\n      for (let i = 0; i < 8; i++) {\r\n        player.auto.timeDims[i].isActive = player.reality.tdbuyers[i];\r\n      }\r\n      player.auto.replicantiUpgrades = Array.range(0, 3).map(() => ({ lastTick: 0 }));\r\n      for (let i = 0; i < 3; i++) {\r\n        player.auto.replicantiUpgrades[i].isActive = player.replicanti.auto[i];\r\n      }\r\n      if (player.dilation.auto === undefined) {\r\n        // Not defined on old saves, we define it only to delete it later in this migration\r\n        player.dilation.auto = [true, true, true];\r\n      }\r\n      player.auto.dilationUpgrades = Array.range(0, 3).map(() => ({ lastTick: 0 }));\r\n      for (let i = 0; i < 3; i++) {\r\n        player.auto.dilationUpgrades[i].isActive = player.dilation.auto[i];\r\n      }\r\n      player.auto.blackHolePower = Array.range(0, 2).map(() => ({ lastTick: 0 }));\r\n      for (let i = 0; i < 2; i++) {\r\n        player.auto.blackHolePower[i].isActive = player.blackHole[i].autoPower;\r\n      }\r\n      if (player.reality.rebuyablesAuto === undefined) {\r\n        // Not defined on old saves, we define it only to delete it later in this migration\r\n        player.reality.rebuyablesAuto = [true, true, true, true, true];\r\n      }\r\n      player.auto.realityUpgrades = Array.range(0, 5).map(() => ({ lastTick: 0 }));\r\n      for (let i = 0; i < 5; i++) {\r\n        player.auto.realityUpgrades[i].isActive = player.reality.rebuyablesAuto[i];\r\n      }\r\n      // Note: player.autobuyers, the old way of storing autobuyers, seems to have gotten lost in dev migrations\r\n      if (player.auto.antimatterDims === undefined) {\r\n        player.auto.antimatterDims = player.auto.dimensions;\r\n      }\r\n      player.auto.replicantiGalaxies.isActive = player.replicanti.galaxybuyer;\r\n      player.auto.ipMultBuyer.isActive = player.infMultBuyer;\r\n      player.auto.epMultBuyer.isActive = player.reality.epmultbuyer;\r\n      player.auto.timeTheorems.isActive = player.ttbuyer;\r\n      player.auto.bigCrunch.xCurrent = player.auto.bigCrunch.xLast;\r\n      player.auto.eternity.xCurrent = player.auto.eternity.xLast;\r\n      player.auto.bulkOn = player.options.bulkOn;\r\n      player.auto.autobuyerOn = player.options.autobuyerOn;\r\n      player.auto.disableContinuum = player.options.disableContinuum;\r\n\r\n      delete player.auto.dimensions;\r\n      delete player.infDimBuyers;\r\n      delete player.auto.infDimTimer;\r\n      delete player.reality.tdbuyers;\r\n      delete player.auto.timeDimTimer;\r\n      delete player.replicanti.galaxybuyer;\r\n      delete player.replicanti.auto;\r\n      delete player.auto.repUpgradeTimer;\r\n      delete player.ttbuyer;\r\n      delete player.auto.ttTimer;\r\n      delete player.dilation.auto;\r\n      delete player.auto.dilUpgradeTimer;\r\n      delete player.blackHole[0].autoPower;\r\n      delete player.blackHole[1].autoPower;\r\n      delete player.reality.rebuyablesAuto;\r\n      delete player.reality.epmultbuyer;\r\n      delete player.infMultBuyer;\r\n      delete player.auto.bigCrunch.xLast;\r\n      delete player.auto.eternity.xLast;\r\n      delete player.options.bulkOn;\r\n      delete player.options.autobuyerOn;\r\n      delete player.options.disableContinuum;\r\n    },\r\n    migrations.convertTimeTheoremPurchases,\r\n    migrations.infinitiedConversion,\r\n    player => {\r\n      delete player.saveOverThresholdFlag;\r\n      delete player.saveOverThresholdFlagModalDisplayed;\r\n    },\r\n    player => {\r\n      if (!Autobuyer.reality.isUnlocked) player.auto.reality.isActive = false;\r\n    },\r\n    player => {\r\n      // Delete PEC5 (id 64)\r\n      if (player.reality.perks.has(64)) {\r\n        player.reality.perks.delete(64);\r\n        player.reality.perkPoints++;\r\n      }\r\n\r\n      let reqBitmask = 0;\r\n      for (let i = 0; i <= player.reality.upgReqs.length; i++) {\r\n        if (player.reality.upgReqs[i]) reqBitmask |= (1 << i);\r\n      }\r\n      player.reality.upgReqs = reqBitmask;\r\n    },\r\n    player => {\r\n      // Delete SAM2 (id 11)\r\n      if (player.reality.perks.has(11)) {\r\n        player.reality.perks.delete(11);\r\n        player.reality.perkPoints++;\r\n      }\r\n      if (player.reality.perks.has(10)) Perk.startAM.onPurchased();\r\n    },\r\n    player => {\r\n      player.achievementChecks.maxStudiesThisReality = player.timestudy.studies.length;\r\n      player.celestials.teresa.lastRepeatedMachines = new Decimal(player.celestials.teresa.lastRepeatedRM);\r\n      delete player.celestials.teresa.lastRepeatedRM;\r\n    },\r\n    player => {\r\n      // Make sure scripts don't have any gaps in indices, and load up the correct script on migration\r\n      let newID = 1;\r\n      let selectedID = 1;\r\n      const shiftedScripts = {};\r\n      for (const id of Object.keys(player.reality.automator.scripts)) {\r\n        shiftedScripts[newID] = player.reality.automator.scripts[id];\r\n        shiftedScripts[newID].id = newID;\r\n        if (id === player.reality.automator.state.editorScript) selectedID = newID;\r\n        newID++;\r\n      }\r\n      player.reality.automator.scripts = shiftedScripts;\r\n      player.reality.automator.state.editorScript = selectedID;\r\n\r\n      delete player.reality.automator.lastID;\r\n    },\r\n    migrations.deleteDimboostBulk,\r\n    migrations.removePriority,\r\n    player => {\r\n      player.reality.realityMachines = player.reality.realityMachines.floor();\r\n    },\r\n    migrations.deleteFloatingTextOption,\r\n    player => {\r\n      // Delete ACH5\r\n      if (player.reality.perks.has(206)) {\r\n        player.reality.perks.delete(206);\r\n        player.reality.perkPoints++;\r\n      }\r\n    },\r\n    player => {\r\n      player.records.thisEternity.maxIP = new Decimal(player.infinityPoints);\r\n      player.auto.bigCrunch.xHighest = player.auto.bigCrunch.xCurrent;\r\n      player.auto.eternity.xHighest = player.auto.eternity.xCurrent;\r\n      delete player.auto.bigCrunch.xCurrent;\r\n      delete player.auto.eternity.xCurrent;\r\n    },\r\n    player => {\r\n      // Fix an issue where a boolean property could become int and trigger number checking code.\r\n      player.achievementChecks.continuumThisReality = Boolean(player.achievementChecks.continuumThisReality);\r\n    },\r\n    player => {\r\n      player.secretUnlocks.spreadingCancer = player.spreadingCancer;\r\n      delete player.spreadingCancer;\r\n    },\r\n    player => {\r\n      delete player.celestials.enslaved.totalDimCapIncrease;\r\n    },\r\n    player => {\r\n      for (const i of player.reality.glyphs.undo) {\r\n        for (const j of [\"thisInfinityTime\", \"thisInfinityRealTime\", \"thisEternityTime\", \"thisEternityRealTime\"]) {\r\n          if (!(j in i)) {\r\n            // This is 1 second, seems like a solid default value for saves without the property.\r\n            i[j] = 1000;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    player => {\r\n      // Requirement migration/refactor\r\n      const oldChecks = player.achievementChecks;\r\n      player.requirementChecks = {\r\n        infinity: {\r\n          maxAll: player.usedMaxAll,\r\n          noSacrifice: oldChecks.noSacrifices,\r\n          noAD8: oldChecks.noEighthDimensions,\r\n        },\r\n        eternity: {\r\n          onlyAD1: oldChecks.onlyFirstDimensions,\r\n          onlyAD8: oldChecks.onlyEighthDimensions,\r\n          noAD1: oldChecks.noFirstDimensions,\r\n          noRG: oldChecks.noEighthDimensions,\r\n        },\r\n        reality: {\r\n          noAM: oldChecks.noAntimatterProduced,\r\n          noTriads: oldChecks.noTriadStudies,\r\n          noPurchasedTT: oldChecks.noTheoremPurchases,\r\n          noInfinities: oldChecks.noInfinitiesThisReality,\r\n          noEternities: oldChecks.noEternitiesThisReality,\r\n          noContinuum: !oldChecks.continuumThisReality,\r\n          maxID1: new Decimal(oldChecks.maxID1ThisReality),\r\n          maxStudies: oldChecks.maxStudiesThisReality,\r\n          maxGlyphs: player.celestials.v.maxGlyphsThisRun,\r\n          slowestBH: player.minNegativeBlackHoleThisReality,\r\n        },\r\n        permanent: {\r\n          cancerGalaxies: player.secretUnlocks.spreadingCancer,\r\n          singleTickspeed: player.secretUnlocks.why,\r\n          perkTreeDragging: player.secretUnlocks.dragging,\r\n        }\r\n      };\r\n      delete player.usedMaxAll;\r\n      delete player.secretUnlocks.spreadingCancer;\r\n      delete player.secretUnlocks.why;\r\n      delete player.secretUnlocks.dragging;\r\n      delete player.achievementChecks;\r\n      delete player.minNegativeBlackHoleThisReality;\r\n      delete player.celestials.v.maxGlyphsThisRun;\r\n\r\n      // Refactor news storage format to bitmask array\r\n      if (Array.isArray(player.news)) {\r\n        const oldNewsArray = player.news;\r\n        delete player.news;\r\n        player.news = {};\r\n        player.news.seen = {};\r\n        for (const id of oldNewsArray) NewsHandler.addSeenNews(id);\r\n        player.news.totalSeen = NewsHandler.uniqueTickersSeen;\r\n      }\r\n\r\n      // Separate news-specific data\r\n      player.news.specialTickerData = {\r\n        uselessNewsClicks: player.secretUnlocks.uselessNewsClicks,\r\n        paperclips: player.secretUnlocks.paperclips,\r\n        newsQueuePosition: player.secretUnlocks.newsQueuePosition,\r\n        eiffelTowerChapter: player.secretUnlocks.eiffelTowerChapter,\r\n      };\r\n      delete player.secretUnlocks.uselessNewsClicks;\r\n      delete player.secretUnlocks.paperclips;\r\n      delete player.secretUnlocks.newsQueuePosition;\r\n      delete player.secretUnlocks.eiffelTowerChapter;\r\n    },\r\n    migrations.refactorDoubleIPRebuyable,\r\n    player => {\r\n      if (player.requirementChecks.reality.slowestBH === 0) player.requirementChecks.reality.slowestBH = 1;\r\n    },\r\n    player => {\r\n      // #1764 fix - EM200 bug from eternity autobuyer appearing to be zero but not actually being zero\r\n      if (player.auto.eternity.amount.lt(0.01)) player.auto.eternity.amount = new Decimal(0);\r\n    },\r\n    player => {\r\n      player.options.hiddenSubtabBits = Array.repeat(0, 11);\r\n      player.options.lastOpenSubtab = Array.repeat(0, 11);\r\n    },\r\n    player => {\r\n      const highestRefinementData = [\r\n        { name: \"power\", id: ALCHEMY_RESOURCE.POWER },\r\n        { name: \"infinity\", id: ALCHEMY_RESOURCE.INFINITY },\r\n        { name: \"time\", id: ALCHEMY_RESOURCE.TIME },\r\n        { name: \"replication\", id: ALCHEMY_RESOURCE.REPLICATION },\r\n        { name: \"dilation\", id: ALCHEMY_RESOURCE.DILATION },\r\n        { name: \"effarig\", id: ALCHEMY_RESOURCE.EFFARIG }\r\n      ];\r\n      for (const resource of highestRefinementData) {\r\n        player.celestials.ra.highestRefinementValue[resource.name] = player.celestials.ra.alchemy[resource.id].amount;\r\n      }\r\n    },\r\n    migrations.deletePostChallUnlocked,\r\n    player => {\r\n      // Delete PEC4 (id 63)\r\n      if (player.reality.perks.has(63)) {\r\n        player.reality.perks.delete(63);\r\n        player.reality.perkPoints++;\r\n      }\r\n      // Delete TTMA4 (id 107)\r\n      if (player.reality.perks.has(107)) {\r\n        player.reality.perks.delete(107);\r\n        player.reality.perkPoints++;\r\n      }\r\n      delete player.auto.timeTheorems.lastTick;\r\n    },\r\n    player => {\r\n      // We can't reliably check if the player has or hasn't unlocked the automator via automator points without\r\n      // essentially copy-pasting all the automator point code here (in the interest of avoiding use of globals).\r\n      // So, in the range of progress where it's unclear, we stop it entirely in case it hasn't actually unlocked yet.\r\n      if (player.realities > 5 && player.realities < 50) {\r\n        player.reality.automator.state.mode = 1;\r\n        player.reality.automator.state.stack = [];\r\n        player.reality.automator.state.repeat = false;\r\n        player.reality.automator.state.forceRestart = false;\r\n      }\r\n    },\r\n    player => {\r\n      for (const resource of player.celestials.ra.alchemy) {\r\n        // We shouldn't access global variables in migrations so instead of Ra.alchemyResourceCap we use 25000.\r\n        resource.amount = Math.clampMax(resource.amount, 25000);\r\n      }\r\n    },\r\n    player => {\r\n      const triadRegex = new RegExp(`T(\\\\d)`, \"gu\");\r\n      player.timestudy.presets.forEach(p => p.studies = p.studies.replaceAll(triadRegex, \"30$1\"));\r\n      // This may also potentially change variable or preset names in scripts, breaking them, but the likelihood of\r\n      // this being a widespread issue is low enough that this is probably a better option than a really obtuse regex\r\n      for (const script of Object.values(player.reality.automator.scripts)) {\r\n        script.content = script.content.replaceAll(triadRegex, \"30$1\");\r\n      }\r\n\r\n      if (player.celestials.v.triadStudies !== undefined) {\r\n        player.timestudy.studies = player.timestudy.studies.concat(\r\n          player.celestials.v.triadStudies.map(id => id + 300));\r\n        delete player.celestials.v.triadStudies;\r\n      }\r\n    },\r\n    player => {\r\n      delete player.options.confirmations.harshAutoClean;\r\n    },\r\n    player => {\r\n      player.celestials.laitela.singularitySorting = {\r\n        // Added more support in singularity milestone list, uses enum SINGULARITY_MILESTONE_RESOURCE in constants.js\r\n        displayResource: player.options.showCondenseToMilestone ? 1 : 0,\r\n        sortResource: 0,\r\n        showCompleted: 0,\r\n        sortOrder: 0,\r\n      };\r\n      delete player.options.showCondenseToMilestone;\r\n    },\r\n    () => {\r\n      // This is just an empty patch because some orders got really messed up. Sorry -Scar\r\n    },\r\n    player => {\r\n      player.reality.glyphs.sets = player.reality.glyphs.sets.map(glyphs => ({ glyphs, name: \"\" }));\r\n    },\r\n    player => {\r\n      // Remove any accidental recursion that may have been introduced by the above patch\r\n      while (!Array.isArray(player.reality.glyphs.sets[0].glyphs)) {\r\n        player.reality.glyphs.sets = player.reality.glyphs.sets.map(glyphs => (glyphs.glyphs));\r\n      }\r\n    },\r\n    player => {\r\n      // For saves before cel7 existed, it will first add this prop (as a number) and then run this migration code. For\r\n      // saves which are already in cel7, this prop will already exist as a Decimal. This workaround handles both cases\r\n      player.celestials.pelle.rifts.chaos.fill = new Decimal(player.celestials.pelle.rifts.chaos.fill).toNumber();\r\n\r\n      delete player.celestials.pelle.compact;\r\n      player.celestials.pelle.collapsed = {\r\n        upgrades: false,\r\n        rifts: false,\r\n        galaxies: false\r\n      };\r\n      player.celestials.pelle.galaxyGenerator.unlocked = player.celestials.pelle.galaxyGenerator.generatedGalaxies > 0;\r\n    },\r\n    player => {\r\n      if (player.celestials.pelle.doomed) player.achievementBits[17] |= 1;\r\n      if (player.celestials.pelle.upgrades.has(4)) player.achievementBits[17] |= 2;\r\n      if (player.celestials.pelle.doomed && player.challenge.infinity.completedBits === 510) {\r\n        player.achievementBits[17] |= (1 << 2);\r\n      }\r\n      if (player.timestudy.studies.compact().includes(181)) player.achievementBits[17] |= (1 << 5);\r\n    },\r\n    player => {\r\n      player.achievementBits[16] |= (player.achievementBits[16] & (1 << 4)) << 3;\r\n      player.achievementBits[16] &= ~(1 << 4);\r\n      player.achievementBits[16] |= (player.achievementBits[16] & (1 << 2)) << 2;\r\n      player.achievementBits[16] &= ~(1 << 2);\r\n    },\r\n    player => {\r\n      player.achievementBits[17] &= ~(1 << 5);\r\n      if (player.timestudy.studies.compact().includes(181) && player.celestials.pelle.doomed) {\r\n        player.achievementBits[17] |= (1 << 5);\r\n      }\r\n    },\r\n    player => {\r\n      if (player.celestials.pelle.doomed && (player.challenge.infinity.completedBits & (1 << 5)) !== 0) {\r\n        player.achievementBits[17] |= (1 << 2);\r\n      } else {\r\n        player.achievementBits[17] &= ~(1 << 2);\r\n      }\r\n    },\r\n    player => {\r\n      player.celestials.pelle.collapsed = player.celestials.collapsed;\r\n      player.celestials.pelle.showBought = player.celestials.showBought;\r\n      delete player.celestials.collapsed;\r\n      delete player.celestials.showBought;\r\n    },\r\n    migrations.infMultNameConversion,\r\n    player => {\r\n      if (player.celestials.pelle.collapsed === undefined) {\r\n        player.celestials.pelle.collapsed = {\r\n          upgrades: false,\r\n          rifts: false,\r\n          galaxies: false\r\n        };\r\n      }\r\n    },\r\n    player => {\r\n      const from = player.celestials.laitela;\r\n      if (from.automation) {\r\n        player.auto.darkMatterDims.isActive = from.automation.dimensions;\r\n        player.auto.ascension.isActive = from.automation.ascension;\r\n        player.auto.annihilation.isActive = from.automation.singularity;\r\n        player.auto.singularity.isActive = from.automation.annihilation;\r\n\r\n        delete player.celestials.laitela.automation.dimensions;\r\n        delete player.celestials.laitela.automation.ascension;\r\n        delete player.celestials.laitela.automation.singularity;\r\n        delete player.celestials.laitela.automation.annihilation;\r\n      }\r\n\r\n      player.auto.darkMatterDims.lastTick = from.darkAutobuyerTimer;\r\n      player.auto.ascension.lastTick = from.darkAutobuyerTimer;\r\n      player.auto.annihilation.multiplier = from.autoAnnihilationSetting;\r\n\r\n      delete player.celestials.laitela.darkAutobuyerTimer;\r\n      delete player.celestials.laitela.darkAutobuyerTimer;\r\n      delete player.celestials.laitela.autoAnnihilationSetting;\r\n    },\r\n    migrations.etercreqConversion,\r\n    player => {\r\n      delete player.options.confirmations.reality;\r\n    },\r\n    player => {\r\n      const hasDimboost = player.celestials.pelle.upgrades.has(19);\r\n      const hasDilUpg = player.celestials.pelle.upgrades.has(18);\r\n      player.celestials.pelle.upgrades.delete(18);\r\n      player.celestials.pelle.upgrades.delete(19);\r\n      if (hasDimboost) player.celestials.pelle.upgrades.add(18);\r\n      if (hasDilUpg) player.celestials.pelle.upgrades.add(19);\r\n    },\r\n    player => {\r\n      delete player.auto.bulkOn;\r\n    },\r\n    player => {\r\n      player.requirementChecks.permanent.emojiGalaxies = player.requirementChecks.permanent.cancerGalaxies;\r\n      delete player.requirementChecks.permanent.cancerGalaxies;\r\n    },\r\n    player => {\r\n      delete player.celestials.effarig.unlocksBits;\r\n      delete player.celestials.ra.unlocksBits;\r\n    },\r\n    player => {\r\n      for (const script of Object.values(player.reality.automator.scripts)) {\r\n        script.id = parseInt(script.id, 10);\r\n      }\r\n    },\r\n    player => {\r\n      player.secretUnlocks.themes.delete(\"S4Cancer\");\r\n      player.secretUnlocks.themes.add(\"S4Design\");\r\n    },\r\n    player => {\r\n      player.reality.automator.state.editorScript = Number(player.reality.automator.state.editorScript);\r\n      // I'm not sure if there's any error with the type of topLevelScript, but better safe than sorry\r\n      player.reality.automator.state.topLevelScript = Number(player.reality.automator.state.topLevelScript);\r\n    },\r\n    player => {\r\n      // Move dil upg no reset and tachyon particles no reset\r\n      if (player.celestials.pelle.upgrades.delete(20)) player.celestials.pelle.upgrades.add(21);\r\n      if (player.celestials.pelle.upgrades.delete(19)) player.celestials.pelle.upgrades.add(20);\r\n\r\n      // Dimboost upgrade id was moved from 18 to 7 -- Make the corresponding change\r\n      // Galaxy upgrade was inserted at 11. 7-10 should only be moved forward 1 place\r\n      // and 10-17 2 places forward.\r\n      const hasDimboostsResetNothing = player.celestials.pelle.upgrades.delete(18);\r\n      for (let i = 17; i >= 10; i--) {\r\n        if (player.celestials.pelle.upgrades.delete(i)) player.celestials.pelle.upgrades.add(i + 2);\r\n      }\r\n      for (let i = 9; i >= 7; i--) {\r\n        if (player.celestials.pelle.upgrades.delete(i)) player.celestials.pelle.upgrades.add(i + 1);\r\n      }\r\n      if (hasDimboostsResetNothing) player.celestials.pelle.upgrades.add(7);\r\n    },\r\n    player => {\r\n      const cel = player.celestials;\r\n      const convToBit = x => x.toBitmask() >> 1;\r\n      if (cel.teresa.quotes) player.celestials.teresa.quoteBits = convToBit(cel.teresa.quotes);\r\n      if (cel.effarig.quotes) player.celestials.effarig.quoteBits = convToBit(cel.effarig.quotes);\r\n      if (cel.enslaved.quotes) player.celestials.enslaved.quoteBits = convToBit(cel.enslaved.quotes);\r\n      if (cel.v.quotes) player.celestials.v.quoteBits = convToBit(cel.v.quotes);\r\n      if (cel.ra.quotes) player.celestials.ra.quoteBits = convToBit(cel.ra.quotes);\r\n      if (cel.laitela.quotes) player.celestials.laitela.quoteBits = convToBit(cel.laitela.quotes);\r\n      if (cel.pelle.quotes) player.celestials.pelle.quoteBits = convToBit(cel.pelle.quotes);\r\n\r\n      delete player.celestials.teresa.quotes;\r\n      delete player.celestials.effarig.quotes;\r\n      delete player.celestials.enslaved.quotes;\r\n      delete player.celestials.v.quotes;\r\n      delete player.celestials.ra.quotes;\r\n      delete player.celestials.laitela.quotes;\r\n      delete player.celestials.pelle.quotes;\r\n    },\r\n    player => {\r\n      if (player.celestials.pelle.rifts.famine) {\r\n        player.celestials.pelle.rifts.vacuum = {\r\n          ...player.celestials.pelle.rifts.famine,\r\n          fill: new Decimal(player.celestials.pelle.rifts.famine.fill)\r\n        };\r\n        delete player.celestials.pelle.rifts.famine;\r\n      }\r\n\r\n      if (player.celestials.pelle.rifts.pestilence) {\r\n        player.celestials.pelle.rifts.decay = {\r\n          ...player.celestials.pelle.rifts.pestilence,\r\n          fill: new Decimal(player.celestials.pelle.rifts.pestilence.fill)\r\n        };\r\n        delete player.celestials.pelle.rifts.pestilence;\r\n      }\r\n\r\n      if (player.celestials.pelle.rifts.war) {\r\n        player.celestials.pelle.rifts.recursion = {\r\n          ...player.celestials.pelle.rifts.war,\r\n          fill: new Decimal(player.celestials.pelle.rifts.war.fill)\r\n        };\r\n        delete player.celestials.pelle.rifts.war;\r\n      }\r\n\r\n      if (player.celestials.pelle.rifts.death) {\r\n        player.celestials.pelle.rifts.paradox = {\r\n          ...player.celestials.pelle.rifts.death,\r\n          fill: new Decimal(player.celestials.pelle.rifts.death.fill)\r\n        };\r\n        delete player.celestials.pelle.rifts.death;\r\n      }\r\n    },\r\n    player => {\r\n      delete player.newGame;\r\n    },\r\n    migrations.moveTS33,\r\n    player => {\r\n      const toMove = [\"antimatterDims\", \"infinityDims\", \"timeDims\", \"replicantiUpgrades\", \"dilationUpgrades\",\r\n        \"blackHolePower\", \"realityUpgrades\", \"imaginaryUpgrades\"];\r\n      for (const x of toMove) {\r\n        if (player.auto[x].all !== undefined) {\r\n          // Already up to date\r\n          continue;\r\n        }\r\n        const all = player.auto[x];\r\n        delete player.auto[x];\r\n        player.auto[x] = { all, isActive: true };\r\n      }\r\n    },\r\n    player => {\r\n      player.celestials.ra.petWithRemembrance = player.celestials.ra.petWithRecollection;\r\n      delete player.celestials.ra.petWithRecollection;\r\n    },\r\n    player => {\r\n      for (const key of Object.keys(player.reality.automator.scripts)) {\r\n        const lines = player.reality.automator.scripts[key].content.split(\"\\n\");\r\n        for (let num = 0; num < lines.length; num++) {\r\n          let rawLine = lines[num];\r\n          // TT command removed\r\n          rawLine = rawLine.replace(/^\\s*tt.*$/ui, \"\");\r\n          // Changes to \"studies\" commands\r\n          // For some reason `studies nowait load` would get caught by the following system without explicitly defining\r\n          // that \"nowait load\" should not be captured. Probably because it treats nowait as nonexisting and then sees\r\n          // that nowait is neither respec nor load. I tried consuming the nowait if it existed but that messed up the\r\n          // replace function so this is the best I've got for now\r\n          rawLine = rawLine.replace(/studies( nowait)? (?!respec|load|nowait respec|nowait load)(\\S.+)$/ui,\r\n            \"studies$1 purchase $2\");\r\n          rawLine = rawLine.replace(/studies( nowait)? load preset ([1-6])/ui, \"studies$1 load id $2\");\r\n          rawLine = rawLine.replace(/studies( nowait)? load preset (\\S+)/ui, \"studies$1 load name $2\");\r\n          // Autobuyer mode change (this is a much older change which wasn't migrated at the time)\r\n          rawLine = rawLine.replace(/x current/ui, \"x highest\");\r\n          // Variable definitions\r\n          const defineMatch = rawLine.match(/define (\\S*)\\s*=\\s*(\\S.*)$/ui);\r\n          if (defineMatch) {\r\n            player.reality.automator.constants[defineMatch[1]] = defineMatch[2];\r\n            rawLine = \"\";\r\n          }\r\n          lines[num] = rawLine;\r\n        }\r\n        player.reality.automator.scripts[key].content = lines.join(\"\\n\");\r\n      }\r\n\r\n      // Migrate IDs for all saves made during wave 3 testing, to prevent odd overwriting behavior on importing\r\n      const newScripts = {};\r\n      const oldScriptKeys = Object.keys(player.reality.automator.scripts);\r\n      for (let newID = 1; newID <= oldScriptKeys.length; newID++) {\r\n        newScripts[newID] = player.reality.automator.scripts[oldScriptKeys[newID - 1]];\r\n        newScripts[newID].id = newID;\r\n      }\r\n      player.reality.automator.scripts = newScripts;\r\n    },\r\n    player => {\r\n      delete player.celestials.pelle.armageddonDuration;\r\n      delete player.celestials.pelle.maxAMThisArmageddon;\r\n      delete player.options.sidebarMinimized;\r\n      delete player.options.chart;\r\n      delete player.devMode;\r\n    },\r\n    player => {\r\n      const swap1 = player.achievementBits[10] & 4;\r\n      const swap2 = player.achievementBits[11] & 8;\r\n      if (swap1) {\r\n        player.achievementBits[11] |= 8;\r\n      } else {\r\n        player.achievementBits[11] &= ~8;\r\n      }\r\n      if (swap2) {\r\n        player.achievementBits[10] |= 4;\r\n      } else {\r\n        player.achievementBits[10] &= ~4;\r\n      }\r\n    },\r\n    player => {\r\n      if (player.options.newUI) {\r\n        player.options.themeModern = player.options.theme ?? player.options.themeModern;\r\n      } else {\r\n        player.options.themeClassic = player.options.theme ?? player.options.themeClassic;\r\n      }\r\n      delete player.options.theme;\r\n\r\n      if (BlackHole(1).isUnlocked) player.records.timePlayedAtBHUnlock = player.records.totalTimePlayed;\r\n    },\r\n    player => {\r\n      player.IAP.enabled = !player.IAP.disabled;\r\n      const toDelete = [\"totalSTD\", \"spentSTD\", \"exportSTD\", \"IPPurchases\", \"EPPurchases\", \"RMPurchases\",\r\n        \"dimPurchases\", \"allDimPurchases\", \"replicantiPurchases\", \"dilatedTimePurchases\", \"disabled\"];\r\n      for (const key of toDelete) delete player.IAP[key];\r\n    },\r\n    player => {\r\n      const allGlyphs = player.reality.glyphs.active.concat(player.reality.glyphs.inventory);\r\n      for (const glyph of allGlyphs) {\r\n        if (glyph.symbol === \"key266b\") {\r\n          glyph.symbol = undefined;\r\n          glyph.color = undefined;\r\n          glyph.cosmetic = \"music\";\r\n        }\r\n        if (glyph.type === \"companion\") glyph.color = undefined;\r\n      }\r\n    },\r\n    player => {\r\n      player.options.lightGlyphs = !player.options.forceDarkGlyphs;\r\n      delete player.options.forceDarkGlyphs;\r\n    }\r\n  ],\r\n\r\n  patch(player) {\r\n    player.options.testVersion = player.options.testVersion || 0;\r\n    for (let version = player.options.testVersion; version < this.patches.length; version++) {\r\n      const patch = this.patches[version];\r\n      patch(player);\r\n    }\r\n    this.setLatestTestVersion(player);\r\n  },\r\n\r\n  setLatestTestVersion(player) {\r\n    player.options.testVersion = this.patches.length;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}