{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport { DC } from \"../constants\";\nimport { DimensionState } from \"./dimension\";\nexport function infinityDimensionCommonMultiplier() {\n  let mult = new Decimal(ShopPurchase.allDimPurchases.currentMult).timesEffectsOf(Achievement(75), TimeStudy(82), TimeStudy(92), TimeStudy(162), InfinityChallenge(1).reward, InfinityChallenge(6).reward, EternityChallenge(4).reward, EternityChallenge(9).reward, EternityUpgrade.idMultEP, EternityUpgrade.idMultEternities, EternityUpgrade.idMultICRecords, AlchemyResource.dimensionality, ImaginaryUpgrade(8), PelleRifts.recursion.milestones[1]);\n\n  if (Replicanti.areUnlocked && Replicanti.amount.gt(1)) {\n    mult = mult.times(replicantiMult());\n  }\n\n  return mult;\n}\nexport function toggleAllInfDims() {\n  const areEnabled = Autobuyer.infinityDimension(1).isActive;\n\n  for (let i = 1; i < 9; i++) {\n    Autobuyer.infinityDimension(i).isActive = !areEnabled;\n  }\n}\n\nclass InfinityDimensionState extends DimensionState {\n  constructor(tier) {\n    super(() => player.dimensions.infinity, tier);\n    const UNLOCK_REQUIREMENTS = [undefined, DC.E1100, DC.E1900, DC.E2400, DC.E10500, DC.E30000, DC.E45000, DC.E54000, DC.E60000];\n    this._unlockRequirement = UNLOCK_REQUIREMENTS[tier];\n    const COST_MULTS = [null, 1e3, 1e6, 1e8, 1e10, 1e15, 1e20, 1e25, 1e30];\n    this._costMultiplier = COST_MULTS[tier];\n    const POWER_MULTS = [null, 50, 30, 10, 5, 5, 5, 5, 5];\n    this._powerMultiplier = POWER_MULTS[tier];\n    const BASE_COSTS = [null, 1e8, 1e9, 1e10, 1e20, 1e140, 1e200, 1e250, 1e280];\n    this._baseCost = new Decimal(BASE_COSTS[tier]);\n    this.ipRequirement = BASE_COSTS[1];\n  }\n  /** @returns {Decimal} */\n\n\n  get cost() {\n    return this.data.cost;\n  }\n  /** @param {Decimal} value */\n\n\n  set cost(value) {\n    this.data.cost = value;\n  }\n\n  get baseAmount() {\n    return this.data.baseAmount;\n  }\n\n  set baseAmount(value) {\n    this.data.baseAmount = value;\n  }\n\n  get isUnlocked() {\n    return this.data.isUnlocked;\n  }\n\n  set isUnlocked(value) {\n    this.data.isUnlocked = value;\n  }\n\n  get amRequirement() {\n    return this._unlockRequirement;\n  }\n\n  get antimatterRequirementReached() {\n    return player.records.thisEternity.maxAM.gte(this.amRequirement);\n  }\n\n  get hasIPUnlock() {\n    return this.tier === 1 && !PlayerProgress.eternityUnlocked();\n  }\n\n  get ipRequirementReached() {\n    return !this.hasIPUnlock || Currency.infinityPoints.value.gte(this.ipRequirement);\n  }\n\n  get canUnlock() {\n    return (Perk.bypassIDAntimatter.canBeApplied || this.antimatterRequirementReached) && this.ipRequirementReached;\n  }\n\n  get isAvailableForPurchase() {\n    return InfinityDimensions.canBuy() && this.isUnlocked && this.isAffordable && !this.isCapped;\n  }\n\n  get isAffordable() {\n    return Currency.infinityPoints.gte(this.cost);\n  }\n\n  get rateOfChange() {\n    const tier = this.tier;\n    let toGain = DC.D0;\n\n    if (tier === 8) {\n      // We need a extra 10x here (since ID8 production is per-second and\n      // other ID production is per-10-seconds).\n      EternityChallenge(7).reward.applyEffect(v => toGain = v.times(10));\n      if (EternityChallenge(7).isRunning) EternityChallenge(7).applyEffect(v => toGain = v.times(10));\n    } else {\n      toGain = InfinityDimension(tier + 1).productionPerSecond;\n    }\n\n    const current = Decimal.max(this.amount, 1);\n    return toGain.times(10).dividedBy(current).times(getGameSpeedupForDisplay());\n  }\n\n  get productionPerSecond() {\n    if (EternityChallenge(2).isRunning || EternityChallenge(10).isRunning || Laitela.isRunning && this.tier > Laitela.maxAllowedDimension) {\n      return DC.D0;\n    }\n\n    let production = this.amount;\n\n    if (EternityChallenge(11).isRunning) {\n      return production;\n    }\n\n    if (EternityChallenge(7).isRunning) {\n      production = production.times(Tickspeed.perSecond);\n    }\n\n    return production.times(this.multiplier);\n  }\n\n  get multiplier() {\n    const tier = this.tier;\n    if (EternityChallenge(11).isRunning) return DC.D1;\n    let mult = GameCache.infinityDimensionCommonMultiplier.value.timesEffectsOf(tier === 1 ? Achievement(94) : null, tier === 4 ? TimeStudy(72) : null, tier === 1 ? EternityChallenge(2).reward : null);\n    mult = mult.times(Decimal.pow(this.powerMultiplier, Math.floor(this.baseAmount / 10)));\n\n    if (tier === 1) {\n      mult = mult.times(PelleRifts.decay.milestones[0].effectOrDefault(1));\n    }\n\n    mult = mult.pow(getAdjustedGlyphEffect(\"infinitypow\"));\n    mult = mult.pow(getAdjustedGlyphEffect(\"effarigdimensions\"));\n    mult = mult.pow(getAdjustedGlyphEffect(\"curseddimensions\"));\n    mult = mult.powEffectOf(AlchemyResource.infinity);\n    mult = mult.pow(Ra.momentumValue);\n    mult = mult.powEffectOf(PelleRifts.paradox);\n\n    if (player.dilation.active || PelleStrikes.dilation.hasStrike) {\n      mult = dilatedValueOf(mult);\n    }\n\n    if (Effarig.isRunning) {\n      mult = Effarig.multiplier(mult);\n    } else if (V.isRunning) {\n      mult = mult.pow(0.5);\n    }\n\n    if (PelleStrikes.powerGalaxies.hasStrike) {\n      mult = mult.pow(0.5);\n    }\n\n    return mult;\n  }\n\n  get isProducing() {\n    const tier = this.tier;\n\n    if (EternityChallenge(2).isRunning || EternityChallenge(10).isRunning || Laitela.isRunning && tier > Laitela.maxAllowedDimension) {\n      return false;\n    }\n\n    return this.amount.gt(0);\n  }\n\n  get baseCost() {\n    return this._baseCost;\n  }\n\n  get costMultiplier() {\n    let costMult = this._costMultiplier;\n    EternityChallenge(12).reward.applyEffect(v => costMult = Math.pow(costMult, v));\n    return costMult;\n  }\n\n  get powerMultiplier() {\n    return new Decimal(this._powerMultiplier).timesEffectsOf(this._tier === 8 ? GlyphSacrifice.infinity : null).pow(ImaginaryUpgrade(14).effectOrDefault(1));\n  }\n\n  get purchases() {\n    // Because each ID purchase gives 10 IDs\n    return this.data.baseAmount / 10;\n  }\n\n  get purchaseCap() {\n    if (Enslaved.isRunning) {\n      return 1;\n    }\n\n    return InfinityDimensions.capIncrease + (this.tier === 8 ? Number.MAX_VALUE : InfinityDimensions.HARDCAP_PURCHASES);\n  }\n\n  get isCapped() {\n    return this.purchases >= this.purchaseCap;\n  }\n\n  get hardcapIPAmount() {\n    return this._baseCost.times(Decimal.pow(this.costMultiplier, this.purchaseCap));\n  }\n\n  resetAmount() {\n    this.amount = new Decimal(this.baseAmount);\n  }\n\n  fullReset() {\n    this.cost = new Decimal(this.baseCost);\n    this.amount = DC.D0;\n    this.bought = 0;\n    this.baseAmount = 0;\n    this.isUnlocked = false;\n  }\n\n  unlock() {\n    if (this.isUnlocked) return true;\n    if (!this.canUnlock) return false;\n    this.isUnlocked = true;\n    EventHub.dispatch(GAME_EVENT.INFINITY_DIMENSION_UNLOCKED, this.tier);\n\n    if (this.tier === 1 && !PlayerProgress.eternityUnlocked()) {\n      Tab.dimensions.infinity.show();\n    }\n\n    return true;\n  } // Only ever called from manual actions\n\n\n  buySingle() {\n    if (!this.isUnlocked) return this.unlock();\n    if (!this.isAvailableForPurchase) return false;\n\n    if (ImaginaryUpgrade(15).isLockingMechanics) {\n      const lockString = this.tier === 1 ? \"purchase a 1st Infinity Dimension\" : \"purchase a Dimension which will produce 1st IDs\";\n      ImaginaryUpgrade(15).tryShowWarningModal(lockString);\n      return false;\n    }\n\n    Currency.infinityPoints.purchase(this.cost);\n    this.cost = Decimal.round(this.cost.times(this.costMultiplier)); // Because each ID purchase gives 10 IDs\n\n    this.amount = this.amount.plus(10);\n    this.baseAmount += 10;\n\n    if (EternityChallenge(8).isRunning) {\n      player.eterc8ids -= 1;\n    }\n\n    return true;\n  }\n\n  buyMax(auto) {\n    if (!this.isAvailableForPurchase) return false;\n\n    if (ImaginaryUpgrade(15).isLockingMechanics) {\n      const lockString = this.tier === 1 ? \"purchase a 1st Infinity Dimension\" : \"purchase a Dimension which will produce 1st IDs\";\n      if (!auto) ImaginaryUpgrade(15).tryShowWarningModal(lockString);\n      return false;\n    }\n\n    let purchasesUntilHardcap = this.purchaseCap - this.purchases;\n\n    if (EternityChallenge(8).isRunning) {\n      purchasesUntilHardcap = Math.clampMax(purchasesUntilHardcap, player.eterc8ids);\n    }\n\n    const costScaling = new LinearCostScaling(Currency.infinityPoints.value, this.cost, this.costMultiplier, purchasesUntilHardcap);\n    if (costScaling.purchases <= 0) return false;\n    Currency.infinityPoints.purchase(costScaling.totalCost);\n    this.cost = this.cost.times(costScaling.totalCostMultiplier); // Because each ID purchase gives 10 IDs\n\n    this.amount = this.amount.plus(10 * costScaling.purchases);\n    this.baseAmount += 10 * costScaling.purchases;\n\n    if (EternityChallenge(8).isRunning) {\n      player.eterc8ids -= costScaling.purchases;\n    }\n\n    return true;\n  }\n\n}\n/**\r\n * @function\r\n * @param {number} tier\r\n * @return {InfinityDimensionState}\r\n */\n\n\nexport const InfinityDimension = InfinityDimensionState.createAccessor();\nexport const InfinityDimensions = {\n  /**\r\n   * @type {InfinityDimensionState[]}\r\n   */\n  all: InfinityDimension.index.compact(),\n  HARDCAP_PURCHASES: 2000000,\n\n  unlockNext() {\n    if (InfinityDimension(8).isUnlocked) return;\n    this.next().unlock();\n  },\n\n  next() {\n    if (InfinityDimension(8).isUnlocked) throw \"All Infinity Dimensions are unlocked\";\n    return this.all.first(dim => !dim.isUnlocked);\n  },\n\n  resetAmount() {\n    Currency.infinityPower.reset();\n\n    for (const dimension of InfinityDimensions.all) {\n      dimension.resetAmount();\n    }\n  },\n\n  fullReset() {\n    for (const dimension of InfinityDimensions.all) {\n      dimension.fullReset();\n    }\n  },\n\n  get capIncrease() {\n    return Math.floor(Tesseracts.capIncrease());\n  },\n\n  get totalDimCap() {\n    return this.HARDCAP_PURCHASES + this.capIncrease;\n  },\n\n  canBuy() {\n    return !EternityChallenge(2).isRunning && !EternityChallenge(10).isRunning && (!EternityChallenge(8).isRunning || player.eterc8ids > 0);\n  },\n\n  canAutobuy() {\n    return this.canBuy() && !EternityChallenge(8).isRunning;\n  },\n\n  tick(diff) {\n    for (let tier = 8; tier > 1; tier--) {\n      InfinityDimension(tier).produceDimensions(InfinityDimension(tier - 1), diff / 10);\n    }\n\n    if (EternityChallenge(7).isRunning) {\n      if (!NormalChallenge(10).isRunning) {\n        InfinityDimension(1).produceDimensions(AntimatterDimension(7), diff);\n      }\n    } else {\n      InfinityDimension(1).produceCurrency(Currency.infinityPower, diff);\n    }\n\n    player.requirementChecks.reality.maxID1 = player.requirementChecks.reality.maxID1.clampMin(InfinityDimension(1).amount);\n  },\n\n  tryAutoUnlock() {\n    if (!EternityMilestone.autoUnlockID.isReached || InfinityDimension(8).isUnlocked) return;\n\n    for (const dimension of this.all) {\n      // If we cannot unlock this one, we can't unlock the rest, either\n      if (!dimension.unlock()) break;\n    }\n  },\n\n  // Called from \"Max All\" UI buttons and nowhere else\n  buyMax() {\n    // Try to unlock dimensions\n    const unlockedDimensions = this.all.filter(dimension => dimension.unlock()); // Try to buy single from the highest affordable new dimensions\n\n    unlockedDimensions.slice().reverse().forEach(dimension => {\n      if (dimension.purchases === 0) dimension.buySingle();\n    }); // Try to buy max from the lowest dimension (since lower dimensions have bigger multiplier per purchase)\n\n    unlockedDimensions.forEach(dimension => dimension.buyMax(false));\n  },\n\n  get powerConversionRate() {\n    const multiplier = PelleRifts.paradox.milestones[2].effectOrDefault(1);\n    return (7 + getAdjustedGlyphEffect(\"infinityrate\") + PelleUpgrade.infConversion.effectOrDefault(0)) * multiplier;\n  }\n\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/dimensions/infinity-dimension.js"],"names":["DC","DimensionState","infinityDimensionCommonMultiplier","mult","Decimal","ShopPurchase","allDimPurchases","currentMult","timesEffectsOf","Achievement","TimeStudy","InfinityChallenge","reward","EternityChallenge","EternityUpgrade","idMultEP","idMultEternities","idMultICRecords","AlchemyResource","dimensionality","ImaginaryUpgrade","PelleRifts","recursion","milestones","Replicanti","areUnlocked","amount","gt","times","replicantiMult","toggleAllInfDims","areEnabled","Autobuyer","infinityDimension","isActive","i","InfinityDimensionState","constructor","tier","player","dimensions","infinity","UNLOCK_REQUIREMENTS","undefined","E1100","E1900","E2400","E10500","E30000","E45000","E54000","E60000","_unlockRequirement","COST_MULTS","_costMultiplier","POWER_MULTS","_powerMultiplier","BASE_COSTS","_baseCost","ipRequirement","cost","data","value","baseAmount","isUnlocked","amRequirement","antimatterRequirementReached","records","thisEternity","maxAM","gte","hasIPUnlock","PlayerProgress","eternityUnlocked","ipRequirementReached","Currency","infinityPoints","canUnlock","Perk","bypassIDAntimatter","canBeApplied","isAvailableForPurchase","InfinityDimensions","canBuy","isAffordable","isCapped","rateOfChange","toGain","D0","applyEffect","v","isRunning","InfinityDimension","productionPerSecond","current","max","dividedBy","getGameSpeedupForDisplay","Laitela","maxAllowedDimension","production","Tickspeed","perSecond","multiplier","D1","GameCache","pow","powerMultiplier","Math","floor","decay","effectOrDefault","getAdjustedGlyphEffect","powEffectOf","Ra","momentumValue","paradox","dilation","active","PelleStrikes","hasStrike","dilatedValueOf","Effarig","V","powerGalaxies","isProducing","baseCost","costMultiplier","costMult","_tier","GlyphSacrifice","purchases","purchaseCap","Enslaved","capIncrease","Number","MAX_VALUE","HARDCAP_PURCHASES","hardcapIPAmount","resetAmount","fullReset","bought","unlock","EventHub","dispatch","GAME_EVENT","INFINITY_DIMENSION_UNLOCKED","Tab","show","buySingle","isLockingMechanics","lockString","tryShowWarningModal","purchase","round","plus","eterc8ids","buyMax","auto","purchasesUntilHardcap","clampMax","costScaling","LinearCostScaling","totalCost","totalCostMultiplier","createAccessor","all","index","compact","unlockNext","next","first","dim","infinityPower","reset","dimension","Tesseracts","totalDimCap","canAutobuy","tick","diff","produceDimensions","NormalChallenge","AntimatterDimension","produceCurrency","requirementChecks","reality","maxID1","clampMin","tryAutoUnlock","EternityMilestone","autoUnlockID","isReached","unlockedDimensions","filter","slice","reverse","forEach","powerConversionRate","PelleUpgrade","infConversion"],"mappings":"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","sourcesContent":["import { DC } from \"../constants\";\r\n\r\nimport { DimensionState } from \"./dimension\";\r\n\r\nexport function infinityDimensionCommonMultiplier() {\r\n  let mult = new Decimal(ShopPurchase.allDimPurchases.currentMult)\r\n    .timesEffectsOf(\r\n      Achievement(75),\r\n      TimeStudy(82),\r\n      TimeStudy(92),\r\n      TimeStudy(162),\r\n      InfinityChallenge(1).reward,\r\n      InfinityChallenge(6).reward,\r\n      EternityChallenge(4).reward,\r\n      EternityChallenge(9).reward,\r\n      EternityUpgrade.idMultEP,\r\n      EternityUpgrade.idMultEternities,\r\n      EternityUpgrade.idMultICRecords,\r\n      AlchemyResource.dimensionality,\r\n      ImaginaryUpgrade(8),\r\n      PelleRifts.recursion.milestones[1]\r\n    );\r\n\r\n  if (Replicanti.areUnlocked && Replicanti.amount.gt(1)) {\r\n    mult = mult.times(replicantiMult());\r\n  }\r\n\r\n  return mult;\r\n}\r\n\r\nexport function toggleAllInfDims() {\r\n  const areEnabled = Autobuyer.infinityDimension(1).isActive;\r\n  for (let i = 1; i < 9; i++) {\r\n    Autobuyer.infinityDimension(i).isActive = !areEnabled;\r\n  }\r\n}\r\n\r\nclass InfinityDimensionState extends DimensionState {\r\n  constructor(tier) {\r\n    super(() => player.dimensions.infinity, tier);\r\n    const UNLOCK_REQUIREMENTS = [\r\n      undefined,\r\n      DC.E1100,\r\n      DC.E1900,\r\n      DC.E2400,\r\n      DC.E10500,\r\n      DC.E30000,\r\n      DC.E45000,\r\n      DC.E54000,\r\n      DC.E60000,\r\n    ];\r\n    this._unlockRequirement = UNLOCK_REQUIREMENTS[tier];\r\n    const COST_MULTS = [null, 1e3, 1e6, 1e8, 1e10, 1e15, 1e20, 1e25, 1e30];\r\n    this._costMultiplier = COST_MULTS[tier];\r\n    const POWER_MULTS = [null, 50, 30, 10, 5, 5, 5, 5, 5];\r\n    this._powerMultiplier = POWER_MULTS[tier];\r\n    const BASE_COSTS = [null, 1e8, 1e9, 1e10, 1e20, 1e140, 1e200, 1e250, 1e280];\r\n    this._baseCost = new Decimal(BASE_COSTS[tier]);\r\n    this.ipRequirement = BASE_COSTS[1];\r\n  }\r\n\r\n  /** @returns {Decimal} */\r\n  get cost() { return this.data.cost; }\r\n  /** @param {Decimal} value */\r\n  set cost(value) { this.data.cost = value; }\r\n\r\n  get baseAmount() {\r\n    return this.data.baseAmount;\r\n  }\r\n\r\n  set baseAmount(value) {\r\n    this.data.baseAmount = value;\r\n  }\r\n\r\n  get isUnlocked() {\r\n    return this.data.isUnlocked;\r\n  }\r\n\r\n  set isUnlocked(value) {\r\n    this.data.isUnlocked = value;\r\n  }\r\n\r\n  get amRequirement() {\r\n    return this._unlockRequirement;\r\n  }\r\n\r\n  get antimatterRequirementReached() {\r\n    return player.records.thisEternity.maxAM.gte(this.amRequirement);\r\n  }\r\n\r\n  get hasIPUnlock() {\r\n    return this.tier === 1 && !PlayerProgress.eternityUnlocked();\r\n  }\r\n\r\n  get ipRequirementReached() {\r\n    return !this.hasIPUnlock || Currency.infinityPoints.value.gte(this.ipRequirement);\r\n  }\r\n\r\n  get canUnlock() {\r\n    return (Perk.bypassIDAntimatter.canBeApplied || this.antimatterRequirementReached) &&\r\n      this.ipRequirementReached;\r\n  }\r\n\r\n  get isAvailableForPurchase() {\r\n    return InfinityDimensions.canBuy() && this.isUnlocked && this.isAffordable && !this.isCapped;\r\n  }\r\n\r\n  get isAffordable() {\r\n    return Currency.infinityPoints.gte(this.cost);\r\n  }\r\n\r\n  get rateOfChange() {\r\n    const tier = this.tier;\r\n    let toGain = DC.D0;\r\n    if (tier === 8) {\r\n      // We need a extra 10x here (since ID8 production is per-second and\r\n      // other ID production is per-10-seconds).\r\n      EternityChallenge(7).reward.applyEffect(v => toGain = v.times(10));\r\n      if (EternityChallenge(7).isRunning) EternityChallenge(7).applyEffect(v => toGain = v.times(10));\r\n    } else {\r\n      toGain = InfinityDimension(tier + 1).productionPerSecond;\r\n    }\r\n    const current = Decimal.max(this.amount, 1);\r\n    return toGain.times(10).dividedBy(current).times(getGameSpeedupForDisplay());\r\n  }\r\n\r\n  get productionPerSecond() {\r\n    if (EternityChallenge(2).isRunning || EternityChallenge(10).isRunning ||\r\n      (Laitela.isRunning && this.tier > Laitela.maxAllowedDimension)) {\r\n      return DC.D0;\r\n    }\r\n    let production = this.amount;\r\n    if (EternityChallenge(11).isRunning) {\r\n      return production;\r\n    }\r\n    if (EternityChallenge(7).isRunning) {\r\n      production = production.times(Tickspeed.perSecond);\r\n    }\r\n    return production.times(this.multiplier);\r\n  }\r\n\r\n  get multiplier() {\r\n    const tier = this.tier;\r\n    if (EternityChallenge(11).isRunning) return DC.D1;\r\n    let mult = GameCache.infinityDimensionCommonMultiplier.value\r\n      .timesEffectsOf(\r\n        tier === 1 ? Achievement(94) : null,\r\n        tier === 4 ? TimeStudy(72) : null,\r\n        tier === 1 ? EternityChallenge(2).reward : null\r\n      );\r\n    mult = mult.times(Decimal.pow(this.powerMultiplier, Math.floor(this.baseAmount / 10)));\r\n\r\n\r\n    if (tier === 1) {\r\n      mult = mult.times(PelleRifts.decay.milestones[0].effectOrDefault(1));\r\n    }\r\n\r\n\r\n    mult = mult.pow(getAdjustedGlyphEffect(\"infinitypow\"));\r\n    mult = mult.pow(getAdjustedGlyphEffect(\"effarigdimensions\"));\r\n    mult = mult.pow(getAdjustedGlyphEffect(\"curseddimensions\"));\r\n    mult = mult.powEffectOf(AlchemyResource.infinity);\r\n    mult = mult.pow(Ra.momentumValue);\r\n    mult = mult.powEffectOf(PelleRifts.paradox);\r\n\r\n    if (player.dilation.active || PelleStrikes.dilation.hasStrike) {\r\n      mult = dilatedValueOf(mult);\r\n    }\r\n\r\n    if (Effarig.isRunning) {\r\n      mult = Effarig.multiplier(mult);\r\n    } else if (V.isRunning) {\r\n      mult = mult.pow(0.5);\r\n    }\r\n\r\n    if (PelleStrikes.powerGalaxies.hasStrike) {\r\n      mult = mult.pow(0.5);\r\n    }\r\n\r\n    return mult;\r\n  }\r\n\r\n  get isProducing() {\r\n    const tier = this.tier;\r\n    if (EternityChallenge(2).isRunning ||\r\n      EternityChallenge(10).isRunning ||\r\n      (Laitela.isRunning && tier > Laitela.maxAllowedDimension)) {\r\n      return false;\r\n    }\r\n    return this.amount.gt(0);\r\n  }\r\n\r\n  get baseCost() {\r\n    return this._baseCost;\r\n  }\r\n\r\n  get costMultiplier() {\r\n    let costMult = this._costMultiplier;\r\n    EternityChallenge(12).reward.applyEffect(v => costMult = Math.pow(costMult, v));\r\n    return costMult;\r\n  }\r\n\r\n  get powerMultiplier() {\r\n    return new Decimal(this._powerMultiplier)\r\n      .timesEffectsOf(this._tier === 8 ? GlyphSacrifice.infinity : null)\r\n      .pow(ImaginaryUpgrade(14).effectOrDefault(1));\r\n  }\r\n\r\n  get purchases() {\r\n    // Because each ID purchase gives 10 IDs\r\n    return this.data.baseAmount / 10;\r\n  }\r\n\r\n  get purchaseCap() {\r\n    if (Enslaved.isRunning) {\r\n      return 1;\r\n    }\r\n    return InfinityDimensions.capIncrease + (this.tier === 8\r\n      ? Number.MAX_VALUE\r\n      : InfinityDimensions.HARDCAP_PURCHASES);\r\n  }\r\n\r\n  get isCapped() {\r\n    return this.purchases >= this.purchaseCap;\r\n  }\r\n\r\n  get hardcapIPAmount() {\r\n    return this._baseCost.times(Decimal.pow(this.costMultiplier, this.purchaseCap));\r\n  }\r\n\r\n  resetAmount() {\r\n    this.amount = new Decimal(this.baseAmount);\r\n  }\r\n\r\n  fullReset() {\r\n    this.cost = new Decimal(this.baseCost);\r\n    this.amount = DC.D0;\r\n    this.bought = 0;\r\n    this.baseAmount = 0;\r\n    this.isUnlocked = false;\r\n  }\r\n\r\n  unlock() {\r\n    if (this.isUnlocked) return true;\r\n    if (!this.canUnlock) return false;\r\n    this.isUnlocked = true;\r\n    EventHub.dispatch(GAME_EVENT.INFINITY_DIMENSION_UNLOCKED, this.tier);\r\n    if (this.tier === 1 && !PlayerProgress.eternityUnlocked()) {\r\n      Tab.dimensions.infinity.show();\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // Only ever called from manual actions\r\n  buySingle() {\r\n    if (!this.isUnlocked) return this.unlock();\r\n    if (!this.isAvailableForPurchase) return false;\r\n    if (ImaginaryUpgrade(15).isLockingMechanics) {\r\n      const lockString = this.tier === 1\r\n        ? \"purchase a 1st Infinity Dimension\"\r\n        : \"purchase a Dimension which will produce 1st IDs\";\r\n      ImaginaryUpgrade(15).tryShowWarningModal(lockString);\r\n      return false;\r\n    }\r\n\r\n    Currency.infinityPoints.purchase(this.cost);\r\n    this.cost = Decimal.round(this.cost.times(this.costMultiplier));\r\n    // Because each ID purchase gives 10 IDs\r\n    this.amount = this.amount.plus(10);\r\n    this.baseAmount += 10;\r\n\r\n    if (EternityChallenge(8).isRunning) {\r\n      player.eterc8ids -= 1;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  buyMax(auto) {\r\n    if (!this.isAvailableForPurchase) return false;\r\n    if (ImaginaryUpgrade(15).isLockingMechanics) {\r\n      const lockString = this.tier === 1\r\n        ? \"purchase a 1st Infinity Dimension\"\r\n        : \"purchase a Dimension which will produce 1st IDs\";\r\n      if (!auto) ImaginaryUpgrade(15).tryShowWarningModal(lockString);\r\n      return false;\r\n    }\r\n\r\n    let purchasesUntilHardcap = this.purchaseCap - this.purchases;\r\n    if (EternityChallenge(8).isRunning) {\r\n      purchasesUntilHardcap = Math.clampMax(purchasesUntilHardcap, player.eterc8ids);\r\n    }\r\n\r\n    const costScaling = new LinearCostScaling(\r\n      Currency.infinityPoints.value,\r\n      this.cost,\r\n      this.costMultiplier,\r\n      purchasesUntilHardcap\r\n    );\r\n\r\n    if (costScaling.purchases <= 0) return false;\r\n\r\n    Currency.infinityPoints.purchase(costScaling.totalCost);\r\n    this.cost = this.cost.times(costScaling.totalCostMultiplier);\r\n    // Because each ID purchase gives 10 IDs\r\n    this.amount = this.amount.plus(10 * costScaling.purchases);\r\n    this.baseAmount += 10 * costScaling.purchases;\r\n\r\n    if (EternityChallenge(8).isRunning) {\r\n      player.eterc8ids -= costScaling.purchases;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @function\r\n * @param {number} tier\r\n * @return {InfinityDimensionState}\r\n */\r\nexport const InfinityDimension = InfinityDimensionState.createAccessor();\r\n\r\nexport const InfinityDimensions = {\r\n  /**\r\n   * @type {InfinityDimensionState[]}\r\n   */\r\n  all: InfinityDimension.index.compact(),\r\n  HARDCAP_PURCHASES: 2000000,\r\n\r\n  unlockNext() {\r\n    if (InfinityDimension(8).isUnlocked) return;\r\n    this.next().unlock();\r\n  },\r\n\r\n  next() {\r\n    if (InfinityDimension(8).isUnlocked)\r\n      throw \"All Infinity Dimensions are unlocked\";\r\n    return this.all.first(dim => !dim.isUnlocked);\r\n  },\r\n\r\n  resetAmount() {\r\n    Currency.infinityPower.reset();\r\n    for (const dimension of InfinityDimensions.all) {\r\n      dimension.resetAmount();\r\n    }\r\n  },\r\n\r\n  fullReset() {\r\n    for (const dimension of InfinityDimensions.all) {\r\n      dimension.fullReset();\r\n    }\r\n  },\r\n\r\n  get capIncrease() {\r\n    return Math.floor(Tesseracts.capIncrease());\r\n  },\r\n\r\n  get totalDimCap() {\r\n    return this.HARDCAP_PURCHASES + this.capIncrease;\r\n  },\r\n\r\n  canBuy() {\r\n    return !EternityChallenge(2).isRunning &&\r\n      !EternityChallenge(10).isRunning &&\r\n      (!EternityChallenge(8).isRunning || player.eterc8ids > 0);\r\n  },\r\n\r\n  canAutobuy() {\r\n    return this.canBuy() && !EternityChallenge(8).isRunning;\r\n  },\r\n\r\n  tick(diff) {\r\n    for (let tier = 8; tier > 1; tier--) {\r\n      InfinityDimension(tier).produceDimensions(InfinityDimension(tier - 1), diff / 10);\r\n    }\r\n\r\n    if (EternityChallenge(7).isRunning) {\r\n      if (!NormalChallenge(10).isRunning) {\r\n        InfinityDimension(1).produceDimensions(AntimatterDimension(7), diff);\r\n      }\r\n    } else {\r\n      InfinityDimension(1).produceCurrency(Currency.infinityPower, diff);\r\n    }\r\n\r\n    player.requirementChecks.reality.maxID1 = player.requirementChecks.reality.maxID1\r\n      .clampMin(InfinityDimension(1).amount);\r\n  },\r\n\r\n  tryAutoUnlock() {\r\n    if (!EternityMilestone.autoUnlockID.isReached || InfinityDimension(8).isUnlocked) return;\r\n    for (const dimension of this.all) {\r\n      // If we cannot unlock this one, we can't unlock the rest, either\r\n      if (!dimension.unlock()) break;\r\n    }\r\n  },\r\n\r\n  // Called from \"Max All\" UI buttons and nowhere else\r\n  buyMax() {\r\n    // Try to unlock dimensions\r\n    const unlockedDimensions = this.all.filter(dimension => dimension.unlock());\r\n\r\n    // Try to buy single from the highest affordable new dimensions\r\n    unlockedDimensions.slice().reverse().forEach(dimension => {\r\n      if (dimension.purchases === 0) dimension.buySingle();\r\n    });\r\n\r\n    // Try to buy max from the lowest dimension (since lower dimensions have bigger multiplier per purchase)\r\n    unlockedDimensions.forEach(dimension => dimension.buyMax(false));\r\n  },\r\n\r\n  get powerConversionRate() {\r\n    const multiplier = PelleRifts.paradox.milestones[2].effectOrDefault(1);\r\n    return (7 + getAdjustedGlyphEffect(\"infinityrate\") + PelleUpgrade.infConversion.effectOrDefault(0)) * multiplier;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}