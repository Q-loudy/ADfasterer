{"ast":null,"code":"import \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { DataSet, Network } from \"vis-network\";\nimport { PERK_FAMILY } from \"@/core/secret-formula\";\nimport PerkPointLabel from \"./PerkPointLabel\";\nexport default {\n  name: \"PerksTab\",\n  components: {\n    PerkPointLabel\n  },\n  computed: {\n    showHintText() {\n      return ui.view.shiftDown || player.options.showHintText.perks;\n    }\n\n  },\n  watch: {\n    showHintText(newValue) {\n      if (ui.view.theme === \"S9\") PerkNetwork.setLabelVisibility(false);else PerkNetwork.setLabelVisibility(newValue);\n    }\n\n  },\n\n  created() {\n    EventHub.ui.on(GAME_EVENT.PERK_BOUGHT, () => PerkNetwork.updatePerkColor());\n  },\n\n  mounted() {\n    PerkNetwork.initialStabilization = false;\n    PerkNetwork.currentLayout = PerkLayouts[player.options.perkLayout];\n    PerkNetwork.initializeIfNeeded();\n    if (ui.view.theme === \"S9\") PerkNetwork.setLabelVisibility(false);else PerkNetwork.setLabelVisibility(ui.view.shiftDown || player.options.showHintText.perks);\n    PerkNetwork.updatePerkColor();\n    PerkNetwork.updatePerkSize();\n    this.$refs.tab.appendChild(PerkNetwork.container);\n    PerkNetwork.moveToDefaultLayoutPositions(player.options.perkLayout);\n  }\n\n}; // Primary is lifted from the study tree (mostly),\n// secondary is primary -15% l in hsl, apart from reality which is -10%\n\nconst perkColors = () => ({\n  [PERK_FAMILY.ANTIMATTER]: {\n    primary: \"#22aa48\",\n    secondary: \"#156a2d\"\n  },\n  [PERK_FAMILY.INFINITY]: {\n    primary: \"#b67f33\",\n    secondary: \"#7b5623\"\n  },\n  [PERK_FAMILY.ETERNITY]: {\n    primary: \"#b241e3\",\n    secondary: \"#8b1cba\"\n  },\n  [PERK_FAMILY.DILATION]: {\n    primary: \"#64dd17\",\n    secondary: \"#449810\"\n  },\n  [PERK_FAMILY.REALITY]: {\n    primary: \"#0b600e\",\n    secondary: \"#063207\"\n  },\n  [PERK_FAMILY.AUTOMATION]: {\n    primary: \"#ff0000\",\n    secondary: \"#b30000\"\n  },\n  [PERK_FAMILY.ACHIEVEMENT]: {\n    primary: \"#fdd835\",\n    secondary: \"#e3ba02\"\n  }\n}); // Coordinate specifications are sometimes given in a grid index, so we need to spread them out to the proper scaling.\n// Positions with |x| < 20 and |y| < 12 will display well with a scale factor of 10.\n// When making new layouts, the grid coordinates need to be multiplied by 5\n\n\nfunction globalScale(vec, factor, widthFactor = 1) {\n  return vec.matrixTransform(factor * widthFactor, 0, 0, factor);\n}\n\nfunction positionNumToVector(num) {\n  const xPart = num % 400;\n  const yPart = Math.floor(num / 400);\n  return new Vector(5 * (xPart - 200), 5 * (yPart - 200));\n} // Specification for different starting layouts\n\n\nexport const PerkLayouts = [{\n  buttonText: \"Default Untangled\",\n  position: config => positionNumToVector(config.layoutPosList[0])\n}, {\n  buttonText: \"Random Positions\",\n  position: () => new Vector(2000 * Math.random() - 1000, 1200 * Math.random() - 600)\n}, {\n  // This is the perks laid out in the same way that they're laid out in the Android version\n  buttonText: \"Android Layout\",\n  position: config => globalScale(positionNumToVector(config.layoutPosList[1]), 20, 1.5),\n  centerOffset: new Vector(0, 120),\n  forcePhysics: false,\n  straightEdges: true\n}, {\n  buttonText: \"Square\",\n  position: config => globalScale(positionNumToVector(config.layoutPosList[2]), 27.5),\n  centerOffset: new Vector(0, 0),\n  forcePhysics: false,\n  straightEdges: true\n}, {\n  buttonText: \"Horizontal Grid\",\n  position: config => globalScale(positionNumToVector(config.layoutPosList[3]), 32.5),\n  centerOffset: new Vector(-60, 0),\n  forcePhysics: false,\n  straightEdges: true\n}, {\n  buttonText: \"Distance from START\",\n  position: config => globalScale(positionNumToVector(config.layoutPosList[4]), 17.5),\n  centerOffset: new Vector(0, 0),\n  forcePhysics: false,\n  straightEdges: true\n}, {\n  buttonText: \"Blob\",\n  position: config => positionNumToVector(config.layoutPosList[5]),\n  centerOffset: new Vector(50, 0),\n  forcePhysics: false,\n  straightEdges: true,\n  isUnlocked: () => Themes.available().map(t => t.name).includes(\"S11\")\n}];\nexport const PerkNetwork = {\n  container: undefined,\n  network: undefined,\n  nodes: undefined,\n  minScale: 0.2,\n  maxScale: 4,\n  lastPerkNotation: \"\",\n  pulseTimer: 0,\n  initialStabilization: false,\n  currentLayout: {},\n\n  initializeIfNeeded() {\n    const notation = Notations.current.name;\n    if (this.container !== undefined && notation === this.lastPerkNotation) return;\n    this.lastPerkNotation = notation;\n    this.makeNetwork();\n    this.network.on(\"click\", params => {\n      const id = params.nodes[0];\n      if (!isFinite(id)) return;\n      Perks.find(id).purchase();\n      this.updatePerkColor();\n      this.updatePerkSize();\n    });\n    this.network.on(\"dragStart\", () => {\n      const tooltip = this.container.getElementsByClassName(\"vis-tooltip\")[0];\n\n      if (tooltip !== undefined) {\n        tooltip.style.visibility = \"hidden\";\n      }\n\n      if (!this.initialStabilization) {\n        this.setPhysics(player.options.perkPhysicsEnabled);\n        this.initialStabilization = true;\n      }\n    }); // Change node side while dragging on Cancer theme, but skip the method otherwise because it's mildly intensive\n\n    this.network.on(\"dragging\", () => {\n      SecretAchievement(45).tryUnlock();\n      if (Theme.current().name === \"S4\") PerkNetwork.updatePerkSize();\n    });\n    this.network.on(\"zoom\", () => {\n      const scale = this.network.getScale();\n      const clampedScale = Math.clamp(scale, this.minScale, this.maxScale);\n\n      if (scale !== clampedScale) {\n        this.network.moveTo({\n          scale: clampedScale\n        });\n      }\n    });\n    this.network.on(\"stabilizationIterationsDone\", () => {\n      // Centering the perk tree doesn't work until the physics-based movement has stopped after the initial creation\n      if (!this.initialStabilization) {\n        this.resetPosition(false);\n        this.initialStabilization = true;\n      }\n\n      this.setPhysics(player.options.perkPhysicsEnabled);\n    });\n  },\n\n  makeNetwork() {\n    // Need to do some html to be able to apply some css for when in doomed\n    function htmlTitle(html) {\n      const container = document.createElement(\"div\");\n      container.innerHTML = html;\n      return container;\n    } // Just for a bit of fun, tangle it up a bit unless the player specifically chooses not to\n\n\n    const isDisabled = perk => Pelle.isDoomed && Pelle.uselessPerks.includes(perk.id);\n\n    const selectPos = config => PerkLayouts[player.options.perkLayout].position(config);\n\n    this.nodes = new DataSet(Perks.all.map(perk => ({\n      id: perk.id,\n      label: perk.config.label,\n      shape: perk.config.automatorPoints ? \"diamond\" : \"dot\",\n      // As far as I am aware, vis.js doesn't support arbitrary CSS styling; nevertheless, we still want the original\n      // description to be visible instead of being hidden by disable/lock text\n      title: isDisabled(perk) ? htmlTitle(`<span style='text-decoration: line-through;'>${perk.config.description}</span>`) : `${perk.config.description} ${perk.config.automatorPoints && !isDisabled(perk) ? `(+${formatInt(perk.config.automatorPoints)} AP)` : \"\"}`,\n      x: selectPos(perk.config).x,\n      y: selectPos(perk.config).y\n    })));\n    const edges = [];\n\n    for (const perk of Perks.all) {\n      for (const connectedPerk of perk.connectedPerks) {\n        const from = Math.min(perk.id, connectedPerk.id);\n        const to = Math.max(perk.id, connectedPerk.id);\n        if (edges.find(edge => edge.from === from && edge.to === to)) continue;\n        edges.push({\n          from,\n          to\n        });\n      }\n    }\n\n    const nodeData = {\n      nodes: this.nodes,\n      edges\n    };\n    const nodeOptions = {\n      interaction: {\n        hover: true,\n        hoverConnectedEdges: false,\n        selectConnectedEdges: false,\n        tooltipDelay: 0\n      },\n      nodes: {\n        shape: \"dot\",\n        size: 18,\n        font: {\n          size: 0\n        },\n        borderWidth: 2,\n        shadow: true\n      },\n      edges: {\n        width: 4,\n        shadow: true,\n        hoverWidth: width => width,\n        selectionWidth: width => width,\n        color: {\n          inherit: \"both\"\n        },\n        hidden: ui.view.theme === \"S9\"\n      }\n    };\n    const container = document.createElement(\"div\");\n    container.className = \"c-wide-canvas-element vis-network c-perk-network\";\n    container.tabIndex = 900;\n    const canvas = document.createElement(\"canvas\");\n    canvas.className = \"c-perk-network__canvas\";\n    container.appendChild(canvas);\n    this.container = container;\n    this.network = new Network(container, nodeData, nodeOptions);\n  },\n\n  setPhysics(state) {\n    const newState = this.currentLayout.forcePhysics === undefined ? state : this.currentLayout.forcePhysics;\n    this.network.setOptions({\n      physics: {\n        enabled: newState\n      }\n    });\n  },\n\n  setEdgeCurve(state) {\n    const newState = this.currentLayout.straightEdges === undefined ? state : !this.currentLayout.straightEdges;\n    this.network.setOptions({\n      edges: {\n        smooth: {\n          enabled: newState\n        }\n      }\n    });\n  },\n\n  moveToDefaultLayoutPositions(layoutIndex) {\n    // Things go wonky if we don't turn these off before moving\n    this.setPhysics(false);\n    this.setEdgeCurve(false);\n\n    for (const key of Object.keys(PerkNetwork.network.getPositions())) {\n      const id = Number(key);\n      const config = Perks.all.find(p => p.id === id).config;\n      const target = PerkLayouts[layoutIndex].position(config);\n      this.network.moveNode(id, target.x, target.y);\n    } // Properly set attributes and window after all the movement\n\n\n    this.initialStabilization = false;\n    this.resetPosition(false);\n    this.setEdgeCurve(true);\n  },\n\n  forceNetworkRemake() {\n    this.container = undefined;\n    this.initializeIfNeeded(); // Tangled trees use physics to bring it to a semi-usable state; it gets set properly again after stabilization\n\n    this.setPhysics(true);\n  },\n\n  resetPosition(centerOnStart) {\n    var _PerkLayouts$player$o;\n\n    const center = centerOnStart ? PerkNetwork.network.body.nodes[GameDatabase.reality.perks.firstPerk.id] : (_PerkLayouts$player$o = PerkLayouts[player.options.perkLayout].centerOffset) !== null && _PerkLayouts$player$o !== void 0 ? _PerkLayouts$player$o : new Vector(0, 0);\n    this.network.moveTo({\n      position: {\n        x: center.x,\n        y: center.y\n      },\n      scale: 0.4,\n      offset: {\n        x: 0,\n        y: 0\n      }\n    });\n  },\n\n  setLabelVisibility(areVisible) {\n    const options = {\n      nodes: {\n        font: {\n          size: areVisible ? 20 : 0,\n          color: Theme.current().isDark() ? \"#DDDDDD\" : \"#222222\"\n        }\n      }\n    };\n    this.network.setOptions(options);\n  },\n\n  updatePerkColor() {\n    var _this$perkColorList;\n\n    this.perkColorList = (_this$perkColorList = this.perkColorList) !== null && _this$perkColorList !== void 0 ? _this$perkColorList : perkColors();\n    const perkColorList = this.perkColorList;\n\n    function nodeColor(perk) {\n      const perkColor = perkColorList[perk.config.family];\n      const primaryColor = perkColor.primary;\n      const secondaryColor = perkColor.secondary;\n      const pelleUseless = Pelle.isDoomed && Pelle.uselessPerks.includes(perk.id);\n\n      if (pelleUseless) {\n        const _backgroundColor = \"#00bcd4\";\n        const _hoverColor = \"crimson\";\n        const _borderColor = secondaryColor;\n        return {\n          background: _backgroundColor,\n          border: _borderColor,\n          hover: {\n            background: _hoverColor,\n            border: _borderColor\n          },\n          highlight: {\n            background: _backgroundColor,\n            border: _borderColor\n          }\n        };\n      }\n\n      const canBeBought = perk.canBeBought;\n      const isBought = perk.isBought;\n      let backgroundColor;\n\n      if (canBeBought) {\n        if (Theme.current().isDark()) backgroundColor = \"#EEEEEE\";else backgroundColor = \"#111111\";\n      } else if (isBought) backgroundColor = primaryColor;else if (Theme.current().isDark()) backgroundColor = \"#333333\";else backgroundColor = \"#CCCCCC\";\n\n      const hoverColor = canBeBought || isBought ? primaryColor : \"#656565\";\n      const borderColor = secondaryColor;\n      return {\n        background: backgroundColor,\n        border: borderColor,\n        hover: {\n          background: hoverColor,\n          border: borderColor\n        },\n        highlight: {\n          background: backgroundColor,\n          border: borderColor\n        }\n      };\n    }\n\n    const data = Perks.all.map(perk => ({\n      id: perk.id,\n      color: nodeColor(perk)\n    }));\n    this.nodes.update(data);\n  },\n\n  updatePerkSize() {\n    function nodeSize(perk) {\n      PerkNetwork.pulseTimer += 0.1; // Make the nodes pulse continuously on Cancer theme\n\n      const mod = Theme.current().name === \"S4\" ? 10 * Math.sin(5 * PerkNetwork.pulseTimer + 0.1 * perk._config.id) : 0;\n      if (perk._config.label === \"START\") return 35 + mod;\n      if (perk.isBought) return 25 + mod;\n      if (perk.canBeBought) return 20 + mod;\n      return 12 + mod;\n    }\n\n    const data = Perks.all.map(perk => ({\n      id: perk.id,\n      size: nodeSize(perk)\n    }));\n    this.nodes.update(data);\n  }\n\n};","map":{"version":3,"sources":["PerksTab.vue"],"names":[],"mappings":";;AACA,SAAA,OAAA,EAAA,OAAA,QAAA,aAAA;AAEA,SAAA,WAAA,QAAA,uBAAA;AACA,OAAA,cAAA,MAAA,kBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,UADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA;AADA,GAFA;AAKA,EAAA,QAAA,EAAA;AACA,IAAA,YAAA,GAAA;AACA,aAAA,EAAA,CAAA,IAAA,CAAA,SAAA,IAAA,MAAA,CAAA,OAAA,CAAA,YAAA,CAAA,KAAA;AACA;;AAHA,GALA;AAUA,EAAA,KAAA,EAAA;AACA,IAAA,YAAA,CAAA,QAAA,EAAA;AACA,UAAA,EAAA,CAAA,IAAA,CAAA,KAAA,KAAA,IAAA,EAAA,WAAA,CAAA,kBAAA,CAAA,KAAA,EAAA,KACA,WAAA,CAAA,kBAAA,CAAA,QAAA;AACA;;AAJA,GAVA;;AAgBA,EAAA,OAAA,GAAA;AACA,IAAA,QAAA,CAAA,EAAA,CAAA,EAAA,CAAA,UAAA,CAAA,WAAA,EAAA,MAAA,WAAA,CAAA,eAAA,EAAA;AACA,GAlBA;;AAmBA,EAAA,OAAA,GAAA;AACA,IAAA,WAAA,CAAA,oBAAA,GAAA,KAAA;AACA,IAAA,WAAA,CAAA,aAAA,GAAA,WAAA,CAAA,MAAA,CAAA,OAAA,CAAA,UAAA,CAAA;AACA,IAAA,WAAA,CAAA,kBAAA;AACA,QAAA,EAAA,CAAA,IAAA,CAAA,KAAA,KAAA,IAAA,EAAA,WAAA,CAAA,kBAAA,CAAA,KAAA,EAAA,KACA,WAAA,CAAA,kBAAA,CAAA,EAAA,CAAA,IAAA,CAAA,SAAA,IAAA,MAAA,CAAA,OAAA,CAAA,YAAA,CAAA,KAAA;AACA,IAAA,WAAA,CAAA,eAAA;AACA,IAAA,WAAA,CAAA,cAAA;AACA,SAAA,KAAA,CAAA,GAAA,CAAA,WAAA,CAAA,WAAA,CAAA,SAAA;AACA,IAAA,WAAA,CAAA,4BAAA,CAAA,MAAA,CAAA,OAAA,CAAA,UAAA;AACA;;AA7BA,CAAA,C,CAgCA;AACA;;AACA,MAAA,UAAA,GAAA,OAAA;AACA,GAAA,WAAA,CAAA,UAAA,GAAA;AACA,IAAA,OAAA,EAAA,SADA;AAEA,IAAA,SAAA,EAAA;AAFA,GADA;AAKA,GAAA,WAAA,CAAA,QAAA,GAAA;AACA,IAAA,OAAA,EAAA,SADA;AAEA,IAAA,SAAA,EAAA;AAFA,GALA;AASA,GAAA,WAAA,CAAA,QAAA,GAAA;AACA,IAAA,OAAA,EAAA,SADA;AAEA,IAAA,SAAA,EAAA;AAFA,GATA;AAaA,GAAA,WAAA,CAAA,QAAA,GAAA;AACA,IAAA,OAAA,EAAA,SADA;AAEA,IAAA,SAAA,EAAA;AAFA,GAbA;AAiBA,GAAA,WAAA,CAAA,OAAA,GAAA;AACA,IAAA,OAAA,EAAA,SADA;AAEA,IAAA,SAAA,EAAA;AAFA,GAjBA;AAqBA,GAAA,WAAA,CAAA,UAAA,GAAA;AACA,IAAA,OAAA,EAAA,SADA;AAEA,IAAA,SAAA,EAAA;AAFA,GArBA;AAyBA,GAAA,WAAA,CAAA,WAAA,GAAA;AACA,IAAA,OAAA,EAAA,SADA;AAEA,IAAA,SAAA,EAAA;AAFA;AAzBA,CAAA,CAAA,C,CA+BA;AACA;AACA;;;AACA,SAAA,WAAA,CAAA,GAAA,EAAA,MAAA,EAAA,WAAA,GAAA,CAAA,EAAA;AACA,SAAA,GAAA,CAAA,eAAA,CAAA,MAAA,GAAA,WAAA,EAAA,CAAA,EAAA,CAAA,EAAA,MAAA,CAAA;AACA;;AAEA,SAAA,mBAAA,CAAA,GAAA,EAAA;AACA,QAAA,KAAA,GAAA,GAAA,GAAA,GAAA;AACA,QAAA,KAAA,GAAA,IAAA,CAAA,KAAA,CAAA,GAAA,GAAA,GAAA,CAAA;AACA,SAAA,IAAA,MAAA,CAAA,KAAA,KAAA,GAAA,GAAA,CAAA,EAAA,KAAA,KAAA,GAAA,GAAA,CAAA,CAAA;AACA,C,CAEA;;;AACA,OAAA,MAAA,WAAA,GAAA,CACA;AACA,EAAA,UAAA,EAAA,mBADA;AAEA,EAAA,QAAA,EAAA,MAAA,IAAA,mBAAA,CAAA,MAAA,CAAA,aAAA,CAAA,CAAA,CAAA;AAFA,CADA,EAKA;AACA,EAAA,UAAA,EAAA,kBADA;AAEA,EAAA,QAAA,EAAA,MAAA,IAAA,MAAA,CAAA,OAAA,IAAA,CAAA,MAAA,EAAA,GAAA,IAAA,EAAA,OAAA,IAAA,CAAA,MAAA,EAAA,GAAA,GAAA;AAFA,CALA,EASA;AACA;AACA,EAAA,UAAA,EAAA,gBAFA;AAGA,EAAA,QAAA,EAAA,MAAA,IAAA,WAAA,CAAA,mBAAA,CAAA,MAAA,CAAA,aAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAHA;AAIA,EAAA,YAAA,EAAA,IAAA,MAAA,CAAA,CAAA,EAAA,GAAA,CAJA;AAKA,EAAA,YAAA,EAAA,KALA;AAMA,EAAA,aAAA,EAAA;AANA,CATA,EAiBA;AACA,EAAA,UAAA,EAAA,QADA;AAEA,EAAA,QAAA,EAAA,MAAA,IAAA,WAAA,CAAA,mBAAA,CAAA,MAAA,CAAA,aAAA,CAAA,CAAA,CAAA,CAAA,EAAA,IAAA,CAFA;AAGA,EAAA,YAAA,EAAA,IAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAHA;AAIA,EAAA,YAAA,EAAA,KAJA;AAKA,EAAA,aAAA,EAAA;AALA,CAjBA,EAwBA;AACA,EAAA,UAAA,EAAA,iBADA;AAEA,EAAA,QAAA,EAAA,MAAA,IAAA,WAAA,CAAA,mBAAA,CAAA,MAAA,CAAA,aAAA,CAAA,CAAA,CAAA,CAAA,EAAA,IAAA,CAFA;AAGA,EAAA,YAAA,EAAA,IAAA,MAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAHA;AAIA,EAAA,YAAA,EAAA,KAJA;AAKA,EAAA,aAAA,EAAA;AALA,CAxBA,EA+BA;AACA,EAAA,UAAA,EAAA,qBADA;AAEA,EAAA,QAAA,EAAA,MAAA,IAAA,WAAA,CAAA,mBAAA,CAAA,MAAA,CAAA,aAAA,CAAA,CAAA,CAAA,CAAA,EAAA,IAAA,CAFA;AAGA,EAAA,YAAA,EAAA,IAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAHA;AAIA,EAAA,YAAA,EAAA,KAJA;AAKA,EAAA,aAAA,EAAA;AALA,CA/BA,EAsCA;AACA,EAAA,UAAA,EAAA,MADA;AAEA,EAAA,QAAA,EAAA,MAAA,IAAA,mBAAA,CAAA,MAAA,CAAA,aAAA,CAAA,CAAA,CAAA,CAFA;AAGA,EAAA,YAAA,EAAA,IAAA,MAAA,CAAA,EAAA,EAAA,CAAA,CAHA;AAIA,EAAA,YAAA,EAAA,KAJA;AAKA,EAAA,aAAA,EAAA,IALA;AAMA,EAAA,UAAA,EAAA,MAAA,MAAA,CAAA,SAAA,GAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,IAAA,EAAA,QAAA,CAAA,KAAA;AANA,CAtCA,CAAA;AAgDA,OAAA,MAAA,WAAA,GAAA;AACA,EAAA,SAAA,EAAA,SADA;AAEA,EAAA,OAAA,EAAA,SAFA;AAGA,EAAA,KAAA,EAAA,SAHA;AAIA,EAAA,QAAA,EAAA,GAJA;AAKA,EAAA,QAAA,EAAA,CALA;AAMA,EAAA,gBAAA,EAAA,EANA;AAOA,EAAA,UAAA,EAAA,CAPA;AAQA,EAAA,oBAAA,EAAA,KARA;AASA,EAAA,aAAA,EAAA,EATA;;AAUA,EAAA,kBAAA,GAAA;AACA,UAAA,QAAA,GAAA,SAAA,CAAA,OAAA,CAAA,IAAA;AACA,QAAA,KAAA,SAAA,KAAA,SAAA,IAAA,QAAA,KAAA,KAAA,gBAAA,EAAA;AACA,SAAA,gBAAA,GAAA,QAAA;AAEA,SAAA,WAAA;AAEA,SAAA,OAAA,CAAA,EAAA,CAAA,OAAA,EAAA,MAAA,IAAA;AACA,YAAA,EAAA,GAAA,MAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AACA,UAAA,CAAA,QAAA,CAAA,EAAA,CAAA,EAAA;AACA,MAAA,KAAA,CAAA,IAAA,CAAA,EAAA,EAAA,QAAA;AACA,WAAA,eAAA;AACA,WAAA,cAAA;AACA,KANA;AAQA,SAAA,OAAA,CAAA,EAAA,CAAA,WAAA,EAAA,MAAA;AACA,YAAA,OAAA,GAAA,KAAA,SAAA,CAAA,sBAAA,CAAA,aAAA,EAAA,CAAA,CAAA;;AACA,UAAA,OAAA,KAAA,SAAA,EAAA;AACA,QAAA,OAAA,CAAA,KAAA,CAAA,UAAA,GAAA,QAAA;AACA;;AACA,UAAA,CAAA,KAAA,oBAAA,EAAA;AACA,aAAA,UAAA,CAAA,MAAA,CAAA,OAAA,CAAA,kBAAA;AACA,aAAA,oBAAA,GAAA,IAAA;AACA;AACA,KATA,EAfA,CA0BA;;AACA,SAAA,OAAA,CAAA,EAAA,CAAA,UAAA,EAAA,MAAA;AACA,MAAA,iBAAA,CAAA,EAAA,CAAA,CAAA,SAAA;AACA,UAAA,KAAA,CAAA,OAAA,GAAA,IAAA,KAAA,IAAA,EAAA,WAAA,CAAA,cAAA;AACA,KAHA;AAKA,SAAA,OAAA,CAAA,EAAA,CAAA,MAAA,EAAA,MAAA;AACA,YAAA,KAAA,GAAA,KAAA,OAAA,CAAA,QAAA,EAAA;AACA,YAAA,YAAA,GAAA,IAAA,CAAA,KAAA,CAAA,KAAA,EAAA,KAAA,QAAA,EAAA,KAAA,QAAA,CAAA;;AACA,UAAA,KAAA,KAAA,YAAA,EAAA;AACA,aAAA,OAAA,CAAA,MAAA,CAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SAAA;AACA;AACA,KANA;AAQA,SAAA,OAAA,CAAA,EAAA,CAAA,6BAAA,EAAA,MAAA;AACA;AACA,UAAA,CAAA,KAAA,oBAAA,EAAA;AACA,aAAA,aAAA,CAAA,KAAA;AACA,aAAA,oBAAA,GAAA,IAAA;AACA;;AACA,WAAA,UAAA,CAAA,MAAA,CAAA,OAAA,CAAA,kBAAA;AACA,KAPA;AAQA,GA1DA;;AA2DA,EAAA,WAAA,GAAA;AACA;AACA,aAAA,SAAA,CAAA,IAAA,EAAA;AACA,YAAA,SAAA,GAAA,QAAA,CAAA,aAAA,CAAA,KAAA,CAAA;AACA,MAAA,SAAA,CAAA,SAAA,GAAA,IAAA;AACA,aAAA,SAAA;AACA,KANA,CAOA;;;AACA,UAAA,UAAA,GAAA,IAAA,IAAA,KAAA,CAAA,QAAA,IAAA,KAAA,CAAA,YAAA,CAAA,QAAA,CAAA,IAAA,CAAA,EAAA,CAAA;;AACA,UAAA,SAAA,GAAA,MAAA,IAAA,WAAA,CAAA,MAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA,QAAA,CAAA,MAAA,CAAA;;AACA,SAAA,KAAA,GAAA,IAAA,OAAA,CAAA,KAAA,CAAA,GAAA,CAAA,GAAA,CAAA,IAAA,KAAA;AACA,MAAA,EAAA,EAAA,IAAA,CAAA,EADA;AAEA,MAAA,KAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAFA;AAGA,MAAA,KAAA,EAAA,IAAA,CAAA,MAAA,CAAA,eAAA,GAAA,SAAA,GAAA,KAHA;AAIA;AACA;AACA,MAAA,KAAA,EAAA,UAAA,CAAA,IAAA,CAAA,GACA,SAAA,CACA,gDAAA,IAAA,CAAA,MAAA,CAAA,WAAA,SADA,CADA,GAIA,GAAA,IAAA,CAAA,MAAA,CAAA,WAAA,IAAA,IAAA,CAAA,MAAA,CAAA,eAAA,IAAA,CAAA,UAAA,CAAA,IAAA,CAAA,GACA,KAAA,SAAA,CAAA,IAAA,CAAA,MAAA,CAAA,eAAA,CAAA,MADA,GAEA,EAAA,EAZA;AAcA,MAAA,CAAA,EAAA,SAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,CAdA;AAeA,MAAA,CAAA,EAAA,SAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA;AAfA,KAAA,CAAA,CAAA,CAAA;AAkBA,UAAA,KAAA,GAAA,EAAA;;AACA,SAAA,MAAA,IAAA,IAAA,KAAA,CAAA,GAAA,EAAA;AACA,WAAA,MAAA,aAAA,IAAA,IAAA,CAAA,cAAA,EAAA;AACA,cAAA,IAAA,GAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,EAAA,EAAA,aAAA,CAAA,EAAA,CAAA;AACA,cAAA,EAAA,GAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,EAAA,EAAA,aAAA,CAAA,EAAA,CAAA;AACA,YAAA,KAAA,CAAA,IAAA,CAAA,IAAA,IAAA,IAAA,CAAA,IAAA,KAAA,IAAA,IAAA,IAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA;AACA,QAAA,KAAA,CAAA,IAAA,CAAA;AAAA,UAAA,IAAA;AAAA,UAAA;AAAA,SAAA;AACA;AACA;;AAEA,UAAA,QAAA,GAAA;AACA,MAAA,KAAA,EAAA,KAAA,KADA;AAEA,MAAA;AAFA,KAAA;AAKA,UAAA,WAAA,GAAA;AACA,MAAA,WAAA,EAAA;AACA,QAAA,KAAA,EAAA,IADA;AAEA,QAAA,mBAAA,EAAA,KAFA;AAGA,QAAA,oBAAA,EAAA,KAHA;AAIA,QAAA,YAAA,EAAA;AAJA,OADA;AAOA,MAAA,KAAA,EAAA;AACA,QAAA,KAAA,EAAA,KADA;AAEA,QAAA,IAAA,EAAA,EAFA;AAGA,QAAA,IAAA,EAAA;AACA,UAAA,IAAA,EAAA;AADA,SAHA;AAMA,QAAA,WAAA,EAAA,CANA;AAOA,QAAA,MAAA,EAAA;AAPA,OAPA;AAgBA,MAAA,KAAA,EAAA;AACA,QAAA,KAAA,EAAA,CADA;AAEA,QAAA,MAAA,EAAA,IAFA;AAGA,QAAA,UAAA,EAAA,KAAA,IAAA,KAHA;AAIA,QAAA,cAAA,EAAA,KAAA,IAAA,KAJA;AAKA,QAAA,KAAA,EAAA;AACA,UAAA,OAAA,EAAA;AADA,SALA;AAQA,QAAA,MAAA,EAAA,EAAA,CAAA,IAAA,CAAA,KAAA,KAAA;AARA;AAhBA,KAAA;AA4BA,UAAA,SAAA,GAAA,QAAA,CAAA,aAAA,CAAA,KAAA,CAAA;AACA,IAAA,SAAA,CAAA,SAAA,GAAA,kDAAA;AACA,IAAA,SAAA,CAAA,QAAA,GAAA,GAAA;AACA,UAAA,MAAA,GAAA,QAAA,CAAA,aAAA,CAAA,QAAA,CAAA;AACA,IAAA,MAAA,CAAA,SAAA,GAAA,wBAAA;AACA,IAAA,SAAA,CAAA,WAAA,CAAA,MAAA;AACA,SAAA,SAAA,GAAA,SAAA;AAEA,SAAA,OAAA,GAAA,IAAA,OAAA,CAAA,SAAA,EAAA,QAAA,EAAA,WAAA,CAAA;AACA,GA3IA;;AA4IA,EAAA,UAAA,CAAA,KAAA,EAAA;AACA,UAAA,QAAA,GAAA,KAAA,aAAA,CAAA,YAAA,KAAA,SAAA,GAAA,KAAA,GAAA,KAAA,aAAA,CAAA,YAAA;AACA,SAAA,OAAA,CAAA,UAAA,CAAA;AAAA,MAAA,OAAA,EAAA;AAAA,QAAA,OAAA,EAAA;AAAA;AAAA,KAAA;AACA,GA/IA;;AAgJA,EAAA,YAAA,CAAA,KAAA,EAAA;AACA,UAAA,QAAA,GAAA,KAAA,aAAA,CAAA,aAAA,KAAA,SAAA,GAAA,KAAA,GAAA,CAAA,KAAA,aAAA,CAAA,aAAA;AACA,SAAA,OAAA,CAAA,UAAA,CAAA;AAAA,MAAA,KAAA,EAAA;AAAA,QAAA,MAAA,EAAA;AAAA,UAAA,OAAA,EAAA;AAAA;AAAA;AAAA,KAAA;AACA,GAnJA;;AAoJA,EAAA,4BAAA,CAAA,WAAA,EAAA;AACA;AACA,SAAA,UAAA,CAAA,KAAA;AACA,SAAA,YAAA,CAAA,KAAA;;AAEA,SAAA,MAAA,GAAA,IAAA,MAAA,CAAA,IAAA,CAAA,WAAA,CAAA,OAAA,CAAA,YAAA,EAAA,CAAA,EAAA;AACA,YAAA,EAAA,GAAA,MAAA,CAAA,GAAA,CAAA;AACA,YAAA,MAAA,GAAA,KAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,MAAA;AACA,YAAA,MAAA,GAAA,WAAA,CAAA,WAAA,CAAA,CAAA,QAAA,CAAA,MAAA,CAAA;AACA,WAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EAAA,MAAA,CAAA,CAAA,EAAA,MAAA,CAAA,CAAA;AACA,KAVA,CAYA;;;AACA,SAAA,oBAAA,GAAA,KAAA;AACA,SAAA,aAAA,CAAA,KAAA;AACA,SAAA,YAAA,CAAA,IAAA;AACA,GApKA;;AAqKA,EAAA,kBAAA,GAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,kBAAA,GAFA,CAGA;;AACA,SAAA,UAAA,CAAA,IAAA;AACA,GA1KA;;AA2KA,EAAA,aAAA,CAAA,aAAA,EAAA;AAAA;;AACA,UAAA,MAAA,GAAA,aAAA,GACA,WAAA,CAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA,YAAA,CAAA,OAAA,CAAA,KAAA,CAAA,SAAA,CAAA,EAAA,CADA,4BAEA,WAAA,CAAA,MAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA,YAFA,yEAEA,IAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAFA;AAGA,SAAA,OAAA,CAAA,MAAA,CAAA;AAAA,MAAA,QAAA,EAAA;AAAA,QAAA,CAAA,EAAA,MAAA,CAAA,CAAA;AAAA,QAAA,CAAA,EAAA,MAAA,CAAA;AAAA,OAAA;AAAA,MAAA,KAAA,EAAA,GAAA;AAAA,MAAA,MAAA,EAAA;AAAA,QAAA,CAAA,EAAA,CAAA;AAAA,QAAA,CAAA,EAAA;AAAA;AAAA,KAAA;AACA,GAhLA;;AAiLA,EAAA,kBAAA,CAAA,UAAA,EAAA;AACA,UAAA,OAAA,GAAA;AACA,MAAA,KAAA,EAAA;AACA,QAAA,IAAA,EAAA;AACA,UAAA,IAAA,EAAA,UAAA,GAAA,EAAA,GAAA,CADA;AAEA,UAAA,KAAA,EAAA,KAAA,CAAA,OAAA,GAAA,MAAA,KAAA,SAAA,GAAA;AAFA;AADA;AADA,KAAA;AAQA,SAAA,OAAA,CAAA,UAAA,CAAA,OAAA;AACA,GA3LA;;AA4LA,EAAA,eAAA,GAAA;AAAA;;AACA,SAAA,aAAA,0BAAA,KAAA,aAAA,qEAAA,UAAA,EAAA;AACA,UAAA,aAAA,GAAA,KAAA,aAAA;;AAEA,aAAA,SAAA,CAAA,IAAA,EAAA;AACA,YAAA,SAAA,GAAA,aAAA,CAAA,IAAA,CAAA,MAAA,CAAA,MAAA,CAAA;AACA,YAAA,YAAA,GAAA,SAAA,CAAA,OAAA;AACA,YAAA,cAAA,GAAA,SAAA,CAAA,SAAA;AAEA,YAAA,YAAA,GAAA,KAAA,CAAA,QAAA,IAAA,KAAA,CAAA,YAAA,CAAA,QAAA,CAAA,IAAA,CAAA,EAAA,CAAA;;AACA,UAAA,YAAA,EAAA;AACA,cAAA,gBAAA,GAAA,SAAA;AACA,cAAA,WAAA,GAAA,SAAA;AACA,cAAA,YAAA,GAAA,cAAA;AACA,eAAA;AACA,UAAA,UAAA,EAAA,gBADA;AAEA,UAAA,MAAA,EAAA,YAFA;AAGA,UAAA,KAAA,EAAA;AACA,YAAA,UAAA,EAAA,WADA;AAEA,YAAA,MAAA,EAAA;AAFA,WAHA;AAOA,UAAA,SAAA,EAAA;AACA,YAAA,UAAA,EAAA,gBADA;AAEA,YAAA,MAAA,EAAA;AAFA;AAPA,SAAA;AAYA;;AACA,YAAA,WAAA,GAAA,IAAA,CAAA,WAAA;AACA,YAAA,QAAA,GAAA,IAAA,CAAA,QAAA;AAEA,UAAA,eAAA;;AACA,UAAA,WAAA,EAAA;AACA,YAAA,KAAA,CAAA,OAAA,GAAA,MAAA,EAAA,EAAA,eAAA,GAAA,SAAA,CAAA,KACA,eAAA,GAAA,SAAA;AACA,OAHA,MAGA,IAAA,QAAA,EAAA,eAAA,GAAA,YAAA,CAAA,KACA,IAAA,KAAA,CAAA,OAAA,GAAA,MAAA,EAAA,EAAA,eAAA,GAAA,SAAA,CAAA,KACA,eAAA,GAAA,SAAA;;AAEA,YAAA,UAAA,GAAA,WAAA,IAAA,QAAA,GAAA,YAAA,GAAA,SAAA;AACA,YAAA,WAAA,GAAA,cAAA;AAEA,aAAA;AACA,QAAA,UAAA,EAAA,eADA;AAEA,QAAA,MAAA,EAAA,WAFA;AAGA,QAAA,KAAA,EAAA;AACA,UAAA,UAAA,EAAA,UADA;AAEA,UAAA,MAAA,EAAA;AAFA,SAHA;AAOA,QAAA,SAAA,EAAA;AACA,UAAA,UAAA,EAAA,eADA;AAEA,UAAA,MAAA,EAAA;AAFA;AAPA,OAAA;AAYA;;AAEA,UAAA,IAAA,GAAA,KAAA,CAAA,GAAA,CACA,GADA,CACA,IAAA,KAAA;AAAA,MAAA,EAAA,EAAA,IAAA,CAAA,EAAA;AAAA,MAAA,KAAA,EAAA,SAAA,CAAA,IAAA;AAAA,KAAA,CADA,CAAA;AAEA,SAAA,KAAA,CAAA,MAAA,CAAA,IAAA;AACA,GAtPA;;AAuPA,EAAA,cAAA,GAAA;AACA,aAAA,QAAA,CAAA,IAAA,EAAA;AACA,MAAA,WAAA,CAAA,UAAA,IAAA,GAAA,CADA,CAEA;;AACA,YAAA,GAAA,GAAA,KAAA,CAAA,OAAA,GAAA,IAAA,KAAA,IAAA,GACA,KAAA,IAAA,CAAA,GAAA,CAAA,IAAA,WAAA,CAAA,UAAA,GAAA,MAAA,IAAA,CAAA,OAAA,CAAA,EAAA,CADA,GAEA,CAFA;AAGA,UAAA,IAAA,CAAA,OAAA,CAAA,KAAA,KAAA,OAAA,EAAA,OAAA,KAAA,GAAA;AACA,UAAA,IAAA,CAAA,QAAA,EAAA,OAAA,KAAA,GAAA;AACA,UAAA,IAAA,CAAA,WAAA,EAAA,OAAA,KAAA,GAAA;AACA,aAAA,KAAA,GAAA;AACA;;AAEA,UAAA,IAAA,GAAA,KAAA,CAAA,GAAA,CACA,GADA,CACA,IAAA,KAAA;AAAA,MAAA,EAAA,EAAA,IAAA,CAAA,EAAA;AAAA,MAAA,IAAA,EAAA,QAAA,CAAA,IAAA;AAAA,KAAA,CADA,CAAA;AAEA,SAAA,KAAA,CAAA,MAAA,CAAA,IAAA;AACA;;AAvQA,CAAA","sourcesContent":["<script>\r\nimport { DataSet, Network } from \"vis-network\";\r\n\r\nimport { PERK_FAMILY } from \"@/core/secret-formula\";\r\nimport PerkPointLabel from \"./PerkPointLabel\";\r\n\r\nexport default {\r\n  name: \"PerksTab\",\r\n  components: {\r\n    PerkPointLabel\r\n  },\r\n  computed: {\r\n    showHintText() {\r\n      return ui.view.shiftDown || player.options.showHintText.perks;\r\n    }\r\n  },\r\n  watch: {\r\n    showHintText(newValue) {\r\n      if (ui.view.theme === \"S9\") PerkNetwork.setLabelVisibility(false);\r\n      else PerkNetwork.setLabelVisibility(newValue);\r\n    }\r\n  },\r\n  created() {\r\n    EventHub.ui.on(GAME_EVENT.PERK_BOUGHT, () => PerkNetwork.updatePerkColor());\r\n  },\r\n  mounted() {\r\n    PerkNetwork.initialStabilization = false;\r\n    PerkNetwork.currentLayout = PerkLayouts[player.options.perkLayout];\r\n    PerkNetwork.initializeIfNeeded();\r\n    if (ui.view.theme === \"S9\") PerkNetwork.setLabelVisibility(false);\r\n    else PerkNetwork.setLabelVisibility(ui.view.shiftDown || player.options.showHintText.perks);\r\n    PerkNetwork.updatePerkColor();\r\n    PerkNetwork.updatePerkSize();\r\n    this.$refs.tab.appendChild(PerkNetwork.container);\r\n    PerkNetwork.moveToDefaultLayoutPositions(player.options.perkLayout);\r\n  }\r\n};\r\n\r\n// Primary is lifted from the study tree (mostly),\r\n// secondary is primary -15% l in hsl, apart from reality which is -10%\r\nconst perkColors = () => ({\r\n  [PERK_FAMILY.ANTIMATTER]: {\r\n    primary: \"#22aa48\",\r\n    secondary: \"#156a2d\"\r\n  },\r\n  [PERK_FAMILY.INFINITY]: {\r\n    primary: \"#b67f33\",\r\n    secondary: \"#7b5623\"\r\n  },\r\n  [PERK_FAMILY.ETERNITY]: {\r\n    primary: \"#b241e3\",\r\n    secondary: \"#8b1cba\"\r\n  },\r\n  [PERK_FAMILY.DILATION]: {\r\n    primary: \"#64dd17\",\r\n    secondary: \"#449810\"\r\n  },\r\n  [PERK_FAMILY.REALITY]: {\r\n    primary: \"#0b600e\",\r\n    secondary: \"#063207\"\r\n  },\r\n  [PERK_FAMILY.AUTOMATION]: {\r\n    primary: \"#ff0000\",\r\n    secondary: \"#b30000\"\r\n  },\r\n  [PERK_FAMILY.ACHIEVEMENT]: {\r\n    primary: \"#fdd835\",\r\n    secondary: \"#e3ba02\"\r\n  },\r\n});\r\n\r\n// Coordinate specifications are sometimes given in a grid index, so we need to spread them out to the proper scaling.\r\n// Positions with |x| < 20 and |y| < 12 will display well with a scale factor of 10.\r\n// When making new layouts, the grid coordinates need to be multiplied by 5\r\nfunction globalScale(vec, factor, widthFactor = 1) {\r\n  return vec.matrixTransform(factor * widthFactor, 0, 0, factor);\r\n}\r\n\r\nfunction positionNumToVector(num) {\r\n  const xPart = num % 400;\r\n  const yPart = Math.floor(num / 400);\r\n  return new Vector(5 * (xPart - 200), 5 * (yPart - 200));\r\n}\r\n\r\n// Specification for different starting layouts\r\nexport const PerkLayouts = [\r\n  {\r\n    buttonText: \"Default Untangled\",\r\n    position: config => positionNumToVector(config.layoutPosList[0]),\r\n  },\r\n  {\r\n    buttonText: \"Random Positions\",\r\n    position: () => new Vector(2000 * Math.random() - 1000, 1200 * Math.random() - 600),\r\n  },\r\n  {\r\n    // This is the perks laid out in the same way that they're laid out in the Android version\r\n    buttonText: \"Android Layout\",\r\n    position: config => globalScale(positionNumToVector(config.layoutPosList[1]), 20, 1.5),\r\n    centerOffset: new Vector(0, 120),\r\n    forcePhysics: false,\r\n    straightEdges: true,\r\n  },\r\n  {\r\n    buttonText: \"Square\",\r\n    position: config => globalScale(positionNumToVector(config.layoutPosList[2]), 27.5),\r\n    centerOffset: new Vector(0, 0),\r\n    forcePhysics: false,\r\n    straightEdges: true,\r\n  },\r\n  {\r\n    buttonText: \"Horizontal Grid\",\r\n    position: config => globalScale(positionNumToVector(config.layoutPosList[3]), 32.5),\r\n    centerOffset: new Vector(-60, 0),\r\n    forcePhysics: false,\r\n    straightEdges: true,\r\n  },\r\n  {\r\n    buttonText: \"Distance from START\",\r\n    position: config => globalScale(positionNumToVector(config.layoutPosList[4]), 17.5),\r\n    centerOffset: new Vector(0, 0),\r\n    forcePhysics: false,\r\n    straightEdges: true,\r\n  },\r\n  {\r\n    buttonText: \"Blob\",\r\n    position: config => positionNumToVector(config.layoutPosList[5]),\r\n    centerOffset: new Vector(50, 0),\r\n    forcePhysics: false,\r\n    straightEdges: true,\r\n    isUnlocked: () => Themes.available().map(t => t.name).includes(\"S11\"),\r\n  }\r\n];\r\n\r\nexport const PerkNetwork = {\r\n  container: undefined,\r\n  network: undefined,\r\n  nodes: undefined,\r\n  minScale: 0.2,\r\n  maxScale: 4,\r\n  lastPerkNotation: \"\",\r\n  pulseTimer: 0,\r\n  initialStabilization: false,\r\n  currentLayout: {},\r\n  initializeIfNeeded() {\r\n    const notation = Notations.current.name;\r\n    if (this.container !== undefined && notation === this.lastPerkNotation) return;\r\n    this.lastPerkNotation = notation;\r\n\r\n    this.makeNetwork();\r\n\r\n    this.network.on(\"click\", params => {\r\n      const id = params.nodes[0];\r\n      if (!isFinite(id)) return;\r\n      Perks.find(id).purchase();\r\n      this.updatePerkColor();\r\n      this.updatePerkSize();\r\n    });\r\n\r\n    this.network.on(\"dragStart\", () => {\r\n      const tooltip = this.container.getElementsByClassName(\"vis-tooltip\")[0];\r\n      if (tooltip !== undefined) {\r\n        tooltip.style.visibility = \"hidden\";\r\n      }\r\n      if (!this.initialStabilization) {\r\n        this.setPhysics(player.options.perkPhysicsEnabled);\r\n        this.initialStabilization = true;\r\n      }\r\n    });\r\n\r\n    // Change node side while dragging on Cancer theme, but skip the method otherwise because it's mildly intensive\r\n    this.network.on(\"dragging\", () => {\r\n      SecretAchievement(45).tryUnlock();\r\n      if (Theme.current().name === \"S4\") PerkNetwork.updatePerkSize();\r\n    });\r\n\r\n    this.network.on(\"zoom\", () => {\r\n      const scale = this.network.getScale();\r\n      const clampedScale = Math.clamp(scale, this.minScale, this.maxScale);\r\n      if (scale !== clampedScale) {\r\n        this.network.moveTo({ scale: clampedScale });\r\n      }\r\n    });\r\n\r\n    this.network.on(\"stabilizationIterationsDone\", () => {\r\n      // Centering the perk tree doesn't work until the physics-based movement has stopped after the initial creation\r\n      if (!this.initialStabilization) {\r\n        this.resetPosition(false);\r\n        this.initialStabilization = true;\r\n      }\r\n      this.setPhysics(player.options.perkPhysicsEnabled);\r\n    });\r\n  },\r\n  makeNetwork() {\r\n    // Need to do some html to be able to apply some css for when in doomed\r\n    function htmlTitle(html) {\r\n      const container = document.createElement(\"div\");\r\n      container.innerHTML = html;\r\n      return container;\r\n    }\r\n    // Just for a bit of fun, tangle it up a bit unless the player specifically chooses not to\r\n    const isDisabled = perk => Pelle.isDoomed && Pelle.uselessPerks.includes(perk.id);\r\n    const selectPos = config => PerkLayouts[player.options.perkLayout].position(config);\r\n    this.nodes = new DataSet(Perks.all.map(perk => ({\r\n      id: perk.id,\r\n      label: perk.config.label,\r\n      shape: perk.config.automatorPoints ? \"diamond\" : \"dot\",\r\n      // As far as I am aware, vis.js doesn't support arbitrary CSS styling; nevertheless, we still want the original\r\n      // description to be visible instead of being hidden by disable/lock text\r\n      title: (isDisabled(perk)\r\n        ? htmlTitle(\r\n          `<span style='text-decoration: line-through;'>${perk.config.description}</span>`\r\n        )\r\n        : `${perk.config.description} ${perk.config.automatorPoints && !isDisabled(perk)\r\n          ? `(+${formatInt(perk.config.automatorPoints)} AP)`\r\n          : \"\"}`\r\n      ),\r\n      x: selectPos(perk.config).x,\r\n      y: selectPos(perk.config).y,\r\n    })));\r\n\r\n    const edges = [];\r\n    for (const perk of Perks.all) {\r\n      for (const connectedPerk of perk.connectedPerks) {\r\n        const from = Math.min(perk.id, connectedPerk.id);\r\n        const to = Math.max(perk.id, connectedPerk.id);\r\n        if (edges.find(edge => edge.from === from && edge.to === to)) continue;\r\n        edges.push({ from, to });\r\n      }\r\n    }\r\n\r\n    const nodeData = {\r\n      nodes: this.nodes,\r\n      edges\r\n    };\r\n\r\n    const nodeOptions = {\r\n      interaction: {\r\n        hover: true,\r\n        hoverConnectedEdges: false,\r\n        selectConnectedEdges: false,\r\n        tooltipDelay: 0,\r\n      },\r\n      nodes: {\r\n        shape: \"dot\",\r\n        size: 18,\r\n        font: {\r\n          size: 0\r\n        },\r\n        borderWidth: 2,\r\n        shadow: true\r\n      },\r\n      edges: {\r\n        width: 4,\r\n        shadow: true,\r\n        hoverWidth: width => width,\r\n        selectionWidth: width => width,\r\n        color: {\r\n          inherit: \"both\"\r\n        },\r\n        hidden: ui.view.theme === \"S9\"\r\n      },\r\n    };\r\n\r\n    const container = document.createElement(\"div\");\r\n    container.className = \"c-wide-canvas-element vis-network c-perk-network\";\r\n    container.tabIndex = 900;\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.className = \"c-perk-network__canvas\";\r\n    container.appendChild(canvas);\r\n    this.container = container;\r\n\r\n    this.network = new Network(container, nodeData, nodeOptions);\r\n  },\r\n  setPhysics(state) {\r\n    const newState = this.currentLayout.forcePhysics === undefined ? state : this.currentLayout.forcePhysics;\r\n    this.network.setOptions({ physics: { enabled: newState } });\r\n  },\r\n  setEdgeCurve(state) {\r\n    const newState = this.currentLayout.straightEdges === undefined ? state : !this.currentLayout.straightEdges;\r\n    this.network.setOptions({ edges: { smooth: { enabled: newState } } });\r\n  },\r\n  moveToDefaultLayoutPositions(layoutIndex) {\r\n    // Things go wonky if we don't turn these off before moving\r\n    this.setPhysics(false);\r\n    this.setEdgeCurve(false);\r\n\r\n    for (const key of Object.keys(PerkNetwork.network.getPositions())) {\r\n      const id = Number(key);\r\n      const config = Perks.all.find(p => p.id === id).config;\r\n      const target = PerkLayouts[layoutIndex].position(config);\r\n      this.network.moveNode(id, target.x, target.y);\r\n    }\r\n\r\n    // Properly set attributes and window after all the movement\r\n    this.initialStabilization = false;\r\n    this.resetPosition(false);\r\n    this.setEdgeCurve(true);\r\n  },\r\n  forceNetworkRemake() {\r\n    this.container = undefined;\r\n    this.initializeIfNeeded();\r\n    // Tangled trees use physics to bring it to a semi-usable state; it gets set properly again after stabilization\r\n    this.setPhysics(true);\r\n  },\r\n  resetPosition(centerOnStart) {\r\n    const center = centerOnStart\r\n      ? PerkNetwork.network.body.nodes[GameDatabase.reality.perks.firstPerk.id]\r\n      : (PerkLayouts[player.options.perkLayout].centerOffset ?? new Vector(0, 0));\r\n    this.network.moveTo({ position: { x: center.x, y: center.y }, scale: 0.4, offset: { x: 0, y: 0 } });\r\n  },\r\n  setLabelVisibility(areVisible) {\r\n    const options = {\r\n      nodes: {\r\n        font: {\r\n          size: areVisible ? 20 : 0,\r\n          color: Theme.current().isDark() ? \"#DDDDDD\" : \"#222222\",\r\n        }\r\n      }\r\n    };\r\n    this.network.setOptions(options);\r\n  },\r\n  updatePerkColor() {\r\n    this.perkColorList = this.perkColorList ?? perkColors();\r\n    const perkColorList = this.perkColorList;\r\n\r\n    function nodeColor(perk) {\r\n      const perkColor = perkColorList[perk.config.family];\r\n      const primaryColor = perkColor.primary;\r\n      const secondaryColor = perkColor.secondary;\r\n\r\n      const pelleUseless = Pelle.isDoomed && Pelle.uselessPerks.includes(perk.id);\r\n      if (pelleUseless) {\r\n        const backgroundColor = \"#00bcd4\";\r\n        const hoverColor = \"crimson\";\r\n        const borderColor = secondaryColor;\r\n        return {\r\n          background: backgroundColor,\r\n          border: borderColor,\r\n          hover: {\r\n            background: hoverColor,\r\n            border: borderColor\r\n          },\r\n          highlight: {\r\n            background: backgroundColor,\r\n            border: borderColor\r\n          }\r\n        };\r\n      }\r\n      const canBeBought = perk.canBeBought;\r\n      const isBought = perk.isBought;\r\n\r\n      let backgroundColor;\r\n      if (canBeBought) {\r\n        if (Theme.current().isDark()) backgroundColor = \"#EEEEEE\";\r\n        else backgroundColor = \"#111111\";\r\n      } else if (isBought) backgroundColor = primaryColor;\r\n      else if (Theme.current().isDark()) backgroundColor = \"#333333\";\r\n      else backgroundColor = \"#CCCCCC\";\r\n\r\n      const hoverColor = canBeBought || isBought ? primaryColor : \"#656565\";\r\n      const borderColor = secondaryColor;\r\n\r\n      return {\r\n        background: backgroundColor,\r\n        border: borderColor,\r\n        hover: {\r\n          background: hoverColor,\r\n          border: borderColor\r\n        },\r\n        highlight: {\r\n          background: backgroundColor,\r\n          border: borderColor\r\n        }\r\n      };\r\n    }\r\n\r\n    const data = Perks.all\r\n      .map(perk => ({ id: perk.id, color: nodeColor(perk) }));\r\n    this.nodes.update(data);\r\n  },\r\n  updatePerkSize() {\r\n    function nodeSize(perk) {\r\n      PerkNetwork.pulseTimer += 0.1;\r\n      // Make the nodes pulse continuously on Cancer theme\r\n      const mod = Theme.current().name === \"S4\"\r\n        ? 10 * Math.sin(5 * PerkNetwork.pulseTimer + 0.1 * perk._config.id)\r\n        : 0;\r\n      if (perk._config.label === \"START\") return 35 + mod;\r\n      if (perk.isBought) return 25 + mod;\r\n      if (perk.canBeBought) return 20 + mod;\r\n      return 12 + mod;\r\n    }\r\n\r\n    const data = Perks.all\r\n      .map(perk => ({ id: perk.id, size: nodeSize(perk) }));\r\n    this.nodes.update(data);\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    ref=\"tab\"\r\n    class=\"c-perk-tab\"\r\n  >\r\n    <PerkPointLabel />\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/perks"},"metadata":{},"sourceType":"module"}