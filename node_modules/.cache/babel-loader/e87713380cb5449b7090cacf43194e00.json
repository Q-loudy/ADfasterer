{"ast":null,"code":"import \"core-js/modules/es.array.reduce.js\";\nimport { DC } from \"../../constants\";\nimport { PlayerProgress } from \"../../player-progress\";\nimport { MultiplierTabHelper } from \"./helper-functions\";\nimport { MultiplierTabIcons } from \"./icons\"; // See index.js for documentation\n\nexport const AD = {\n  total: {\n    name: dim => {\n      if (dim) return `AD ${dim} Multiplier`;\n\n      if (NormalChallenge(12).isRunning) {\n        if (MultiplierTabHelper.actualNC12Production().eq(0)) return \"Base AD Production from All Dimensions\";\n        return `Base AD Production from ${MultiplierTabHelper.isNC12ProducingEven() ? \"Even\" : \"Odd\"} Dimensions`;\n      }\n\n      return \"Base AD Production\";\n    },\n    displayOverride: dim => {\n      if (dim) {\n        const singleMult = NormalChallenge(12).isRunning ? MultiplierTabHelper.multInNC12(dim) : AntimatterDimension(dim).multiplier;\n        return formatX(singleMult, 2, 2);\n      }\n\n      const maxTier = EternityChallenge(7).isRunning ? 7 : MultiplierTabHelper.activeDimCount(\"AD\");\n      if (NormalChallenge(12).isRunning) return `${format(MultiplierTabHelper.actualNC12Production(), 2)}/sec`;\n      return `${format(AntimatterDimensions.all.filter(ad => ad.isProducing).map(ad => ad.multiplier).reduce((x, y) => x.times(y), DC.D1).times(AntimatterDimension(maxTier).totalAmount), 2)}/sec`;\n    },\n    multValue: dim => {\n      if (NormalChallenge(12).isRunning) {\n        const nc12Prod = MultiplierTabHelper.actualNC12Production();\n        if (!dim) return nc12Prod.eq(0) ? 1 : nc12Prod;\n        return (MultiplierTabHelper.isNC12ProducingEven() ? dim % 2 === 0 : dim % 2 === 1) ? MultiplierTabHelper.multInNC12(dim) : DC.D1;\n      }\n\n      const mult = dim ? AntimatterDimension(dim).multiplier : AntimatterDimensions.all.filter(ad => ad.isProducing).map(ad => ad.multiplier).reduce((x, y) => x.times(y), DC.D1);\n      const highestDim = AntimatterDimension(EternityChallenge(7).isRunning ? 7 : MultiplierTabHelper.activeDimCount(\"AD\")).totalAmount;\n      return mult.times(highestDim).clampMin(1);\n    },\n    isActive: dim => dim ? dim <= MultiplierTabHelper.activeDimCount(\"AD\") : true,\n    dilationEffect: () => {\n      const baseEff = player.dilation.active || Enslaved.isRunning ? 0.75 * Effects.product(DilationUpgrade.dilationPenalty) : 1;\n      return baseEff * (Effarig.isRunning ? Effarig.multDilation : 1);\n    },\n    isDilated: true,\n    overlay: [\"Î©\", \"<i class='fas fa-cube' />\"],\n    icon: dim => MultiplierTabIcons.DIMENSION(\"AD\", dim)\n  },\n  purchase: {\n    name: dim => dim ? `Purchased AD ${dim}` : \"Purchases\",\n    multValue: dim => {\n      const getPurchases = ad => Laitela.continuumActive ? AntimatterDimension(ad).continuumValue : Math.floor(AntimatterDimension(ad).bought / 10);\n\n      if (dim) return Decimal.pow(AntimatterDimensions.buyTenMultiplier, getPurchases(dim));\n      return AntimatterDimensions.all.filter(ad => ad.isProducing).map(ad => Decimal.pow(AntimatterDimensions.buyTenMultiplier, getPurchases(ad.tier))).reduce((x, y) => x.times(y), DC.D1);\n    },\n    isActive: () => !EternityChallenge(11).isRunning,\n    icon: dim => MultiplierTabIcons.PURCHASE(\"AD\", dim)\n  },\n  highestDim: {\n    name: () => `Amount of highest Dimension`,\n    displayOverride: () => {\n      const dim = EternityChallenge(7).isRunning ? 7 : MultiplierTabHelper.activeDimCount(\"AD\");\n      return `AD ${dim}, ${format(AntimatterDimension(dim).totalAmount, 2)}`;\n    },\n    multValue: () => {\n      const dim = EternityChallenge(7).isRunning ? 7 : MultiplierTabHelper.activeDimCount(\"AD\");\n      return AntimatterDimension(dim).totalAmount;\n    },\n    isActive: () => AntimatterDimension(1).isProducing,\n    icon: MultiplierTabIcons.DIMENSION(\"AD\")\n  },\n  dimboost: {\n    name: dim => dim ? `Dimboosts on AD ${dim}` : \"Dimboosts\",\n    multValue: dim => dim ? DimBoost.multiplierToNDTier(dim) : AntimatterDimensions.all.filter(ad => ad.isProducing).map(ad => DimBoost.multiplierToNDTier(ad.tier)).reduce((x, y) => x.times(y), DC.D1),\n    isActive: true,\n    icon: MultiplierTabIcons.DIMBOOST\n  },\n  sacrifice: {\n    name: \"Sacrifice Multiplier\",\n    multValue: dim => !dim || dim === 8 ? Sacrifice.totalBoost : DC.D1,\n    isActive: dim => (!dim || dim === 8) && Sacrifice.totalBoost.gt(1) && !EternityChallenge(11).isRunning,\n    icon: MultiplierTabIcons.SACRIFICE(\"antimatter\")\n  },\n  achievementMult: {\n    name: \"Achievement Multiplier\",\n    multValue: dim => Decimal.pow(Achievements.power, dim ? 1 : MultiplierTabHelper.activeDimCount(\"AD\")),\n    isActive: () => !Pelle.isDoomed && !EternityChallenge(11).isRunning,\n    icon: MultiplierTabIcons.ACHIEVEMENT\n  },\n  achievement: {\n    name: \"Achievement Rewards\",\n    multValue: dim => {\n      const allMult = DC.D1.timesEffectsOf(Achievement(48), Achievement(56), Achievement(65), Achievement(72), Achievement(73), Achievement(74), Achievement(76), Achievement(84), Achievement(91), Achievement(92));\n      const dimMults = Array.repeat(DC.D1, 9);\n\n      for (let tier = 1; tier <= 8; tier++) {\n        if (tier === 1) {\n          dimMults[tier] = dimMults[tier].timesEffectsOf(Achievement(28), Achievement(31), Achievement(68), Achievement(71));\n        }\n\n        dimMults[tier] = dimMults[tier].timesEffectsOf(tier === 8 ? Achievement(23) : null, tier < 8 ? Achievement(34) : null, tier <= 4 ? Achievement(64) : null);\n\n        if (Achievement(43).isUnlocked) {\n          dimMults[tier] = dimMults[tier].times(1 + tier / 100);\n        }\n      }\n\n      if (dim) return allMult.times(dimMults[dim]);\n      let totalMult = DC.D1;\n\n      for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(\"AD\"); tier++) {\n        totalMult = totalMult.times(dimMults[tier]).times(allMult);\n      }\n\n      return totalMult;\n    },\n    powValue: () => Achievement(183).effectOrDefault(1),\n    isActive: () => !EternityChallenge(11).isRunning,\n    icon: MultiplierTabIcons.ACHIEVEMENT\n  },\n  infinityUpgrade: {\n    name: dim => dim ? `Infinity Upgrades (AD ${dim})` : \"Infinity Upgrades\",\n    multValue: dim => {\n      const allMult = DC.D1.timesEffectsOf(InfinityUpgrade.totalTimeMult, InfinityUpgrade.thisInfinityTimeMult);\n      const dimMults = Array.repeat(DC.D1, 9);\n\n      for (let tier = 1; tier <= 8; tier++) {\n        if (tier === 1) {\n          dimMults[tier] = dimMults[tier].timesEffectsOf(InfinityUpgrade.unspentIPMult, InfinityUpgrade.unspentIPMult.chargedEffect);\n        }\n\n        dimMults[tier] = dimMults[tier].timesEffectsOf(AntimatterDimension(tier).infinityUpgrade);\n      }\n\n      if (dim) return allMult.times(dimMults[dim]);\n      let totalMult = DC.D1;\n\n      for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(\"AD\"); tier++) {\n        totalMult = totalMult.times(dimMults[tier]).times(allMult);\n      }\n\n      return totalMult;\n    },\n    powValue: dim => {\n      const allPow = InfinityUpgrade.totalTimeMult.chargedEffect.effectOrDefault(1) * InfinityUpgrade.thisInfinityTimeMult.chargedEffect.effectOrDefault(1);\n      const dimPow = Array.repeat(1, 9);\n\n      for (let tier = 1; tier <= 8; tier++) {\n        dimPow[tier] = AntimatterDimension(tier).infinityUpgrade.chargedEffect.effectOrDefault(1);\n      }\n\n      if (dim) return allPow * dimPow[dim]; // This isn't entirely accurate because you can't return a power for all ADs if only some of them actually have\n      // it, so we cheat somewhat by returning the geometric mean of all actively producing dimensions (this should\n      // be close to the same value if all the base multipliers are similar in magnitude)\n\n      return allPow * Math.exp(dimPow.slice(1).map(n => Math.log(n)).sum() / MultiplierTabHelper.activeDimCount(\"AD\"));\n    },\n    isActive: () => PlayerProgress.infinityUnlocked() && !EternityChallenge(11).isRunning,\n    icon: MultiplierTabIcons.UPGRADE(\"infinity\")\n  },\n  breakInfinityUpgrade: {\n    name: \"Break Infinity Upgrades\",\n    multValue: dim => {\n      const mult = DC.D1.timesEffectsOf(BreakInfinityUpgrade.totalAMMult, BreakInfinityUpgrade.currentAMMult, BreakInfinityUpgrade.achievementMult, BreakInfinityUpgrade.slowestChallengeMult, BreakInfinityUpgrade.infinitiedMult);\n      return Decimal.pow(mult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"AD\"));\n    },\n    isActive: () => player.break && !EternityChallenge(11).isRunning,\n    icon: MultiplierTabIcons.BREAK_INFINITY\n  },\n  infinityPower: {\n    name: \"Multiplier from Infinity Power\",\n    fakeValue: () => Currency.infinityPower.value.pow(InfinityDimensions.powerConversionRate),\n    multValue: dim => {\n      const mult = Currency.infinityPower.value.pow(InfinityDimensions.powerConversionRate).max(1);\n      return Decimal.pow(mult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"AD\"));\n    },\n    isActive: () => Currency.infinityPower.value.gt(1) && !EternityChallenge(9).isRunning,\n    icon: MultiplierTabIcons.INFINITY_POWER\n  },\n  infinityChallenge: {\n    name: dim => dim ? `Infinity Challenges (AD ${dim})` : \"Infinity Challenges\",\n    multValue: dim => {\n      const allMult = DC.D1.timesEffectsOf(InfinityChallenge(3), InfinityChallenge(3).reward);\n      const dimMults = Array.repeat(DC.D1, 9);\n\n      for (let tier = 1; tier <= 8; tier++) {\n        dimMults[tier] = dimMults[tier].timesEffectsOf(tier > 1 && tier < 8 ? InfinityChallenge(8).reward : null);\n      }\n\n      if (dim) return allMult.times(dimMults[dim]);\n      let totalMult = DC.D1;\n\n      for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(\"AD\"); tier++) {\n        totalMult = totalMult.times(dimMults[tier]).times(allMult);\n      }\n\n      return totalMult;\n    },\n    powValue: () => InfinityChallenge(4).reward.effectOrDefault(1),\n    isActive: () => player.break && !EternityChallenge(11).isRunning,\n    icon: MultiplierTabIcons.CHALLENGE(\"infinity\")\n  },\n  timeStudy: {\n    name: dim => dim ? `Time Studies (AD ${dim})` : \"Time Studies\",\n    multValue: dim => {\n      const allMult = DC.D1.timesEffectsOf(TimeStudy(91), TimeStudy(101), TimeStudy(161), TimeStudy(193));\n      const dimMults = Array.repeat(DC.D1, 9);\n\n      for (let tier = 1; tier <= 8; tier++) {\n        // We don't want to double-count the base effect that TS31 boosts\n        const infinitiedMult = DC.D1.timesEffectsOf(AntimatterDimension(tier).infinityUpgrade, BreakInfinityUpgrade.infinitiedMult);\n        dimMults[tier] = dimMults[tier].times(infinitiedMult.pow(TimeStudy(31).effectOrDefault(1) - 1));\n        dimMults[tier] = dimMults[tier].timesEffectsOf(tier < 8 ? TimeStudy(71) : null, tier === 8 ? TimeStudy(214) : null, tier === 1 ? TimeStudy(234) : null);\n      }\n\n      if (dim) return allMult.times(dimMults[dim]);\n      let totalMult = DC.D1;\n\n      for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(\"AD\"); tier++) {\n        totalMult = totalMult.times(dimMults[tier]).times(allMult);\n      }\n\n      return totalMult;\n    },\n    isActive: () => PlayerProgress.eternityUnlocked() && !EternityChallenge(11).isRunning,\n    icon: MultiplierTabIcons.TIME_STUDY\n  },\n  eternityChallenge: {\n    name: \"Eternity Challenges\",\n    multValue: dim => Decimal.pow(EternityChallenge(10).effectValue, dim ? 1 : MultiplierTabHelper.activeDimCount(\"AD\")),\n    isActive: () => EternityChallenge(10).isRunning,\n    icon: MultiplierTabIcons.CHALLENGE(\"eternity\")\n  },\n  glyph: {\n    name: \"Glyph Effects\",\n    multValue: dim => {\n      const mult = getAdjustedGlyphEffect(\"powermult\");\n      return Decimal.pow(mult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"AD\"));\n    },\n    powValue: () => {\n      const totalPow = getAdjustedGlyphEffect(\"powerpow\") * getAdjustedGlyphEffect(\"effarigdimensions\");\n      return totalPow * (player.dilation.active ? getAdjustedGlyphEffect(\"dilationpow\") : 1);\n    },\n    isActive: () => PlayerProgress.realityUnlocked() && !EternityChallenge(11).isRunning,\n    icon: MultiplierTabIcons.GENERIC_GLYPH\n  },\n  v: {\n    name: \"5 V-Achievement Milestone - AD Power based on Space Theorems\",\n    powValue: () => VUnlocks.adPow.effectOrDefault(1),\n    isActive: () => PlayerProgress.realityUnlocked() && !EternityChallenge(11).isRunning,\n    icon: MultiplierTabIcons.ACHIEVEMENT\n  },\n  alchemy: {\n    name: \"Glyph Alchemy\",\n    multValue: dim => {\n      const mult = AlchemyResource.dimensionality.effectOrDefault(1).times(Currency.realityMachines.value.powEffectOf(AlchemyResource.force));\n      return Decimal.pow(mult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"AD\"));\n    },\n    powValue: dim => {\n      const basePow = AlchemyResource.power.effectOrDefault(1) * Ra.momentumValue; // Not entirely accurate, but returns the geometric mean of all producing dimensions (which should be close)\n      // Set to default value of 1 in non-unlocked case (arguably some sort of effect-or-default would be better,\n      // but I don't want to risk breaking things).\n\n      let inflationPow = 1;\n\n      if (AlchemyResource.inflation.isUnlocked) {\n        if (dim) {\n          inflationPow = AntimatterDimension(dim).multiplier.gte(AlchemyResource.inflation.effectValue) ? 1.05 : 1;\n        } else {\n          const inflated = AntimatterDimensions.all.countWhere(ad => ad.isProducing && ad.multiplier.gte(AlchemyResource.inflation.effectValue));\n          inflationPow = Math.pow(1.05, inflated / AntimatterDimensions.all.countWhere(ad => ad.isProducing));\n        }\n      }\n\n      return basePow * inflationPow;\n    },\n    isActive: () => Ra.unlocks.unlockGlyphAlchemy.canBeApplied && !EternityChallenge(11).isRunning,\n    icon: MultiplierTabIcons.ALCHEMY\n  },\n  pelle: {\n    name: \"Pelle Upgrades\",\n    multValue: dim => Decimal.pow(PelleUpgrade.antimatterDimensionMult.effectOrDefault(1), dim ? 1 : MultiplierTabHelper.activeDimCount(\"AD\")),\n    powValue: () => PelleRifts.paradox.effectOrDefault(DC.D1).toNumber(),\n    isActive: () => Pelle.isDoomed && !EternityChallenge(11).isRunning,\n    icon: MultiplierTabIcons.PELLE\n  },\n  iap: {\n    name: \"Shop Tab Purchases\",\n    multValue: dim => {\n      const mult = ShopPurchase.dimPurchases.currentMult * ShopPurchase.allDimPurchases.currentMult;\n      return Decimal.pow(mult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"AD\"));\n    },\n    isActive: () => ShopPurchaseData.totalSTD > 0 && !EternityChallenge(11).isRunning,\n    icon: MultiplierTabIcons.IAP\n  },\n  effectNC: {\n    name: dim => dim ? `Normal Challenge Effect (AD ${dim})` : \"Normal Challenge Effects\",\n    // Depending on the challenge itself and the game state, this could be either a nerf or a buff, so we make\n    // sure to render a x or / conditionally. This requires we calculate the value itself again, however\n    displayOverride: dim => {\n      const formatFn = num => num.gte(1) ? formatX(num, 2, 2) : `/${format(num.reciprocal(), 2, 2)}`;\n\n      let dimMults = Array.repeat(DC.D1, 9);\n\n      if (NormalChallenge(2).isRunning) {\n        dimMults = Array.repeat(new Decimal(player.chall2Pow), 9);\n      }\n\n      if (NormalChallenge(3).isRunning) {\n        dimMults[1] = dimMults[1].times(player.chall3Pow);\n      }\n\n      if (NormalChallenge(12).isRunning) {\n        dimMults[2] = AntimatterDimension(2).totalAmount.pow(0.6);\n        dimMults[4] = AntimatterDimension(4).totalAmount.pow(0.4);\n        dimMults[6] = AntimatterDimension(6).totalAmount.pow(0.2);\n      }\n\n      if (dim) return formatFn(dimMults[dim]);\n      let totalMult = DC.D1;\n\n      for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(\"AD\"); tier++) {\n        totalMult = totalMult.times(dimMults[tier]);\n      }\n\n      return formatFn(totalMult);\n    },\n    // This and displayOverride contain largely the same code\n    multValue: dim => {\n      let dimMults = Array.repeat(DC.D1, 9); // Do not change this to an else-if, as NC2/NC3 need to be enterable simultaneously in IC1\n\n      if (NormalChallenge(2).isRunning) {\n        dimMults = Array.repeat(new Decimal(player.chall2Pow), 9);\n      }\n\n      if (NormalChallenge(3).isRunning) {\n        dimMults[1] = dimMults[1].times(player.chall3Pow);\n      } // Legacy behavior for NC12 we're preserving dictates that it boosts production based on dimension amount\n      // without actually increasing the multiplier itself, so this effectively turns the powers in the production\n      // code info effective multipliers raised to pow-1\n\n\n      if (NormalChallenge(12).isRunning) {\n        dimMults[2] = AntimatterDimension(2).totalAmount.pow(0.6);\n        dimMults[4] = AntimatterDimension(4).totalAmount.pow(0.4);\n        dimMults[6] = AntimatterDimension(6).totalAmount.pow(0.2); // We have to hide this when producing odd or when referencing a dimension which has no amount, but then we\n        // also need to total up the multipliers when on the grouped layout. No amount evaluates to zero, so in all\n        // those cases we use 1 instead in order to calculate properly\n\n        if (!MultiplierTabHelper.isNC12ProducingEven()) return DC.D1;\n        if (dim) return dimMults[dim].neq(0) ? dimMults[dim] : DC.D1;\n        let totalNC12 = DC.D1;\n\n        for (let d = 2; d <= 6; d += 2) totalNC12 = totalNC12.times(dimMults[d].clampMin(1));\n\n        return totalNC12;\n      }\n\n      if (dim) return dimMults[dim];\n      let totalMult = DC.D1;\n\n      for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(\"AD\"); tier++) {\n        totalMult = totalMult.times(dimMults[tier]);\n      }\n\n      return totalMult;\n    },\n    isActive: () => [2, 3, 12].some(c => NormalChallenge(c).isRunning),\n    icon: MultiplierTabIcons.CHALLENGE(\"infinity\")\n  },\n  nerfIC: {\n    name: dim => dim ? `Infinity Challenge Nerf (AD ${dim})` : \"Infinity Challenge Nerf\",\n    multValue: dim => {\n      let dimMults = Array.repeat(DC.D1, 9);\n\n      if (InfinityChallenge(4).isRunning) {\n        for (let tier = 1; tier <= 8; tier++) {\n          if (player.postC4Tier !== tier) {\n            dimMults[tier] = dimMults[tier].pow(1 - InfinityChallenge(4).effectValue).reciprocal();\n          }\n        }\n      } else if (InfinityChallenge(6).isRunning) {\n        dimMults = Array.repeat(DC.D1.dividedByEffectOf(InfinityChallenge(6)), 9);\n      } else if (InfinityChallenge(8).isRunning) {\n        dimMults = Array.repeat(DC.D1.timesEffectsOf(InfinityChallenge(8)), 9);\n      }\n\n      if (dim) return dimMults[dim];\n      let totalMult = DC.D1;\n\n      for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(\"AD\"); tier++) {\n        totalMult = totalMult.times(dimMults[tier]);\n      }\n\n      return totalMult;\n    },\n    isActive: () => [4, 6, 8].some(ic => InfinityChallenge(ic).isRunning),\n    icon: MultiplierTabIcons.CHALLENGE(\"infinity\")\n  },\n  nerfV: {\n    name: \"V's Reality\",\n    powValue: () => 0.5,\n    isActive: () => V.isRunning,\n    icon: MultiplierTabIcons.GENERIC_V\n  },\n  nerfCursed: {\n    name: \"Cursed Glyphs\",\n    powValue: () => getAdjustedGlyphEffect(\"curseddimensions\"),\n    isActive: () => getAdjustedGlyphEffect(\"curseddimensions\") !== 1,\n    icon: MultiplierTabIcons.SPECIFIC_GLYPH(\"cursed\")\n  },\n  nerfPelle: {\n    name: \"Doomed Reality\",\n    multValue: 0.1,\n    powValue: () => PelleStrikes.infinity.hasStrike ? 0.5 : 1,\n    isActive: () => Pelle.isDoomed,\n    icon: MultiplierTabIcons.PELLE\n  }\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/multiplier-tab/antimatter-dimensions.js"],"names":["DC","PlayerProgress","MultiplierTabHelper","MultiplierTabIcons","AD","total","name","dim","NormalChallenge","isRunning","actualNC12Production","eq","isNC12ProducingEven","displayOverride","singleMult","multInNC12","AntimatterDimension","multiplier","formatX","maxTier","EternityChallenge","activeDimCount","format","AntimatterDimensions","all","filter","ad","isProducing","map","reduce","x","y","times","D1","totalAmount","multValue","nc12Prod","mult","highestDim","clampMin","isActive","dilationEffect","baseEff","player","dilation","active","Enslaved","Effects","product","DilationUpgrade","dilationPenalty","Effarig","multDilation","isDilated","overlay","icon","DIMENSION","purchase","getPurchases","Laitela","continuumActive","continuumValue","Math","floor","bought","Decimal","pow","buyTenMultiplier","tier","PURCHASE","dimboost","DimBoost","multiplierToNDTier","DIMBOOST","sacrifice","Sacrifice","totalBoost","gt","SACRIFICE","achievementMult","Achievements","power","Pelle","isDoomed","ACHIEVEMENT","achievement","allMult","timesEffectsOf","Achievement","dimMults","Array","repeat","isUnlocked","totalMult","powValue","effectOrDefault","infinityUpgrade","InfinityUpgrade","totalTimeMult","thisInfinityTimeMult","unspentIPMult","chargedEffect","allPow","dimPow","exp","slice","n","log","sum","infinityUnlocked","UPGRADE","breakInfinityUpgrade","BreakInfinityUpgrade","totalAMMult","currentAMMult","slowestChallengeMult","infinitiedMult","break","BREAK_INFINITY","infinityPower","fakeValue","Currency","value","InfinityDimensions","powerConversionRate","max","INFINITY_POWER","infinityChallenge","InfinityChallenge","reward","CHALLENGE","timeStudy","TimeStudy","eternityUnlocked","TIME_STUDY","eternityChallenge","effectValue","glyph","getAdjustedGlyphEffect","totalPow","realityUnlocked","GENERIC_GLYPH","v","VUnlocks","adPow","alchemy","AlchemyResource","dimensionality","realityMachines","powEffectOf","force","basePow","Ra","momentumValue","inflationPow","inflation","gte","inflated","countWhere","unlocks","unlockGlyphAlchemy","canBeApplied","ALCHEMY","pelle","PelleUpgrade","antimatterDimensionMult","PelleRifts","paradox","toNumber","PELLE","iap","ShopPurchase","dimPurchases","currentMult","allDimPurchases","ShopPurchaseData","totalSTD","IAP","effectNC","formatFn","num","reciprocal","chall2Pow","chall3Pow","neq","totalNC12","d","some","c","nerfIC","postC4Tier","dividedByEffectOf","ic","nerfV","V","GENERIC_V","nerfCursed","SPECIFIC_GLYPH","nerfPelle","PelleStrikes","infinity","hasStrike"],"mappings":"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","sourcesContent":["import { DC } from \"../../constants\";\r\nimport { PlayerProgress } from \"../../player-progress\";\r\n\r\nimport { MultiplierTabHelper } from \"./helper-functions\";\r\nimport { MultiplierTabIcons } from \"./icons\";\r\n\r\n// See index.js for documentation\r\nexport const AD = {\r\n  total: {\r\n    name: dim => {\r\n      if (dim) return `AD ${dim} Multiplier`;\r\n      if (NormalChallenge(12).isRunning) {\r\n        if (MultiplierTabHelper.actualNC12Production().eq(0)) return \"Base AD Production from All Dimensions\";\r\n        return `Base AD Production from ${MultiplierTabHelper.isNC12ProducingEven() ? \"Even\" : \"Odd\"} Dimensions`;\r\n      }\r\n      return \"Base AD Production\";\r\n    },\r\n    displayOverride: dim => {\r\n      if (dim) {\r\n        const singleMult = NormalChallenge(12).isRunning\r\n          ? MultiplierTabHelper.multInNC12(dim)\r\n          : AntimatterDimension(dim).multiplier;\r\n        return formatX(singleMult, 2, 2);\r\n      }\r\n      const maxTier = EternityChallenge(7).isRunning ? 7 : MultiplierTabHelper.activeDimCount(\"AD\");\r\n      if (NormalChallenge(12).isRunning) return `${format(MultiplierTabHelper.actualNC12Production(), 2)}/sec`;\r\n      return `${format(AntimatterDimensions.all\r\n        .filter(ad => ad.isProducing)\r\n        .map(ad => ad.multiplier)\r\n        .reduce((x, y) => x.times(y), DC.D1)\r\n        .times(AntimatterDimension(maxTier).totalAmount), 2)}/sec`;\r\n    },\r\n    multValue: dim => {\r\n      if (NormalChallenge(12).isRunning) {\r\n        const nc12Prod = MultiplierTabHelper.actualNC12Production();\r\n        if (!dim) return nc12Prod.eq(0) ? 1 : nc12Prod;\r\n        return (MultiplierTabHelper.isNC12ProducingEven() ? dim % 2 === 0 : dim % 2 === 1)\r\n          ? MultiplierTabHelper.multInNC12(dim)\r\n          : DC.D1;\r\n      }\r\n      const mult = dim\r\n        ? AntimatterDimension(dim).multiplier\r\n        : AntimatterDimensions.all\r\n          .filter(ad => ad.isProducing)\r\n          .map(ad => ad.multiplier)\r\n          .reduce((x, y) => x.times(y), DC.D1);\r\n      const highestDim = AntimatterDimension(\r\n        EternityChallenge(7).isRunning ? 7 : MultiplierTabHelper.activeDimCount(\"AD\")).totalAmount;\r\n      return mult.times(highestDim).clampMin(1);\r\n    },\r\n    isActive: dim => (dim ? dim <= MultiplierTabHelper.activeDimCount(\"AD\") : true),\r\n    dilationEffect: () => {\r\n      const baseEff = (player.dilation.active || Enslaved.isRunning)\r\n        ? 0.75 * Effects.product(DilationUpgrade.dilationPenalty)\r\n        : 1;\r\n      return baseEff * (Effarig.isRunning ? Effarig.multDilation : 1);\r\n    },\r\n    isDilated: true,\r\n    overlay: [\"Î©\", \"<i class='fas fa-cube' />\"],\r\n    icon: dim => MultiplierTabIcons.DIMENSION(\"AD\", dim),\r\n  },\r\n  purchase: {\r\n    name: dim => (dim ? `Purchased AD ${dim}` : \"Purchases\"),\r\n    multValue: dim => {\r\n      const getPurchases = ad => (Laitela.continuumActive\r\n        ? AntimatterDimension(ad).continuumValue\r\n        : Math.floor(AntimatterDimension(ad).bought / 10)\r\n      );\r\n      if (dim) return Decimal.pow(AntimatterDimensions.buyTenMultiplier, getPurchases(dim));\r\n      return AntimatterDimensions.all\r\n        .filter(ad => ad.isProducing)\r\n        .map(ad => Decimal.pow(AntimatterDimensions.buyTenMultiplier, getPurchases(ad.tier)))\r\n        .reduce((x, y) => x.times(y), DC.D1);\r\n    },\r\n    isActive: () => !EternityChallenge(11).isRunning,\r\n    icon: dim => MultiplierTabIcons.PURCHASE(\"AD\", dim),\r\n  },\r\n  highestDim: {\r\n    name: () => `Amount of highest Dimension`,\r\n    displayOverride: () => {\r\n      const dim = EternityChallenge(7).isRunning ? 7 : MultiplierTabHelper.activeDimCount(\"AD\");\r\n      return `AD ${dim}, ${format(AntimatterDimension(dim).totalAmount, 2)}`;\r\n    },\r\n    multValue: () => {\r\n      const dim = EternityChallenge(7).isRunning ? 7 : MultiplierTabHelper.activeDimCount(\"AD\");\r\n      return AntimatterDimension(dim).totalAmount;\r\n    },\r\n    isActive: () => AntimatterDimension(1).isProducing,\r\n    icon: MultiplierTabIcons.DIMENSION(\"AD\"),\r\n  },\r\n\r\n  dimboost: {\r\n    name: dim => (dim ? `Dimboosts on AD ${dim}` : \"Dimboosts\"),\r\n    multValue: dim => (dim\r\n      ? DimBoost.multiplierToNDTier(dim)\r\n      : AntimatterDimensions.all\r\n        .filter(ad => ad.isProducing)\r\n        .map(ad => DimBoost.multiplierToNDTier(ad.tier))\r\n        .reduce((x, y) => x.times(y), DC.D1)),\r\n    isActive: true,\r\n    icon: MultiplierTabIcons.DIMBOOST,\r\n  },\r\n  sacrifice: {\r\n    name: \"Sacrifice Multiplier\",\r\n    multValue: dim => ((!dim || dim === 8) ? Sacrifice.totalBoost : DC.D1),\r\n    isActive: dim => (!dim || dim === 8) && Sacrifice.totalBoost.gt(1) && !EternityChallenge(11).isRunning,\r\n    icon: MultiplierTabIcons.SACRIFICE(\"antimatter\"),\r\n  },\r\n  achievementMult: {\r\n    name: \"Achievement Multiplier\",\r\n    multValue: dim => Decimal.pow(Achievements.power, dim ? 1 : MultiplierTabHelper.activeDimCount(\"AD\")),\r\n    isActive: () => !Pelle.isDoomed && !EternityChallenge(11).isRunning,\r\n    icon: MultiplierTabIcons.ACHIEVEMENT,\r\n  },\r\n  achievement: {\r\n    name: \"Achievement Rewards\",\r\n    multValue: dim => {\r\n      const allMult = DC.D1.timesEffectsOf(\r\n        Achievement(48),\r\n        Achievement(56),\r\n        Achievement(65),\r\n        Achievement(72),\r\n        Achievement(73),\r\n        Achievement(74),\r\n        Achievement(76),\r\n        Achievement(84),\r\n        Achievement(91),\r\n        Achievement(92)\r\n      );\r\n\r\n      const dimMults = Array.repeat(DC.D1, 9);\r\n      for (let tier = 1; tier <= 8; tier++) {\r\n        if (tier === 1) {\r\n          dimMults[tier] = dimMults[tier].timesEffectsOf(\r\n            Achievement(28),\r\n            Achievement(31),\r\n            Achievement(68),\r\n            Achievement(71),\r\n          );\r\n        }\r\n        dimMults[tier] = dimMults[tier].timesEffectsOf(\r\n          tier === 8 ? Achievement(23) : null,\r\n          tier < 8 ? Achievement(34) : null,\r\n          tier <= 4 ? Achievement(64) : null,\r\n        );\r\n        if (Achievement(43).isUnlocked) {\r\n          dimMults[tier] = dimMults[tier].times(1 + tier / 100);\r\n        }\r\n      }\r\n\r\n      if (dim) return allMult.times(dimMults[dim]);\r\n      let totalMult = DC.D1;\r\n      for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(\"AD\"); tier++) {\r\n        totalMult = totalMult.times(dimMults[tier]).times(allMult);\r\n      }\r\n      return totalMult;\r\n    },\r\n    powValue: () => Achievement(183).effectOrDefault(1),\r\n    isActive: () => !EternityChallenge(11).isRunning,\r\n    icon: MultiplierTabIcons.ACHIEVEMENT,\r\n  },\r\n  infinityUpgrade: {\r\n    name: dim => (dim ? `Infinity Upgrades (AD ${dim})` : \"Infinity Upgrades\"),\r\n    multValue: dim => {\r\n      const allMult = DC.D1.timesEffectsOf(\r\n        InfinityUpgrade.totalTimeMult,\r\n        InfinityUpgrade.thisInfinityTimeMult,\r\n      );\r\n\r\n      const dimMults = Array.repeat(DC.D1, 9);\r\n      for (let tier = 1; tier <= 8; tier++) {\r\n        if (tier === 1) {\r\n          dimMults[tier] = dimMults[tier].timesEffectsOf(\r\n            InfinityUpgrade.unspentIPMult,\r\n            InfinityUpgrade.unspentIPMult.chargedEffect,\r\n          );\r\n        }\r\n        dimMults[tier] = dimMults[tier].timesEffectsOf(\r\n          AntimatterDimension(tier).infinityUpgrade,\r\n        );\r\n      }\r\n\r\n      if (dim) return allMult.times(dimMults[dim]);\r\n      let totalMult = DC.D1;\r\n      for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(\"AD\"); tier++) {\r\n        totalMult = totalMult.times(dimMults[tier]).times(allMult);\r\n      }\r\n      return totalMult;\r\n    },\r\n    powValue: dim => {\r\n      const allPow = InfinityUpgrade.totalTimeMult.chargedEffect.effectOrDefault(1) *\r\n          InfinityUpgrade.thisInfinityTimeMult.chargedEffect.effectOrDefault(1);\r\n\r\n      const dimPow = Array.repeat(1, 9);\r\n      for (let tier = 1; tier <= 8; tier++) {\r\n        dimPow[tier] = AntimatterDimension(tier).infinityUpgrade.chargedEffect.effectOrDefault(1);\r\n      }\r\n\r\n      if (dim) return allPow * dimPow[dim];\r\n      // This isn't entirely accurate because you can't return a power for all ADs if only some of them actually have\r\n      // it, so we cheat somewhat by returning the geometric mean of all actively producing dimensions (this should\r\n      // be close to the same value if all the base multipliers are similar in magnitude)\r\n      return allPow * Math.exp(dimPow.slice(1)\r\n        .map(n => Math.log(n)).sum() / MultiplierTabHelper.activeDimCount(\"AD\"));\r\n    },\r\n    isActive: () => PlayerProgress.infinityUnlocked() && !EternityChallenge(11).isRunning,\r\n    icon: MultiplierTabIcons.UPGRADE(\"infinity\"),\r\n  },\r\n  breakInfinityUpgrade: {\r\n    name: \"Break Infinity Upgrades\",\r\n    multValue: dim => {\r\n      const mult = DC.D1.timesEffectsOf(\r\n        BreakInfinityUpgrade.totalAMMult,\r\n        BreakInfinityUpgrade.currentAMMult,\r\n        BreakInfinityUpgrade.achievementMult,\r\n        BreakInfinityUpgrade.slowestChallengeMult,\r\n        BreakInfinityUpgrade.infinitiedMult\r\n      );\r\n      return Decimal.pow(mult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"AD\"));\r\n    },\r\n    isActive: () => player.break && !EternityChallenge(11).isRunning,\r\n    icon: MultiplierTabIcons.BREAK_INFINITY,\r\n  },\r\n  infinityPower: {\r\n    name: \"Multiplier from Infinity Power\",\r\n    fakeValue: () => Currency.infinityPower.value.pow(InfinityDimensions.powerConversionRate),\r\n    multValue: dim => {\r\n      const mult = Currency.infinityPower.value.pow(InfinityDimensions.powerConversionRate).max(1);\r\n      return Decimal.pow(mult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"AD\"));\r\n    },\r\n    isActive: () => Currency.infinityPower.value.gt(1) && !EternityChallenge(9).isRunning,\r\n    icon: MultiplierTabIcons.INFINITY_POWER,\r\n  },\r\n  infinityChallenge: {\r\n    name: dim => (dim ? `Infinity Challenges (AD ${dim})` : \"Infinity Challenges\"),\r\n    multValue: dim => {\r\n      const allMult = DC.D1.timesEffectsOf(\r\n        InfinityChallenge(3),\r\n        InfinityChallenge(3).reward,\r\n      );\r\n\r\n      const dimMults = Array.repeat(DC.D1, 9);\r\n      for (let tier = 1; tier <= 8; tier++) {\r\n        dimMults[tier] = dimMults[tier].timesEffectsOf(\r\n          tier > 1 && tier < 8 ? InfinityChallenge(8).reward : null\r\n        );\r\n      }\r\n\r\n      if (dim) return allMult.times(dimMults[dim]);\r\n      let totalMult = DC.D1;\r\n      for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(\"AD\"); tier++) {\r\n        totalMult = totalMult.times(dimMults[tier]).times(allMult);\r\n      }\r\n      return totalMult;\r\n    },\r\n    powValue: () => InfinityChallenge(4).reward.effectOrDefault(1),\r\n    isActive: () => player.break && !EternityChallenge(11).isRunning,\r\n    icon: MultiplierTabIcons.CHALLENGE(\"infinity\"),\r\n  },\r\n  timeStudy: {\r\n    name: dim => (dim ? `Time Studies (AD ${dim})` : \"Time Studies\"),\r\n    multValue: dim => {\r\n      const allMult = DC.D1.timesEffectsOf(\r\n        TimeStudy(91),\r\n        TimeStudy(101),\r\n        TimeStudy(161),\r\n        TimeStudy(193),\r\n      );\r\n\r\n      const dimMults = Array.repeat(DC.D1, 9);\r\n      for (let tier = 1; tier <= 8; tier++) {\r\n        // We don't want to double-count the base effect that TS31 boosts\r\n        const infinitiedMult = DC.D1.timesEffectsOf(\r\n          AntimatterDimension(tier).infinityUpgrade,\r\n          BreakInfinityUpgrade.infinitiedMult\r\n        );\r\n        dimMults[tier] = dimMults[tier].times(infinitiedMult.pow(TimeStudy(31).effectOrDefault(1) - 1));\r\n\r\n        dimMults[tier] = dimMults[tier].timesEffectsOf(\r\n          tier < 8 ? TimeStudy(71) : null,\r\n          tier === 8 ? TimeStudy(214) : null,\r\n          tier === 1 ? TimeStudy(234) : null,\r\n        );\r\n      }\r\n\r\n      if (dim) return allMult.times(dimMults[dim]);\r\n      let totalMult = DC.D1;\r\n      for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(\"AD\"); tier++) {\r\n        totalMult = totalMult.times(dimMults[tier]).times(allMult);\r\n      }\r\n      return totalMult;\r\n    },\r\n    isActive: () => PlayerProgress.eternityUnlocked() && !EternityChallenge(11).isRunning,\r\n    icon: MultiplierTabIcons.TIME_STUDY,\r\n  },\r\n  eternityChallenge: {\r\n    name: \"Eternity Challenges\",\r\n    multValue: dim => Decimal.pow(EternityChallenge(10).effectValue,\r\n      dim ? 1 : MultiplierTabHelper.activeDimCount(\"AD\")),\r\n    isActive: () => EternityChallenge(10).isRunning,\r\n    icon: MultiplierTabIcons.CHALLENGE(\"eternity\"),\r\n  },\r\n  glyph: {\r\n    name: \"Glyph Effects\",\r\n    multValue: dim => {\r\n      const mult = getAdjustedGlyphEffect(\"powermult\");\r\n      return Decimal.pow(mult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"AD\"));\r\n    },\r\n    powValue: () => {\r\n      const totalPow = getAdjustedGlyphEffect(\"powerpow\") * getAdjustedGlyphEffect(\"effarigdimensions\");\r\n      return totalPow * (player.dilation.active ? getAdjustedGlyphEffect(\"dilationpow\") : 1);\r\n    },\r\n    isActive: () => PlayerProgress.realityUnlocked() && !EternityChallenge(11).isRunning,\r\n    icon: MultiplierTabIcons.GENERIC_GLYPH,\r\n  },\r\n  v: {\r\n    name: \"5 V-Achievement Milestone - AD Power based on Space Theorems\",\r\n    powValue: () => VUnlocks.adPow.effectOrDefault(1),\r\n    isActive: () => PlayerProgress.realityUnlocked() && !EternityChallenge(11).isRunning,\r\n    icon: MultiplierTabIcons.ACHIEVEMENT,\r\n  },\r\n  alchemy: {\r\n    name: \"Glyph Alchemy\",\r\n    multValue: dim => {\r\n      const mult = AlchemyResource.dimensionality.effectOrDefault(1)\r\n        .times(Currency.realityMachines.value.powEffectOf(AlchemyResource.force));\r\n      return Decimal.pow(mult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"AD\"));\r\n    },\r\n    powValue: dim => {\r\n      const basePow = AlchemyResource.power.effectOrDefault(1) * Ra.momentumValue;\r\n      // Not entirely accurate, but returns the geometric mean of all producing dimensions (which should be close)\r\n      // Set to default value of 1 in non-unlocked case (arguably some sort of effect-or-default would be better,\r\n      // but I don't want to risk breaking things).\r\n      let inflationPow = 1;\r\n      if (AlchemyResource.inflation.isUnlocked) {\r\n        if (dim) {\r\n          inflationPow = AntimatterDimension(dim).multiplier.gte(AlchemyResource.inflation.effectValue) ? 1.05 : 1;\r\n        } else {\r\n          const inflated = AntimatterDimensions.all\r\n            .countWhere(ad => ad.isProducing && ad.multiplier.gte(AlchemyResource.inflation.effectValue));\r\n          inflationPow = Math.pow(1.05, inflated / AntimatterDimensions.all.countWhere(ad => ad.isProducing));\r\n        }\r\n      }\r\n      return basePow * inflationPow;\r\n    },\r\n    isActive: () => Ra.unlocks.unlockGlyphAlchemy.canBeApplied && !EternityChallenge(11).isRunning,\r\n    icon: MultiplierTabIcons.ALCHEMY,\r\n  },\r\n  pelle: {\r\n    name: \"Pelle Upgrades\",\r\n    multValue: dim => Decimal.pow(PelleUpgrade.antimatterDimensionMult.effectOrDefault(1),\r\n      dim ? 1 : MultiplierTabHelper.activeDimCount(\"AD\")),\r\n    powValue: () => PelleRifts.paradox.effectOrDefault(DC.D1).toNumber(),\r\n    isActive: () => Pelle.isDoomed && !EternityChallenge(11).isRunning,\r\n    icon: MultiplierTabIcons.PELLE,\r\n  },\r\n  iap: {\r\n    name: \"Shop Tab Purchases\",\r\n    multValue: dim => {\r\n      const mult = ShopPurchase.dimPurchases.currentMult * ShopPurchase.allDimPurchases.currentMult;\r\n      return Decimal.pow(mult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"AD\"));\r\n    },\r\n    isActive: () => ShopPurchaseData.totalSTD > 0 && !EternityChallenge(11).isRunning,\r\n    icon: MultiplierTabIcons.IAP,\r\n  },\r\n\r\n  effectNC: {\r\n    name: dim => (dim ? `Normal Challenge Effect (AD ${dim})` : \"Normal Challenge Effects\"),\r\n    // Depending on the challenge itself and the game state, this could be either a nerf or a buff, so we make\r\n    // sure to render a x or / conditionally. This requires we calculate the value itself again, however\r\n    displayOverride: dim => {\r\n      const formatFn = num => (num.gte(1) ? formatX(num, 2, 2) : `/${format(num.reciprocal(), 2, 2)}`);\r\n\r\n      let dimMults = Array.repeat(DC.D1, 9);\r\n      if (NormalChallenge(2).isRunning) {\r\n        dimMults = Array.repeat(new Decimal(player.chall2Pow), 9);\r\n      }\r\n      if (NormalChallenge(3).isRunning) {\r\n        dimMults[1] = dimMults[1].times(player.chall3Pow);\r\n      }\r\n\r\n      if (NormalChallenge(12).isRunning) {\r\n        dimMults[2] = AntimatterDimension(2).totalAmount.pow(0.6);\r\n        dimMults[4] = AntimatterDimension(4).totalAmount.pow(0.4);\r\n        dimMults[6] = AntimatterDimension(6).totalAmount.pow(0.2);\r\n      }\r\n\r\n      if (dim) return formatFn(dimMults[dim]);\r\n      let totalMult = DC.D1;\r\n      for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(\"AD\"); tier++) {\r\n        totalMult = totalMult.times(dimMults[tier]);\r\n      }\r\n      return formatFn(totalMult);\r\n    },\r\n    // This and displayOverride contain largely the same code\r\n    multValue: dim => {\r\n      let dimMults = Array.repeat(DC.D1, 9);\r\n      // Do not change this to an else-if, as NC2/NC3 need to be enterable simultaneously in IC1\r\n      if (NormalChallenge(2).isRunning) {\r\n        dimMults = Array.repeat(new Decimal(player.chall2Pow), 9);\r\n      }\r\n      if (NormalChallenge(3).isRunning) {\r\n        dimMults[1] = dimMults[1].times(player.chall3Pow);\r\n      }\r\n\r\n      // Legacy behavior for NC12 we're preserving dictates that it boosts production based on dimension amount\r\n      // without actually increasing the multiplier itself, so this effectively turns the powers in the production\r\n      // code info effective multipliers raised to pow-1\r\n      if (NormalChallenge(12).isRunning) {\r\n        dimMults[2] = AntimatterDimension(2).totalAmount.pow(0.6);\r\n        dimMults[4] = AntimatterDimension(4).totalAmount.pow(0.4);\r\n        dimMults[6] = AntimatterDimension(6).totalAmount.pow(0.2);\r\n\r\n        // We have to hide this when producing odd or when referencing a dimension which has no amount, but then we\r\n        // also need to total up the multipliers when on the grouped layout. No amount evaluates to zero, so in all\r\n        // those cases we use 1 instead in order to calculate properly\r\n        if (!MultiplierTabHelper.isNC12ProducingEven()) return DC.D1;\r\n        if (dim) return dimMults[dim].neq(0) ? dimMults[dim] : DC.D1;\r\n        let totalNC12 = DC.D1;\r\n        for (let d = 2; d <= 6; d += 2) totalNC12 = totalNC12.times(dimMults[d].clampMin(1));\r\n        return totalNC12;\r\n      }\r\n\r\n      if (dim) return dimMults[dim];\r\n      let totalMult = DC.D1;\r\n      for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(\"AD\"); tier++) {\r\n        totalMult = totalMult.times(dimMults[tier]);\r\n      }\r\n      return totalMult;\r\n    },\r\n    isActive: () => [2, 3, 12].some(c => NormalChallenge(c).isRunning),\r\n    icon: MultiplierTabIcons.CHALLENGE(\"infinity\"),\r\n  },\r\n  nerfIC: {\r\n    name: dim => (dim ? `Infinity Challenge Nerf (AD ${dim})` : \"Infinity Challenge Nerf\"),\r\n    multValue: dim => {\r\n      let dimMults = Array.repeat(DC.D1, 9);\r\n      if (InfinityChallenge(4).isRunning) {\r\n        for (let tier = 1; tier <= 8; tier++) {\r\n          if (player.postC4Tier !== tier) {\r\n            dimMults[tier] = dimMults[tier].pow(1 - InfinityChallenge(4).effectValue).reciprocal();\r\n          }\r\n        }\r\n      } else if (InfinityChallenge(6).isRunning) {\r\n        dimMults = Array.repeat(DC.D1.dividedByEffectOf(InfinityChallenge(6)), 9);\r\n      } else if (InfinityChallenge(8).isRunning) {\r\n        dimMults = Array.repeat(DC.D1.timesEffectsOf(InfinityChallenge(8)), 9);\r\n      }\r\n\r\n      if (dim) return dimMults[dim];\r\n      let totalMult = DC.D1;\r\n      for (let tier = 1; tier <= MultiplierTabHelper.activeDimCount(\"AD\"); tier++) {\r\n        totalMult = totalMult.times(dimMults[tier]);\r\n      }\r\n      return totalMult;\r\n    },\r\n    isActive: () => [4, 6, 8].some(ic => InfinityChallenge(ic).isRunning),\r\n    icon: MultiplierTabIcons.CHALLENGE(\"infinity\"),\r\n  },\r\n  nerfV: {\r\n    name: \"V's Reality\",\r\n    powValue: () => 0.5,\r\n    isActive: () => V.isRunning,\r\n    icon: MultiplierTabIcons.GENERIC_V,\r\n  },\r\n  nerfCursed: {\r\n    name: \"Cursed Glyphs\",\r\n    powValue: () => getAdjustedGlyphEffect(\"curseddimensions\"),\r\n    isActive: () => getAdjustedGlyphEffect(\"curseddimensions\") !== 1,\r\n    icon: MultiplierTabIcons.SPECIFIC_GLYPH(\"cursed\"),\r\n  },\r\n  nerfPelle: {\r\n    name: \"Doomed Reality\",\r\n    multValue: 0.1,\r\n    powValue: () => (PelleStrikes.infinity.hasStrike ? 0.5 : 1),\r\n    isActive: () => Pelle.isDoomed,\r\n    icon: MultiplierTabIcons.PELLE,\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}