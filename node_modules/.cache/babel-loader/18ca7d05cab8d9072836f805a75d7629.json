{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nexport const DeltaTimeState = {\n  deltaTime: new TimeSpan(0),\n  unscaledDeltaTime: new TimeSpan(0),\n\n  update(deltaTime, gameDeltaTime) {\n    this.unscaledDeltaTime = TimeSpan.fromMilliseconds(deltaTime);\n    this.deltaTime = TimeSpan.fromMilliseconds(gameDeltaTime);\n  }\n\n};\nexport const Time = {\n  /**\r\n   * @param {Function} getValue\r\n   * @returns {TimeSpan}\r\n   */\n  fromMilliseconds(getValue) {\n    return TimeSpan.fromMilliseconds(getValue());\n  },\n\n  /**\r\n   * @param {TimeSpan} timespan\r\n   * @param {Function} setValue\r\n   */\n  toMilliseconds(timespan, setValue) {\n    Guard.isTimeSpan(timespan);\n    setValue(timespan.totalMilliseconds);\n  },\n\n  /**\r\n   * Returns a string indicating the current date and time of day, as indicated by a Date.now() timestamp. After\r\n   * regex formatting, this gives a string resembling \"[month] [day] [year] HH:MM:SS\"\r\n   * @param {number} timestamp\r\n   * @returns {string}\r\n   */\n  toDateTimeString(timestamp) {\n    return new Date(timestamp).toString().replace(/^(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]){4}((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*:(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]):(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]))(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*$/, \"$1\");\n  },\n\n  /**\r\n   * Frame delta time\r\n   * @returns {TimeSpan}\r\n   */\n  get deltaTimeFull() {\n    return DeltaTimeState.deltaTime;\n  },\n\n  /**\r\n   * Frame delta time in seconds\r\n   * @returns {number}\r\n   */\n  get deltaTime() {\n    return this.deltaTimeFull.totalSeconds;\n  },\n\n  /**\r\n   * Frame delta time in ms\r\n   * @returns {number}\r\n   */\n  get deltaTimeMs() {\n    return this.deltaTimeFull.totalMilliseconds;\n  },\n\n  /**\r\n   * Frame delta time, but without EC12 or black hole effects\r\n   * @returns {TimeSpan}\r\n   */\n  get unscaledDeltaTime() {\n    return DeltaTimeState.unscaledDeltaTime;\n  },\n\n  /**\r\n   * @returns {TimeSpan}\r\n   */\n  get totalTimePlayed() {\n    return this.fromMilliseconds(() => player.records.totalTimePlayed);\n  },\n\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\n  set totalTimePlayed(timespan) {\n    this.toMilliseconds(timespan, value => player.records.totalTimePlayed = value);\n  },\n\n  /**\r\n   * @returns {TimeSpan}\r\n   */\n  get timeSinceBlackHole() {\n    return this.fromMilliseconds(() => {\n      const diff = player.records.totalTimePlayed - player.records.timePlayedAtBHUnlock;\n      return Math.max(0, diff);\n    });\n  },\n\n  /**\r\n   * @returns {TimeSpan}\r\n   */\n  get realTimeDoomed() {\n    return this.fromMilliseconds(() => player.records.realTimeDoomed);\n  },\n\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\n  set realTimeDoomed(timespan) {\n    this.toMilliseconds(timespan, value => player.records.realTimeDoomed = value);\n  },\n\n  /**\r\n   * @returns {TimeSpan}\r\n   */\n  get realTimePlayed() {\n    return this.fromMilliseconds(() => player.records.realTimePlayed);\n  },\n\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\n  set realTimePlayed(timespan) {\n    this.toMilliseconds(timespan, value => player.records.realTimePlayed = value);\n  },\n\n  /**\r\n   * @returns {TimeSpan}\r\n   */\n  get thisInfinity() {\n    return this.fromMilliseconds(() => player.records.thisInfinity.time);\n  },\n\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\n  set thisInfinity(timespan) {\n    this.toMilliseconds(timespan, value => player.records.thisInfinity.time = value);\n  },\n\n  /**\r\n   * @returns {TimeSpan}\r\n   */\n  get thisInfinityRealTime() {\n    return this.fromMilliseconds(() => player.records.thisInfinity.realTime);\n  },\n\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\n  set thisInfinityRealTime(timespan) {\n    this.toMilliseconds(timespan, value => player.records.thisInfinity.realTime = value);\n  },\n\n  /**\r\n   * @returns {TimeSpan}\r\n   */\n  get bestInfinity() {\n    return this.fromMilliseconds(() => player.records.bestInfinity.time);\n  },\n\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\n  set bestInfinity(timespan) {\n    this.toMilliseconds(timespan, value => player.records.bestInfinity.time = value);\n  },\n\n  /**\r\n   * @returns {TimeSpan}\r\n   */\n  get bestInfinityRealTime() {\n    return this.fromMilliseconds(() => player.records.bestInfinity.realTime);\n  },\n\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\n  set bestInfinityRealTime(timespan) {\n    this.toMilliseconds(timespan, value => player.records.bestInfinity.realTime = value);\n  },\n\n  /**\r\n   * @returns {TimeSpan}\r\n   */\n  get thisEternity() {\n    return this.fromMilliseconds(() => player.records.thisEternity.time);\n  },\n\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\n  set thisEternity(timespan) {\n    this.toMilliseconds(timespan, value => player.records.thisEternity.time = value);\n  },\n\n  /**\r\n   * @returns {TimeSpan}\r\n   */\n  get thisEternityRealTime() {\n    return this.fromMilliseconds(() => player.records.thisEternity.realTime);\n  },\n\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\n  set thisEternityRealTime(timespan) {\n    this.toMilliseconds(timespan, value => player.records.thisEternity.realTime = value);\n  },\n\n  /**\r\n   * @returns {TimeSpan}\r\n   */\n  get bestEternity() {\n    return this.fromMilliseconds(() => player.records.bestEternity.time);\n  },\n\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\n  set bestEternity(timespan) {\n    this.toMilliseconds(timespan, value => player.records.bestEternity.time = value);\n  },\n\n  /**\r\n   * @returns {TimeSpan}\r\n   */\n  get bestEternityRealTime() {\n    return this.fromMilliseconds(() => player.records.bestEternity.realTime);\n  },\n\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\n  set bestEternityRealTime(timespan) {\n    this.toMilliseconds(timespan, value => player.records.bestEternity.realTime = value);\n  },\n\n  /**\r\n   * @returns {TimeSpan}\r\n   */\n  get thisReality() {\n    return this.fromMilliseconds(() => player.records.thisReality.time);\n  },\n\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\n  set thisReality(timespan) {\n    this.toMilliseconds(timespan, value => player.records.thisReality.time = value);\n  },\n\n  /**\r\n   * @returns {TimeSpan}\r\n   */\n  get thisRealityRealTime() {\n    return this.fromMilliseconds(() => player.records.thisReality.realTime);\n  },\n\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\n  set thisRealityRealTime(timespan) {\n    this.toMilliseconds(timespan, value => player.records.thisReality.realTime = value);\n  },\n\n  /**\r\n   * @returns {TimeSpan}\r\n   */\n  get bestReality() {\n    return this.fromMilliseconds(() => player.records.bestReality.time);\n  },\n\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\n  set bestReality(timespan) {\n    this.toMilliseconds(timespan, value => player.records.bestReality.time = value);\n  },\n\n  /**\r\n   * @returns {TimeSpan}\r\n   */\n  get bestRealityRealTime() {\n    return this.fromMilliseconds(() => player.records.bestReality.realTime);\n  },\n\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\n  set bestRealityRealTime(timespan) {\n    this.toMilliseconds(timespan, value => player.records.bestReality.realTime = value);\n  },\n\n  /**\r\n   * @return {TimeSpan}\r\n   */\n  get worstChallenge() {\n    return this.fromMilliseconds(() => GameCache.worstChallengeTime.value);\n  },\n\n  /**\r\n   * @return {TimeSpan}\r\n   */\n  get challengeSum() {\n    return this.fromMilliseconds(() => GameCache.challengeTimeSum.value);\n  },\n\n  /**\r\n   * @return {TimeSpan}\r\n   */\n  get infinityChallengeSum() {\n    return this.fromMilliseconds(() => GameCache.infinityChallengeTimeSum.value);\n  }\n\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/time.js"],"names":["DeltaTimeState","deltaTime","TimeSpan","unscaledDeltaTime","update","gameDeltaTime","fromMilliseconds","Time","getValue","toMilliseconds","timespan","setValue","Guard","isTimeSpan","totalMilliseconds","toDateTimeString","timestamp","Date","toString","replace","deltaTimeFull","totalSeconds","deltaTimeMs","totalTimePlayed","player","records","value","timeSinceBlackHole","diff","timePlayedAtBHUnlock","Math","max","realTimeDoomed","realTimePlayed","thisInfinity","time","thisInfinityRealTime","realTime","bestInfinity","bestInfinityRealTime","thisEternity","thisEternityRealTime","bestEternity","bestEternityRealTime","thisReality","thisRealityRealTime","bestReality","bestRealityRealTime","worstChallenge","GameCache","worstChallengeTime","challengeSum","challengeTimeSum","infinityChallengeSum","infinityChallengeTimeSum"],"mappings":"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","sourcesContent":["export const DeltaTimeState = {\r\n  deltaTime: new TimeSpan(0),\r\n  unscaledDeltaTime: new TimeSpan(0),\r\n  update(deltaTime, gameDeltaTime) {\r\n    this.unscaledDeltaTime = TimeSpan.fromMilliseconds(deltaTime);\r\n    this.deltaTime = TimeSpan.fromMilliseconds(gameDeltaTime);\r\n  }\r\n};\r\n\r\nexport const Time = {\r\n  /**\r\n   * @param {Function} getValue\r\n   * @returns {TimeSpan}\r\n   */\r\n  fromMilliseconds(getValue) {\r\n    return TimeSpan.fromMilliseconds(getValue());\r\n  },\r\n  /**\r\n   * @param {TimeSpan} timespan\r\n   * @param {Function} setValue\r\n   */\r\n  toMilliseconds(timespan, setValue) {\r\n    Guard.isTimeSpan(timespan);\r\n    setValue(timespan.totalMilliseconds);\r\n  },\r\n  /**\r\n   * Returns a string indicating the current date and time of day, as indicated by a Date.now() timestamp. After\r\n   * regex formatting, this gives a string resembling \"[month] [day] [year] HH:MM:SS\"\r\n   * @param {number} timestamp\r\n   * @returns {string}\r\n   */\r\n  toDateTimeString(timestamp) {\r\n    return new Date(timestamp).toString().replace(/^.{4}(.*:..:..).*$/u, \"$1\");\r\n  },\r\n\r\n  /**\r\n   * Frame delta time\r\n   * @returns {TimeSpan}\r\n   */\r\n  get deltaTimeFull() {\r\n    return DeltaTimeState.deltaTime;\r\n  },\r\n  /**\r\n   * Frame delta time in seconds\r\n   * @returns {number}\r\n   */\r\n  get deltaTime() {\r\n    return this.deltaTimeFull.totalSeconds;\r\n  },\r\n  /**\r\n   * Frame delta time in ms\r\n   * @returns {number}\r\n   */\r\n  get deltaTimeMs() {\r\n    return this.deltaTimeFull.totalMilliseconds;\r\n  },\r\n  /**\r\n   * Frame delta time, but without EC12 or black hole effects\r\n   * @returns {TimeSpan}\r\n   */\r\n  get unscaledDeltaTime() {\r\n    return DeltaTimeState.unscaledDeltaTime;\r\n  },\r\n\r\n  /**\r\n   * @returns {TimeSpan}\r\n   */\r\n  get totalTimePlayed() {\r\n    return this.fromMilliseconds(() => player.records.totalTimePlayed);\r\n  },\r\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\r\n  set totalTimePlayed(timespan) {\r\n    this.toMilliseconds(timespan, value => player.records.totalTimePlayed = value);\r\n  },\r\n\r\n  /**\r\n   * @returns {TimeSpan}\r\n   */\r\n  get timeSinceBlackHole() {\r\n    return this.fromMilliseconds(() => {\r\n      const diff = player.records.totalTimePlayed - player.records.timePlayedAtBHUnlock;\r\n      return Math.max(0, diff);\r\n    });\r\n  },\r\n\r\n  /**\r\n   * @returns {TimeSpan}\r\n   */\r\n  get realTimeDoomed() {\r\n    return this.fromMilliseconds(() => player.records.realTimeDoomed);\r\n  },\r\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\r\n  set realTimeDoomed(timespan) {\r\n    this.toMilliseconds(timespan, value => player.records.realTimeDoomed = value);\r\n  },\r\n\r\n  /**\r\n   * @returns {TimeSpan}\r\n   */\r\n  get realTimePlayed() {\r\n    return this.fromMilliseconds(() => player.records.realTimePlayed);\r\n  },\r\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\r\n  set realTimePlayed(timespan) {\r\n    this.toMilliseconds(timespan, value => player.records.realTimePlayed = value);\r\n  },\r\n\r\n  /**\r\n   * @returns {TimeSpan}\r\n   */\r\n  get thisInfinity() {\r\n    return this.fromMilliseconds(() => player.records.thisInfinity.time);\r\n  },\r\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\r\n  set thisInfinity(timespan) {\r\n    this.toMilliseconds(timespan, value => player.records.thisInfinity.time = value);\r\n  },\r\n\r\n  /**\r\n   * @returns {TimeSpan}\r\n   */\r\n  get thisInfinityRealTime() {\r\n    return this.fromMilliseconds(() => player.records.thisInfinity.realTime);\r\n  },\r\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\r\n  set thisInfinityRealTime(timespan) {\r\n    this.toMilliseconds(timespan, value => player.records.thisInfinity.realTime = value);\r\n  },\r\n\r\n  /**\r\n   * @returns {TimeSpan}\r\n   */\r\n  get bestInfinity() {\r\n    return this.fromMilliseconds(() => player.records.bestInfinity.time);\r\n  },\r\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\r\n  set bestInfinity(timespan) {\r\n    this.toMilliseconds(timespan, value => player.records.bestInfinity.time = value);\r\n  },\r\n\r\n  /**\r\n   * @returns {TimeSpan}\r\n   */\r\n  get bestInfinityRealTime() {\r\n    return this.fromMilliseconds(() => player.records.bestInfinity.realTime);\r\n  },\r\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\r\n  set bestInfinityRealTime(timespan) {\r\n    this.toMilliseconds(timespan, value => player.records.bestInfinity.realTime = value);\r\n  },\r\n\r\n  /**\r\n   * @returns {TimeSpan}\r\n   */\r\n  get thisEternity() {\r\n    return this.fromMilliseconds(() => player.records.thisEternity.time);\r\n  },\r\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\r\n  set thisEternity(timespan) {\r\n    this.toMilliseconds(timespan, value => player.records.thisEternity.time = value);\r\n  },\r\n\r\n  /**\r\n   * @returns {TimeSpan}\r\n   */\r\n  get thisEternityRealTime() {\r\n    return this.fromMilliseconds(() => player.records.thisEternity.realTime);\r\n  },\r\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\r\n  set thisEternityRealTime(timespan) {\r\n    this.toMilliseconds(timespan, value => player.records.thisEternity.realTime = value);\r\n  },\r\n\r\n  /**\r\n   * @returns {TimeSpan}\r\n   */\r\n  get bestEternity() {\r\n    return this.fromMilliseconds(() => player.records.bestEternity.time);\r\n  },\r\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\r\n  set bestEternity(timespan) {\r\n    this.toMilliseconds(timespan, value => player.records.bestEternity.time = value);\r\n  },\r\n\r\n  /**\r\n   * @returns {TimeSpan}\r\n   */\r\n  get bestEternityRealTime() {\r\n    return this.fromMilliseconds(() => player.records.bestEternity.realTime);\r\n  },\r\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\r\n  set bestEternityRealTime(timespan) {\r\n    this.toMilliseconds(timespan, value => player.records.bestEternity.realTime = value);\r\n  },\r\n\r\n\r\n  /**\r\n   * @returns {TimeSpan}\r\n   */\r\n  get thisReality() {\r\n    return this.fromMilliseconds(() => player.records.thisReality.time);\r\n  },\r\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\r\n  set thisReality(timespan) {\r\n    this.toMilliseconds(timespan, value => player.records.thisReality.time = value);\r\n  },\r\n\r\n  /**\r\n   * @returns {TimeSpan}\r\n   */\r\n  get thisRealityRealTime() {\r\n    return this.fromMilliseconds(() => player.records.thisReality.realTime);\r\n  },\r\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\r\n  set thisRealityRealTime(timespan) {\r\n    this.toMilliseconds(timespan, value => player.records.thisReality.realTime = value);\r\n  },\r\n\r\n  /**\r\n   * @returns {TimeSpan}\r\n   */\r\n  get bestReality() {\r\n    return this.fromMilliseconds(() => player.records.bestReality.time);\r\n  },\r\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\r\n  set bestReality(timespan) {\r\n    this.toMilliseconds(timespan, value => player.records.bestReality.time = value);\r\n  },\r\n\r\n  /**\r\n   * @returns {TimeSpan}\r\n   */\r\n  get bestRealityRealTime() {\r\n    return this.fromMilliseconds(() => player.records.bestReality.realTime);\r\n  },\r\n  /**\r\n   * @param {TimeSpan} timespan\r\n   */\r\n  set bestRealityRealTime(timespan) {\r\n    this.toMilliseconds(timespan, value => player.records.bestReality.realTime = value);\r\n  },\r\n\r\n  /**\r\n   * @return {TimeSpan}\r\n   */\r\n  get worstChallenge() {\r\n    return this.fromMilliseconds(() => GameCache.worstChallengeTime.value);\r\n  },\r\n\r\n  /**\r\n   * @return {TimeSpan}\r\n   */\r\n  get challengeSum() {\r\n    return this.fromMilliseconds(() => GameCache.challengeTimeSum.value);\r\n  },\r\n\r\n  /**\r\n   * @return {TimeSpan}\r\n   */\r\n  get infinityChallengeSum() {\r\n    return this.fromMilliseconds(() => GameCache.infinityChallengeTimeSum.value);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}