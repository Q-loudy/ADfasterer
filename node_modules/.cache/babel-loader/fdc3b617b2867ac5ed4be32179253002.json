{"ast":null,"code":"import { blockifyTextAutomator } from \"@/core/automator\";\nexport default {\n  name: \"AutomatorModeSwitch\",\n\n  data() {\n    return {\n      automatorType: 0\n    };\n  },\n\n  computed: {\n    currentScriptID: {\n      get() {\n        return this.$viewModel.tabs.reality.automator.editorScriptID;\n      },\n\n      set(value) {\n        this.$viewModel.tabs.reality.automator.editorScriptID = value;\n      }\n\n    },\n\n    currentScriptContent() {\n      return player.reality.automator.scripts[this.currentScriptID].content;\n    },\n\n    currentScript() {\n      return CodeMirror.Doc(this.currentScriptContent, \"automato\").getValue();\n    },\n\n    isTextAutomator() {\n      return this.automatorType === AUTOMATOR_TYPE.TEXT;\n    },\n\n    automatorModeTooltip() {\n      if (this.automatorType === AUTOMATOR_TYPE.BLOCK) return \"Switch to the text editor\";\n      return \"Switch to the block editor\";\n    },\n\n    tutorialClass() {\n      return {\n        \"tutorial--glow\": ui.view.tutorialState === TUTORIAL_STATE.AUTOMATOR && ui.view.tutorialActive\n      };\n    }\n\n  },\n\n  created() {\n    this.on$(GAME_EVENT.GAME_LOAD, () => this.onGameLoad());\n    this.on$(GAME_EVENT.AUTOMATOR_SAVE_CHANGED, () => this.onGameLoad());\n    this.updateCurrentScriptID();\n  },\n\n  methods: {\n    update() {\n      this.automatorType = player.reality.automator.type;\n    },\n\n    onGameLoad() {\n      this.updateCurrentScriptID();\n    },\n\n    updateCurrentScriptID() {\n      const storedScripts = player.reality.automator.scripts;\n      this.currentScriptID = player.reality.automator.state.editorScript; // This shouldn't happen if things are loaded in the right order, but might as well be sure.\n\n      if (storedScripts[this.currentScriptID] === undefined) {\n        this.currentScriptID = Object.keys(storedScripts)[0];\n        player.reality.automator.state.editorScript = this.currentScriptID;\n        AutomatorData.clearUndoData();\n      }\n\n      if (BlockAutomator.hasUnparsableCommands(this.currentScript) && player.reality.automator.type === AUTOMATOR_TYPE.BLOCK) {\n        Modal.message.show(`Some script commands were unrecognizable - defaulting to text editor.`);\n        AutomatorBackend.changeModes(this.currentScriptID);\n      }\n\n      this.$nextTick(() => BlockAutomator.updateEditor(this.currentScript));\n    },\n\n    toggleAutomatorMode() {\n      const currScript = player.reality.automator.scripts[this.currentScriptID].content;\n      const hasTextErrors = this.automatorType === AUTOMATOR_TYPE.TEXT && (BlockAutomator.hasUnparsableCommands(currScript) || AutomatorData.currentErrors().length !== 0);\n\n      if (player.options.confirmations.switchAutomatorMode && (hasTextErrors || AutomatorBackend.isRunning)) {\n        const blockified = blockifyTextAutomator(currScript); // We explicitly pass in 0 for lostBlocks if converting from block to text since nothing is ever lost in that\n        // conversion direction\n\n        const lostBlocks = this.automatorType === AUTOMATOR_TYPE.TEXT ? blockified.validatedBlocks - blockified.visitedBlocks : 0;\n        Modal.switchAutomatorEditorMode.show({\n          callBack: () => this.$recompute(\"currentScriptContent\"),\n          lostBlocks\n        });\n      } else {\n        AutomatorBackend.changeModes(this.currentScriptID);\n      }\n\n      AutomatorData.clearUndoData();\n    }\n\n  }\n};","map":{"version":3,"sources":["AutomatorModeSwitch.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport { blockifyTextAutomator } from \"@/core/automator\";\r\n\r\nexport default {\r\n  name: \"AutomatorModeSwitch\",\r\n  data() {\r\n    return {\r\n      automatorType: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    currentScriptID: {\r\n      get() {\r\n        return this.$viewModel.tabs.reality.automator.editorScriptID;\r\n      },\r\n      set(value) {\r\n        this.$viewModel.tabs.reality.automator.editorScriptID = value;\r\n      }\r\n    },\r\n    currentScriptContent() {\r\n      return player.reality.automator.scripts[this.currentScriptID].content;\r\n    },\r\n    currentScript() {\r\n      return CodeMirror.Doc(this.currentScriptContent, \"automato\").getValue();\r\n    },\r\n    isTextAutomator() {\r\n      return this.automatorType === AUTOMATOR_TYPE.TEXT;\r\n    },\r\n    automatorModeTooltip() {\r\n      if (this.automatorType === AUTOMATOR_TYPE.BLOCK) return \"Switch to the text editor\";\r\n      return \"Switch to the block editor\";\r\n    },\r\n    tutorialClass() {\r\n      return {\r\n        \"tutorial--glow\": ui.view.tutorialState === TUTORIAL_STATE.AUTOMATOR && ui.view.tutorialActive\r\n      };\r\n    },\r\n  },\r\n  created() {\r\n    this.on$(GAME_EVENT.GAME_LOAD, () => this.onGameLoad());\r\n    this.on$(GAME_EVENT.AUTOMATOR_SAVE_CHANGED, () => this.onGameLoad());\r\n    this.updateCurrentScriptID();\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.automatorType = player.reality.automator.type;\r\n    },\r\n    onGameLoad() {\r\n      this.updateCurrentScriptID();\r\n    },\r\n    updateCurrentScriptID() {\r\n      const storedScripts = player.reality.automator.scripts;\r\n      this.currentScriptID = player.reality.automator.state.editorScript;\r\n      // This shouldn't happen if things are loaded in the right order, but might as well be sure.\r\n      if (storedScripts[this.currentScriptID] === undefined) {\r\n        this.currentScriptID = Object.keys(storedScripts)[0];\r\n        player.reality.automator.state.editorScript = this.currentScriptID;\r\n        AutomatorData.clearUndoData();\r\n      }\r\n      if (BlockAutomator.hasUnparsableCommands(this.currentScript) &&\r\n        player.reality.automator.type === AUTOMATOR_TYPE.BLOCK) {\r\n        Modal.message.show(`Some script commands were unrecognizable - defaulting to text editor.`);\r\n        AutomatorBackend.changeModes(this.currentScriptID);\r\n      }\r\n      this.$nextTick(() => BlockAutomator.updateEditor(this.currentScript));\r\n    },\r\n    toggleAutomatorMode() {\r\n      const currScript = player.reality.automator.scripts[this.currentScriptID].content;\r\n      const hasTextErrors = this.automatorType === AUTOMATOR_TYPE.TEXT &&\r\n        (BlockAutomator.hasUnparsableCommands(currScript) || AutomatorData.currentErrors().length !== 0);\r\n\r\n      if (player.options.confirmations.switchAutomatorMode && (hasTextErrors || AutomatorBackend.isRunning)) {\r\n        const blockified = blockifyTextAutomator(currScript);\r\n\r\n        // We explicitly pass in 0 for lostBlocks if converting from block to text since nothing is ever lost in that\r\n        // conversion direction\r\n        const lostBlocks = this.automatorType === AUTOMATOR_TYPE.TEXT\r\n          ? blockified.validatedBlocks - blockified.visitedBlocks\r\n          : 0;\r\n        Modal.switchAutomatorEditorMode.show({\r\n          callBack: () => this.$recompute(\"currentScriptContent\"),\r\n          lostBlocks,\r\n        });\r\n      } else {\r\n        AutomatorBackend.changeModes(this.currentScriptID);\r\n      }\r\n      AutomatorData.clearUndoData();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <button\r\n    v-tooltip=\"{\r\n      content: automatorModeTooltip,\r\n      hideOnTargetClick: false\r\n    }\"\r\n    :class=\"{\r\n      'c-slider-toggle-button': true,\r\n      'c-slider-toggle-button--right': isTextAutomator,\r\n      ...tutorialClass\r\n    }\"\r\n    @click=\"toggleAutomatorMode\"\r\n  >\r\n    <i class=\"fas fa-cubes\" />\r\n    <i class=\"fas fa-code\" />\r\n  </button>\r\n</template>\r\n\r\n<style scoped>\r\n.c-slider-toggle-button {\r\n  display: flex;\r\n  overflow: hidden;\r\n  position: relative;\r\n  align-items: center;\r\n  color: var(--color-automator-docs-font);\r\n  background-color: #626262;\r\n  border: var(--var-border-width, 0.2rem) solid #767676;\r\n  border-radius: var(--var-border-radius, 0.3rem);\r\n  margin: 0.3rem 0.4rem 0.3rem 0.5rem;\r\n  padding: 0.3rem 0;\r\n  cursor: pointer;\r\n}\r\n\r\n.c-slider-toggle-button .fas {\r\n  width: 3rem;\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\n.c-slider-toggle-button::before {\r\n  content: \"\";\r\n  width: 3rem;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 0;\r\n  background-color: var(--color-automator-controls-inactive);\r\n  border-radius: var(--var-border-radius, 0.3rem);\r\n  transition: 0.3s ease all;\r\n}\r\n\r\n.c-slider-toggle-button--right::before {\r\n  left: 3rem;\r\n  background-color: var(--color-automator-controls-inactive);\r\n}\r\n\r\n.tutorial--glow::after {\r\n  z-index: 2;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/automator"},"metadata":{},"sourceType":"module"}