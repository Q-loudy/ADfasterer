{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport { DC } from \"../constants\";\nimport { DimensionState } from \"./dimension\";\nexport function buySingleTimeDimension(tier, auto = false) {\n  const dim = TimeDimension(tier);\n\n  if (tier > 4) {\n    if (!TimeStudy.timeDimension(tier).isBought) return false;\n\n    if (RealityUpgrade(13).isLockingMechanics && Currency.eternityPoints.gte(dim.cost)) {\n      if (!auto) RealityUpgrade(13).tryShowWarningModal();\n      return false;\n    }\n  }\n\n  if (Currency.eternityPoints.lt(dim.cost)) return false;\n  if (Enslaved.isRunning && dim.bought > 0) return false;\n\n  if (ImaginaryUpgrade(15).isLockingMechanics && EternityChallenge(7).completions > 0) {\n    if (!auto) {\n      ImaginaryUpgrade(15).tryShowWarningModal(`purchase a Time Dimension,\n        which will produce Infinity Dimensions through EC7`);\n    }\n\n    return false;\n  }\n\n  Currency.eternityPoints.subtract(dim.cost);\n  dim.amount = dim.amount.plus(1);\n  dim.bought += 1;\n  dim.cost = dim.nextCost(dim.bought);\n  return true;\n}\nexport function resetTimeDimensions() {\n  for (const dim of TimeDimensions.all) dim.amount = new Decimal(dim.bought);\n\n  updateTimeDimensionCosts();\n}\nexport function fullResetTimeDimensions() {\n  for (const dim of TimeDimensions.all) {\n    dim.cost = new Decimal(dim.baseCost);\n    dim.amount = DC.D0;\n    dim.bought = 0;\n  }\n}\nexport function toggleAllTimeDims() {\n  const areEnabled = Autobuyer.timeDimension(1).isActive;\n\n  for (let i = 1; i < 9; i++) {\n    Autobuyer.timeDimension(i).isActive = !areEnabled;\n  }\n}\nexport function buyMaxTimeDimension(tier, portionToSpend = 1, isMaxAll = false) {\n  const canSpend = Currency.eternityPoints.value.times(portionToSpend);\n  const dim = TimeDimension(tier);\n  if (canSpend.lt(dim.cost)) return false;\n\n  if (tier > 4) {\n    if (!TimeStudy.timeDimension(tier).isBought) return false;\n\n    if (RealityUpgrade(13).isLockingMechanics) {\n      if (!isMaxAll) RealityUpgrade(13).tryShowWarningModal();\n      return false;\n    }\n  }\n\n  if (ImaginaryUpgrade(15).isLockingMechanics && EternityChallenge(7).completions > 0) {\n    if (!isMaxAll) {\n      ImaginaryUpgrade(15).tryShowWarningModal(`purchase a Time Dimension,\n        which will produce Infinity Dimensions through EC7`);\n    }\n\n    return false;\n  }\n\n  if (Enslaved.isRunning) return buySingleTimeDimension(tier);\n  const bulk = bulkBuyBinarySearch(canSpend, {\n    costFunction: bought => dim.nextCost(bought),\n    cumulative: true,\n    firstCost: dim.cost\n  }, dim.bought);\n  if (!bulk) return false;\n  Currency.eternityPoints.subtract(bulk.purchasePrice);\n  dim.amount = dim.amount.plus(bulk.quantity);\n  dim.bought += bulk.quantity;\n  dim.cost = dim.nextCost(dim.bought);\n  return true;\n}\nexport function maxAllTimeDimensions() {\n  // Try to buy single from the highest affordable new dimensions\n  for (let i = 8; i > 0 && TimeDimension(i).bought === 0; i--) {\n    buySingleTimeDimension(i, true);\n  } // Buy everything costing less than 1% of initial EP\n\n\n  for (let i = 8; i > 0; i--) {\n    buyMaxTimeDimension(i, 0.01, true);\n  } // Loop buying the cheapest dimension possible; explicit infinite loops make me nervous\n\n\n  const tierCheck = tier => RealityUpgrade(13).isLockingMechanics ? tier < 5 : true;\n\n  const purchasableDimensions = TimeDimensions.all.filter(d => d.isUnlocked && tierCheck(d.tier));\n\n  for (let stop = 0; stop < 1000; stop++) {\n    const cheapestDim = purchasableDimensions.reduce((a, b) => b.cost.gte(a.cost) ? a : b);\n    if (!buySingleTimeDimension(cheapestDim.tier, true)) break;\n  }\n}\nexport function timeDimensionCommonMultiplier() {\n  let mult = new Decimal(ShopPurchase.allDimPurchases.currentMult).timesEffectsOf(Achievement(105), Achievement(128), TimeStudy(93), TimeStudy(103), TimeStudy(151), TimeStudy(221), TimeStudy(301), EternityChallenge(1).reward, EternityChallenge(10).reward, EternityUpgrade.tdMultAchs, EternityUpgrade.tdMultTheorems, EternityUpgrade.tdMultRealTime, Replicanti.areUnlocked && Replicanti.amount.gt(1) ? DilationUpgrade.tdMultReplicanti : null, Pelle.isDoomed ? null : RealityUpgrade(22), AlchemyResource.dimensionality, PelleRifts.chaos);\n\n  if (EternityChallenge(9).isRunning) {\n    mult = mult.times(Decimal.pow(Math.clampMin(Currency.infinityPower.value.pow(InfinityDimensions.powerConversionRate / 7).log2(), 1), 4).clampMin(1));\n  }\n\n  return mult;\n}\nexport function updateTimeDimensionCosts() {\n  for (let i = 1; i <= 8; i++) {\n    const dim = TimeDimension(i);\n    dim.cost = dim.nextCost(dim.bought);\n  }\n}\n\nclass TimeDimensionState extends DimensionState {\n  constructor(tier) {\n    super(() => player.dimensions.time, tier);\n    const BASE_COSTS = [null, DC.D1, DC.D5, DC.E2, DC.E3, DC.E2350, DC.E2650, DC.E3000, DC.E3350];\n    this._baseCost = BASE_COSTS[tier];\n    const COST_MULTS = [null, 3, 9, 27, 81, 24300, 72900, 218700, 656100];\n    this._costMultiplier = COST_MULTS[tier];\n    const E6000_SCALING_AMOUNTS = [null, 7322, 4627, 3382, 2665, 833, 689, 562, 456];\n    this._e6000ScalingAmount = E6000_SCALING_AMOUNTS[tier];\n    const COST_THRESHOLDS = [Decimal.NUMBER_MAX_VALUE, DC.E1300, DC.E6000];\n    this._costIncreaseThresholds = COST_THRESHOLDS;\n  }\n  /** @returns {Decimal} */\n\n\n  get cost() {\n    return this.data.cost;\n  }\n  /** @param {Decimal} value */\n\n\n  set cost(value) {\n    this.data.cost = value;\n  }\n\n  nextCost(bought) {\n    if (this._tier > 4 && bought < this.e6000ScalingAmount) {\n      const _cost = Decimal.pow(this.costMultiplier, bought).times(this.baseCost);\n\n      if (PelleRifts.paradox.milestones[0].canBeApplied) {\n        return _cost.div(\"1e2250\").pow(0.5);\n      }\n\n      return _cost;\n    }\n\n    const costMultIncreases = [1, 1.5, 2.2];\n\n    for (let i = 0; i < this._costIncreaseThresholds.length; i++) {\n      const _cost2 = Decimal.pow(this.costMultiplier * costMultIncreases[i], bought).times(this.baseCost);\n\n      if (_cost2.lt(this._costIncreaseThresholds[i])) return _cost2;\n    }\n\n    let base = this.costMultiplier;\n    if (this._tier <= 4) base *= 2.2;\n    const exponent = this.e6000ScalingAmount + (bought - this.e6000ScalingAmount) * TimeDimensions.scalingPast1e6000;\n    const cost = Decimal.pow(base, exponent).times(this.baseCost);\n\n    if (PelleRifts.paradox.milestones[0].canBeApplied && this._tier > 4) {\n      return cost.div(\"1e2250\").pow(0.5);\n    }\n\n    return cost;\n  }\n\n  get isUnlocked() {\n    return this._tier < 5 || TimeStudy.timeDimension(this._tier).isBought;\n  }\n\n  get isAvailableForPurchase() {\n    return this.isAffordable;\n  }\n\n  get isAffordable() {\n    return Currency.eternityPoints.gte(this.cost);\n  }\n\n  get multiplier() {\n    const tier = this._tier;\n    if (EternityChallenge(11).isRunning) return DC.D1;\n    let mult = GameCache.timeDimensionCommonMultiplier.value.timesEffectsOf(tier === 1 ? TimeStudy(11) : null, tier === 3 ? TimeStudy(73) : null, tier === 4 ? TimeStudy(227) : null);\n    const dim = TimeDimension(tier);\n    const bought = tier === 8 ? Math.clampMax(dim.bought, 1e8) : dim.bought;\n    mult = mult.times(Decimal.pow(dim.powerMultiplier, bought));\n    mult = mult.pow(getAdjustedGlyphEffect(\"timepow\"));\n    mult = mult.pow(getAdjustedGlyphEffect(\"effarigdimensions\"));\n    mult = mult.pow(getAdjustedGlyphEffect(\"curseddimensions\"));\n    mult = mult.powEffectOf(AlchemyResource.time);\n    mult = mult.pow(Ra.momentumValue);\n    mult = mult.pow(ImaginaryUpgrade(11).effectOrDefault(1));\n    mult = mult.powEffectOf(PelleRifts.paradox);\n\n    if (player.dilation.active || PelleStrikes.dilation.hasStrike) {\n      mult = dilatedValueOf(mult);\n    }\n\n    if (Effarig.isRunning) {\n      mult = Effarig.multiplier(mult);\n    } else if (V.isRunning) {\n      mult = mult.pow(0.5);\n    }\n\n    return mult;\n  }\n\n  get productionPerSecond() {\n    if (EternityChallenge(1).isRunning || EternityChallenge(10).isRunning || Laitela.isRunning && this.tier > Laitela.maxAllowedDimension) {\n      return DC.D0;\n    }\n\n    if (EternityChallenge(11).isRunning) {\n      return this.amount;\n    }\n\n    let production = this.amount.times(this.multiplier);\n\n    if (EternityChallenge(7).isRunning) {\n      production = production.times(Tickspeed.perSecond);\n    }\n\n    if (this._tier === 1 && !EternityChallenge(7).isRunning) {\n      production = production.pow(getAdjustedGlyphEffect(\"timeshardpow\"));\n    }\n\n    return production;\n  }\n\n  get rateOfChange() {\n    const tier = this._tier;\n\n    if (tier === 8) {\n      return DC.D0;\n    }\n\n    const toGain = TimeDimension(tier + 1).productionPerSecond;\n    const current = Decimal.max(this.amount, 1);\n    return toGain.times(10).dividedBy(current).times(getGameSpeedupForDisplay());\n  }\n\n  get isProducing() {\n    const tier = this.tier;\n\n    if (EternityChallenge(1).isRunning || EternityChallenge(10).isRunning || Laitela.isRunning && tier > Laitela.maxAllowedDimension) {\n      return false;\n    }\n\n    return this.amount.gt(0);\n  }\n\n  get baseCost() {\n    return this._baseCost;\n  }\n\n  get costMultiplier() {\n    return this._costMultiplier;\n  }\n\n  get powerMultiplier() {\n    return DC.D4.timesEffectsOf(this._tier === 8 ? GlyphSacrifice.time : null).pow(ImaginaryUpgrade(14).effectOrDefault(1));\n  }\n\n  get e6000ScalingAmount() {\n    return this._e6000ScalingAmount;\n  }\n\n  get costIncreaseThresholds() {\n    return this._costIncreaseThresholds;\n  }\n\n  get requirementReached() {\n    return this._tier < 5 || TimeStudy.timeDimension(this._tier).isAffordable && TimeStudy.timeDimension(this._tier - 1).isBought;\n  }\n\n  tryUnlock() {\n    if (this.isUnlocked) return;\n    TimeStudy.timeDimension(this._tier).purchase();\n  }\n\n}\n/**\r\n * @function\r\n * @param {number} tier\r\n * @return {TimeDimensionState}\r\n */\n\n\nexport const TimeDimension = TimeDimensionState.createAccessor();\nexport const TimeDimensions = {\n  /**\r\n   * @type {TimeDimensionState[]}\r\n   */\n  all: TimeDimension.index.compact(),\n\n  get scalingPast1e6000() {\n    return 4;\n  },\n\n  tick(diff) {\n    for (let tier = 8; tier > 1; tier--) {\n      TimeDimension(tier).produceDimensions(TimeDimension(tier - 1), diff / 10);\n    }\n\n    if (EternityChallenge(7).isRunning) {\n      TimeDimension(1).produceDimensions(InfinityDimension(8), diff);\n    } else {\n      TimeDimension(1).produceCurrency(Currency.timeShards, diff);\n    }\n\n    EternityChallenge(7).reward.applyEffect(production => {\n      InfinityDimension(8).amount = InfinityDimension(8).amount.plus(production.times(diff / 1000));\n    });\n  }\n\n};\nexport function tryUnlockTimeDimensions() {\n  if (TimeDimension(8).isUnlocked) return;\n\n  for (let tier = 5; tier <= 8; ++tier) {\n    if (TimeDimension(tier).isUnlocked) continue;\n    TimeDimension(tier).tryUnlock();\n  }\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/dimensions/time-dimension.js"],"names":["DC","DimensionState","buySingleTimeDimension","tier","auto","dim","TimeDimension","TimeStudy","timeDimension","isBought","RealityUpgrade","isLockingMechanics","Currency","eternityPoints","gte","cost","tryShowWarningModal","lt","Enslaved","isRunning","bought","ImaginaryUpgrade","EternityChallenge","completions","subtract","amount","plus","nextCost","resetTimeDimensions","TimeDimensions","all","Decimal","updateTimeDimensionCosts","fullResetTimeDimensions","baseCost","D0","toggleAllTimeDims","areEnabled","Autobuyer","isActive","i","buyMaxTimeDimension","portionToSpend","isMaxAll","canSpend","value","times","bulk","bulkBuyBinarySearch","costFunction","cumulative","firstCost","purchasePrice","quantity","maxAllTimeDimensions","tierCheck","purchasableDimensions","filter","d","isUnlocked","stop","cheapestDim","reduce","a","b","timeDimensionCommonMultiplier","mult","ShopPurchase","allDimPurchases","currentMult","timesEffectsOf","Achievement","reward","EternityUpgrade","tdMultAchs","tdMultTheorems","tdMultRealTime","Replicanti","areUnlocked","gt","DilationUpgrade","tdMultReplicanti","Pelle","isDoomed","AlchemyResource","dimensionality","PelleRifts","chaos","pow","Math","clampMin","infinityPower","InfinityDimensions","powerConversionRate","log2","TimeDimensionState","constructor","player","dimensions","time","BASE_COSTS","D1","D5","E2","E3","E2350","E2650","E3000","E3350","_baseCost","COST_MULTS","_costMultiplier","E6000_SCALING_AMOUNTS","_e6000ScalingAmount","COST_THRESHOLDS","NUMBER_MAX_VALUE","E1300","E6000","_costIncreaseThresholds","data","_tier","e6000ScalingAmount","costMultiplier","paradox","milestones","canBeApplied","div","costMultIncreases","length","base","exponent","scalingPast1e6000","isAvailableForPurchase","isAffordable","multiplier","GameCache","clampMax","powerMultiplier","getAdjustedGlyphEffect","powEffectOf","Ra","momentumValue","effectOrDefault","dilation","active","PelleStrikes","hasStrike","dilatedValueOf","Effarig","V","productionPerSecond","Laitela","maxAllowedDimension","production","Tickspeed","perSecond","rateOfChange","toGain","current","max","dividedBy","getGameSpeedupForDisplay","isProducing","D4","GlyphSacrifice","costIncreaseThresholds","requirementReached","tryUnlock","purchase","createAccessor","index","compact","tick","diff","produceDimensions","InfinityDimension","produceCurrency","timeShards","applyEffect","tryUnlockTimeDimensions"],"mappings":"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","sourcesContent":["import { DC } from \"../constants\";\r\n\r\nimport { DimensionState } from \"./dimension\";\r\n\r\nexport function buySingleTimeDimension(tier, auto = false) {\r\n  const dim = TimeDimension(tier);\r\n  if (tier > 4) {\r\n    if (!TimeStudy.timeDimension(tier).isBought) return false;\r\n    if (RealityUpgrade(13).isLockingMechanics && Currency.eternityPoints.gte(dim.cost)) {\r\n      if (!auto) RealityUpgrade(13).tryShowWarningModal();\r\n      return false;\r\n    }\r\n  }\r\n  if (Currency.eternityPoints.lt(dim.cost)) return false;\r\n  if (Enslaved.isRunning && dim.bought > 0) return false;\r\n  if (ImaginaryUpgrade(15).isLockingMechanics && EternityChallenge(7).completions > 0) {\r\n    if (!auto) {\r\n      ImaginaryUpgrade(15).tryShowWarningModal(`purchase a Time Dimension,\r\n        which will produce Infinity Dimensions through EC7`);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  Currency.eternityPoints.subtract(dim.cost);\r\n  dim.amount = dim.amount.plus(1);\r\n  dim.bought += 1;\r\n  dim.cost = dim.nextCost(dim.bought);\r\n  return true;\r\n}\r\n\r\nexport function resetTimeDimensions() {\r\n  for (const dim of TimeDimensions.all) dim.amount = new Decimal(dim.bought);\r\n  updateTimeDimensionCosts();\r\n}\r\n\r\nexport function fullResetTimeDimensions() {\r\n  for (const dim of TimeDimensions.all) {\r\n    dim.cost = new Decimal(dim.baseCost);\r\n    dim.amount = DC.D0;\r\n    dim.bought = 0;\r\n  }\r\n}\r\n\r\nexport function toggleAllTimeDims() {\r\n  const areEnabled = Autobuyer.timeDimension(1).isActive;\r\n  for (let i = 1; i < 9; i++) {\r\n    Autobuyer.timeDimension(i).isActive = !areEnabled;\r\n  }\r\n}\r\n\r\nexport function buyMaxTimeDimension(tier, portionToSpend = 1, isMaxAll = false) {\r\n  const canSpend = Currency.eternityPoints.value.times(portionToSpend);\r\n  const dim = TimeDimension(tier);\r\n  if (canSpend.lt(dim.cost)) return false;\r\n  if (tier > 4) {\r\n    if (!TimeStudy.timeDimension(tier).isBought) return false;\r\n    if (RealityUpgrade(13).isLockingMechanics) {\r\n      if (!isMaxAll) RealityUpgrade(13).tryShowWarningModal();\r\n      return false;\r\n    }\r\n  }\r\n  if (ImaginaryUpgrade(15).isLockingMechanics && EternityChallenge(7).completions > 0) {\r\n    if (!isMaxAll) {\r\n      ImaginaryUpgrade(15).tryShowWarningModal(`purchase a Time Dimension,\r\n        which will produce Infinity Dimensions through EC7`);\r\n    }\r\n    return false;\r\n  }\r\n  if (Enslaved.isRunning) return buySingleTimeDimension(tier);\r\n  const bulk = bulkBuyBinarySearch(canSpend, {\r\n    costFunction: bought => dim.nextCost(bought),\r\n    cumulative: true,\r\n    firstCost: dim.cost,\r\n  }, dim.bought);\r\n  if (!bulk) return false;\r\n  Currency.eternityPoints.subtract(bulk.purchasePrice);\r\n  dim.amount = dim.amount.plus(bulk.quantity);\r\n  dim.bought += bulk.quantity;\r\n  dim.cost = dim.nextCost(dim.bought);\r\n  return true;\r\n}\r\n\r\nexport function maxAllTimeDimensions() {\r\n  // Try to buy single from the highest affordable new dimensions\r\n  for (let i = 8; i > 0 && TimeDimension(i).bought === 0; i--) {\r\n    buySingleTimeDimension(i, true);\r\n  }\r\n\r\n  // Buy everything costing less than 1% of initial EP\r\n  for (let i = 8; i > 0; i--) {\r\n    buyMaxTimeDimension(i, 0.01, true);\r\n  }\r\n\r\n  // Loop buying the cheapest dimension possible; explicit infinite loops make me nervous\r\n  const tierCheck = tier => (RealityUpgrade(13).isLockingMechanics ? tier < 5 : true);\r\n  const purchasableDimensions = TimeDimensions.all.filter(d => d.isUnlocked && tierCheck(d.tier));\r\n  for (let stop = 0; stop < 1000; stop++) {\r\n    const cheapestDim = purchasableDimensions.reduce((a, b) => (b.cost.gte(a.cost) ? a : b));\r\n    if (!buySingleTimeDimension(cheapestDim.tier, true)) break;\r\n  }\r\n}\r\n\r\nexport function timeDimensionCommonMultiplier() {\r\n  let mult = new Decimal(ShopPurchase.allDimPurchases.currentMult)\r\n    .timesEffectsOf(\r\n      Achievement(105),\r\n      Achievement(128),\r\n      TimeStudy(93),\r\n      TimeStudy(103),\r\n      TimeStudy(151),\r\n      TimeStudy(221),\r\n      TimeStudy(301),\r\n      EternityChallenge(1).reward,\r\n      EternityChallenge(10).reward,\r\n      EternityUpgrade.tdMultAchs,\r\n      EternityUpgrade.tdMultTheorems,\r\n      EternityUpgrade.tdMultRealTime,\r\n      Replicanti.areUnlocked && Replicanti.amount.gt(1) ? DilationUpgrade.tdMultReplicanti : null,\r\n      Pelle.isDoomed ? null : RealityUpgrade(22),\r\n      AlchemyResource.dimensionality,\r\n      PelleRifts.chaos\r\n    );\r\n\r\n  if (EternityChallenge(9).isRunning) {\r\n    mult = mult.times(\r\n      Decimal.pow(\r\n        Math.clampMin(Currency.infinityPower.value.pow(InfinityDimensions.powerConversionRate / 7).log2(), 1),\r\n        4)\r\n        .clampMin(1));\r\n  }\r\n  return mult;\r\n}\r\n\r\nexport function updateTimeDimensionCosts() {\r\n  for (let i = 1; i <= 8; i++) {\r\n    const dim = TimeDimension(i);\r\n    dim.cost = dim.nextCost(dim.bought);\r\n  }\r\n}\r\n\r\nclass TimeDimensionState extends DimensionState {\r\n  constructor(tier) {\r\n    super(() => player.dimensions.time, tier);\r\n    const BASE_COSTS = [null, DC.D1, DC.D5, DC.E2, DC.E3, DC.E2350, DC.E2650, DC.E3000, DC.E3350];\r\n    this._baseCost = BASE_COSTS[tier];\r\n    const COST_MULTS = [null, 3, 9, 27, 81, 24300, 72900, 218700, 656100];\r\n    this._costMultiplier = COST_MULTS[tier];\r\n    const E6000_SCALING_AMOUNTS = [null, 7322, 4627, 3382, 2665, 833, 689, 562, 456];\r\n    this._e6000ScalingAmount = E6000_SCALING_AMOUNTS[tier];\r\n    const COST_THRESHOLDS = [Decimal.NUMBER_MAX_VALUE, DC.E1300, DC.E6000];\r\n    this._costIncreaseThresholds = COST_THRESHOLDS;\r\n  }\r\n\r\n  /** @returns {Decimal} */\r\n  get cost() {\r\n    return this.data.cost;\r\n  }\r\n\r\n  /** @param {Decimal} value */\r\n  set cost(value) { this.data.cost = value; }\r\n\r\n  nextCost(bought) {\r\n    if (this._tier > 4 && bought < this.e6000ScalingAmount) {\r\n      const cost = Decimal.pow(this.costMultiplier, bought).times(this.baseCost);\r\n      if (PelleRifts.paradox.milestones[0].canBeApplied) {\r\n        return cost.div(\"1e2250\").pow(0.5);\r\n      }\r\n      return cost;\r\n    }\r\n\r\n    const costMultIncreases = [1, 1.5, 2.2];\r\n    for (let i = 0; i < this._costIncreaseThresholds.length; i++) {\r\n      const cost = Decimal.pow(this.costMultiplier * costMultIncreases[i], bought).times(this.baseCost);\r\n      if (cost.lt(this._costIncreaseThresholds[i])) return cost;\r\n    }\r\n\r\n    let base = this.costMultiplier;\r\n    if (this._tier <= 4) base *= 2.2;\r\n    const exponent = this.e6000ScalingAmount + (bought - this.e6000ScalingAmount) * TimeDimensions.scalingPast1e6000;\r\n    const cost = Decimal.pow(base, exponent).times(this.baseCost);\r\n\r\n    if (PelleRifts.paradox.milestones[0].canBeApplied && this._tier > 4) {\r\n      return cost.div(\"1e2250\").pow(0.5);\r\n    }\r\n    return cost;\r\n  }\r\n\r\n  get isUnlocked() {\r\n    return this._tier < 5 || TimeStudy.timeDimension(this._tier).isBought;\r\n  }\r\n\r\n  get isAvailableForPurchase() {\r\n    return this.isAffordable;\r\n  }\r\n\r\n  get isAffordable() {\r\n    return Currency.eternityPoints.gte(this.cost);\r\n  }\r\n\r\n  get multiplier() {\r\n    const tier = this._tier;\r\n\r\n    if (EternityChallenge(11).isRunning) return DC.D1;\r\n    let mult = GameCache.timeDimensionCommonMultiplier.value\r\n      .timesEffectsOf(\r\n        tier === 1 ? TimeStudy(11) : null,\r\n        tier === 3 ? TimeStudy(73) : null,\r\n        tier === 4 ? TimeStudy(227) : null\r\n      );\r\n\r\n    const dim = TimeDimension(tier);\r\n    const bought = tier === 8 ? Math.clampMax(dim.bought, 1e8) : dim.bought;\r\n    mult = mult.times(Decimal.pow(dim.powerMultiplier, bought));\r\n\r\n    mult = mult.pow(getAdjustedGlyphEffect(\"timepow\"));\r\n    mult = mult.pow(getAdjustedGlyphEffect(\"effarigdimensions\"));\r\n    mult = mult.pow(getAdjustedGlyphEffect(\"curseddimensions\"));\r\n    mult = mult.powEffectOf(AlchemyResource.time);\r\n    mult = mult.pow(Ra.momentumValue);\r\n    mult = mult.pow(ImaginaryUpgrade(11).effectOrDefault(1));\r\n    mult = mult.powEffectOf(PelleRifts.paradox);\r\n\r\n    if (player.dilation.active || PelleStrikes.dilation.hasStrike) {\r\n      mult = dilatedValueOf(mult);\r\n    }\r\n\r\n    if (Effarig.isRunning) {\r\n      mult = Effarig.multiplier(mult);\r\n    } else if (V.isRunning) {\r\n      mult = mult.pow(0.5);\r\n    }\r\n\r\n    return mult;\r\n  }\r\n\r\n  get productionPerSecond() {\r\n    if (EternityChallenge(1).isRunning || EternityChallenge(10).isRunning ||\r\n    (Laitela.isRunning && this.tier > Laitela.maxAllowedDimension)) {\r\n      return DC.D0;\r\n    }\r\n    if (EternityChallenge(11).isRunning) {\r\n      return this.amount;\r\n    }\r\n    let production = this.amount.times(this.multiplier);\r\n    if (EternityChallenge(7).isRunning) {\r\n      production = production.times(Tickspeed.perSecond);\r\n    }\r\n    if (this._tier === 1 && !EternityChallenge(7).isRunning) {\r\n      production = production.pow(getAdjustedGlyphEffect(\"timeshardpow\"));\r\n    }\r\n    return production;\r\n  }\r\n\r\n  get rateOfChange() {\r\n    const tier = this._tier;\r\n    if (tier === 8) {\r\n      return DC.D0;\r\n    }\r\n    const toGain = TimeDimension(tier + 1).productionPerSecond;\r\n    const current = Decimal.max(this.amount, 1);\r\n    return toGain.times(10).dividedBy(current).times(getGameSpeedupForDisplay());\r\n  }\r\n\r\n  get isProducing() {\r\n    const tier = this.tier;\r\n    if (EternityChallenge(1).isRunning ||\r\n      EternityChallenge(10).isRunning ||\r\n      (Laitela.isRunning && tier > Laitela.maxAllowedDimension)) {\r\n      return false;\r\n    }\r\n    return this.amount.gt(0);\r\n  }\r\n\r\n  get baseCost() {\r\n    return this._baseCost;\r\n  }\r\n\r\n  get costMultiplier() {\r\n    return this._costMultiplier;\r\n  }\r\n\r\n  get powerMultiplier() {\r\n    return DC.D4\r\n      .timesEffectsOf(this._tier === 8 ? GlyphSacrifice.time : null)\r\n      .pow(ImaginaryUpgrade(14).effectOrDefault(1));\r\n  }\r\n\r\n  get e6000ScalingAmount() {\r\n    return this._e6000ScalingAmount;\r\n  }\r\n\r\n  get costIncreaseThresholds() {\r\n    return this._costIncreaseThresholds;\r\n  }\r\n\r\n  get requirementReached() {\r\n    return this._tier < 5 ||\r\n      (TimeStudy.timeDimension(this._tier).isAffordable && TimeStudy.timeDimension(this._tier - 1).isBought);\r\n  }\r\n\r\n  tryUnlock() {\r\n    if (this.isUnlocked) return;\r\n    TimeStudy.timeDimension(this._tier).purchase();\r\n  }\r\n}\r\n\r\n/**\r\n * @function\r\n * @param {number} tier\r\n * @return {TimeDimensionState}\r\n */\r\nexport const TimeDimension = TimeDimensionState.createAccessor();\r\n\r\nexport const TimeDimensions = {\r\n  /**\r\n   * @type {TimeDimensionState[]}\r\n   */\r\n  all: TimeDimension.index.compact(),\r\n\r\n  get scalingPast1e6000() {\r\n    return 4;\r\n  },\r\n\r\n  tick(diff) {\r\n    for (let tier = 8; tier > 1; tier--) {\r\n      TimeDimension(tier).produceDimensions(TimeDimension(tier - 1), diff / 10);\r\n    }\r\n\r\n    if (EternityChallenge(7).isRunning) {\r\n      TimeDimension(1).produceDimensions(InfinityDimension(8), diff);\r\n    } else {\r\n      TimeDimension(1).produceCurrency(Currency.timeShards, diff);\r\n    }\r\n\r\n    EternityChallenge(7).reward.applyEffect(production => {\r\n      InfinityDimension(8).amount = InfinityDimension(8).amount.plus(production.times(diff / 1000));\r\n    });\r\n  }\r\n};\r\n\r\nexport function tryUnlockTimeDimensions() {\r\n  if (TimeDimension(8).isUnlocked) return;\r\n  for (let tier = 5; tier <= 8; ++tier) {\r\n    if (TimeDimension(tier).isUnlocked) continue;\r\n    TimeDimension(tier).tryUnlock();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}