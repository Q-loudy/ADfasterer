{"ast":null,"code":"import \"core-js/modules/es.array.reduce.js\";\nimport { DC } from \"../../constants\";\nexport const GlyphCombiner = Object.freeze({\n  /**\r\n   * @param {number[]} x\r\n   * @returns {number}\r\n   */\n  add: x => x.reduce(Number.sumReducer, 0),\n\n  /**\r\n   * @param {number[]} x\r\n   * @returns {number}\r\n   */\n  multiply: x => x.reduce(Number.prodReducer, 1),\n\n  /**\r\n   * For exponents, the base value is 1, so when we add two exponents a and b we want to get a + b - 1,\r\n   * so that if a and b are both close to 1 so is their sum. In general, when we add a list x of exponents,\r\n   * we have to add 1 - x.length to the actual sum, so that if all the exponents are close to 1 the result\r\n   * is also close to 1 rather than close to x.length.\r\n   * @param {number[]} x\r\n   * @returns {number}\r\n   */\n  addExponents: x => x.reduce(Number.sumReducer, 1 - x.length),\n\n  /**\r\n   * @param {Decimal[]} x\r\n   * @returns {Decimal}\r\n   */\n  multiplyDecimal: x => x.reduce(Decimal.prodReducer, DC.D1)\n});\nexport const glyphEffects = {\n  timepow: {\n    id: \"timepow\",\n    bitmaskIndex: 0,\n    isGenerated: true,\n    glyphTypes: [\"time\"],\n    singleDesc: \"Time Dimension power +{value}\",\n    totalDesc: \"Time Dimension multipliers ^{value}\",\n    shortDesc: \"TD power +{value}\",\n    effect: (level, strength) => 1.01 + Math.pow(level, 0.32) * Math.pow(strength, 0.45) / 75,\n    formatEffect: x => format(x, 3, 3),\n    formatSingleEffect: x => format(x - 1, 3, 3),\n    combine: GlyphCombiner.addExponents,\n    enabledInDoomed: true\n  },\n  timespeed: {\n    id: \"timespeed\",\n    bitmaskIndex: 1,\n    isGenerated: true,\n    glyphTypes: [\"time\"],\n    singleDesc: \"Multiply game speed by {value}\",\n    totalDesc: \"Game runs ×{value} faster\",\n    genericDesc: \"Game speed multiplier\",\n    shortDesc: \"Game speed ×{value}\",\n    effect: (level, strength) => GlyphAlteration.isEmpowered(\"time\") ? 1 + Math.pow(level, 0.35) : 1 + Math.pow(level, 0.3) * Math.pow(strength, 0.65) / 20,\n    formatEffect: x => format(x, 3, 3),\n    combine: GlyphCombiner.multiply,\n    alteredColor: () => GlyphAlteration.getEmpowermentColor(\"time\"),\n    alterationType: ALTERATION_TYPE.EMPOWER,\n    enabledInDoomed: true\n  },\n  timeetermult: {\n    id: \"timeetermult\",\n    bitmaskIndex: 2,\n    isGenerated: true,\n    glyphTypes: [\"time\"],\n    singleDesc: \"Multiply Eternity gain by {value}\",\n    totalDesc: \"Eternity gain ×{value}\",\n    genericDesc: \"Eternity gain multiplier\",\n    shortDesc: \"Eternities ×{value}\",\n    effect: (level, strength) => Math.pow((strength + 3) * level, 0.9) * Math.pow(3, GlyphAlteration.sacrificeBoost(\"time\")),\n    formatEffect: x => format(x, 2, 2),\n    combine: GlyphCombiner.multiply,\n    alteredColor: () => GlyphAlteration.getBoostColor(\"time\"),\n    alterationType: ALTERATION_TYPE.BOOST\n  },\n  timeEP: {\n    id: \"timeEP\",\n    bitmaskIndex: 3,\n    isGenerated: true,\n    glyphTypes: [\"time\"],\n    singleDesc: () => GlyphAlteration.isAdded(\"time\") ? \"Eternity Point gain \\n×{value} [and ^]{value2}\" : \"Multiply Eternity Point gain by {value}\",\n    totalDesc: () => GlyphAlteration.isAdded(\"time\") ? \"Eternity Point gain ×{value} and ^{value2}\" : \"Eternity Point gain ×{value}\",\n    genericDesc: () => GlyphAlteration.isAdded(\"time\") ? \"Eternity Point gain multiplier and power\" : \"Eternity Point gain multiplier\",\n    shortDesc: () => GlyphAlteration.isAdded(\"time\") ? \"EP ×{value} and ^{value2}\" : \"EP ×{value}\",\n    effect: (level, strength) => Math.pow(level * strength, 3) * 100,\n    formatEffect: x => format(x, 2, 3),\n    combine: GlyphCombiner.multiply,\n    conversion: x => 1 + Math.log10(x) / 1000,\n    formatSecondaryEffect: x => format(x, 4, 4),\n    alteredColor: () => GlyphAlteration.getAdditionColor(\"time\"),\n    alterationType: ALTERATION_TYPE.ADDITION\n  },\n  dilationDT: {\n    id: \"dilationDT\",\n    bitmaskIndex: 4,\n    isGenerated: true,\n    glyphTypes: [\"dilation\"],\n    singleDesc: \"Multiply Dilated Time gain by {value}\",\n    totalDesc: \"Dilated Time gain ×{value}\",\n    shortDesc: \"DT ×{value}\",\n    effect: (level, strength) => GlyphAlteration.isEmpowered(\"dilation\") ? DC.D1_005.pow(level).times(15) : Decimal.pow(level * strength, 1.5).times(2),\n    formatEffect: x => format(x, 2, 1),\n    combine: GlyphCombiner.multiplyDecimal,\n    alteredColor: () => GlyphAlteration.getEmpowermentColor(\"dilation\"),\n    alterationType: ALTERATION_TYPE.EMPOWER\n  },\n  dilationgalaxyThreshold: {\n    id: \"dilationgalaxyThreshold\",\n    bitmaskIndex: 5,\n    isGenerated: true,\n    glyphTypes: [\"dilation\"],\n    singleDesc: \"Tachyon Galaxy threshold multiplier ×{value}\",\n    genericDesc: \"Tachyon Galaxy cost multiplier\",\n    shortDesc: \"TG threshold ×{value}\",\n    effect: (level, strength) => 1 - Math.pow(level, 0.17) * Math.pow(strength, 0.35) / 100 - GlyphAlteration.sacrificeBoost(\"dilation\") / 50,\n    formatEffect: x => format(x, 3, 3),\n    alteredColor: () => GlyphAlteration.getBoostColor(\"dilation\"),\n    alterationType: ALTERATION_TYPE.BOOST,\n    combine: effects => {\n      const prod = effects.reduce(Number.prodReducer, 1);\n      return prod < 0.4 ? {\n        value: 0.4 - Math.pow(0.4 - prod, 1.7),\n        capped: true\n      } : {\n        value: prod,\n        capped: false\n      };\n    },\n    enabledInDoomed: true\n  },\n  dilationTTgen: {\n    // TTgen slowly generates TT, value amount is per second, displayed per hour\n    id: \"dilationTTgen\",\n    bitmaskIndex: 6,\n    isGenerated: true,\n    glyphTypes: [\"dilation\"],\n    singleDesc: () => GlyphAlteration.isAdded(\"dilation\") ? \"Generates {value} Time Theorems/hour \\n[and multiplies Time Theorem \\ngeneration by] {value2}\" : \"Generates {value} Time Theorems per hour\",\n    totalDesc: () => GlyphAlteration.isAdded(\"dilation\") ? \"Generating {value} Time Theorems/hour and Time Theorem generation ×{value2}\" : \"Generating {value} Time Theorems per hour\",\n    genericDesc: () => GlyphAlteration.isAdded(\"dilation\") ? \"Time Theorem generation and multiplier\" : \"Time Theorem generation\",\n    shortDesc: () => GlyphAlteration.isAdded(\"dilation\") ? \"{value} TT/hr and TTgen ×{value2}\" : \"{value} TT/hr\",\n    effect: (level, strength) => Math.pow(level * strength, 0.5) / 10000,\n\n    /** @type {function(number): string} */\n    formatEffect: x => format(3600 * x, 2, 2),\n    combine: GlyphCombiner.add,\n    conversion: x => Math.clampMin(Math.pow(10000 * x, 1.6), 1),\n    formatSecondaryEffect: x => format(x, 2, 2),\n    alteredColor: () => GlyphAlteration.getAdditionColor(\"dilation\"),\n    alterationType: ALTERATION_TYPE.ADDITION\n  },\n  dilationpow: {\n    id: \"dilationpow\",\n    bitmaskIndex: 7,\n    isGenerated: true,\n    glyphTypes: [\"dilation\"],\n    singleDesc: \"Antimatter Dimension power +{value} while Dilated\",\n    totalDesc: \"Antimatter Dimension multipliers ^{value} while Dilated\",\n    genericDesc: \"Antimatter Dimensions ^x while Dilated\",\n    shortDesc: \"Dilated AD power +{value}\",\n    effect: (level, strength) => 1.1 + Math.pow(level, 0.7) * Math.pow(strength, 0.7) / 25,\n    formatEffect: x => format(x, 2, 2),\n    formatSingleEffect: x => format(x - 1, 2, 2),\n    combine: GlyphCombiner.addExponents,\n    enabledInDoomed: true\n  },\n  replicationspeed: {\n    id: \"replicationspeed\",\n    bitmaskIndex: 8,\n    isGenerated: true,\n    glyphTypes: [\"replication\"],\n    singleDesc: \"Multiply Replication speed by {value}\",\n    totalDesc: \"Replication speed ×{value}\",\n    genericDesc: \"Replication speed multiplier\",\n    shortDesc: \"Replication speed ×{value}\",\n    effect: (level, strength) => GlyphAlteration.isEmpowered(\"replication\") ? DC.D1_007.pow(level).times(10) : Decimal.times(level, strength).times(3),\n    formatEffect: x => format(x, 2, 1),\n    combine: GlyphCombiner.multiplyDecimal,\n    alteredColor: () => GlyphAlteration.getEmpowermentColor(\"replication\"),\n    alterationType: ALTERATION_TYPE.EMPOWER\n  },\n  replicationpow: {\n    id: \"replicationpow\",\n    bitmaskIndex: 9,\n    isGenerated: true,\n    glyphTypes: [\"replication\"],\n    singleDesc: \"Replicanti multiplier power +{value}\",\n    totalDesc: \"Replicanti multiplier ^{value}\",\n    shortDesc: \"Replicanti mult. power +{value}\",\n    effect: (level, strength) => 1.1 + Math.pow(level, 0.5) * strength / 25 + GlyphAlteration.sacrificeBoost(\"replication\") * 3,\n    formatEffect: x => format(x, 2, 2),\n    formatSingleEffect: x => format(x - 1, 2, 2),\n    combine: GlyphCombiner.addExponents,\n    alteredColor: () => GlyphAlteration.getBoostColor(\"replication\"),\n    alterationType: ALTERATION_TYPE.BOOST,\n    enabledInDoomed: true\n  },\n  replicationdtgain: {\n    id: \"replicationdtgain\",\n    bitmaskIndex: 10,\n    isGenerated: true,\n    glyphTypes: [\"replication\"],\n    singleDesc: () => GlyphAlteration.isAdded(\"replication\") ? `Multiply Dilated Time \\n[and Replicanti speed] by \\n+{value} per ${format(DC.E10000)} replicanti` : `Multiply Dilated Time gain by \\n+{value} per ${format(DC.E10000)} replicanti`,\n    totalDesc: () => GlyphAlteration.isAdded(\"replication\") ? `Multiply Dilated Time and Replication speed by +{value} per ${format(DC.E10000)} replicanti` : `Multiply Dilated Time gain by +{value} per ${format(DC.E10000)} replicanti`,\n    genericDesc: () => GlyphAlteration.isAdded(\"replication\") ? \"Dilated Time+Replicanti mult from replicanti\" : \"Dilated Time gain multiplier from replicanti\",\n    shortDesc: () => GlyphAlteration.isAdded(\"replication\") ? `×DT and repl. by +{value} per ${format(DC.E10000)} replicanti` : `×DT by +{value} per ${format(DC.E10000)} replicanti`,\n    effect: (level, strength) => 0.0003 * Math.pow(level, 0.3) * Math.pow(strength, 0.65),\n    formatEffect: x => format(10000 * x, 2, 2),\n    formatSingleEffect: x => format(10000 * x, 2, 2),\n    // It's bad to stack this one additively (N glyphs acts as a DT mult of N) or multiplicatively (the raw number is\n    // less than 1), so instead we do a multiplicative stacking relative to the \"base\" effect of a level 1, 0% glyph.\n    // We also introduce a 3x mult per glyph after the first, so that stacking level 1, 0% glyphs still has an effect.\n    // This is still just a flat DT mult when stacking multiple glyphs, but at least it's bigger than 2 or 3.\n    combine: effects => ({\n      value: effects.length === 0 ? 0 : effects.reduce(Number.prodReducer, Math.pow(0.0001, 1 - effects.length)),\n      capped: false\n    }),\n    conversion: x => x,\n    formatSecondaryEffect: x => format(x, 2, 3),\n    formatSingleSecondaryEffect: x => format(x, 5, 5),\n    alteredColor: () => GlyphAlteration.getAdditionColor(\"replication\"),\n    alterationType: ALTERATION_TYPE.ADDITION\n  },\n  replicationglyphlevel: {\n    id: \"replicationglyphlevel\",\n    bitmaskIndex: 11,\n    isGenerated: true,\n    glyphTypes: [\"replication\"],\n    singleDesc: () => `Replicanti factor for Glyph level:\\n ^${format(0.4, 1, 1)}\n      ➜ ^(${format(0.4, 1, 1)} + {value})`,\n    totalDesc: () => `Replicanti factor for Glyph level: ^${format(0.4, 1, 1)}\n      ➜ ^(${format(0.4, 1, 1)} + {value})`,\n    genericDesc: \"Replicanti factor for Glyph level\",\n    shortDesc: \"Replicanti pow. for level +{value}\",\n    effect: (level, strength) => Math.pow(Math.pow(level, 0.25) * Math.pow(strength, 0.4), 0.5) / 50,\n    formatEffect: x => format(x, 3, 3),\n    combine: effects => {\n      let sum = effects.reduce(Number.sumReducer, 0);\n      if (effects.length > 2) sum *= 6 / (effects.length + 4);\n      return sum > 0.1 ? {\n        value: 0.1 + 0.2 * (sum - 0.1),\n        capped: true\n      } : {\n        value: sum,\n        capped: effects.length > 2\n      };\n    },\n    enabledInDoomed: true\n  },\n  infinitypow: {\n    id: \"infinitypow\",\n    bitmaskIndex: 12,\n    isGenerated: true,\n    glyphTypes: [\"infinity\"],\n    singleDesc: \"Infinity Dimension power +{value}\",\n    totalDesc: \"Infinity Dimension multipliers ^{value}\",\n    shortDesc: \"ID power +{value}\",\n    effect: (level, strength) => 1.007 + Math.pow(level, 0.21) * Math.pow(strength, 0.4) / 75 + GlyphAlteration.sacrificeBoost(\"infinity\") / 50,\n    formatEffect: x => format(x, 3, 3),\n    formatSingleEffect: x => format(x - 1, 3, 3),\n    combine: GlyphCombiner.addExponents,\n    alteredColor: () => GlyphAlteration.getBoostColor(\"infinity\"),\n    alterationType: ALTERATION_TYPE.BOOST,\n    enabledInDoomed: true\n  },\n  infinityrate: {\n    id: \"infinityrate\",\n    bitmaskIndex: 13,\n    isGenerated: true,\n    glyphTypes: [\"infinity\"],\n    singleDesc: () => `Infinity Power conversion rate: \\n^${formatInt(7)}\n      ➜ ^(${formatInt(7)} + {value})`,\n    totalDesc: () => `Infinity Power conversion rate: ^${formatInt(7)}\n      ➜ ^(${formatInt(7)} + {value})`,\n    genericDesc: \"Infinity Power conversion rate\",\n    shortDesc: \"Infinity Power conversion +{value}\",\n    effect: (level, strength) => Math.pow(level, 0.2) * Math.pow(strength, 0.4) * 0.04,\n    formatEffect: x => format(x, 2, 2),\n    combine: GlyphCombiner.add,\n    enabledInDoomed: true\n  },\n  infinityIP: {\n    id: \"infinityIP\",\n    bitmaskIndex: 14,\n    isGenerated: true,\n    glyphTypes: [\"infinity\"],\n    singleDesc: () => GlyphAlteration.isAdded(\"infinity\") ? \"Infinity Point gain \\n×{value} [and ^]{value2}\" : \"Multiply Infinity Point gain by {value}\",\n    totalDesc: () => GlyphAlteration.isAdded(\"infinity\") ? \"Infinity Point gain ×{value} and ^{value2}\" : \"Infinity Point gain ×{value}\",\n    genericDesc: () => GlyphAlteration.isAdded(\"infinity\") ? \"Infinity Point gain multiplier and power\" : \"Infinity Point gain multiplier\",\n    shortDesc: () => GlyphAlteration.isAdded(\"infinity\") ? \"IP ×{value} and ^{value2}\" : \"IP ×{value}\",\n    effect: (level, strength) => Math.pow(level * (strength + 1), 6) * 10000,\n    formatEffect: x => format(x, 2, 3),\n    combine: GlyphCombiner.multiply,\n    // eslint-disable-next-line no-negated-condition\n    softcap: value => Effarig.eternityCap !== undefined ? Math.min(value, Effarig.eternityCap.toNumber()) : value,\n    conversion: x => 1 + Math.log10(x) / 1800,\n    formatSecondaryEffect: x => format(x, 4, 4),\n    alteredColor: () => GlyphAlteration.getAdditionColor(\"infinity\"),\n    alterationType: ALTERATION_TYPE.ADDITION\n  },\n  infinityinfmult: {\n    id: \"infinityinfmult\",\n    bitmaskIndex: 15,\n    isGenerated: true,\n    glyphTypes: [\"infinity\"],\n    singleDesc: \"Multiply Infinity gain by {value}\",\n    totalDesc: \"Infinity gain ×{value}\",\n    genericDesc: \"Infinity gain multiplier\",\n    shortDesc: \"Infinities ×{value}\",\n    effect: (level, strength) => GlyphAlteration.isEmpowered(\"infinity\") ? DC.D1_02.pow(level) : Decimal.pow(level * strength, 1.5).times(2),\n    formatEffect: x => format(x, 2, 1),\n    combine: GlyphCombiner.multiplyDecimal,\n    alteredColor: () => GlyphAlteration.getEmpowermentColor(\"infinity\"),\n    alterationType: ALTERATION_TYPE.EMPOWER\n  },\n  powerpow: {\n    id: \"powerpow\",\n    bitmaskIndex: 16,\n    isGenerated: true,\n    glyphTypes: [\"power\"],\n    singleDesc: () => GlyphAlteration.isAdded(\"power\") ? \"Antimatter Dimension power +{value}\\n[and Antimatter Galaxy cost ×]{value2}\" : \"Antimatter Dimension power +{value}\",\n    totalDesc: () => GlyphAlteration.isAdded(\"power\") ? \"Antimatter Dimension multipliers ^{value} and Antimatter Galaxy cost ×{value2}\" : \"Antimatter Dimension multipliers ^{value}\",\n    genericDesc: () => GlyphAlteration.isAdded(\"power\") ? \"Antimatter Dimensions multipliers ^x and Antimatter Galaxy cost multiplier\" : \"Antimatter Dimension multipliers ^x\",\n    shortDesc: () => GlyphAlteration.isAdded(\"power\") ? \"AD power +{value} and AG cost ×{value2}\" : \"AD power +{value}\",\n    effect: (level, strength) => 1.015 + Math.pow(level, 0.2) * Math.pow(strength, 0.4) / 75,\n    formatEffect: x => format(x, 3, 3),\n    formatSingleEffect: x => format(x - 1, 3, 3),\n    combine: GlyphCombiner.addExponents,\n    conversion: x => 2 / (x + 1),\n    formatSecondaryEffect: x => format(x, 3, 3),\n    alteredColor: () => GlyphAlteration.getAdditionColor(\"power\"),\n    alterationType: ALTERATION_TYPE.ADDITION,\n    enabledInDoomed: true\n  },\n  powermult: {\n    id: \"powermult\",\n    bitmaskIndex: 17,\n    isGenerated: true,\n    glyphTypes: [\"power\"],\n    singleDesc: \"Antimatter Dimension multipliers ×{value}\",\n    shortDesc: \"AD ×{value}\",\n    effect: (level, strength) => GlyphAlteration.isEmpowered(\"power\") ? DC.D11111.pow(level * 220) : Decimal.pow(level * strength * 10, level * strength * 10),\n    formatEffect: x => formatPostBreak(x, 2, 0),\n    combine: GlyphCombiner.multiplyDecimal,\n    alteredColor: () => GlyphAlteration.getEmpowermentColor(\"power\"),\n    alterationType: ALTERATION_TYPE.EMPOWER,\n    enabledInDoomed: true\n  },\n  powerdimboost: {\n    id: \"powerdimboost\",\n    bitmaskIndex: 18,\n    isGenerated: true,\n    glyphTypes: [\"power\"],\n    singleDesc: \"Dimension Boost multiplier ×{value}\",\n    genericDesc: \"Dimension Boost multiplier\",\n    shortDesc: \"Dimboost mult. ×{value}\",\n    effect: (level, strength) => Math.pow(level * strength, 0.5) * Math.pow(1 + GlyphAlteration.sacrificeBoost(\"power\"), 3),\n    formatEffect: x => format(x, 2, 2),\n    combine: GlyphCombiner.multiply,\n    alteredColor: () => GlyphAlteration.getBoostColor(\"power\"),\n    alterationType: ALTERATION_TYPE.BOOST,\n    enabledInDoomed: true\n  },\n  powerbuy10: {\n    id: \"powerbuy10\",\n    bitmaskIndex: 19,\n    isGenerated: true,\n    glyphTypes: [\"power\"],\n    singleDesc: () => `Increase the bonus from buying ${formatInt(10)} Antimatter Dimensions by {value}`,\n    totalDesc: () => `Multiplier from \"Buy ${formatInt(10)}\" ×{value}`,\n    genericDesc: () => `\"Buy ${formatInt(10)}\" bonus increase`,\n    shortDesc: () => `AD \"Buy ${formatInt(10)}\" mult. ×{value}`,\n    effect: (level, strength) => 1 + level * strength / 12,\n    formatEffect: x => format(x, 2, 2),\n    combine: GlyphCombiner.addExponents,\n    enabledInDoomed: true\n  },\n  effarigrm: {\n    id: \"effarigrm\",\n    bitmaskIndex: 20,\n    isGenerated: true,\n    glyphTypes: [\"effarig\"],\n    singleDesc: \"Reality Machine multiplier ×{value}\",\n    genericDesc: \"Reality Machine multiplier\",\n    shortDesc: \"RM ×{value}\",\n    effect: (level, strength) => GlyphAlteration.isEmpowered(\"effarig\") ? Math.pow(level, 1.5) : Math.pow(level, 0.6) * strength,\n    formatEffect: x => format(x, 2, 2),\n    combine: GlyphCombiner.multiply,\n    alteredColor: () => GlyphAlteration.getEmpowermentColor(\"effarig\"),\n    alterationType: ALTERATION_TYPE.EMPOWER\n  },\n  effarigglyph: {\n    id: \"effarigglyph\",\n    bitmaskIndex: 21,\n    isGenerated: true,\n    glyphTypes: [\"effarig\"],\n    singleDesc: \"Glyph Instability starting level +{value}\",\n    genericDesc: \"Glyph Instability delay\",\n    shortDesc: \"Instability delay +{value}\",\n    effect: (level, strength) => Math.floor(10 * Math.pow(level * strength, 0.5)),\n    formatEffect: x => formatInt(x),\n    combine: GlyphCombiner.add\n  },\n  effarigblackhole: {\n    id: \"effarigblackhole\",\n    bitmaskIndex: 22,\n    isGenerated: true,\n    glyphTypes: [\"effarig\"],\n    singleDesc: \"Game speed power +{value}\",\n    totalDesc: \"Game speed ^{value}\",\n    genericDesc: \"Game speed ^x\",\n    shortDesc: \"Game speed power +{value}\",\n    effect: (level, strength) => 1 + Math.pow(level, 0.25) * Math.pow(strength, 0.4) / 75,\n    formatEffect: x => format(x, 3, 3),\n    formatSingleEffect: x => format(x - 1, 3, 3),\n    combine: GlyphCombiner.addExponents\n  },\n  effarigachievement: {\n    id: \"effarigachievement\",\n    bitmaskIndex: 23,\n    isGenerated: true,\n    glyphTypes: [\"effarig\"],\n    singleDesc: \"Achievement multiplier power +{value}\",\n    totalDesc: \"Achievement multiplier ^{value}\",\n    genericDesc: \"Achievement multiplier ^x\",\n    shortDesc: \"Achievement mult. power +{value}\",\n    effect: (level, strength) => 1 + Math.pow(level, 0.4) * Math.pow(strength, 0.6) / 60 + GlyphAlteration.sacrificeBoost(\"effarig\") / 10,\n    formatEffect: x => format(x, 3, 3),\n    formatSingleEffect: x => format(x - 1, 3, 3),\n    combine: GlyphCombiner.addExponents,\n    alteredColor: () => GlyphAlteration.getBoostColor(\"effarig\"),\n    alterationType: ALTERATION_TYPE.BOOST\n  },\n  effarigforgotten: {\n    id: \"effarigforgotten\",\n    bitmaskIndex: 24,\n    isGenerated: true,\n    glyphTypes: [\"effarig\"],\n    singleDesc: () => GlyphAlteration.isAdded(\"effarig\") ? `\"Buy ${formatInt(10)}\" multiplier ^{value} [and\\nDimension Boost multiplier ^]{value2}` : `Bonus from buying ${formatInt(10)} Dimensions ^{value}`,\n    totalDesc: () => GlyphAlteration.isAdded(\"effarig\") ? `Multiplier from \"Buy ${formatInt(10)}\" ^{value} and Dimension Boost multiplier ^{value2}` : `Multiplier from \"Buy ${formatInt(10)}\" ^{value}`,\n    genericDesc: () => GlyphAlteration.isAdded(\"effarig\") ? `\"Buy ${formatInt(10)}\" and Dimension Boost multipliers ^x` : `\"Buy ${formatInt(10)}\" multiplier ^x`,\n    shortDesc: () => GlyphAlteration.isAdded(\"effarig\") ? `Buy ${formatInt(10)} mult. ^{value}, Dimboost mult. ^{value2}` : `Buy ${formatInt(10)} mult. ^{value}`,\n    effect: (level, strength) => 1 + 2 * Math.pow(level, 0.25) * Math.pow(strength, 0.4),\n    formatEffect: x => format(x, 2, 2),\n    combine: GlyphCombiner.multiply,\n    conversion: x => Math.pow(x, 0.4),\n    formatSecondaryEffect: x => format(x, 2, 2),\n    alteredColor: () => GlyphAlteration.getAdditionColor(\"effarig\"),\n    alterationType: ALTERATION_TYPE.ADDITION\n  },\n  effarigdimensions: {\n    id: \"effarigdimensions\",\n    bitmaskIndex: 25,\n    isGenerated: true,\n    glyphTypes: [\"effarig\"],\n    singleDesc: \"All Dimension power +{value}\",\n    totalDesc: \"All Dimension multipliers ^{value}\",\n    genericDesc: \"All Dimension multipliers ^x\",\n    shortDesc: \"All Dimension power +{value}\",\n    effect: (level, strength) => 1 + Math.pow(level, 0.25) * Math.pow(strength, 0.4) / 500,\n    formatEffect: x => format(x, 3, 3),\n    formatSingleEffect: x => format(x - 1, 3, 3),\n    combine: GlyphCombiner.addExponents\n  },\n  effarigantimatter: {\n    id: \"effarigantimatter\",\n    bitmaskIndex: 26,\n    isGenerated: true,\n    glyphTypes: [\"effarig\"],\n    singleDesc: () => `Antimatter production:\\n${formatInt(10)}^x ➜ ${formatInt(10)}^(x^{value})`,\n    genericDesc: \"Antimatter production exponent power\",\n    shortDesc: \"AM production exponent ^{value}\",\n    effect: (level, strength) => 1 + Math.pow(level, 0.25) * Math.pow(strength, 0.4) / 5000,\n    formatEffect: x => format(x, 4, 4),\n    combine: GlyphCombiner.multiply\n  },\n  timeshardpow: {\n    id: \"timeshardpow\",\n    bitmaskIndex: 27,\n    isGenerated: true,\n    // This gets explicitly added to time glyphs elsewhere (once unlocked)\n    glyphTypes: [],\n    singleDesc: \"Time Shard power +{value}\",\n    totalDesc: \"Time Shard gain ^{value}\",\n    genericDesc: \"Time Shards ^x\",\n    shortDesc: \"Time Shard power +{value}\",\n    effect: (level, strength) => 1 + strength / 3.5 * Math.pow(level, 0.35) / 400,\n    formatEffect: x => format(x, 3, 3),\n    formatSingleEffect: x => format(x - 1, 3, 3),\n    combine: GlyphCombiner.addExponents,\n    enabledInDoomed: true\n  },\n  cursedgalaxies: {\n    id: \"cursedgalaxies\",\n    bitmaskIndex: 0,\n    isGenerated: false,\n    glyphTypes: [\"cursed\"],\n    singleDesc: `All Galaxies are {value} weaker`,\n    totalDesc: \"All Galaxy strength -{value}\",\n    shortDesc: \"Galaxy Strength -{value}\",\n    // Multiplies by 0.768 per glyph\n    effect: level => Math.pow(level, -0.03),\n    formatEffect: x => formatPercents(1 - x, 2),\n    combine: GlyphCombiner.multiply\n  },\n  curseddimensions: {\n    id: \"curseddimensions\",\n    bitmaskIndex: 1,\n    isGenerated: false,\n    glyphTypes: [\"cursed\"],\n    singleDesc: \"All Dimension multipliers ^{value}\",\n    shortDesc: \"All Dimensions ^{value}\",\n    // Multiplies by 0.734 per glyph\n    effect: level => Math.pow(level, -0.035),\n    formatEffect: x => format(x, 3, 3),\n    combine: GlyphCombiner.multiply\n  },\n  cursedtickspeed: {\n    id: \"cursedtickspeed\",\n    bitmaskIndex: 2,\n    isGenerated: false,\n    glyphTypes: [\"cursed\"],\n    singleDesc: \"The threshold for Tickspeed Upgrades from Time Dimensions is multiplied by ×{value}\",\n    totalDesc: \"The threshold for Tickspeed Upgrades from Time Dimensions is increased by ×{value}\",\n    shortDesc: \"TD Tickspeed threshold ×{value}\",\n    // Additive 3.82 per glyph\n    effect: level => Math.clampMin(Math.log10(level), 1),\n    formatEffect: x => format(x, 3, 3),\n    combine: GlyphCombiner.add\n  },\n  cursedEP: {\n    id: \"cursedEP\",\n    bitmaskIndex: 3,\n    isGenerated: false,\n    glyphTypes: [\"cursed\"],\n    singleDesc: \"Divide Eternity Point gain by {value}\",\n    totalDesc: \"Eternity Point gain / {value}\",\n    shortDesc: \"EP / {value}\",\n    // Divides e666.6 per glyph\n    effect: level => Decimal.pow10(-level / 10),\n    formatEffect: x => format(x.reciprocal()),\n    combine: GlyphCombiner.multiplyDecimal\n  },\n  realityglyphlevel: {\n    id: \"realityglyphlevel\",\n    bitmaskIndex: 4,\n    isGenerated: false,\n    glyphTypes: [\"reality\"],\n    singleDesc: \"Increase the effective level of equipped basic Glyphs by {value}\",\n    totalDesc: \"Equipped basic Glyph level +{value}\",\n    shortDesc: \"Basic Glyph Level +{value}\",\n    effect: level => Math.floor(Math.sqrt(level * 90)),\n    formatEffect: x => formatInt(x),\n    combine: GlyphCombiner.add\n  },\n  realitygalaxies: {\n    id: \"realitygalaxies\",\n    bitmaskIndex: 5,\n    isGenerated: false,\n    glyphTypes: [\"reality\"],\n    singleDesc: \"All Galaxies are {value} stronger\",\n    totalDesc: \"All Galaxy strength +{value}\",\n    shortDesc: \"Galaxy Strength +{value}\",\n    effect: level => 1 + Math.pow(level / 100000, 0.5),\n    formatEffect: x => formatPercents(x - 1, 2),\n    combine: GlyphCombiner.multiply\n  },\n  realityrow1pow: {\n    id: \"realityrow1pow\",\n    bitmaskIndex: 6,\n    isGenerated: false,\n    glyphTypes: [\"reality\"],\n    singleDesc: \"Multiplier from Reality Upgrade Amplifiers ^{value}\",\n    totalDesc: \"Reality Upgrade Amplifier multiplier ^{value}\",\n    shortDesc: \"Amplifier Multiplier ^{value}\",\n    effect: level => 1 + level / 125000,\n    formatEffect: x => format(x, 3, 3),\n    combine: GlyphCombiner.addExponents\n  },\n  realityDTglyph: {\n    id: \"realityDTglyph\",\n    bitmaskIndex: 7,\n    isGenerated: false,\n    glyphTypes: [\"reality\"],\n    singleDesc: () => `Dilated Time factor for Glyph level: \\n^${format(1.3, 1, 1)}\n      ➜ ^(${format(1.3, 1, 1)} + {value})`,\n    totalDesc: () => `Dilated Time factor for Glyph level: ^${format(1.3, 1, 1)}\n      ➜ ^(${format(1.3, 1, 1)} + {value})`,\n    genericDesc: \"Dilated Time factor for Glyph level\",\n    shortDesc: \"DT pow. for level +{value}\",\n    // You can only get this effect on level 25000 reality glyphs anyway, might as well make it look nice\n    effect: () => 0.1,\n    formatEffect: x => format(x, 2, 2),\n    combine: GlyphCombiner.add\n  },\n  companiondescription: {\n    id: \"companiondescription\",\n    bitmaskIndex: 8,\n    isGenerated: false,\n    glyphTypes: [\"companion\"],\n    singleDesc: \"It does nothing but sit there and cutely smile at you, whisper into your dreams politely, \" + \"and plot the demise of all who stand against you. This one-of-a-kind Glyph will never leave you.\",\n    totalDesc: \"+{value} happiness\",\n    shortDesc: \"Doesn't want to hurt you\",\n    effect: () => {\n      if (Enslaved.isRunning) return 0;\n      const cursedCount = Glyphs.active.countWhere(g => (g === null || g === void 0 ? void 0 : g.type) === \"cursed\");\n      if (cursedCount > 0) return Math.pow(0.2 + 0.2 * Math.random(), cursedCount);\n      return 0.4 + 0.6 * Math.random();\n    },\n    formatEffect: x => formatPercents(x, 2, 2),\n    combine: GlyphCombiner.add,\n    enabledInDoomed: true\n  },\n  companionEP: {\n    id: \"companionEP\",\n    bitmaskIndex: 9,\n    isGenerated: false,\n    glyphTypes: [\"companion\"],\n    singleDesc: \"Thanks for your dedication for the game! You reached {value} Eternity Points on your first Reality.\",\n    shortDesc: \"It loves you very, very much\",\n    totalDesc: () => Enslaved.isRunning || Glyphs.active.countWhere(g => (g === null || g === void 0 ? void 0 : g.type) === \"cursed\") ? \"Help me\" : \"Yay!\",\n    // The EP value for this is entirely encoded in rarity, but level needs to be present to\n    // make sure the proper parameter is being used. The actual glyph level shouldn't do anything.\n    // eslint-disable-next-line no-unused-vars\n    effect: (level, strength) => Decimal.pow10(1e6 * strengthToRarity(strength)),\n    formatEffect: x => formatPostBreak(x, 2),\n    combine: GlyphCombiner.multiplyDecimal,\n    enabledInDoomed: true\n  }\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/reality/glyph-effects.js"],"names":["DC","GlyphCombiner","Object","freeze","add","x","reduce","Number","sumReducer","multiply","prodReducer","addExponents","length","multiplyDecimal","Decimal","D1","glyphEffects","timepow","id","bitmaskIndex","isGenerated","glyphTypes","singleDesc","totalDesc","shortDesc","effect","level","strength","Math","pow","formatEffect","format","formatSingleEffect","combine","enabledInDoomed","timespeed","genericDesc","GlyphAlteration","isEmpowered","alteredColor","getEmpowermentColor","alterationType","ALTERATION_TYPE","EMPOWER","timeetermult","sacrificeBoost","getBoostColor","BOOST","timeEP","isAdded","conversion","log10","formatSecondaryEffect","getAdditionColor","ADDITION","dilationDT","D1_005","times","dilationgalaxyThreshold","effects","prod","value","capped","dilationTTgen","clampMin","dilationpow","replicationspeed","D1_007","replicationpow","replicationdtgain","E10000","formatSingleSecondaryEffect","replicationglyphlevel","sum","infinitypow","infinityrate","formatInt","infinityIP","softcap","Effarig","eternityCap","undefined","min","toNumber","infinityinfmult","D1_02","powerpow","powermult","D11111","formatPostBreak","powerdimboost","powerbuy10","effarigrm","effarigglyph","floor","effarigblackhole","effarigachievement","effarigforgotten","effarigdimensions","effarigantimatter","timeshardpow","cursedgalaxies","formatPercents","curseddimensions","cursedtickspeed","cursedEP","pow10","reciprocal","realityglyphlevel","sqrt","realitygalaxies","realityrow1pow","realityDTglyph","companiondescription","Enslaved","isRunning","cursedCount","Glyphs","active","countWhere","g","type","random","companionEP","strengthToRarity"],"mappings":"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","sourcesContent":["import { DC } from \"../../constants\";\r\n\r\nexport const GlyphCombiner = Object.freeze({\r\n  /**\r\n   * @param {number[]} x\r\n   * @returns {number}\r\n   */\r\n  add: x => x.reduce(Number.sumReducer, 0),\r\n  /**\r\n   * @param {number[]} x\r\n   * @returns {number}\r\n   */\r\n  multiply: x => x.reduce(Number.prodReducer, 1),\r\n  /**\r\n   * For exponents, the base value is 1, so when we add two exponents a and b we want to get a + b - 1,\r\n   * so that if a and b are both close to 1 so is their sum. In general, when we add a list x of exponents,\r\n   * we have to add 1 - x.length to the actual sum, so that if all the exponents are close to 1 the result\r\n   * is also close to 1 rather than close to x.length.\r\n   * @param {number[]} x\r\n   * @returns {number}\r\n   */\r\n  addExponents: x => x.reduce(Number.sumReducer, 1 - x.length),\r\n  /**\r\n   * @param {Decimal[]} x\r\n   * @returns {Decimal}\r\n   */\r\n  multiplyDecimal: x => x.reduce(Decimal.prodReducer, DC.D1)\r\n});\r\n\r\nexport const glyphEffects = {\r\n  timepow: {\r\n    id: \"timepow\",\r\n    bitmaskIndex: 0,\r\n    isGenerated: true,\r\n    glyphTypes: [\"time\"],\r\n    singleDesc: \"Time Dimension power +{value}\",\r\n    totalDesc: \"Time Dimension multipliers ^{value}\",\r\n    shortDesc: \"TD power +{value}\",\r\n    effect: (level, strength) => 1.01 + Math.pow(level, 0.32) * Math.pow(strength, 0.45) / 75,\r\n    formatEffect: x => format(x, 3, 3),\r\n    formatSingleEffect: x => format(x - 1, 3, 3),\r\n    combine: GlyphCombiner.addExponents,\r\n    enabledInDoomed: true,\r\n  },\r\n  timespeed: {\r\n    id: \"timespeed\",\r\n    bitmaskIndex: 1,\r\n    isGenerated: true,\r\n    glyphTypes: [\"time\"],\r\n    singleDesc: \"Multiply game speed by {value}\",\r\n    totalDesc: \"Game runs ×{value} faster\",\r\n    genericDesc: \"Game speed multiplier\",\r\n    shortDesc: \"Game speed ×{value}\",\r\n    effect: (level, strength) => (GlyphAlteration.isEmpowered(\"time\")\r\n      ? 1 + Math.pow(level, 0.35)\r\n      : 1 + Math.pow(level, 0.3) * Math.pow(strength, 0.65) / 20),\r\n    formatEffect: x => format(x, 3, 3),\r\n    combine: GlyphCombiner.multiply,\r\n    alteredColor: () => GlyphAlteration.getEmpowermentColor(\"time\"),\r\n    alterationType: ALTERATION_TYPE.EMPOWER,\r\n    enabledInDoomed: true,\r\n  },\r\n  timeetermult: {\r\n    id: \"timeetermult\",\r\n    bitmaskIndex: 2,\r\n    isGenerated: true,\r\n    glyphTypes: [\"time\"],\r\n    singleDesc: \"Multiply Eternity gain by {value}\",\r\n    totalDesc: \"Eternity gain ×{value}\",\r\n    genericDesc: \"Eternity gain multiplier\",\r\n    shortDesc: \"Eternities ×{value}\",\r\n    effect: (level, strength) => Math.pow((strength + 3) * level, 0.9) *\r\n      Math.pow(3, GlyphAlteration.sacrificeBoost(\"time\")),\r\n    formatEffect: x => format(x, 2, 2),\r\n    combine: GlyphCombiner.multiply,\r\n    alteredColor: () => GlyphAlteration.getBoostColor(\"time\"),\r\n    alterationType: ALTERATION_TYPE.BOOST\r\n  },\r\n  timeEP: {\r\n    id: \"timeEP\",\r\n    bitmaskIndex: 3,\r\n    isGenerated: true,\r\n    glyphTypes: [\"time\"],\r\n    singleDesc: () => (GlyphAlteration.isAdded(\"time\")\r\n      ? \"Eternity Point gain \\n×{value} [and ^]{value2}\"\r\n      : \"Multiply Eternity Point gain by {value}\"),\r\n    totalDesc: () => (GlyphAlteration.isAdded(\"time\")\r\n      ? \"Eternity Point gain ×{value} and ^{value2}\"\r\n      : \"Eternity Point gain ×{value}\"),\r\n    genericDesc: () => (GlyphAlteration.isAdded(\"time\")\r\n      ? \"Eternity Point gain multiplier and power\"\r\n      : \"Eternity Point gain multiplier\"),\r\n    shortDesc: () => (GlyphAlteration.isAdded(\"time\")\r\n      ? \"EP ×{value} and ^{value2}\"\r\n      : \"EP ×{value}\"),\r\n    effect: (level, strength) => Math.pow(level * strength, 3) * 100,\r\n    formatEffect: x => format(x, 2, 3),\r\n    combine: GlyphCombiner.multiply,\r\n    conversion: x => 1 + Math.log10(x) / 1000,\r\n    formatSecondaryEffect: x => format(x, 4, 4),\r\n    alteredColor: () => GlyphAlteration.getAdditionColor(\"time\"),\r\n    alterationType: ALTERATION_TYPE.ADDITION\r\n  },\r\n  dilationDT: {\r\n    id: \"dilationDT\",\r\n    bitmaskIndex: 4,\r\n    isGenerated: true,\r\n    glyphTypes: [\"dilation\"],\r\n    singleDesc: \"Multiply Dilated Time gain by {value}\",\r\n    totalDesc: \"Dilated Time gain ×{value}\",\r\n    shortDesc: \"DT ×{value}\",\r\n    effect: (level, strength) => (GlyphAlteration.isEmpowered(\"dilation\")\r\n      ? DC.D1_005.pow(level).times(15)\r\n      : Decimal.pow(level * strength, 1.5).times(2)),\r\n    formatEffect: x => format(x, 2, 1),\r\n    combine: GlyphCombiner.multiplyDecimal,\r\n    alteredColor: () => GlyphAlteration.getEmpowermentColor(\"dilation\"),\r\n    alterationType: ALTERATION_TYPE.EMPOWER\r\n  },\r\n  dilationgalaxyThreshold: {\r\n    id: \"dilationgalaxyThreshold\",\r\n    bitmaskIndex: 5,\r\n    isGenerated: true,\r\n    glyphTypes: [\"dilation\"],\r\n    singleDesc: \"Tachyon Galaxy threshold multiplier ×{value}\",\r\n    genericDesc: \"Tachyon Galaxy cost multiplier\",\r\n    shortDesc: \"TG threshold ×{value}\",\r\n    effect: (level, strength) => 1 - Math.pow(level, 0.17) * Math.pow(strength, 0.35) / 100 -\r\n      GlyphAlteration.sacrificeBoost(\"dilation\") / 50,\r\n    formatEffect: x => format(x, 3, 3),\r\n    alteredColor: () => GlyphAlteration.getBoostColor(\"dilation\"),\r\n    alterationType: ALTERATION_TYPE.BOOST,\r\n    combine: effects => {\r\n      const prod = effects.reduce(Number.prodReducer, 1);\r\n      return prod < 0.4\r\n        ? { value: 0.4 - Math.pow(0.4 - prod, 1.7), capped: true }\r\n        : { value: prod, capped: false };\r\n    },\r\n    enabledInDoomed: true,\r\n  },\r\n  dilationTTgen: {\r\n    // TTgen slowly generates TT, value amount is per second, displayed per hour\r\n    id: \"dilationTTgen\",\r\n    bitmaskIndex: 6,\r\n    isGenerated: true,\r\n    glyphTypes: [\"dilation\"],\r\n    singleDesc: () => (GlyphAlteration.isAdded(\"dilation\")\r\n      ? \"Generates {value} Time Theorems/hour \\n[and multiplies Time Theorem \\ngeneration by] {value2}\"\r\n      : \"Generates {value} Time Theorems per hour\"),\r\n    totalDesc: () => (GlyphAlteration.isAdded(\"dilation\")\r\n      ? \"Generating {value} Time Theorems/hour and Time Theorem generation ×{value2}\"\r\n      : \"Generating {value} Time Theorems per hour\"),\r\n    genericDesc: () => (GlyphAlteration.isAdded(\"dilation\")\r\n      ? \"Time Theorem generation and multiplier\"\r\n      : \"Time Theorem generation\"),\r\n    shortDesc: () => (GlyphAlteration.isAdded(\"dilation\")\r\n      ? \"{value} TT/hr and TTgen ×{value2}\"\r\n      : \"{value} TT/hr\"),\r\n    effect: (level, strength) => Math.pow(level * strength, 0.5) / 10000,\r\n    /** @type {function(number): string} */\r\n    formatEffect: x => format(3600 * x, 2, 2),\r\n    combine: GlyphCombiner.add,\r\n    conversion: x => Math.clampMin(Math.pow(10000 * x, 1.6), 1),\r\n    formatSecondaryEffect: x => format(x, 2, 2),\r\n    alteredColor: () => GlyphAlteration.getAdditionColor(\"dilation\"),\r\n    alterationType: ALTERATION_TYPE.ADDITION\r\n  },\r\n  dilationpow: {\r\n    id: \"dilationpow\",\r\n    bitmaskIndex: 7,\r\n    isGenerated: true,\r\n    glyphTypes: [\"dilation\"],\r\n    singleDesc: \"Antimatter Dimension power +{value} while Dilated\",\r\n    totalDesc: \"Antimatter Dimension multipliers ^{value} while Dilated\",\r\n    genericDesc: \"Antimatter Dimensions ^x while Dilated\",\r\n    shortDesc: \"Dilated AD power +{value}\",\r\n    effect: (level, strength) => 1.1 + Math.pow(level, 0.7) * Math.pow(strength, 0.7) / 25,\r\n    formatEffect: x => format(x, 2, 2),\r\n    formatSingleEffect: x => format(x - 1, 2, 2),\r\n    combine: GlyphCombiner.addExponents,\r\n    enabledInDoomed: true,\r\n  },\r\n  replicationspeed: {\r\n    id: \"replicationspeed\",\r\n    bitmaskIndex: 8,\r\n    isGenerated: true,\r\n    glyphTypes: [\"replication\"],\r\n    singleDesc: \"Multiply Replication speed by {value}\",\r\n    totalDesc: \"Replication speed ×{value}\",\r\n    genericDesc: \"Replication speed multiplier\",\r\n    shortDesc: \"Replication speed ×{value}\",\r\n    effect: (level, strength) => (GlyphAlteration.isEmpowered(\"replication\")\r\n      ? DC.D1_007.pow(level).times(10)\r\n      : Decimal.times(level, strength).times(3)),\r\n    formatEffect: x => format(x, 2, 1),\r\n    combine: GlyphCombiner.multiplyDecimal,\r\n    alteredColor: () => GlyphAlteration.getEmpowermentColor(\"replication\"),\r\n    alterationType: ALTERATION_TYPE.EMPOWER\r\n  },\r\n  replicationpow: {\r\n    id: \"replicationpow\",\r\n    bitmaskIndex: 9,\r\n    isGenerated: true,\r\n    glyphTypes: [\"replication\"],\r\n    singleDesc: \"Replicanti multiplier power +{value}\",\r\n    totalDesc: \"Replicanti multiplier ^{value}\",\r\n    shortDesc: \"Replicanti mult. power +{value}\",\r\n    effect: (level, strength) => 1.1 + Math.pow(level, 0.5) * strength / 25 +\r\n      GlyphAlteration.sacrificeBoost(\"replication\") * 3,\r\n    formatEffect: x => format(x, 2, 2),\r\n    formatSingleEffect: x => format(x - 1, 2, 2),\r\n    combine: GlyphCombiner.addExponents,\r\n    alteredColor: () => GlyphAlteration.getBoostColor(\"replication\"),\r\n    alterationType: ALTERATION_TYPE.BOOST,\r\n    enabledInDoomed: true,\r\n  },\r\n  replicationdtgain: {\r\n    id: \"replicationdtgain\",\r\n    bitmaskIndex: 10,\r\n    isGenerated: true,\r\n    glyphTypes: [\"replication\"],\r\n    singleDesc: () => (GlyphAlteration.isAdded(\"replication\")\r\n      ? `Multiply Dilated Time \\n[and Replicanti speed] by \\n+{value} per ${format(DC.E10000)} replicanti`\r\n      : `Multiply Dilated Time gain by \\n+{value} per ${format(DC.E10000)} replicanti`),\r\n    totalDesc: () => (GlyphAlteration.isAdded(\"replication\")\r\n      ? `Multiply Dilated Time and Replication speed by +{value} per ${format(DC.E10000)} replicanti`\r\n      : `Multiply Dilated Time gain by +{value} per ${format(DC.E10000)} replicanti`),\r\n    genericDesc: () => (GlyphAlteration.isAdded(\"replication\")\r\n      ? \"Dilated Time+Replicanti mult from replicanti\"\r\n      : \"Dilated Time gain multiplier from replicanti\"),\r\n    shortDesc: () => (GlyphAlteration.isAdded(\"replication\")\r\n      ? `×DT and repl. by +{value} per ${format(DC.E10000)} replicanti`\r\n      : `×DT by +{value} per ${format(DC.E10000)} replicanti`),\r\n    effect: (level, strength) => 0.0003 * Math.pow(level, 0.3) * Math.pow(strength, 0.65),\r\n    formatEffect: x => format(10000 * x, 2, 2),\r\n    formatSingleEffect: x => format(10000 * x, 2, 2),\r\n    // It's bad to stack this one additively (N glyphs acts as a DT mult of N) or multiplicatively (the raw number is\r\n    // less than 1), so instead we do a multiplicative stacking relative to the \"base\" effect of a level 1, 0% glyph.\r\n    // We also introduce a 3x mult per glyph after the first, so that stacking level 1, 0% glyphs still has an effect.\r\n    // This is still just a flat DT mult when stacking multiple glyphs, but at least it's bigger than 2 or 3.\r\n    combine: effects => ({\r\n      value: effects.length === 0 ? 0 : effects.reduce(Number.prodReducer, Math.pow(0.0001, 1 - effects.length)),\r\n      capped: false\r\n    }),\r\n    conversion: x => x,\r\n    formatSecondaryEffect: x => format(x, 2, 3),\r\n    formatSingleSecondaryEffect: x => format(x, 5, 5),\r\n    alteredColor: () => GlyphAlteration.getAdditionColor(\"replication\"),\r\n    alterationType: ALTERATION_TYPE.ADDITION,\r\n  },\r\n  replicationglyphlevel: {\r\n    id: \"replicationglyphlevel\",\r\n    bitmaskIndex: 11,\r\n    isGenerated: true,\r\n    glyphTypes: [\"replication\"],\r\n    singleDesc: () => `Replicanti factor for Glyph level:\\n ^${format(0.4, 1, 1)}\r\n      ➜ ^(${format(0.4, 1, 1)} + {value})`,\r\n    totalDesc: () => `Replicanti factor for Glyph level: ^${format(0.4, 1, 1)}\r\n      ➜ ^(${format(0.4, 1, 1)} + {value})`,\r\n    genericDesc: \"Replicanti factor for Glyph level\",\r\n    shortDesc: \"Replicanti pow. for level +{value}\",\r\n    effect: (level, strength) => Math.pow(Math.pow(level, 0.25) * Math.pow(strength, 0.4), 0.5) / 50,\r\n    formatEffect: x => format(x, 3, 3),\r\n    combine: effects => {\r\n      let sum = effects.reduce(Number.sumReducer, 0);\r\n      if (effects.length > 2) sum *= 6 / (effects.length + 4);\r\n      return sum > 0.1\r\n        ? { value: 0.1 + 0.2 * (sum - 0.1), capped: true }\r\n        : { value: sum, capped: effects.length > 2 };\r\n    },\r\n    enabledInDoomed: true,\r\n  },\r\n  infinitypow: {\r\n    id: \"infinitypow\",\r\n    bitmaskIndex: 12,\r\n    isGenerated: true,\r\n    glyphTypes: [\"infinity\"],\r\n    singleDesc: \"Infinity Dimension power +{value}\",\r\n    totalDesc: \"Infinity Dimension multipliers ^{value}\",\r\n    shortDesc: \"ID power +{value}\",\r\n    effect: (level, strength) => 1.007 + Math.pow(level, 0.21) * Math.pow(strength, 0.4) / 75 +\r\n      GlyphAlteration.sacrificeBoost(\"infinity\") / 50,\r\n    formatEffect: x => format(x, 3, 3),\r\n    formatSingleEffect: x => format(x - 1, 3, 3),\r\n    combine: GlyphCombiner.addExponents,\r\n    alteredColor: () => GlyphAlteration.getBoostColor(\"infinity\"),\r\n    alterationType: ALTERATION_TYPE.BOOST,\r\n    enabledInDoomed: true,\r\n  },\r\n  infinityrate: {\r\n    id: \"infinityrate\",\r\n    bitmaskIndex: 13,\r\n    isGenerated: true,\r\n    glyphTypes: [\"infinity\"],\r\n    singleDesc: () => `Infinity Power conversion rate: \\n^${formatInt(7)}\r\n      ➜ ^(${formatInt(7)} + {value})`,\r\n    totalDesc: () => `Infinity Power conversion rate: ^${formatInt(7)}\r\n      ➜ ^(${formatInt(7)} + {value})`,\r\n    genericDesc: \"Infinity Power conversion rate\",\r\n    shortDesc: \"Infinity Power conversion +{value}\",\r\n    effect: (level, strength) => Math.pow(level, 0.2) * Math.pow(strength, 0.4) * 0.04,\r\n    formatEffect: x => format(x, 2, 2),\r\n    combine: GlyphCombiner.add,\r\n    enabledInDoomed: true,\r\n  },\r\n  infinityIP: {\r\n    id: \"infinityIP\",\r\n    bitmaskIndex: 14,\r\n    isGenerated: true,\r\n    glyphTypes: [\"infinity\"],\r\n    singleDesc: () => (GlyphAlteration.isAdded(\"infinity\")\r\n      ? \"Infinity Point gain \\n×{value} [and ^]{value2}\"\r\n      : \"Multiply Infinity Point gain by {value}\"),\r\n    totalDesc: () => (GlyphAlteration.isAdded(\"infinity\")\r\n      ? \"Infinity Point gain ×{value} and ^{value2}\"\r\n      : \"Infinity Point gain ×{value}\"),\r\n    genericDesc: () => (GlyphAlteration.isAdded(\"infinity\")\r\n      ? \"Infinity Point gain multiplier and power\"\r\n      : \"Infinity Point gain multiplier\"),\r\n    shortDesc: () => (GlyphAlteration.isAdded(\"infinity\")\r\n      ? \"IP ×{value} and ^{value2}\"\r\n      : \"IP ×{value}\"),\r\n    effect: (level, strength) => Math.pow(level * (strength + 1), 6) * 10000,\r\n    formatEffect: x => format(x, 2, 3),\r\n    combine: GlyphCombiner.multiply,\r\n    // eslint-disable-next-line no-negated-condition\r\n    softcap: value => ((Effarig.eternityCap !== undefined) ? Math.min(value, Effarig.eternityCap.toNumber()) : value),\r\n    conversion: x => 1 + Math.log10(x) / 1800,\r\n    formatSecondaryEffect: x => format(x, 4, 4),\r\n    alteredColor: () => GlyphAlteration.getAdditionColor(\"infinity\"),\r\n    alterationType: ALTERATION_TYPE.ADDITION\r\n  },\r\n  infinityinfmult: {\r\n    id: \"infinityinfmult\",\r\n    bitmaskIndex: 15,\r\n    isGenerated: true,\r\n    glyphTypes: [\"infinity\"],\r\n    singleDesc: \"Multiply Infinity gain by {value}\",\r\n    totalDesc: \"Infinity gain ×{value}\",\r\n    genericDesc: \"Infinity gain multiplier\",\r\n    shortDesc: \"Infinities ×{value}\",\r\n    effect: (level, strength) => (GlyphAlteration.isEmpowered(\"infinity\")\r\n      ? DC.D1_02.pow(level)\r\n      : Decimal.pow(level * strength, 1.5).times(2)),\r\n    formatEffect: x => format(x, 2, 1),\r\n    combine: GlyphCombiner.multiplyDecimal,\r\n    alteredColor: () => GlyphAlteration.getEmpowermentColor(\"infinity\"),\r\n    alterationType: ALTERATION_TYPE.EMPOWER\r\n  },\r\n  powerpow: {\r\n    id: \"powerpow\",\r\n    bitmaskIndex: 16,\r\n    isGenerated: true,\r\n    glyphTypes: [\"power\"],\r\n    singleDesc: () => (GlyphAlteration.isAdded(\"power\")\r\n      ? \"Antimatter Dimension power +{value}\\n[and Antimatter Galaxy cost ×]{value2}\"\r\n      : \"Antimatter Dimension power +{value}\"),\r\n    totalDesc: () => (GlyphAlteration.isAdded(\"power\")\r\n      ? \"Antimatter Dimension multipliers ^{value} and Antimatter Galaxy cost ×{value2}\"\r\n      : \"Antimatter Dimension multipliers ^{value}\"),\r\n    genericDesc: () => (GlyphAlteration.isAdded(\"power\")\r\n      ? \"Antimatter Dimensions multipliers ^x and Antimatter Galaxy cost multiplier\"\r\n      : \"Antimatter Dimension multipliers ^x\"),\r\n    shortDesc: () => (GlyphAlteration.isAdded(\"power\")\r\n      ? \"AD power +{value} and AG cost ×{value2}\"\r\n      : \"AD power +{value}\"),\r\n    effect: (level, strength) => 1.015 + Math.pow(level, 0.2) * Math.pow(strength, 0.4) / 75,\r\n    formatEffect: x => format(x, 3, 3),\r\n    formatSingleEffect: x => format(x - 1, 3, 3),\r\n    combine: GlyphCombiner.addExponents,\r\n    conversion: x => 2 / (x + 1),\r\n    formatSecondaryEffect: x => format(x, 3, 3),\r\n    alteredColor: () => GlyphAlteration.getAdditionColor(\"power\"),\r\n    alterationType: ALTERATION_TYPE.ADDITION,\r\n    enabledInDoomed: true,\r\n  },\r\n  powermult: {\r\n    id: \"powermult\",\r\n    bitmaskIndex: 17,\r\n    isGenerated: true,\r\n    glyphTypes: [\"power\"],\r\n    singleDesc: \"Antimatter Dimension multipliers ×{value}\",\r\n    shortDesc: \"AD ×{value}\",\r\n    effect: (level, strength) => (GlyphAlteration.isEmpowered(\"power\")\r\n      ? DC.D11111.pow(level * 220)\r\n      : Decimal.pow(level * strength * 10, level * strength * 10)),\r\n    formatEffect: x => formatPostBreak(x, 2, 0),\r\n    combine: GlyphCombiner.multiplyDecimal,\r\n    alteredColor: () => GlyphAlteration.getEmpowermentColor(\"power\"),\r\n    alterationType: ALTERATION_TYPE.EMPOWER,\r\n    enabledInDoomed: true,\r\n  },\r\n  powerdimboost: {\r\n    id: \"powerdimboost\",\r\n    bitmaskIndex: 18,\r\n    isGenerated: true,\r\n    glyphTypes: [\"power\"],\r\n    singleDesc: \"Dimension Boost multiplier ×{value}\",\r\n    genericDesc: \"Dimension Boost multiplier\",\r\n    shortDesc: \"Dimboost mult. ×{value}\",\r\n    effect: (level, strength) => Math.pow(level * strength, 0.5) *\r\n      Math.pow(1 + GlyphAlteration.sacrificeBoost(\"power\"), 3),\r\n    formatEffect: x => format(x, 2, 2),\r\n    combine: GlyphCombiner.multiply,\r\n    alteredColor: () => GlyphAlteration.getBoostColor(\"power\"),\r\n    alterationType: ALTERATION_TYPE.BOOST,\r\n    enabledInDoomed: true,\r\n  },\r\n  powerbuy10: {\r\n    id: \"powerbuy10\",\r\n    bitmaskIndex: 19,\r\n    isGenerated: true,\r\n    glyphTypes: [\"power\"],\r\n    singleDesc: () => `Increase the bonus from buying ${formatInt(10)} Antimatter Dimensions by {value}`,\r\n    totalDesc: () => `Multiplier from \"Buy ${formatInt(10)}\" ×{value}`,\r\n    genericDesc: () => `\"Buy ${formatInt(10)}\" bonus increase`,\r\n    shortDesc: () => `AD \"Buy ${formatInt(10)}\" mult. ×{value}`,\r\n    effect: (level, strength) => 1 + level * strength / 12,\r\n    formatEffect: x => format(x, 2, 2),\r\n    combine: GlyphCombiner.addExponents,\r\n    enabledInDoomed: true,\r\n  },\r\n  effarigrm: {\r\n    id: \"effarigrm\",\r\n    bitmaskIndex: 20,\r\n    isGenerated: true,\r\n    glyphTypes: [\"effarig\"],\r\n    singleDesc: \"Reality Machine multiplier ×{value}\",\r\n    genericDesc: \"Reality Machine multiplier\",\r\n    shortDesc: \"RM ×{value}\",\r\n    effect: (level, strength) => (GlyphAlteration.isEmpowered(\"effarig\")\r\n      ? Math.pow(level, 1.5)\r\n      : Math.pow(level, 0.6) * strength),\r\n    formatEffect: x => format(x, 2, 2),\r\n    combine: GlyphCombiner.multiply,\r\n    alteredColor: () => GlyphAlteration.getEmpowermentColor(\"effarig\"),\r\n    alterationType: ALTERATION_TYPE.EMPOWER\r\n  },\r\n  effarigglyph: {\r\n    id: \"effarigglyph\",\r\n    bitmaskIndex: 21,\r\n    isGenerated: true,\r\n    glyphTypes: [\"effarig\"],\r\n    singleDesc: \"Glyph Instability starting level +{value}\",\r\n    genericDesc: \"Glyph Instability delay\",\r\n    shortDesc: \"Instability delay +{value}\",\r\n    effect: (level, strength) => Math.floor(10 * Math.pow(level * strength, 0.5)),\r\n    formatEffect: x => formatInt(x),\r\n    combine: GlyphCombiner.add,\r\n  },\r\n  effarigblackhole: {\r\n    id: \"effarigblackhole\",\r\n    bitmaskIndex: 22,\r\n    isGenerated: true,\r\n    glyphTypes: [\"effarig\"],\r\n    singleDesc: \"Game speed power +{value}\",\r\n    totalDesc: \"Game speed ^{value}\",\r\n    genericDesc: \"Game speed ^x\",\r\n    shortDesc: \"Game speed power +{value}\",\r\n    effect: (level, strength) => 1 + Math.pow(level, 0.25) * Math.pow(strength, 0.4) / 75,\r\n    formatEffect: x => format(x, 3, 3),\r\n    formatSingleEffect: x => format(x - 1, 3, 3),\r\n    combine: GlyphCombiner.addExponents,\r\n  },\r\n  effarigachievement: {\r\n    id: \"effarigachievement\",\r\n    bitmaskIndex: 23,\r\n    isGenerated: true,\r\n    glyphTypes: [\"effarig\"],\r\n    singleDesc: \"Achievement multiplier power +{value}\",\r\n    totalDesc: \"Achievement multiplier ^{value}\",\r\n    genericDesc: \"Achievement multiplier ^x\",\r\n    shortDesc: \"Achievement mult. power +{value}\",\r\n    effect: (level, strength) => 1 + Math.pow(level, 0.4) * Math.pow(strength, 0.6) / 60 +\r\n      GlyphAlteration.sacrificeBoost(\"effarig\") / 10,\r\n    formatEffect: x => format(x, 3, 3),\r\n    formatSingleEffect: x => format(x - 1, 3, 3),\r\n    combine: GlyphCombiner.addExponents,\r\n    alteredColor: () => GlyphAlteration.getBoostColor(\"effarig\"),\r\n    alterationType: ALTERATION_TYPE.BOOST\r\n  },\r\n  effarigforgotten: {\r\n    id: \"effarigforgotten\",\r\n    bitmaskIndex: 24,\r\n    isGenerated: true,\r\n    glyphTypes: [\"effarig\"],\r\n    singleDesc: () => (GlyphAlteration.isAdded(\"effarig\")\r\n      ? `\"Buy ${formatInt(10)}\" multiplier ^{value} [and\\nDimension Boost multiplier ^]{value2}`\r\n      : `Bonus from buying ${formatInt(10)} Dimensions ^{value}`),\r\n    totalDesc: () => (GlyphAlteration.isAdded(\"effarig\")\r\n      ? `Multiplier from \"Buy ${formatInt(10)}\" ^{value} and Dimension Boost multiplier ^{value2}`\r\n      : `Multiplier from \"Buy ${formatInt(10)}\" ^{value}`),\r\n    genericDesc: () => (GlyphAlteration.isAdded(\"effarig\")\r\n      ? `\"Buy ${formatInt(10)}\" and Dimension Boost multipliers ^x`\r\n      : `\"Buy ${formatInt(10)}\" multiplier ^x`),\r\n    shortDesc: () => (GlyphAlteration.isAdded(\"effarig\")\r\n      ? `Buy ${formatInt(10)} mult. ^{value}, Dimboost mult. ^{value2}`\r\n      : `Buy ${formatInt(10)} mult. ^{value}`),\r\n    effect: (level, strength) => 1 + 2 * Math.pow(level, 0.25) * Math.pow(strength, 0.4),\r\n    formatEffect: x => format(x, 2, 2),\r\n    combine: GlyphCombiner.multiply,\r\n    conversion: x => Math.pow(x, 0.4),\r\n    formatSecondaryEffect: x => format(x, 2, 2),\r\n    alteredColor: () => GlyphAlteration.getAdditionColor(\"effarig\"),\r\n    alterationType: ALTERATION_TYPE.ADDITION\r\n  },\r\n  effarigdimensions: {\r\n    id: \"effarigdimensions\",\r\n    bitmaskIndex: 25,\r\n    isGenerated: true,\r\n    glyphTypes: [\"effarig\"],\r\n    singleDesc: \"All Dimension power +{value}\",\r\n    totalDesc: \"All Dimension multipliers ^{value}\",\r\n    genericDesc: \"All Dimension multipliers ^x\",\r\n    shortDesc: \"All Dimension power +{value}\",\r\n    effect: (level, strength) => 1 + Math.pow(level, 0.25) * Math.pow(strength, 0.4) / 500,\r\n    formatEffect: x => format(x, 3, 3),\r\n    formatSingleEffect: x => format(x - 1, 3, 3),\r\n    combine: GlyphCombiner.addExponents,\r\n  },\r\n  effarigantimatter: {\r\n    id: \"effarigantimatter\",\r\n    bitmaskIndex: 26,\r\n    isGenerated: true,\r\n    glyphTypes: [\"effarig\"],\r\n    singleDesc: () => `Antimatter production:\\n${formatInt(10)}^x ➜ ${formatInt(10)}^(x^{value})`,\r\n    genericDesc: \"Antimatter production exponent power\",\r\n    shortDesc: \"AM production exponent ^{value}\",\r\n    effect: (level, strength) => 1 + Math.pow(level, 0.25) * Math.pow(strength, 0.4) / 5000,\r\n    formatEffect: x => format(x, 4, 4),\r\n    combine: GlyphCombiner.multiply,\r\n  },\r\n  timeshardpow: {\r\n    id: \"timeshardpow\",\r\n    bitmaskIndex: 27,\r\n    isGenerated: true,\r\n    // This gets explicitly added to time glyphs elsewhere (once unlocked)\r\n    glyphTypes: [],\r\n    singleDesc: \"Time Shard power +{value}\",\r\n    totalDesc: \"Time Shard gain ^{value}\",\r\n    genericDesc: \"Time Shards ^x\",\r\n    shortDesc: \"Time Shard power +{value}\",\r\n    effect: (level, strength) => 1 + (strength / 3.5) * Math.pow(level, 0.35) / 400,\r\n    formatEffect: x => format(x, 3, 3),\r\n    formatSingleEffect: x => format(x - 1, 3, 3),\r\n    combine: GlyphCombiner.addExponents,\r\n    enabledInDoomed: true,\r\n  },\r\n  cursedgalaxies: {\r\n    id: \"cursedgalaxies\",\r\n    bitmaskIndex: 0,\r\n    isGenerated: false,\r\n    glyphTypes: [\"cursed\"],\r\n    singleDesc: `All Galaxies are {value} weaker`,\r\n    totalDesc: \"All Galaxy strength -{value}\",\r\n    shortDesc: \"Galaxy Strength -{value}\",\r\n    // Multiplies by 0.768 per glyph\r\n    effect: level => Math.pow(level, -0.03),\r\n    formatEffect: x => formatPercents(1 - x, 2),\r\n    combine: GlyphCombiner.multiply,\r\n  },\r\n  curseddimensions: {\r\n    id: \"curseddimensions\",\r\n    bitmaskIndex: 1,\r\n    isGenerated: false,\r\n    glyphTypes: [\"cursed\"],\r\n    singleDesc: \"All Dimension multipliers ^{value}\",\r\n    shortDesc: \"All Dimensions ^{value}\",\r\n    // Multiplies by 0.734 per glyph\r\n    effect: level => Math.pow(level, -0.035),\r\n    formatEffect: x => format(x, 3, 3),\r\n    combine: GlyphCombiner.multiply,\r\n  },\r\n  cursedtickspeed: {\r\n    id: \"cursedtickspeed\",\r\n    bitmaskIndex: 2,\r\n    isGenerated: false,\r\n    glyphTypes: [\"cursed\"],\r\n    singleDesc: \"The threshold for Tickspeed Upgrades from Time Dimensions is multiplied by ×{value}\",\r\n    totalDesc: \"The threshold for Tickspeed Upgrades from Time Dimensions is increased by ×{value}\",\r\n    shortDesc: \"TD Tickspeed threshold ×{value}\",\r\n    // Additive 3.82 per glyph\r\n    effect: level => Math.clampMin(Math.log10(level), 1),\r\n    formatEffect: x => format(x, 3, 3),\r\n    combine: GlyphCombiner.add,\r\n  },\r\n  cursedEP: {\r\n    id: \"cursedEP\",\r\n    bitmaskIndex: 3,\r\n    isGenerated: false,\r\n    glyphTypes: [\"cursed\"],\r\n    singleDesc: \"Divide Eternity Point gain by {value}\",\r\n    totalDesc: \"Eternity Point gain / {value}\",\r\n    shortDesc: \"EP / {value}\",\r\n    // Divides e666.6 per glyph\r\n    effect: level => Decimal.pow10(-level / 10),\r\n    formatEffect: x => format(x.reciprocal()),\r\n    combine: GlyphCombiner.multiplyDecimal,\r\n  },\r\n  realityglyphlevel: {\r\n    id: \"realityglyphlevel\",\r\n    bitmaskIndex: 4,\r\n    isGenerated: false,\r\n    glyphTypes: [\"reality\"],\r\n    singleDesc: \"Increase the effective level of equipped basic Glyphs by {value}\",\r\n    totalDesc: \"Equipped basic Glyph level +{value}\",\r\n    shortDesc: \"Basic Glyph Level +{value}\",\r\n    effect: level => Math.floor(Math.sqrt(level * 90)),\r\n    formatEffect: x => formatInt(x),\r\n    combine: GlyphCombiner.add,\r\n  },\r\n  realitygalaxies: {\r\n    id: \"realitygalaxies\",\r\n    bitmaskIndex: 5,\r\n    isGenerated: false,\r\n    glyphTypes: [\"reality\"],\r\n    singleDesc: \"All Galaxies are {value} stronger\",\r\n    totalDesc: \"All Galaxy strength +{value}\",\r\n    shortDesc: \"Galaxy Strength +{value}\",\r\n    effect: level => 1 + Math.pow(level / 100000, 0.5),\r\n    formatEffect: x => formatPercents(x - 1, 2),\r\n    combine: GlyphCombiner.multiply,\r\n  },\r\n  realityrow1pow: {\r\n    id: \"realityrow1pow\",\r\n    bitmaskIndex: 6,\r\n    isGenerated: false,\r\n    glyphTypes: [\"reality\"],\r\n    singleDesc: \"Multiplier from Reality Upgrade Amplifiers ^{value}\",\r\n    totalDesc: \"Reality Upgrade Amplifier multiplier ^{value}\",\r\n    shortDesc: \"Amplifier Multiplier ^{value}\",\r\n    effect: level => 1 + level / 125000,\r\n    formatEffect: x => format(x, 3, 3),\r\n    combine: GlyphCombiner.addExponents,\r\n  },\r\n  realityDTglyph: {\r\n    id: \"realityDTglyph\",\r\n    bitmaskIndex: 7,\r\n    isGenerated: false,\r\n    glyphTypes: [\"reality\"],\r\n    singleDesc: () => `Dilated Time factor for Glyph level: \\n^${format(1.3, 1, 1)}\r\n      ➜ ^(${format(1.3, 1, 1)} + {value})`,\r\n    totalDesc: () => `Dilated Time factor for Glyph level: ^${format(1.3, 1, 1)}\r\n      ➜ ^(${format(1.3, 1, 1)} + {value})`,\r\n    genericDesc: \"Dilated Time factor for Glyph level\",\r\n    shortDesc: \"DT pow. for level +{value}\",\r\n    // You can only get this effect on level 25000 reality glyphs anyway, might as well make it look nice\r\n    effect: () => 0.1,\r\n    formatEffect: x => format(x, 2, 2),\r\n    combine: GlyphCombiner.add,\r\n  },\r\n  companiondescription: {\r\n    id: \"companiondescription\",\r\n    bitmaskIndex: 8,\r\n    isGenerated: false,\r\n    glyphTypes: [\"companion\"],\r\n    singleDesc: \"It does nothing but sit there and cutely smile at you, whisper into your dreams politely, \" +\r\n      \"and plot the demise of all who stand against you. This one-of-a-kind Glyph will never leave you.\",\r\n    totalDesc: \"+{value} happiness\",\r\n    shortDesc: \"Doesn't want to hurt you\",\r\n    effect: () => {\r\n      if (Enslaved.isRunning) return 0;\r\n      const cursedCount = Glyphs.active.countWhere(g => g?.type === \"cursed\");\r\n      if (cursedCount > 0) return Math.pow(0.2 + 0.2 * Math.random(), cursedCount);\r\n      return 0.4 + 0.6 * Math.random();\r\n    },\r\n    formatEffect: x => formatPercents(x, 2, 2),\r\n    combine: GlyphCombiner.add,\r\n    enabledInDoomed: true,\r\n  },\r\n  companionEP: {\r\n    id: \"companionEP\",\r\n    bitmaskIndex: 9,\r\n    isGenerated: false,\r\n    glyphTypes: [\"companion\"],\r\n    singleDesc: \"Thanks for your dedication for the game! You reached {value} Eternity Points on your first Reality.\",\r\n    shortDesc: \"It loves you very, very much\",\r\n    totalDesc: () => ((Enslaved.isRunning || Glyphs.active.countWhere(g => g?.type === \"cursed\")) ? \"Help me\" : \"Yay!\"),\r\n    // The EP value for this is entirely encoded in rarity, but level needs to be present to\r\n    // make sure the proper parameter is being used. The actual glyph level shouldn't do anything.\r\n    // eslint-disable-next-line no-unused-vars\r\n    effect: (level, strength) => Decimal.pow10(1e6 * strengthToRarity(strength)),\r\n    formatEffect: x => formatPostBreak(x, 2),\r\n    combine: GlyphCombiner.multiplyDecimal,\r\n    enabledInDoomed: true,\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}