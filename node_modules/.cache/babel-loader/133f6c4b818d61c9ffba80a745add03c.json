{"ast":null,"code":"import { DC } from \"../../constants\";\nimport { PlayerProgress } from \"../../player-progress\";\nimport { MultiplierTabIcons } from \"./icons\"; // See index.js for documentation\n\nexport const EP = {\n  total: {\n    name: \"Total EP Gained on Eternity\",\n    displayOverride: () => Player.canEternity ? format(gainedEternityPoints(), 2, 2) : \"Cannot Eternity\",\n    // This effectively hides everything if the player can't actually gain any\n    multValue: () => Player.canEternity ? gainedEternityPoints() : 1,\n    isActive: () => PlayerProgress.eternityUnlocked() || Player.canEternity,\n    dilationEffect: () => Laitela.isRunning ? 0.75 * Effects.product(DilationUpgrade.dilationPenalty) : 1,\n    isDilated: true,\n    overlay: [\"Δ\", \"<i class='fa-solid fa-layer-group' />\"]\n  },\n  base: {\n    name: \"Base Eternity Points\",\n    isBase: true,\n    fakeValue: DC.D5,\n    multValue: () => DC.D5.pow(player.records.thisEternity.maxIP.plus(gainedInfinityPoints()).log10() / (308 - PelleRifts.recursion.effectValue.toNumber()) - 0.7),\n    isActive: () => PlayerProgress.eternityUnlocked(),\n    icon: MultiplierTabIcons.CONVERT_FROM(\"IP\")\n  },\n  IP: {\n    name: \"Eternity Points from Infinity Points\",\n    displayOverride: () => `${format(player.records.thisEternity.maxIP.plus(gainedInfinityPoints()), 2, 2)} IP`,\n    // Just needs to match the value in base and be larger than 1\n    multValue: DC.D5,\n    isActive: () => PlayerProgress.eternityUnlocked(),\n    icon: MultiplierTabIcons.SPECIFIC_GLYPH(\"infinity\")\n  },\n  divisor: {\n    name: \"Pelle - EP Formula Improvement\",\n    displayOverride: () => {\n      const div = 308 - PelleRifts.recursion.effectValue.toNumber();\n      return `log(IP)/${formatInt(308)} ➜ log(IP)/${format(div, 2, 2)}`;\n    },\n    powValue: () => 308 / (308 - PelleRifts.recursion.effectValue.toNumber()),\n    isActive: () => PelleRifts.recursion.canBeApplied,\n    icon: MultiplierTabIcons.DIVISOR(\"EP\")\n  },\n  eternityUpgrade: {\n    name: () => `Eternity Upgrade - Repeatable ${formatX(5)} EP`,\n    multValue: () => EternityUpgrade.epMult.effectOrDefault(1),\n    isActive: () => PlayerProgress.eternityUnlocked() && !Pelle.isDoomed,\n    icon: MultiplierTabIcons.UPGRADE(\"eternity\")\n  },\n  timeStudy: {\n    name: \"Time Studies\",\n    multValue: () => DC.D1.timesEffectsOf(TimeStudy(61), TimeStudy(121), TimeStudy(122), TimeStudy(123)),\n    isActive: () => PlayerProgress.eternityUnlocked() && !Pelle.isDoomed,\n    icon: MultiplierTabIcons.TIME_STUDY\n  },\n  glyph: {\n    name: \"Equipped Glyphs\",\n    multValue: () => DC.D1.timesEffectsOf(Pelle.isDoomed ? null : GlyphEffect.epMult).times(Pelle.specialGlyphEffect.time),\n    powValue: () => GlyphAlteration.isAdded(\"time\") ? getSecondaryGlyphEffect(\"timeEP\") : 1,\n    isActive: () => PlayerProgress.realityUnlocked(),\n    icon: MultiplierTabIcons.GENERIC_GLYPH\n  },\n  realityUpgrade: {\n    name: \"Reality Upgrade - The Knowing Existence\",\n    multValue: () => RealityUpgrade(12).effectOrDefault(1),\n    isActive: () => RealityUpgrade(12).canBeApplied && !Pelle.isDoomed,\n    icon: MultiplierTabIcons.UPGRADE(\"reality\")\n  },\n  pelle: {\n    name: \"Pelle Strike - Vacuum Rift\",\n    multValue: () => PelleRifts.vacuum.milestones[2].effectOrDefault(1),\n    isActive: () => PelleRifts.vacuum.milestones[2].canBeApplied,\n    icon: MultiplierTabIcons.PELLE\n  },\n  iap: {\n    name: \"Shop Tab Purchases\",\n    multValue: () => ShopPurchase.EPPurchases.currentMult,\n    isActive: () => ShopPurchaseData.totalSTD > 0,\n    icon: MultiplierTabIcons.IAP\n  },\n  nerfTeresa: {\n    name: \"Teresa's Reality\",\n    powValue: () => 0.55,\n    isActive: () => Teresa.isRunning,\n    icon: MultiplierTabIcons.GENERIC_TERESA\n  },\n  nerfV: {\n    name: \"V's Reality\",\n    powValue: () => 0.5,\n    isActive: () => V.isRunning,\n    icon: MultiplierTabIcons.GENERIC_V\n  }\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/multiplier-tab/eternity-points.js"],"names":["DC","PlayerProgress","MultiplierTabIcons","EP","total","name","displayOverride","Player","canEternity","format","gainedEternityPoints","multValue","isActive","eternityUnlocked","dilationEffect","Laitela","isRunning","Effects","product","DilationUpgrade","dilationPenalty","isDilated","overlay","base","isBase","fakeValue","D5","pow","player","records","thisEternity","maxIP","plus","gainedInfinityPoints","log10","PelleRifts","recursion","effectValue","toNumber","icon","CONVERT_FROM","IP","SPECIFIC_GLYPH","divisor","div","formatInt","powValue","canBeApplied","DIVISOR","eternityUpgrade","formatX","EternityUpgrade","epMult","effectOrDefault","Pelle","isDoomed","UPGRADE","timeStudy","D1","timesEffectsOf","TimeStudy","TIME_STUDY","glyph","GlyphEffect","times","specialGlyphEffect","time","GlyphAlteration","isAdded","getSecondaryGlyphEffect","realityUnlocked","GENERIC_GLYPH","realityUpgrade","RealityUpgrade","pelle","vacuum","milestones","PELLE","iap","ShopPurchase","EPPurchases","currentMult","ShopPurchaseData","totalSTD","IAP","nerfTeresa","Teresa","GENERIC_TERESA","nerfV","V","GENERIC_V"],"mappings":"AAAA,SAASA,EAAT,QAAmB,iBAAnB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AAEA,SAASC,kBAAT,QAAmC,SAAnC,C,CAEA;;AACA,OAAO,MAAMC,EAAE,GAAG;AAChBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAE,6BADD;AAELC,IAAAA,eAAe,EAAE,MAAOC,MAAM,CAACC,WAAP,GACpBC,MAAM,CAACC,oBAAoB,EAArB,EAAyB,CAAzB,EAA4B,CAA5B,CADc,GAEpB,iBAJC;AAKL;AACAC,IAAAA,SAAS,EAAE,MAAOJ,MAAM,CAACC,WAAP,GAAqBE,oBAAoB,EAAzC,GAA8C,CAN3D;AAOLE,IAAAA,QAAQ,EAAE,MAAMX,cAAc,CAACY,gBAAf,MAAqCN,MAAM,CAACC,WAPvD;AAQLM,IAAAA,cAAc,EAAE,MAAOC,OAAO,CAACC,SAAR,GAAoB,OAAOC,OAAO,CAACC,OAAR,CAAgBC,eAAe,CAACC,eAAhC,CAA3B,GAA8E,CARhG;AASLC,IAAAA,SAAS,EAAE,IATN;AAULC,IAAAA,OAAO,EAAE,CAAC,GAAD,EAAM,uCAAN;AAVJ,GADS;AAahBC,EAAAA,IAAI,EAAE;AACJlB,IAAAA,IAAI,EAAE,sBADF;AAEJmB,IAAAA,MAAM,EAAE,IAFJ;AAGJC,IAAAA,SAAS,EAAEzB,EAAE,CAAC0B,EAHV;AAIJf,IAAAA,SAAS,EAAE,MAAMX,EAAE,CAAC0B,EAAH,CAAMC,GAAN,CAAUC,MAAM,CAACC,OAAP,CAAeC,YAAf,CAA4BC,KAA5B,CAAkCC,IAAlC,CACzBC,oBAAoB,EADK,EACDC,KADC,MACU,MAAMC,UAAU,CAACC,SAAX,CAAqBC,WAArB,CAAiCC,QAAjC,EADhB,IAC+D,GADzE,CAJb;AAMJ1B,IAAAA,QAAQ,EAAE,MAAMX,cAAc,CAACY,gBAAf,EANZ;AAOJ0B,IAAAA,IAAI,EAAErC,kBAAkB,CAACsC,YAAnB,CAAgC,IAAhC;AAPF,GAbU;AAsBhBC,EAAAA,EAAE,EAAE;AACFpC,IAAAA,IAAI,EAAE,sCADJ;AAEFC,IAAAA,eAAe,EAAE,MAAO,GAAEG,MAAM,CAACmB,MAAM,CAACC,OAAP,CAAeC,YAAf,CAA4BC,KAA5B,CAAkCC,IAAlC,CAAuCC,oBAAoB,EAA3D,CAAD,EAAiE,CAAjE,EAAoE,CAApE,CAAuE,KAFrG;AAGF;AACAtB,IAAAA,SAAS,EAAEX,EAAE,CAAC0B,EAJZ;AAKFd,IAAAA,QAAQ,EAAE,MAAMX,cAAc,CAACY,gBAAf,EALd;AAMF0B,IAAAA,IAAI,EAAErC,kBAAkB,CAACwC,cAAnB,CAAkC,UAAlC;AANJ,GAtBY;AA8BhBC,EAAAA,OAAO,EAAE;AACPtC,IAAAA,IAAI,EAAE,gCADC;AAEPC,IAAAA,eAAe,EAAE,MAAM;AACrB,YAAMsC,GAAG,GAAG,MAAMT,UAAU,CAACC,SAAX,CAAqBC,WAArB,CAAiCC,QAAjC,EAAlB;AACA,aAAQ,WAAUO,SAAS,CAAC,GAAD,CAAM,cAAapC,MAAM,CAACmC,GAAD,EAAM,CAAN,EAAS,CAAT,CAAY,EAAhE;AACD,KALM;AAMPE,IAAAA,QAAQ,EAAE,MAAM,OAAO,MAAMX,UAAU,CAACC,SAAX,CAAqBC,WAArB,CAAiCC,QAAjC,EAAb,CANT;AAOP1B,IAAAA,QAAQ,EAAE,MAAMuB,UAAU,CAACC,SAAX,CAAqBW,YAP9B;AAQPR,IAAAA,IAAI,EAAErC,kBAAkB,CAAC8C,OAAnB,CAA2B,IAA3B;AARC,GA9BO;AAwChBC,EAAAA,eAAe,EAAE;AACf5C,IAAAA,IAAI,EAAE,MAAO,iCAAgC6C,OAAO,CAAC,CAAD,CAAI,KADzC;AAEfvC,IAAAA,SAAS,EAAE,MAAMwC,eAAe,CAACC,MAAhB,CAAuBC,eAAvB,CAAuC,CAAvC,CAFF;AAGfzC,IAAAA,QAAQ,EAAE,MAAMX,cAAc,CAACY,gBAAf,MAAqC,CAACyC,KAAK,CAACC,QAH7C;AAIfhB,IAAAA,IAAI,EAAErC,kBAAkB,CAACsD,OAAnB,CAA2B,UAA3B;AAJS,GAxCD;AA8ChBC,EAAAA,SAAS,EAAE;AACTpD,IAAAA,IAAI,EAAE,cADG;AAETM,IAAAA,SAAS,EAAE,MAAMX,EAAE,CAAC0D,EAAH,CAAMC,cAAN,CACfC,SAAS,CAAC,EAAD,CADM,EAEfA,SAAS,CAAC,GAAD,CAFM,EAGfA,SAAS,CAAC,GAAD,CAHM,EAIfA,SAAS,CAAC,GAAD,CAJM,CAFR;AAQThD,IAAAA,QAAQ,EAAE,MAAMX,cAAc,CAACY,gBAAf,MAAqC,CAACyC,KAAK,CAACC,QARnD;AASThB,IAAAA,IAAI,EAAErC,kBAAkB,CAAC2D;AAThB,GA9CK;AAyDhBC,EAAAA,KAAK,EAAE;AACLzD,IAAAA,IAAI,EAAE,iBADD;AAELM,IAAAA,SAAS,EAAE,MAAMX,EAAE,CAAC0D,EAAH,CACdC,cADc,CACCL,KAAK,CAACC,QAAN,GAAiB,IAAjB,GAAwBQ,WAAW,CAACX,MADrC,EAEdY,KAFc,CAERV,KAAK,CAACW,kBAAN,CAAyBC,IAFjB,CAFZ;AAKLpB,IAAAA,QAAQ,EAAE,MAAOqB,eAAe,CAACC,OAAhB,CAAwB,MAAxB,IAAkCC,uBAAuB,CAAC,QAAD,CAAzD,GAAsE,CALlF;AAMLzD,IAAAA,QAAQ,EAAE,MAAMX,cAAc,CAACqE,eAAf,EANX;AAOL/B,IAAAA,IAAI,EAAErC,kBAAkB,CAACqE;AAPpB,GAzDS;AAkEhBC,EAAAA,cAAc,EAAE;AACdnE,IAAAA,IAAI,EAAE,yCADQ;AAEdM,IAAAA,SAAS,EAAE,MAAM8D,cAAc,CAAC,EAAD,CAAd,CAAmBpB,eAAnB,CAAmC,CAAnC,CAFH;AAGdzC,IAAAA,QAAQ,EAAE,MAAM6D,cAAc,CAAC,EAAD,CAAd,CAAmB1B,YAAnB,IAAmC,CAACO,KAAK,CAACC,QAH5C;AAIdhB,IAAAA,IAAI,EAAErC,kBAAkB,CAACsD,OAAnB,CAA2B,SAA3B;AAJQ,GAlEA;AAwEhBkB,EAAAA,KAAK,EAAE;AACLrE,IAAAA,IAAI,EAAE,4BADD;AAELM,IAAAA,SAAS,EAAE,MAAMwB,UAAU,CAACwC,MAAX,CAAkBC,UAAlB,CAA6B,CAA7B,EAAgCvB,eAAhC,CAAgD,CAAhD,CAFZ;AAGLzC,IAAAA,QAAQ,EAAE,MAAMuB,UAAU,CAACwC,MAAX,CAAkBC,UAAlB,CAA6B,CAA7B,EAAgC7B,YAH3C;AAILR,IAAAA,IAAI,EAAErC,kBAAkB,CAAC2E;AAJpB,GAxES;AA8EhBC,EAAAA,GAAG,EAAE;AACHzE,IAAAA,IAAI,EAAE,oBADH;AAEHM,IAAAA,SAAS,EAAE,MAAMoE,YAAY,CAACC,WAAb,CAAyBC,WAFvC;AAGHrE,IAAAA,QAAQ,EAAE,MAAMsE,gBAAgB,CAACC,QAAjB,GAA4B,CAHzC;AAIH5C,IAAAA,IAAI,EAAErC,kBAAkB,CAACkF;AAJtB,GA9EW;AAqFhBC,EAAAA,UAAU,EAAE;AACVhF,IAAAA,IAAI,EAAE,kBADI;AAEVyC,IAAAA,QAAQ,EAAE,MAAM,IAFN;AAGVlC,IAAAA,QAAQ,EAAE,MAAM0E,MAAM,CAACtE,SAHb;AAIVuB,IAAAA,IAAI,EAAErC,kBAAkB,CAACqF;AAJf,GArFI;AA2FhBC,EAAAA,KAAK,EAAE;AACLnF,IAAAA,IAAI,EAAE,aADD;AAELyC,IAAAA,QAAQ,EAAE,MAAM,GAFX;AAGLlC,IAAAA,QAAQ,EAAE,MAAM6E,CAAC,CAACzE,SAHb;AAILuB,IAAAA,IAAI,EAAErC,kBAAkB,CAACwF;AAJpB;AA3FS,CAAX","sourcesContent":["import { DC } from \"../../constants\";\r\nimport { PlayerProgress } from \"../../player-progress\";\r\n\r\nimport { MultiplierTabIcons } from \"./icons\";\r\n\r\n// See index.js for documentation\r\nexport const EP = {\r\n  total: {\r\n    name: \"Total EP Gained on Eternity\",\r\n    displayOverride: () => (Player.canEternity\r\n      ? format(gainedEternityPoints(), 2, 2)\r\n      : \"Cannot Eternity\"),\r\n    // This effectively hides everything if the player can't actually gain any\r\n    multValue: () => (Player.canEternity ? gainedEternityPoints() : 1),\r\n    isActive: () => PlayerProgress.eternityUnlocked() || Player.canEternity,\r\n    dilationEffect: () => (Laitela.isRunning ? 0.75 * Effects.product(DilationUpgrade.dilationPenalty) : 1),\r\n    isDilated: true,\r\n    overlay: [\"Δ\", \"<i class='fa-solid fa-layer-group' />\"],\r\n  },\r\n  base: {\r\n    name: \"Base Eternity Points\",\r\n    isBase: true,\r\n    fakeValue: DC.D5,\r\n    multValue: () => DC.D5.pow(player.records.thisEternity.maxIP.plus(\r\n      gainedInfinityPoints()).log10() / (308 - PelleRifts.recursion.effectValue.toNumber()) - 0.7),\r\n    isActive: () => PlayerProgress.eternityUnlocked(),\r\n    icon: MultiplierTabIcons.CONVERT_FROM(\"IP\"),\r\n  },\r\n  IP: {\r\n    name: \"Eternity Points from Infinity Points\",\r\n    displayOverride: () => `${format(player.records.thisEternity.maxIP.plus(gainedInfinityPoints()), 2, 2)} IP`,\r\n    // Just needs to match the value in base and be larger than 1\r\n    multValue: DC.D5,\r\n    isActive: () => PlayerProgress.eternityUnlocked(),\r\n    icon: MultiplierTabIcons.SPECIFIC_GLYPH(\"infinity\"),\r\n  },\r\n  divisor: {\r\n    name: \"Pelle - EP Formula Improvement\",\r\n    displayOverride: () => {\r\n      const div = 308 - PelleRifts.recursion.effectValue.toNumber();\r\n      return `log(IP)/${formatInt(308)} ➜ log(IP)/${format(div, 2, 2)}`;\r\n    },\r\n    powValue: () => 308 / (308 - PelleRifts.recursion.effectValue.toNumber()),\r\n    isActive: () => PelleRifts.recursion.canBeApplied,\r\n    icon: MultiplierTabIcons.DIVISOR(\"EP\"),\r\n  },\r\n  eternityUpgrade: {\r\n    name: () => `Eternity Upgrade - Repeatable ${formatX(5)} EP`,\r\n    multValue: () => EternityUpgrade.epMult.effectOrDefault(1),\r\n    isActive: () => PlayerProgress.eternityUnlocked() && !Pelle.isDoomed,\r\n    icon: MultiplierTabIcons.UPGRADE(\"eternity\"),\r\n  },\r\n  timeStudy: {\r\n    name: \"Time Studies\",\r\n    multValue: () => DC.D1.timesEffectsOf(\r\n      TimeStudy(61),\r\n      TimeStudy(121),\r\n      TimeStudy(122),\r\n      TimeStudy(123),\r\n    ),\r\n    isActive: () => PlayerProgress.eternityUnlocked() && !Pelle.isDoomed,\r\n    icon: MultiplierTabIcons.TIME_STUDY,\r\n  },\r\n  glyph: {\r\n    name: \"Equipped Glyphs\",\r\n    multValue: () => DC.D1\r\n      .timesEffectsOf(Pelle.isDoomed ? null : GlyphEffect.epMult)\r\n      .times(Pelle.specialGlyphEffect.time),\r\n    powValue: () => (GlyphAlteration.isAdded(\"time\") ? getSecondaryGlyphEffect(\"timeEP\") : 1),\r\n    isActive: () => PlayerProgress.realityUnlocked(),\r\n    icon: MultiplierTabIcons.GENERIC_GLYPH,\r\n  },\r\n  realityUpgrade: {\r\n    name: \"Reality Upgrade - The Knowing Existence\",\r\n    multValue: () => RealityUpgrade(12).effectOrDefault(1),\r\n    isActive: () => RealityUpgrade(12).canBeApplied && !Pelle.isDoomed,\r\n    icon: MultiplierTabIcons.UPGRADE(\"reality\"),\r\n  },\r\n  pelle: {\r\n    name: \"Pelle Strike - Vacuum Rift\",\r\n    multValue: () => PelleRifts.vacuum.milestones[2].effectOrDefault(1),\r\n    isActive: () => PelleRifts.vacuum.milestones[2].canBeApplied,\r\n    icon: MultiplierTabIcons.PELLE,\r\n  },\r\n  iap: {\r\n    name: \"Shop Tab Purchases\",\r\n    multValue: () => ShopPurchase.EPPurchases.currentMult,\r\n    isActive: () => ShopPurchaseData.totalSTD > 0,\r\n    icon: MultiplierTabIcons.IAP,\r\n  },\r\n\r\n  nerfTeresa: {\r\n    name: \"Teresa's Reality\",\r\n    powValue: () => 0.55,\r\n    isActive: () => Teresa.isRunning,\r\n    icon: MultiplierTabIcons.GENERIC_TERESA,\r\n  },\r\n  nerfV: {\r\n    name: \"V's Reality\",\r\n    powValue: () => 0.5,\r\n    isActive: () => V.isRunning,\r\n    icon: MultiplierTabIcons.GENERIC_V,\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}