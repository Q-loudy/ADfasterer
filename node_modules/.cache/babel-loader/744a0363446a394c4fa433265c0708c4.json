{"ast":null,"code":"import AutobuyerIntervalLabel from \"./AutobuyerIntervalLabel\"; // This component is used for autobuyer entries which take up an entire row and may (AD/tickspeed) or may not\n// (prestige) have an associated slow version unlockable pre-infinity\n\nexport default {\n  name: \"AutobuyerBox\",\n  components: {\n    AutobuyerIntervalLabel\n  },\n  props: {\n    autobuyer: {\n      type: Object,\n      required: true\n    },\n    name: {\n      type: String,\n      required: true\n    },\n    showInterval: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    isModal: {\n      type: Boolean,\n      required: false,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      isUnlocked: false,\n      isActive: false,\n      globalToggle: false,\n      canBeBought: false,\n      isUnlockable: false,\n      antimatterCost: new Decimal(),\n      isBought: false,\n      antimatter: new Decimal(),\n      currMode: 0,\n      nextValue: 0,\n      nextTime: 0\n    };\n  },\n\n  computed: {\n    autobuyerBuyBoxClass() {\n      return {\n        \"c-autobuyer-buy-box\": true,\n        \"o-primary-btn\": true,\n        \"o-primary-btn--enabled\": this.isUnlockable,\n        \"o-primary-btn--disabled\": !this.isUnlockable\n      };\n    },\n\n    autobuyerBoxRowClass() {\n      return {\n        \"c-autobuyer-box-row\": true,\n        \"c-autobuyer-box-row__modal\": this.isModal\n      };\n    },\n\n    autobuyerToggleClass() {\n      if (!this.globalToggle) {\n        return this.isActive ? \"fas fa-pause\" : \"fas fa-times\";\n      }\n\n      return this.isActive ? \"fas fa-check\" : \"fas fa-times\";\n    },\n\n    autobuyerStateClass() {\n      if (!this.globalToggle) {\n        return {\n          \"o-autobuyer-toggle-checkbox__label\": true,\n          \"o-autobuyer-toggle-checkbox__label-modal\": this.isModal,\n          \"o-autobuyer-toggle-checkbox__label--active-paused\": this.isActive,\n          \"o-autobuyer-toggle-checkbox__label--deactive-paused\": !this.isActive,\n          \"o-autobuyer-toggle-checkbox__label--disabled\": !this.globalToggle\n        };\n      }\n\n      return {\n        \"o-autobuyer-toggle-checkbox__label\": true,\n        \"o-autobuyer-toggle-checkbox__label-modal\": this.isModal,\n        \"o-autobuyer-toggle-checkbox__label--active\": this.isActive,\n        \"o-autobuyer-toggle-checkbox__label--disabled\": !this.globalToggle\n      };\n    },\n\n    showEternity() {\n      return PlayerProgress.eternityUnlocked() ? \"this Eternity\" : \"\";\n    },\n\n    isShowingStateInfo() {\n      // Prestiging for a static amount is zero in both AUTO_CRUNCH_MODE and AUTO_ETERNITY_MODE\n      return this.isActive && [\"Infinity\", \"Eternity\"].includes(this.autobuyer.name) && this.currMode !== 0;\n    },\n\n    extraInfo() {\n      // This logic takes advantage of AUTO_CRUNCH_MODE and AUTO_ETERNITY_MODE being identical\n      switch (this.currMode) {\n        case AUTO_ETERNITY_MODE.TIME:\n          return this.nextTime > 0 ? `Will trigger in ${TimeSpan.fromSeconds(this.nextTime).toStringShort()}` : \"Will trigger ASAP\";\n\n        case AUTO_ETERNITY_MODE.X_HIGHEST:\n        default:\n          return `Will trigger at ${format(this.nextValue, 2)} ${this.autobuyer.name === \"Infinity\" ? \"IP\" : \"EP\"}`;\n      }\n    }\n\n  },\n  watch: {\n    isActive(newValue) {\n      // eslint-disable-next-line vue/no-mutating-props\n      this.autobuyer.isActive = newValue;\n    }\n\n  },\n  methods: {\n    update() {\n      const autobuyer = this.autobuyer;\n      this.isUnlocked = autobuyer.isUnlocked;\n      this.isActive = autobuyer.isActive;\n      this.globalToggle = player.auto.autobuyersOn;\n      this.canBeBought = autobuyer.canBeBought;\n      this.isUnlockable = autobuyer.canUnlockSlowVersion;\n      this.antimatterCost = autobuyer.antimatterCost;\n      this.isBought = autobuyer.isBought;\n      this.antimatter.copyFrom(player.records.thisEternity.maxAM);\n      this.currMode = autobuyer.mode;\n\n      if (this.isShowingStateInfo) {\n        this.nextValue = new Decimal(autobuyer.highestPrevPrestige).times(autobuyer.xHighest);\n        this.nextTime = autobuyer.timeToNextTick;\n      }\n    },\n\n    toggle() {\n      this.isActive = !this.isActive;\n    },\n\n    purchase() {\n      this.autobuyer.purchase();\n      TabNotification.newAutobuyer.clearTrigger();\n      GameCache.cheapestAntimatterAutobuyer.invalidate();\n    }\n\n  }\n};","map":{"version":3,"sources":["AutobuyerBox.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport AutobuyerIntervalLabel from \"./AutobuyerIntervalLabel\";\r\n\r\n// This component is used for autobuyer entries which take up an entire row and may (AD/tickspeed) or may not\r\n// (prestige) have an associated slow version unlockable pre-infinity\r\nexport default {\r\n  name: \"AutobuyerBox\",\r\n  components: {\r\n    AutobuyerIntervalLabel\r\n  },\r\n  props: {\r\n    autobuyer: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    name: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    showInterval: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    },\r\n    isModal: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isUnlocked: false,\r\n      isActive: false,\r\n      globalToggle: false,\r\n      canBeBought: false,\r\n      isUnlockable: false,\r\n      antimatterCost: new Decimal(),\r\n      isBought: false,\r\n      antimatter: new Decimal(),\r\n      currMode: 0,\r\n      nextValue: 0,\r\n      nextTime: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    autobuyerBuyBoxClass() {\r\n      return {\r\n        \"c-autobuyer-buy-box\": true,\r\n        \"o-primary-btn\": true,\r\n        \"o-primary-btn--enabled\": this.isUnlockable,\r\n        \"o-primary-btn--disabled\": !this.isUnlockable\r\n      };\r\n    },\r\n    autobuyerBoxRowClass() {\r\n      return {\r\n        \"c-autobuyer-box-row\": true,\r\n        \"c-autobuyer-box-row__modal\": this.isModal\r\n      };\r\n    },\r\n    autobuyerToggleClass() {\r\n      if (!this.globalToggle) {\r\n        return this.isActive ? \"fas fa-pause\" : \"fas fa-times\";\r\n      }\r\n      return this.isActive ? \"fas fa-check\" : \"fas fa-times\";\r\n    },\r\n    autobuyerStateClass() {\r\n      if (!this.globalToggle) {\r\n        return {\r\n          \"o-autobuyer-toggle-checkbox__label\": true,\r\n          \"o-autobuyer-toggle-checkbox__label-modal\": this.isModal,\r\n          \"o-autobuyer-toggle-checkbox__label--active-paused\": this.isActive,\r\n          \"o-autobuyer-toggle-checkbox__label--deactive-paused\": !this.isActive,\r\n          \"o-autobuyer-toggle-checkbox__label--disabled\": !this.globalToggle\r\n        };\r\n      }\r\n      return {\r\n        \"o-autobuyer-toggle-checkbox__label\": true,\r\n        \"o-autobuyer-toggle-checkbox__label-modal\": this.isModal,\r\n        \"o-autobuyer-toggle-checkbox__label--active\": this.isActive,\r\n        \"o-autobuyer-toggle-checkbox__label--disabled\": !this.globalToggle\r\n      };\r\n    },\r\n    showEternity() {\r\n      return PlayerProgress.eternityUnlocked()\r\n        ? \"this Eternity\"\r\n        : \"\";\r\n    },\r\n    isShowingStateInfo() {\r\n      // Prestiging for a static amount is zero in both AUTO_CRUNCH_MODE and AUTO_ETERNITY_MODE\r\n      return this.isActive && [\"Infinity\", \"Eternity\"].includes(this.autobuyer.name) && this.currMode !== 0;\r\n    },\r\n    extraInfo() {\r\n      // This logic takes advantage of AUTO_CRUNCH_MODE and AUTO_ETERNITY_MODE being identical\r\n      switch (this.currMode) {\r\n        case AUTO_ETERNITY_MODE.TIME:\r\n          return this.nextTime > 0\r\n            ? `Will trigger in ${TimeSpan.fromSeconds(this.nextTime).toStringShort()}`\r\n            : \"Will trigger ASAP\";\r\n        case AUTO_ETERNITY_MODE.X_HIGHEST:\r\n        default:\r\n          return `Will trigger at ${format(this.nextValue, 2)} ${this.autobuyer.name === \"Infinity\" ? \"IP\" : \"EP\"}`;\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    isActive(newValue) {\r\n      // eslint-disable-next-line vue/no-mutating-props\r\n      this.autobuyer.isActive = newValue;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      const autobuyer = this.autobuyer;\r\n      this.isUnlocked = autobuyer.isUnlocked;\r\n      this.isActive = autobuyer.isActive;\r\n      this.globalToggle = player.auto.autobuyersOn;\r\n      this.canBeBought = autobuyer.canBeBought;\r\n      this.isUnlockable = autobuyer.canUnlockSlowVersion;\r\n      this.antimatterCost = autobuyer.antimatterCost;\r\n      this.isBought = autobuyer.isBought;\r\n      this.antimatter.copyFrom(player.records.thisEternity.maxAM);\r\n\r\n      this.currMode = autobuyer.mode;\r\n      if (this.isShowingStateInfo) {\r\n        this.nextValue = new Decimal(autobuyer.highestPrevPrestige).times(autobuyer.xHighest);\r\n        this.nextTime = autobuyer.timeToNextTick;\r\n      }\r\n    },\r\n    toggle() {\r\n      this.isActive = !this.isActive;\r\n    },\r\n    purchase() {\r\n      this.autobuyer.purchase();\r\n      TabNotification.newAutobuyer.clearTrigger();\r\n      GameCache.cheapestAntimatterAutobuyer.invalidate();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    v-if=\"isUnlocked || isBought\"\r\n    :class=\"autobuyerBoxRowClass\"\r\n  >\r\n    <div class=\"l-autobuyer-box__header\">\r\n      {{ name }}\r\n      <AutobuyerIntervalLabel\r\n        v-if=\"showInterval\"\r\n        :autobuyer=\"autobuyer\"\r\n      />\r\n      <div v-if=\"isShowingStateInfo\">\r\n        {{ extraInfo }}\r\n      </div>\r\n    </div>\r\n    <div class=\"c-autobuyer-box-row__intervalSlot\">\r\n      <slot name=\"intervalSlot\" />\r\n    </div>\r\n    <div class=\"c-autobuyer-box-row__toggleSlot\">\r\n      <slot name=\"toggleSlot\" />\r\n    </div>\r\n    <div class=\"c-autobuyer-box-row__checkboxSlot\">\r\n      <slot name=\"checkboxSlot\" />\r\n    </div>\r\n    <div class=\"c-autobuyer-box-row__optionSlot\">\r\n      <slot name=\"optionSlot\" />\r\n    </div>\r\n    <div\r\n      class=\"l-autobuyer-box__footer\"\r\n      @click=\"toggle\"\r\n    >\r\n      <label :class=\"autobuyerStateClass\">\r\n        <span :class=\"autobuyerToggleClass\" />\r\n      </label>\r\n      <input\r\n        :checked=\"isActive && globalToggle\"\r\n        :disabled=\"!globalToggle\"\r\n        :name=\"name\"\r\n        type=\"checkbox\"\r\n      >\r\n    </div>\r\n  </div>\r\n  <div\r\n    v-else-if=\"canBeBought\"\r\n    :class=\"autobuyerBuyBoxClass\"\r\n    @click=\"purchase\"\r\n  >\r\n    {{ name }}\r\n    <br>\r\n    Requirement: {{ format(antimatterCost) }} Total Antimatter {{ showEternity }}\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/autobuyers"},"metadata":{},"sourceType":"module"}