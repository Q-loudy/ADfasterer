{"ast":null,"code":"import { PlayFab } from \"@/steam/bindings/PlayFabClientApi\";\n/**\r\n * @type {PlayFabClientModule.IPlayFabClient}\r\n */\n\nconst clientApi = PlayFab.ClientApi;\nPlayFab.settings.titleId = \"59813\";\nexport function LoginWithSteam(ticket) {\n  return makePromise(clientApi.LoginWithSteam, {\n    SteamTicket: ticket,\n    CreateAccount: true\n  });\n}\nexport function UpdateUserTitleDisplayName(displayName) {\n  makeAuthorizedPromise(clientApi.UpdateUserTitleDisplayName, {\n    DisplayName: displayName\n  });\n}\nexport function GetUserData() {\n  return makeAuthorizedPromise(clientApi.GetUserData);\n}\nexport function UpdateUserData(data) {\n  return makeAuthorizedPromise(clientApi.UpdateUserData, {\n    Data: data\n  });\n}\nexport function GetUserInventory() {\n  return makeAuthorizedPromise(clientApi.GetUserInventory);\n}\nexport function PurchaseItem(id, price, currency) {\n  return makeAuthorizedPromise(clientApi.PurchaseItem, {\n    ItemId: id,\n    Price: price,\n    VirtualCurrency: currency\n  });\n}\nexport function StartPurchase(itemId, quantity, annotation) {\n  return makeAuthorizedPromise(clientApi.StartPurchase, {\n    Items: [{\n      ItemId: itemId,\n      Quantity: quantity,\n      Annotation: annotation\n    }]\n  });\n}\nexport function PayForPurchase(orderId, currency, providerName) {\n  return makeAuthorizedPromise(clientApi.PayForPurchase, {\n    OrderId: orderId,\n    Currency: currency,\n    ProviderName: providerName\n  });\n}\nexport function ConfirmPurchase(orderId) {\n  return makeAuthorizedPromise(clientApi.ConfirmPurchase, {\n    OrderId: orderId\n  });\n}\nexport function ConsumeItem(itemInstanceId, consumeCount) {\n  return makeAuthorizedPromise(clientApi.ConsumeItem, {\n    ItemInstanceId: itemInstanceId,\n    ConsumeCount: consumeCount\n  });\n}\nexport function AddUserVirtualCurrency(amount, virtualCurrency) {\n  return makeAuthorizedPromise(clientApi.AddUserVirtualCurrency, {\n    Amount: amount,\n    VirtualCurrency: virtualCurrency\n  });\n}\n/**\r\n * @template TRequest\r\n * @template TResponse\r\n * @param {(request: TRequest, callback: PlayFabModule.ApiCallback<TResponse>) => any} playFabFunction\r\n * @param {TRequest} [request]\r\n * @returns {Promise<TResponse>}\r\n */\n\nfunction makeAuthorizedPromise(playFabFunction, request) {\n  if (!clientApi.IsClientLoggedIn()) {\n    return Promise.reject(\"PlayFab Client is not logged in.\");\n  }\n\n  return makePromise(playFabFunction, request);\n}\n/**\r\n * So, apparently, PlayFab Web SDK is so bad, the promises they are\r\n * returning are not the actual promises for the api calls\r\n * (just take a look inside PlayFabClient.js). This wrapper\r\n * creates proper promises based on the callbacks.\r\n * @template TRequest\r\n * @template TResponse\r\n * @param {(request: TRequest, callback: PlayFabModule.ApiCallback<TResponse>) => any} playFabFunction\r\n * @param {TRequest} [request]\r\n * @returns {Promise<TResponse>}\r\n */\n\n\nfunction makePromise(playFabFunction, request) {\n  return new Promise((resolve, reject) => {\n    playFabFunction(request !== null && request !== void 0 ? request : {}, (data, error) => {\n      if (!error && data !== null && data !== void 0 && data.data) {\n        resolve(data.data);\n      } else {\n        reject(error !== null && error !== void 0 ? error : data);\n      }\n    });\n  });\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/steam/bindings/playfab.js"],"names":["PlayFab","clientApi","ClientApi","settings","titleId","LoginWithSteam","ticket","makePromise","SteamTicket","CreateAccount","UpdateUserTitleDisplayName","displayName","makeAuthorizedPromise","DisplayName","GetUserData","UpdateUserData","data","Data","GetUserInventory","PurchaseItem","id","price","currency","ItemId","Price","VirtualCurrency","StartPurchase","itemId","quantity","annotation","Items","Quantity","Annotation","PayForPurchase","orderId","providerName","OrderId","Currency","ProviderName","ConfirmPurchase","ConsumeItem","itemInstanceId","consumeCount","ItemInstanceId","ConsumeCount","AddUserVirtualCurrency","amount","virtualCurrency","Amount","playFabFunction","request","IsClientLoggedIn","Promise","reject","resolve","error"],"mappings":"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","sourcesContent":["import { PlayFab } from \"@/steam/bindings/PlayFabClientApi\";\r\n\r\n/**\r\n * @type {PlayFabClientModule.IPlayFabClient}\r\n */\r\nconst clientApi = PlayFab.ClientApi;\r\nPlayFab.settings.titleId = \"59813\";\r\n\r\nexport function LoginWithSteam(ticket) {\r\n  return makePromise(clientApi.LoginWithSteam, {\r\n    SteamTicket: ticket,\r\n    CreateAccount: true\r\n  });\r\n}\r\n\r\nexport function UpdateUserTitleDisplayName(displayName) {\r\n  makeAuthorizedPromise(clientApi.UpdateUserTitleDisplayName, {\r\n    DisplayName: displayName\r\n  });\r\n}\r\n\r\nexport function GetUserData() {\r\n  return makeAuthorizedPromise(clientApi.GetUserData);\r\n}\r\n\r\nexport function UpdateUserData(data) {\r\n  return makeAuthorizedPromise(clientApi.UpdateUserData, {\r\n    Data: data\r\n  });\r\n}\r\n\r\nexport function GetUserInventory() {\r\n  return makeAuthorizedPromise(clientApi.GetUserInventory);\r\n}\r\n\r\nexport function PurchaseItem(id, price, currency) {\r\n  return makeAuthorizedPromise(clientApi.PurchaseItem, {\r\n    ItemId: id,\r\n    Price: price,\r\n    VirtualCurrency: currency\r\n  });\r\n}\r\n\r\nexport function StartPurchase(itemId, quantity, annotation) {\r\n  return makeAuthorizedPromise(clientApi.StartPurchase, {\r\n    Items: [{\r\n      ItemId: itemId,\r\n      Quantity: quantity,\r\n      Annotation: annotation\r\n    }]\r\n  });\r\n}\r\n\r\nexport function PayForPurchase(orderId, currency, providerName) {\r\n  return makeAuthorizedPromise(clientApi.PayForPurchase, {\r\n    OrderId: orderId,\r\n    Currency: currency,\r\n    ProviderName: providerName\r\n  });\r\n}\r\n\r\nexport function ConfirmPurchase(orderId) {\r\n  return makeAuthorizedPromise(clientApi.ConfirmPurchase, {\r\n    OrderId: orderId\r\n  });\r\n}\r\n\r\nexport function ConsumeItem(itemInstanceId, consumeCount) {\r\n  return makeAuthorizedPromise(clientApi.ConsumeItem, {\r\n    ItemInstanceId: itemInstanceId,\r\n    ConsumeCount: consumeCount\r\n  });\r\n}\r\n\r\nexport function AddUserVirtualCurrency(amount, virtualCurrency) {\r\n  return makeAuthorizedPromise(clientApi.AddUserVirtualCurrency, {\r\n    Amount: amount,\r\n    VirtualCurrency: virtualCurrency\r\n  });\r\n}\r\n\r\n/**\r\n * @template TRequest\r\n * @template TResponse\r\n * @param {(request: TRequest, callback: PlayFabModule.ApiCallback<TResponse>) => any} playFabFunction\r\n * @param {TRequest} [request]\r\n * @returns {Promise<TResponse>}\r\n */\r\nfunction makeAuthorizedPromise(playFabFunction, request) {\r\n  if (!clientApi.IsClientLoggedIn()) {\r\n    return Promise.reject(\"PlayFab Client is not logged in.\");\r\n  }\r\n\r\n  return makePromise(playFabFunction, request);\r\n}\r\n\r\n/**\r\n * So, apparently, PlayFab Web SDK is so bad, the promises they are\r\n * returning are not the actual promises for the api calls\r\n * (just take a look inside PlayFabClient.js). This wrapper\r\n * creates proper promises based on the callbacks.\r\n * @template TRequest\r\n * @template TResponse\r\n * @param {(request: TRequest, callback: PlayFabModule.ApiCallback<TResponse>) => any} playFabFunction\r\n * @param {TRequest} [request]\r\n * @returns {Promise<TResponse>}\r\n */\r\nfunction makePromise(playFabFunction, request) {\r\n  return new Promise((resolve, reject) => {\r\n    playFabFunction(request ?? {}, (data, error) => {\r\n      if (!error && data?.data) {\r\n        resolve(data.data);\r\n      } else {\r\n        reject(error ?? data);\r\n      }\r\n    });\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}