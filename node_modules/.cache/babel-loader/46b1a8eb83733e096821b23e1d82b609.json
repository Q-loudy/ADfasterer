{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nexport default {\n  name: \"EternityButton\",\n\n  data() {\n    return {\n      isVisible: false,\n      type: EP_BUTTON_DISPLAY_TYPE.FIRST_TIME,\n      gainedEP: new Decimal(0),\n      currentEP: new Decimal(0),\n      currentEPRate: new Decimal(0),\n      peakEPRateVal: new Decimal(0),\n      peakEPRate: new Decimal(0),\n      currentTachyons: new Decimal(0),\n      gainedTachyons: new Decimal(0),\n      challengeCompletions: 0,\n      gainedCompletions: 0,\n      fullyCompleted: false,\n      failedRestriction: undefined,\n      hasMoreCompletions: false,\n      nextGoalAt: new Decimal(0),\n      canEternity: false,\n      eternityGoal: new Decimal(0),\n      hover: false,\n      headerTextColored: true,\n      creditsClosed: false,\n      showEPRate: false,\n      isDilation: false\n    };\n  },\n\n  computed: {\n    buttonClassObject() {\n      return {\n        \"o-eternity-button\": !this.isDilation,\n        \"o-eternity-button--dilation\": this.isDilation,\n        \"o-eternity-button--unavailable\": !this.canEternity,\n        \"o-pelle-disabled-pointer\": this.creditsClosed\n      };\n    },\n\n    // Show EP/min below this threshold, color the EP number above it (1e40 is roughly when TS181 is attainable)\n    rateThreshold: () => 1e40,\n\n    amountStyle() {\n      if (!this.headerTextColored || this.currentEP.lt(this.rateThreshold)) return {\n        \"transition-duration\": \"0s\"\n      };\n      if (this.hover) return {\n        color: \"black\",\n        \"transition-duration\": \"0.2s\"\n      }; // Dynamically generate red-text-green based on the CSS entry for text color, returning a raw 6-digit hex color\n      // code. stepRGB is an array specifying the three RGB codes, which are then interpolated between in order to\n      // generate the final color; only ratios between 0.9-1.1 give a color gradient\n\n      const textHexCode = getComputedStyle(document.body).getPropertyValue(\"--color-text\").split(\"#\")[1];\n      const stepRGB = [[255, 0, 0], [parseInt(textHexCode.substring(0, 2), 16), parseInt(textHexCode.substring(2, 4), 16), parseInt(textHexCode.substring(4), 16)], [0, 255, 0]];\n      const ratio = this.gainedEP.log10() / this.currentEP.log10();\n\n      const interFn = index => {\n        if (ratio < 0.9) return stepRGB[0][index];\n\n        if (ratio < 1) {\n          const r = 10 * (ratio - 0.9);\n          return Math.round(stepRGB[0][index] * (1 - r) + stepRGB[1][index] * r);\n        }\n\n        if (ratio < 1.1) {\n          const r = 10 * (ratio - 1);\n          return Math.round(stepRGB[1][index] * (1 - r) + stepRGB[2][index] * r);\n        }\n\n        return stepRGB[2][index];\n      };\n\n      const rgb = [interFn(0), interFn(1), interFn(2)];\n      return {\n        color: `rgb(${rgb.join(\",\")})`,\n        \"transition-duration\": \"0.2s\"\n      };\n    },\n\n    tachyonAmountStyle() {\n      // Hovering over the button makes all the text on the button black; this text inherits that\n      // without us needing to specify a color.\n      if (!this.headerTextColored || this.hover) return {\n        \"transition-duration\": \"0s\"\n      }; // Note that Infinity and 0 can show up here. We have a special case for\n      // this.currentTachyons being 0 because dividing a Decimal by 0 returns 0.\n\n      let ratio;\n\n      if (this.currentTachyons.eq(0)) {\n        // In this case, make it always red or green.\n        // (Is it possible to gain 0 tachyons? Probably somehow it is.)\n        ratio = this.gainedTachyons.eq(0) ? 0 : Infinity;\n      } else {\n        ratio = this.gainedTachyons.div(this.currentTachyons).toNumber();\n      }\n\n      const rgb = [Math.round(Math.clampMax(1 / ratio, 1) * 255), Math.round(Math.clampMax(ratio, 1) * 255), Math.round(Math.clampMax(ratio, 1 / ratio) * 255)];\n      return {\n        color: `rgb(${rgb.join(\",\")})`\n      };\n    }\n\n  },\n  methods: {\n    update() {\n      this.isVisible = Player.canEternity || EternityMilestone.autoUnlockID.isReached || InfinityDimension(8).isUnlocked;\n      this.isDilation = player.dilation.active;\n      if (!this.isVisible) return;\n      this.canEternity = Player.canEternity;\n      this.eternityGoal.copyFrom(Player.eternityGoal);\n      this.headerTextColored = player.options.headerTextColored;\n\n      if (!this.canEternity) {\n        this.type = EP_BUTTON_DISPLAY_TYPE.CANNOT_ETERNITY;\n        return;\n      }\n\n      if (!PlayerProgress.eternityUnlocked()) {\n        this.type = EP_BUTTON_DISPLAY_TYPE.FIRST_TIME;\n        return;\n      }\n\n      if (EternityChallenge.isRunning) {\n        if (!Perk.studyECBulk.isBought) {\n          this.type = EP_BUTTON_DISPLAY_TYPE.CHALLENGE;\n          return;\n        }\n\n        this.type = EP_BUTTON_DISPLAY_TYPE.CHALLENGE_RUPG;\n        this.updateChallengeWithRUPG();\n        return;\n      }\n\n      const gainedEP = gainedEternityPoints();\n      this.currentEP.copyFrom(Currency.eternityPoints);\n      this.gainedEP.copyFrom(gainedEP);\n      const hasNewContent = !PlayerProgress.realityUnlocked() && Currency.eternityPoints.exponent >= 4000 && !TimeStudy.reality.isBought;\n\n      if (this.isDilation) {\n        this.type = hasNewContent ? EP_BUTTON_DISPLAY_TYPE.DILATION_EXPLORE_NEW_CONTENT : EP_BUTTON_DISPLAY_TYPE.DILATION;\n        this.currentTachyons.copyFrom(Currency.tachyonParticles);\n        this.gainedTachyons.copyFrom(getTachyonGain(true));\n        return;\n      }\n\n      this.type = hasNewContent ? EP_BUTTON_DISPLAY_TYPE.NORMAL_EXPLORE_NEW_CONTENT : EP_BUTTON_DISPLAY_TYPE.NORMAL;\n      this.currentEPRate.copyFrom(gainedEP.dividedBy(TimeSpan.fromMilliseconds(player.records.thisEternity.realTime).totalMinutes));\n      this.peakEPRateVal.copyFrom(player.records.thisEternity.bestEPminVal);\n      this.peakEPRate.copyFrom(player.records.thisEternity.bestEPmin);\n      this.showEPRate = this.peakEPRate.lte(this.rateThreshold);\n      this.creditsClosed = GameEnd.creditsEverClosed;\n    },\n\n    updateChallengeWithRUPG() {\n      const ec = EternityChallenge.current;\n      this.fullyCompleted = ec.isFullyCompleted;\n      if (this.fullyCompleted) return;\n      const status = ec.gainedCompletionStatus;\n      this.gainedCompletions = status.gainedCompletions;\n      this.failedRestriction = status.failedRestriction;\n      this.hasMoreCompletions = status.hasMoreCompletions;\n      this.nextGoalAt.copyFrom(status.nextGoalAt);\n    }\n\n  }\n};\nconst EP_BUTTON_DISPLAY_TYPE = {\n  CANNOT_ETERNITY: -1,\n  FIRST_TIME: 0,\n  NORMAL: 1,\n  CHALLENGE: 2,\n  DILATION: 3,\n  NORMAL_EXPLORE_NEW_CONTENT: 4,\n  DILATION_EXPLORE_NEW_CONTENT: 5,\n  CHALLENGE_RUPG: 6\n};","map":{"version":3,"sources":["EternityButton.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nexport default {\r\n  name: \"EternityButton\",\r\n  data() {\r\n    return {\r\n      isVisible: false,\r\n      type: EP_BUTTON_DISPLAY_TYPE.FIRST_TIME,\r\n      gainedEP: new Decimal(0),\r\n      currentEP: new Decimal(0),\r\n      currentEPRate: new Decimal(0),\r\n      peakEPRateVal: new Decimal(0),\r\n      peakEPRate: new Decimal(0),\r\n      currentTachyons: new Decimal(0),\r\n      gainedTachyons: new Decimal(0),\r\n      challengeCompletions: 0,\r\n      gainedCompletions: 0,\r\n      fullyCompleted: false,\r\n      failedRestriction: undefined,\r\n      hasMoreCompletions: false,\r\n      nextGoalAt: new Decimal(0),\r\n      canEternity: false,\r\n      eternityGoal: new Decimal(0),\r\n      hover: false,\r\n      headerTextColored: true,\r\n      creditsClosed: false,\r\n      showEPRate: false,\r\n      isDilation: false,\r\n    };\r\n  },\r\n  computed: {\r\n    buttonClassObject() {\r\n      return {\r\n        \"o-eternity-button\": !this.isDilation,\r\n        \"o-eternity-button--dilation\": this.isDilation,\r\n        \"o-eternity-button--unavailable\": !this.canEternity,\r\n        \"o-pelle-disabled-pointer\": this.creditsClosed,\r\n      };\r\n    },\r\n    // Show EP/min below this threshold, color the EP number above it (1e40 is roughly when TS181 is attainable)\r\n    rateThreshold: () => 1e40,\r\n    amountStyle() {\r\n      if (!this.headerTextColored || this.currentEP.lt(this.rateThreshold)) return {\r\n        \"transition-duration\": \"0s\"\r\n      };\r\n      if (this.hover) return {\r\n        color: \"black\",\r\n        \"transition-duration\": \"0.2s\"\r\n      };\r\n\r\n      // Dynamically generate red-text-green based on the CSS entry for text color, returning a raw 6-digit hex color\r\n      // code. stepRGB is an array specifying the three RGB codes, which are then interpolated between in order to\r\n      // generate the final color; only ratios between 0.9-1.1 give a color gradient\r\n      const textHexCode = getComputedStyle(document.body).getPropertyValue(\"--color-text\").split(\"#\")[1];\r\n      const stepRGB = [\r\n        [255, 0, 0],\r\n        [\r\n          parseInt(textHexCode.substring(0, 2), 16),\r\n          parseInt(textHexCode.substring(2, 4), 16),\r\n          parseInt(textHexCode.substring(4), 16)\r\n        ],\r\n        [0, 255, 0]\r\n      ];\r\n      const ratio = this.gainedEP.log10() / this.currentEP.log10();\r\n      const interFn = index => {\r\n        if (ratio < 0.9) return stepRGB[0][index];\r\n        if (ratio < 1) {\r\n          const r = 10 * (ratio - 0.9);\r\n          return Math.round(stepRGB[0][index] * (1 - r) + stepRGB[1][index] * r);\r\n        }\r\n        if (ratio < 1.1) {\r\n          const r = 10 * (ratio - 1);\r\n          return Math.round(stepRGB[1][index] * (1 - r) + stepRGB[2][index] * r);\r\n        }\r\n        return stepRGB[2][index];\r\n      };\r\n      const rgb = [interFn(0), interFn(1), interFn(2)];\r\n      return {\r\n        color: `rgb(${rgb.join(\",\")})`,\r\n        \"transition-duration\": \"0.2s\"\r\n      };\r\n    },\r\n    tachyonAmountStyle() {\r\n      // Hovering over the button makes all the text on the button black; this text inherits that\r\n      // without us needing to specify a color.\r\n      if (!this.headerTextColored || this.hover) return {\r\n        \"transition-duration\": \"0s\"\r\n      };\r\n      // Note that Infinity and 0 can show up here. We have a special case for\r\n      // this.currentTachyons being 0 because dividing a Decimal by 0 returns 0.\r\n      let ratio;\r\n      if (this.currentTachyons.eq(0)) {\r\n        // In this case, make it always red or green.\r\n        // (Is it possible to gain 0 tachyons? Probably somehow it is.)\r\n        ratio = this.gainedTachyons.eq(0) ? 0 : Infinity;\r\n      } else {\r\n        ratio = this.gainedTachyons.div(this.currentTachyons).toNumber();\r\n      }\r\n\r\n      const rgb = [\r\n        Math.round(Math.clampMax(1 / ratio, 1) * 255),\r\n        Math.round(Math.clampMax(ratio, 1) * 255),\r\n        Math.round(Math.clampMax(ratio, 1 / ratio) * 255),\r\n      ];\r\n      return { color: `rgb(${rgb.join(\",\")})` };\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isVisible = Player.canEternity ||\r\n        EternityMilestone.autoUnlockID.isReached || InfinityDimension(8).isUnlocked;\r\n      this.isDilation = player.dilation.active;\r\n      if (!this.isVisible) return;\r\n      this.canEternity = Player.canEternity;\r\n      this.eternityGoal.copyFrom(Player.eternityGoal);\r\n      this.headerTextColored = player.options.headerTextColored;\r\n\r\n      if (!this.canEternity) {\r\n        this.type = EP_BUTTON_DISPLAY_TYPE.CANNOT_ETERNITY;\r\n        return;\r\n      }\r\n\r\n      if (!PlayerProgress.eternityUnlocked()) {\r\n        this.type = EP_BUTTON_DISPLAY_TYPE.FIRST_TIME;\r\n        return;\r\n      }\r\n\r\n      if (EternityChallenge.isRunning) {\r\n        if (!Perk.studyECBulk.isBought) {\r\n          this.type = EP_BUTTON_DISPLAY_TYPE.CHALLENGE;\r\n          return;\r\n        }\r\n        this.type = EP_BUTTON_DISPLAY_TYPE.CHALLENGE_RUPG;\r\n        this.updateChallengeWithRUPG();\r\n        return;\r\n      }\r\n\r\n      const gainedEP = gainedEternityPoints();\r\n      this.currentEP.copyFrom(Currency.eternityPoints);\r\n      this.gainedEP.copyFrom(gainedEP);\r\n      const hasNewContent = !PlayerProgress.realityUnlocked() &&\r\n        Currency.eternityPoints.exponent >= 4000 &&\r\n        !TimeStudy.reality.isBought;\r\n      if (this.isDilation) {\r\n        this.type = hasNewContent\r\n          ? EP_BUTTON_DISPLAY_TYPE.DILATION_EXPLORE_NEW_CONTENT\r\n          : EP_BUTTON_DISPLAY_TYPE.DILATION;\r\n        this.currentTachyons.copyFrom(Currency.tachyonParticles);\r\n        this.gainedTachyons.copyFrom(getTachyonGain(true));\r\n        return;\r\n      }\r\n\r\n      this.type = hasNewContent\r\n        ? EP_BUTTON_DISPLAY_TYPE.NORMAL_EXPLORE_NEW_CONTENT\r\n        : EP_BUTTON_DISPLAY_TYPE.NORMAL;\r\n      this.currentEPRate.copyFrom(gainedEP.dividedBy(\r\n        TimeSpan.fromMilliseconds(player.records.thisEternity.realTime).totalMinutes));\r\n      this.peakEPRateVal.copyFrom(player.records.thisEternity.bestEPminVal);\r\n      this.peakEPRate.copyFrom(player.records.thisEternity.bestEPmin);\r\n      this.showEPRate = this.peakEPRate.lte(this.rateThreshold);\r\n      this.creditsClosed = GameEnd.creditsEverClosed;\r\n    },\r\n    updateChallengeWithRUPG() {\r\n      const ec = EternityChallenge.current;\r\n      this.fullyCompleted = ec.isFullyCompleted;\r\n      if (this.fullyCompleted) return;\r\n      const status = ec.gainedCompletionStatus;\r\n      this.gainedCompletions = status.gainedCompletions;\r\n      this.failedRestriction = status.failedRestriction;\r\n      this.hasMoreCompletions = status.hasMoreCompletions;\r\n      this.nextGoalAt.copyFrom(status.nextGoalAt);\r\n    }\r\n  },\r\n};\r\n\r\nconst EP_BUTTON_DISPLAY_TYPE = {\r\n  CANNOT_ETERNITY: -1,\r\n  FIRST_TIME: 0,\r\n  NORMAL: 1,\r\n  CHALLENGE: 2,\r\n  DILATION: 3,\r\n  NORMAL_EXPLORE_NEW_CONTENT: 4,\r\n  DILATION_EXPLORE_NEW_CONTENT: 5,\r\n  CHALLENGE_RUPG: 6\r\n};\r\n</script>\r\n\r\n<template>\r\n  <button\r\n    v-if=\"isVisible\"\r\n    :class=\"buttonClassObject\"\r\n    class=\"o-prestige-button\"\r\n    onclick=\"eternityResetRequest()\"\r\n    @mouseover=\"hover = true\"\r\n    @mouseleave=\"hover = false\"\r\n  >\r\n    <!-- Cannot Eternity -->\r\n    <template v-if=\"type === -1\">\r\n      Reach {{ format(eternityGoal, 2, 2) }}\r\n      <br>\r\n      Infinity Points\r\n    </template>\r\n\r\n    <!-- First time -->\r\n    <template v-else-if=\"type === 0\">\r\n      Other times await... I need to become Eternal\r\n    </template>\r\n\r\n    <!-- Normal -->\r\n    <template v-else-if=\"type === 1\">\r\n      Eternity for\r\n      <span :style=\"amountStyle\">{{ format(gainedEP, 2) }}</span>\r\n      <span v-if=\"showEPRate\"> EP</span>\r\n      <span v-else> Eternity {{ pluralize(\"Point\", gainedEP) }}</span>\r\n      <br>\r\n      <template v-if=\"showEPRate\">\r\n        Current: {{ format(currentEPRate, 2, 2) }} EP/min\r\n        <br>\r\n        Peak: {{ format(peakEPRate, 2, 2) }} EP/min\r\n        <br>\r\n        at {{ format(peakEPRateVal, 2, 2) }} EP\r\n      </template>\r\n    </template>\r\n\r\n    <!-- Challenge -->\r\n    <template v-else-if=\"type === 2 || (type === 6 && !canEternity)\">\r\n      Other challenges await... I need to become Eternal\r\n    </template>\r\n\r\n    <!-- Dilation -->\r\n    <template v-else-if=\"type === 3\">\r\n      Eternity for <span :style=\"tachyonAmountStyle\">{{ format(gainedTachyons, 2, 1) }}</span>\r\n      {{ pluralize(\"Tachyon Particle\", gainedTachyons) }}\r\n    </template>\r\n\r\n    <!-- New content available -->\r\n    <template v-else-if=\"type === 4 || type === 5\">\r\n      <template v-if=\"type === 4\">\r\n        Eternity for <span :style=\"amountStyle\">{{ format(gainedEP, 2, 2) }}</span> EP\r\n      </template>\r\n      <template v-else>\r\n        Eternity for <span :style=\"tachyonAmountStyle\">{{ format(gainedTachyons, 2, 1) }}</span> TP\r\n      </template>\r\n      <br>\r\n      You should explore a bit and look at new content before clicking me!\r\n    </template>\r\n\r\n    <!-- Challenge with multiple completions -->\r\n    <template v-else-if=\"type === 6\">\r\n      Other challenges await...\r\n      <template v-if=\"fullyCompleted\">\r\n        <br>\r\n        (This challenge is already fully completed)\r\n      </template>\r\n      <template v-else>\r\n        <br>\r\n        {{ quantifyInt(\"completion\", gainedCompletions) }} on Eternity\r\n        <template v-if=\"failedRestriction\">\r\n          <br>\r\n          {{ failedRestriction }}\r\n        </template>\r\n        <template v-else-if=\"hasMoreCompletions\">\r\n          <br>\r\n          Next goal at {{ format(nextGoalAt) }} IP\r\n        </template>\r\n      </template>\r\n    </template>\r\n  </button>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/ui-modes/prestige-header"},"metadata":{},"sourceType":"module"}