{"ast":null,"code":"export default {\n  name: \"AutomatorScriptDropdownEntryList\",\n\n  data() {\n    return {\n      isBlock: false,\n      currentScriptID: 0,\n      runningScriptID: 0,\n      isRunning: false,\n      isPaused: false,\n      canMakeNewScript: false\n    };\n  },\n\n  computed: {\n    scripts() {\n      return Object.values(player.reality.automator.scripts).map(script => ({\n        id: script.id,\n        name: script.name\n      }));\n    },\n\n    currentScriptContent() {\n      return player.reality.automator.scripts[this.currentScriptID].content;\n    },\n\n    currentScript() {\n      return CodeMirror.Doc(this.currentScriptContent, \"automato\").getValue();\n    },\n\n    scriptCount() {\n      return Object.keys(player.reality.automator.scripts).length;\n    },\n\n    maxScriptCount() {\n      return AutomatorData.MAX_ALLOWED_SCRIPT_COUNT;\n    }\n\n  },\n\n  created() {\n    this.currentScriptID = player.reality.automator.state.editorScript; // Deleted script names potentially persist within the vue component unless we clear them\n\n    this.on$(GAME_EVENT.AUTOMATOR_SAVE_CHANGED, () => {\n      this.$recompute(\"scripts\");\n    });\n  },\n\n  methods: {\n    update() {\n      this.isBlock = player.reality.automator.type === AUTOMATOR_TYPE.BLOCK;\n      this.runningScriptID = AutomatorBackend.state.topLevelScript;\n      this.isRunning = AutomatorBackend.isRunning;\n      this.isPaused = AutomatorBackend.isOn && !AutomatorBackend.isRunning;\n      this.canMakeNewScript = this.scriptCount < this.maxScriptCount;\n    },\n\n    changeScriptID(newID) {\n      this.currentScriptID = newID;\n      player.reality.automator.state.editorScript = newID;\n      this.updateCurrentScriptID();\n    },\n\n    createNewScript() {\n      const newScript = AutomatorBackend.newScript();\n      player.reality.automator.state.editorScript = newScript.id;\n      this.updateCurrentScriptID();\n      this.$parent.$parent.rename();\n    },\n\n    updateCurrentScriptID() {\n      const storedScripts = player.reality.automator.scripts;\n      this.currentScriptID = player.reality.automator.state.editorScript; // This shouldn't happen if things are loaded in the right order, but might as well be sure.\n\n      if (storedScripts[this.currentScriptID] === undefined) {\n        this.currentScriptID = Number(Object.keys(storedScripts)[0]);\n        player.reality.automator.state.editorScript = this.currentScriptID;\n      }\n\n      if (this.isBlock) this.$nextTick(() => BlockAutomator.updateEditor(this.currentScript));\n      this.$parent.openRequest = false;\n      AutomatorData.clearUndoData();\n    },\n\n    dropdownLabel(script) {\n      const labels = [];\n      if (script.id === this.currentScriptID) labels.push(\"viewing\");\n\n      if (script.id === this.runningScriptID) {\n        if (this.isRunning) labels.push(\"running\");else if (this.isPaused) labels.push(\"paused\");\n      }\n\n      const status = labels.length ? `(${labels.join(\", \").capitalize()})` : \"\";\n      return `${script.name} ${status}`;\n    },\n\n    labelClassObject(id) {\n      const highlightRunning = this.isRunning || this.isPaused;\n      return {\n        \"c-automator-docs-script-select\": true,\n        \"l-active-script\": id === this.runningScriptID && highlightRunning,\n        \"l-selected-script\": id === this.currentScriptID && (id !== this.runningScriptID || !highlightRunning)\n      };\n    }\n\n  }\n};","map":{"version":3,"sources":["AutomatorScriptDropdownEntryList.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nexport default {\r\n  name: \"AutomatorScriptDropdownEntryList\",\r\n  data() {\r\n    return {\r\n      isBlock: false,\r\n      currentScriptID: 0,\r\n      runningScriptID: 0,\r\n      isRunning: false,\r\n      isPaused: false,\r\n      canMakeNewScript: false,\r\n    };\r\n  },\r\n  computed: {\r\n    scripts() {\r\n      return Object.values(player.reality.automator.scripts).map(script => ({\r\n        id: script.id,\r\n        name: script.name,\r\n      }));\r\n    },\r\n    currentScriptContent() {\r\n      return player.reality.automator.scripts[this.currentScriptID].content;\r\n    },\r\n    currentScript() {\r\n      return CodeMirror.Doc(this.currentScriptContent, \"automato\").getValue();\r\n    },\r\n    scriptCount() {\r\n      return Object.keys(player.reality.automator.scripts).length;\r\n    },\r\n    maxScriptCount() {\r\n      return AutomatorData.MAX_ALLOWED_SCRIPT_COUNT;\r\n    },\r\n  },\r\n  created() {\r\n    this.currentScriptID = player.reality.automator.state.editorScript;\r\n    // Deleted script names potentially persist within the vue component unless we clear them\r\n    this.on$(GAME_EVENT.AUTOMATOR_SAVE_CHANGED, () => {\r\n      this.$recompute(\"scripts\");\r\n    });\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isBlock = player.reality.automator.type === AUTOMATOR_TYPE.BLOCK;\r\n      this.runningScriptID = AutomatorBackend.state.topLevelScript;\r\n      this.isRunning = AutomatorBackend.isRunning;\r\n      this.isPaused = AutomatorBackend.isOn && !AutomatorBackend.isRunning;\r\n      this.canMakeNewScript = this.scriptCount < this.maxScriptCount;\r\n    },\r\n    changeScriptID(newID) {\r\n      this.currentScriptID = newID;\r\n      player.reality.automator.state.editorScript = newID;\r\n      this.updateCurrentScriptID();\r\n    },\r\n    createNewScript() {\r\n      const newScript = AutomatorBackend.newScript();\r\n      player.reality.automator.state.editorScript = newScript.id;\r\n      this.updateCurrentScriptID();\r\n      this.$parent.$parent.rename();\r\n    },\r\n    updateCurrentScriptID() {\r\n      const storedScripts = player.reality.automator.scripts;\r\n      this.currentScriptID = player.reality.automator.state.editorScript;\r\n      // This shouldn't happen if things are loaded in the right order, but might as well be sure.\r\n      if (storedScripts[this.currentScriptID] === undefined) {\r\n        this.currentScriptID = Number(Object.keys(storedScripts)[0]);\r\n        player.reality.automator.state.editorScript = this.currentScriptID;\r\n      }\r\n      if (this.isBlock) this.$nextTick(() => BlockAutomator.updateEditor(this.currentScript));\r\n      this.$parent.openRequest = false;\r\n      AutomatorData.clearUndoData();\r\n    },\r\n    dropdownLabel(script) {\r\n      const labels = [];\r\n      if (script.id === this.currentScriptID) labels.push(\"viewing\");\r\n      if (script.id === this.runningScriptID) {\r\n        if (this.isRunning) labels.push(\"running\");\r\n        else if (this.isPaused) labels.push(\"paused\");\r\n      }\r\n      const status = labels.length ? `(${labels.join(\", \").capitalize()})` : \"\";\r\n      return `${script.name} ${status}`;\r\n    },\r\n    labelClassObject(id) {\r\n      const highlightRunning = this.isRunning || this.isPaused;\r\n      return {\r\n        \"c-automator-docs-script-select\": true,\r\n        \"l-active-script\": id === this.runningScriptID && highlightRunning,\r\n        \"l-selected-script\": id === this.currentScriptID && (id !== this.runningScriptID || !highlightRunning),\r\n      };\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div :key=\"scripts.length\">\r\n    <div\r\n      v-for=\"script in scripts\"\r\n      :key=\"script.id\"\r\n      class=\"l-script-option c-script-option-hover-effect\"\r\n      :class=\"labelClassObject(script.id)\"\r\n      @click=\"changeScriptID(script.id)\"\r\n    >\r\n      {{ dropdownLabel(script) }}\r\n    </div>\r\n    <div\r\n      v-if=\"canMakeNewScript\"\r\n      class=\"l-create-script c-automator-docs-script-select c-script-option-hover-effect\"\r\n      @click=\"createNewScript()\"\r\n    >\r\n      <i>Create a new script (You have {{ formatInt(scriptCount) }} / {{ formatInt(maxScriptCount) }})</i>\r\n    </div>\r\n    <div\r\n      v-else\r\n      class=\"l-create-script c-automator-docs-script-select l-max-scripts\"\r\n    >\r\n      <i>You can only have {{ formatInt(maxScriptCount) }} scripts!</i>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.l-script-option {\r\n  border-radius: 0;\r\n  border-bottom: 0;\r\n}\r\n\r\n.c-script-option-hover-effect:hover {\r\n  filter: brightness(70%);\r\n  background-color: var(--color-automator-active-line-background);\r\n}\r\n\r\n.l-script-option:first-child {\r\n  border-radius: var(--var-border-radius, 0.5rem) var(--var-border-radius, 0.5rem) 0 0;\r\n}\r\n\r\n.l-create-script {\r\n  border-radius: 0 0 var(--var-border-radius, 0.5rem) var(--var-border-radius, 0.5rem);\r\n}\r\n\r\n.l-active-script {\r\n  background-color: var(--color-automator-controls-active);\r\n}\r\n\r\n.l-selected-script {\r\n  background-color: var(--color-automator-active-line-outline);\r\n}\r\n\r\n.l-max-scripts {\r\n  background-color: var(--color-automator-error-background);\r\n  cursor: auto;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/automator"},"metadata":{},"sourceType":"module"}