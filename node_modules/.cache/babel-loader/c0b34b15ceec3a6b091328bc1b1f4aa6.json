{"ast":null,"code":"import { DC } from \"../../constants\";\nexport const infinityChallenges = [{\n  id: 1,\n  description: `all Normal Challenge restrictions are active at once, with the exception of the\n      Tickspeed (C9) and Big Crunch (C12) Challenges.`,\n  goal: DC.E650,\n  isQuickResettable: true,\n  reward: {\n    description: () => `${formatX(1.3, 1, 1)} on all Infinity Dimensions for each Infinity Challenge completed`,\n    effect: () => Math.pow(1.3, InfinityChallenges.completed.length),\n    formatEffect: value => formatX(value, 1, 1)\n  },\n  unlockAM: DC.E2000\n}, {\n  id: 2,\n  description: () => `Dimensional Sacrifice happens automatically every ${formatInt(400)} milliseconds once you have\n      an 8th Antimatter Dimension.`,\n  goal: DC.E10500,\n  isQuickResettable: false,\n  reward: {\n    description: () => `Dimensional Sacrifice autobuyer and stronger Dimensional Sacrifice\n        ${Sacrifice.getSacrificeDescription({\n      \"InfinityChallenge2isCompleted\": false\n    })} ➜\n        ${Sacrifice.getSacrificeDescription({\n      \"InfinityChallenge2isCompleted\": true\n    })}`\n  },\n  unlockAM: DC.E11000\n}, {\n  id: 3,\n  description: () => `Tickspeed upgrades are always ${formatX(1)}. For every Tickspeed upgrade purchase, you instead get a static\n      multiplier on all Antimatter Dimensions which increases based on Antimatter Galaxies.`,\n  goal: DC.E5000,\n  isQuickResettable: false,\n  effect: () => Decimal.pow(1.05 + player.galaxies * 0.005, player.totalTickBought),\n  formatEffect: value => formatX(value, 2, 2),\n  reward: {\n    description: `Antimatter Dimension multiplier based on Antimatter Galaxies and Tickspeed purchases`,\n    effect: () => Laitela.continuumActive ? Decimal.pow(1.05 + player.galaxies * 0.005, Tickspeed.continuumValue) : Decimal.pow(1.05 + player.galaxies * 0.005, player.totalTickBought),\n    formatEffect: value => formatX(value, 2, 2)\n  },\n  unlockAM: DC.E12000\n}, {\n  id: 4,\n  description: () => `only the latest bought Antimatter Dimension's production is normal. All other Antimatter Dimensions\n      produce less (${formatPow(0.25, 2, 2)}).`,\n  goal: DC.E13000,\n  isQuickResettable: true,\n  effect: 0.25,\n  reward: {\n    description: () => `All Antimatter Dimension multipliers become multiplier${formatPow(1.05, 2, 2)}`,\n    effect: 1.05\n  },\n  unlockAM: DC.E14000\n}, {\n  id: 5,\n  description: `buying Antimatter Dimensions 1-4 causes all cheaper AD costs to increase.\n      Buying Antimatter Dimensions 5-8 causes all more expensive AD costs to increase.`,\n  goal: DC.E16500,\n  isQuickResettable: true,\n  reward: {\n    description: () => `All Galaxies are ${formatPercents(0.1)} stronger and reduce the requirements for them\n        and Dimension Boosts by ${formatInt(1)}`,\n    effect: 1.1\n  },\n  unlockAM: DC.E18000\n}, {\n  id: 6,\n  description: () => `exponentially rising matter divides the multiplier on all of your Antimatter Dimensions\n      once you have at least ${formatInt(1)} 2nd Antimatter Dimension.`,\n  goal: DC.D2E22222,\n  isQuickResettable: true,\n  effect: () => Currency.matter.value.clampMin(1),\n  formatEffect: value => `/${format(value, 1, 2)}`,\n  reward: {\n    description: \"Infinity Dimension multiplier based on tickspeed\",\n    effect: () => Tickspeed.perSecond.pow(0.0005),\n    formatEffect: value => formatX(value, 2, 2)\n  },\n  unlockAM: DC.E22500\n}, {\n  id: 7,\n  description: () => {\n    // Copied from DimBoost.power; this is the base amount before any multipliers. Post-eternity this isn't\n    // necessarily 2.5x by the time the player sees this challenge; it's probably most accurate to say what it\n    // currently is, and this phrasing avoids 10x ➜ 10x with the old description.\n    const mult = Effects.max(2, InfinityUpgrade.dimboostMult, InfinityChallenge(7).reward, TimeStudy(81));\n    return `you cannot buy Antimatter Galaxies. Base Dimension Boost multiplier is increased to a maximum\n        of ${formatX(10)}. (Current base multiplier: ${formatX(mult, 2, 1)})`;\n  },\n  goal: DC.E10000,\n  isQuickResettable: false,\n  effect: 10,\n  reward: {\n    description: () => `Dimension Boost multiplier is increased to a minimum of ${formatX(4)}`,\n    effect: 4\n  },\n  unlockAM: DC.E23000\n}, {\n  id: 8,\n  description: () => `AD production rapidly and continually drops over time. Purchasing Antimatter Dimension or Tickspeed\n        upgrades sets production back to ${formatPercents(1)} before it starts dropping again.`,\n  goal: DC.E27000,\n  isQuickResettable: true,\n  effect: () => DC.D0_8446303389034288.pow(Math.max(0, player.records.thisInfinity.time - player.records.thisInfinity.lastBuyTime) / getGlobalSpeedFactor()),\n  reward: {\n    description: \"You get a multiplier to AD 2-7 based on 1st and 8th AD multipliers.\",\n    effect: () => AntimatterDimension(1).multiplier.times(AntimatterDimension(8).multiplier).pow(0.02),\n    formatEffect: value => formatX(value, 2, 2)\n  },\n  unlockAM: DC.E28000\n}];","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/challenges/infinity-challenges.js"],"names":["DC","infinityChallenges","id","description","goal","E650","isQuickResettable","reward","formatX","effect","Math","pow","InfinityChallenges","completed","length","formatEffect","value","unlockAM","E2000","formatInt","E10500","Sacrifice","getSacrificeDescription","E11000","E5000","Decimal","player","galaxies","totalTickBought","Laitela","continuumActive","Tickspeed","continuumValue","E12000","formatPow","E13000","E14000","E16500","formatPercents","E18000","D2E22222","Currency","matter","clampMin","format","perSecond","E22500","mult","Effects","max","InfinityUpgrade","dimboostMult","InfinityChallenge","TimeStudy","E10000","E23000","E27000","D0_8446303389034288","records","thisInfinity","time","lastBuyTime","getGlobalSpeedFactor","AntimatterDimension","multiplier","times","E28000"],"mappings":"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","sourcesContent":["import { DC } from \"../../constants\";\r\n\r\nexport const infinityChallenges = [\r\n  {\r\n    id: 1,\r\n    description: `all Normal Challenge restrictions are active at once, with the exception of the\r\n      Tickspeed (C9) and Big Crunch (C12) Challenges.`,\r\n    goal: DC.E650,\r\n    isQuickResettable: true,\r\n    reward: {\r\n      description: () => `${formatX(1.3, 1, 1)} on all Infinity Dimensions for each Infinity Challenge completed`,\r\n      effect: () => Math.pow(1.3, InfinityChallenges.completed.length),\r\n      formatEffect: value => formatX(value, 1, 1)\r\n    },\r\n    unlockAM: DC.E2000,\r\n  },\r\n  {\r\n    id: 2,\r\n    description: () => `Dimensional Sacrifice happens automatically every ${formatInt(400)} milliseconds once you have\r\n      an 8th Antimatter Dimension.`,\r\n    goal: DC.E10500,\r\n    isQuickResettable: false,\r\n    reward: {\r\n      description: () => `Dimensional Sacrifice autobuyer and stronger Dimensional Sacrifice\r\n        ${Sacrifice.getSacrificeDescription({ \"InfinityChallenge2isCompleted\": false })} ➜\r\n        ${Sacrifice.getSacrificeDescription({ \"InfinityChallenge2isCompleted\": true })}`,\r\n    },\r\n    unlockAM: DC.E11000,\r\n  },\r\n  {\r\n    id: 3,\r\n    description: () =>\r\n      `Tickspeed upgrades are always ${formatX(1)}. For every Tickspeed upgrade purchase, you instead get a static\r\n      multiplier on all Antimatter Dimensions which increases based on Antimatter Galaxies.`,\r\n    goal: DC.E5000,\r\n    isQuickResettable: false,\r\n    effect: () => Decimal.pow(1.05 + (player.galaxies * 0.005), player.totalTickBought),\r\n    formatEffect: value => formatX(value, 2, 2),\r\n    reward: {\r\n      description: `Antimatter Dimension multiplier based on Antimatter Galaxies and Tickspeed purchases`,\r\n      effect: () => (Laitela.continuumActive\r\n        ? Decimal.pow(1.05 + (player.galaxies * 0.005), Tickspeed.continuumValue)\r\n        : Decimal.pow(1.05 + (player.galaxies * 0.005), player.totalTickBought)),\r\n      formatEffect: value => formatX(value, 2, 2),\r\n    },\r\n    unlockAM: DC.E12000,\r\n  },\r\n  {\r\n    id: 4,\r\n    description: () =>\r\n      `only the latest bought Antimatter Dimension's production is normal. All other Antimatter Dimensions\r\n      produce less (${formatPow(0.25, 2, 2)}).`,\r\n    goal: DC.E13000,\r\n    isQuickResettable: true,\r\n    effect: 0.25,\r\n    reward: {\r\n      description: () => `All Antimatter Dimension multipliers become multiplier${formatPow(1.05, 2, 2)}`,\r\n      effect: 1.05\r\n    },\r\n    unlockAM: DC.E14000,\r\n  },\r\n  {\r\n    id: 5,\r\n    description:\r\n      `buying Antimatter Dimensions 1-4 causes all cheaper AD costs to increase.\r\n      Buying Antimatter Dimensions 5-8 causes all more expensive AD costs to increase.`,\r\n    goal: DC.E16500,\r\n    isQuickResettable: true,\r\n    reward: {\r\n      description: () =>\r\n        `All Galaxies are ${formatPercents(0.1)} stronger and reduce the requirements for them\r\n        and Dimension Boosts by ${formatInt(1)}`,\r\n      effect: 1.1\r\n    },\r\n    unlockAM: DC.E18000,\r\n  },\r\n  {\r\n    id: 6,\r\n    description: () =>\r\n      `exponentially rising matter divides the multiplier on all of your Antimatter Dimensions\r\n      once you have at least ${formatInt(1)} 2nd Antimatter Dimension.`,\r\n    goal: DC.D2E22222,\r\n    isQuickResettable: true,\r\n    effect: () => Currency.matter.value.clampMin(1),\r\n    formatEffect: value => `/${format(value, 1, 2)}`,\r\n    reward: {\r\n      description: \"Infinity Dimension multiplier based on tickspeed\",\r\n      effect: () => Tickspeed.perSecond.pow(0.0005),\r\n      formatEffect: value => formatX(value, 2, 2)\r\n    },\r\n    unlockAM: DC.E22500,\r\n  },\r\n  {\r\n    id: 7,\r\n    description: () => {\r\n      // Copied from DimBoost.power; this is the base amount before any multipliers. Post-eternity this isn't\r\n      // necessarily 2.5x by the time the player sees this challenge; it's probably most accurate to say what it\r\n      // currently is, and this phrasing avoids 10x ➜ 10x with the old description.\r\n      const mult = Effects.max(\r\n        2,\r\n        InfinityUpgrade.dimboostMult,\r\n        InfinityChallenge(7).reward,\r\n        TimeStudy(81)\r\n      );\r\n      return `you cannot buy Antimatter Galaxies. Base Dimension Boost multiplier is increased to a maximum\r\n        of ${formatX(10)}. (Current base multiplier: ${formatX(mult, 2, 1)})`;\r\n    },\r\n    goal: DC.E10000,\r\n    isQuickResettable: false,\r\n    effect: 10,\r\n    reward: {\r\n      description: () => `Dimension Boost multiplier is increased to a minimum of ${formatX(4)}`,\r\n      effect: 4\r\n    },\r\n    unlockAM: DC.E23000,\r\n  },\r\n  {\r\n    id: 8,\r\n    description: () =>\r\n      `AD production rapidly and continually drops over time. Purchasing Antimatter Dimension or Tickspeed\r\n        upgrades sets production back to ${formatPercents(1)} before it starts dropping again.`,\r\n    goal: DC.E27000,\r\n    isQuickResettable: true,\r\n    effect: () => DC.D0_8446303389034288.pow(\r\n      Math.max(0, player.records.thisInfinity.time - player.records.thisInfinity.lastBuyTime) / getGlobalSpeedFactor()),\r\n    reward: {\r\n      description:\r\n        \"You get a multiplier to AD 2-7 based on 1st and 8th AD multipliers.\",\r\n      effect: () => AntimatterDimension(1).multiplier.times(AntimatterDimension(8).multiplier).pow(0.02),\r\n      formatEffect: value => formatX(value, 2, 2)\r\n    },\r\n    unlockAM: DC.E28000,\r\n  },\r\n];\r\n"]},"metadata":{},"sourceType":"module"}