{"ast":null,"code":"export default {\n  name: \"SingularityPane\",\n\n  data() {\n    return {\n      darkEnergy: 0,\n      darkEnergyGainPerSecond: 0,\n      singularities: 0,\n      singularityCapIncreases: 0,\n      canPerformSingularity: false,\n      unlockedBulkSingularity: false,\n      singularityCap: 0,\n      baseTimeToSingularity: 0,\n      currentTimeToSingularity: 0,\n      extraTimeAfterSingularity: 0,\n      singularitiesGained: 0,\n      autoSingularityFactor: 0,\n      perStepFactor: 0,\n      isAutoEnabled: false,\n      hasAutoSingularity: false,\n      nextLowerStep: 0,\n      willCondenseOnDecrease: false\n    };\n  },\n\n  computed: {\n    isDoomed: () => Pelle.isDoomed,\n\n    singularityFormText() {\n      const formText = this.singularitiesGained === 1 ? \"all Dark Energy into a Singularity\" : `all Dark Energy into ${quantify(\"Singularity\", this.singularitiesGained, 2)}`;\n\n      if (this.canPerformSingularity) {\n        return `Condense ${formText}`;\n      }\n\n      return `Reach ${format(this.singularityCap)} Dark Energy to condense ${formText}`;\n    },\n\n    singularityWaitText() {\n      let singularityTime = this.currentTimeToSingularity;\n\n      if (this.canPerformSingularity) {\n        singularityTime += this.extraTimeAfterSingularity;\n        if (!this.isAutoEnabled) return \"\";\n        return singularityTime > 0 ? `(Auto-condensing in ${TimeSpan.fromSeconds(singularityTime).toStringShort()})` : \"(Will immediately auto-condense)\";\n      }\n\n      return `(Enough Dark Energy in ${TimeSpan.fromSeconds(singularityTime).toStringShort()})`;\n    },\n\n    baseSingularityTime() {\n      return TimeSpan.fromSeconds(this.baseTimeToSingularity).toStringShort();\n    },\n\n    additionalSingularityTime() {\n      return TimeSpan.fromSeconds(this.extraTimeAfterSingularity).toStringShort();\n    },\n\n    manualSingularityRate() {\n      const totalTime = this.baseTimeToSingularity;\n      return this.formatRate(this.singularitiesGained / totalTime);\n    },\n\n    autoSingularityRate() {\n      if (this.hasAutoSingularity && !this.isAutoEnabled) return \"Auto-Singularity is OFF\";\n      const totalTime = this.baseTimeToSingularity + this.extraTimeAfterSingularity;\n      return this.formatRate(this.singularitiesGained / totalTime);\n    },\n\n    decreaseTooltip() {\n      if (this.singularityCapIncreases === 0) return \"You cannot decrease the cap any further!\";\n      const singularities = this.singularitiesGained / this.perStepFactor;\n      return this.willCondenseOnDecrease ? `Decreasing the cap will immediately auto-condense for\n          ${quantify(\"Singularity\", singularities, 2)}!` : null;\n    },\n\n    increaseTooltip() {\n      return this.singularityCapIncreases >= 50 ? \"You cannot increase the cap any further!\" : null;\n    }\n\n  },\n  methods: {\n    update() {\n      const laitela = player.celestials.laitela;\n      this.darkEnergy = Currency.darkEnergy.value;\n      this.darkEnergyGainPerSecond = Currency.darkEnergy.productionPerSecond;\n      this.singularities = Currency.singularities.value;\n      this.singularityCapIncreases = laitela.singularityCapIncreases;\n      this.canPerformSingularity = Singularity.capIsReached;\n      this.unlockedBulkSingularity = Currency.singularities.gte(10);\n      this.singularityCap = Singularity.cap;\n      this.baseTimeToSingularity = Singularity.timePerCondense;\n      this.currentTimeToSingularity = Singularity.timeUntilCap;\n      this.extraTimeAfterSingularity = Singularity.timeDelayFromAuto;\n      this.singularitiesGained = Singularity.singularitiesGained;\n      this.autoSingularityFactor = SingularityMilestone.autoCondense.effectOrDefault(Infinity);\n      this.perStepFactor = Singularity.gainPerCapIncrease;\n      this.isAutoEnabled = player.auto.singularity.isActive && SingularityMilestone.autoCondense.canBeApplied;\n      this.hasAutoSingularity = Number.isFinite(this.autoSingularityFactor);\n      this.nextLowerStep = this.singularityCap * this.autoSingularityFactor / 10;\n      this.willCondenseOnDecrease = this.isAutoEnabled && this.darkEnergy > this.nextLowerStep;\n    },\n\n    doSingularity() {\n      Singularity.perform();\n    },\n\n    increaseCap() {\n      Singularity.increaseCap();\n    },\n\n    decreaseCap() {\n      Singularity.decreaseCap();\n    },\n\n    formatRate(rate) {\n      if (rate < 1 / 60) return `${format(3600 * rate, 2, 3)} per hour`;\n      if (rate < 1) return `${format(60 * rate, 2, 3)} per minute`;\n      return `${format(rate, 2, 3)} per second`;\n    },\n\n    condenseClassObject() {\n      return {\n        \"c-laitela-singularity\": true,\n        \"c-laitela-singularity--active\": this.canPerformSingularity && !this.isDoomed,\n        \"o-pelle-disabled\": this.isDoomed,\n        \"o-pelle-disabled-pointer\": this.isDoomed\n      };\n    }\n\n  }\n};","map":{"version":3,"sources":["SingularityPane.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nexport default {\r\n  name: \"SingularityPane\",\r\n  data() {\r\n    return {\r\n      darkEnergy: 0,\r\n      darkEnergyGainPerSecond: 0,\r\n      singularities: 0,\r\n      singularityCapIncreases: 0,\r\n      canPerformSingularity: false,\r\n      unlockedBulkSingularity: false,\r\n      singularityCap: 0,\r\n      baseTimeToSingularity: 0,\r\n      currentTimeToSingularity: 0,\r\n      extraTimeAfterSingularity: 0,\r\n      singularitiesGained: 0,\r\n      autoSingularityFactor: 0,\r\n      perStepFactor: 0,\r\n      isAutoEnabled: false,\r\n      hasAutoSingularity: false,\r\n      nextLowerStep: 0,\r\n      willCondenseOnDecrease: false,\r\n    };\r\n  },\r\n  computed: {\r\n    isDoomed: () => Pelle.isDoomed,\r\n    singularityFormText() {\r\n      const formText = this.singularitiesGained === 1 ? \"all Dark Energy into a Singularity\"\r\n        : `all Dark Energy into ${quantify(\"Singularity\", this.singularitiesGained, 2)}`;\r\n      if (this.canPerformSingularity) {\r\n        return `Condense ${formText}`;\r\n      }\r\n      return `Reach ${format(this.singularityCap)} Dark Energy to condense ${formText}`;\r\n    },\r\n    singularityWaitText() {\r\n      let singularityTime = this.currentTimeToSingularity;\r\n      if (this.canPerformSingularity) {\r\n        singularityTime += this.extraTimeAfterSingularity;\r\n        if (!this.isAutoEnabled) return \"\";\r\n        return singularityTime > 0\r\n          ? `(Auto-condensing in ${TimeSpan.fromSeconds(singularityTime).toStringShort()})`\r\n          : \"(Will immediately auto-condense)\";\r\n      }\r\n      return `(Enough Dark Energy in ${TimeSpan.fromSeconds(singularityTime).toStringShort()})`;\r\n    },\r\n    baseSingularityTime() {\r\n      return TimeSpan.fromSeconds(this.baseTimeToSingularity).toStringShort();\r\n    },\r\n    additionalSingularityTime() {\r\n      return TimeSpan.fromSeconds(this.extraTimeAfterSingularity).toStringShort();\r\n    },\r\n    manualSingularityRate() {\r\n      const totalTime = this.baseTimeToSingularity;\r\n      return this.formatRate(this.singularitiesGained / totalTime);\r\n    },\r\n    autoSingularityRate() {\r\n      if (this.hasAutoSingularity && !this.isAutoEnabled) return \"Auto-Singularity is OFF\";\r\n      const totalTime = this.baseTimeToSingularity + this.extraTimeAfterSingularity;\r\n      return this.formatRate(this.singularitiesGained / totalTime);\r\n    },\r\n    decreaseTooltip() {\r\n      if (this.singularityCapIncreases === 0) return \"You cannot decrease the cap any further!\";\r\n      const singularities = this.singularitiesGained / this.perStepFactor;\r\n      return this.willCondenseOnDecrease\r\n        ? `Decreasing the cap will immediately auto-condense for\r\n          ${quantify(\"Singularity\", singularities, 2)}!`\r\n        : null;\r\n    },\r\n    increaseTooltip() {\r\n      return this.singularityCapIncreases >= 50\r\n        ? \"You cannot increase the cap any further!\"\r\n        : null;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      const laitela = player.celestials.laitela;\r\n      this.darkEnergy = Currency.darkEnergy.value;\r\n      this.darkEnergyGainPerSecond = Currency.darkEnergy.productionPerSecond;\r\n      this.singularities = Currency.singularities.value;\r\n      this.singularityCapIncreases = laitela.singularityCapIncreases;\r\n      this.canPerformSingularity = Singularity.capIsReached;\r\n      this.unlockedBulkSingularity = Currency.singularities.gte(10);\r\n      this.singularityCap = Singularity.cap;\r\n      this.baseTimeToSingularity = Singularity.timePerCondense;\r\n      this.currentTimeToSingularity = Singularity.timeUntilCap;\r\n      this.extraTimeAfterSingularity = Singularity.timeDelayFromAuto;\r\n      this.singularitiesGained = Singularity.singularitiesGained;\r\n      this.autoSingularityFactor = SingularityMilestone.autoCondense.effectOrDefault(Infinity);\r\n      this.perStepFactor = Singularity.gainPerCapIncrease;\r\n      this.isAutoEnabled = player.auto.singularity.isActive && SingularityMilestone.autoCondense.canBeApplied;\r\n      this.hasAutoSingularity = Number.isFinite(this.autoSingularityFactor);\r\n      this.nextLowerStep = this.singularityCap * this.autoSingularityFactor / 10;\r\n      this.willCondenseOnDecrease = this.isAutoEnabled && this.darkEnergy > this.nextLowerStep;\r\n    },\r\n    doSingularity() {\r\n      Singularity.perform();\r\n    },\r\n    increaseCap() {\r\n      Singularity.increaseCap();\r\n    },\r\n    decreaseCap() {\r\n      Singularity.decreaseCap();\r\n    },\r\n    formatRate(rate) {\r\n      if (rate < 1 / 60) return `${format(3600 * rate, 2, 3)} per hour`;\r\n      if (rate < 1) return `${format(60 * rate, 2, 3)} per minute`;\r\n      return `${format(rate, 2, 3)} per second`;\r\n    },\r\n    condenseClassObject() {\r\n      return {\r\n        \"c-laitela-singularity\": true,\r\n        \"c-laitela-singularity--active\": this.canPerformSingularity && !this.isDoomed,\r\n        \"o-pelle-disabled\": this.isDoomed,\r\n        \"o-pelle-disabled-pointer\": this.isDoomed,\r\n      };\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"c-laitela-singularity-container\">\r\n    <div>\r\n      <h2>\r\n        You have {{ quantify(\"Singularity\", singularities, 2) }}\r\n      </h2>\r\n      <button\r\n        :class=\"condenseClassObject()\"\r\n        @click=\"doSingularity\"\r\n      >\r\n        <h2>\r\n          {{ singularityFormText }}\r\n        </h2>\r\n        <br v-if=\"singularityWaitText !== ''\">\r\n        <h2>\r\n          {{ singularityWaitText }}\r\n        </h2>\r\n      </button>\r\n    </div>\r\n    <div v-if=\"singularities !== 0\">\r\n      <div class=\"o-laitela-matter-amount\">\r\n        You have {{ format(darkEnergy, 2, 4) }} Dark Energy. (+{{ format(darkEnergyGainPerSecond, 2, 4) }}/s)\r\n      </div>\r\n      <div v-if=\"unlockedBulkSingularity\">\r\n        <button\r\n          class=\"c-laitela-singularity__cap-control\"\r\n          :class=\"{ 'c-laitela-singularity__cap-control--available' : singularityCapIncreases > 0 }\"\r\n          :ach-tooltip=\"decreaseTooltip\"\r\n          @click=\"decreaseCap\"\r\n        >\r\n          Decrease Singularity cap.\r\n        </button>\r\n        <button\r\n          class=\"c-laitela-singularity__cap-control\"\r\n          :class=\"{ 'c-laitela-singularity__cap-control--available' : singularityCapIncreases < 50 }\"\r\n          :ach-tooltip=\"increaseTooltip\"\r\n          @click=\"increaseCap\"\r\n        >\r\n          Increase Singularity cap.\r\n        </button>\r\n        <br>\r\n        Each step increases the required Dark Energy by {{ formatX(10) }},\r\n        <br>\r\n        but also increases gained Singularities by {{ formatX(perStepFactor) }}.\r\n      </div>\r\n      <div v-else>\r\n        <br>\r\n        Reach {{ format(10) }} Singularities\r\n        <br>\r\n        to unlock Bulk Singularities.\r\n        <br>\r\n      </div>\r\n      <br>\r\n      Total time to <span v-if=\"hasAutoSingularity\">(auto-)</span>condense:\r\n      {{ baseSingularityTime }}\r\n      <span v-if=\"hasAutoSingularity && autoSingularityFactor !== 1\">\r\n        (+{{ additionalSingularityTime }})\r\n      </span>\r\n      <br>\r\n      <span v-if=\"hasAutoSingularity && autoSingularityFactor !== 1\">Manual </span>\r\n      Singularity gain rate: {{ manualSingularityRate }}\r\n      <br>\r\n      <span v-if=\"hasAutoSingularity && autoSingularityFactor !== 1\">\r\n        Automatic Singularity gain rate: {{ autoSingularityRate }}\r\n      </span>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-laitela-singularity__cap-control {\r\n  margin: 0 0.3rem 1rem;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/celestial-laitela"},"metadata":{},"sourceType":"module"}