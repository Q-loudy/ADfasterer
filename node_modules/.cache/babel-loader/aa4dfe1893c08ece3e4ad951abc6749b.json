{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport GlyphComponent from \"@/components/GlyphComponent\";\nexport default {\n  name: \"GlyphShowcasePanelEntry\",\n  components: {\n    GlyphComponent\n  },\n  props: {\n    idx: {\n      type: Number,\n      required: true\n    },\n    glyph: {\n      type: Object,\n      required: true\n    },\n    showLevel: {\n      type: Boolean,\n      required: true\n    },\n    realityGlyphBoost: {\n      type: Number,\n      default: 0\n    },\n    maxGlyphEffects: {\n      type: Number,\n      required: true\n    },\n    showSacrifice: {\n      type: Boolean,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      canSacrifice: false\n    };\n  },\n\n  computed: {\n    type() {\n      return this.glyph.type;\n    },\n\n    typeCapitalized() {\n      return this.type.capitalize();\n    },\n\n    level() {\n      return this.glyph.level;\n    },\n\n    effectiveLevel() {\n      return getAdjustedGlyphLevel(this.glyph, this.realityGlyphBoost, true);\n    },\n\n    isLevelCapped() {\n      return this.effectiveLevel && this.effectiveLevel < this.level;\n    },\n\n    isLevelBoosted() {\n      return this.effectiveLevel && this.effectiveLevel > this.level;\n    },\n\n    levelText() {\n      if (this.type === \"companion\") return \"\"; // eslint-disable-next-line no-nested-ternary\n\n      const arrow = this.isLevelCapped ? \"<i class='fas fa-sort-down'></i>\" : this.isLevelBoosted ? \"<i class='fas fa-sort-up'></i>\" : \"\"; // eslint-disable-next-line no-nested-ternary\n\n      const color = this.isLevelCapped ? \"#ff4444\" : this.isLevelBoosted ? \"#44FF44\" : \"var(--color-text);\";\n      return `<span style=\"color: ${color}\">\n                  ${arrow}${formatInt(this.effectiveLevel)}${arrow}\n                  </span>`;\n    },\n\n    typeStyle() {\n      // Special case for cursed glyphs because its black default has poor contrast on some themes\n      return {\n        color: GlyphAppearanceHandler.getBorderColor(this.type),\n        \"font-weight\": \"bold\",\n        \"text-shadow\": this.type === \"cursed\" ? \"0.05rem 0.05rem var(--color-text)\" : undefined,\n        animation: this.type === \"reality\" ? \"a-reality-glyph-description-cycle 10s infinite\" : undefined\n      };\n    },\n\n    rarityStyle() {\n      // Rarity is handled differently here than usual because this is in contrast with the theme BG, not the glyph BG\n      const color = CosmeticGlyphTypes[this.glyph.type].ignoreRarityColor ? GlyphAppearanceHandler.getBorderColor(this.type) : getRarity(this.glyph.strength)[Theme.current().isDark() ? \"darkColor\" : \"lightColor\"];\n      return {\n        color,\n        \"font-weight\": \"bold\"\n      };\n    },\n\n    effectStyle() {\n      return {\n        \"font-size\": `${this.type === \"effarig\" ? 1 : 1.2}rem`,\n        \"height\": this.glyphEffectListHeight(this.maxGlyphEffects)\n      };\n    },\n\n    glyphEffectList() {\n      const db = GlyphEffects;\n      const effects = getGlyphEffectValuesFromBitmask(this.glyph.effects, this.effectiveLevel, this.glyph.strength, this.type).filter(e => db[e.id].isGenerated === generatedTypes.includes(this.type));\n      const effectStrings = effects.map(e => this.formatEffectString(db[e.id], e.value)); // Filter out undefined results since shortDesc only exists for generated effects\n\n      return effectStrings.filter(s => s !== \"undefined\");\n    },\n\n    rarityPercent() {\n      if (this.glyph.type === \"companion\" || this.glyph.type === \"cursed\") return \"\";\n      return formatRarity(strengthToRarity(this.glyph.strength));\n    }\n\n  },\n  methods: {\n    update() {\n      this.canSacrifice = GlyphSacrificeHandler.canSacrifice;\n    },\n\n    glyphEffectListHeight(effects) {\n      const heights = [\"3rem\", \"6rem\", \"8rem\", \"11rem\"];\n      return heights[effects - 1];\n    },\n\n    formatEffectString(dbEntry, value) {\n      const rawDesc = dbEntry.shortDesc;\n      const singleValue = dbEntry.formatSingleEffect ? dbEntry.formatSingleEffect(value) : dbEntry.formatEffect(value);\n      const alteredValue = dbEntry.conversion ? dbEntry.formatSecondaryEffect(dbEntry.conversion(value)) : \"\";\n      return {\n        text: `${rawDesc}`.replace(\"{value}\", singleValue).replace(\"{value2}\", alteredValue),\n        isPelleDisabled: dbEntry.isDisabledByDoomed\n      };\n    },\n\n    clickGlyph(glyph) {\n      if (Glyphs.isMusicGlyph(glyph)) {\n        new Audio(`audio/note${GLYPH_TYPES.indexOf(glyph.type) + 1}.mp3`).play();\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["GlyphShowcasePanelEntry.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport GlyphComponent from \"@/components/GlyphComponent\";\r\n\r\nexport default {\r\n  name: \"GlyphShowcasePanelEntry\",\r\n  components: {\r\n    GlyphComponent\r\n  },\r\n  props: {\r\n    idx: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    glyph: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    showLevel: {\r\n      type: Boolean,\r\n      required: true\r\n    },\r\n    realityGlyphBoost: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    maxGlyphEffects: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    showSacrifice: {\r\n      type: Boolean,\r\n      required: true\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      canSacrifice: false,\r\n    };\r\n  },\r\n  computed: {\r\n    type() {\r\n      return this.glyph.type;\r\n    },\r\n    typeCapitalized() {\r\n      return this.type.capitalize();\r\n    },\r\n    level() {\r\n      return this.glyph.level;\r\n    },\r\n    effectiveLevel() {\r\n      return getAdjustedGlyphLevel(this.glyph, this.realityGlyphBoost, true);\r\n    },\r\n    isLevelCapped() {\r\n      return this.effectiveLevel && this.effectiveLevel < this.level;\r\n    },\r\n    isLevelBoosted() {\r\n      return this.effectiveLevel && this.effectiveLevel > this.level;\r\n    },\r\n    levelText() {\r\n      if (this.type === \"companion\") return \"\";\r\n      // eslint-disable-next-line no-nested-ternary\r\n      const arrow = this.isLevelCapped\r\n        ? \"<i class='fas fa-sort-down'></i>\"\r\n        : (this.isLevelBoosted ? \"<i class='fas fa-sort-up'></i>\" : \"\");\r\n      // eslint-disable-next-line no-nested-ternary\r\n      const color = this.isLevelCapped\r\n        ? \"#ff4444\"\r\n        : (this.isLevelBoosted ? \"#44FF44\" : \"var(--color-text);\");\r\n      return `<span style=\"color: ${color}\">\r\n                  ${arrow}${formatInt(this.effectiveLevel)}${arrow}\r\n                  </span>`;\r\n    },\r\n    typeStyle() {\r\n      // Special case for cursed glyphs because its black default has poor contrast on some themes\r\n      return {\r\n        color: GlyphAppearanceHandler.getBorderColor(this.type),\r\n        \"font-weight\": \"bold\",\r\n        \"text-shadow\": this.type === \"cursed\" ? \"0.05rem 0.05rem var(--color-text)\" : undefined,\r\n        animation: this.type === \"reality\" ? \"a-reality-glyph-description-cycle 10s infinite\" : undefined,\r\n      };\r\n    },\r\n    rarityStyle() {\r\n      // Rarity is handled differently here than usual because this is in contrast with the theme BG, not the glyph BG\r\n      const color = CosmeticGlyphTypes[this.glyph.type].ignoreRarityColor\r\n        ? GlyphAppearanceHandler.getBorderColor(this.type)\r\n        : getRarity(this.glyph.strength)[Theme.current().isDark() ? \"darkColor\" : \"lightColor\"];\r\n      return {\r\n        color,\r\n        \"font-weight\": \"bold\"\r\n      };\r\n    },\r\n    effectStyle() {\r\n      return {\r\n        \"font-size\": `${this.type === \"effarig\" ? 1 : 1.2}rem`,\r\n        \"height\": this.glyphEffectListHeight(this.maxGlyphEffects)\r\n      };\r\n    },\r\n    glyphEffectList() {\r\n      const db = GlyphEffects;\r\n      const effects =\r\n      getGlyphEffectValuesFromBitmask(this.glyph.effects, this.effectiveLevel, this.glyph.strength, this.type)\r\n        .filter(e => db[e.id].isGenerated === generatedTypes.includes(this.type));\r\n      const effectStrings = effects\r\n        .map(e => this.formatEffectString(db[e.id], e.value));\r\n      // Filter out undefined results since shortDesc only exists for generated effects\r\n      return effectStrings.filter(s => s !== \"undefined\");\r\n    },\r\n    rarityPercent() {\r\n      if (this.glyph.type === \"companion\" || this.glyph.type === \"cursed\") return \"\";\r\n      return formatRarity(strengthToRarity(this.glyph.strength));\r\n    },\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.canSacrifice = GlyphSacrificeHandler.canSacrifice;\r\n    },\r\n    glyphEffectListHeight(effects) {\r\n      const heights = [\r\n        \"3rem\",\r\n        \"6rem\",\r\n        \"8rem\",\r\n        \"11rem\"\r\n      ];\r\n      return heights[effects - 1];\r\n    },\r\n    formatEffectString(dbEntry, value) {\r\n      const rawDesc = dbEntry.shortDesc;\r\n      const singleValue = dbEntry.formatSingleEffect\r\n        ? dbEntry.formatSingleEffect(value)\r\n        : dbEntry.formatEffect(value);\r\n      const alteredValue = dbEntry.conversion\r\n        ? dbEntry.formatSecondaryEffect(dbEntry.conversion(value))\r\n        : \"\";\r\n      return {\r\n        text: `${rawDesc}`\r\n          .replace(\"{value}\", singleValue)\r\n          .replace(\"{value2}\", alteredValue),\r\n        isPelleDisabled: dbEntry.isDisabledByDoomed\r\n      };\r\n    },\r\n    clickGlyph(glyph) {\r\n      if (Glyphs.isMusicGlyph(glyph)) {\r\n        new Audio(`audio/note${GLYPH_TYPES.indexOf(glyph.type) + 1}.mp3`).play();\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <div class=\"c-glyph-choice-icon\">\r\n      <span :style=\"typeStyle\">{{ typeCapitalized }}</span>\r\n      <div\r\n        v-if=\"showLevel\"\r\n        v-html=\"levelText\"\r\n      />\r\n      <GlyphComponent\r\n        :key=\"idx\"\r\n        class=\"c-glyph-component-container\"\r\n        :glyph=\"glyph\"\r\n        :show-sacrifice=\"showSacrifice && canSacrifice\"\r\n        :draggable=\"false\"\r\n        :circular=\"true\"\r\n        :ignore-modified-level=\"false\"\r\n        :reality-glyph-boost=\"realityGlyphBoost\"\r\n        :is-in-modal=\"true\"\r\n        size=\"4rem\"\r\n        :text-proportion=\"0.5\"\r\n        glow-blur=\"0.4rem\"\r\n        glow-spread=\"0.1rem\"\r\n        @clicked=\"clickGlyph(glyph)\"\r\n      />\r\n      <div :style=\"rarityStyle\">\r\n        {{ rarityPercent }}\r\n      </div>\r\n    </div>\r\n    <div\r\n      class=\"c-glyph-choice-effect-list\"\r\n      :style=\"effectStyle\"\r\n    >\r\n      <div\r\n        v-for=\"(effectObj, index) in glyphEffectList\"\r\n        :key=\"index\"\r\n        :class=\"{ 'o-pelle-disabled': effectObj.isPelleDisabled }\"\r\n      >\r\n        {{ effectObj.text }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-glyph-component-container {\r\n  margin: 0.1rem;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/modals"},"metadata":{},"sourceType":"module"}