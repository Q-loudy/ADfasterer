{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport { Currency } from \"../../currency\";\nimport { DC } from \"../../constants\";\nimport { RebuyableMechanicState } from \"../../game-mechanics/rebuyable\";\nimport { SetPurchasableMechanicState } from \"../../utils\";\nimport { Quotes } from \"../quotes\";\nimport wordShift from \"../../word-shift\";\nimport zalgo from \"./zalgo\";\nconst disabledMechanicUnlocks = {\n  achievements: () => ({}),\n  IPMults: () => ({}),\n  EPMults: () => ({}),\n  galaxies: () => ({}),\n  InfinitiedMults: () => ({}),\n  infinitiedGen: () => ({}),\n  eternityGain: () => ({}),\n  eternityMults: () => ({}),\n  studies: () => ({}),\n  EPgen: () => ({}),\n  autoec: () => ({}),\n  replicantiIntervalMult: () => ({}),\n  tpMults: () => ({}),\n  glyphs: () => !PelleRifts.vacuum.milestones[0].canBeApplied,\n  V: () => ({}),\n  singularity: () => ({}),\n  continuum: () => ({}),\n  alchemy: () => ({}),\n  achievementMult: () => ({}),\n  blackhole: () => ({}),\n  effarig: () => ({}),\n  imaginaryUpgrades: () => ({}),\n  glyphsac: () => ({}),\n  antimatterDimAutobuyer1: () => PelleUpgrade.antimatterDimAutobuyers1,\n  antimatterDimAutobuyer2: () => PelleUpgrade.antimatterDimAutobuyers1,\n  antimatterDimAutobuyer3: () => PelleUpgrade.antimatterDimAutobuyers1,\n  antimatterDimAutobuyer4: () => PelleUpgrade.antimatterDimAutobuyers1,\n  antimatterDimAutobuyer5: () => PelleUpgrade.antimatterDimAutobuyers2,\n  antimatterDimAutobuyer6: () => PelleUpgrade.antimatterDimAutobuyers2,\n  antimatterDimAutobuyer7: () => PelleUpgrade.antimatterDimAutobuyers2,\n  antimatterDimAutobuyer8: () => PelleUpgrade.antimatterDimAutobuyers2,\n  tickspeedAutobuyer: () => PelleUpgrade.tickspeedAutobuyer,\n  dimBoostAutobuyer: () => PelleUpgrade.dimBoostAutobuyer,\n  galaxyAutobuyer: () => PelleUpgrade.galaxyAutobuyer,\n  timeTheoremAutobuyer: () => ({}),\n  rupg10: () => ({}),\n  dtMults: () => ({}),\n  chargedInfinityUpgrades: () => ({}),\n  alteration: () => ({}),\n  timeTheorems: () => ({})\n};\nexport const Pelle = {\n  symbol: \"â™…\",\n  // Suppress the randomness for this form\n  possessiveName: \"Pelle's\",\n\n  // This is called upon initial Dooming and after every Armageddon when using the modal\n  initializeRun() {\n    if (this.isDoomed) {\n      Pelle.armageddon(true);\n      return;\n    }\n\n    Glyphs.harshAutoClean();\n\n    if (!Glyphs.unequipAll()) {\n      Modal.hideAll();\n      Modal.message.show(`Dooming your Reality will unequip your Glyphs. Some of your\n        Glyphs could not be unequipped due to lack of inventory space.`, 1);\n      return;\n    }\n\n    Glyphs.harshAutoClean();\n\n    if (Glyphs.freeInventorySpace < 5) {\n      Modal.hideAll();\n      Modal.message.show(`You must have enough empty unprotected Glyph slots for\n        ${formatInt(5)} additional Glyphs in order to Doom your Reality.`, 1);\n      return;\n    }\n\n    for (const type of BASIC_GLYPH_TYPES) Glyphs.addToInventory(GlyphGenerator.doomedGlyph(type));\n\n    Glyphs.refreshActive();\n    player.options.confirmations.glyphReplace = true;\n    player.reality.automator.state.repeat = false;\n    player.reality.automator.state.forceRestart = false;\n    if (BlackHoles.arePaused) BlackHoles.togglePause();\n    player.celestials.pelle.doomed = true;\n    Pelle.armageddon(false);\n    respecTimeStudies(true);\n    Currency.infinityPoints.reset();\n    player.IPMultPurchases = 0;\n    Autobuyer.bigCrunch.mode = AUTO_CRUNCH_MODE.AMOUNT;\n    disChargeAll();\n    clearCelestialRuns(); // Force-enable the group toggle for AD autobuyers to be active; whether or not they can actually tick\n    // is still handled through if the autobuyers are unlocked at all. This fixes an odd edge case where the player\n    // enters cel7 with AD autobuyers disabled - AD autobuyers need to be reupgraded, but the UI component\n    // for the group toggle is hidden until they're all re-upgraded to the max again.\n\n    player.auto.antimatterDims.isActive = true;\n    player.buyUntil10 = true;\n    player.records.realTimeDoomed = 0;\n\n    for (const res of AlchemyResources.all) res.amount = 0;\n\n    AutomatorBackend.stop(); // Force-unhide all tabs except for the shop tab, for which we retain the hide state instead\n\n    const shopTab = ~1 & 1 << GameDatabase.tabs.find(t => t.key === \"shop\").id;\n    player.options.hiddenTabBits &= shopTab; // Force unhide MOST subtabs, although some of the tabs get ignored since they don't contain any\n    // meaningful interactable gameplay elements in Doomed\n\n    const tabsToIgnore = [\"statistics\", \"achievements\", \"reality\", \"celestials\"];\n    const ignoredIDs = GameDatabase.tabs.filter(t => tabsToIgnore.includes(t.key)).map(t => t.id);\n\n    for (let tabIndex = 0; tabIndex < GameDatabase.tabs.length; tabIndex++) {\n      player.options.hiddenSubtabBits[tabIndex] &= ignoredIDs.includes(tabIndex) ? -1 : 0;\n    }\n\n    Pelle.quotes.initial.show();\n    GameStorage.save(true);\n  },\n\n  get displayName() {\n    return Date.now() % 4000 > 500 ? \"Pelle\" : wordShift.randomCrossWords(\"Pelle\");\n  },\n\n  get isUnlocked() {\n    return ImaginaryUpgrade(25).isBought;\n  },\n\n  // This will check if a specific mechanic is disabled, like old PelleFlag(x).isActive,\n  // Initially it will only have isDoomed check but we will have upgrades that let you get stuff back\n  isDisabled(mechanic) {\n    if (!this.isDoomed) return false;\n    if (!mechanic) return true;\n\n    if (!disabledMechanicUnlocks[mechanic]) {\n      // eslint-disable-next-line\n      console.error(`Mechanic ${mechanic} isn't present in the disabledMechanicUnlocks!`);\n      return true;\n    }\n\n    const upgrade = disabledMechanicUnlocks[mechanic]();\n\n    if (typeof upgrade === \"boolean\") {\n      return upgrade;\n    }\n\n    return Boolean(!upgrade.canBeApplied);\n  },\n\n  get canArmageddon() {\n    return this.remnantsGain >= 1;\n  },\n\n  armageddon(gainStuff) {\n    if (!this.canArmageddon && gainStuff) return;\n    EventHub.dispatch(GAME_EVENT.ARMAGEDDON_BEFORE, gainStuff);\n\n    if (gainStuff) {\n      this.cel.remnants += this.remnantsGain;\n    }\n\n    finishProcessReality({\n      reset: true,\n      armageddon: true\n    });\n    disChargeAll();\n    player.celestials.enslaved.isStoringReal = false;\n    player.celestials.enslaved.autoStoreReal = false;\n    if (PelleStrikes.dilation.hasStrike) player.dilation.active = true;\n    EventHub.dispatch(GAME_EVENT.ARMAGEDDON_AFTER, gainStuff);\n  },\n\n  gameLoop(diff) {\n    if (this.isDoomed) {\n      Currency.realityShards.add(this.realityShardGainPerSecond.times(diff).div(1000));\n      PelleRifts.all.forEach(r => r.fill(diff));\n    }\n  },\n\n  get cel() {\n    return player.celestials.pelle;\n  },\n\n  get isDoomed() {\n    return this.cel.doomed;\n  },\n\n  get disabledAchievements() {\n    return [164, 156, 143, 142, 141, 137, 134, 133, 132, 131, 126, 125, 118, 117, 116, 113, 111, 104, 103, 95, 93, 92, 91, 87, 85, 78, 76, 74, 65, 55, 54, 37];\n  },\n\n  get uselessInfinityUpgrades() {\n    return [\"passiveGen\", \"ipMult\", \"infinitiedGeneration\"];\n  },\n\n  get uselessTimeStudies() {\n    return [32, 33, 41, 51, 61, 62, 121, 122, 123, 141, 142, 143, 192, 213];\n  },\n\n  get disabledRUPGs() {\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 22, 23, 24];\n  },\n\n  get uselessPerks() {\n    return [10, 12, 13, 14, 15, 16, 17, 30, 40, 41, 42, 43, 44, 45, 46, 51, 52, 53, 60, 61, 62, 80, 81, 82, 83, 100, 103, 104, 105, 106, 201, 202, 203, 204];\n  },\n\n  get specialGlyphEffect() {\n    const isUnlocked = this.isDoomed && PelleRifts.chaos.milestones[1].canBeApplied;\n    const description = this.getSpecialGlyphEffectDescription(this.activeGlyphType);\n\n    const isActive = type => isUnlocked && this.activeGlyphType === type;\n\n    return {\n      isUnlocked,\n      description,\n      infinity: isActive(\"infinity\") && player.challenge.eternity.current <= 8 ? Currency.infinityPoints.value.plus(1).pow(0.2) : DC.D1,\n      time: isActive(\"time\") ? Currency.eternityPoints.value.plus(1).pow(0.3) : DC.D1,\n      replication: isActive(\"replication\") ? 10 ** 53 ** PelleRifts.vacuum.percentage : 1,\n      dilation: isActive(\"dilation\") ? Decimal.pow(player.dilation.totalTachyonGalaxies, 1.5).max(1) : DC.D1,\n      power: isActive(\"power\") ? 1.02 : 1,\n      companion: isActive(\"companion\") ? 1.34 : 1,\n      isScaling: () => [\"infinity\", \"time\", \"replication\", \"dilation\"].includes(this.activeGlyphType)\n    };\n  },\n\n  getSpecialGlyphEffectDescription(type) {\n    switch (type) {\n      case \"infinity\":\n        return `Infinity Point gain ${player.challenge.eternity.current <= 8 ? formatX(Currency.infinityPoints.value.plus(1).pow(0.2), 2) : formatX(DC.D1, 2)} (based on current IP)`;\n\n      case \"time\":\n        return `Eternity Point gain ${formatX(Currency.eternityPoints.value.plus(1).pow(0.3), 2)}\n          (based on current EP)`;\n\n      case \"replication\":\n        return `Replication speed ${formatX(10 ** 53 ** PelleRifts.vacuum.percentage, 2)} \\\n        (based on ${wordShift.wordCycle(PelleRifts.vacuum.name)})`;\n\n      case \"dilation\":\n        return `Dilated Time gain ${formatX(Decimal.pow(player.dilation.totalTachyonGalaxies, 1.5).max(1), 2)}\n          (based on Tachyon Galaxies)`;\n\n      case \"power\":\n        return `Galaxies are ${formatPercents(0.02)} stronger`;\n\n      case \"companion\":\n        return `You feel ${formatPercents(0.34)} better`;\n      // Undefined means that there is no glyph equipped, needs to be here since this function is used in\n      // both Current Glyph Effects and Glyph Tooltip\n\n      case undefined:\n        return \"No Glyph equipped!\";\n\n      default:\n        return \"You cannot equip this Glyph while Doomed!\";\n    }\n  },\n\n  get remnantRequirementForDilation() {\n    return 3.8e7;\n  },\n\n  get canDilateInPelle() {\n    return this.cel.remnants >= this.remnantRequirementForDilation;\n  },\n\n  resetResourcesForDilation() {\n    this.cel.records.totalAntimatter = new Decimal(\"1e180000\");\n    this.cel.records.totalInfinityPoints = new Decimal(\"1e60000\");\n    Currency.eternityPoints.reset(); // Oddly specific number? Yes, it's roughly the amount of EP you have\n    // when starting dilation for the first time\n    // Since 5th strike previously did not reset your current EP the previous reset value was kind of useless which\n    // lead to some balancing problems, this hopefully prevents people starting dilation too early and getting\n    // softlocked, or starting it too late and getting not-softlocked.\n\n    this.cel.records.totalEternityPoints = new Decimal(\"1e1050\");\n  },\n\n  get remnantsGain() {\n    let am = this.cel.records.totalAntimatter.plus(1).log10();\n    let ip = this.cel.records.totalInfinityPoints.plus(1).log10();\n    let ep = this.cel.records.totalEternityPoints.plus(1).log10();\n\n    if (PelleStrikes.dilation.hasStrike) {\n      am *= 500;\n      ip *= 10;\n      ep *= 5;\n    }\n\n    const gain = ((Math.log10(am + 2) + Math.log10(ip + 2) + Math.log10(ep + 2)) / 1.64) ** 7.5;\n    return gain < 1 ? gain : Math.floor(gain - this.cel.remnants);\n  },\n\n  realityShardGain(remnants) {\n    return Decimal.pow(10, remnants ** (1 / 7.5) * 4).minus(1).div(1e3);\n  },\n\n  get realityShardGainPerSecond() {\n    return this.realityShardGain(this.cel.remnants);\n  },\n\n  get nextRealityShardGain() {\n    return this.realityShardGain(this.remnantsGain + this.cel.remnants);\n  },\n\n  // Calculations assume this is in units of proportion per second (eg. 0.03 is 3% drain per second)\n  get riftDrainPercent() {\n    return 0.03;\n  },\n\n  get glyphMaxLevel() {\n    return PelleUpgrade.glyphLevels.effectValue;\n  },\n\n  get glyphStrength() {\n    return 1;\n  },\n\n  antimatterDimensionMult(x) {\n    return Decimal.pow(10, Math.log10(x + 1) + x ** 5.1 / 1e3 + 4 ** x / 1e19);\n  },\n\n  get activeGlyphType() {\n    var _Glyphs$active$filter;\n\n    return (_Glyphs$active$filter = Glyphs.active.filter(Boolean)[0]) === null || _Glyphs$active$filter === void 0 ? void 0 : _Glyphs$active$filter.type;\n  },\n\n  get hasGalaxyGenerator() {\n    return player.celestials.pelle.galaxyGenerator.unlocked;\n  },\n\n  // Transition text from \"from\" to \"to\", stage is 0-1, 0 is fully \"from\" and 1 is fully \"to\"\n  // Also adds more zalgo the bigger the stage\n  transitionText(from, to, stage = 0) {\n    const len = Math.round((from.length * (1 - stage) + to.length * stage) * 1e8) / 1e8;\n    const toInterval = len * (1 - stage);\n    let req = toInterval;\n    let str = \"\";\n\n    for (let i = 0; i < len; i++) {\n      if (i >= req) {\n        const idx = Math.floor(i * (to.length / len));\n        str += to[idx];\n        req += toInterval;\n      } else {\n        const idx = Math.floor(i * (from.length / len));\n        str += from[idx];\n      }\n    }\n\n    return zalgo(str, Math.floor(stage ** 2 * 7));\n  },\n\n  endTabNames: \"End Is Nigh Destruction Is Imminent Help Us Good Bye Forever\".split(\" \"),\n  quotes: Quotes.pelle\n};\nEventHub.logic.on(GAME_EVENT.ARMAGEDDON_AFTER, () => {\n  if (Currency.remnants.gte(1)) {\n    Pelle.quotes.arm.show();\n  }\n});\nEventHub.logic.on(GAME_EVENT.PELLE_STRIKE_UNLOCKED, () => {\n  if (PelleStrikes.infinity.hasStrike) {\n    Pelle.quotes.strike1.show();\n  }\n\n  if (PelleStrikes.powerGalaxies.hasStrike) {\n    Pelle.quotes.strike2.show();\n  }\n\n  if (PelleStrikes.eternity.hasStrike) {\n    Pelle.quotes.strike3.show();\n  }\n\n  if (PelleStrikes.ECs.hasStrike) {\n    Pelle.quotes.strike4.show();\n  }\n\n  if (PelleStrikes.dilation.hasStrike) {\n    Pelle.quotes.strike5.show();\n  }\n});\nexport class RebuyablePelleUpgradeState extends RebuyableMechanicState {\n  get currency() {\n    return Currency.realityShards;\n  }\n\n  get boughtAmount() {\n    return player.celestials.pelle.rebuyables[this.id];\n  }\n\n  set boughtAmount(value) {\n    player.celestials.pelle.rebuyables[this.id] = value;\n  }\n\n  get isCapped() {\n    return this.boughtAmount >= this.config.cap;\n  }\n\n  get isCustomEffect() {\n    return true;\n  }\n\n  get effectValue() {\n    return this.config.effect(this.boughtAmount);\n  }\n\n  onPurchased() {\n    if (this.id === \"glyphLevels\") EventHub.dispatch(GAME_EVENT.GLYPHS_CHANGED);\n  }\n\n}\nexport class PelleUpgradeState extends SetPurchasableMechanicState {\n  get set() {\n    return player.celestials.pelle.upgrades;\n  }\n\n  get currency() {\n    return Currency.realityShards;\n  }\n\n  get description() {\n    return this.config.description;\n  }\n\n  get cost() {\n    return this.config.cost;\n  }\n\n  get isAvailableForPurchase() {\n    return Pelle.isDoomed;\n  }\n\n}\nexport const PelleUpgrade = mapGameDataToObject(GameDatabase.celestials.pelle.upgrades, config => config.rebuyable ? new RebuyablePelleUpgradeState(config) : new PelleUpgradeState(config));\nPelleUpgrade.rebuyables = PelleUpgrade.all.filter(u => u.isRebuyable); // An upgrade was added post-release; it's simpler to just sort them by cost rather than to migrate the internal data\n\nPelleUpgrade.singles = PelleUpgrade.all.filter(u => !u.isRebuyable).sort((a, b) => a.cost - b.cost);","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/celestials/pelle/pelle.js"],"names":["Currency","DC","RebuyableMechanicState","SetPurchasableMechanicState","Quotes","wordShift","zalgo","disabledMechanicUnlocks","achievements","IPMults","EPMults","galaxies","InfinitiedMults","infinitiedGen","eternityGain","eternityMults","studies","EPgen","autoec","replicantiIntervalMult","tpMults","glyphs","PelleRifts","vacuum","milestones","canBeApplied","V","singularity","continuum","alchemy","achievementMult","blackhole","effarig","imaginaryUpgrades","glyphsac","antimatterDimAutobuyer1","PelleUpgrade","antimatterDimAutobuyers1","antimatterDimAutobuyer2","antimatterDimAutobuyer3","antimatterDimAutobuyer4","antimatterDimAutobuyer5","antimatterDimAutobuyers2","antimatterDimAutobuyer6","antimatterDimAutobuyer7","antimatterDimAutobuyer8","tickspeedAutobuyer","dimBoostAutobuyer","galaxyAutobuyer","timeTheoremAutobuyer","rupg10","dtMults","chargedInfinityUpgrades","alteration","timeTheorems","Pelle","symbol","possessiveName","initializeRun","isDoomed","armageddon","Glyphs","harshAutoClean","unequipAll","Modal","hideAll","message","show","freeInventorySpace","formatInt","type","BASIC_GLYPH_TYPES","addToInventory","GlyphGenerator","doomedGlyph","refreshActive","player","options","confirmations","glyphReplace","reality","automator","state","repeat","forceRestart","BlackHoles","arePaused","togglePause","celestials","pelle","doomed","respecTimeStudies","infinityPoints","reset","IPMultPurchases","Autobuyer","bigCrunch","mode","AUTO_CRUNCH_MODE","AMOUNT","disChargeAll","clearCelestialRuns","auto","antimatterDims","isActive","buyUntil10","records","realTimeDoomed","res","AlchemyResources","all","amount","AutomatorBackend","stop","shopTab","GameDatabase","tabs","find","t","key","id","hiddenTabBits","tabsToIgnore","ignoredIDs","filter","includes","map","tabIndex","length","hiddenSubtabBits","quotes","initial","GameStorage","save","displayName","Date","now","randomCrossWords","isUnlocked","ImaginaryUpgrade","isBought","isDisabled","mechanic","console","error","upgrade","Boolean","canArmageddon","remnantsGain","gainStuff","EventHub","dispatch","GAME_EVENT","ARMAGEDDON_BEFORE","cel","remnants","finishProcessReality","enslaved","isStoringReal","autoStoreReal","PelleStrikes","dilation","hasStrike","active","ARMAGEDDON_AFTER","gameLoop","diff","realityShards","add","realityShardGainPerSecond","times","div","forEach","r","fill","disabledAchievements","uselessInfinityUpgrades","uselessTimeStudies","disabledRUPGs","uselessPerks","specialGlyphEffect","chaos","description","getSpecialGlyphEffectDescription","activeGlyphType","infinity","challenge","eternity","current","value","plus","pow","D1","time","eternityPoints","replication","percentage","Decimal","totalTachyonGalaxies","max","power","companion","isScaling","formatX","wordCycle","name","formatPercents","undefined","remnantRequirementForDilation","canDilateInPelle","resetResourcesForDilation","totalAntimatter","totalInfinityPoints","totalEternityPoints","am","log10","ip","ep","gain","Math","floor","realityShardGain","minus","nextRealityShardGain","riftDrainPercent","glyphMaxLevel","glyphLevels","effectValue","glyphStrength","antimatterDimensionMult","x","hasGalaxyGenerator","galaxyGenerator","unlocked","transitionText","from","to","stage","len","round","toInterval","req","str","i","idx","endTabNames","split","logic","on","gte","arm","PELLE_STRIKE_UNLOCKED","strike1","powerGalaxies","strike2","strike3","ECs","strike4","strike5","RebuyablePelleUpgradeState","currency","boughtAmount","rebuyables","isCapped","config","cap","isCustomEffect","effect","onPurchased","GLYPHS_CHANGED","PelleUpgradeState","set","upgrades","cost","isAvailableForPurchase","mapGameDataToObject","rebuyable","u","isRebuyable","singles","sort","a","b"],"mappings":"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","sourcesContent":["import { Currency } from \"../../currency\";\r\nimport { DC } from \"../../constants\";\r\nimport { RebuyableMechanicState } from \"../../game-mechanics/rebuyable\";\r\nimport { SetPurchasableMechanicState } from \"../../utils\";\r\n\r\nimport { Quotes } from \"../quotes\";\r\n\r\nimport wordShift from \"../../word-shift\";\r\n\r\nimport zalgo from \"./zalgo\";\r\n\r\n\r\nconst disabledMechanicUnlocks = {\r\n  achievements: () => ({}),\r\n  IPMults: () => ({}),\r\n  EPMults: () => ({}),\r\n  galaxies: () => ({}),\r\n  InfinitiedMults: () => ({}),\r\n  infinitiedGen: () => ({}),\r\n  eternityGain: () => ({}),\r\n  eternityMults: () => ({}),\r\n  studies: () => ({}),\r\n  EPgen: () => ({}),\r\n  autoec: () => ({}),\r\n  replicantiIntervalMult: () => ({}),\r\n  tpMults: () => ({}),\r\n  glyphs: () => !PelleRifts.vacuum.milestones[0].canBeApplied,\r\n  V: () => ({}),\r\n  singularity: () => ({}),\r\n  continuum: () => ({}),\r\n  alchemy: () => ({}),\r\n  achievementMult: () => ({}),\r\n  blackhole: () => ({}),\r\n  effarig: () => ({}),\r\n  imaginaryUpgrades: () => ({}),\r\n  glyphsac: () => ({}),\r\n  antimatterDimAutobuyer1: () => PelleUpgrade.antimatterDimAutobuyers1,\r\n  antimatterDimAutobuyer2: () => PelleUpgrade.antimatterDimAutobuyers1,\r\n  antimatterDimAutobuyer3: () => PelleUpgrade.antimatterDimAutobuyers1,\r\n  antimatterDimAutobuyer4: () => PelleUpgrade.antimatterDimAutobuyers1,\r\n  antimatterDimAutobuyer5: () => PelleUpgrade.antimatterDimAutobuyers2,\r\n  antimatterDimAutobuyer6: () => PelleUpgrade.antimatterDimAutobuyers2,\r\n  antimatterDimAutobuyer7: () => PelleUpgrade.antimatterDimAutobuyers2,\r\n  antimatterDimAutobuyer8: () => PelleUpgrade.antimatterDimAutobuyers2,\r\n  tickspeedAutobuyer: () => PelleUpgrade.tickspeedAutobuyer,\r\n  dimBoostAutobuyer: () => PelleUpgrade.dimBoostAutobuyer,\r\n  galaxyAutobuyer: () => PelleUpgrade.galaxyAutobuyer,\r\n  timeTheoremAutobuyer: () => ({}),\r\n  rupg10: () => ({}),\r\n  dtMults: () => ({}),\r\n  chargedInfinityUpgrades: () => ({}),\r\n  alteration: () => ({}),\r\n  timeTheorems: () => ({})\r\n};\r\n\r\nexport const Pelle = {\r\n  symbol: \"â™…\",\r\n  // Suppress the randomness for this form\r\n  possessiveName: \"Pelle's\",\r\n\r\n  // This is called upon initial Dooming and after every Armageddon when using the modal\r\n  initializeRun() {\r\n    if (this.isDoomed) {\r\n      Pelle.armageddon(true);\r\n      return;\r\n    }\r\n\r\n    Glyphs.harshAutoClean();\r\n    if (!Glyphs.unequipAll()) {\r\n      Modal.hideAll();\r\n      Modal.message.show(`Dooming your Reality will unequip your Glyphs. Some of your\r\n        Glyphs could not be unequipped due to lack of inventory space.`, 1);\r\n      return;\r\n    }\r\n    Glyphs.harshAutoClean();\r\n    if (Glyphs.freeInventorySpace < 5) {\r\n      Modal.hideAll();\r\n      Modal.message.show(`You must have enough empty unprotected Glyph slots for\r\n        ${formatInt(5)} additional Glyphs in order to Doom your Reality.`, 1);\r\n      return;\r\n    }\r\n    for (const type of BASIC_GLYPH_TYPES) Glyphs.addToInventory(GlyphGenerator.doomedGlyph(type));\r\n    Glyphs.refreshActive();\r\n    player.options.confirmations.glyphReplace = true;\r\n    player.reality.automator.state.repeat = false;\r\n    player.reality.automator.state.forceRestart = false;\r\n    if (BlackHoles.arePaused) BlackHoles.togglePause();\r\n    player.celestials.pelle.doomed = true;\r\n    Pelle.armageddon(false);\r\n    respecTimeStudies(true);\r\n    Currency.infinityPoints.reset();\r\n    player.IPMultPurchases = 0;\r\n    Autobuyer.bigCrunch.mode = AUTO_CRUNCH_MODE.AMOUNT;\r\n    disChargeAll();\r\n    clearCelestialRuns();\r\n\r\n    // Force-enable the group toggle for AD autobuyers to be active; whether or not they can actually tick\r\n    // is still handled through if the autobuyers are unlocked at all. This fixes an odd edge case where the player\r\n    // enters cel7 with AD autobuyers disabled - AD autobuyers need to be reupgraded, but the UI component\r\n    // for the group toggle is hidden until they're all re-upgraded to the max again.\r\n    player.auto.antimatterDims.isActive = true;\r\n\r\n    player.buyUntil10 = true;\r\n    player.records.realTimeDoomed = 0;\r\n    for (const res of AlchemyResources.all) res.amount = 0;\r\n    AutomatorBackend.stop();\r\n\r\n    // Force-unhide all tabs except for the shop tab, for which we retain the hide state instead\r\n    const shopTab = ~1 & (1 << GameDatabase.tabs.find(t => t.key === \"shop\").id);\r\n    player.options.hiddenTabBits &= shopTab;\r\n\r\n    // Force unhide MOST subtabs, although some of the tabs get ignored since they don't contain any\r\n    // meaningful interactable gameplay elements in Doomed\r\n    const tabsToIgnore = [\"statistics\", \"achievements\", \"reality\", \"celestials\"];\r\n    const ignoredIDs = GameDatabase.tabs.filter(t => tabsToIgnore.includes(t.key)).map(t => t.id);\r\n    for (let tabIndex = 0; tabIndex < GameDatabase.tabs.length; tabIndex++) {\r\n      player.options.hiddenSubtabBits[tabIndex] &= ignoredIDs.includes(tabIndex) ? -1 : 0;\r\n    }\r\n    Pelle.quotes.initial.show();\r\n    GameStorage.save(true);\r\n  },\r\n\r\n  get displayName() {\r\n    return Date.now() % 4000 > 500 ? \"Pelle\" : wordShift.randomCrossWords(\"Pelle\");\r\n  },\r\n\r\n  get isUnlocked() {\r\n    return ImaginaryUpgrade(25).isBought;\r\n  },\r\n  // This will check if a specific mechanic is disabled, like old PelleFlag(x).isActive,\r\n  // Initially it will only have isDoomed check but we will have upgrades that let you get stuff back\r\n  isDisabled(mechanic) {\r\n    if (!this.isDoomed) return false;\r\n\r\n    if (!mechanic) return true;\r\n    if (!disabledMechanicUnlocks[mechanic]) {\r\n      // eslint-disable-next-line\r\n      console.error(`Mechanic ${mechanic} isn't present in the disabledMechanicUnlocks!`);\r\n      return true;\r\n    }\r\n\r\n    const upgrade = disabledMechanicUnlocks[mechanic]();\r\n\r\n    if (typeof upgrade === \"boolean\") {\r\n      return upgrade;\r\n    }\r\n\r\n    return Boolean(!upgrade.canBeApplied);\r\n  },\r\n\r\n  get canArmageddon() {\r\n    return this.remnantsGain >= 1;\r\n  },\r\n\r\n  armageddon(gainStuff) {\r\n    if (!this.canArmageddon && gainStuff) return;\r\n    EventHub.dispatch(GAME_EVENT.ARMAGEDDON_BEFORE, gainStuff);\r\n    if (gainStuff) {\r\n      this.cel.remnants += this.remnantsGain;\r\n    }\r\n    finishProcessReality({ reset: true, armageddon: true });\r\n    disChargeAll();\r\n    player.celestials.enslaved.isStoringReal = false;\r\n    player.celestials.enslaved.autoStoreReal = false;\r\n    if (PelleStrikes.dilation.hasStrike) player.dilation.active = true;\r\n    EventHub.dispatch(GAME_EVENT.ARMAGEDDON_AFTER, gainStuff);\r\n  },\r\n\r\n  gameLoop(diff) {\r\n    if (this.isDoomed) {\r\n      Currency.realityShards.add(this.realityShardGainPerSecond.times(diff).div(1000));\r\n      PelleRifts.all.forEach(r => r.fill(diff));\r\n    }\r\n  },\r\n\r\n  get cel() {\r\n    return player.celestials.pelle;\r\n  },\r\n\r\n  get isDoomed() {\r\n    return this.cel.doomed;\r\n  },\r\n\r\n  get disabledAchievements() {\r\n    return [164, 156, 143, 142, 141, 137, 134, 133, 132, 131, 126, 125, 118, 117, 116, 113, 111, 104, 103, 95, 93, 92,\r\n      91, 87, 85, 78, 76, 74, 65, 55, 54, 37];\r\n  },\r\n\r\n  get uselessInfinityUpgrades() {\r\n    return [\"passiveGen\", \"ipMult\", \"infinitiedGeneration\"];\r\n  },\r\n\r\n  get uselessTimeStudies() {\r\n    return [32, 33, 41, 51, 61, 62, 121, 122, 123, 141, 142, 143, 192, 213];\r\n  },\r\n\r\n  get disabledRUPGs() {\r\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 22, 23, 24];\r\n  },\r\n\r\n  get uselessPerks() {\r\n    return [10, 12, 13, 14, 15, 16, 17, 30, 40, 41, 42, 43, 44, 45, 46, 51, 52,\r\n      53, 60, 61, 62, 80, 81, 82, 83, 100, 103, 104, 105, 106, 201, 202, 203, 204];\r\n  },\r\n\r\n  get specialGlyphEffect() {\r\n    const isUnlocked = this.isDoomed && PelleRifts.chaos.milestones[1].canBeApplied;\r\n    const description = this.getSpecialGlyphEffectDescription(this.activeGlyphType);\r\n    const isActive = type => isUnlocked && this.activeGlyphType === type;\r\n    return {\r\n      isUnlocked,\r\n      description,\r\n      infinity: (isActive(\"infinity\") && player.challenge.eternity.current <= 8)\r\n        ? Currency.infinityPoints.value.plus(1).pow(0.2)\r\n        : DC.D1,\r\n      time: isActive(\"time\")\r\n        ? Currency.eternityPoints.value.plus(1).pow(0.3)\r\n        : DC.D1,\r\n      replication: isActive(\"replication\")\r\n        ? 10 ** 53 ** (PelleRifts.vacuum.percentage)\r\n        : 1,\r\n      dilation: isActive(\"dilation\")\r\n        ? Decimal.pow(player.dilation.totalTachyonGalaxies, 1.5).max(1)\r\n        : DC.D1,\r\n      power: isActive(\"power\")\r\n        ? 1.02\r\n        : 1,\r\n      companion: isActive(\"companion\")\r\n        ? 1.34\r\n        : 1,\r\n      isScaling: () => [\"infinity\", \"time\", \"replication\", \"dilation\"].includes(this.activeGlyphType),\r\n    };\r\n  },\r\n  getSpecialGlyphEffectDescription(type) {\r\n    switch (type) {\r\n      case \"infinity\":\r\n        return `Infinity Point gain ${player.challenge.eternity.current <= 8\r\n          ? formatX(Currency.infinityPoints.value.plus(1).pow(0.2), 2)\r\n          : formatX(DC.D1, 2)} (based on current IP)`;\r\n      case \"time\":\r\n        return `Eternity Point gain ${formatX(Currency.eternityPoints.value.plus(1).pow(0.3), 2)}\r\n          (based on current EP)`;\r\n      case \"replication\":\r\n        return `Replication speed ${formatX(10 ** 53 ** (PelleRifts.vacuum.percentage), 2)} \\\r\n        (based on ${wordShift.wordCycle(PelleRifts.vacuum.name)})`;\r\n      case \"dilation\":\r\n        return `Dilated Time gain ${formatX(Decimal.pow(player.dilation.totalTachyonGalaxies, 1.5).max(1), 2)}\r\n          (based on Tachyon Galaxies)`;\r\n      case \"power\":\r\n        return `Galaxies are ${formatPercents(0.02)} stronger`;\r\n      case \"companion\":\r\n        return `You feel ${formatPercents(0.34)} better`;\r\n      // Undefined means that there is no glyph equipped, needs to be here since this function is used in\r\n      // both Current Glyph Effects and Glyph Tooltip\r\n      case undefined:\r\n        return \"No Glyph equipped!\";\r\n      default:\r\n        return \"You cannot equip this Glyph while Doomed!\";\r\n    }\r\n  },\r\n\r\n  get remnantRequirementForDilation() {\r\n    return 3.8e7;\r\n  },\r\n\r\n  get canDilateInPelle() {\r\n    return this.cel.remnants >= this.remnantRequirementForDilation;\r\n  },\r\n\r\n  resetResourcesForDilation() {\r\n    this.cel.records.totalAntimatter = new Decimal(\"1e180000\");\r\n    this.cel.records.totalInfinityPoints = new Decimal(\"1e60000\");\r\n    Currency.eternityPoints.reset();\r\n    // Oddly specific number? Yes, it's roughly the amount of EP you have\r\n    // when starting dilation for the first time\r\n    // Since 5th strike previously did not reset your current EP the previous reset value was kind of useless which\r\n    // lead to some balancing problems, this hopefully prevents people starting dilation too early and getting\r\n    // softlocked, or starting it too late and getting not-softlocked.\r\n    this.cel.records.totalEternityPoints = new Decimal(\"1e1050\");\r\n  },\r\n\r\n  get remnantsGain() {\r\n    let am = this.cel.records.totalAntimatter.plus(1).log10();\r\n    let ip = this.cel.records.totalInfinityPoints.plus(1).log10();\r\n    let ep = this.cel.records.totalEternityPoints.plus(1).log10();\r\n\r\n    if (PelleStrikes.dilation.hasStrike) {\r\n      am *= 500;\r\n      ip *= 10;\r\n      ep *= 5;\r\n    }\r\n\r\n    const gain = (\r\n      (Math.log10(am + 2) + Math.log10(ip + 2) + Math.log10(ep + 2)) / 1.64\r\n    ) ** 7.5;\r\n\r\n    return gain < 1 ? gain : Math.floor(gain - this.cel.remnants);\r\n  },\r\n\r\n  realityShardGain(remnants) {\r\n    return Decimal.pow(10, remnants ** (1 / 7.5) * 4).minus(1).div(1e3);\r\n  },\r\n\r\n  get realityShardGainPerSecond() {\r\n    return this.realityShardGain(this.cel.remnants);\r\n  },\r\n\r\n  get nextRealityShardGain() {\r\n    return this.realityShardGain(this.remnantsGain + this.cel.remnants);\r\n  },\r\n\r\n  // Calculations assume this is in units of proportion per second (eg. 0.03 is 3% drain per second)\r\n  get riftDrainPercent() {\r\n    return 0.03;\r\n  },\r\n\r\n  get glyphMaxLevel() {\r\n    return PelleUpgrade.glyphLevels.effectValue;\r\n  },\r\n\r\n  get glyphStrength() {\r\n    return 1;\r\n  },\r\n\r\n  antimatterDimensionMult(x) {\r\n    return Decimal.pow(10, Math.log10(x + 1) + x ** 5.1 / 1e3 + 4 ** x / 1e19);\r\n  },\r\n\r\n  get activeGlyphType() {\r\n    return Glyphs.active.filter(Boolean)[0]?.type;\r\n  },\r\n\r\n  get hasGalaxyGenerator() {\r\n    return player.celestials.pelle.galaxyGenerator.unlocked;\r\n  },\r\n\r\n  // Transition text from \"from\" to \"to\", stage is 0-1, 0 is fully \"from\" and 1 is fully \"to\"\r\n  // Also adds more zalgo the bigger the stage\r\n  transitionText(from, to, stage = 0) {\r\n    const len = Math.round((from.length * (1 - stage) + to.length * stage) * 1e8) / 1e8;\r\n    const toInterval = len * (1 - stage);\r\n    let req = toInterval;\r\n    let str = \"\";\r\n    for (let i = 0; i < len; i++) {\r\n      if (i >= req) {\r\n        const idx = Math.floor(i * (to.length / len));\r\n        str += to[idx];\r\n        req += toInterval;\r\n      } else {\r\n        const idx = Math.floor(i * (from.length / len));\r\n        str += from[idx];\r\n      }\r\n    }\r\n    return zalgo(str, Math.floor(stage ** 2 * 7));\r\n  },\r\n\r\n  endTabNames: \"End Is Nigh Destruction Is Imminent Help Us Good Bye Forever\".split(\" \"),\r\n\r\n  quotes: Quotes.pelle,\r\n};\r\n\r\nEventHub.logic.on(GAME_EVENT.ARMAGEDDON_AFTER, () => {\r\n  if (Currency.remnants.gte(1)) {\r\n    Pelle.quotes.arm.show();\r\n  }\r\n});\r\nEventHub.logic.on(GAME_EVENT.PELLE_STRIKE_UNLOCKED, () => {\r\n  if (PelleStrikes.infinity.hasStrike) {\r\n    Pelle.quotes.strike1.show();\r\n  }\r\n  if (PelleStrikes.powerGalaxies.hasStrike) {\r\n    Pelle.quotes.strike2.show();\r\n  }\r\n  if (PelleStrikes.eternity.hasStrike) {\r\n    Pelle.quotes.strike3.show();\r\n  }\r\n  if (PelleStrikes.ECs.hasStrike) {\r\n    Pelle.quotes.strike4.show();\r\n  }\r\n  if (PelleStrikes.dilation.hasStrike) {\r\n    Pelle.quotes.strike5.show();\r\n  }\r\n});\r\n\r\nexport class RebuyablePelleUpgradeState extends RebuyableMechanicState {\r\n  get currency() {\r\n    return Currency.realityShards;\r\n  }\r\n\r\n  get boughtAmount() {\r\n    return player.celestials.pelle.rebuyables[this.id];\r\n  }\r\n\r\n  set boughtAmount(value) {\r\n    player.celestials.pelle.rebuyables[this.id] = value;\r\n  }\r\n\r\n  get isCapped() {\r\n    return this.boughtAmount >= this.config.cap;\r\n  }\r\n\r\n  get isCustomEffect() { return true; }\r\n\r\n  get effectValue() {\r\n    return this.config.effect(this.boughtAmount);\r\n  }\r\n\r\n  onPurchased() {\r\n    if (this.id === \"glyphLevels\") EventHub.dispatch(GAME_EVENT.GLYPHS_CHANGED);\r\n  }\r\n}\r\n\r\nexport class PelleUpgradeState extends SetPurchasableMechanicState {\r\n\r\n  get set() {\r\n    return player.celestials.pelle.upgrades;\r\n  }\r\n\r\n  get currency() {\r\n    return Currency.realityShards;\r\n  }\r\n\r\n  get description() {\r\n    return this.config.description;\r\n  }\r\n\r\n  get cost() {\r\n    return this.config.cost;\r\n  }\r\n\r\n  get isAvailableForPurchase() {\r\n    return Pelle.isDoomed;\r\n  }\r\n\r\n}\r\n\r\nexport const PelleUpgrade = mapGameDataToObject(\r\n  GameDatabase.celestials.pelle.upgrades,\r\n  config => (config.rebuyable\r\n    ? new RebuyablePelleUpgradeState(config)\r\n    : new PelleUpgradeState(config)\r\n  )\r\n);\r\n\r\nPelleUpgrade.rebuyables = PelleUpgrade.all.filter(u => u.isRebuyable);\r\n// An upgrade was added post-release; it's simpler to just sort them by cost rather than to migrate the internal data\r\nPelleUpgrade.singles = PelleUpgrade.all.filter(u => !u.isRebuyable).sort((a, b) => a.cost - b.cost);\r\n"]},"metadata":{},"sourceType":"module"}