{"ast":null,"code":"import AutobuyerBox from \"./AutobuyerBox\";\nimport AutobuyerDropdownEntry from \"./AutobuyerDropdownEntry\";\nimport AutobuyerInput from \"./AutobuyerInput\";\nimport ExpandingControlBox from \"@/components/ExpandingControlBox\";\nexport default {\n  name: \"RealityAutobuyerBox\",\n  components: {\n    AutobuyerBox,\n    AutobuyerInput,\n    ExpandingControlBox,\n    AutobuyerDropdownEntry\n  },\n  props: {\n    isModal: {\n      type: Boolean,\n      required: false,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      mode: AUTO_REALITY_MODE.RM,\n      levelCap: 0,\n      isOverCap: false,\n      hasAlternateInputs: false\n    };\n  },\n\n  computed: {\n    autobuyer: () => Autobuyer.reality,\n    hasRelicMode: () => TeresaUnlocks.effarig.canBeApplied,\n\n    modes() {\n      const availableModes = [AUTO_REALITY_MODE.RM, AUTO_REALITY_MODE.GLYPH, AUTO_REALITY_MODE.EITHER, AUTO_REALITY_MODE.BOTH, AUTO_REALITY_MODE.TIME];\n      if (this.hasRelicMode) availableModes.push(AUTO_REALITY_MODE.RELIC_SHARD);\n      return availableModes;\n    }\n\n  },\n  methods: {\n    update() {\n      this.mode = this.autobuyer.mode;\n      this.levelCap = Glyphs.levelCap;\n      this.isOverCap = this.autobuyer.glyph > this.levelCap; // The container only has room for 2 textboxes, so we switch what they go to based on the current mode\n\n      this.hasAlternateInputs = Autobuyer.reality.mode > AUTO_REALITY_MODE.BOTH;\n    },\n\n    modeName(mode) {\n      switch (mode) {\n        case AUTO_REALITY_MODE.RM:\n          return \"Reality Machines\";\n\n        case AUTO_REALITY_MODE.GLYPH:\n          return \"Glyph level\";\n\n        case AUTO_REALITY_MODE.EITHER:\n          return \"RM OR Level\";\n\n        case AUTO_REALITY_MODE.BOTH:\n          return \"RM AND Level\";\n\n        case AUTO_REALITY_MODE.TIME:\n          return \"Real-time seconds\";\n\n        case AUTO_REALITY_MODE.RELIC_SHARD:\n          return \"Relic Shards\";\n      }\n\n      throw new Error(\"Unknown Auto Reality mode\");\n    }\n\n  }\n};","map":{"version":3,"sources":["RealityAutobuyerBox.vue"],"names":[],"mappings":"AACA,OAAA,YAAA,MAAA,gBAAA;AACA,OAAA,sBAAA,MAAA,0BAAA;AACA,OAAA,cAAA,MAAA,kBAAA;AACA,OAAA,mBAAA,MAAA,kCAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,qBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,YADA;AAEA,IAAA,cAFA;AAGA,IAAA,mBAHA;AAIA,IAAA;AAJA,GAFA;AAQA,EAAA,KAAA,EAAA;AACA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,QAAA,EAAA,KAFA;AAGA,MAAA,OAAA,EAAA;AAHA;AADA,GARA;;AAeA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,IAAA,EAAA,iBAAA,CAAA,EADA;AAEA,MAAA,QAAA,EAAA,CAFA;AAGA,MAAA,SAAA,EAAA,KAHA;AAIA,MAAA,kBAAA,EAAA;AAJA,KAAA;AAMA,GAtBA;;AAuBA,EAAA,QAAA,EAAA;AACA,IAAA,SAAA,EAAA,MAAA,SAAA,CAAA,OADA;AAEA,IAAA,YAAA,EAAA,MAAA,aAAA,CAAA,OAAA,CAAA,YAFA;;AAGA,IAAA,KAAA,GAAA;AACA,YAAA,cAAA,GAAA,CACA,iBAAA,CAAA,EADA,EAEA,iBAAA,CAAA,KAFA,EAGA,iBAAA,CAAA,MAHA,EAIA,iBAAA,CAAA,IAJA,EAKA,iBAAA,CAAA,IALA,CAAA;AAOA,UAAA,KAAA,YAAA,EAAA,cAAA,CAAA,IAAA,CAAA,iBAAA,CAAA,WAAA;AACA,aAAA,cAAA;AACA;;AAbA,GAvBA;AAsCA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,IAAA,GAAA,KAAA,SAAA,CAAA,IAAA;AACA,WAAA,QAAA,GAAA,MAAA,CAAA,QAAA;AACA,WAAA,SAAA,GAAA,KAAA,SAAA,CAAA,KAAA,GAAA,KAAA,QAAA,CAHA,CAIA;;AACA,WAAA,kBAAA,GAAA,SAAA,CAAA,OAAA,CAAA,IAAA,GAAA,iBAAA,CAAA,IAAA;AACA,KAPA;;AAQA,IAAA,QAAA,CAAA,IAAA,EAAA;AACA,cAAA,IAAA;AACA,aAAA,iBAAA,CAAA,EAAA;AAAA,iBAAA,kBAAA;;AACA,aAAA,iBAAA,CAAA,KAAA;AAAA,iBAAA,aAAA;;AACA,aAAA,iBAAA,CAAA,MAAA;AAAA,iBAAA,aAAA;;AACA,aAAA,iBAAA,CAAA,IAAA;AAAA,iBAAA,cAAA;;AACA,aAAA,iBAAA,CAAA,IAAA;AAAA,iBAAA,mBAAA;;AACA,aAAA,iBAAA,CAAA,WAAA;AAAA,iBAAA,cAAA;AANA;;AAQA,YAAA,IAAA,KAAA,CAAA,2BAAA,CAAA;AACA;;AAlBA;AAtCA,CAAA","sourcesContent":["<script>\r\nimport AutobuyerBox from \"./AutobuyerBox\";\r\nimport AutobuyerDropdownEntry from \"./AutobuyerDropdownEntry\";\r\nimport AutobuyerInput from \"./AutobuyerInput\";\r\nimport ExpandingControlBox from \"@/components/ExpandingControlBox\";\r\n\r\nexport default {\r\n  name: \"RealityAutobuyerBox\",\r\n  components: {\r\n    AutobuyerBox,\r\n    AutobuyerInput,\r\n    ExpandingControlBox,\r\n    AutobuyerDropdownEntry\r\n  },\r\n  props: {\r\n    isModal: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      mode: AUTO_REALITY_MODE.RM,\r\n      levelCap: 0,\r\n      isOverCap: false,\r\n      hasAlternateInputs: false,\r\n    };\r\n  },\r\n  computed: {\r\n    autobuyer: () => Autobuyer.reality,\r\n    hasRelicMode: () => TeresaUnlocks.effarig.canBeApplied,\r\n    modes() {\r\n      const availableModes = [\r\n        AUTO_REALITY_MODE.RM,\r\n        AUTO_REALITY_MODE.GLYPH,\r\n        AUTO_REALITY_MODE.EITHER,\r\n        AUTO_REALITY_MODE.BOTH,\r\n        AUTO_REALITY_MODE.TIME\r\n      ];\r\n      if (this.hasRelicMode) availableModes.push(AUTO_REALITY_MODE.RELIC_SHARD);\r\n      return availableModes;\r\n    },\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.mode = this.autobuyer.mode;\r\n      this.levelCap = Glyphs.levelCap;\r\n      this.isOverCap = this.autobuyer.glyph > this.levelCap;\r\n      // The container only has room for 2 textboxes, so we switch what they go to based on the current mode\r\n      this.hasAlternateInputs = Autobuyer.reality.mode > AUTO_REALITY_MODE.BOTH;\r\n    },\r\n    modeName(mode) {\r\n      switch (mode) {\r\n        case AUTO_REALITY_MODE.RM: return \"Reality Machines\";\r\n        case AUTO_REALITY_MODE.GLYPH: return \"Glyph level\";\r\n        case AUTO_REALITY_MODE.EITHER: return \"RM OR Level\";\r\n        case AUTO_REALITY_MODE.BOTH: return \"RM AND Level\";\r\n        case AUTO_REALITY_MODE.TIME: return \"Real-time seconds\";\r\n        case AUTO_REALITY_MODE.RELIC_SHARD: return \"Relic Shards\";\r\n      }\r\n      throw new Error(\"Unknown Auto Reality mode\");\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <AutobuyerBox\r\n    :autobuyer=\"autobuyer\"\r\n    :is-modal=\"isModal\"\r\n    name=\"Automatic Reality\"\r\n  >\r\n    <template #intervalSlot>\r\n      <ExpandingControlBox :auto-close=\"true\">\r\n        <template #header>\r\n          <div class=\"o-primary-btn c-autobuyer-box__mode-select c-autobuyer-box__mode-select-header\">\r\n            ▼ Current Setting: ▼\r\n            <br>\r\n            {{ modeName(mode) }}\r\n          </div>\r\n        </template>\r\n        <template #dropdown>\r\n          <AutobuyerDropdownEntry\r\n            :autobuyer=\"autobuyer\"\r\n            :modes=\"modes\"\r\n            :mode-name-fn=\"modeName\"\r\n          />\r\n        </template>\r\n      </ExpandingControlBox>\r\n    </template>\r\n    <template #toggleSlot>\r\n      <div v-if=\"hasAlternateInputs\">\r\n        Target Time (seconds):\r\n      </div>\r\n      <div v-else>\r\n        Target Reality Machines:\r\n      </div>\r\n      <AutobuyerInput\r\n        :autobuyer=\"autobuyer\"\r\n        :type=\"hasAlternateInputs ? 'float' : 'decimal'\"\r\n        :property=\"hasAlternateInputs ? 'time' : 'rm'\"\r\n      />\r\n    </template>\r\n    <template #checkboxSlot>\r\n      <div v-if=\"hasAlternateInputs && hasRelicMode\">\r\n        Target Relic Shards:\r\n      </div>\r\n      <div v-else>\r\n        Target Glyph level:\r\n      </div>\r\n      <AutobuyerInput\r\n        :autobuyer=\"autobuyer\"\r\n        :type=\"(hasAlternateInputs && hasRelicMode) ? 'decimal' : 'int'\"\r\n        :property=\"(hasAlternateInputs && hasRelicMode) ? 'shard' : 'glyph'\"\r\n      />\r\n      <div v-if=\"isOverCap\">\r\n        Autobuyer will trigger at the Glyph level cap of {{ formatInt(levelCap) }}.\r\n      </div>\r\n    </template>\r\n  </AutobuyerBox>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/autobuyers"},"metadata":{},"sourceType":"module"}