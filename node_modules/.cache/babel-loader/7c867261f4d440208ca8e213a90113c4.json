{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport { AUTOMATOR_TYPE } from \"@/core/automator/automator-backend\";\nimport AutomatorBlocks from \"./AutomatorBlocks\";\nimport AutomatorButton from \"./AutomatorButton\";\nimport AutomatorDataTransferPage from \"./AutomatorDataTransferPage\";\nimport AutomatorDefinePage from \"./AutomatorDefinePage\";\nimport AutomatorDocsCommandList from \"./AutomatorDocsCommandList\";\nimport AutomatorDocsIntroPage from \"./AutomatorDocsIntroPage\";\nimport AutomatorDocsTemplateList from \"./AutomatorDocsTemplateList\";\nimport AutomatorErrorPage from \"./AutomatorErrorPage\";\nimport AutomatorEventLog from \"./AutomatorEventLog\";\nimport AutomatorScriptDropdownEntryList from \"./AutomatorScriptDropdownEntryList\";\nimport ExpandingControlBox from \"@/components/ExpandingControlBox\";\nexport const AutomatorPanels = {\n  INTRO_PAGE: 0,\n  COMMANDS: 1,\n  ERRORS: 2,\n  EVENTS: 3,\n  DATA_TRANSFER: 4,\n  CONSTANTS: 5,\n  TEMPLATES: 6,\n  BLOCKS: 7\n};\nexport default {\n  name: \"AutomatorDocs\",\n  components: {\n    AutomatorButton,\n    AutomatorDocsCommandList,\n    AutomatorErrorPage,\n    AutomatorEventLog,\n    AutomatorDataTransferPage,\n    AutomatorBlocks,\n    AutomatorDocsIntroPage,\n    AutomatorDocsTemplateList,\n    AutomatorDefinePage,\n    AutomatorScriptDropdownEntryList,\n    ExpandingControlBox\n  },\n\n  data() {\n    return {\n      isBlock: false,\n      infoPaneID: 1,\n      errorCount: 0,\n      editingName: false,\n      isNameTooLong: false,\n      scripts: [],\n      runningScriptID: 0,\n      totalChars: 0,\n      scriptCount: 0,\n      canMakeNewScript: true\n    };\n  },\n\n  computed: {\n    fullScreen: {\n      get() {\n        return this.$viewModel.tabs.reality.automator.fullScreen;\n      },\n\n      set(value) {\n        this.$viewModel.tabs.reality.automator.fullScreen = value;\n        AutomatorData.isEditorFullscreen = value;\n      }\n\n    },\n\n    fullScreenIconClass() {\n      return this.fullScreen ? \"fa-compress-arrows-alt\" : \"fa-expand-arrows-alt\";\n    },\n\n    fullScreenTooltip() {\n      return this.fullScreen ? \"Exit full screen\" : \"Expand to full screen\";\n    },\n\n    errorTooltip() {\n      return `Your script has ${quantify(\"error\", this.errorCount)}`;\n    },\n\n    nameTooltip() {\n      return this.isNameTooLong ? `Names cannot be longer than ${formatInt(AutomatorData.MAX_ALLOWED_SCRIPT_NAME_LENGTH)} characters!` : \"\";\n    },\n\n    currentScriptID: {\n      get() {\n        return this.$viewModel.tabs.reality.automator.editorScriptID;\n      },\n\n      set(value) {\n        this.$viewModel.tabs.reality.automator.editorScriptID = value;\n        if (AutomatorTextUI.editor) AutomatorTextUI.editor.performLint();\n      }\n\n    },\n\n    currentScriptContent() {\n      return player.reality.automator.scripts[this.currentScriptID].content;\n    },\n\n    currentScript() {\n      return CodeMirror.Doc(this.currentScriptContent, \"automato\").getValue();\n    },\n\n    errorStyle() {\n      return {\n        \"background-color\": this.errorCount === 0 ? \"\" : \"red\"\n      };\n    },\n\n    maxTotalChars() {\n      return AutomatorData.MAX_ALLOWED_TOTAL_CHARACTERS;\n    },\n\n    maxScriptCount() {\n      return AutomatorData.MAX_ALLOWED_SCRIPT_COUNT;\n    },\n\n    panelEnum() {\n      return AutomatorPanels;\n    },\n\n    importTooltip() {\n      return this.canMakeNewScript ? \"Import single automator script or data\" : \"You have too many scripts to import another!\";\n    },\n\n    currentEditorScriptName() {\n      return this.scripts.find(s => s.id === this.currentScriptID).name;\n    }\n\n  },\n  watch: {\n    infoPaneID(newValue) {\n      player.reality.automator.currentInfoPane = newValue;\n    }\n\n  },\n\n  created() {\n    this.on$(GAME_EVENT.GAME_LOAD, () => this.onGameLoad());\n    this.on$(GAME_EVENT.AUTOMATOR_SAVE_CHANGED, () => this.onGameLoad());\n    this.on$(GAME_EVENT.AUTOMATOR_TYPE_CHANGED, () => this.openMatchingAutomatorTypeDocs());\n    this.onGameLoad();\n  },\n\n  destroyed() {\n    this.fullScreen = false;\n  },\n\n  methods: {\n    update() {\n      this.isBlock = player.reality.automator.type === AUTOMATOR_TYPE.BLOCK;\n      this.infoPaneID = player.reality.automator.currentInfoPane;\n      this.errorCount = AutomatorData.currentErrors().length;\n      this.runningScriptID = AutomatorBackend.state.topLevelScript;\n      this.totalChars = AutomatorData.totalScriptCharacters();\n      this.scriptCount = Object.keys(player.reality.automator.scripts).length;\n      this.canMakeNewScript = this.scriptCount < this.maxScriptCount;\n      this.currentScriptID = player.reality.automator.state.editorScript;\n    },\n\n    exportScript() {\n      const toExport = AutomatorBackend.exportCurrentScriptContents();\n\n      if (toExport) {\n        copyToClipboard(toExport);\n        GameUI.notify.automator(\"Exported current Automator script to your clipboard\");\n      } else {\n        GameUI.notify.error(\"Could not export blank Automator script!\");\n      }\n    },\n\n    importScript() {\n      if (!this.canMakeNewScript) return;\n      Modal.importScriptData.show();\n    },\n\n    onGameLoad() {\n      this.updateCurrentScriptID();\n      this.updateScriptList();\n      this.fixAutomatorTypeDocs();\n    },\n\n    updateScriptList() {\n      this.scripts = Object.values(player.reality.automator.scripts).map(script => ({\n        id: script.id,\n        name: script.name\n      }));\n    },\n\n    updateCurrentScriptID() {\n      AutomatorData.recalculateErrors();\n      const storedScripts = player.reality.automator.scripts;\n      this.currentScriptID = player.reality.automator.state.editorScript; // This shouldn't happen if things are loaded in the right order, but might as well be sure.\n\n      if (storedScripts[this.currentScriptID] === undefined) {\n        this.currentScriptID = Number(Object.keys(storedScripts)[0]);\n        player.reality.automator.state.editorScript = this.currentScriptID;\n        AutomatorData.clearUndoData();\n      } // This gets checked whenever the editor pane is foricibly changed to a different script, which may or may not\n      // have block-parsable commands. It additionally also gets checked on new script creation, where we need to\n      // suppress the error modal instead\n\n\n      if (this.isBlock && BlockAutomator.hasUnparsableCommands(this.currentScript) && this.currentScript !== \"\") {\n        AutomatorBackend.changeModes(this.currentScriptID);\n        Modal.message.show(\"Some script commands were unrecognizable - defaulting to text editor.\");\n      }\n\n      this.$nextTick(() => {\n        BlockAutomator.updateEditor(this.currentScript);\n        if (!this.isBlock && AutomatorTextUI.editor) AutomatorTextUI.editor.performLint();\n      });\n    },\n\n    fixAutomatorTypeDocs() {\n      const automator = player.reality.automator;\n\n      if (automator.currentInfoPane === AutomatorPanels.COMMANDS && automator.type === AUTOMATOR_TYPE.BLOCK) {\n        this.openMatchingAutomatorTypeDocs();\n      }\n\n      if (automator.currentInfoPane === AutomatorPanels.BLOCKS && automator.type === AUTOMATOR_TYPE.TEXT) {\n        this.openMatchingAutomatorTypeDocs();\n      }\n    },\n\n    openMatchingAutomatorTypeDocs() {\n      const automator = player.reality.automator;\n      automator.currentInfoPane = automator.type === AUTOMATOR_TYPE.BLOCK ? AutomatorPanels.BLOCKS : AutomatorPanels.COMMANDS;\n    },\n\n    rename() {\n      this.editingName = true;\n      this.$nextTick(() => {\n        this.updateCurrentScriptID();\n        this.$refs.renameInput.value = player.reality.automator.scripts[this.currentScriptID].name;\n        this.$refs.renameInput.focus();\n      });\n    },\n\n    deleteScript() {\n      Modal.automatorScriptDelete.show({\n        scriptID: this.currentScriptID\n      });\n    },\n\n    nameEdited() {\n      // Trim off leading and trailing whitespace\n      const trimmed = this.$refs.renameInput.value.match(/^[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*?)[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*$/);\n      let newName = \"\";\n      if (trimmed.length === 2 && trimmed[1].length > 0) newName = trimmed[1];\n\n      if (newName.length > AutomatorData.MAX_ALLOWED_SCRIPT_NAME_LENGTH) {\n        this.isNameTooLong = true;\n        return;\n      }\n\n      this.isNameTooLong = false;\n      player.reality.automator.scripts[this.currentScriptID].name = newName;\n      this.updateScriptList();\n      this.$nextTick(() => this.editingName = false);\n    },\n\n    activePanelClass(id) {\n      return {\n        \"c-automator__button--active\": this.infoPaneID === id\n      };\n    }\n\n  }\n};","map":{"version":3,"sources":["AutomatorDocs.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport { AUTOMATOR_TYPE } from \"@/core/automator/automator-backend\";\r\nimport AutomatorBlocks from \"./AutomatorBlocks\";\r\nimport AutomatorButton from \"./AutomatorButton\";\r\nimport AutomatorDataTransferPage from \"./AutomatorDataTransferPage\";\r\nimport AutomatorDefinePage from \"./AutomatorDefinePage\";\r\nimport AutomatorDocsCommandList from \"./AutomatorDocsCommandList\";\r\nimport AutomatorDocsIntroPage from \"./AutomatorDocsIntroPage\";\r\nimport AutomatorDocsTemplateList from \"./AutomatorDocsTemplateList\";\r\nimport AutomatorErrorPage from \"./AutomatorErrorPage\";\r\nimport AutomatorEventLog from \"./AutomatorEventLog\";\r\nimport AutomatorScriptDropdownEntryList from \"./AutomatorScriptDropdownEntryList\";\r\nimport ExpandingControlBox from \"@/components/ExpandingControlBox\";\r\n\r\nexport const AutomatorPanels = {\r\n  INTRO_PAGE: 0,\r\n  COMMANDS: 1,\r\n  ERRORS: 2,\r\n  EVENTS: 3,\r\n  DATA_TRANSFER: 4,\r\n  CONSTANTS: 5,\r\n  TEMPLATES: 6,\r\n  BLOCKS: 7\r\n};\r\n\r\nexport default {\r\n  name: \"AutomatorDocs\",\r\n  components: {\r\n    AutomatorButton,\r\n    AutomatorDocsCommandList,\r\n    AutomatorErrorPage,\r\n    AutomatorEventLog,\r\n    AutomatorDataTransferPage,\r\n    AutomatorBlocks,\r\n    AutomatorDocsIntroPage,\r\n    AutomatorDocsTemplateList,\r\n    AutomatorDefinePage,\r\n    AutomatorScriptDropdownEntryList,\r\n    ExpandingControlBox,\r\n  },\r\n  data() {\r\n    return {\r\n      isBlock: false,\r\n      infoPaneID: 1,\r\n      errorCount: 0,\r\n      editingName: false,\r\n      isNameTooLong: false,\r\n      scripts: [],\r\n      runningScriptID: 0,\r\n      totalChars: 0,\r\n      scriptCount: 0,\r\n      canMakeNewScript: true\r\n    };\r\n  },\r\n  computed: {\r\n    fullScreen: {\r\n      get() {\r\n        return this.$viewModel.tabs.reality.automator.fullScreen;\r\n      },\r\n      set(value) {\r\n        this.$viewModel.tabs.reality.automator.fullScreen = value;\r\n        AutomatorData.isEditorFullscreen = value;\r\n      }\r\n    },\r\n    fullScreenIconClass() {\r\n      return this.fullScreen ? \"fa-compress-arrows-alt\" : \"fa-expand-arrows-alt\";\r\n    },\r\n    fullScreenTooltip() {\r\n      return this.fullScreen ? \"Exit full screen\" : \"Expand to full screen\";\r\n    },\r\n    errorTooltip() {\r\n      return `Your script has ${quantify(\"error\", this.errorCount)}`;\r\n    },\r\n    nameTooltip() {\r\n      return this.isNameTooLong\r\n        ? `Names cannot be longer than ${formatInt(AutomatorData.MAX_ALLOWED_SCRIPT_NAME_LENGTH)} characters!`\r\n        : \"\";\r\n    },\r\n    currentScriptID: {\r\n      get() {\r\n        return this.$viewModel.tabs.reality.automator.editorScriptID;\r\n      },\r\n      set(value) {\r\n        this.$viewModel.tabs.reality.automator.editorScriptID = value;\r\n        if (AutomatorTextUI.editor) AutomatorTextUI.editor.performLint();\r\n      }\r\n    },\r\n    currentScriptContent() {\r\n      return player.reality.automator.scripts[this.currentScriptID].content;\r\n    },\r\n    currentScript() {\r\n      return CodeMirror.Doc(this.currentScriptContent, \"automato\").getValue();\r\n    },\r\n    errorStyle() {\r\n      return {\r\n        \"background-color\": this.errorCount === 0 ? \"\" : \"red\"\r\n      };\r\n    },\r\n    maxTotalChars() {\r\n      return AutomatorData.MAX_ALLOWED_TOTAL_CHARACTERS;\r\n    },\r\n    maxScriptCount() {\r\n      return AutomatorData.MAX_ALLOWED_SCRIPT_COUNT;\r\n    },\r\n    panelEnum() {\r\n      return AutomatorPanels;\r\n    },\r\n    importTooltip() {\r\n      return this.canMakeNewScript\r\n        ? \"Import single automator script or data\"\r\n        : \"You have too many scripts to import another!\";\r\n    },\r\n    currentEditorScriptName() {\r\n      return this.scripts.find(s => s.id === this.currentScriptID).name;\r\n    },\r\n  },\r\n  watch: {\r\n    infoPaneID(newValue) {\r\n      player.reality.automator.currentInfoPane = newValue;\r\n    }\r\n  },\r\n  created() {\r\n    this.on$(GAME_EVENT.GAME_LOAD, () => this.onGameLoad());\r\n    this.on$(GAME_EVENT.AUTOMATOR_SAVE_CHANGED, () => this.onGameLoad());\r\n    this.on$(GAME_EVENT.AUTOMATOR_TYPE_CHANGED, () => this.openMatchingAutomatorTypeDocs());\r\n    this.onGameLoad();\r\n  },\r\n  destroyed() {\r\n    this.fullScreen = false;\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isBlock = player.reality.automator.type === AUTOMATOR_TYPE.BLOCK;\r\n      this.infoPaneID = player.reality.automator.currentInfoPane;\r\n      this.errorCount = AutomatorData.currentErrors().length;\r\n      this.runningScriptID = AutomatorBackend.state.topLevelScript;\r\n      this.totalChars = AutomatorData.totalScriptCharacters();\r\n      this.scriptCount = Object.keys(player.reality.automator.scripts).length;\r\n      this.canMakeNewScript = this.scriptCount < this.maxScriptCount;\r\n      this.currentScriptID = player.reality.automator.state.editorScript;\r\n    },\r\n    exportScript() {\r\n      const toExport = AutomatorBackend.exportCurrentScriptContents();\r\n      if (toExport) {\r\n        copyToClipboard(toExport);\r\n        GameUI.notify.automator(\"Exported current Automator script to your clipboard\");\r\n      } else {\r\n        GameUI.notify.error(\"Could not export blank Automator script!\");\r\n      }\r\n    },\r\n    importScript() {\r\n      if (!this.canMakeNewScript) return;\r\n      Modal.importScriptData.show();\r\n    },\r\n    onGameLoad() {\r\n      this.updateCurrentScriptID();\r\n      this.updateScriptList();\r\n      this.fixAutomatorTypeDocs();\r\n    },\r\n    updateScriptList() {\r\n      this.scripts = Object.values(player.reality.automator.scripts).map(script => ({\r\n        id: script.id,\r\n        name: script.name,\r\n      }));\r\n    },\r\n    updateCurrentScriptID() {\r\n      AutomatorData.recalculateErrors();\r\n      const storedScripts = player.reality.automator.scripts;\r\n      this.currentScriptID = player.reality.automator.state.editorScript;\r\n      // This shouldn't happen if things are loaded in the right order, but might as well be sure.\r\n      if (storedScripts[this.currentScriptID] === undefined) {\r\n        this.currentScriptID = Number(Object.keys(storedScripts)[0]);\r\n        player.reality.automator.state.editorScript = this.currentScriptID;\r\n        AutomatorData.clearUndoData();\r\n      }\r\n\r\n      // This gets checked whenever the editor pane is foricibly changed to a different script, which may or may not\r\n      // have block-parsable commands. It additionally also gets checked on new script creation, where we need to\r\n      // suppress the error modal instead\r\n      if (this.isBlock && BlockAutomator.hasUnparsableCommands(this.currentScript) && this.currentScript !== \"\") {\r\n        AutomatorBackend.changeModes(this.currentScriptID);\r\n        Modal.message.show(\"Some script commands were unrecognizable - defaulting to text editor.\");\r\n      }\r\n\r\n      this.$nextTick(() => {\r\n        BlockAutomator.updateEditor(this.currentScript);\r\n        if (!this.isBlock && AutomatorTextUI.editor) AutomatorTextUI.editor.performLint();\r\n      });\r\n    },\r\n    fixAutomatorTypeDocs() {\r\n      const automator = player.reality.automator;\r\n      if (automator.currentInfoPane === AutomatorPanels.COMMANDS && automator.type === AUTOMATOR_TYPE.BLOCK) {\r\n        this.openMatchingAutomatorTypeDocs();\r\n      }\r\n      if (automator.currentInfoPane === AutomatorPanels.BLOCKS && automator.type === AUTOMATOR_TYPE.TEXT) {\r\n        this.openMatchingAutomatorTypeDocs();\r\n      }\r\n    },\r\n    openMatchingAutomatorTypeDocs() {\r\n      const automator = player.reality.automator;\r\n      automator.currentInfoPane = automator.type === AUTOMATOR_TYPE.BLOCK\r\n        ? AutomatorPanels.BLOCKS\r\n        : AutomatorPanels.COMMANDS;\r\n    },\r\n    rename() {\r\n      this.editingName = true;\r\n      this.$nextTick(() => {\r\n        this.updateCurrentScriptID();\r\n        this.$refs.renameInput.value = player.reality.automator.scripts[this.currentScriptID].name;\r\n        this.$refs.renameInput.focus();\r\n      });\r\n    },\r\n    deleteScript() {\r\n      Modal.automatorScriptDelete.show({ scriptID: this.currentScriptID });\r\n    },\r\n    nameEdited() {\r\n      // Trim off leading and trailing whitespace\r\n      const trimmed = this.$refs.renameInput.value.match(/^\\s*(.*?)\\s*$/u);\r\n      let newName = \"\";\r\n      if (trimmed.length === 2 && trimmed[1].length > 0) newName = trimmed[1];\r\n\r\n      if (newName.length > AutomatorData.MAX_ALLOWED_SCRIPT_NAME_LENGTH) {\r\n        this.isNameTooLong = true;\r\n        return;\r\n      }\r\n      this.isNameTooLong = false;\r\n      player.reality.automator.scripts[this.currentScriptID].name = newName;\r\n      this.updateScriptList();\r\n      this.$nextTick(() => this.editingName = false);\r\n    },\r\n    activePanelClass(id) {\r\n      return {\r\n        \"c-automator__button--active\": this.infoPaneID === id,\r\n      };\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-automator-pane\">\r\n    <div class=\"c-automator__controls l-automator__controls\">\r\n      <div class=\"l-automator-button-row\">\r\n        <AutomatorButton\r\n          v-tooltip=\"'Automator Introduction'\"\r\n          class=\"fa-circle-info\"\r\n          :class=\"activePanelClass(panelEnum.INTRO_PAGE)\"\r\n          @click=\"infoPaneID = panelEnum.INTRO_PAGE\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'Scripting Information'\"\r\n          class=\"fa-list\"\r\n          :class=\"activePanelClass(panelEnum.COMMANDS)\"\r\n          @click=\"infoPaneID = panelEnum.COMMANDS\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"errorTooltip\"\r\n          :style=\"errorStyle\"\r\n          class=\"fa-exclamation-triangle\"\r\n          :class=\"activePanelClass(panelEnum.ERRORS)\"\r\n          @click=\"infoPaneID = panelEnum.ERRORS\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'Extended Data Transfer'\"\r\n          class=\"fa-window-restore\"\r\n          :class=\"activePanelClass(panelEnum.DATA_TRANSFER)\"\r\n          @click=\"infoPaneID = panelEnum.DATA_TRANSFER\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'View recently executed commands'\"\r\n          class=\"fa-eye\"\r\n          :class=\"activePanelClass(panelEnum.EVENTS)\"\r\n          @click=\"infoPaneID = panelEnum.EVENTS\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'Modify defined constants'\"\r\n          class=\"fa-book\"\r\n          :class=\"activePanelClass(panelEnum.CONSTANTS)\"\r\n          @click=\"infoPaneID = panelEnum.CONSTANTS\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"'Template Creator List'\"\r\n          class=\"fa-file-code\"\r\n          :class=\"activePanelClass(panelEnum.TEMPLATES)\"\r\n          @click=\"infoPaneID = panelEnum.TEMPLATES\"\r\n        />\r\n        <AutomatorButton\r\n          v-if=\"isBlock\"\r\n          v-tooltip=\"'Command menu for Block editor mode'\"\r\n          class=\"fa-cubes\"\r\n          :class=\"activePanelClass(panelEnum.BLOCKS)\"\r\n          @click=\"infoPaneID = panelEnum.BLOCKS\"\r\n        />\r\n        <span\r\n          v-if=\"fullScreen\"\r\n          class=\"c-automator__status-text c-automator__status-text--small\"\r\n          :class=\"{ 'c-automator__status-text--error' : totalChars > maxTotalChars }\"\r\n        >\r\n          Across all scripts: {{ formatInt(totalChars) }}/{{ formatInt(maxTotalChars) }}\r\n        </span>\r\n        <AutomatorButton\r\n          v-tooltip=\"fullScreenTooltip\"\r\n          :class=\"fullScreenIconClass\"\r\n          class=\"l-automator__expand-corner\"\r\n          @click=\"fullScreen = !fullScreen\"\r\n        />\r\n      </div>\r\n      <div class=\"l-automator-button-row\">\r\n        <AutomatorButton\r\n          v-tooltip=\"'Export single automator script'\"\r\n          class=\"fa-file-export\"\r\n          @click=\"exportScript\"\r\n        />\r\n        <AutomatorButton\r\n          v-tooltip=\"importTooltip\"\r\n          class=\"fa-file-import\"\r\n          :class=\"{ 'c-automator__status-text--error' : !canMakeNewScript }\"\r\n          @click=\"importScript\"\r\n        />\r\n        <div class=\"l-automator__script-names\">\r\n          <template v-if=\"!editingName\">\r\n            <ExpandingControlBox\r\n              class=\"l-automator__scripts-dropdown\"\r\n              :auto-close=\"true\"\r\n            >\r\n              <template #header>\r\n                <div class=\"c-automator-docs-script-select\">\r\n                  ▼ Current Script: {{ currentEditorScriptName }}\r\n                </div>\r\n              </template>\r\n              <template #dropdown>\r\n                <AutomatorScriptDropdownEntryList :key=\"scriptCount\" />\r\n              </template>\r\n            </ExpandingControlBox>\r\n            <AutomatorButton\r\n              v-tooltip=\"'Rename script'\"\r\n              class=\"far fa-edit\"\r\n              @click=\"rename\"\r\n            />\r\n          </template>\r\n          <input\r\n            v-else\r\n            ref=\"renameInput\"\r\n            v-tooltip=\"nameTooltip\"\r\n            class=\"l-automator__rename-input c-automator__rename-input\"\r\n            :class=\"{ 'c-long-name-box' : isNameTooLong }\"\r\n            @blur=\"nameEdited\"\r\n            @keyup.enter=\"$refs.renameInput.blur()\"\r\n          >\r\n        </div>\r\n        <AutomatorButton\r\n          v-tooltip=\"'Delete this script'\"\r\n          class=\"fas fa-trash\"\r\n          @click=\"deleteScript\"\r\n        />\r\n      </div>\r\n    </div>\r\n    <div class=\"c-automator-docs l-automator-pane__content\">\r\n      <AutomatorDocsIntroPage v-if=\"infoPaneID === panelEnum.INTRO_PAGE\" />\r\n      <AutomatorDocsCommandList v-else-if=\"infoPaneID === panelEnum.COMMANDS\" />\r\n      <AutomatorErrorPage v-else-if=\"infoPaneID === panelEnum.ERRORS\" />\r\n      <AutomatorEventLog v-else-if=\"infoPaneID === panelEnum.EVENTS\" />\r\n      <AutomatorDataTransferPage v-else-if=\"infoPaneID === panelEnum.DATA_TRANSFER\" />\r\n      <AutomatorDefinePage v-else-if=\"infoPaneID === panelEnum.CONSTANTS\" />\r\n      <AutomatorDocsTemplateList v-else-if=\"infoPaneID === panelEnum.TEMPLATES\" />\r\n      <AutomatorBlocks v-else-if=\"infoPaneID === panelEnum.BLOCKS\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.l-automator__expand-corner {\r\n  position: absolute;\r\n  right: 0;\r\n}\r\n\r\n.l-automator__script-names {\r\n  flex-grow: 1;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n}\r\n\r\n.l-automator__scripts-dropdown {\r\n  width: 100%;\r\n  margin: 0.4rem;\r\n  user-select: none;\r\n}\r\n\r\n.l-automator__rename-input {\r\n  width: 100%;\r\n  height: calc(2rem + 1rem / 3 - var(--var-border-width, 0rem) * 2);\r\n  border: var(--var-border-width, 0.2rem) solid var(--color-reality-light);\r\n  border-radius: var(--var-border-radius, 0.3rem);\r\n  margin: 0.4rem;\r\n  padding: 0.4rem;\r\n}\r\n\r\n.c-automator__rename-input {\r\n  font-family: Typewriter;\r\n  font-size: 1.2rem;\r\n  color: var(--color-automator-docs-font);\r\n  background-color: var(--color-automator-controls-active);\r\n}\r\n\r\n.c-automator__button--active {\r\n  background-color: var(--color-automator-controls-active);\r\n  border-color: var(--color-reality-light);\r\n}\r\n\r\n.c-automator__status-text {\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n  color: var(--color-reality);\r\n  padding: 0 0.5rem;\r\n}\r\n\r\n.c-automator__status-text--small {\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.c-automator__status-text--error {\r\n  color: var(--color-bad);\r\n  cursor: auto;\r\n}\r\n\r\n.c-long-name-box {\r\n  background-color: var(--color-automator-error-background);\r\n  border-color: var(--color-automator-error-outline);\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/automator"},"metadata":{},"sourceType":"module"}