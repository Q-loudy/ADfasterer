{"ast":null,"code":"import ImaginaryUpgradeButton from \"./ImaginaryUpgradeButton\";\nexport default {\n  name: \"ImaginaryUpgradesTab\",\n  components: {\n    ImaginaryUpgradeButton\n  },\n\n  data() {\n    return {\n      baseRMCap: new Decimal(),\n      capRM: new Decimal(),\n      scaleTime: 0,\n      capStr: \"\"\n    };\n  },\n\n  computed: {\n    upgrades: () => ImaginaryUpgrades.all,\n    lockTooltip: () => `Requirement locks only prevent manual and automated actions. Any related upgrades\n      will not be disabled and may still cause requirements to be failed.`\n  },\n  methods: {\n    update() {\n      this.baseRMCap.copyFrom(MachineHandler.baseRMCap);\n      this.capRM.copyFrom(MachineHandler.hardcapRM);\n      this.scaleTime = MachineHandler.scaleTimeForIM;\n      this.capStr = formatMachines(MachineHandler.hardcapRM, MachineHandler.currentIMCap);\n    },\n\n    id(row, column) {\n      return (row - 1) * 5 + column - 1;\n    }\n\n  }\n};","map":{"version":3,"sources":["ImaginaryUpgradesTab.vue"],"names":[],"mappings":"AACA,OAAA,sBAAA,MAAA,0BAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,sBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA;AADA,GAFA;;AAKA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,SAAA,EAAA,IAAA,OAAA,EADA;AAEA,MAAA,KAAA,EAAA,IAAA,OAAA,EAFA;AAGA,MAAA,SAAA,EAAA,CAHA;AAIA,MAAA,MAAA,EAAA;AAJA,KAAA;AAMA,GAZA;;AAaA,EAAA,QAAA,EAAA;AACA,IAAA,QAAA,EAAA,MAAA,iBAAA,CAAA,GADA;AAEA,IAAA,WAAA,EAAA,MAAA;AACA;AAHA,GAbA;AAkBA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,SAAA,CAAA,QAAA,CAAA,cAAA,CAAA,SAAA;AACA,WAAA,KAAA,CAAA,QAAA,CAAA,cAAA,CAAA,SAAA;AACA,WAAA,SAAA,GAAA,cAAA,CAAA,cAAA;AACA,WAAA,MAAA,GAAA,cAAA,CAAA,cAAA,CAAA,SAAA,EAAA,cAAA,CAAA,YAAA,CAAA;AACA,KANA;;AAOA,IAAA,EAAA,CAAA,GAAA,EAAA,MAAA,EAAA;AACA,aAAA,CAAA,GAAA,GAAA,CAAA,IAAA,CAAA,GAAA,MAAA,GAAA,CAAA;AACA;;AATA;AAlBA,CAAA","sourcesContent":["<script>\r\nimport ImaginaryUpgradeButton from \"./ImaginaryUpgradeButton\";\r\n\r\nexport default {\r\n  name: \"ImaginaryUpgradesTab\",\r\n  components: {\r\n    ImaginaryUpgradeButton\r\n  },\r\n  data() {\r\n    return {\r\n      baseRMCap: new Decimal(),\r\n      capRM: new Decimal(),\r\n      scaleTime: 0,\r\n      capStr: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    upgrades: () => ImaginaryUpgrades.all,\r\n    lockTooltip: () => `Requirement locks only prevent manual and automated actions. Any related upgrades\r\n      will not be disabled and may still cause requirements to be failed.`,\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.baseRMCap.copyFrom(MachineHandler.baseRMCap);\r\n      this.capRM.copyFrom(MachineHandler.hardcapRM);\r\n      this.scaleTime = MachineHandler.scaleTimeForIM;\r\n      this.capStr = formatMachines(MachineHandler.hardcapRM, MachineHandler.currentIMCap);\r\n    },\r\n    id(row, column) {\r\n      return (row - 1) * 5 + column - 1;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-reality-upgrade-grid\">\r\n    <div class=\"c-cap-text\">\r\n      Your Machine cap is <span class=\"c-reality-tab__reality-machines\">{{ capStr }}</span>.\r\n    </div>\r\n    <div class=\"c-info-text\">\r\n      You have reached the limits of Reality and cannot hold more than {{ format(capRM) }} Reality Machines.\r\n      <br>\r\n      Machines gained in excess of {{ format(baseRMCap) }} will raise the maximum amount of Imaginary Machines\r\n      you can have.\r\n      <br>\r\n      Imaginary Machines are gained passively over time up to the cap, but gain slows down exponentially\r\n      as you approach the cap.\r\n      <br>\r\n      Every {{ formatInt(scaleTime) }} seconds the difference in iM between your current amount and the cap\r\n      will be cut in half.\r\n      <br>\r\n      <br>\r\n      The first two rows of upgrades can be purchased endlessly and the rest of the upgrades are one-time upgrades\r\n      with requirements.\r\n      <br>\r\n      Upgrades here have the same gameplay and visual behavior as Reality Upgrades, but cost Imaginary Machines instead.\r\n      <span :ach-tooltip=\"lockTooltip\">\r\n        <i class=\"fas fa-question-circle\" />\r\n      </span>\r\n    </div>\r\n    <div\r\n      v-for=\"row in 5\"\r\n      :key=\"row\"\r\n      class=\"l-reality-upgrade-grid__row\"\r\n    >\r\n      <ImaginaryUpgradeButton\r\n        v-for=\"column in 5\"\r\n        :key=\"id(row, column)\"\r\n        :upgrade=\"upgrades[id(row, column)]\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-cap-text {\r\n  color: var(--color-text);\r\n  font-size: 1.5rem;\r\n}\r\n\r\n.c-info-text {\r\n  color: var(--color-text);\r\n  margin: 1.5rem;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/imaginary-upgrades"},"metadata":{},"sourceType":"module"}