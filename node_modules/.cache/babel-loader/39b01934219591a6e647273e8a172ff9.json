{"ast":null,"code":"import { STEAM } from \"@/env\"; // NOTE: IF ANY COSTS ARE CHANGED HERE, THEY ALSO NEED TO BE CHANGED ON THE BACKEND TOO\n\nexport const shopPurchases = {\n  dimPurchases: {\n    key: \"dimPurchases\",\n    cost: 30,\n    description: \"Double all your Antimatter Dimension multipliers. Forever.\",\n    multiplier: purchases => Math.pow(2, purchases),\n    formatEffect: x => `×${x > 1000 ? Notation.scientific.formatDecimal(new Decimal(x), 2) : x.toFixed(0)}`\n  },\n  allDimPurchases: {\n    key: \"allDimPurchases\",\n    cost: 60,\n    description: () => {\n      const dims = [\"Antimatter\"];\n      if (InfinityDimension(1).isUnlocked || PlayerProgress.eternityUnlocked()) dims.push(\"Infinity\");\n      if (PlayerProgress.eternityUnlocked()) dims.push(\"Time\");\n      return `Double ALL Dimension multipliers (${makeEnumeration(dims)}; multiplicative until 32x). Forever.`;\n    },\n    multiplier: purchases => purchases > 4 ? 32 + (purchases - 5) * 2 : Math.pow(2, purchases),\n    formatEffect: x => `×${x.toFixed(0)}`\n  },\n  IPPurchases: {\n    key: \"IPPurchases\",\n    cost: 40,\n    description: \"Double your Infinity Point gain from all sources. (additive)\",\n    multiplier: purchases => purchases === 0 ? 1 : 2 * purchases,\n    formatEffect: x => `×${x.toFixed(0)}`,\n    isUnlocked: () => PlayerProgress.infinityUnlocked(),\n    lockText: \"Infinity\"\n  },\n  replicantiPurchases: {\n    key: \"replicantiPurchases\",\n    cost: 60,\n    description: \"Increase your Replicanti gain by 50%. (additive)\",\n    multiplier: purchases => purchases === 0 ? 1 : 1 + 0.5 * purchases,\n    formatEffect: x => `×${x.toFixed(1)}`,\n    isUnlocked: () => Replicanti.areUnlocked || PlayerProgress.eternityUnlocked(),\n    lockText: \"Replicanti\"\n  },\n  EPPurchases: {\n    key: \"EPPurchases\",\n    cost: 50,\n    description: \"Triple your Eternity Point gain from all sources. (additive)\",\n    multiplier: purchases => purchases === 0 ? 1 : 3 * purchases,\n    formatEffect: x => `×${x.toFixed(0)}`,\n    isUnlocked: () => PlayerProgress.eternityUnlocked(),\n    lockText: \"Eternity\"\n  },\n  dilatedTimePurchases: {\n    key: \"dilatedTimePurchases\",\n    cost: 40,\n    description: \"Increase your Dilated Time gain by 50%. (additive)\",\n    multiplier: purchases => purchases === 0 ? 1 : 1 + 0.5 * purchases,\n    formatEffect: x => `×${x.toFixed(1)}`,\n    isUnlocked: () => PlayerProgress.dilationUnlocked() || PlayerProgress.realityUnlocked(),\n    lockText: \"Dilation\"\n  },\n  RMPurchases: {\n    key: \"RMPurchases\",\n    cost: 60,\n    description: \"Increase your Reality Machine gain by 100%. (additive)\",\n    multiplier: purchases => purchases + 1,\n    formatEffect: x => `×${x.toFixed(0)}`,\n    isUnlocked: () => PlayerProgress.realityUnlocked(),\n    lockText: \"Reality\"\n  },\n  smallTimeSkip: {\n    key: \"smallTimeSkip\",\n    cost: 10,\n    description: \"Get 6 hours worth of offline production. (Autobuyers don't work at full speed)\",\n    instantPurchase: true,\n    onPurchase: () => {\n      shop.purchaseTimeSkip();\n    }\n  },\n  bigTimeSkip: {\n    key: \"bigTimeSkip\",\n    cost: 20,\n    description: \"Get 24 hours worth of offline production. (Autobuyers don't work at full speed)\",\n    instantPurchase: true,\n    onPurchase: () => {\n      shop.purchaseLongerTimeSkip();\n    }\n  },\n  singleCosmeticSet: {\n    key: \"singleCosmeticSet\",\n    cost: 20,\n    description: \"Unlock a Glyph cosmetic set of your choice\",\n    instantPurchase: true,\n    onPurchase: () => {\n      // The actual unlocks are handled in the ShopPurchaseData object, so we just show notifications here\n      GameUI.notify.info(`You have purchased the \"${GlyphAppearanceHandler.chosenFromModal.name}\" Set for Glyph cosmetics!`, 10000);\n      GlyphAppearanceHandler.chosenFromModal = null;\n      GlyphAppearanceHandler.applyNotification();\n    },\n    isUnlocked: () => PlayerProgress.realityUnlocked(),\n    lockText: \"Reality\"\n  },\n  allCosmeticSets: {\n    key: \"allCosmeticSets\",\n    cost: () => {\n      // Both of these are also on the payment backend, which would need to be changed as well\n      const baseCost = 420;\n      const totalSets = Object.keys(GameDatabase.reality.glyphCosmeticSets).length; // Using this instead of the actual set count maintains consistency with the backend price,\n      // at the cost of the frontend UI being wrong for cheated saves\n\n      const currentSetCount = GlyphAppearanceHandler.expectedSetCount;\n      return Math.floor(baseCost * (totalSets - currentSetCount) / totalSets);\n    },\n    description: \"Unlock all remaining Glyph cosmetic sets at once\",\n    instantPurchase: true,\n    onPurchase: () => {\n      // The actual unlocks are handled in the ShopPurchaseData object, so we just show notifications here\n      GameUI.notify.info(`You have unlocked all sets for Glyph cosmetics!`, 15000);\n      GlyphAppearanceHandler.applyNotification();\n    },\n    isUnlocked: () => PlayerProgress.realityUnlocked(),\n    lockText: \"Reality\"\n  }\n};\n\nif (STEAM) {\n  delete shopPurchases.allCosmeticSets;\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/shop-purchases.js"],"names":["STEAM","shopPurchases","dimPurchases","key","cost","description","multiplier","purchases","Math","pow","formatEffect","x","Notation","scientific","formatDecimal","Decimal","toFixed","allDimPurchases","dims","InfinityDimension","isUnlocked","PlayerProgress","eternityUnlocked","push","makeEnumeration","IPPurchases","infinityUnlocked","lockText","replicantiPurchases","Replicanti","areUnlocked","EPPurchases","dilatedTimePurchases","dilationUnlocked","realityUnlocked","RMPurchases","smallTimeSkip","instantPurchase","onPurchase","shop","purchaseTimeSkip","bigTimeSkip","purchaseLongerTimeSkip","singleCosmeticSet","GameUI","notify","info","GlyphAppearanceHandler","chosenFromModal","name","applyNotification","allCosmeticSets","baseCost","totalSets","Object","keys","GameDatabase","reality","glyphCosmeticSets","length","currentSetCount","expectedSetCount","floor"],"mappings":"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","sourcesContent":["import { STEAM } from \"@/env\";\r\n\r\n// NOTE: IF ANY COSTS ARE CHANGED HERE, THEY ALSO NEED TO BE CHANGED ON THE BACKEND TOO\r\nexport const shopPurchases = {\r\n  dimPurchases: {\r\n    key: \"dimPurchases\",\r\n    cost: 30,\r\n    description: \"Double all your Antimatter Dimension multipliers. Forever.\",\r\n    multiplier: purchases => Math.pow(2, purchases),\r\n    formatEffect: x => `×${x > 1000 ? Notation.scientific.formatDecimal(new Decimal(x), 2) : x.toFixed(0)}`,\r\n  },\r\n  allDimPurchases: {\r\n    key: \"allDimPurchases\",\r\n    cost: 60,\r\n    description: () => {\r\n      const dims = [\"Antimatter\"];\r\n      if (InfinityDimension(1).isUnlocked || PlayerProgress.eternityUnlocked()) dims.push(\"Infinity\");\r\n      if (PlayerProgress.eternityUnlocked()) dims.push(\"Time\");\r\n      return `Double ALL Dimension multipliers (${makeEnumeration(dims)}; multiplicative until 32x). Forever.`;\r\n    },\r\n    multiplier: purchases => (purchases > 4 ? 32 + (purchases - 5) * 2 : Math.pow(2, purchases)),\r\n    formatEffect: x => `×${x.toFixed(0)}`,\r\n  },\r\n  IPPurchases: {\r\n    key: \"IPPurchases\",\r\n    cost: 40,\r\n    description: \"Double your Infinity Point gain from all sources. (additive)\",\r\n    multiplier: purchases => (purchases === 0 ? 1 : 2 * purchases),\r\n    formatEffect: x => `×${x.toFixed(0)}`,\r\n    isUnlocked: () => PlayerProgress.infinityUnlocked(),\r\n    lockText: \"Infinity\",\r\n  },\r\n  replicantiPurchases: {\r\n    key: \"replicantiPurchases\",\r\n    cost: 60,\r\n    description: \"Increase your Replicanti gain by 50%. (additive)\",\r\n    multiplier: purchases => (purchases === 0 ? 1 : 1 + 0.5 * purchases),\r\n    formatEffect: x => `×${x.toFixed(1)}`,\r\n    isUnlocked: () => Replicanti.areUnlocked || PlayerProgress.eternityUnlocked(),\r\n    lockText: \"Replicanti\",\r\n  },\r\n  EPPurchases: {\r\n    key: \"EPPurchases\",\r\n    cost: 50,\r\n    description: \"Triple your Eternity Point gain from all sources. (additive)\",\r\n    multiplier: purchases => (purchases === 0 ? 1 : 3 * purchases),\r\n    formatEffect: x => `×${x.toFixed(0)}`,\r\n    isUnlocked: () => PlayerProgress.eternityUnlocked(),\r\n    lockText: \"Eternity\",\r\n  },\r\n  dilatedTimePurchases: {\r\n    key: \"dilatedTimePurchases\",\r\n    cost: 40,\r\n    description: \"Increase your Dilated Time gain by 50%. (additive)\",\r\n    multiplier: purchases => (purchases === 0 ? 1 : 1 + 0.5 * purchases),\r\n    formatEffect: x => `×${x.toFixed(1)}`,\r\n    isUnlocked: () => PlayerProgress.dilationUnlocked() || PlayerProgress.realityUnlocked(),\r\n    lockText: \"Dilation\",\r\n  },\r\n  RMPurchases: {\r\n    key: \"RMPurchases\",\r\n    cost: 60,\r\n    description: \"Increase your Reality Machine gain by 100%. (additive)\",\r\n    multiplier: purchases => purchases + 1,\r\n    formatEffect: x => `×${x.toFixed(0)}`,\r\n    isUnlocked: () => PlayerProgress.realityUnlocked(),\r\n    lockText: \"Reality\",\r\n  },\r\n  smallTimeSkip: {\r\n    key: \"smallTimeSkip\",\r\n    cost: 10,\r\n    description: \"Get 6 hours worth of offline production. (Autobuyers don't work at full speed)\",\r\n    instantPurchase: true,\r\n    onPurchase: () => {\r\n      shop.purchaseTimeSkip();\r\n    }\r\n  },\r\n  bigTimeSkip: {\r\n    key: \"bigTimeSkip\",\r\n    cost: 20,\r\n    description: \"Get 24 hours worth of offline production. (Autobuyers don't work at full speed)\",\r\n    instantPurchase: true,\r\n    onPurchase: () => {\r\n      shop.purchaseLongerTimeSkip();\r\n    }\r\n  },\r\n  singleCosmeticSet: {\r\n    key: \"singleCosmeticSet\",\r\n    cost: 20,\r\n    description: \"Unlock a Glyph cosmetic set of your choice\",\r\n    instantPurchase: true,\r\n    onPurchase: () => {\r\n      // The actual unlocks are handled in the ShopPurchaseData object, so we just show notifications here\r\n      GameUI.notify.info(\r\n        `You have purchased the \"${GlyphAppearanceHandler.chosenFromModal.name}\" Set for Glyph cosmetics!`,\r\n        10000);\r\n      GlyphAppearanceHandler.chosenFromModal = null;\r\n      GlyphAppearanceHandler.applyNotification();\r\n    },\r\n    isUnlocked: () => PlayerProgress.realityUnlocked(),\r\n    lockText: \"Reality\",\r\n  },\r\n  allCosmeticSets: {\r\n    key: \"allCosmeticSets\",\r\n    cost: () => {\r\n      // Both of these are also on the payment backend, which would need to be changed as well\r\n      const baseCost = 420;\r\n      const totalSets = Object.keys(GameDatabase.reality.glyphCosmeticSets).length;\r\n\r\n      // Using this instead of the actual set count maintains consistency with the backend price,\r\n      // at the cost of the frontend UI being wrong for cheated saves\r\n      const currentSetCount = GlyphAppearanceHandler.expectedSetCount;\r\n      return Math.floor(baseCost * (totalSets - currentSetCount) / totalSets);\r\n    },\r\n    description: \"Unlock all remaining Glyph cosmetic sets at once\",\r\n    instantPurchase: true,\r\n    onPurchase: () => {\r\n      // The actual unlocks are handled in the ShopPurchaseData object, so we just show notifications here\r\n      GameUI.notify.info(`You have unlocked all sets for Glyph cosmetics!`, 15000);\r\n      GlyphAppearanceHandler.applyNotification();\r\n    },\r\n    isUnlocked: () => PlayerProgress.realityUnlocked(),\r\n    lockText: \"Reality\",\r\n  },\r\n};\r\n\r\nif (STEAM) {\r\n  delete shopPurchases.allCosmeticSets;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}