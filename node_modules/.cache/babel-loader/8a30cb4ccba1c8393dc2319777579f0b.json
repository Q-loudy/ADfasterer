{"ast":null,"code":"import EffectDisplay from \"@/components/EffectDisplay\";\nexport default {\n  name: \"AlchemyResourceInfo\",\n  components: {\n    EffectDisplay\n  },\n  props: {\n    resource: {\n      type: Object,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      amount: 0,\n      cap: 0,\n      capped: false,\n      flow: 0,\n      isReactionActive: false,\n      reactionProduction: 0,\n      isUnlocked: false,\n      unlockRequirement: \"\"\n    };\n  },\n\n  computed: {\n    classObject() {\n      return {\n        \"c-alchemy-resource-info\": true,\n        \"c-alchemy-resource-info--locked\": !this.isUnlocked\n      };\n    },\n\n    reaction() {\n      return this.resource.reaction;\n    },\n\n    isBaseResource() {\n      return this.resource.isBaseResource;\n    },\n\n    reactionText() {\n      if (this.resource === AlchemyResource.reality) return this.realityReactionText;\n      const reagents = this.reaction.reagents.map(r => `${format(r.cost)}${r.resource.symbol}`).join(\" + \");\n      return `${reagents} ➜ ${format(this.reactionProduction, 2, 2)}${this.resource.symbol}`;\n    },\n\n    realityReactionText() {\n      const reagents = this.reaction.reagents.map(r => r.resource.symbol).join(\" + \");\n      return `${reagents} ➜ ${this.resource.symbol}`;\n    },\n\n    effectConfig() {\n      const resource = this.resource;\n      return {\n        effect: () => resource.effectValue,\n        formatEffect: resource.config.formatEffect\n      };\n    },\n\n    resourceAmount() {\n      return formatFloat(this.amount, 1);\n    },\n\n    resourceCap() {\n      return formatFloat(this.cap, 1);\n    },\n\n    formattedFlow() {\n      const sign = this.flow >= 0 ? \"+\" : \"-\";\n      if (Math.abs(this.flow) < 0.01) return \"None\";\n      const resourceText = `${sign}${format(Math.abs(this.flow), 2, 2)}/sec`;\n      const color = this.flow > 0 ? \"9CCC65\" : \"CC6666\";\n      return `<span style=\"color:#${color}\">${resourceText}</span>`;\n    },\n\n    isDoomed: () => Pelle.isDoomed\n  },\n  methods: {\n    update() {\n      const resource = this.resource;\n      this.amount = resource.amount;\n      this.cap = resource.cap;\n      this.capped = resource.capped;\n      this.flow = resource.flow;\n      this.isUnlocked = resource.isUnlocked;\n      this.unlockRequirement = resource.lockText;\n\n      if (!this.isBaseResource) {\n        this.isReactionActive = !this.isDoomed && this.reaction.isActive;\n        this.reactionProduction = this.reaction.reactionProduction;\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["AlchemyResourceInfo.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport EffectDisplay from \"@/components/EffectDisplay\";\r\n\r\nexport default {\r\n  name: \"AlchemyResourceInfo\",\r\n  components: {\r\n    EffectDisplay\r\n  },\r\n  props: {\r\n    resource: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      amount: 0,\r\n      cap: 0,\r\n      capped: false,\r\n      flow: 0,\r\n      isReactionActive: false,\r\n      reactionProduction: 0,\r\n      isUnlocked: false,\r\n      unlockRequirement: \"\"\r\n    };\r\n  },\r\n  computed: {\r\n    classObject() {\r\n      return {\r\n        \"c-alchemy-resource-info\": true,\r\n        \"c-alchemy-resource-info--locked\": !this.isUnlocked\r\n      };\r\n    },\r\n    reaction() {\r\n      return this.resource.reaction;\r\n    },\r\n    isBaseResource() {\r\n      return this.resource.isBaseResource;\r\n    },\r\n    reactionText() {\r\n      if (this.resource === AlchemyResource.reality) return this.realityReactionText;\r\n      const reagents = this.reaction.reagents\r\n        .map(r => `${format(r.cost)}${r.resource.symbol}`)\r\n        .join(\" + \");\r\n      return `${reagents} ➜ ${format(this.reactionProduction, 2, 2)}${this.resource.symbol}`;\r\n    },\r\n    realityReactionText() {\r\n      const reagents = this.reaction.reagents\r\n        .map(r => r.resource.symbol)\r\n        .join(\" + \");\r\n      return `${reagents} ➜ ${this.resource.symbol}`;\r\n    },\r\n    effectConfig() {\r\n      const resource = this.resource;\r\n      return {\r\n        effect: () => resource.effectValue,\r\n        formatEffect: resource.config.formatEffect\r\n      };\r\n    },\r\n    resourceAmount() {\r\n      return formatFloat(this.amount, 1);\r\n    },\r\n    resourceCap() {\r\n      return formatFloat(this.cap, 1);\r\n    },\r\n    formattedFlow() {\r\n      const sign = this.flow >= 0 ? \"+\" : \"-\";\r\n      if (Math.abs(this.flow) < 0.01) return \"None\";\r\n      const resourceText = `${sign}${format(Math.abs(this.flow), 2, 2)}/sec`;\r\n      const color = this.flow > 0 ? \"9CCC65\" : \"CC6666\";\r\n      return `<span style=\"color:#${color}\">${resourceText}</span>`;\r\n    },\r\n    isDoomed: () => Pelle.isDoomed,\r\n  },\r\n  methods: {\r\n    update() {\r\n      const resource = this.resource;\r\n      this.amount = resource.amount;\r\n      this.cap = resource.cap;\r\n      this.capped = resource.capped;\r\n      this.flow = resource.flow;\r\n      this.isUnlocked = resource.isUnlocked;\r\n      this.unlockRequirement = resource.lockText;\r\n      if (!this.isBaseResource) {\r\n        this.isReactionActive = !this.isDoomed && this.reaction.isActive;\r\n        this.reactionProduction = this.reaction.reactionProduction;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    v-if=\"isUnlocked\"\r\n    :class=\"classObject\"\r\n  >\r\n    <span class=\"c-alchemy-resource-info__title\">\r\n      {{ resource.symbol }} {{ resource.name }} {{ resource.symbol }}\r\n    </span>\r\n    <span v-if=\"isDoomed\">\r\n      Destroyed by Pelle\r\n    </span>\r\n    <span v-else>\r\n      {{ capped ? \"Capped\" : \"Current\" }}: {{ resourceAmount }}/{{ resourceCap }}\r\n      (Recent change: <span v-html=\"formattedFlow\" />)\r\n    </span>\r\n    <span v-if=\"isBaseResource\">Base Resource</span>\r\n    <span v-else>Reaction: {{ isReactionActive ? \"Active\" : \"Inactive\" }} ({{ reactionText }})</span>\r\n    <span :class=\"{ 'o-pelle-disabled': isDoomed }\">\r\n      <EffectDisplay\r\n        label=\"Effect\"\r\n        :config=\"effectConfig\"\r\n      />\r\n    </span>\r\n  </div>\r\n  <div\r\n    v-else\r\n    :class=\"classObject\"\r\n  >\r\n    Unlock requirement: {{ unlockRequirement }}\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/alchemy"},"metadata":{},"sourceType":"module"}