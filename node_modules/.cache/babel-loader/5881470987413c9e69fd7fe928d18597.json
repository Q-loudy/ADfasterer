{"ast":null,"code":"import TWEEN from \"tween.js\";\nexport default {\n  name: \"TachyonParticle\",\n  props: {\n    bounds: {\n      type: Object,\n      required: true\n    },\n    isBlob: {\n      type: Boolean,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      blob: \"\"\n    };\n  },\n\n  mounted() {\n    const blobs = \"\";\n    this.blob = blobs[Math.floor(Math.random() * blobs.length)];\n    this.fly();\n  },\n\n  beforeDestroy() {\n    TWEEN.remove(this.tween);\n  },\n\n  methods: {\n    fly() {\n      const bounds = this.bounds;\n      const start = {\n        x: Math.random() * bounds.x,\n        y: Math.random() * bounds.y\n      };\n      const direction = randomUnitVector();\n      const blobSlowdown = this.isBlob ? 0.5 : 0;\n      const MIN_SPEED = 1 - blobSlowdown;\n      const MAX_SPEED = 1.5 - blobSlowdown;\n      const speed = MIN_SPEED + Math.random() * (MAX_SPEED - MIN_SPEED);\n      const intersectionLength = intersect(start, direction, {\n        x: 0,\n        y: 0\n      }, bounds);\n      const intersection = {\n        x: start.x + direction.x * intersectionLength,\n        y: start.y + direction.y * intersectionLength\n      };\n      const duration = Math.max(intersectionLength / speed, 1);\n      const position = start;\n      this.tween = new TWEEN.Tween(position).to(intersection, duration).onUpdate(() => {\n        this.$el.setAttribute(this.isBlob ? \"x\" : \"cx\", position.x);\n        this.$el.setAttribute(this.isBlob ? \"y\" : \"cy\", position.y);\n      }).easing(TWEEN.Easing.Linear.None).onComplete(this.fly.bind(this)).start(tweenTime);\n\n      function randomUnitVector() {\n        const azimuth = Math.random() * 2 * Math.PI;\n        return {\n          x: Math.cos(azimuth),\n          y: Math.sin(azimuth)\n        };\n      } // eslint-disable-next-line max-params\n\n\n      function intersect(rayStart, rayUnit, rectAA, rectBB) {\n        const dirfrac = {\n          x: 1 / rayUnit.x,\n          y: 1 / rayUnit.y\n        };\n        const t1 = (rectAA.x - rayStart.x) * dirfrac.x;\n        const t2 = (rectBB.x - rayStart.x) * dirfrac.x;\n        const t3 = (rectAA.y - rayStart.y) * dirfrac.y;\n        const t4 = (rectBB.y - rayStart.y) * dirfrac.y;\n        return Math.min(Math.max(t1, t2), Math.max(t3, t4));\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["TachyonParticle.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport TWEEN from \"tween.js\";\r\n\r\nexport default {\r\n  name: \"TachyonParticle\",\r\n  props: {\r\n    bounds: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    isBlob: {\r\n      type: Boolean,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      blob: \"\",\r\n    };\r\n  },\r\n  mounted() {\r\n    const blobs = \"\";\r\n    this.blob = blobs[Math.floor(Math.random() * blobs.length)];\r\n    this.fly();\r\n  },\r\n  beforeDestroy() {\r\n    TWEEN.remove(this.tween);\r\n  },\r\n  methods: {\r\n    fly() {\r\n      const bounds = this.bounds;\r\n      const start = {\r\n        x: Math.random() * bounds.x,\r\n        y: Math.random() * bounds.y\r\n      };\r\n      const direction = randomUnitVector();\r\n      const blobSlowdown = this.isBlob ? 0.5 : 0;\r\n      const MIN_SPEED = 1 - blobSlowdown;\r\n      const MAX_SPEED = 1.5 - blobSlowdown;\r\n      const speed = MIN_SPEED + Math.random() * (MAX_SPEED - MIN_SPEED);\r\n      const intersectionLength = intersect(start, direction, { x: 0, y: 0 }, bounds);\r\n      const intersection = {\r\n        x: start.x + direction.x * intersectionLength,\r\n        y: start.y + direction.y * intersectionLength\r\n      };\r\n      const duration = Math.max(intersectionLength / speed, 1);\r\n\r\n      const position = start;\r\n      this.tween = new TWEEN.Tween(position)\r\n        .to(intersection, duration)\r\n        .onUpdate(() => {\r\n          this.$el.setAttribute(this.isBlob ? \"x\" : \"cx\", position.x);\r\n          this.$el.setAttribute(this.isBlob ? \"y\" : \"cy\", position.y);\r\n        })\r\n        .easing(TWEEN.Easing.Linear.None)\r\n        .onComplete(this.fly.bind(this))\r\n        .start(tweenTime);\r\n\r\n      function randomUnitVector() {\r\n        const azimuth = Math.random() * 2 * Math.PI;\r\n        return {\r\n          x: Math.cos(azimuth),\r\n          y: Math.sin(azimuth)\r\n        };\r\n      }\r\n      // eslint-disable-next-line max-params\r\n      function intersect(rayStart, rayUnit, rectAA, rectBB) {\r\n        const dirfrac = {\r\n          x: 1 / rayUnit.x,\r\n          y: 1 / rayUnit.y\r\n        };\r\n        const t1 = (rectAA.x - rayStart.x) * dirfrac.x;\r\n        const t2 = (rectBB.x - rayStart.x) * dirfrac.x;\r\n        const t3 = (rectAA.y - rayStart.y) * dirfrac.y;\r\n        const t4 = (rectBB.y - rayStart.y) * dirfrac.y;\r\n        return Math.min(Math.max(t1, t2), Math.max(t3, t4));\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <text\r\n    v-if=\"isBlob\"\r\n    class=\"o-tachyon-particle\"\r\n  >\r\n    {{ blob }}\r\n  </text>\r\n  <circle\r\n    v-else\r\n    r=\"2\"\r\n    class=\"o-tachyon-particle\"\r\n  />\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/time-dilation"},"metadata":{},"sourceType":"module"}