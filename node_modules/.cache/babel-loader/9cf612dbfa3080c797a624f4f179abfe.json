{"ast":null,"code":"import \"core-js/modules/es.array.reduce.js\";\n\n// We define these in the local scope to override the player's notation setting; this is something we'll probably\n// expand upon later once we look more closely at support for extended Unicode in DRP\nfunction format(number, places, placesUnder1000) {\n  return Notation.scientific.format(number, places, placesUnder1000);\n}\n\nfunction formatInt(value) {\n  if (Notations.current.isPainful) return format(value, 2);\n  return formatWithCommas(typeof value === \"number\" ? value.toFixed(0) : value.toNumber().toFixed(0));\n}\n\nfunction formatMachines(realPart, imagPart) {\n  const parts = [];\n  if (Decimal.neq(realPart, 0)) parts.push(format(realPart, 2));\n  if (Decimal.neq(imagPart, 0)) parts.push(`${format(imagPart, 2, 2)}i`);\n  if (Decimal.eq(realPart, 0) && Decimal.eq(imagPart, 0)) return format(0);\n  return parts.join(\" + \");\n} // This is used for Discord Rich Presence, the information which shows up on a person's profile badge in Discord if\n// they are playing a game on Steam which has integration that pushes the info to Discord\n\n\nexport const discordRichPresence = {\n  /**\r\n   * List of all challenges to display within DRP, checked from the first entry and iterating forward. It will only\r\n   * show the first one it finds for space reasons, but this also has the desirable effect of hiding key challenges\r\n   * the player may enter within cel3.\r\n   *\r\n   * This is arguably the most \"useful\" behavior as well due to the fact that often the highest level of challenge is\r\n   * the long-term goal for why the player entered the challenge in the first place.\r\n   * @template\r\n   * {\r\n   *  @property {function: @return String} name                     Name of the challenge (may contain name spoilers)\r\n   *  @property {function: @return Boolean | Number} activityToken  Whether or not this challenge is active; is a\r\n   *    boolean for dilation and realities, or a number for pre-dilation challenges\r\n   *  @property {Array: function: @return String} resource          Function returning the relevant resource for this\r\n   *    particular challenge\r\n   * }\r\n   */\n  challenges: [{\n    name: () => `${Teresa.possessiveName} Reality`,\n    activityToken: () => Teresa.isRunning,\n    // Reward is based on antimatter, but EP is more meaningful pre-completion\n    resource: () => Teresa.runCompleted ? `${format(player.antimatter, 2, 1)} AM` : `${format(player.eternityPoints, 2)} EP`\n  }, {\n    name: () => `${Effarig.possessiveName} Reality - ${Effarig.currentStageName}`,\n    activityToken: () => Effarig.isRunning,\n    resource: () => {\n      switch (Effarig.currentStage) {\n        case EFFARIG_STAGES.INFINITY:\n          return `${format(player.antimatter, 2, 1)} AM`;\n\n        case EFFARIG_STAGES.ETERNITY:\n          return `${format(player.infinityPoints, 2)} IP`;\n\n        case EFFARIG_STAGES.REALITY:\n        default:\n          return `${format(player.eternityPoints, 2)} EP`;\n      }\n    }\n  }, {\n    name: () => `${Enslaved.possessiveName} Reality`,\n    activityToken: () => Enslaved.isRunning,\n    resource: () => `${format(player.eternityPoints, 2)} EP`\n  }, {\n    name: () => `${V.possessiveName} Reality`,\n    activityToken: () => V.isRunning,\n    resource: () => null // V displays achievements normally and its value is standardized outside of its era\n\n  }, {\n    name: () => `${Ra.possessiveName} Reality`,\n    activityToken: () => Ra.isRunning,\n    resource: () => null // Ra doesn't have a meaningful in-reality resource to display\n\n  }, {\n    name: () => {\n      const dims = Laitela.maxAllowedDimension;\n      const dimStr = dims ? `D${dims} max` : \"Final\";\n      return `${Laitela.possessiveName} Reality - ${dimStr}`;\n    },\n    activityToken: () => Laitela.isRunning,\n    resource: () => `${formatPercents(player.celestials.laitela.entropy, 2, 2)} Entropy`\n  }, {\n    name: () => \"Dilation\",\n    activityToken: () => player.dilation.active,\n    resource: () => `${format(player.antimatter, 2, 1)} AM`\n  }, {\n    name: token => `EC ${token}`,\n    // This results in \"EC 3x3\" (for example) when there are remaining completions, and just \"EC 3\" if not\n    activityToken: () => {\n      if (!player.challenge.eternity.current) return false;\n      const num = player.challenge.eternity.current;\n      const ec = EternityChallenge(num);\n      return ec.remainingCompletions ? `${num}x${ec.completions + 1}` : num;\n    },\n    resource: () => `${format(player.infinityPoints, 2)} IP`\n  }, {\n    name: token => `IC ${token}`,\n    activityToken: () => player.challenge.infinity.current,\n    resource: () => `${format(player.antimatter, 2, 1)} AM`\n  }, {\n    name: token => `NC ${token}`,\n    activityToken: () => player.challenge.normal.current,\n    resource: () => `${format(player.antimatter, 2, 1)} AM`\n  }],\n\n  /**\r\n   * List of all the different progress stages which will have distinct behavior in DRP\r\n   * @template\r\n   * {\r\n   *  @property {String} name                                     Name of this stage of the game to display. This will\r\n   *    be used for the first line of text in DRP. This isn't necessarily unique, as the tracked resources may change\r\n   *    without the stage changing\r\n   *  @property {function: @return Boolean} hasReached            Function to check if this stage of the game has been\r\n   *    reached. These checks are done starting at the end of the array and going backwards.\r\n   *  @property {function: @return String} mainResource           Function returning the string describing the main\r\n   *    resource for a stage of the game\r\n   *  @property {Array: function: @return String} resourceList    Array of strings containing relevant resources for\r\n   *    each particular part of the game. Largely just a list of key resources that are relevant at each section. The\r\n   *    logic *can* handle this being undefined, but it probably shouldn't be due to poor appearance\r\n   * }\r\n   */\n  stages: [{\n    name: \"Pre-Infinity\",\n    hasReached: () => true,\n    mainResource: () => `${format(player.antimatter, 2, 1)} AM`,\n    resourceList: [() => quantify(\"Boost\", player.dimensionBoosts, 0, 0, formatInt), () => quantify(\"Galaxy\", player.galaxies, 0, 0, formatInt)]\n  }, {\n    name: \"Infinity\",\n    hasReached: () => PlayerProgress.infinityUnlocked(),\n    mainResource: () => `${format(player.infinityPoints, 2)} IP`,\n    resourceList: [() => quantify(\"Infinity\", player.infinities, 0, 0, formatInt)]\n  }, {\n    name: \"Broken Infinity\",\n    hasReached: () => player.break,\n    mainResource: () => `${format(player.infinityPoints, 2)} IP`,\n    resourceList: [() => quantify(\"Infinity\", player.infinities, 2, 0, format)]\n  }, {\n    name: \"Eternity\",\n    hasReached: () => PlayerProgress.eternityUnlocked(),\n    mainResource: () => `${format(player.eternityPoints, 2)} EP`,\n    resourceList: [() => quantify(\"Eternity\", player.eternities, 0, 0, formatInt)]\n  }, {\n    // Eternity Challenge era\n    name: \"Eternity\",\n    hasReached: () => player.eternityChalls.eterc1 > 0,\n    mainResource: () => `${format(player.eternityPoints, 2)} EP`,\n    resourceList: [() => quantify(\"EC completion\", Object.values(player.eternityChalls).reduce((sum, c) => sum + c, 0), 0, 0, formatInt)]\n  }, {\n    name: \"Time Dilation\",\n    hasReached: () => PlayerProgress.dilationUnlocked(),\n    mainResource: () => `${format(player.eternityPoints, 2)} EP`,\n    resourceList: [() => `${format(player.dilation.dilatedTime, 2, 2)} DT`]\n  }, {\n    name: \"Reality\",\n    hasReached: () => player.realities > 0,\n    mainResource: () => `${format(player.reality.realityMachines, 2)} RM`,\n    resourceList: [() => quantify(\"Reality\", player.realities, 0, 0, formatInt), () => `Best Glyph Level: ${formatInt(player.records.bestReality.glyphLevel)}`]\n  }, {\n    name: () => Teresa.displayName,\n    hasReached: () => Teresa.isUnlocked,\n    mainResource: () => `${format(player.reality.realityMachines, 2)} RM`,\n    resourceList: [() => quantify(\"Reality\", player.realities, 0, 0, formatInt), () => `Best GL: ${formatInt(player.records.bestReality.glyphLevel)}`, () => `Poured: ${format(player.celestials.teresa.pouredAmount, 2)} RM`]\n  }, {\n    name: () => Effarig.displayName,\n    hasReached: () => TeresaUnlocks.effarig.isUnlocked,\n    mainResource: () => `${format(player.reality.realityMachines, 2)} RM`,\n    resourceList: [() => `Best GL: ${formatInt(player.records.bestReality.glyphLevel)}`, () => quantify(\"Relic Shard\", player.celestials.effarig.relicShards, 2, 0, format)]\n  }, {\n    name: () => Enslaved.displayName,\n    hasReached: () => EffarigUnlock.eternity.isUnlocked,\n    mainResource: () => `${format(player.reality.realityMachines, 2)} RM`,\n    resourceList: [() => `Best GL: ${formatInt(player.records.bestReality.glyphLevel)}`, () => `Charged: ${format(TimeSpan.fromMilliseconds(player.celestials.enslaved.stored).totalYears, 2)} years`]\n  }, {\n    name: () => V.displayName,\n    hasReached: () => Achievement(151).isUnlocked,\n    mainResource: () => `${format(player.reality.realityMachines, 2)} RM`,\n    resourceList: [() => `Best GL: ${formatInt(player.records.bestReality.glyphLevel)}`, () => quantify(\"V-Achievement\", player.celestials.v.runUnlocks.sum(), 0, 0, formatInt)]\n  }, {\n    name: () => Ra.displayName,\n    hasReached: () => VUnlocks.raUnlock.isUnlocked,\n    mainResource: () => `${format(player.reality.realityMachines, 2)} RM`,\n    resourceList: [() => `Best GL: ${formatInt(player.records.bestReality.glyphLevel)}`, () => `Ra Levels: ${Ra.pets.all.map(p => formatInt(p.level)).join(\"/\")}`]\n  }, {\n    // Imaginary Machines unlocked\n    name: () => Ra.displayName,\n    hasReached: () => MachineHandler.isIMUnlocked,\n    mainResource: () => `${format(player.reality.realityMachines)} RM + ${format(player.reality.imaginaryMachines, 2)} iM`,\n    resourceList: [() => `Best GL: ${formatInt(player.records.bestReality.glyphLevel)}`, () => `Ra Levels: ${Ra.pets.all.map(p => formatInt(p.level)).join(\"/\")}`]\n  }, {\n    name: () => Laitela.displayName,\n    hasReached: () => Laitela.isUnlocked,\n    mainResource: () => `${format(player.reality.realityMachines)} RM + ${format(player.reality.imaginaryMachines, 2)} iM`,\n    resourceList: [() => `Best GL: ${formatInt(player.records.bestReality.glyphLevel)}`, () => quantify(\"Singularity\", player.celestials.laitela.singularities, 2, 0, format)]\n  }, {\n    // We can't use celestial displayName here like the others because that will cause\n    // the text scramble to get put on DRP\n    name: \"Pelle\",\n    hasReached: () => Pelle.isDoomed,\n    mainResource: () => quantify(\"Reality Shard\", player.celestials.pelle.realityShards, 2),\n    resourceList: [() => quantify(\"Remnant\", player.celestials.pelle.remnants, 2)]\n  }, {\n    name: \"END\",\n    hasReached: () => GameEnd.endState >= END_STATE_MARKERS.GAME_END,\n    mainResource: () => \"END Antimatter\",\n    resourceList: [() => \"Nothing remains.\"]\n  }]\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/discord-rich-presence.js"],"names":["format","number","places","placesUnder1000","Notation","scientific","formatInt","value","Notations","current","isPainful","formatWithCommas","toFixed","toNumber","formatMachines","realPart","imagPart","parts","Decimal","neq","push","eq","join","discordRichPresence","challenges","name","Teresa","possessiveName","activityToken","isRunning","resource","runCompleted","player","antimatter","eternityPoints","Effarig","currentStageName","currentStage","EFFARIG_STAGES","INFINITY","ETERNITY","infinityPoints","REALITY","Enslaved","V","Ra","dims","Laitela","maxAllowedDimension","dimStr","formatPercents","celestials","laitela","entropy","dilation","active","token","challenge","eternity","num","ec","EternityChallenge","remainingCompletions","completions","infinity","normal","stages","hasReached","mainResource","resourceList","quantify","dimensionBoosts","galaxies","PlayerProgress","infinityUnlocked","infinities","break","eternityUnlocked","eternities","eternityChalls","eterc1","Object","values","reduce","sum","c","dilationUnlocked","dilatedTime","realities","reality","realityMachines","records","bestReality","glyphLevel","displayName","isUnlocked","teresa","pouredAmount","TeresaUnlocks","effarig","relicShards","EffarigUnlock","TimeSpan","fromMilliseconds","enslaved","stored","totalYears","Achievement","v","runUnlocks","VUnlocks","raUnlock","pets","all","map","p","level","MachineHandler","isIMUnlocked","imaginaryMachines","singularities","Pelle","isDoomed","pelle","realityShards","remnants","GameEnd","endState","END_STATE_MARKERS","GAME_END"],"mappings":"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","sourcesContent":["// We define these in the local scope to override the player's notation setting; this is something we'll probably\r\n// expand upon later once we look more closely at support for extended Unicode in DRP\r\nfunction format(number, places, placesUnder1000) {\r\n  return Notation.scientific.format(number, places, placesUnder1000);\r\n}\r\n\r\nfunction formatInt(value) {\r\n  if (Notations.current.isPainful) return format(value, 2);\r\n  return formatWithCommas(typeof value === \"number\" ? value.toFixed(0) : value.toNumber().toFixed(0));\r\n}\r\n\r\nfunction formatMachines(realPart, imagPart) {\r\n  const parts = [];\r\n  if (Decimal.neq(realPart, 0)) parts.push(format(realPart, 2));\r\n  if (Decimal.neq(imagPart, 0)) parts.push(`${format(imagPart, 2, 2)}i`);\r\n  if (Decimal.eq(realPart, 0) && Decimal.eq(imagPart, 0)) return format(0);\r\n  return parts.join(\" + \");\r\n}\r\n\r\n// This is used for Discord Rich Presence, the information which shows up on a person's profile badge in Discord if\r\n// they are playing a game on Steam which has integration that pushes the info to Discord\r\nexport const discordRichPresence = {\r\n  /**\r\n   * List of all challenges to display within DRP, checked from the first entry and iterating forward. It will only\r\n   * show the first one it finds for space reasons, but this also has the desirable effect of hiding key challenges\r\n   * the player may enter within cel3.\r\n   *\r\n   * This is arguably the most \"useful\" behavior as well due to the fact that often the highest level of challenge is\r\n   * the long-term goal for why the player entered the challenge in the first place.\r\n   * @template\r\n   * {\r\n   *  @property {function: @return String} name                     Name of the challenge (may contain name spoilers)\r\n   *  @property {function: @return Boolean | Number} activityToken  Whether or not this challenge is active; is a\r\n   *    boolean for dilation and realities, or a number for pre-dilation challenges\r\n   *  @property {Array: function: @return String} resource          Function returning the relevant resource for this\r\n   *    particular challenge\r\n   * }\r\n   */\r\n  challenges: [\r\n    {\r\n      name: () => `${Teresa.possessiveName} Reality`,\r\n      activityToken: () => Teresa.isRunning,\r\n      // Reward is based on antimatter, but EP is more meaningful pre-completion\r\n      resource: () => (Teresa.runCompleted\r\n        ? `${format(player.antimatter, 2, 1)} AM`\r\n        : `${format(player.eternityPoints, 2)} EP`),\r\n    },\r\n    {\r\n      name: () => `${Effarig.possessiveName} Reality - ${Effarig.currentStageName}`,\r\n      activityToken: () => Effarig.isRunning,\r\n      resource: () => {\r\n        switch (Effarig.currentStage) {\r\n          case EFFARIG_STAGES.INFINITY:\r\n            return `${format(player.antimatter, 2, 1)} AM`;\r\n          case EFFARIG_STAGES.ETERNITY:\r\n            return `${format(player.infinityPoints, 2)} IP`;\r\n          case EFFARIG_STAGES.REALITY:\r\n          default:\r\n            return `${format(player.eternityPoints, 2)} EP`;\r\n        }\r\n      },\r\n    },\r\n    {\r\n      name: () => `${Enslaved.possessiveName} Reality`,\r\n      activityToken: () => Enslaved.isRunning,\r\n      resource: () => `${format(player.eternityPoints, 2)} EP`,\r\n    },\r\n    {\r\n      name: () => `${V.possessiveName} Reality`,\r\n      activityToken: () => V.isRunning,\r\n      resource: () => null,\r\n      // V displays achievements normally and its value is standardized outside of its era\r\n    },\r\n    {\r\n      name: () => `${Ra.possessiveName} Reality`,\r\n      activityToken: () => Ra.isRunning,\r\n      resource: () => null,\r\n      // Ra doesn't have a meaningful in-reality resource to display\r\n    },\r\n    {\r\n      name: () => {\r\n        const dims = Laitela.maxAllowedDimension;\r\n        const dimStr = dims ? `D${dims} max` : \"Final\";\r\n        return `${Laitela.possessiveName} Reality - ${dimStr}`;\r\n      },\r\n      activityToken: () => Laitela.isRunning,\r\n      resource: () => `${formatPercents(player.celestials.laitela.entropy, 2, 2)} Entropy`,\r\n    },\r\n    {\r\n      name: () => \"Dilation\",\r\n      activityToken: () => player.dilation.active,\r\n      resource: () => `${format(player.antimatter, 2, 1)} AM`,\r\n    },\r\n    {\r\n      name: token => `EC ${token}`,\r\n      // This results in \"EC 3x3\" (for example) when there are remaining completions, and just \"EC 3\" if not\r\n      activityToken: () => {\r\n        if (!player.challenge.eternity.current) return false;\r\n        const num = player.challenge.eternity.current;\r\n        const ec = EternityChallenge(num);\r\n        return ec.remainingCompletions ? `${num}x${ec.completions + 1}` : num;\r\n      },\r\n      resource: () => `${format(player.infinityPoints, 2)} IP`,\r\n    },\r\n    {\r\n      name: token => `IC ${token}`,\r\n      activityToken: () => player.challenge.infinity.current,\r\n      resource: () => `${format(player.antimatter, 2, 1)} AM`,\r\n    },\r\n    {\r\n      name: token => `NC ${token}`,\r\n      activityToken: () => player.challenge.normal.current,\r\n      resource: () => `${format(player.antimatter, 2, 1)} AM`,\r\n    },\r\n  ],\r\n\r\n  /**\r\n   * List of all the different progress stages which will have distinct behavior in DRP\r\n   * @template\r\n   * {\r\n   *  @property {String} name                                     Name of this stage of the game to display. This will\r\n   *    be used for the first line of text in DRP. This isn't necessarily unique, as the tracked resources may change\r\n   *    without the stage changing\r\n   *  @property {function: @return Boolean} hasReached            Function to check if this stage of the game has been\r\n   *    reached. These checks are done starting at the end of the array and going backwards.\r\n   *  @property {function: @return String} mainResource           Function returning the string describing the main\r\n   *    resource for a stage of the game\r\n   *  @property {Array: function: @return String} resourceList    Array of strings containing relevant resources for\r\n   *    each particular part of the game. Largely just a list of key resources that are relevant at each section. The\r\n   *    logic *can* handle this being undefined, but it probably shouldn't be due to poor appearance\r\n   * }\r\n   */\r\n  stages: [\r\n    {\r\n      name: \"Pre-Infinity\",\r\n      hasReached: () => true,\r\n      mainResource: () => `${format(player.antimatter, 2, 1)} AM`,\r\n      resourceList: [\r\n        () => quantify(\"Boost\", player.dimensionBoosts, 0, 0, formatInt),\r\n        () => quantify(\"Galaxy\", player.galaxies, 0, 0, formatInt),\r\n      ],\r\n    },\r\n    {\r\n      name: \"Infinity\",\r\n      hasReached: () => PlayerProgress.infinityUnlocked(),\r\n      mainResource: () => `${format(player.infinityPoints, 2)} IP`,\r\n      resourceList: [() => quantify(\"Infinity\", player.infinities, 0, 0, formatInt)],\r\n    },\r\n    {\r\n      name: \"Broken Infinity\",\r\n      hasReached: () => player.break,\r\n      mainResource: () => `${format(player.infinityPoints, 2)} IP`,\r\n      resourceList: [() => quantify(\"Infinity\", player.infinities, 2, 0, format)],\r\n    },\r\n    {\r\n      name: \"Eternity\",\r\n      hasReached: () => PlayerProgress.eternityUnlocked(),\r\n      mainResource: () => `${format(player.eternityPoints, 2)} EP`,\r\n      resourceList: [() => quantify(\"Eternity\", player.eternities, 0, 0, formatInt)],\r\n    },\r\n    {\r\n      // Eternity Challenge era\r\n      name: \"Eternity\",\r\n      hasReached: () => player.eternityChalls.eterc1 > 0,\r\n      mainResource: () => `${format(player.eternityPoints, 2)} EP`,\r\n      resourceList: [\r\n        () => quantify(\"EC completion\",\r\n          Object.values(player.eternityChalls).reduce((sum, c) => sum + c, 0), 0, 0, formatInt)\r\n      ]\r\n    },\r\n    {\r\n      name: \"Time Dilation\",\r\n      hasReached: () => PlayerProgress.dilationUnlocked(),\r\n      mainResource: () => `${format(player.eternityPoints, 2)} EP`,\r\n      resourceList: [() => `${format(player.dilation.dilatedTime, 2, 2)} DT`],\r\n    },\r\n    {\r\n      name: \"Reality\",\r\n      hasReached: () => player.realities > 0,\r\n      mainResource: () => `${format(player.reality.realityMachines, 2)} RM`,\r\n      resourceList: [\r\n        () => quantify(\"Reality\", player.realities, 0, 0, formatInt),\r\n        () => `Best Glyph Level: ${formatInt(player.records.bestReality.glyphLevel)}`\r\n      ]\r\n    },\r\n    {\r\n      name: () => Teresa.displayName,\r\n      hasReached: () => Teresa.isUnlocked,\r\n      mainResource: () => `${format(player.reality.realityMachines, 2)} RM`,\r\n      resourceList: [\r\n        () => quantify(\"Reality\", player.realities, 0, 0, formatInt),\r\n        () => `Best GL: ${formatInt(player.records.bestReality.glyphLevel)}`,\r\n        () => `Poured: ${format(player.celestials.teresa.pouredAmount, 2)} RM`\r\n      ]\r\n    },\r\n    {\r\n      name: () => Effarig.displayName,\r\n      hasReached: () => TeresaUnlocks.effarig.isUnlocked,\r\n      mainResource: () => `${format(player.reality.realityMachines, 2)} RM`,\r\n      resourceList: [\r\n        () => `Best GL: ${formatInt(player.records.bestReality.glyphLevel)}`,\r\n        () => quantify(\"Relic Shard\", player.celestials.effarig.relicShards, 2, 0, format)\r\n      ]\r\n    },\r\n    {\r\n      name: () => Enslaved.displayName,\r\n      hasReached: () => EffarigUnlock.eternity.isUnlocked,\r\n      mainResource: () => `${format(player.reality.realityMachines, 2)} RM`,\r\n      resourceList: [\r\n        () => `Best GL: ${formatInt(player.records.bestReality.glyphLevel)}`,\r\n        () => `Charged: ${format(TimeSpan.fromMilliseconds(player.celestials.enslaved.stored).totalYears, 2)} years`\r\n      ],\r\n    },\r\n    {\r\n      name: () => V.displayName,\r\n      hasReached: () => Achievement(151).isUnlocked,\r\n      mainResource: () => `${format(player.reality.realityMachines, 2)} RM`,\r\n      resourceList: [\r\n        () => `Best GL: ${formatInt(player.records.bestReality.glyphLevel)}`,\r\n        () => quantify(\"V-Achievement\", player.celestials.v.runUnlocks.sum(), 0, 0, formatInt)],\r\n    },\r\n    {\r\n      name: () => Ra.displayName,\r\n      hasReached: () => VUnlocks.raUnlock.isUnlocked,\r\n      mainResource: () => `${format(player.reality.realityMachines, 2)} RM`,\r\n      resourceList: [\r\n        () => `Best GL: ${formatInt(player.records.bestReality.glyphLevel)}`,\r\n        () => `Ra Levels: ${Ra.pets.all.map(p => formatInt(p.level)).join(\"/\")}`],\r\n    },\r\n    {\r\n      // Imaginary Machines unlocked\r\n      name: () => Ra.displayName,\r\n      hasReached: () => MachineHandler.isIMUnlocked,\r\n      mainResource: () =>\r\n        `${format(player.reality.realityMachines)} RM + ${format(player.reality.imaginaryMachines, 2)} iM`,\r\n      resourceList: [\r\n        () => `Best GL: ${formatInt(player.records.bestReality.glyphLevel)}`,\r\n        () => `Ra Levels: ${Ra.pets.all.map(p => formatInt(p.level)).join(\"/\")}`\r\n      ],\r\n    },\r\n    {\r\n      name: () => Laitela.displayName,\r\n      hasReached: () => Laitela.isUnlocked,\r\n      mainResource: () =>\r\n        `${format(player.reality.realityMachines)} RM + ${format(player.reality.imaginaryMachines, 2)} iM`,\r\n      resourceList: [\r\n        () => `Best GL: ${formatInt(player.records.bestReality.glyphLevel)}`,\r\n        () => quantify(\"Singularity\", player.celestials.laitela.singularities, 2, 0, format)],\r\n    },\r\n    {\r\n      // We can't use celestial displayName here like the others because that will cause\r\n      // the text scramble to get put on DRP\r\n      name: \"Pelle\",\r\n      hasReached: () => Pelle.isDoomed,\r\n      mainResource: () => quantify(\"Reality Shard\", player.celestials.pelle.realityShards, 2),\r\n      resourceList: [() => quantify(\"Remnant\", player.celestials.pelle.remnants, 2)],\r\n    },\r\n    {\r\n      name: \"END\",\r\n      hasReached: () => GameEnd.endState >= END_STATE_MARKERS.GAME_END,\r\n      mainResource: () => \"END Antimatter\",\r\n      resourceList: [() => \"Nothing remains.\"],\r\n    },\r\n  ]\r\n};\r\n"]},"metadata":{},"sourceType":"module"}