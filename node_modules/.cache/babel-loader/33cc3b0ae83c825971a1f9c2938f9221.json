{"ast":null,"code":"import FullScreenAnimationHandler from \"@/core/full-screen-animation-handler\";\nimport ModalWrapperChoice from \"@/components/modals/ModalWrapperChoice\";\nexport default {\n  name: \"ExitDilationModal\",\n  components: {\n    ModalWrapperChoice\n  },\n\n  data() {\n    return {\n      tachyonGain: new Decimal(0),\n      isDoomed: false\n    };\n  },\n\n  computed: {\n    gainText() {\n      if (this.tachyonGain.lte(0)) return `not gain anything`;\n      return `gain ${quantify(\"Tachyon Particle\", this.tachyonGain, 2, 1)}`;\n    },\n\n    isInEC() {\n      return Player.anyChallenge instanceof EternityChallengeState;\n    },\n\n    confirmText() {\n      return this.isDoomed ? \"Okay\" : \"Exit\";\n    }\n\n  },\n  methods: {\n    update() {\n      // We force-close the modal if dilation is inactive because there are a few edge cases which allow it to be\n      // opened while switching between dilated/regular. The only thing this results in is an incorrect TP gain value\n      if (!player.dilation.active) this.emitClose();\n      this.tachyonGain.copyFrom(getTachyonGain(true));\n      this.isDoomed = Pelle.isDoomed;\n    },\n\n    handleYesClick() {\n      if (!player.dilation.active) return;\n      const playAnimation = player.options.animations.dilation && !FullScreenAnimationHandler.isDisplaying;\n\n      if (playAnimation) {\n        animateAndUndilate();\n      } else {\n        eternity(false, false, {\n          switchingDilation: true\n        });\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["ExitDilationModal.vue"],"names":[],"mappings":"AACA,OAAA,0BAAA,MAAA,sCAAA;AAEA,OAAA,kBAAA,MAAA,wCAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,mBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA;AADA,GAFA;;AAKA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,WAAA,EAAA,IAAA,OAAA,CAAA,CAAA,CADA;AAEA,MAAA,QAAA,EAAA;AAFA,KAAA;AAIA,GAVA;;AAWA,EAAA,QAAA,EAAA;AACA,IAAA,QAAA,GAAA;AACA,UAAA,KAAA,WAAA,CAAA,GAAA,CAAA,CAAA,CAAA,EAAA,OAAA,mBAAA;AACA,aAAA,QAAA,QAAA,CAAA,kBAAA,EAAA,KAAA,WAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA;AACA,KAJA;;AAKA,IAAA,MAAA,GAAA;AACA,aAAA,MAAA,CAAA,YAAA,YAAA,sBAAA;AACA,KAPA;;AAQA,IAAA,WAAA,GAAA;AACA,aAAA,KAAA,QAAA,GAAA,MAAA,GAAA,MAAA;AACA;;AAVA,GAXA;AAuBA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA;AACA;AACA,UAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,EAAA,KAAA,SAAA;AACA,WAAA,WAAA,CAAA,QAAA,CAAA,cAAA,CAAA,IAAA,CAAA;AACA,WAAA,QAAA,GAAA,KAAA,CAAA,QAAA;AACA,KAPA;;AAQA,IAAA,cAAA,GAAA;AACA,UAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,EAAA;AACA,YAAA,aAAA,GAAA,MAAA,CAAA,OAAA,CAAA,UAAA,CAAA,QAAA,IAAA,CAAA,0BAAA,CAAA,YAAA;;AACA,UAAA,aAAA,EAAA;AACA,QAAA,kBAAA;AACA,OAFA,MAEA;AACA,QAAA,QAAA,CAAA,KAAA,EAAA,KAAA,EAAA;AAAA,UAAA,iBAAA,EAAA;AAAA,SAAA,CAAA;AACA;AACA;;AAhBA;AAvBA,CAAA","sourcesContent":["<script>\r\nimport FullScreenAnimationHandler from \"@/core/full-screen-animation-handler\";\r\n\r\nimport ModalWrapperChoice from \"@/components/modals/ModalWrapperChoice\";\r\n\r\nexport default {\r\n  name: \"ExitDilationModal\",\r\n  components: {\r\n    ModalWrapperChoice\r\n  },\r\n  data() {\r\n    return {\r\n      tachyonGain: new Decimal(0),\r\n      isDoomed: false\r\n    };\r\n  },\r\n  computed: {\r\n    gainText() {\r\n      if (this.tachyonGain.lte(0)) return `not gain anything`;\r\n      return `gain ${quantify(\"Tachyon Particle\", this.tachyonGain, 2, 1)}`;\r\n    },\r\n    isInEC() {\r\n      return Player.anyChallenge instanceof EternityChallengeState;\r\n    },\r\n    confirmText() {\r\n      return this.isDoomed ? \"Okay\" : \"Exit\";\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      // We force-close the modal if dilation is inactive because there are a few edge cases which allow it to be\r\n      // opened while switching between dilated/regular. The only thing this results in is an incorrect TP gain value\r\n      if (!player.dilation.active) this.emitClose();\r\n      this.tachyonGain.copyFrom(getTachyonGain(true));\r\n      this.isDoomed = Pelle.isDoomed;\r\n    },\r\n    handleYesClick() {\r\n      if (!player.dilation.active) return;\r\n      const playAnimation = player.options.animations.dilation && !FullScreenAnimationHandler.isDisplaying;\r\n      if (playAnimation) {\r\n        animateAndUndilate();\r\n      } else {\r\n        eternity(false, false, { switchingDilation: true });\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapperChoice\r\n    option=\"dilation\"\r\n    @confirm=\"handleYesClick\"\r\n  >\r\n    <template #header>\r\n      <span v-if=\"isDoomed\">\r\n        You cannot exit Dilation while Doomed\r\n      </span>\r\n      <span v-else>\r\n        You are about to exit Dilation\r\n      </span>\r\n    </template>\r\n    <div class=\"c-modal-message__text\">\r\n      <span v-if=\"isDoomed\">\r\n        Dilation is permanent. You will {{ gainText }} and reset your current Eternity.\r\n      </span>\r\n      <span v-else>\r\n        If you exit Dilation now, you will {{ gainText }}.\r\n      </span>\r\n      <div v-if=\"isInEC\">\r\n        You will also exit your current Eternity Challenge as well.\r\n      </div>\r\n      <br>\r\n      Are you sure you want to proceed?\r\n    </div>\r\n    <template #confirm-text>\r\n      {{ confirmText }}\r\n    </template>\r\n  </ModalWrapperChoice>\r\n</template>\r\n"],"sourceRoot":"src/components/modals/prestige"},"metadata":{},"sourceType":"module"}