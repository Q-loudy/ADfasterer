{"ast":null,"code":"import wordShift from \"@/core/word-shift\";\nimport PelleRiftBar from \"./PelleRiftBar\";\nimport PelleStrike from \"./PelleStrike\";\nexport default {\n  name: \"PelleRift\",\n  components: {\n    PelleStrike,\n    PelleRiftBar\n  },\n  props: {\n    strike: {\n      type: Object,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      hasStrike: false,\n      isActive: false,\n      isMaxed: false,\n      totalFill: new Decimal(),\n      resource: new Decimal(),\n      hasEffectiveFill: false,\n      effects: []\n    };\n  },\n\n  computed: {\n    rift() {\n      return this.strike.rift;\n    },\n\n    // We treat the 3rd rift slightly differently because it drains the 2nd rift, meaning it needs the word cycle\n    // and a bit of additional UI info\n    specialRift() {\n      return this.rift.id === 3;\n    },\n\n    infoTooltip() {\n      return `The Replicanti requirement for the 2nd Rift is based on the total amount you have ever filled, including\n        any amount drained to fill this Rift.`;\n    }\n\n  },\n  methods: {\n    update() {\n      this.hasStrike = this.strike.hasStrike;\n      if (!this.hasStrike) return;\n      const rift = this.rift;\n      this.effects = this.rift.effects;\n      this.isActive = rift.isActive;\n      this.isMaxed = rift.isMaxed || Pelle.hasGalaxyGenerator;\n      this.setValue(\"totalFill\", rift.totalFill);\n      this.setValue(\"resource\", rift.fillCurrency.value);\n      this.hasEffectiveFill = rift.key === \"decay\" && PelleRifts.chaos.milestones[0].canBeApplied;\n    },\n\n    // One rift has a number and the others are all Decimals; this reduces boilerplate for setting multiple values\n    setValue(key, value) {\n      if (typeof value === \"number\") this[key] = value;else this[key].copyFrom(value);\n    },\n\n    // One-off formatting function; needs to format large Decimals and a small number assumed to be a percentage\n    formatRift(value) {\n      return typeof value === \"number\" ? `${formatInt(100 * value)}%` : format(value, 2);\n    },\n\n    riftName() {\n      return wordShift.wordCycle(this.rift.name, true);\n    },\n\n    drainResource() {\n      return this.specialRift ? wordShift.wordCycle(this.rift.drainResource) : this.rift.drainResource;\n    }\n\n  }\n};","map":{"version":3,"sources":["PelleRift.vue"],"names":[],"mappings":"AACA,OAAA,SAAA,MAAA,mBAAA;AAEA,OAAA,YAAA,MAAA,gBAAA;AACA,OAAA,WAAA,MAAA,eAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,WADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,WADA;AAEA,IAAA;AAFA,GAFA;AAMA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GANA;;AAYA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,SAAA,EAAA,KADA;AAEA,MAAA,QAAA,EAAA,KAFA;AAGA,MAAA,OAAA,EAAA,KAHA;AAIA,MAAA,SAAA,EAAA,IAAA,OAAA,EAJA;AAKA,MAAA,QAAA,EAAA,IAAA,OAAA,EALA;AAMA,MAAA,gBAAA,EAAA,KANA;AAOA,MAAA,OAAA,EAAA;AAPA,KAAA;AASA,GAtBA;;AAuBA,EAAA,QAAA,EAAA;AACA,IAAA,IAAA,GAAA;AACA,aAAA,KAAA,MAAA,CAAA,IAAA;AACA,KAHA;;AAIA;AACA;AACA,IAAA,WAAA,GAAA;AACA,aAAA,KAAA,IAAA,CAAA,EAAA,KAAA,CAAA;AACA,KARA;;AASA,IAAA,WAAA,GAAA;AACA,aAAA;AACA,8CADA;AAEA;;AAZA,GAvBA;AAqCA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,SAAA,GAAA,KAAA,MAAA,CAAA,SAAA;AACA,UAAA,CAAA,KAAA,SAAA,EAAA;AACA,YAAA,IAAA,GAAA,KAAA,IAAA;AACA,WAAA,OAAA,GAAA,KAAA,IAAA,CAAA,OAAA;AACA,WAAA,QAAA,GAAA,IAAA,CAAA,QAAA;AACA,WAAA,OAAA,GAAA,IAAA,CAAA,OAAA,IAAA,KAAA,CAAA,kBAAA;AACA,WAAA,QAAA,CAAA,WAAA,EAAA,IAAA,CAAA,SAAA;AACA,WAAA,QAAA,CAAA,UAAA,EAAA,IAAA,CAAA,YAAA,CAAA,KAAA;AACA,WAAA,gBAAA,GAAA,IAAA,CAAA,GAAA,KAAA,OAAA,IAAA,UAAA,CAAA,KAAA,CAAA,UAAA,CAAA,CAAA,EAAA,YAAA;AACA,KAXA;;AAYA;AACA,IAAA,QAAA,CAAA,GAAA,EAAA,KAAA,EAAA;AACA,UAAA,OAAA,KAAA,KAAA,QAAA,EAAA,KAAA,GAAA,IAAA,KAAA,CAAA,KACA,KAAA,GAAA,EAAA,QAAA,CAAA,KAAA;AACA,KAhBA;;AAiBA;AACA,IAAA,UAAA,CAAA,KAAA,EAAA;AACA,aAAA,OAAA,KAAA,KAAA,QAAA,GAAA,GAAA,SAAA,CAAA,MAAA,KAAA,CAAA,GAAA,GAAA,MAAA,CAAA,KAAA,EAAA,CAAA,CAAA;AACA,KApBA;;AAqBA,IAAA,QAAA,GAAA;AACA,aAAA,SAAA,CAAA,SAAA,CAAA,KAAA,IAAA,CAAA,IAAA,EAAA,IAAA,CAAA;AACA,KAvBA;;AAwBA,IAAA,aAAA,GAAA;AACA,aAAA,KAAA,WAAA,GACA,SAAA,CAAA,SAAA,CAAA,KAAA,IAAA,CAAA,aAAA,CADA,GAEA,KAAA,IAAA,CAAA,aAFA;AAGA;;AA5BA;AArCA,CAAA","sourcesContent":["<script>\r\nimport wordShift from \"@/core/word-shift\";\r\n\r\nimport PelleRiftBar from \"./PelleRiftBar\";\r\nimport PelleStrike from \"./PelleStrike\";\r\n\r\nexport default {\r\n  name: \"PelleRift\",\r\n  components: {\r\n    PelleStrike,\r\n    PelleRiftBar\r\n  },\r\n  props: {\r\n    strike: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      hasStrike: false,\r\n      isActive: false,\r\n      isMaxed: false,\r\n      totalFill: new Decimal(),\r\n      resource: new Decimal(),\r\n      hasEffectiveFill: false,\r\n      effects: []\r\n    };\r\n  },\r\n  computed: {\r\n    rift() {\r\n      return this.strike.rift;\r\n    },\r\n    // We treat the 3rd rift slightly differently because it drains the 2nd rift, meaning it needs the word cycle\r\n    // and a bit of additional UI info\r\n    specialRift() {\r\n      return this.rift.id === 3;\r\n    },\r\n    infoTooltip() {\r\n      return `The Replicanti requirement for the 2nd Rift is based on the total amount you have ever filled, including\r\n        any amount drained to fill this Rift.`;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.hasStrike = this.strike.hasStrike;\r\n      if (!this.hasStrike) return;\r\n      const rift = this.rift;\r\n      this.effects = this.rift.effects;\r\n      this.isActive = rift.isActive;\r\n      this.isMaxed = rift.isMaxed || Pelle.hasGalaxyGenerator;\r\n      this.setValue(\"totalFill\", rift.totalFill);\r\n      this.setValue(\"resource\", rift.fillCurrency.value);\r\n      this.hasEffectiveFill = rift.key === \"decay\" && PelleRifts.chaos.milestones[0].canBeApplied;\r\n    },\r\n    // One rift has a number and the others are all Decimals; this reduces boilerplate for setting multiple values\r\n    setValue(key, value) {\r\n      if (typeof value === \"number\") this[key] = value;\r\n      else this[key].copyFrom(value);\r\n    },\r\n    // One-off formatting function; needs to format large Decimals and a small number assumed to be a percentage\r\n    formatRift(value) {\r\n      return typeof value === \"number\" ? `${formatInt(100 * value)}%` : format(value, 2);\r\n    },\r\n    riftName() {\r\n      return wordShift.wordCycle(this.rift.name, true);\r\n    },\r\n    drainResource() {\r\n      return this.specialRift\r\n        ? wordShift.wordCycle(this.rift.drainResource)\r\n        : this.rift.drainResource;\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    v-if=\"hasStrike\"\r\n    class=\"c-pelle-single-bar\"\r\n  >\r\n    <div class=\"c-pelle-rift\">\r\n      <div class=\"c-pelle-rift-row\">\r\n        <div class=\"c-pelle-rift-column c-pelle-rift-status\">\r\n          <h2 class=\"c-pelle-rift-name-header\">\r\n            {{ riftName() }}\r\n          </h2>\r\n          <div class=\"c-pelle-rift-rift-info-container\">\r\n            <div\r\n              v-for=\"(effect, idx) in effects\"\r\n              :key=\"idx\"\r\n            >\r\n              {{ effect || \"\" }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"c-pelle-rift-column\">\r\n          <PelleStrike :strike=\"strike\" />\r\n          <PelleRiftBar :rift=\"rift\" />\r\n        </div>\r\n        <div class=\"c-pelle-rift-status\">\r\n          <div class=\"c-pelle-rift-fill-status\">\r\n            <h2 class=\"c-pelle-rift-name-header\">\r\n              {{ riftName() }}\r\n            </h2>\r\n            <div class=\"c-pelle-rift-rift-info-container\">\r\n              Drains {{ drainResource() }} to fill.\r\n              <span\r\n                v-if=\"specialRift\"\r\n                :ach-tooltip=\"infoTooltip\"\r\n              >\r\n                <i class=\"fas fa-question-circle\" />\r\n              </span>\r\n              <br>\r\n              <template v-if=\"!isMaxed\">\r\n                Current Amount: {{ formatRift(resource) }}\r\n              </template>\r\n              <br>\r\n              Total Filled: {{ formatRift(rift.totalFill) }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-pelle-single-bar {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n}\r\n\r\n.c-pelle-rift {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  border: var(--var-border-width, 0.2rem) solid var(--color-pelle--base);\r\n  border-radius: var(--var-border-radius, 0.5rem);\r\n\r\n  /* transparent crimson */\r\n  box-shadow: inset 0 0 1rem 0.1rem rgba(237, 20, 61, 45%), 0 0 1rem 0.1rem rgba(237, 20, 61, 45%);\r\n  margin-top: 1.2rem;\r\n  padding: 0.5rem;\r\n}\r\n\r\n.t-s1 .c-pelle-rift {\r\n  box-shadow: none;\r\n}\r\n\r\n.c-pelle-rift-row {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.c-pelle-rift-column {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.c-pelle-rift-rift-info-container {\r\n  height: 5rem;\r\n  font-weight: 400;\r\n  color: var(--color-text);\r\n}\r\n\r\n.c-pelle-rift-status {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 28rem;\r\n  align-items: center;\r\n}\r\n\r\n.c-pelle-rift-name-header {\r\n  font-weight: bold;\r\n  color: var(--color-pelle--base);\r\n  padding: 0.2rem;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/celestial-pelle"},"metadata":{},"sourceType":"module"}