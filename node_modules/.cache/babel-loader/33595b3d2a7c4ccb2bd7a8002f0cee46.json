{"ast":null,"code":"export default {\n  name: \"FailableEcText\",\n\n  data() {\n    return {\n      currentResource: new Decimal(0),\n      maximumResource: new Decimal(0),\n      currentEternityChallengeId: 0\n    };\n  },\n\n  computed: {\n    textStyle() {\n      if (this.maximumResource.eq(0)) return {};\n      const ratio = this.currentResource.div(this.maximumResource).toNumber(); // Goes from green to yellow to red. If theme is light, use a slightly lighter yellow\n      // by not allowing full red and green at the same time.\n\n      const darkTheme = Theme.current().isDark() && Theme.current().name !== \"S6\"; // Setting this constant to 2 will give green - yellow - red, setting it to 1\n      // will give a straight line between green and red in colorspace, intermediate values\n      // will give intermediate results.\n      // The last factor in the green term darkens the text on light themes to provide better contrast\n\n      const c = darkTheme ? 2 : 1.5;\n      const rgb = [Math.round(Math.min(c * ratio, 1) * 255), Math.round(Math.min(c * (1 - ratio), 1) * 255 * (darkTheme ? 1 : 0.7)), 0];\n      return {\n        color: `rgb(${rgb.join(\",\")})`\n      };\n    },\n\n    text() {\n      if (this.currentEternityChallengeId === 4) {\n        return `${formatInt(this.currentResource)} / ${formatInt(this.maximumResource)} Infinities used`;\n      } // We're always either in EC4 or EC12 when displaying this text.\n\n\n      return `${TimeSpan.fromSeconds(this.currentResource.toNumber()).toString()} /\n        ${TimeSpan.fromSeconds(this.maximumResource.toNumber()).toString()} time spent`;\n    }\n\n  },\n  methods: {\n    update() {\n      if (EternityChallenge.current && [4, 12].includes(EternityChallenge.current.id)) {\n        this.currentEternityChallengeId = EternityChallenge.current.id;\n\n        if (this.currentEternityChallengeId === 4) {\n          this.currentResource.copyFrom(Currency.infinities);\n        } else {\n          this.currentResource = new Decimal(Time.thisEternity.totalSeconds / getGlobalSpeedFactor());\n        }\n\n        this.maximumResource = new Decimal(EternityChallenge.current.config.restriction(EternityChallenge.current.completions));\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["FailableEcText.vue"],"names":[],"mappings":"AACA,eAAA;AACA,EAAA,IAAA,EAAA,gBADA;;AAEA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,eAAA,EAAA,IAAA,OAAA,CAAA,CAAA,CADA;AAEA,MAAA,eAAA,EAAA,IAAA,OAAA,CAAA,CAAA,CAFA;AAGA,MAAA,0BAAA,EAAA;AAHA,KAAA;AAKA,GARA;;AASA,EAAA,QAAA,EAAA;AACA,IAAA,SAAA,GAAA;AACA,UAAA,KAAA,eAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,OAAA,EAAA;AAEA,YAAA,KAAA,GAAA,KAAA,eAAA,CAAA,GAAA,CAAA,KAAA,eAAA,EAAA,QAAA,EAAA,CAHA,CAIA;AACA;;AACA,YAAA,SAAA,GAAA,KAAA,CAAA,OAAA,GAAA,MAAA,MAAA,KAAA,CAAA,OAAA,GAAA,IAAA,KAAA,IAAA,CANA,CAOA;AACA;AACA;AACA;;AACA,YAAA,CAAA,GAAA,SAAA,GAAA,CAAA,GAAA,GAAA;AACA,YAAA,GAAA,GAAA,CACA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA,EAAA,CAAA,IAAA,GAAA,CADA,EAEA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,IAAA,GAAA,IAAA,SAAA,GAAA,CAAA,GAAA,GAAA,CAAA,CAFA,EAGA,CAHA,CAAA;AAMA,aAAA;AAAA,QAAA,KAAA,EAAA,OAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA;AAAA,OAAA;AACA,KApBA;;AAqBA,IAAA,IAAA,GAAA;AACA,UAAA,KAAA,0BAAA,KAAA,CAAA,EAAA;AACA,eAAA,GAAA,SAAA,CAAA,KAAA,eAAA,CAAA,MAAA,SAAA,CAAA,KAAA,eAAA,CAAA,kBAAA;AACA,OAHA,CAIA;;;AACA,aAAA,GAAA,QAAA,CAAA,WAAA,CAAA,KAAA,eAAA,CAAA,QAAA,EAAA,EAAA,QAAA,EAAA;AACA,UAAA,QAAA,CAAA,WAAA,CAAA,KAAA,eAAA,CAAA,QAAA,EAAA,EAAA,QAAA,EAAA,aADA;AAEA;;AA5BA,GATA;AAuCA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,UAAA,iBAAA,CAAA,OAAA,IAAA,CAAA,CAAA,EAAA,EAAA,EAAA,QAAA,CAAA,iBAAA,CAAA,OAAA,CAAA,EAAA,CAAA,EAAA;AACA,aAAA,0BAAA,GAAA,iBAAA,CAAA,OAAA,CAAA,EAAA;;AACA,YAAA,KAAA,0BAAA,KAAA,CAAA,EAAA;AACA,eAAA,eAAA,CAAA,QAAA,CAAA,QAAA,CAAA,UAAA;AACA,SAFA,MAEA;AACA,eAAA,eAAA,GAAA,IAAA,OAAA,CAAA,IAAA,CAAA,YAAA,CAAA,YAAA,GAAA,oBAAA,EAAA,CAAA;AACA;;AACA,aAAA,eAAA,GAAA,IAAA,OAAA,CAAA,iBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,WAAA,CACA,iBAAA,CAAA,OAAA,CAAA,WADA,CAAA,CAAA;AAEA;AACA;;AAZA;AAvCA,CAAA","sourcesContent":["<script>\r\nexport default {\r\n  name: \"FailableEcText\",\r\n  data() {\r\n    return {\r\n      currentResource: new Decimal(0),\r\n      maximumResource: new Decimal(0),\r\n      currentEternityChallengeId: 0\r\n    };\r\n  },\r\n  computed: {\r\n    textStyle() {\r\n      if (this.maximumResource.eq(0)) return {};\r\n\r\n      const ratio = this.currentResource.div(this.maximumResource).toNumber();\r\n      // Goes from green to yellow to red. If theme is light, use a slightly lighter yellow\r\n      // by not allowing full red and green at the same time.\r\n      const darkTheme = Theme.current().isDark() && Theme.current().name !== \"S6\";\r\n      // Setting this constant to 2 will give green - yellow - red, setting it to 1\r\n      // will give a straight line between green and red in colorspace, intermediate values\r\n      // will give intermediate results.\r\n      // The last factor in the green term darkens the text on light themes to provide better contrast\r\n      const c = darkTheme ? 2 : 1.5;\r\n      const rgb = [\r\n        Math.round(Math.min(c * ratio, 1) * 255),\r\n        Math.round(Math.min(c * (1 - ratio), 1) * 255 * (darkTheme ? 1 : 0.7)),\r\n        0\r\n      ];\r\n\r\n      return { color: `rgb(${rgb.join(\",\")})` };\r\n    },\r\n    text() {\r\n      if (this.currentEternityChallengeId === 4) {\r\n        return `${formatInt(this.currentResource)} / ${formatInt(this.maximumResource)} Infinities used`;\r\n      }\r\n      // We're always either in EC4 or EC12 when displaying this text.\r\n      return `${TimeSpan.fromSeconds(this.currentResource.toNumber()).toString()} /\r\n        ${TimeSpan.fromSeconds(this.maximumResource.toNumber()).toString()} time spent`;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      if (EternityChallenge.current && [4, 12].includes(EternityChallenge.current.id)) {\r\n        this.currentEternityChallengeId = EternityChallenge.current.id;\r\n        if (this.currentEternityChallengeId === 4) {\r\n          this.currentResource.copyFrom(Currency.infinities);\r\n        } else {\r\n          this.currentResource = new Decimal(Time.thisEternity.totalSeconds / getGlobalSpeedFactor());\r\n        }\r\n        this.maximumResource = new Decimal(EternityChallenge.current.config.restriction(\r\n          EternityChallenge.current.completions));\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <span> - <span :style=\"textStyle\">{{ text }}</span></span>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/ui-modes"},"metadata":{},"sourceType":"module"}