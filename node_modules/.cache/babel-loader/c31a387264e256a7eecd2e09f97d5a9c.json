{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nexport const PerformanceStats = {\n  container: document.getElementById(\"performance-stats\"),\n  samplePeriod: 10 * 1000,\n  isOn: false,\n  currentBlocks: [],\n  stats: {},\n\n  turnOn() {\n    this.isOn = true;\n    this.container.style.display = \"flex\";\n  },\n\n  turnOff() {\n    this.isOn = false;\n    this.container.style.display = \"none\";\n    this.stats = {};\n  },\n\n  toggle() {\n    if (this.isOn) this.turnOff();else this.turnOn();\n  },\n\n  start(blockName) {\n    if (!this.isOn) return;\n    const blockRoot = this.currentBlocks.length > 0 ? this.currentBlocks.last().childBlocks : this.stats;\n    let block = blockRoot[blockName];\n\n    if (block === undefined) {\n      block = {\n        records: [],\n        childBlocks: {}\n      };\n      blockRoot[blockName] = block;\n    }\n\n    this.currentBlocks.push(block);\n    const record = {};\n    block.records.push(record);\n    record.timestamp = performance.now();\n  },\n\n  end() {\n    if (!this.isOn) return;\n    const now = performance.now();\n    const block = this.currentBlocks.pop();\n    const record = block.records.last();\n    record.duration = now - record.timestamp;\n  },\n\n  render() {\n    if (!this.isOn) return;\n    let indentLevel = -1;\n    let text = \"\";\n    const samplePeriod = this.samplePeriod;\n    let fps;\n\n    function render(rootBlock) {\n      indentLevel++;\n\n      for (const blockName in rootBlock) {\n        if (!Object.prototype.hasOwnProperty.call(rootBlock, blockName)) continue;\n        const block = rootBlock[blockName];\n        const records = block.records;\n\n        while (records.length > 1 && records.last().timestamp - records.first().timestamp > samplePeriod) {\n          records.shift();\n        }\n\n        text += `${\"-\".repeat(indentLevel)}${blockName}: `;\n\n        if (records.length > 0) {\n          let sum = 0;\n          let max = Number.MIN_VALUE;\n          let min = Number.MAX_VALUE;\n\n          for (const record of records) {\n            const duration = record.duration;\n            sum += duration;\n            if (duration > max) max = duration;\n            if (duration < min) min = duration;\n          }\n\n          const average = sum / records.length;\n\n          if (fps === undefined) {\n            // We are at root frame block\n            fps = 1000 / average;\n            text = `FPS: ${Math.floor(fps)}<br>${text}`;\n          }\n\n          text += `${average.toFixed(3)}/${min.toFixed(3)}/${max.toFixed(3)}`;\n        }\n\n        text += \"<br>\";\n        render(block.childBlocks);\n      }\n\n      indentLevel--;\n    }\n\n    render(this.stats);\n    this.container.innerHTML = text;\n  }\n\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/performance-stats.js"],"names":["PerformanceStats","container","document","getElementById","samplePeriod","isOn","currentBlocks","stats","turnOn","style","display","turnOff","toggle","start","blockName","blockRoot","length","last","childBlocks","block","undefined","records","push","record","timestamp","performance","now","end","pop","duration","render","indentLevel","text","fps","rootBlock","Object","prototype","hasOwnProperty","call","first","shift","repeat","sum","max","Number","MIN_VALUE","min","MAX_VALUE","average","Math","floor","toFixed","innerHTML"],"mappings":"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","sourcesContent":["export const PerformanceStats = {\r\n  container: document.getElementById(\"performance-stats\"),\r\n  samplePeriod: 10 * 1000,\r\n  isOn: false,\r\n  currentBlocks: [],\r\n  stats: {},\r\n  turnOn() {\r\n    this.isOn = true;\r\n    this.container.style.display = \"flex\";\r\n  },\r\n  turnOff() {\r\n    this.isOn = false;\r\n    this.container.style.display = \"none\";\r\n    this.stats = {};\r\n  },\r\n  toggle() {\r\n    if (this.isOn) this.turnOff();\r\n    else this.turnOn();\r\n  },\r\n  start(blockName) {\r\n    if (!this.isOn) return;\r\n    const blockRoot = this.currentBlocks.length > 0 ? this.currentBlocks.last().childBlocks : this.stats;\r\n    let block = blockRoot[blockName];\r\n    if (block === undefined) {\r\n      block = {\r\n        records: [],\r\n        childBlocks: {}\r\n      };\r\n      blockRoot[blockName] = block;\r\n    }\r\n    this.currentBlocks.push(block);\r\n    const record = {};\r\n    block.records.push(record);\r\n    record.timestamp = performance.now();\r\n  },\r\n  end() {\r\n    if (!this.isOn) return;\r\n    const now = performance.now();\r\n    const block = this.currentBlocks.pop();\r\n    const record = block.records.last();\r\n    record.duration = now - record.timestamp;\r\n  },\r\n  render() {\r\n    if (!this.isOn) return;\r\n    let indentLevel = -1;\r\n    let text = \"\";\r\n    const samplePeriod = this.samplePeriod;\r\n    let fps;\r\n    function render(rootBlock) {\r\n      indentLevel++;\r\n      for (const blockName in rootBlock) {\r\n        if (!Object.prototype.hasOwnProperty.call(rootBlock, blockName)) continue;\r\n        const block = rootBlock[blockName];\r\n        const records = block.records;\r\n        while (records.length > 1 && records.last().timestamp - records.first().timestamp > samplePeriod) {\r\n          records.shift();\r\n        }\r\n        text += `${\"-\".repeat(indentLevel)}${blockName}: `;\r\n        if (records.length > 0) {\r\n          let sum = 0;\r\n          let max = Number.MIN_VALUE;\r\n          let min = Number.MAX_VALUE;\r\n          for (const record of records) {\r\n            const duration = record.duration;\r\n            sum += duration;\r\n            if (duration > max) max = duration;\r\n            if (duration < min) min = duration;\r\n          }\r\n          const average = sum / records.length;\r\n          if (fps === undefined) {\r\n            // We are at root frame block\r\n            fps = 1000 / average;\r\n            text = `FPS: ${Math.floor(fps)}<br>${text}`;\r\n          }\r\n          text += `${average.toFixed(3)}/${min.toFixed(3)}/${max.toFixed(3)}`;\r\n        }\r\n        text += \"<br>\";\r\n        render(block.childBlocks);\r\n      }\r\n      indentLevel--;\r\n    }\r\n    render(this.stats);\r\n    this.container.innerHTML = text;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}