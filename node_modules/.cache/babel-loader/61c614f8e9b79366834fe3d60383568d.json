{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport { AutomatorPanels } from \"@/components/tabs/automator/AutomatorDocs\";\nimport { GlyphInfo } from \"@/components/modals/options/SelectGlyphInfoDropdown\";\nimport { AUTOMATOR_MODE, AUTOMATOR_TYPE } from \"./automator/automator-backend\";\nimport { DC } from \"./constants\";\nimport { deepmergeAll } from \"@/utility/deepmerge\";\nimport { GlyphTypes } from \"./glyph-effects\"; // This is actually reassigned when importing saves\n// eslint-disable-next-line prefer-const\n\nwindow.player = {\n  antimatter: DC.E1,\n  dimensions: {\n    antimatter: Array.range(0, 8).map(() => ({\n      bought: 0,\n      costBumps: 0,\n      amount: DC.D0\n    })),\n    infinity: Array.range(0, 8).map(tier => ({\n      isUnlocked: false,\n      bought: 0,\n      amount: DC.D0,\n      cost: [DC.E8, DC.E9, DC.E10, DC.E20, DC.E140, DC.E200, DC.E250, DC.E280][tier],\n      baseAmount: 0\n    })),\n    time: Array.range(0, 8).map(tier => ({\n      cost: [DC.D1, DC.D5, DC.E2, DC.E3, DC.E2350, DC.E2650, DC.E3000, DC.E3350][tier],\n      amount: DC.D0,\n      bought: 0\n    }))\n  },\n  buyUntil10: true,\n  sacrificed: DC.D0,\n  achievementBits: Array.repeat(0, 17),\n  secretAchievementBits: Array.repeat(0, 4),\n  infinityUpgrades: new Set(),\n  infinityRebuyables: [0, 0, 0],\n  challenge: {\n    normal: {\n      current: 0,\n      bestTimes: Array.repeat(Number.MAX_VALUE, 11),\n      completedBits: 0\n    },\n    infinity: {\n      current: 0,\n      bestTimes: Array.repeat(Number.MAX_VALUE, 8),\n      completedBits: 0\n    },\n    eternity: {\n      current: 0,\n      unlocked: 0,\n      requirementBits: 0\n    }\n  },\n  infinity: {\n    upgradeBits: 0\n  },\n  auto: {\n    autobuyersOn: true,\n    disableContinuum: false,\n    reality: {\n      mode: 0,\n      rm: DC.D1,\n      glyph: 0,\n      time: 0,\n      shard: 0,\n      isActive: false\n    },\n    eternity: {\n      mode: 0,\n      amount: DC.D1,\n      increaseWithMult: true,\n      time: 1,\n      xHighest: DC.D1,\n      isActive: false\n    },\n    bigCrunch: {\n      cost: 1,\n      interval: 150000,\n      mode: 0,\n      amount: DC.D1,\n      increaseWithMult: true,\n      time: 1,\n      xHighest: DC.D1,\n      isActive: true,\n      lastTick: 0\n    },\n    galaxy: {\n      cost: 1,\n      interval: 20000,\n      limitGalaxies: false,\n      maxGalaxies: 1,\n      buyMax: false,\n      buyMaxInterval: 0,\n      isActive: true,\n      lastTick: 0\n    },\n    dimBoost: {\n      cost: 1,\n      interval: 4000,\n      limitDimBoosts: false,\n      maxDimBoosts: 1,\n      limitUntilGalaxies: false,\n      galaxies: 10,\n      buyMaxInterval: 0,\n      isActive: true,\n      lastTick: 0\n    },\n    tickspeed: {\n      isUnlocked: false,\n      cost: 1,\n      interval: 500,\n      mode: AUTOBUYER_MODE.BUY_SINGLE,\n      isActive: true,\n      lastTick: 0,\n      isBought: false\n    },\n    sacrifice: {\n      multiplier: DC.D2,\n      isActive: true\n    },\n    antimatterDims: {\n      all: Array.range(0, 8).map(tier => ({\n        isUnlocked: false,\n        cost: 1,\n        interval: [500, 600, 700, 800, 900, 1000, 1100, 1200][tier],\n        bulk: 1,\n        mode: AUTOBUYER_MODE.BUY_10,\n        isActive: true,\n        lastTick: 0,\n        isBought: false\n      })),\n      isActive: true\n    },\n    infinityDims: {\n      all: Array.range(0, 8).map(() => ({\n        isActive: false,\n        lastTick: 0\n      })),\n      isActive: true\n    },\n    timeDims: {\n      all: Array.range(0, 8).map(() => ({\n        isActive: false,\n        lastTick: 0\n      })),\n      isActive: true\n    },\n    replicantiGalaxies: {\n      isActive: false\n    },\n    replicantiUpgrades: {\n      all: Array.range(0, 3).map(() => ({\n        isActive: false,\n        lastTick: 0\n      })),\n      isActive: true\n    },\n    timeTheorems: {\n      isActive: false\n    },\n    dilationUpgrades: {\n      all: Array.range(0, 3).map(() => ({\n        isActive: false,\n        lastTick: 0\n      })),\n      isActive: true\n    },\n    blackHolePower: {\n      all: Array.range(0, 2).map(() => ({\n        isActive: false\n      })),\n      isActive: true\n    },\n    realityUpgrades: {\n      all: Array.range(0, 5).map(() => ({\n        isActive: false\n      })),\n      isActive: true\n    },\n    imaginaryUpgrades: {\n      all: Array.range(0, 10).map(() => ({\n        isActive: false\n      })),\n      isActive: true\n    },\n    darkMatterDims: {\n      isActive: false,\n      lastTick: 0\n    },\n    ascension: {\n      isActive: false,\n      lastTick: 0\n    },\n    annihilation: {\n      isActive: false,\n      multiplier: 1.05\n    },\n    singularity: {\n      isActive: false\n    },\n    ipMultBuyer: {\n      isActive: false\n    },\n    epMultBuyer: {\n      isActive: false\n    }\n  },\n  infinityPoints: DC.D0,\n  infinities: DC.D0,\n  infinitiesBanked: DC.D0,\n  dimensionBoosts: 0,\n  galaxies: 0,\n  news: {\n    // This is properly handled in NewsHandler.addSeenNews which adds properties as needed\n    seen: {},\n    specialTickerData: {\n      uselessNewsClicks: 0,\n      paperclips: 0,\n      newsQueuePosition: 1000,\n      eiffelTowerChapter: 0\n    },\n    totalSeen: 0\n  },\n  lastUpdate: new Date().getTime(),\n  backupTimer: 0,\n  chall2Pow: 1,\n  chall3Pow: DC.D0_01,\n  matter: DC.D1,\n  chall9TickspeedCostBumps: 0,\n  chall8TotalSacrifice: DC.D1,\n  ic2Count: 0,\n  partInfinityPoint: 0,\n  partInfinitied: 0,\n  break: false,\n  secretUnlocks: {\n    themes: new Set(),\n    viewSecretTS: false,\n    cancerAchievements: false\n  },\n  shownRuns: {\n    Reality: true,\n    Eternity: true,\n    Infinity: true\n  },\n  requirementChecks: {\n    infinity: {\n      maxAll: false,\n      noSacrifice: true,\n      noAD8: true\n    },\n    eternity: {\n      onlyAD1: true,\n      onlyAD8: true,\n      noAD1: true,\n      noRG: true\n    },\n    reality: {\n      noAM: true,\n      noTriads: true,\n      noPurchasedTT: true,\n      noInfinities: true,\n      noEternities: true,\n      noContinuum: true,\n      maxID1: DC.D0,\n      maxStudies: 0,\n      maxGlyphs: 0,\n      slowestBH: 1\n    },\n    permanent: {\n      emojiGalaxies: 0,\n      singleTickspeed: 0,\n      perkTreeDragging: 0\n    }\n  },\n  records: {\n    gameCreatedTime: Date.now(),\n    totalTimePlayed: 0,\n    timePlayedAtBHUnlock: Number.MAX_VALUE,\n    realTimePlayed: 0,\n    realTimeDoomed: 0,\n    fullGameCompletions: 0,\n    previousRunRealTime: 0,\n    totalAntimatter: DC.E1,\n    recentInfinities: Array.range(0, 10).map(() => [Number.MAX_VALUE, Number.MAX_VALUE, DC.D1, DC.D1, \"\"]),\n    recentEternities: Array.range(0, 10).map(() => [Number.MAX_VALUE, Number.MAX_VALUE, DC.D1, DC.D1, \"\", DC.D0]),\n    recentRealities: Array.range(0, 10).map(() => [Number.MAX_VALUE, Number.MAX_VALUE, DC.D1, 1, \"\", 0, 0]),\n    thisInfinity: {\n      time: 0,\n      realTime: 0,\n      lastBuyTime: 0,\n      maxAM: DC.D0,\n      bestIPmin: DC.D0,\n      bestIPminVal: DC.D0\n    },\n    bestInfinity: {\n      time: Number.MAX_VALUE,\n      realTime: Number.MAX_VALUE,\n      bestIPminEternity: DC.D0,\n      bestIPminReality: DC.D0\n    },\n    thisEternity: {\n      time: 0,\n      realTime: 0,\n      maxAM: DC.D0,\n      maxIP: DC.D0,\n      bestIPMsWithoutMaxAll: DC.D0,\n      bestEPmin: DC.D0,\n      bestEPminVal: DC.D0,\n      bestInfinitiesPerMs: DC.D0\n    },\n    bestEternity: {\n      time: Number.MAX_VALUE,\n      realTime: Number.MAX_VALUE,\n      bestEPminReality: DC.D0\n    },\n    thisReality: {\n      time: 0,\n      realTime: 0,\n      maxAM: DC.D0,\n      maxIP: DC.D0,\n      maxEP: DC.D0,\n      bestEternitiesPerMs: DC.D0,\n      maxReplicanti: DC.D0,\n      maxDT: DC.D0,\n      bestRSmin: 0,\n      bestRSminVal: 0\n    },\n    bestReality: {\n      time: Number.MAX_VALUE,\n      realTime: Number.MAX_VALUE,\n      glyphStrength: 0,\n      RM: DC.D0,\n      RMSet: [],\n      RMmin: DC.D0,\n      RMminSet: [],\n      glyphLevel: 0,\n      glyphLevelSet: [],\n      bestEP: DC.D0,\n      bestEPSet: [],\n      speedSet: [],\n      iMCapSet: [],\n      laitelaSet: []\n    }\n  },\n  speedrun: {\n    isUnlocked: false,\n    isActive: false,\n    isSegmented: false,\n    usedSTD: false,\n    hasStarted: false,\n    hideInfo: false,\n    displayAllMilestones: false,\n    startDate: 0,\n    name: \"\",\n    offlineTimeUsed: 0,\n    // One spot for every entry in GameDatabase.speedrunMilestones (note: 1-indexed)\n    records: Array.repeat(0, 26),\n    achievementTimes: {},\n    seedSelection: SPEEDRUN_SEED_STATE.FIXED,\n    initialSeed: 0,\n    previousRuns: {}\n  },\n  IPMultPurchases: 0,\n  version: 25,\n  infinityPower: DC.D1,\n  postC4Tier: 0,\n  eternityPoints: DC.D0,\n  eternities: DC.D0,\n  eternityUpgrades: new Set(),\n  epmultUpgrades: 0,\n  timeShards: DC.D0,\n  totalTickGained: 0,\n  totalTickBought: 0,\n  replicanti: {\n    unl: false,\n    amount: DC.D0,\n    chance: 0.01,\n    chanceCost: DC.E150,\n    interval: 1000,\n    intervalCost: DC.E140,\n    boughtGalaxyCap: 0,\n    galaxies: 0,\n    galCost: DC.E170\n  },\n  timestudy: {\n    theorem: DC.D0,\n    maxTheorem: DC.D0,\n    amBought: 0,\n    ipBought: 0,\n    epBought: 0,\n    studies: [],\n    shopMinimized: false,\n    preferredPaths: [[], 0],\n    presets: new Array(6).fill({\n      name: \"\",\n      studies: \"\"\n    })\n  },\n  eternityChalls: {},\n  respec: false,\n  eterc8ids: 50,\n  eterc8repl: 40,\n  dilation: {\n    studies: [],\n    active: false,\n    tachyonParticles: DC.D0,\n    dilatedTime: DC.D0,\n    nextThreshold: DC.E3,\n    baseTachyonGalaxies: 0,\n    totalTachyonGalaxies: 0,\n    upgrades: new Set(),\n    rebuyables: {\n      1: 0,\n      2: 0,\n      3: 0,\n      11: 0,\n      12: 0,\n      13: 0\n    },\n    lastEP: DC.DM1\n  },\n  realities: 0,\n  partSimulatedReality: 0,\n  reality: {\n    realityMachines: DC.D0,\n    maxRM: DC.D0,\n    imaginaryMachines: 0,\n    iMCap: 0,\n    glyphs: {\n      active: [],\n      inventory: [],\n      sac: {\n        power: 0,\n        infinity: 0,\n        time: 0,\n        replication: 0,\n        dilation: 0,\n        effarig: 0,\n        reality: 0\n      },\n      undo: [],\n      sets: new Array(7).fill({\n        name: \"\",\n        glyphs: []\n      }),\n      protectedRows: 2,\n      filter: {\n        select: AUTO_GLYPH_SCORE.LOWEST_SACRIFICE,\n        trash: AUTO_GLYPH_REJECT.SACRIFICE,\n        simple: 0,\n        types: GlyphTypes.list.filter(t => ALCHEMY_BASIC_GLYPH_TYPES.includes(t.id)).mapToObject(t => t.id, t => ({\n          rarity: 0,\n          score: 0,\n          effectCount: 0,\n          specifiedMask: 0,\n          effectScores: Array.repeat(0, t.effects.length)\n        }))\n      },\n      createdRealityGlyph: false,\n      cosmetics: {\n        active: false,\n        glowNotification: false,\n        unlockedFromNG: [],\n        symbolMap: {},\n        colorMap: {}\n      }\n    },\n    initialSeed: Math.floor(Date.now() * Math.random() + 1),\n    // The seed value should get set from initialSeed upon unlocking reality, but we set it to 1 as a fallback in\n    // case somehow it doesn't get set properly. Do not change this to 0, as a seed of 0 causes the game to hang\n    seed: 1,\n    secondGaussian: 1e6,\n    musicSeed: Math.floor(Date.now() * Math.random() + 0xBCDDECCB),\n    musicSecondGaussian: 1e6,\n    rebuyables: {\n      1: 0,\n      2: 0,\n      3: 0,\n      4: 0,\n      5: 0\n    },\n    upgradeBits: 0,\n    upgReqs: 0,\n    imaginaryUpgradeBits: 0,\n    imaginaryUpgReqs: 0,\n    imaginaryRebuyables: {\n      1: 0,\n      2: 0,\n      3: 0,\n      4: 0,\n      5: 0,\n      6: 0,\n      7: 0,\n      8: 0,\n      9: 0,\n      10: 0\n    },\n    reqLock: {\n      reality: 0,\n      imaginary: 0\n    },\n    perks: new Set(),\n    respec: false,\n    showGlyphSacrifice: false,\n    showSidebarPanel: GLYPH_SIDEBAR_MODE.INVENTORY_MANAGEMENT,\n    autoSort: 0,\n    autoCollapse: false,\n    autoAutoClean: false,\n    applyFilterToPurge: false,\n    moveGlyphsOnProtection: false,\n    perkPoints: 0,\n    unlockedEC: 0,\n    autoEC: true,\n    lastAutoEC: 0,\n    partEternitied: DC.D0,\n    autoAchieve: true,\n    gainedAutoAchievements: true,\n    automator: {\n      state: {\n        mode: AUTOMATOR_MODE.STOP,\n        topLevelScript: 0,\n        editorScript: 0,\n        repeat: true,\n        forceRestart: true,\n        followExecution: true,\n        stack: []\n      },\n      scripts: {},\n      constants: {},\n      constantSortOrder: [],\n      execTimer: 0,\n      type: AUTOMATOR_TYPE.TEXT,\n      forceUnlock: false,\n      currentInfoPane: AutomatorPanels.INTRO_PAGE\n    },\n    achTimer: 0,\n    hasCheckedFilter: false\n  },\n  blackHole: Array.range(0, 2).map(id => ({\n    id,\n    intervalUpgrades: 0,\n    powerUpgrades: 0,\n    durationUpgrades: 0,\n    phase: 0,\n    active: false,\n    unlocked: false,\n    activations: 0\n  })),\n  blackHolePause: false,\n  blackHoleAutoPauseMode: 0,\n  blackHolePauseTime: 0,\n  blackHoleNegative: 1,\n  celestials: {\n    teresa: {\n      pouredAmount: 0,\n      quoteBits: 0,\n      unlockBits: 0,\n      run: false,\n      bestRunAM: DC.D1,\n      bestAMSet: [],\n      perkShop: Array.repeat(0, 5),\n      lastRepeatedMachines: DC.D0\n    },\n    effarig: {\n      relicShards: 0,\n      unlockBits: 0,\n      run: false,\n      quoteBits: 0,\n      glyphWeights: {\n        ep: 25,\n        repl: 25,\n        dt: 25,\n        eternities: 25\n      },\n      autoAdjustGlyphWeights: false\n    },\n    enslaved: {\n      isStoring: false,\n      stored: 0,\n      isStoringReal: false,\n      storedReal: 0,\n      autoStoreReal: false,\n      isAutoReleasing: false,\n      quoteBits: 0,\n      unlocks: [],\n      run: false,\n      completed: false,\n      tesseracts: 0,\n      hasSecretStudy: false,\n      feltEternity: false,\n      progressBits: 0,\n      hintBits: 0,\n      hintUnlockProgress: 0,\n      glyphHintsGiven: 0,\n      zeroHintTime: 0\n    },\n    v: {\n      unlockBits: 0,\n      run: false,\n      quoteBits: 0,\n      runUnlocks: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      goalReductionSteps: [0, 0, 0, 0, 0, 0, 0, 0, 0],\n      STSpent: 0,\n      runGlyphs: [[], [], [], [], [], [], [], [], []],\n      // The -10 is for glyph count, as glyph count for V is stored internally as a negative number\n      runRecords: [-10, 0, 0, 0, 0, 0, 0, 0, 0],\n      wantsFlipped: true\n    },\n    ra: {\n      pets: {\n        teresa: {\n          level: 1,\n          memories: 0,\n          memoryChunks: 0,\n          memoryUpgrades: 0,\n          chunkUpgrades: 0\n        },\n        effarig: {\n          level: 1,\n          memories: 0,\n          memoryChunks: 0,\n          memoryUpgrades: 0,\n          chunkUpgrades: 0\n        },\n        enslaved: {\n          level: 1,\n          memories: 0,\n          memoryChunks: 0,\n          memoryUpgrades: 0,\n          chunkUpgrades: 0\n        },\n        v: {\n          level: 1,\n          memories: 0,\n          memoryChunks: 0,\n          memoryUpgrades: 0,\n          chunkUpgrades: 0\n        }\n      },\n      alchemy: Array.repeat(0, 21).map(() => ({\n        amount: 0,\n        reaction: false\n      })),\n      highestRefinementValue: {\n        power: 0,\n        infinity: 0,\n        time: 0,\n        replication: 0,\n        dilation: 0,\n        effarig: 0\n      },\n      quoteBits: 0,\n      momentumTime: 0,\n      unlockBits: 0,\n      run: false,\n      charged: new Set(),\n      disCharge: false,\n      peakGamespeed: 1,\n      petWithRemembrance: \"\"\n    },\n    laitela: {\n      darkMatter: DC.D0,\n      maxDarkMatter: DC.D0,\n      run: false,\n      quoteBits: 0,\n      dimensions: Array.range(0, 4).map(() => ({\n        amount: DC.D0,\n        intervalUpgrades: 0,\n        powerDMUpgrades: 0,\n        powerDEUpgrades: 0,\n        timeSinceLastUpdate: 0,\n        ascensionCount: 0\n      })),\n      entropy: 0,\n      thisCompletion: 3600,\n      fastestCompletion: 3600,\n      difficultyTier: 0,\n      upgrades: {},\n      darkMatterMult: 1,\n      darkEnergy: 0,\n      singularitySorting: {\n        displayResource: 0,\n        sortResource: 0,\n        showCompleted: 0,\n        sortOrder: 0\n      },\n      singularities: 0,\n      singularityCapIncreases: 0,\n      lastCheckedMilestones: 0,\n      milestoneGlow: true\n    },\n    pelle: {\n      doomed: false,\n      upgrades: new Set(),\n      remnants: 0,\n      realityShards: DC.D0,\n      records: {\n        totalAntimatter: DC.D0,\n        totalInfinityPoints: DC.D0,\n        totalEternityPoints: DC.D0\n      },\n      rebuyables: {\n        antimatterDimensionMult: 0,\n        timeSpeedMult: 0,\n        glyphLevels: 0,\n        infConversion: 0,\n        galaxyPower: 0,\n        galaxyGeneratorAdditive: 0,\n        galaxyGeneratorMultiplicative: 0,\n        galaxyGeneratorAntimatterMult: 0,\n        galaxyGeneratorIPMult: 0,\n        galaxyGeneratorEPMult: 0\n      },\n      rifts: {\n        vacuum: {\n          fill: DC.D0,\n          active: false,\n          reducedTo: 1\n        },\n        decay: {\n          fill: DC.D0,\n          active: false,\n          percentageSpent: 0,\n          reducedTo: 1\n        },\n        chaos: {\n          fill: 0,\n          active: false,\n          reducedTo: 1\n        },\n        recursion: {\n          fill: DC.D0,\n          active: false,\n          reducedTo: 1\n        },\n        paradox: {\n          fill: DC.D0,\n          active: false,\n          reducedTo: 1\n        }\n      },\n      progressBits: 0,\n      galaxyGenerator: {\n        unlocked: false,\n        spentGalaxies: 0,\n        generatedGalaxies: 0,\n        phase: 0,\n        sacrificeActive: false\n      },\n      quoteBits: 0,\n      collapsed: {\n        upgrades: false,\n        rifts: false,\n        galaxies: false\n      },\n      showBought: false\n    }\n  },\n  isGameEnd: false,\n  tabNotifications: new Set(),\n  triggeredTabNotificationBits: 0,\n  tutorialState: 0,\n  tutorialActive: true,\n  options: {\n    news: {\n      enabled: true,\n      repeatBuffer: 40,\n      AIChance: 0,\n      speed: 1,\n      includeAnimated: true\n    },\n    notation: \"Mixed scientific\",\n    notationDigits: {\n      comma: 5,\n      notation: 9\n    },\n    sidebarResourceID: 0,\n    retryChallenge: false,\n    retryCelestial: false,\n    showAllChallenges: false,\n    cloudEnabled: true,\n    hideGoogleName: false,\n    showCloudModal: true,\n    forceCloudOverwrite: false,\n    syncSaveIntervals: true,\n    hotkeys: true,\n    themeClassic: \"Normal\",\n    themeModern: \"Normal\",\n    updateRate: 33,\n    newUI: true,\n    offlineProgress: true,\n    loadBackupWithoutOffline: false,\n    automaticTabSwitching: true,\n    respecIntoProtected: false,\n    offlineTicks: 1e5,\n    hibernationCatchup: true,\n    statTabResources: 0,\n    multiplierTab: {\n      currTab: 0,\n      showAltGroup: false,\n      replacePowers: false\n    },\n    autosaveInterval: 30000,\n    showTimeSinceSave: true,\n    saveFileName: \"\",\n    exportedFileCount: 0,\n    hideCompletedAchievementRows: false,\n    glyphTextColors: true,\n    headerTextColored: false,\n    showNewGlyphIcon: true,\n    showUnequippedGlyphIcon: true,\n    highContrastRarity: false,\n    swapGlyphColors: false,\n    hideAlterationEffects: false,\n    ignoreGlyphEffects: true,\n    ignoreGlyphLevel: true,\n    ignoreGlyphRarity: true,\n    glyphBG: GLYPH_BG_SETTING.AUTO,\n    glyphBorders: true,\n    showHintText: {\n      showPercentage: true,\n      achievements: true,\n      achievementUnlockStates: true,\n      challenges: true,\n      studies: true,\n      glyphEffectDots: true,\n      realityUpgrades: true,\n      perks: true,\n      alchemy: true,\n      glyphInfoType: GlyphInfo.types.NONE,\n      showGlyphInfoByDefault: false\n    },\n    animations: {\n      bigCrunch: true,\n      eternity: true,\n      dilation: true,\n      tachyonParticles: true,\n      reality: true,\n      background: true,\n      blobSnowflakes: 16\n    },\n    confirmations: {\n      armageddon: true,\n      sacrifice: true,\n      challenges: true,\n      exitChallenge: true,\n      eternity: true,\n      dilation: true,\n      resetReality: true,\n      glyphReplace: true,\n      glyphSacrifice: true,\n      autoClean: true,\n      sacrificeAll: true,\n      glyphSelection: true,\n      glyphUndo: true,\n      deleteGlyphSetSave: true,\n      glyphRefine: true,\n      bigCrunch: true,\n      replicantiGalaxy: true,\n      antimatterGalaxy: true,\n      dimensionBoost: true,\n      switchAutomatorMode: true,\n      respecIAP: true\n    },\n    awayProgress: {\n      antimatter: true,\n      dimensionBoosts: true,\n      antimatterGalaxies: true,\n      infinities: true,\n      infinityPoints: true,\n      replicanti: true,\n      replicantiGalaxies: true,\n      eternities: true,\n      eternityPoints: true,\n      tachyonParticles: true,\n      dilatedTime: true,\n      tachyonGalaxies: true,\n      timeTheorems: true,\n      achievementCount: true,\n      realities: true,\n      realityMachines: true,\n      imaginaryMachines: true,\n      relicShards: true,\n      darkMatter: true,\n      darkEnergy: true,\n      singularities: true,\n      celestialMemories: true,\n      blackHole: true,\n      realityShards: true\n    },\n    hiddenTabBits: 0,\n    hiddenSubtabBits: Array.repeat(0, 11),\n    lastOpenTab: 0,\n    lastOpenSubtab: Array.repeat(0, 11),\n    perkLayout: 0,\n    perkPhysicsEnabled: true,\n    automatorEvents: {\n      newestFirst: false,\n      timestampType: 0,\n      maxEntries: 200,\n      clearOnReality: true,\n      clearOnRestart: true\n    },\n    invertTTgenDisplay: false,\n    autoRealityForFilter: false,\n    gamePaused: false\n  },\n  IAP: {\n    enabled: false,\n    checkoutSession: {\n      id: false\n    }\n  }\n};\nexport const Player = {\n  defaultStart: deepmergeAll([{}, player]),\n\n  get isInMatterChallenge() {\n    return NormalChallenge(11).isRunning || InfinityChallenge(6).isRunning;\n  },\n\n  get isInAntimatterChallenge() {\n    return NormalChallenge.isRunning || InfinityChallenge.isRunning;\n  },\n\n  get antimatterChallenge() {\n    return NormalChallenge.current || InfinityChallenge.current;\n  },\n\n  get isInAnyChallenge() {\n    return this.isInAntimatterChallenge || EternityChallenge.isRunning;\n  },\n\n  get anyChallenge() {\n    return this.antimatterChallenge || EternityChallenge.current;\n  },\n\n  get canCrunch() {\n    var _NormalChallenge$curr;\n\n    if (Enslaved.isRunning && Enslaved.BROKEN_CHALLENGES.includes((_NormalChallenge$curr = NormalChallenge.current) === null || _NormalChallenge$curr === void 0 ? void 0 : _NormalChallenge$curr.id)) return false;\n    const challenge = NormalChallenge.current || InfinityChallenge.current;\n    const goal = challenge === undefined ? Decimal.NUMBER_MAX_VALUE : challenge.goal;\n    return player.records.thisInfinity.maxAM.gte(goal);\n  },\n\n  get canEternity() {\n    return player.records.thisEternity.maxIP.gte(Player.eternityGoal);\n  },\n\n  get bestRunIPPM() {\n    return GameCache.bestRunIPPM.value;\n  },\n\n  get averageRealTimePerEternity() {\n    return GameCache.averageRealTimePerEternity.value;\n  },\n\n  get tickSpeedMultDecrease() {\n    return GameCache.tickSpeedMultDecrease.value;\n  },\n\n  get dimensionMultDecrease() {\n    return GameCache.dimensionMultDecrease.value;\n  },\n\n  get infinityGoal() {\n    const challenge = NormalChallenge.current || InfinityChallenge.current;\n    return challenge === undefined ? Decimal.NUMBER_MAX_VALUE : challenge.goal;\n  },\n\n  get infinityLimit() {\n    const challenge = NormalChallenge.current || InfinityChallenge.current;\n    return challenge === undefined ? Decimal.MAX_VALUE : challenge.goal;\n  },\n\n  get eternityGoal() {\n    return EternityChallenge.isRunning ? EternityChallenge.current.currentGoal : requiredIPForEP(1);\n  },\n\n  get automatorUnlocked() {\n    return AutomatorPoints.totalPoints >= AutomatorPoints.pointsForAutomator || player.reality.automator.forceUnlock;\n  },\n\n  resetRequirements(key) {\n    const glyphCount = player.requirementChecks.reality.maxGlyphs; // This switch case intentionally falls through because every lower layer should be reset as well\n\n    switch (key) {\n      case \"reality\":\n        player.requirementChecks.reality = {\n          noAM: true,\n          noTriads: true,\n          noPurchasedTT: true,\n          // Note that these two checks below are only used in row 2, which is in principle always before the \"flow\"\n          // upgrades in row 3 which passively generate infinities/eternities. These upgrades won't cause a lockout\n          // as these requirements are only invalidated on manual infinities or eternities.\n          noInfinities: true,\n          noEternities: true,\n          noContinuum: player.auto.disableContinuum,\n          maxID1: DC.D0,\n          maxStudies: 0,\n          // This only gets set to the correct value when Glyphs.updateMaxGlyphCount is called, which always happens\n          // before this part of the code is reached in the Reality reset. Nevertheless, we want to keep its old value.\n          maxGlyphs: glyphCount,\n          slowestBH: BlackHoles.areNegative ? player.blackHoleNegative : 1\n        };\n      // eslint-disable-next-line no-fallthrough\n\n      case \"eternity\":\n        player.requirementChecks.eternity = {\n          onlyAD1: true,\n          onlyAD8: true,\n          noAD1: true,\n          noRG: true\n        };\n      // eslint-disable-next-line no-fallthrough\n\n      case \"infinity\":\n        player.requirementChecks.infinity = {\n          maxAll: false,\n          noSacrifice: true,\n          noAD8: true\n        };\n        break;\n\n      default:\n        throw Error(\"Unrecognized prestige layer for requirement reset\");\n    }\n  }\n\n};\nexport function guardFromNaNValues(obj) {\n  function isObject(ob) {\n    return ob !== null && typeof ob === \"object\" && !(ob instanceof Decimal);\n  }\n\n  for (const key in obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, key)) continue;\n    if (key === \"automator\") continue;\n    let value = obj[key];\n\n    if (isObject(value)) {\n      guardFromNaNValues(value);\n      continue;\n    }\n\n    if (typeof value === \"number\") {\n      Object.defineProperty(obj, key, {\n        enumerable: true,\n        configurable: true,\n        get: () => value,\n        set: function guardedSetter(newValue) {\n          if (newValue === null || newValue === undefined) {\n            throw new Error(\"null/undefined player property assignment\");\n          }\n\n          if (typeof newValue !== \"number\") {\n            throw new Error(\"Non-Number assignment to Number player property\");\n          }\n\n          if (!isFinite(newValue)) {\n            throw new Error(\"NaN player property assignment\");\n          }\n\n          value = newValue;\n        }\n      });\n    }\n\n    if (value instanceof Decimal) {\n      Object.defineProperty(obj, key, {\n        enumerable: true,\n        configurable: true,\n        get: () => value,\n        set: function guardedSetter(newValue) {\n          if (newValue === null || newValue === undefined) {\n            throw new Error(\"null/undefined player property assignment\");\n          }\n\n          if (!(newValue instanceof Decimal)) {\n            throw new Error(\"Non-Decimal assignment to Decimal player property\");\n          }\n\n          if (!isFinite(newValue.mantissa) || !isFinite(newValue.exponent)) {\n            throw new Error(\"NaN player property assignment\");\n          }\n\n          value = newValue;\n        }\n      });\n    }\n  }\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/player.js"],"names":["AutomatorPanels","GlyphInfo","AUTOMATOR_MODE","AUTOMATOR_TYPE","DC","deepmergeAll","GlyphTypes","window","player","antimatter","E1","dimensions","Array","range","map","bought","costBumps","amount","D0","infinity","tier","isUnlocked","cost","E8","E9","E10","E20","E140","E200","E250","E280","baseAmount","time","D1","D5","E2","E3","E2350","E2650","E3000","E3350","buyUntil10","sacrificed","achievementBits","repeat","secretAchievementBits","infinityUpgrades","Set","infinityRebuyables","challenge","normal","current","bestTimes","Number","MAX_VALUE","completedBits","eternity","unlocked","requirementBits","upgradeBits","auto","autobuyersOn","disableContinuum","reality","mode","rm","glyph","shard","isActive","increaseWithMult","xHighest","bigCrunch","interval","lastTick","galaxy","limitGalaxies","maxGalaxies","buyMax","buyMaxInterval","dimBoost","limitDimBoosts","maxDimBoosts","limitUntilGalaxies","galaxies","tickspeed","AUTOBUYER_MODE","BUY_SINGLE","isBought","sacrifice","multiplier","D2","antimatterDims","all","bulk","BUY_10","infinityDims","timeDims","replicantiGalaxies","replicantiUpgrades","timeTheorems","dilationUpgrades","blackHolePower","realityUpgrades","imaginaryUpgrades","darkMatterDims","ascension","annihilation","singularity","ipMultBuyer","epMultBuyer","infinityPoints","infinities","infinitiesBanked","dimensionBoosts","news","seen","specialTickerData","uselessNewsClicks","paperclips","newsQueuePosition","eiffelTowerChapter","totalSeen","lastUpdate","Date","getTime","backupTimer","chall2Pow","chall3Pow","D0_01","matter","chall9TickspeedCostBumps","chall8TotalSacrifice","ic2Count","partInfinityPoint","partInfinitied","break","secretUnlocks","themes","viewSecretTS","cancerAchievements","shownRuns","Reality","Eternity","Infinity","requirementChecks","maxAll","noSacrifice","noAD8","onlyAD1","onlyAD8","noAD1","noRG","noAM","noTriads","noPurchasedTT","noInfinities","noEternities","noContinuum","maxID1","maxStudies","maxGlyphs","slowestBH","permanent","emojiGalaxies","singleTickspeed","perkTreeDragging","records","gameCreatedTime","now","totalTimePlayed","timePlayedAtBHUnlock","realTimePlayed","realTimeDoomed","fullGameCompletions","previousRunRealTime","totalAntimatter","recentInfinities","recentEternities","recentRealities","thisInfinity","realTime","lastBuyTime","maxAM","bestIPmin","bestIPminVal","bestInfinity","bestIPminEternity","bestIPminReality","thisEternity","maxIP","bestIPMsWithoutMaxAll","bestEPmin","bestEPminVal","bestInfinitiesPerMs","bestEternity","bestEPminReality","thisReality","maxEP","bestEternitiesPerMs","maxReplicanti","maxDT","bestRSmin","bestRSminVal","bestReality","glyphStrength","RM","RMSet","RMmin","RMminSet","glyphLevel","glyphLevelSet","bestEP","bestEPSet","speedSet","iMCapSet","laitelaSet","speedrun","isSegmented","usedSTD","hasStarted","hideInfo","displayAllMilestones","startDate","name","offlineTimeUsed","achievementTimes","seedSelection","SPEEDRUN_SEED_STATE","FIXED","initialSeed","previousRuns","IPMultPurchases","version","infinityPower","postC4Tier","eternityPoints","eternities","eternityUpgrades","epmultUpgrades","timeShards","totalTickGained","totalTickBought","replicanti","unl","chance","chanceCost","E150","intervalCost","boughtGalaxyCap","galCost","E170","timestudy","theorem","maxTheorem","amBought","ipBought","epBought","studies","shopMinimized","preferredPaths","presets","fill","eternityChalls","respec","eterc8ids","eterc8repl","dilation","active","tachyonParticles","dilatedTime","nextThreshold","baseTachyonGalaxies","totalTachyonGalaxies","upgrades","rebuyables","lastEP","DM1","realities","partSimulatedReality","realityMachines","maxRM","imaginaryMachines","iMCap","glyphs","inventory","sac","power","replication","effarig","undo","sets","protectedRows","filter","select","AUTO_GLYPH_SCORE","LOWEST_SACRIFICE","trash","AUTO_GLYPH_REJECT","SACRIFICE","simple","types","list","t","ALCHEMY_BASIC_GLYPH_TYPES","includes","id","mapToObject","rarity","score","effectCount","specifiedMask","effectScores","effects","length","createdRealityGlyph","cosmetics","glowNotification","unlockedFromNG","symbolMap","colorMap","Math","floor","random","seed","secondGaussian","musicSeed","musicSecondGaussian","upgReqs","imaginaryUpgradeBits","imaginaryUpgReqs","imaginaryRebuyables","reqLock","imaginary","perks","showGlyphSacrifice","showSidebarPanel","GLYPH_SIDEBAR_MODE","INVENTORY_MANAGEMENT","autoSort","autoCollapse","autoAutoClean","applyFilterToPurge","moveGlyphsOnProtection","perkPoints","unlockedEC","autoEC","lastAutoEC","partEternitied","autoAchieve","gainedAutoAchievements","automator","state","STOP","topLevelScript","editorScript","forceRestart","followExecution","stack","scripts","constants","constantSortOrder","execTimer","type","TEXT","forceUnlock","currentInfoPane","INTRO_PAGE","achTimer","hasCheckedFilter","blackHole","intervalUpgrades","powerUpgrades","durationUpgrades","phase","activations","blackHolePause","blackHoleAutoPauseMode","blackHolePauseTime","blackHoleNegative","celestials","teresa","pouredAmount","quoteBits","unlockBits","run","bestRunAM","bestAMSet","perkShop","lastRepeatedMachines","relicShards","glyphWeights","ep","repl","dt","autoAdjustGlyphWeights","enslaved","isStoring","stored","isStoringReal","storedReal","autoStoreReal","isAutoReleasing","unlocks","completed","tesseracts","hasSecretStudy","feltEternity","progressBits","hintBits","hintUnlockProgress","glyphHintsGiven","zeroHintTime","v","runUnlocks","goalReductionSteps","STSpent","runGlyphs","runRecords","wantsFlipped","ra","pets","level","memories","memoryChunks","memoryUpgrades","chunkUpgrades","alchemy","reaction","highestRefinementValue","momentumTime","charged","disCharge","peakGamespeed","petWithRemembrance","laitela","darkMatter","maxDarkMatter","powerDMUpgrades","powerDEUpgrades","timeSinceLastUpdate","ascensionCount","entropy","thisCompletion","fastestCompletion","difficultyTier","darkMatterMult","darkEnergy","singularitySorting","displayResource","sortResource","showCompleted","sortOrder","singularities","singularityCapIncreases","lastCheckedMilestones","milestoneGlow","pelle","doomed","remnants","realityShards","totalInfinityPoints","totalEternityPoints","antimatterDimensionMult","timeSpeedMult","glyphLevels","infConversion","galaxyPower","galaxyGeneratorAdditive","galaxyGeneratorMultiplicative","galaxyGeneratorAntimatterMult","galaxyGeneratorIPMult","galaxyGeneratorEPMult","rifts","vacuum","reducedTo","decay","percentageSpent","chaos","recursion","paradox","galaxyGenerator","spentGalaxies","generatedGalaxies","sacrificeActive","collapsed","showBought","isGameEnd","tabNotifications","triggeredTabNotificationBits","tutorialState","tutorialActive","options","enabled","repeatBuffer","AIChance","speed","includeAnimated","notation","notationDigits","comma","sidebarResourceID","retryChallenge","retryCelestial","showAllChallenges","cloudEnabled","hideGoogleName","showCloudModal","forceCloudOverwrite","syncSaveIntervals","hotkeys","themeClassic","themeModern","updateRate","newUI","offlineProgress","loadBackupWithoutOffline","automaticTabSwitching","respecIntoProtected","offlineTicks","hibernationCatchup","statTabResources","multiplierTab","currTab","showAltGroup","replacePowers","autosaveInterval","showTimeSinceSave","saveFileName","exportedFileCount","hideCompletedAchievementRows","glyphTextColors","headerTextColored","showNewGlyphIcon","showUnequippedGlyphIcon","highContrastRarity","swapGlyphColors","hideAlterationEffects","ignoreGlyphEffects","ignoreGlyphLevel","ignoreGlyphRarity","glyphBG","GLYPH_BG_SETTING","AUTO","glyphBorders","showHintText","showPercentage","achievements","achievementUnlockStates","challenges","glyphEffectDots","glyphInfoType","NONE","showGlyphInfoByDefault","animations","background","blobSnowflakes","confirmations","armageddon","exitChallenge","resetReality","glyphReplace","glyphSacrifice","autoClean","sacrificeAll","glyphSelection","glyphUndo","deleteGlyphSetSave","glyphRefine","replicantiGalaxy","antimatterGalaxy","dimensionBoost","switchAutomatorMode","respecIAP","awayProgress","antimatterGalaxies","tachyonGalaxies","achievementCount","celestialMemories","hiddenTabBits","hiddenSubtabBits","lastOpenTab","lastOpenSubtab","perkLayout","perkPhysicsEnabled","automatorEvents","newestFirst","timestampType","maxEntries","clearOnReality","clearOnRestart","invertTTgenDisplay","autoRealityForFilter","gamePaused","IAP","checkoutSession","Player","defaultStart","isInMatterChallenge","NormalChallenge","isRunning","InfinityChallenge","isInAntimatterChallenge","antimatterChallenge","isInAnyChallenge","EternityChallenge","anyChallenge","canCrunch","Enslaved","BROKEN_CHALLENGES","goal","undefined","Decimal","NUMBER_MAX_VALUE","gte","canEternity","eternityGoal","bestRunIPPM","GameCache","value","averageRealTimePerEternity","tickSpeedMultDecrease","dimensionMultDecrease","infinityGoal","infinityLimit","currentGoal","requiredIPForEP","automatorUnlocked","AutomatorPoints","totalPoints","pointsForAutomator","resetRequirements","key","glyphCount","BlackHoles","areNegative","Error","guardFromNaNValues","obj","isObject","ob","Object","prototype","hasOwnProperty","call","defineProperty","enumerable","configurable","get","set","guardedSetter","newValue","isFinite","mantissa","exponent"],"mappings":"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","sourcesContent":["import { AutomatorPanels } from \"@/components/tabs/automator/AutomatorDocs\";\r\nimport { GlyphInfo } from \"@/components/modals/options/SelectGlyphInfoDropdown\";\r\n\r\nimport { AUTOMATOR_MODE, AUTOMATOR_TYPE } from \"./automator/automator-backend\";\r\nimport { DC } from \"./constants\";\r\nimport { deepmergeAll } from \"@/utility/deepmerge\";\r\nimport { GlyphTypes } from \"./glyph-effects\";\r\n\r\n// This is actually reassigned when importing saves\r\n// eslint-disable-next-line prefer-const\r\nwindow.player = {\r\n  antimatter: DC.E1,\r\n  dimensions: {\r\n    antimatter: Array.range(0, 8).map(() => ({\r\n      bought: 0,\r\n      costBumps: 0,\r\n      amount: DC.D0\r\n    })),\r\n    infinity: Array.range(0, 8).map(tier => ({\r\n      isUnlocked: false,\r\n      bought: 0,\r\n      amount: DC.D0,\r\n      cost: [DC.E8, DC.E9, DC.E10, DC.E20, DC.E140, DC.E200, DC.E250, DC.E280][tier],\r\n      baseAmount: 0\r\n    })),\r\n    time: Array.range(0, 8).map(tier => ({\r\n      cost: [DC.D1, DC.D5, DC.E2, DC.E3, DC.E2350, DC.E2650, DC.E3000, DC.E3350][tier],\r\n      amount: DC.D0,\r\n      bought: 0\r\n    }))\r\n  },\r\n  buyUntil10: true,\r\n  sacrificed: DC.D0,\r\n  achievementBits: Array.repeat(0, 17),\r\n  secretAchievementBits: Array.repeat(0, 4),\r\n  infinityUpgrades: new Set(),\r\n  infinityRebuyables: [0, 0, 0],\r\n  challenge: {\r\n    normal: {\r\n      current: 0,\r\n      bestTimes: Array.repeat(Number.MAX_VALUE, 11),\r\n      completedBits: 0,\r\n    },\r\n    infinity: {\r\n      current: 0,\r\n      bestTimes: Array.repeat(Number.MAX_VALUE, 8),\r\n      completedBits: 0,\r\n    },\r\n    eternity: {\r\n      current: 0,\r\n      unlocked: 0,\r\n      requirementBits: 0,\r\n    }\r\n  },\r\n  infinity: {\r\n    upgradeBits: 0\r\n  },\r\n  auto: {\r\n    autobuyersOn: true,\r\n    disableContinuum: false,\r\n    reality: {\r\n      mode: 0,\r\n      rm: DC.D1,\r\n      glyph: 0,\r\n      time: 0,\r\n      shard: 0,\r\n      isActive: false\r\n    },\r\n    eternity: {\r\n      mode: 0,\r\n      amount: DC.D1,\r\n      increaseWithMult: true,\r\n      time: 1,\r\n      xHighest: DC.D1,\r\n      isActive: false\r\n    },\r\n    bigCrunch: {\r\n      cost: 1,\r\n      interval: 150000,\r\n      mode: 0,\r\n      amount: DC.D1,\r\n      increaseWithMult: true,\r\n      time: 1,\r\n      xHighest: DC.D1,\r\n      isActive: true,\r\n      lastTick: 0\r\n    },\r\n    galaxy: {\r\n      cost: 1,\r\n      interval: 20000,\r\n      limitGalaxies: false,\r\n      maxGalaxies: 1,\r\n      buyMax: false,\r\n      buyMaxInterval: 0,\r\n      isActive: true,\r\n      lastTick: 0\r\n    },\r\n    dimBoost: {\r\n      cost: 1,\r\n      interval: 4000,\r\n      limitDimBoosts: false,\r\n      maxDimBoosts: 1,\r\n      limitUntilGalaxies: false,\r\n      galaxies: 10,\r\n      buyMaxInterval: 0,\r\n      isActive: true,\r\n      lastTick: 0\r\n    },\r\n    tickspeed: {\r\n      isUnlocked: false,\r\n      cost: 1,\r\n      interval: 500,\r\n      mode: AUTOBUYER_MODE.BUY_SINGLE,\r\n      isActive: true,\r\n      lastTick: 0,\r\n      isBought: false\r\n    },\r\n    sacrifice: {\r\n      multiplier: DC.D2,\r\n      isActive: true\r\n    },\r\n    antimatterDims: {\r\n      all: Array.range(0, 8).map(tier => ({\r\n        isUnlocked: false,\r\n        cost: 1,\r\n        interval: [500, 600, 700, 800, 900, 1000, 1100, 1200][tier],\r\n        bulk: 1,\r\n        mode: AUTOBUYER_MODE.BUY_10,\r\n        isActive: true,\r\n        lastTick: 0,\r\n        isBought: false\r\n      })),\r\n      isActive: true,\r\n    },\r\n    infinityDims: {\r\n      all: Array.range(0, 8).map(() => ({\r\n        isActive: false,\r\n        lastTick: 0,\r\n      })),\r\n      isActive: true,\r\n    },\r\n    timeDims: {\r\n      all: Array.range(0, 8).map(() => ({\r\n        isActive: false,\r\n        lastTick: 0,\r\n      })),\r\n      isActive: true,\r\n    },\r\n    replicantiGalaxies: {\r\n      isActive: false,\r\n    },\r\n    replicantiUpgrades: {\r\n      all: Array.range(0, 3).map(() => ({\r\n        isActive: false,\r\n        lastTick: 0,\r\n      })),\r\n      isActive: true,\r\n    },\r\n    timeTheorems: {\r\n      isActive: false,\r\n    },\r\n    dilationUpgrades: {\r\n      all: Array.range(0, 3).map(() => ({\r\n        isActive: false,\r\n        lastTick: 0,\r\n      })),\r\n      isActive: true,\r\n    },\r\n    blackHolePower: {\r\n      all: Array.range(0, 2).map(() => ({\r\n        isActive: false,\r\n      })),\r\n      isActive: true,\r\n    },\r\n    realityUpgrades: {\r\n      all: Array.range(0, 5).map(() => ({\r\n        isActive: false,\r\n      })),\r\n      isActive: true,\r\n    },\r\n    imaginaryUpgrades: {\r\n      all: Array.range(0, 10).map(() => ({\r\n        isActive: false,\r\n      })),\r\n      isActive: true,\r\n    },\r\n    darkMatterDims: {\r\n      isActive: false,\r\n      lastTick: 0,\r\n    },\r\n    ascension: {\r\n      isActive: false,\r\n      lastTick: 0,\r\n    },\r\n    annihilation: {\r\n      isActive: false,\r\n      multiplier: 1.05,\r\n    },\r\n    singularity: { isActive: false },\r\n    ipMultBuyer: { isActive: false, },\r\n    epMultBuyer: { isActive: false, },\r\n  },\r\n  infinityPoints: DC.D0,\r\n  infinities: DC.D0,\r\n  infinitiesBanked: DC.D0,\r\n  dimensionBoosts: 0,\r\n  galaxies: 0,\r\n  news: {\r\n    // This is properly handled in NewsHandler.addSeenNews which adds properties as needed\r\n    seen: {},\r\n    specialTickerData: {\r\n      uselessNewsClicks: 0,\r\n      paperclips: 0,\r\n      newsQueuePosition: 1000,\r\n      eiffelTowerChapter: 0\r\n    },\r\n    totalSeen: 0,\r\n  },\r\n  lastUpdate: new Date().getTime(),\r\n  backupTimer: 0,\r\n  chall2Pow: 1,\r\n  chall3Pow: DC.D0_01,\r\n  matter: DC.D1,\r\n  chall9TickspeedCostBumps: 0,\r\n  chall8TotalSacrifice: DC.D1,\r\n  ic2Count: 0,\r\n  partInfinityPoint: 0,\r\n  partInfinitied: 0,\r\n  break: false,\r\n  secretUnlocks: {\r\n    themes: new Set(),\r\n    viewSecretTS: false,\r\n    cancerAchievements: false,\r\n  },\r\n  shownRuns: {\r\n    Reality: true,\r\n    Eternity: true,\r\n    Infinity: true\r\n  },\r\n  requirementChecks: {\r\n    infinity: {\r\n      maxAll: false,\r\n      noSacrifice: true,\r\n      noAD8: true,\r\n    },\r\n    eternity: {\r\n      onlyAD1: true,\r\n      onlyAD8: true,\r\n      noAD1: true,\r\n      noRG: true,\r\n    },\r\n    reality: {\r\n      noAM: true,\r\n      noTriads: true,\r\n      noPurchasedTT: true,\r\n      noInfinities: true,\r\n      noEternities: true,\r\n      noContinuum: true,\r\n      maxID1: DC.D0,\r\n      maxStudies: 0,\r\n      maxGlyphs: 0,\r\n      slowestBH: 1,\r\n    },\r\n    permanent: {\r\n      emojiGalaxies: 0,\r\n      singleTickspeed: 0,\r\n      perkTreeDragging: 0\r\n    }\r\n  },\r\n  records: {\r\n    gameCreatedTime: Date.now(),\r\n    totalTimePlayed: 0,\r\n    timePlayedAtBHUnlock: Number.MAX_VALUE,\r\n    realTimePlayed: 0,\r\n    realTimeDoomed: 0,\r\n    fullGameCompletions: 0,\r\n    previousRunRealTime: 0,\r\n    totalAntimatter: DC.E1,\r\n    recentInfinities: Array.range(0, 10).map(() =>\r\n      [Number.MAX_VALUE, Number.MAX_VALUE, DC.D1, DC.D1, \"\"]),\r\n    recentEternities: Array.range(0, 10).map(() =>\r\n      [Number.MAX_VALUE, Number.MAX_VALUE, DC.D1, DC.D1, \"\", DC.D0]),\r\n    recentRealities: Array.range(0, 10).map(() =>\r\n      [Number.MAX_VALUE, Number.MAX_VALUE, DC.D1, 1, \"\", 0, 0]),\r\n    thisInfinity: {\r\n      time: 0,\r\n      realTime: 0,\r\n      lastBuyTime: 0,\r\n      maxAM: DC.D0,\r\n      bestIPmin: DC.D0,\r\n      bestIPminVal: DC.D0,\r\n    },\r\n    bestInfinity: {\r\n      time: Number.MAX_VALUE,\r\n      realTime: Number.MAX_VALUE,\r\n      bestIPminEternity: DC.D0,\r\n      bestIPminReality: DC.D0,\r\n    },\r\n    thisEternity: {\r\n      time: 0,\r\n      realTime: 0,\r\n      maxAM: DC.D0,\r\n      maxIP: DC.D0,\r\n      bestIPMsWithoutMaxAll: DC.D0,\r\n      bestEPmin: DC.D0,\r\n      bestEPminVal: DC.D0,\r\n      bestInfinitiesPerMs: DC.D0,\r\n    },\r\n    bestEternity: {\r\n      time: Number.MAX_VALUE,\r\n      realTime: Number.MAX_VALUE,\r\n      bestEPminReality: DC.D0,\r\n    },\r\n    thisReality: {\r\n      time: 0,\r\n      realTime: 0,\r\n      maxAM: DC.D0,\r\n      maxIP: DC.D0,\r\n      maxEP: DC.D0,\r\n      bestEternitiesPerMs: DC.D0,\r\n      maxReplicanti: DC.D0,\r\n      maxDT: DC.D0,\r\n      bestRSmin: 0,\r\n      bestRSminVal: 0,\r\n    },\r\n    bestReality: {\r\n      time: Number.MAX_VALUE,\r\n      realTime: Number.MAX_VALUE,\r\n      glyphStrength: 0,\r\n      RM: DC.D0,\r\n      RMSet: [],\r\n      RMmin: DC.D0,\r\n      RMminSet: [],\r\n      glyphLevel: 0,\r\n      glyphLevelSet: [],\r\n      bestEP: DC.D0,\r\n      bestEPSet: [],\r\n      speedSet: [],\r\n      iMCapSet: [],\r\n      laitelaSet: [],\r\n    },\r\n  },\r\n  speedrun: {\r\n    isUnlocked: false,\r\n    isActive: false,\r\n    isSegmented: false,\r\n    usedSTD: false,\r\n    hasStarted: false,\r\n    hideInfo: false,\r\n    displayAllMilestones: false,\r\n    startDate: 0,\r\n    name: \"\",\r\n    offlineTimeUsed: 0,\r\n    // One spot for every entry in GameDatabase.speedrunMilestones (note: 1-indexed)\r\n    records: Array.repeat(0, 26),\r\n    achievementTimes: {},\r\n    seedSelection: SPEEDRUN_SEED_STATE.FIXED,\r\n    initialSeed: 0,\r\n    previousRuns: {}\r\n  },\r\n  IPMultPurchases: 0,\r\n  version: 25,\r\n  infinityPower: DC.D1,\r\n  postC4Tier: 0,\r\n  eternityPoints: DC.D0,\r\n  eternities: DC.D0,\r\n  eternityUpgrades: new Set(),\r\n  epmultUpgrades: 0,\r\n  timeShards: DC.D0,\r\n  totalTickGained: 0,\r\n  totalTickBought: 0,\r\n  replicanti: {\r\n    unl: false,\r\n    amount: DC.D0,\r\n    chance: 0.01,\r\n    chanceCost: DC.E150,\r\n    interval: 1000,\r\n    intervalCost: DC.E140,\r\n    boughtGalaxyCap: 0,\r\n    galaxies: 0,\r\n    galCost: DC.E170,\r\n  },\r\n  timestudy: {\r\n    theorem: DC.D0,\r\n    maxTheorem: DC.D0,\r\n    amBought: 0,\r\n    ipBought: 0,\r\n    epBought: 0,\r\n    studies: [],\r\n    shopMinimized: false,\r\n    preferredPaths: [[], 0],\r\n    presets: new Array(6).fill({\r\n      name: \"\",\r\n      studies: \"\",\r\n    }),\r\n  },\r\n  eternityChalls: {},\r\n  respec: false,\r\n  eterc8ids: 50,\r\n  eterc8repl: 40,\r\n  dilation: {\r\n    studies: [],\r\n    active: false,\r\n    tachyonParticles: DC.D0,\r\n    dilatedTime: DC.D0,\r\n    nextThreshold: DC.E3,\r\n    baseTachyonGalaxies: 0,\r\n    totalTachyonGalaxies: 0,\r\n    upgrades: new Set(),\r\n    rebuyables: {\r\n      1: 0,\r\n      2: 0,\r\n      3: 0,\r\n      11: 0,\r\n      12: 0,\r\n      13: 0,\r\n    },\r\n    lastEP: DC.DM1,\r\n  },\r\n  realities: 0,\r\n  partSimulatedReality: 0,\r\n  reality: {\r\n    realityMachines: DC.D0,\r\n    maxRM: DC.D0,\r\n    imaginaryMachines: 0,\r\n    iMCap: 0,\r\n    glyphs: {\r\n      active: [],\r\n      inventory: [],\r\n      sac: {\r\n        power: 0,\r\n        infinity: 0,\r\n        time: 0,\r\n        replication: 0,\r\n        dilation: 0,\r\n        effarig: 0,\r\n        reality: 0\r\n      },\r\n      undo: [],\r\n      sets: new Array(7).fill({\r\n        name: \"\",\r\n        glyphs: [],\r\n      }),\r\n      protectedRows: 2,\r\n      filter: {\r\n        select: AUTO_GLYPH_SCORE.LOWEST_SACRIFICE,\r\n        trash: AUTO_GLYPH_REJECT.SACRIFICE,\r\n        simple: 0,\r\n        types: GlyphTypes.list\r\n          .filter(t => ALCHEMY_BASIC_GLYPH_TYPES.includes(t.id))\r\n          .mapToObject(t => t.id, t => ({\r\n            rarity: 0,\r\n            score: 0,\r\n            effectCount: 0,\r\n            specifiedMask: 0,\r\n            effectScores: Array.repeat(0, t.effects.length),\r\n          })),\r\n      },\r\n      createdRealityGlyph: false,\r\n      cosmetics: {\r\n        active: false,\r\n        glowNotification: false,\r\n        unlockedFromNG: [],\r\n        symbolMap: {},\r\n        colorMap: {},\r\n      }\r\n    },\r\n    initialSeed: Math.floor(Date.now() * Math.random() + 1),\r\n    // The seed value should get set from initialSeed upon unlocking reality, but we set it to 1 as a fallback in\r\n    // case somehow it doesn't get set properly. Do not change this to 0, as a seed of 0 causes the game to hang\r\n    seed: 1,\r\n    secondGaussian: 1e6,\r\n    musicSeed: Math.floor(Date.now() * Math.random() + 0xBCDDECCB),\r\n    musicSecondGaussian: 1e6,\r\n    rebuyables: {\r\n      1: 0,\r\n      2: 0,\r\n      3: 0,\r\n      4: 0,\r\n      5: 0,\r\n    },\r\n    upgradeBits: 0,\r\n    upgReqs: 0,\r\n    imaginaryUpgradeBits: 0,\r\n    imaginaryUpgReqs: 0,\r\n    imaginaryRebuyables: {\r\n      1: 0,\r\n      2: 0,\r\n      3: 0,\r\n      4: 0,\r\n      5: 0,\r\n      6: 0,\r\n      7: 0,\r\n      8: 0,\r\n      9: 0,\r\n      10: 0,\r\n    },\r\n    reqLock: {\r\n      reality: 0,\r\n      imaginary: 0,\r\n    },\r\n    perks: new Set(),\r\n    respec: false,\r\n    showGlyphSacrifice: false,\r\n    showSidebarPanel: GLYPH_SIDEBAR_MODE.INVENTORY_MANAGEMENT,\r\n    autoSort: 0,\r\n    autoCollapse: false,\r\n    autoAutoClean: false,\r\n    applyFilterToPurge: false,\r\n    moveGlyphsOnProtection: false,\r\n    perkPoints: 0,\r\n    unlockedEC: 0,\r\n    autoEC: true,\r\n    lastAutoEC: 0,\r\n    partEternitied: DC.D0,\r\n    autoAchieve: true,\r\n    gainedAutoAchievements: true,\r\n    automator: {\r\n      state: {\r\n        mode: AUTOMATOR_MODE.STOP,\r\n        topLevelScript: 0,\r\n        editorScript: 0,\r\n        repeat: true,\r\n        forceRestart: true,\r\n        followExecution: true,\r\n        stack: [],\r\n      },\r\n      scripts: {\r\n      },\r\n      constants: {},\r\n      constantSortOrder: [],\r\n      execTimer: 0,\r\n      type: AUTOMATOR_TYPE.TEXT,\r\n      forceUnlock: false,\r\n      currentInfoPane: AutomatorPanels.INTRO_PAGE,\r\n    },\r\n    achTimer: 0,\r\n    hasCheckedFilter: false,\r\n  },\r\n  blackHole: Array.range(0, 2).map(id => ({\r\n    id,\r\n    intervalUpgrades: 0,\r\n    powerUpgrades: 0,\r\n    durationUpgrades: 0,\r\n    phase: 0,\r\n    active: false,\r\n    unlocked: false,\r\n    activations: 0,\r\n  })),\r\n  blackHolePause: false,\r\n  blackHoleAutoPauseMode: 0,\r\n  blackHolePauseTime: 0,\r\n  blackHoleNegative: 1,\r\n  celestials: {\r\n    teresa: {\r\n      pouredAmount: 0,\r\n      quoteBits: 0,\r\n      unlockBits: 0,\r\n      run: false,\r\n      bestRunAM: DC.D1,\r\n      bestAMSet: [],\r\n      perkShop: Array.repeat(0, 5),\r\n      lastRepeatedMachines: DC.D0\r\n    },\r\n    effarig: {\r\n      relicShards: 0,\r\n      unlockBits: 0,\r\n      run: false,\r\n      quoteBits: 0,\r\n      glyphWeights: {\r\n        ep: 25,\r\n        repl: 25,\r\n        dt: 25,\r\n        eternities: 25\r\n      },\r\n      autoAdjustGlyphWeights: false,\r\n    },\r\n    enslaved: {\r\n      isStoring: false,\r\n      stored: 0,\r\n      isStoringReal: false,\r\n      storedReal: 0,\r\n      autoStoreReal: false,\r\n      isAutoReleasing: false,\r\n      quoteBits: 0,\r\n      unlocks: [],\r\n      run: false,\r\n      completed: false,\r\n      tesseracts: 0,\r\n      hasSecretStudy: false,\r\n      feltEternity: false,\r\n      progressBits: 0,\r\n      hintBits: 0,\r\n      hintUnlockProgress: 0,\r\n      glyphHintsGiven: 0,\r\n      zeroHintTime: 0\r\n    },\r\n    v: {\r\n      unlockBits: 0,\r\n      run: false,\r\n      quoteBits: 0,\r\n      runUnlocks: [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      goalReductionSteps: [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      STSpent: 0,\r\n      runGlyphs: [[], [], [], [], [], [], [], [], []],\r\n      // The -10 is for glyph count, as glyph count for V is stored internally as a negative number\r\n      runRecords: [-10, 0, 0, 0, 0, 0, 0, 0, 0],\r\n      wantsFlipped: true,\r\n    },\r\n    ra: {\r\n      pets: {\r\n        teresa: {\r\n          level: 1,\r\n          memories: 0,\r\n          memoryChunks: 0,\r\n          memoryUpgrades: 0,\r\n          chunkUpgrades: 0\r\n        },\r\n        effarig: {\r\n          level: 1,\r\n          memories: 0,\r\n          memoryChunks: 0,\r\n          memoryUpgrades: 0,\r\n          chunkUpgrades: 0\r\n        },\r\n        enslaved: {\r\n          level: 1,\r\n          memories: 0,\r\n          memoryChunks: 0,\r\n          memoryUpgrades: 0,\r\n          chunkUpgrades: 0\r\n        },\r\n        v: {\r\n          level: 1,\r\n          memories: 0,\r\n          memoryChunks: 0,\r\n          memoryUpgrades: 0,\r\n          chunkUpgrades: 0\r\n        }\r\n      },\r\n      alchemy: Array.repeat(0, 21)\r\n        .map(() => ({\r\n          amount: 0,\r\n          reaction: false\r\n        })),\r\n      highestRefinementValue: {\r\n        power: 0,\r\n        infinity: 0,\r\n        time: 0,\r\n        replication: 0,\r\n        dilation: 0,\r\n        effarig: 0\r\n      },\r\n      quoteBits: 0,\r\n      momentumTime: 0,\r\n      unlockBits: 0,\r\n      run: false,\r\n      charged: new Set(),\r\n      disCharge: false,\r\n      peakGamespeed: 1,\r\n      petWithRemembrance: \"\"\r\n    },\r\n    laitela: {\r\n      darkMatter: DC.D0,\r\n      maxDarkMatter: DC.D0,\r\n      run: false,\r\n      quoteBits: 0,\r\n      dimensions: Array.range(0, 4).map(() =>\r\n        ({\r\n          amount: DC.D0,\r\n          intervalUpgrades: 0,\r\n          powerDMUpgrades: 0,\r\n          powerDEUpgrades: 0,\r\n          timeSinceLastUpdate: 0,\r\n          ascensionCount: 0\r\n        })),\r\n      entropy: 0,\r\n      thisCompletion: 3600,\r\n      fastestCompletion: 3600,\r\n      difficultyTier: 0,\r\n      upgrades: {},\r\n      darkMatterMult: 1,\r\n      darkEnergy: 0,\r\n      singularitySorting: {\r\n        displayResource: 0,\r\n        sortResource: 0,\r\n        showCompleted: 0,\r\n        sortOrder: 0,\r\n      },\r\n      singularities: 0,\r\n      singularityCapIncreases: 0,\r\n      lastCheckedMilestones: 0,\r\n      milestoneGlow: true,\r\n    },\r\n    pelle: {\r\n      doomed: false,\r\n      upgrades: new Set(),\r\n      remnants: 0,\r\n      realityShards: DC.D0,\r\n      records: {\r\n        totalAntimatter: DC.D0,\r\n        totalInfinityPoints: DC.D0,\r\n        totalEternityPoints: DC.D0,\r\n      },\r\n      rebuyables: {\r\n        antimatterDimensionMult: 0,\r\n        timeSpeedMult: 0,\r\n        glyphLevels: 0,\r\n        infConversion: 0,\r\n        galaxyPower: 0,\r\n        galaxyGeneratorAdditive: 0,\r\n        galaxyGeneratorMultiplicative: 0,\r\n        galaxyGeneratorAntimatterMult: 0,\r\n        galaxyGeneratorIPMult: 0,\r\n        galaxyGeneratorEPMult: 0,\r\n      },\r\n      rifts: {\r\n        vacuum: {\r\n          fill: DC.D0,\r\n          active: false,\r\n          reducedTo: 1\r\n        },\r\n        decay: {\r\n          fill: DC.D0,\r\n          active: false,\r\n          percentageSpent: 0,\r\n          reducedTo: 1\r\n        },\r\n        chaos: {\r\n          fill: 0,\r\n          active: false,\r\n          reducedTo: 1\r\n        },\r\n        recursion: {\r\n          fill: DC.D0,\r\n          active: false,\r\n          reducedTo: 1\r\n        },\r\n        paradox: {\r\n          fill: DC.D0,\r\n          active: false,\r\n          reducedTo: 1\r\n        }\r\n      },\r\n      progressBits: 0,\r\n      galaxyGenerator: {\r\n        unlocked: false,\r\n        spentGalaxies: 0,\r\n        generatedGalaxies: 0,\r\n        phase: 0,\r\n        sacrificeActive: false\r\n      },\r\n      quoteBits: 0,\r\n      collapsed: {\r\n        upgrades: false,\r\n        rifts: false,\r\n        galaxies: false\r\n      },\r\n      showBought: false,\r\n    }\r\n  },\r\n  isGameEnd: false,\r\n  tabNotifications: new Set(),\r\n  triggeredTabNotificationBits: 0,\r\n  tutorialState: 0,\r\n  tutorialActive: true,\r\n  options: {\r\n    news: {\r\n      enabled: true,\r\n      repeatBuffer: 40,\r\n      AIChance: 0,\r\n      speed: 1,\r\n      includeAnimated: true,\r\n    },\r\n    notation: \"Mixed scientific\",\r\n    notationDigits: {\r\n      comma: 5,\r\n      notation: 9\r\n    },\r\n    sidebarResourceID: 0,\r\n    retryChallenge: false,\r\n    retryCelestial: false,\r\n    showAllChallenges: false,\r\n    cloudEnabled: true,\r\n    hideGoogleName: false,\r\n    showCloudModal: true,\r\n    forceCloudOverwrite: false,\r\n    syncSaveIntervals: true,\r\n    hotkeys: true,\r\n    themeClassic: \"Normal\",\r\n    themeModern: \"Normal\",\r\n    updateRate: 33,\r\n    newUI: true,\r\n    offlineProgress: true,\r\n    loadBackupWithoutOffline: false,\r\n    automaticTabSwitching: true,\r\n    respecIntoProtected: false,\r\n    offlineTicks: 1e5,\r\n    hibernationCatchup: true,\r\n    statTabResources: 0,\r\n    multiplierTab: {\r\n      currTab: 0,\r\n      showAltGroup: false,\r\n      replacePowers: false,\r\n    },\r\n    autosaveInterval: 30000,\r\n    showTimeSinceSave: true,\r\n    saveFileName: \"\",\r\n    exportedFileCount: 0,\r\n    hideCompletedAchievementRows: false,\r\n    glyphTextColors: true,\r\n    headerTextColored: false,\r\n    showNewGlyphIcon: true,\r\n    showUnequippedGlyphIcon: true,\r\n    highContrastRarity: false,\r\n    swapGlyphColors: false,\r\n    hideAlterationEffects: false,\r\n    ignoreGlyphEffects: true,\r\n    ignoreGlyphLevel: true,\r\n    ignoreGlyphRarity: true,\r\n    glyphBG: GLYPH_BG_SETTING.AUTO,\r\n    glyphBorders: true,\r\n    showHintText: {\r\n      showPercentage: true,\r\n      achievements: true,\r\n      achievementUnlockStates: true,\r\n      challenges: true,\r\n      studies: true,\r\n      glyphEffectDots: true,\r\n      realityUpgrades: true,\r\n      perks: true,\r\n      alchemy: true,\r\n      glyphInfoType: GlyphInfo.types.NONE,\r\n      showGlyphInfoByDefault: false,\r\n    },\r\n    animations: {\r\n      bigCrunch: true,\r\n      eternity: true,\r\n      dilation: true,\r\n      tachyonParticles: true,\r\n      reality: true,\r\n      background: true,\r\n      blobSnowflakes: 16\r\n    },\r\n    confirmations: {\r\n      armageddon: true,\r\n      sacrifice: true,\r\n      challenges: true,\r\n      exitChallenge: true,\r\n      eternity: true,\r\n      dilation: true,\r\n      resetReality: true,\r\n      glyphReplace: true,\r\n      glyphSacrifice: true,\r\n      autoClean: true,\r\n      sacrificeAll: true,\r\n      glyphSelection: true,\r\n      glyphUndo: true,\r\n      deleteGlyphSetSave: true,\r\n      glyphRefine: true,\r\n      bigCrunch: true,\r\n      replicantiGalaxy: true,\r\n      antimatterGalaxy: true,\r\n      dimensionBoost: true,\r\n      switchAutomatorMode: true,\r\n      respecIAP: true\r\n    },\r\n    awayProgress: {\r\n      antimatter: true,\r\n      dimensionBoosts: true,\r\n      antimatterGalaxies: true,\r\n      infinities: true,\r\n      infinityPoints: true,\r\n      replicanti: true,\r\n      replicantiGalaxies: true,\r\n      eternities: true,\r\n      eternityPoints: true,\r\n      tachyonParticles: true,\r\n      dilatedTime: true,\r\n      tachyonGalaxies: true,\r\n      timeTheorems: true,\r\n      achievementCount: true,\r\n      realities: true,\r\n      realityMachines: true,\r\n      imaginaryMachines: true,\r\n      relicShards: true,\r\n      darkMatter: true,\r\n      darkEnergy: true,\r\n      singularities: true,\r\n      celestialMemories: true,\r\n      blackHole: true,\r\n      realityShards: true\r\n    },\r\n    hiddenTabBits: 0,\r\n    hiddenSubtabBits: Array.repeat(0, 11),\r\n    lastOpenTab: 0,\r\n    lastOpenSubtab: Array.repeat(0, 11),\r\n    perkLayout: 0,\r\n    perkPhysicsEnabled: true,\r\n    automatorEvents: {\r\n      newestFirst: false,\r\n      timestampType: 0,\r\n      maxEntries: 200,\r\n      clearOnReality: true,\r\n      clearOnRestart: true,\r\n    },\r\n    invertTTgenDisplay: false,\r\n    autoRealityForFilter: false,\r\n    gamePaused: false,\r\n  },\r\n  IAP: {\r\n    enabled: false,\r\n    checkoutSession: {\r\n      id: false,\r\n    }\r\n  },\r\n};\r\n\r\nexport const Player = {\r\n  defaultStart: deepmergeAll([{}, player]),\r\n\r\n  get isInMatterChallenge() {\r\n    return NormalChallenge(11).isRunning || InfinityChallenge(6).isRunning;\r\n  },\r\n\r\n  get isInAntimatterChallenge() {\r\n    return NormalChallenge.isRunning || InfinityChallenge.isRunning;\r\n  },\r\n\r\n  get antimatterChallenge() {\r\n    return NormalChallenge.current || InfinityChallenge.current;\r\n  },\r\n\r\n  get isInAnyChallenge() {\r\n    return this.isInAntimatterChallenge || EternityChallenge.isRunning;\r\n  },\r\n\r\n  get anyChallenge() {\r\n    return this.antimatterChallenge || EternityChallenge.current;\r\n  },\r\n\r\n  get canCrunch() {\r\n    if (Enslaved.isRunning && Enslaved.BROKEN_CHALLENGES.includes(NormalChallenge.current?.id)) return false;\r\n    const challenge = NormalChallenge.current || InfinityChallenge.current;\r\n    const goal = challenge === undefined ? Decimal.NUMBER_MAX_VALUE : challenge.goal;\r\n    return player.records.thisInfinity.maxAM.gte(goal);\r\n  },\r\n\r\n  get canEternity() {\r\n    return player.records.thisEternity.maxIP.gte(Player.eternityGoal);\r\n  },\r\n\r\n  get bestRunIPPM() {\r\n    return GameCache.bestRunIPPM.value;\r\n  },\r\n\r\n  get averageRealTimePerEternity() {\r\n    return GameCache.averageRealTimePerEternity.value;\r\n  },\r\n\r\n  get tickSpeedMultDecrease() {\r\n    return GameCache.tickSpeedMultDecrease.value;\r\n  },\r\n\r\n  get dimensionMultDecrease() {\r\n    return GameCache.dimensionMultDecrease.value;\r\n  },\r\n\r\n  get infinityGoal() {\r\n    const challenge = NormalChallenge.current || InfinityChallenge.current;\r\n    return challenge === undefined ? Decimal.NUMBER_MAX_VALUE : challenge.goal;\r\n  },\r\n\r\n  get infinityLimit() {\r\n    const challenge = NormalChallenge.current || InfinityChallenge.current;\r\n    return challenge === undefined ? Decimal.MAX_VALUE : challenge.goal;\r\n  },\r\n\r\n  get eternityGoal() {\r\n    return EternityChallenge.isRunning\r\n      ? EternityChallenge.current.currentGoal\r\n      : requiredIPForEP(1);\r\n  },\r\n\r\n  get automatorUnlocked() {\r\n    return AutomatorPoints.totalPoints >= AutomatorPoints.pointsForAutomator || player.reality.automator.forceUnlock;\r\n  },\r\n\r\n  resetRequirements(key) {\r\n    const glyphCount = player.requirementChecks.reality.maxGlyphs;\r\n    // This switch case intentionally falls through because every lower layer should be reset as well\r\n    switch (key) {\r\n      case \"reality\":\r\n        player.requirementChecks.reality = {\r\n          noAM: true,\r\n          noTriads: true,\r\n          noPurchasedTT: true,\r\n          // Note that these two checks below are only used in row 2, which is in principle always before the \"flow\"\r\n          // upgrades in row 3 which passively generate infinities/eternities. These upgrades won't cause a lockout\r\n          // as these requirements are only invalidated on manual infinities or eternities.\r\n          noInfinities: true,\r\n          noEternities: true,\r\n          noContinuum: player.auto.disableContinuum,\r\n          maxID1: DC.D0,\r\n          maxStudies: 0,\r\n          // This only gets set to the correct value when Glyphs.updateMaxGlyphCount is called, which always happens\r\n          // before this part of the code is reached in the Reality reset. Nevertheless, we want to keep its old value.\r\n          maxGlyphs: glyphCount,\r\n          slowestBH: BlackHoles.areNegative ? player.blackHoleNegative : 1,\r\n        };\r\n      // eslint-disable-next-line no-fallthrough\r\n      case \"eternity\":\r\n        player.requirementChecks.eternity = {\r\n          onlyAD1: true,\r\n          onlyAD8: true,\r\n          noAD1: true,\r\n          noRG: true,\r\n        };\r\n      // eslint-disable-next-line no-fallthrough\r\n      case \"infinity\":\r\n        player.requirementChecks.infinity = {\r\n          maxAll: false,\r\n          noSacrifice: true,\r\n          noAD8: true,\r\n        };\r\n        break;\r\n      default:\r\n        throw Error(\"Unrecognized prestige layer for requirement reset\");\r\n    }\r\n  }\r\n};\r\n\r\nexport function guardFromNaNValues(obj) {\r\n  function isObject(ob) {\r\n    return ob !== null && typeof ob === \"object\" && !(ob instanceof Decimal);\r\n  }\r\n\r\n  for (const key in obj) {\r\n    if (!Object.prototype.hasOwnProperty.call(obj, key)) continue;\r\n\r\n    if (key === \"automator\") continue;\r\n\r\n    let value = obj[key];\r\n    if (isObject(value)) {\r\n      guardFromNaNValues(value);\r\n      continue;\r\n    }\r\n\r\n    if (typeof value === \"number\") {\r\n      Object.defineProperty(obj, key, {\r\n        enumerable: true,\r\n        configurable: true,\r\n        get: () => value,\r\n        set: function guardedSetter(newValue) {\r\n          if (newValue === null || newValue === undefined) {\r\n            throw new Error(\"null/undefined player property assignment\");\r\n          }\r\n          if (typeof newValue !== \"number\") {\r\n            throw new Error(\"Non-Number assignment to Number player property\");\r\n          }\r\n          if (!isFinite(newValue)) {\r\n            throw new Error(\"NaN player property assignment\");\r\n          }\r\n          value = newValue;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (value instanceof Decimal) {\r\n      Object.defineProperty(obj, key, {\r\n        enumerable: true,\r\n        configurable: true,\r\n        get: () => value,\r\n        set: function guardedSetter(newValue) {\r\n          if (newValue === null || newValue === undefined) {\r\n            throw new Error(\"null/undefined player property assignment\");\r\n          }\r\n          if (!(newValue instanceof Decimal)) {\r\n            throw new Error(\"Non-Decimal assignment to Decimal player property\");\r\n          }\r\n          if (!isFinite(newValue.mantissa) || !isFinite(newValue.exponent)) {\r\n            throw new Error(\"NaN player property assignment\");\r\n          }\r\n          value = newValue;\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}