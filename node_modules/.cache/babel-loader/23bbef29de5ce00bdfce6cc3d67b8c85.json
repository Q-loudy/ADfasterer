{"ast":null,"code":"export default {\n  name: \"HeaderChallengeEffects\",\n\n  data() {\n    return {\n      isInMatterChallenge: false,\n      matter: new Decimal(0),\n      isChallengePowerVisible: false,\n      challengePower: \"\",\n      isInEffarig: false,\n      effarigMultNerfText: \"\",\n      effarigTickNerfText: \"\",\n      isInLaitela: false,\n      laitelaTimer: 0,\n      laitelaEntropy: \"\",\n      waitingforHint: false,\n      enslavedTimer: \"\"\n    };\n  },\n\n  computed: {\n    enslavedText() {\n      return `${Enslaved.displayName} are helping you look for cracks in their Reality -\n        they can give you some advice in ${this.enslavedTimer}`;\n    }\n\n  },\n  methods: {\n    update() {\n      this.isInMatterChallenge = Player.isInMatterChallenge;\n\n      if (this.isInMatterChallenge) {\n        this.matter.copyFrom(Currency.matter);\n      }\n\n      this.updateChallengePower();\n      this.isInEffarig = Effarig.isRunning;\n\n      if (this.isInEffarig) {\n        this.effarigMultNerfText = `${formatPow(0.25 + 0.25 * Effarig.nerfFactor(Currency.infinityPower.value), 0, 5)}`;\n        this.effarigTickNerfText = `${formatPow(0.7 + 0.1 * Effarig.nerfFactor(Currency.timeShards.value), 0, 5)}`;\n      }\n\n      this.isInLaitela = Laitela.isRunning;\n\n      if (this.isInLaitela) {\n        if (player.celestials.laitela.entropy > 0) {\n          this.laitelaEntropy = `${formatPercents(player.celestials.laitela.entropy, 2, 2)}`;\n          this.laitelaTimer = Time.thisRealityRealTime.toStringShort();\n        } else {\n          this.laitelaEntropy = `${formatPercents(1, 2, 2)}`;\n          this.laitelaTimer = TimeSpan.fromSeconds(player.celestials.laitela.thisCompletion).toStringShort();\n        }\n      }\n\n      this.waitingforHint = Enslaved.canTickHintTimer;\n      const rawMsUntilHints = 5 * 3600 * 1000 - player.celestials.enslaved.hintUnlockProgress;\n      this.enslavedTimer = TimeSpan.fromMilliseconds(rawMsUntilHints / (Enslaved.isRunning ? 1 : 0.4)).toStringShort();\n    },\n\n    updateChallengePower() {\n      const isC2Running = NormalChallenge(2).isRunning;\n      const isC3Running = NormalChallenge(3).isRunning;\n      const isIC6Running = InfinityChallenge(6).isRunning;\n      const isIC8Running = InfinityChallenge(8).isRunning;\n      const isChallengePowerVisible = isC2Running || isC3Running || isIC6Running || isIC8Running;\n      this.isChallengePowerVisible = isChallengePowerVisible;\n\n      if (isChallengePowerVisible) {\n        const powerArray = [];\n        if (isC2Running) powerArray.push(`Production: ${formatPercents(player.chall2Pow, 2, 2)}`);\n        if (isC3Running) powerArray.push(`First dimension: ${formatX(player.chall3Pow, 3, 4)}`);\n        if (isIC6Running) powerArray.push(`Matter: Antimatter Dimensions /\n          ${format(new Decimal(1).timesEffectOf(InfinityChallenge(6)), 2, 2)}`);\n        if (isIC8Running) powerArray.push(`Production: /\n          ${format(new Decimal(1).timesEffectOf(InfinityChallenge(8)).reciprocal(), 2, 2)}`);\n        this.challengePower = powerArray.join(\", \");\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["HeaderChallengeEffects.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nexport default {\r\n  name: \"HeaderChallengeEffects\",\r\n  data() {\r\n    return {\r\n      isInMatterChallenge: false,\r\n      matter: new Decimal(0),\r\n      isChallengePowerVisible: false,\r\n      challengePower: \"\",\r\n      isInEffarig: false,\r\n      effarigMultNerfText: \"\",\r\n      effarigTickNerfText: \"\",\r\n      isInLaitela: false,\r\n      laitelaTimer: 0,\r\n      laitelaEntropy: \"\",\r\n      waitingforHint: false,\r\n      enslavedTimer: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    enslavedText() {\r\n      return `${Enslaved.displayName} are helping you look for cracks in their Reality -\r\n        they can give you some advice in ${this.enslavedTimer}`;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isInMatterChallenge = Player.isInMatterChallenge;\r\n      if (this.isInMatterChallenge) {\r\n        this.matter.copyFrom(Currency.matter);\r\n      }\r\n      this.updateChallengePower();\r\n\r\n      this.isInEffarig = Effarig.isRunning;\r\n      if (this.isInEffarig) {\r\n        this.effarigMultNerfText = `${formatPow(0.25 + 0.25 * Effarig.nerfFactor(Currency.infinityPower.value), 0, 5)}`;\r\n        this.effarigTickNerfText = `${formatPow(0.7 + 0.1 * Effarig.nerfFactor(Currency.timeShards.value), 0, 5)}`;\r\n      }\r\n      this.isInLaitela = Laitela.isRunning;\r\n      if (this.isInLaitela) {\r\n        if (player.celestials.laitela.entropy > 0) {\r\n          this.laitelaEntropy = `${formatPercents(player.celestials.laitela.entropy, 2, 2)}`;\r\n          this.laitelaTimer = Time.thisRealityRealTime.toStringShort();\r\n        } else {\r\n          this.laitelaEntropy = `${formatPercents(1, 2, 2)}`;\r\n          this.laitelaTimer = TimeSpan.fromSeconds(player.celestials.laitela.thisCompletion).toStringShort();\r\n        }\r\n      }\r\n\r\n      this.waitingforHint = Enslaved.canTickHintTimer;\r\n      const rawMsUntilHints = 5 * 3600 * 1000 - player.celestials.enslaved.hintUnlockProgress;\r\n      this.enslavedTimer = TimeSpan.fromMilliseconds(rawMsUntilHints / (Enslaved.isRunning ? 1 : 0.4))\r\n        .toStringShort();\r\n    },\r\n    updateChallengePower() {\r\n      const isC2Running = NormalChallenge(2).isRunning;\r\n      const isC3Running = NormalChallenge(3).isRunning;\r\n      const isIC6Running = InfinityChallenge(6).isRunning;\r\n      const isIC8Running = InfinityChallenge(8).isRunning;\r\n      const isChallengePowerVisible = isC2Running || isC3Running || isIC6Running || isIC8Running;\r\n      this.isChallengePowerVisible = isChallengePowerVisible;\r\n      if (isChallengePowerVisible) {\r\n        const powerArray = [];\r\n        if (isC2Running) powerArray.push(`Production: ${formatPercents(player.chall2Pow, 2, 2)}`);\r\n        if (isC3Running) powerArray.push(`First dimension: ${formatX(player.chall3Pow, 3, 4)}`);\r\n        if (isIC6Running) powerArray.push(`Matter: Antimatter Dimensions /\r\n          ${format(new Decimal(1).timesEffectOf(InfinityChallenge(6)), 2, 2)}`);\r\n        if (isIC8Running) powerArray.push(`Production: /\r\n          ${format(new Decimal(1).timesEffectOf(InfinityChallenge(8)).reciprocal(), 2, 2)}`);\r\n        this.challengePower = powerArray.join(\", \");\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <div v-if=\"waitingforHint\">\r\n      {{ enslavedText }}\r\n    </div>\r\n    <div v-if=\"isInEffarig\">\r\n      Game speed and multipliers are Dilated {{ effarigMultNerfText }}\r\n      <br>\r\n      Tickspeed is Dilated {{ effarigTickNerfText }}\r\n    </div>\r\n    <div v-if=\"isInLaitela\">\r\n      Entropy: {{ laitelaEntropy }} ({{ laitelaTimer }})\r\n    </div>\r\n    <div v-if=\"isInMatterChallenge\">\r\n      There is {{ format(matter, 2, 1) }} matter.\r\n    </div>\r\n    <div v-if=\"isChallengePowerVisible\">\r\n      {{ challengePower }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/ui-modes"},"metadata":{},"sourceType":"module"}