{"ast":null,"code":"import { GameMechanicState } from \"../game-mechanics\";\n\nclass SecretAchievementState extends GameMechanicState {\n  constructor(config) {\n    super(config);\n    this._row = Math.floor(this.id / 10);\n    this._column = this.id % 10;\n    this._bitmask = 1 << this.column - 1;\n    this._inverseBitmask = ~this._bitmask;\n    this.registerEvents(config.checkEvent, args => this.tryUnlock(args));\n  }\n\n  get name() {\n    return this.config.name;\n  }\n\n  get row() {\n    return this._row;\n  }\n\n  get column() {\n    return this._column;\n  }\n\n  get isUnlocked() {\n    return (player.secretAchievementBits[this.row - 1] & this._bitmask) !== 0;\n  }\n\n  tryUnlock(args) {\n    if (this.isUnlocked) return;\n    if (!this.config.checkRequirement(args)) return;\n    this.unlock();\n  }\n\n  unlock() {\n    if (this.isUnlocked) return;\n    player.secretAchievementBits[this.row - 1] |= this._bitmask;\n    GameUI.notify.success(`Secret Achievement: ${this.name}`);\n    EventHub.dispatch(GAME_EVENT.ACHIEVEMENT_UNLOCKED);\n  }\n\n  lock() {\n    player.secretAchievementBits[this.row - 1] &= this._inverseBitmask;\n  }\n\n}\n/**\r\n * @param {number} id\r\n * @returns {SecretAchievementState}\r\n */\n\n\nexport const SecretAchievement = SecretAchievementState.createAccessor(GameDatabase.achievements.secret);\nexport const SecretAchievements = {\n  /**\r\n   * @type {SecretAchievementState[]}\r\n   */\n  all: SecretAchievement.index.compact(),\n\n  get allRows() {\n    const count = SecretAchievements.all.map(a => a.row).max();\n    return SecretAchievements.rows(1, count);\n  },\n\n  rows: (start, count) => Array.range(start, count).map(SecretAchievements.row),\n  row: row => Array.range(row * 10 + 1, 8).map(SecretAchievement)\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/achievements/secret-achievement.js"],"names":["GameMechanicState","SecretAchievementState","constructor","config","_row","Math","floor","id","_column","_bitmask","column","_inverseBitmask","registerEvents","checkEvent","args","tryUnlock","name","row","isUnlocked","player","secretAchievementBits","checkRequirement","unlock","GameUI","notify","success","EventHub","dispatch","GAME_EVENT","ACHIEVEMENT_UNLOCKED","lock","SecretAchievement","createAccessor","GameDatabase","achievements","secret","SecretAchievements","all","index","compact","allRows","count","map","a","max","rows","start","Array","range"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,mBAAlC;;AAEA,MAAMC,sBAAN,SAAqCD,iBAArC,CAAuD;AACrDE,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,UAAMA,MAAN;AACA,SAAKC,IAAL,GAAYC,IAAI,CAACC,KAAL,CAAW,KAAKC,EAAL,GAAU,EAArB,CAAZ;AACA,SAAKC,OAAL,GAAe,KAAKD,EAAL,GAAU,EAAzB;AACA,SAAKE,QAAL,GAAgB,KAAM,KAAKC,MAAL,GAAc,CAApC;AACA,SAAKC,eAAL,GAAuB,CAAC,KAAKF,QAA7B;AACA,SAAKG,cAAL,CAAoBT,MAAM,CAACU,UAA3B,EAAuCC,IAAI,IAAI,KAAKC,SAAL,CAAeD,IAAf,CAA/C;AACD;;AAEO,MAAJE,IAAI,GAAG;AACT,WAAO,KAAKb,MAAL,CAAYa,IAAnB;AACD;;AAEM,MAAHC,GAAG,GAAG;AACR,WAAO,KAAKb,IAAZ;AACD;;AAES,MAANM,MAAM,GAAG;AACX,WAAO,KAAKF,OAAZ;AACD;;AAEa,MAAVU,UAAU,GAAG;AACf,WAAO,CAACC,MAAM,CAACC,qBAAP,CAA6B,KAAKH,GAAL,GAAW,CAAxC,IAA6C,KAAKR,QAAnD,MAAiE,CAAxE;AACD;;AAEDM,EAAAA,SAAS,CAACD,IAAD,EAAO;AACd,QAAI,KAAKI,UAAT,EAAqB;AACrB,QAAI,CAAC,KAAKf,MAAL,CAAYkB,gBAAZ,CAA6BP,IAA7B,CAAL,EAAyC;AACzC,SAAKQ,MAAL;AACD;;AAEDA,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKJ,UAAT,EAAqB;AACrBC,IAAAA,MAAM,CAACC,qBAAP,CAA6B,KAAKH,GAAL,GAAW,CAAxC,KAA8C,KAAKR,QAAnD;AACAc,IAAAA,MAAM,CAACC,MAAP,CAAcC,OAAd,CAAuB,uBAAsB,KAAKT,IAAK,EAAvD;AACAU,IAAAA,QAAQ,CAACC,QAAT,CAAkBC,UAAU,CAACC,oBAA7B;AACD;;AAEDC,EAAAA,IAAI,GAAG;AACLX,IAAAA,MAAM,CAACC,qBAAP,CAA6B,KAAKH,GAAL,GAAW,CAAxC,KAA8C,KAAKN,eAAnD;AACD;;AAzCoD;AA4CvD;AACA;AACA;AACA;;;AACA,OAAO,MAAMoB,iBAAiB,GAAG9B,sBAAsB,CAAC+B,cAAvB,CAAsCC,YAAY,CAACC,YAAb,CAA0BC,MAAhE,CAA1B;AAEP,OAAO,MAAMC,kBAAkB,GAAG;AAChC;AACF;AACA;AACEC,EAAAA,GAAG,EAAEN,iBAAiB,CAACO,KAAlB,CAAwBC,OAAxB,EAJ2B;;AAMhC,MAAIC,OAAJ,GAAc;AACZ,UAAMC,KAAK,GAAGL,kBAAkB,CAACC,GAAnB,CAAuBK,GAAvB,CAA2BC,CAAC,IAAIA,CAAC,CAAC1B,GAAlC,EAAuC2B,GAAvC,EAAd;AACA,WAAOR,kBAAkB,CAACS,IAAnB,CAAwB,CAAxB,EAA2BJ,KAA3B,CAAP;AACD,GAT+B;;AAWhCI,EAAAA,IAAI,EAAE,CAACC,KAAD,EAAQL,KAAR,KAAkBM,KAAK,CAACC,KAAN,CAAYF,KAAZ,EAAmBL,KAAnB,EAA0BC,GAA1B,CAA8BN,kBAAkB,CAACnB,GAAjD,CAXQ;AAahCA,EAAAA,GAAG,EAAEA,GAAG,IAAI8B,KAAK,CAACC,KAAN,CAAY/B,GAAG,GAAG,EAAN,GAAW,CAAvB,EAA0B,CAA1B,EAA6ByB,GAA7B,CAAiCX,iBAAjC;AAboB,CAA3B","sourcesContent":["import { GameMechanicState } from \"../game-mechanics\";\r\n\r\nclass SecretAchievementState extends GameMechanicState {\r\n  constructor(config) {\r\n    super(config);\r\n    this._row = Math.floor(this.id / 10);\r\n    this._column = this.id % 10;\r\n    this._bitmask = 1 << (this.column - 1);\r\n    this._inverseBitmask = ~this._bitmask;\r\n    this.registerEvents(config.checkEvent, args => this.tryUnlock(args));\r\n  }\r\n\r\n  get name() {\r\n    return this.config.name;\r\n  }\r\n\r\n  get row() {\r\n    return this._row;\r\n  }\r\n\r\n  get column() {\r\n    return this._column;\r\n  }\r\n\r\n  get isUnlocked() {\r\n    return (player.secretAchievementBits[this.row - 1] & this._bitmask) !== 0;\r\n  }\r\n\r\n  tryUnlock(args) {\r\n    if (this.isUnlocked) return;\r\n    if (!this.config.checkRequirement(args)) return;\r\n    this.unlock();\r\n  }\r\n\r\n  unlock() {\r\n    if (this.isUnlocked) return;\r\n    player.secretAchievementBits[this.row - 1] |= this._bitmask;\r\n    GameUI.notify.success(`Secret Achievement: ${this.name}`);\r\n    EventHub.dispatch(GAME_EVENT.ACHIEVEMENT_UNLOCKED);\r\n  }\r\n\r\n  lock() {\r\n    player.secretAchievementBits[this.row - 1] &= this._inverseBitmask;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {number} id\r\n * @returns {SecretAchievementState}\r\n */\r\nexport const SecretAchievement = SecretAchievementState.createAccessor(GameDatabase.achievements.secret);\r\n\r\nexport const SecretAchievements = {\r\n  /**\r\n   * @type {SecretAchievementState[]}\r\n   */\r\n  all: SecretAchievement.index.compact(),\r\n\r\n  get allRows() {\r\n    const count = SecretAchievements.all.map(a => a.row).max();\r\n    return SecretAchievements.rows(1, count);\r\n  },\r\n\r\n  rows: (start, count) => Array.range(start, count).map(SecretAchievements.row),\r\n\r\n  row: row => Array.range(row * 10 + 1, 8).map(SecretAchievement),\r\n};\r\n"]},"metadata":{},"sourceType":"module"}