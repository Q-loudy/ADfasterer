{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport { SetPurchasableMechanicState } from \"./game-mechanics\";\n\nclass PerkState extends SetPurchasableMechanicState {\n  constructor(config) {\n    super(config);\n    /**\r\n     * @type {PerkState[]}\r\n     */\n\n    this.connectedPerks = [];\n  }\n\n  get automatorPoints() {\n    return this.config.automatorPoints ? this.config.automatorPoints : 0;\n  }\n\n  get label() {\n    return this.config.label;\n  }\n\n  get shortDescription() {\n    return this.config.shortDescription ? this.config.shortDescription() : \"\";\n  }\n\n  get currency() {\n    return Currency.perkPoints;\n  }\n\n  get set() {\n    return player.reality.perks;\n  }\n\n  get cost() {\n    return 1;\n  }\n\n  get isAvailableForPurchase() {\n    return this.id === 0 || this.connectedPerks.some(p => p.isBought);\n  }\n\n  get canBeApplied() {\n    return this.isBought && !(Pelle.isDoomed && Pelle.uselessPerks.includes(this.id));\n  }\n\n  initializeConnections() {\n    this.connectedPerks = GameDatabase.reality.perkConnections[this.id].map(id => Perks.find(id));\n  }\n\n  onPurchased() {\n    if (this.config.bumpCurrency !== undefined) this.config.bumpCurrency();\n    if (this.label === \"EU1\" && Currency.eternities.gt(0)) applyEU1();\n\n    if (this.label === \"ACHNR\") {\n      if (Achievements.preReality.some(a => !a.isUnlocked)) player.reality.gainedAutoAchievements = true;\n\n      for (const achievement of Achievements.preReality) {\n        achievement.unlock(true);\n      }\n    }\n\n    GameCache.achievementPeriod.invalidate();\n    GameCache.buyablePerks.invalidate();\n    EventHub.dispatch(GAME_EVENT.PERK_BOUGHT);\n  }\n\n}\n\nexport const Perk = mapGameDataToObject(GameDatabase.reality.perks, config => new PerkState(config));\nexport const Perks = {\n  all: Perk.all,\n\n  /**\r\n   * @param {number} id\r\n   * @returns {PerkState}\r\n   */\n  find(id) {\n    return Perks.all.find(p => p.id === id);\n  }\n\n};\n\nfor (const perk of Perks.all) {\n  perk.initializeConnections();\n}\n\nexport function checkPerkValidity() {\n  if (player.reality.perks.every(id => Perks.find(id) !== undefined)) return;\n  dev.respecPerks();\n\n  if (Currency.perkPoints.gte(Perks.all.length)) {\n    dev.buyAllPerks();\n    Modal.message.show(\"Some of your Perks were invalid, but you auto-bought all valid perks.\");\n  } else {\n    Modal.message.show(\"Some of your Perks were invalid, so your Perks have been reset and your Perk Points refunded.\");\n  }\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/perks.js"],"names":["SetPurchasableMechanicState","PerkState","constructor","config","connectedPerks","automatorPoints","label","shortDescription","currency","Currency","perkPoints","set","player","reality","perks","cost","isAvailableForPurchase","id","some","p","isBought","canBeApplied","Pelle","isDoomed","uselessPerks","includes","initializeConnections","GameDatabase","perkConnections","map","Perks","find","onPurchased","bumpCurrency","undefined","eternities","gt","applyEU1","Achievements","preReality","a","isUnlocked","gainedAutoAchievements","achievement","unlock","GameCache","achievementPeriod","invalidate","buyablePerks","EventHub","dispatch","GAME_EVENT","PERK_BOUGHT","Perk","mapGameDataToObject","all","perk","checkPerkValidity","every","dev","respecPerks","gte","length","buyAllPerks","Modal","message","show"],"mappings":"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","sourcesContent":["import { SetPurchasableMechanicState } from \"./game-mechanics\";\r\n\r\nclass PerkState extends SetPurchasableMechanicState {\r\n  constructor(config) {\r\n    super(config);\r\n    /**\r\n     * @type {PerkState[]}\r\n     */\r\n    this.connectedPerks = [];\r\n  }\r\n\r\n  get automatorPoints() {\r\n    return this.config.automatorPoints ? this.config.automatorPoints : 0;\r\n  }\r\n\r\n  get label() {\r\n    return this.config.label;\r\n  }\r\n\r\n  get shortDescription() {\r\n    return this.config.shortDescription ? this.config.shortDescription() : \"\";\r\n  }\r\n\r\n  get currency() {\r\n    return Currency.perkPoints;\r\n  }\r\n\r\n  get set() {\r\n    return player.reality.perks;\r\n  }\r\n\r\n  get cost() {\r\n    return 1;\r\n  }\r\n\r\n  get isAvailableForPurchase() {\r\n    return this.id === 0 || this.connectedPerks.some(p => p.isBought);\r\n  }\r\n\r\n  get canBeApplied() {\r\n    return this.isBought && !(Pelle.isDoomed && Pelle.uselessPerks.includes(this.id));\r\n  }\r\n\r\n  initializeConnections() {\r\n    this.connectedPerks = GameDatabase.reality.perkConnections[this.id].map(id => Perks.find(id));\r\n  }\r\n\r\n  onPurchased() {\r\n    if (this.config.bumpCurrency !== undefined) this.config.bumpCurrency();\r\n    if (this.label === \"EU1\" && Currency.eternities.gt(0)) applyEU1();\r\n    if (this.label === \"ACHNR\") {\r\n      if (Achievements.preReality.some(a => !a.isUnlocked)) player.reality.gainedAutoAchievements = true;\r\n      for (const achievement of Achievements.preReality) {\r\n        achievement.unlock(true);\r\n      }\r\n    }\r\n    GameCache.achievementPeriod.invalidate();\r\n    GameCache.buyablePerks.invalidate();\r\n    EventHub.dispatch(GAME_EVENT.PERK_BOUGHT);\r\n  }\r\n}\r\n\r\nexport const Perk = mapGameDataToObject(\r\n  GameDatabase.reality.perks,\r\n  config => new PerkState(config)\r\n);\r\n\r\nexport const Perks = {\r\n  all: Perk.all,\r\n  /**\r\n   * @param {number} id\r\n   * @returns {PerkState}\r\n   */\r\n  find(id) {\r\n    return Perks.all.find(p => p.id === id);\r\n  }\r\n};\r\n\r\nfor (const perk of Perks.all) {\r\n  perk.initializeConnections();\r\n}\r\n\r\nexport function checkPerkValidity() {\r\n  if (player.reality.perks.every(id => Perks.find(id) !== undefined)) return;\r\n  dev.respecPerks();\r\n  if (Currency.perkPoints.gte(Perks.all.length)) {\r\n    dev.buyAllPerks();\r\n    Modal.message.show(\"Some of your Perks were invalid, but you auto-bought all valid perks.\");\r\n  } else {\r\n    Modal.message.show(\"Some of your Perks were invalid, so your Perks have been reset and your Perk Points refunded.\");\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}