{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport { BitUpgradeState, RebuyableMechanicState } from \"../game-mechanics\";\nimport { GameDatabase } from \"../secret-formula/game-database\";\nimport { Quotes } from \"./quotes\";\nexport const Teresa = {\n  timePoured: 0,\n  lastUnlock: \"effarig\",\n  pouredAmountCap: 1e24,\n  displayName: \"Teresa\",\n  possessiveName: \"Teresa's\",\n\n  get isUnlocked() {\n    return Achievement(147).isUnlocked;\n  },\n\n  pourRM(diff) {\n    if (this.pouredAmount >= Teresa.pouredAmountCap) return;\n    this.timePoured += diff;\n    const rm = Currency.realityMachines.value;\n    const rmPoured = Math.min((this.pouredAmount + 1e6) * 0.01 * Math.pow(this.timePoured, 2), rm.toNumber());\n    this.pouredAmount += Math.min(rmPoured, Teresa.pouredAmountCap - this.pouredAmount);\n    Currency.realityMachines.subtract(rmPoured);\n    this.checkForUnlocks();\n  },\n\n  checkForUnlocks() {\n    for (const info of TeresaUnlocks.all) {\n      info.unlock();\n    }\n  },\n\n  initializeRun() {\n    clearCelestialRuns();\n    player.celestials.teresa.run = true;\n  },\n\n  rewardMultiplier(antimatter) {\n    return Decimal.max(Decimal.pow(antimatter.plus(1).log10() / 1.5e8, 12), 1).toNumber();\n  },\n\n  get pouredAmount() {\n    return player.celestials.teresa.pouredAmount;\n  },\n\n  set pouredAmount(amount) {\n    player.celestials.teresa.pouredAmount = amount;\n  },\n\n  get fill() {\n    return Math.min(Math.log10(this.pouredAmount) / 24, 1);\n  },\n\n  get possibleFill() {\n    return Math.min(Currency.realityMachines.value.plus(this.pouredAmount).log10() / 24, 1);\n  },\n\n  get rmMultiplier() {\n    return Math.max(250 * Math.pow(this.pouredAmount / 1e24, 0.1), 1);\n  },\n\n  get runRewardMultiplier() {\n    return this.rewardMultiplier(player.celestials.teresa.bestRunAM);\n  },\n\n  get isRunning() {\n    return player.celestials.teresa.run;\n  },\n\n  get runCompleted() {\n    return player.celestials.teresa.bestRunAM.gt(1);\n  },\n\n  quotes: Quotes.teresa,\n  symbol: \"Ïž\"\n};\n\nclass PerkShopUpgradeState extends RebuyableMechanicState {\n  constructor(config) {\n    super(config);\n    this.costCap = config.costCap;\n  }\n\n  get currency() {\n    return Currency.perkPoints;\n  }\n\n  get boughtAmount() {\n    return player.celestials.teresa.perkShop[this.id];\n  }\n\n  set boughtAmount(value) {\n    player.celestials.teresa.perkShop[this.id] = value;\n  }\n\n  get isCapped() {\n    return this.cost === this.costCap(this.bought);\n  }\n\n  get isAvailableForPurchase() {\n    const otherReq = this.config.otherReq ? this.config.otherReq() : true;\n    return this.cost <= this.currency.value && otherReq;\n  }\n\n  onPurchased() {\n    if (this.id === 0) {\n      GameCache.staticGlyphWeights.invalidate();\n    }\n\n    if (this.id === 1) {\n      Autobuyer.reality.bumpAmount(2);\n    } // Give a single music glyph\n\n\n    if (this.id === 4 && !Pelle.isDoomed) {\n      if (GameCache.glyphInventorySpace.value === 0) {\n        // Refund the perk point if they didn't actually get a glyph\n        Currency.perkPoints.add(1);\n        GameUI.notify.error(\"You have no empty inventory space!\");\n      } else {\n        Glyphs.addToInventory(GlyphGenerator.musicGlyph());\n        GameUI.notify.success(\"Created a Music Glyph\");\n      }\n    } // Fill the inventory with music glyphs\n\n\n    if (this.id === 5 && !Pelle.isDoomed) {\n      const toCreate = GameCache.glyphInventorySpace.value;\n\n      for (let count = 0; count < toCreate; count++) Glyphs.addToInventory(GlyphGenerator.musicGlyph());\n\n      GameUI.notify.success(`Created ${quantifyInt(\"Music Glyph\", toCreate)}`);\n    }\n  }\n\n}\n\nclass TeresaUnlockState extends BitUpgradeState {\n  get bits() {\n    return player.celestials.teresa.unlockBits;\n  }\n\n  set bits(value) {\n    player.celestials.teresa.unlockBits = value;\n  }\n\n  get price() {\n    return this.config.price;\n  }\n\n  get pelleDisabled() {\n    return Pelle.isDoomed && this.config.isDisabledInDoomed;\n  }\n\n  get isEffectActive() {\n    return !this.pelleDisabled;\n  }\n\n  get canBeUnlocked() {\n    return !this.isUnlocked && Teresa.pouredAmount >= this.price;\n  }\n\n  get description() {\n    return typeof this.config.description === \"function\" ? this.config.description() : this.config.description;\n  }\n\n  onUnlock() {\n    var _this$config$onUnlock, _this$config;\n\n    (_this$config$onUnlock = (_this$config = this.config).onUnlock) === null || _this$config$onUnlock === void 0 ? void 0 : _this$config$onUnlock.call(_this$config);\n  }\n\n}\n\nexport const TeresaUnlocks = mapGameDataToObject(GameDatabase.celestials.teresa.unlocks, config => new TeresaUnlockState(config));\nexport const PerkShopUpgrade = mapGameDataToObject(GameDatabase.celestials.perkShop, config => new PerkShopUpgradeState(config));\nEventHub.logic.on(GAME_EVENT.TAB_CHANGED, () => {\n  if (Tab.celestials.teresa.isOpen) Teresa.quotes.initial.show();\n});\nEventHub.logic.on(GAME_EVENT.GAME_LOAD, () => Teresa.checkForUnlocks());","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/celestials/teresa.js"],"names":["BitUpgradeState","RebuyableMechanicState","GameDatabase","Quotes","Teresa","timePoured","lastUnlock","pouredAmountCap","displayName","possessiveName","isUnlocked","Achievement","pourRM","diff","pouredAmount","rm","Currency","realityMachines","value","rmPoured","Math","min","pow","toNumber","subtract","checkForUnlocks","info","TeresaUnlocks","all","unlock","initializeRun","clearCelestialRuns","player","celestials","teresa","run","rewardMultiplier","antimatter","Decimal","max","plus","log10","amount","fill","possibleFill","rmMultiplier","runRewardMultiplier","bestRunAM","isRunning","runCompleted","gt","quotes","symbol","PerkShopUpgradeState","constructor","config","costCap","currency","perkPoints","boughtAmount","perkShop","id","isCapped","cost","bought","isAvailableForPurchase","otherReq","onPurchased","GameCache","staticGlyphWeights","invalidate","Autobuyer","reality","bumpAmount","Pelle","isDoomed","glyphInventorySpace","add","GameUI","notify","error","Glyphs","addToInventory","GlyphGenerator","musicGlyph","success","toCreate","count","quantifyInt","TeresaUnlockState","bits","unlockBits","price","pelleDisabled","isDisabledInDoomed","isEffectActive","canBeUnlocked","description","onUnlock","mapGameDataToObject","unlocks","PerkShopUpgrade","EventHub","logic","on","GAME_EVENT","TAB_CHANGED","Tab","isOpen","initial","show","GAME_LOAD"],"mappings":"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","sourcesContent":["import { BitUpgradeState, RebuyableMechanicState } from \"../game-mechanics\";\r\nimport { GameDatabase } from \"../secret-formula/game-database\";\r\n\r\nimport { Quotes } from \"./quotes\";\r\n\r\nexport const Teresa = {\r\n  timePoured: 0,\r\n  lastUnlock: \"effarig\",\r\n  pouredAmountCap: 1e24,\r\n  displayName: \"Teresa\",\r\n  possessiveName: \"Teresa's\",\r\n  get isUnlocked() {\r\n    return Achievement(147).isUnlocked;\r\n  },\r\n  pourRM(diff) {\r\n    if (this.pouredAmount >= Teresa.pouredAmountCap) return;\r\n    this.timePoured += diff;\r\n    const rm = Currency.realityMachines.value;\r\n    const rmPoured = Math.min((this.pouredAmount + 1e6) * 0.01 * Math.pow(this.timePoured, 2), rm.toNumber());\r\n    this.pouredAmount += Math.min(rmPoured, Teresa.pouredAmountCap - this.pouredAmount);\r\n    Currency.realityMachines.subtract(rmPoured);\r\n    this.checkForUnlocks();\r\n  },\r\n  checkForUnlocks() {\r\n    for (const info of TeresaUnlocks.all) {\r\n      info.unlock();\r\n    }\r\n  },\r\n  initializeRun() {\r\n    clearCelestialRuns();\r\n    player.celestials.teresa.run = true;\r\n  },\r\n  rewardMultiplier(antimatter) {\r\n    return Decimal.max(Decimal.pow(antimatter.plus(1).log10() / 1.5e8, 12), 1).toNumber();\r\n  },\r\n  get pouredAmount() {\r\n    return player.celestials.teresa.pouredAmount;\r\n  },\r\n  set pouredAmount(amount) {\r\n    player.celestials.teresa.pouredAmount = amount;\r\n  },\r\n  get fill() {\r\n    return Math.min(Math.log10(this.pouredAmount) / 24, 1);\r\n  },\r\n  get possibleFill() {\r\n    return Math.min(Currency.realityMachines.value.plus(this.pouredAmount).log10() / 24, 1);\r\n  },\r\n  get rmMultiplier() {\r\n    return Math.max(250 * Math.pow(this.pouredAmount / 1e24, 0.1), 1);\r\n  },\r\n  get runRewardMultiplier() {\r\n    return this.rewardMultiplier(player.celestials.teresa.bestRunAM);\r\n  },\r\n  get isRunning() {\r\n    return player.celestials.teresa.run;\r\n  },\r\n  get runCompleted() {\r\n    return player.celestials.teresa.bestRunAM.gt(1);\r\n  },\r\n  quotes: Quotes.teresa,\r\n  symbol: \"Ïž\"\r\n};\r\n\r\nclass PerkShopUpgradeState extends RebuyableMechanicState {\r\n  constructor(config) {\r\n    super(config);\r\n    this.costCap = config.costCap;\r\n  }\r\n\r\n  get currency() {\r\n    return Currency.perkPoints;\r\n  }\r\n\r\n  get boughtAmount() {\r\n    return player.celestials.teresa.perkShop[this.id];\r\n  }\r\n\r\n  set boughtAmount(value) {\r\n    player.celestials.teresa.perkShop[this.id] = value;\r\n  }\r\n\r\n  get isCapped() {\r\n    return this.cost === this.costCap(this.bought);\r\n  }\r\n\r\n  get isAvailableForPurchase() {\r\n    const otherReq = this.config.otherReq ? this.config.otherReq() : true;\r\n    return this.cost <= this.currency.value && otherReq;\r\n  }\r\n\r\n  onPurchased() {\r\n    if (this.id === 0) {\r\n      GameCache.staticGlyphWeights.invalidate();\r\n    }\r\n    if (this.id === 1) {\r\n      Autobuyer.reality.bumpAmount(2);\r\n    }\r\n    // Give a single music glyph\r\n    if (this.id === 4 && !Pelle.isDoomed) {\r\n      if (GameCache.glyphInventorySpace.value === 0) {\r\n        // Refund the perk point if they didn't actually get a glyph\r\n        Currency.perkPoints.add(1);\r\n        GameUI.notify.error(\"You have no empty inventory space!\");\r\n      } else {\r\n        Glyphs.addToInventory(GlyphGenerator.musicGlyph());\r\n        GameUI.notify.success(\"Created a Music Glyph\");\r\n      }\r\n    }\r\n    // Fill the inventory with music glyphs\r\n    if (this.id === 5 && !Pelle.isDoomed) {\r\n      const toCreate = GameCache.glyphInventorySpace.value;\r\n      for (let count = 0; count < toCreate; count++) Glyphs.addToInventory(GlyphGenerator.musicGlyph());\r\n      GameUI.notify.success(`Created ${quantifyInt(\"Music Glyph\", toCreate)}`);\r\n    }\r\n  }\r\n}\r\n\r\nclass TeresaUnlockState extends BitUpgradeState {\r\n  get bits() { return player.celestials.teresa.unlockBits; }\r\n  set bits(value) { player.celestials.teresa.unlockBits = value; }\r\n\r\n  get price() {\r\n    return this.config.price;\r\n  }\r\n\r\n  get pelleDisabled() {\r\n    return Pelle.isDoomed && this.config.isDisabledInDoomed;\r\n  }\r\n\r\n  get isEffectActive() {\r\n    return !this.pelleDisabled;\r\n  }\r\n\r\n  get canBeUnlocked() {\r\n    return !this.isUnlocked && Teresa.pouredAmount >= this.price;\r\n  }\r\n\r\n  get description() {\r\n    return typeof this.config.description === \"function\" ? this.config.description() : this.config.description;\r\n  }\r\n\r\n  onUnlock() {\r\n    this.config.onUnlock?.();\r\n  }\r\n}\r\n\r\nexport const TeresaUnlocks = mapGameDataToObject(\r\n  GameDatabase.celestials.teresa.unlocks,\r\n  config => new TeresaUnlockState(config)\r\n);\r\n\r\nexport const PerkShopUpgrade = mapGameDataToObject(\r\n  GameDatabase.celestials.perkShop,\r\n  config => new PerkShopUpgradeState(config)\r\n);\r\n\r\nEventHub.logic.on(GAME_EVENT.TAB_CHANGED, () => {\r\n  if (Tab.celestials.teresa.isOpen) Teresa.quotes.initial.show();\r\n});\r\n\r\nEventHub.logic.on(GAME_EVENT.GAME_LOAD, () => Teresa.checkForUnlocks());\r\n"]},"metadata":{},"sourceType":"module"}