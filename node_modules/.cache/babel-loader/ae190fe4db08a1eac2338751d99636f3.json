{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nexport default {\n  name: \"SaveInfoEntry\",\n  props: {\n    saveId: {\n      type: Number,\n      required: false,\n      default: 0\n    },\n    saveData: {\n      type: Object,\n      required: true\n    },\n    otherData: {\n      type: Object,\n      required: true\n    },\n    showName: {\n      type: Boolean,\n      required: false,\n      default: true\n    },\n    saveType: {\n      type: String,\n      required: true\n    }\n  },\n  computed: {\n    timePlayed() {\n      return `Time Played: ${TimeSpan.fromMilliseconds(this.saveData.realTimePlayed).toString()}`;\n    },\n\n    // Note that all of the four following entries have Pelle-specific resources at the highest priority, which\n    // will generally lead to most of them being overridden almost immediately after Dooming (or practically close\n    // enough). This makes the general appearance better, at the cost of inaccurate variable names post-Dooming.\n    antimatter() {\n      return this.compareLayeredValues([\"pelleAM\", \"totalAntimatter\"], [\"Total Doomed Antimatter:\", \"Total Antimatter:\"], [format, format], \"\");\n    },\n\n    prestigeCount() {\n      return this.compareLayeredValues([\"remnants\", \"realities\", \"eternities\", \"infinities\"], [\"Remnants:\", \"Realities:\", \"Eternities:\", \"Infinities:\"], [format, this.formatSmall, this.formatSmall, this.formatSmall], \"(No prestige layers reached yet.)\");\n    },\n\n    prestigeResource() {\n      return this.compareLayeredValues([\"realityShards\", \"imaginaryMachines\", \"realityMachines\", \"eternityPoints\", \"infinityPoints\"], [\"Reality Shards:\", \"Reality Machines:\", \"Reality Machines:\", \"Eternity Points:\", \"Infinity Points:\"], [format, x => formatMachines(this.saveData.realityMachines, x), format, format, format], \"\");\n    },\n\n    // This is a slight workaround to hide DT/level once Doomed\n    extraProgressIndicator() {\n      return this.compareLayeredValues([\"pelleLore\", \"bestLevel\", \"dilatedTime\"], [\"Your Reality is Doomed.\", \"Best Glyph Level:\", \"Dilated Time:\"], [() => \"\", formatInt, format], \"\");\n    },\n\n    name() {\n      return this.saveData.saveName;\n    }\n\n  },\n  methods: {\n    formatSmall(number) {\n      if (Decimal.gt(number, 1e4)) return format(number, 2);\n      return formatInt(number);\n    },\n\n    // Compares a list of properties in order, going through the array parameters until one of them is nonzero.\n    // If they're both the same number, don't add any styling. If they're both nonzero, then they're on the same\n    // layer and we only style the number. If one of them is zero, then they're different layers and we color the\n    // whole line instead. If every layer results in zero, we default to a given fallback string.\n    // Properties here are drawn in values returned from getSaveInfo() in modal.js\n    // eslint-disable-next-line max-params\n    compareLayeredValues(propArray, nameArray, formatArray, fallbackString) {\n      // Determine if they're on the same layer and if it's better or worse\n      let isSameLayer, isBetter;\n\n      for (let index = 0; index < propArray.length; index++) {\n        const prop = propArray[index];\n\n        if (Decimal.eq(this.saveData[prop], 0) && Decimal.eq(this.otherData[prop], 0)) {\n          // They're both zero\n          continue;\n        } else if (Decimal.eq(this.saveData[prop], this.otherData[prop])) {\n          // They're both the same value\n          isSameLayer = true;\n          isBetter = 0;\n          break;\n        } else if (Decimal.neq(this.saveData[prop], 0) && Decimal.neq(this.otherData[prop], 0)) {\n          // Both have nonzero values on the same layer\n          isSameLayer = true;\n          isBetter = Decimal.gt(this.saveData[prop], this.otherData[prop]) ? 1 : -1;\n          break;\n        } else {\n          // The only other case is that one is zero and the other isn't\n          isSameLayer = false;\n          isBetter = Decimal.gt(this.saveData[prop], 0) ? 1 : -1;\n          break;\n        }\n      } // Figure out what the raw text should be, based on the first nonzero value\n\n\n      let layerName = fallbackString,\n          layerValue = \"\";\n\n      for (let index = 0; index < propArray.length; index++) {\n        const prop = propArray[index];\n\n        if (Decimal.gt(this.saveData[prop], 0)) {\n          layerName = nameArray[index]; // This is often called with format(), so we supply a default 2 decimal places\n\n          layerValue = formatArray[index](this.saveData[prop], 2);\n          break;\n        }\n      } // Style it appropriately\n\n\n      if (isBetter === 0) return `${layerName} ${layerValue}`;\n\n      const parseColor = color => getComputedStyle(document.body).getPropertyValue(`--color-${color}`).split(\"#\")[1];\n\n      const colorTag = `<span style=\"color:#${parseColor(isBetter === 1 ? \"good\" : \"infinity\")}\">`;\n      return isSameLayer ? `${layerName} ${colorTag}${layerValue}</span>` : `${colorTag}${layerName} ${layerValue}</span>`;\n    }\n\n  }\n};","map":{"version":3,"sources":["SaveInfoEntry.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nexport default {\r\n  name: \"SaveInfoEntry\",\r\n  props: {\r\n    saveId: {\r\n      type: Number,\r\n      required: false,\r\n      default: 0,\r\n    },\r\n    saveData: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n    otherData: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n    showName: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: true,\r\n    },\r\n    saveType: {\r\n      type: String,\r\n      required: true,\r\n    }\r\n  },\r\n  computed: {\r\n    timePlayed() {\r\n      return `Time Played: ${TimeSpan.fromMilliseconds(this.saveData.realTimePlayed).toString()}`;\r\n    },\r\n    // Note that all of the four following entries have Pelle-specific resources at the highest priority, which\r\n    // will generally lead to most of them being overridden almost immediately after Dooming (or practically close\r\n    // enough). This makes the general appearance better, at the cost of inaccurate variable names post-Dooming.\r\n    antimatter() {\r\n      return this.compareLayeredValues(\r\n        [\"pelleAM\", \"totalAntimatter\"],\r\n        [\"Total Doomed Antimatter:\", \"Total Antimatter:\"],\r\n        [format, format],\r\n        \"\"\r\n      );\r\n    },\r\n    prestigeCount() {\r\n      return this.compareLayeredValues(\r\n        [\"remnants\", \"realities\", \"eternities\", \"infinities\"],\r\n        [\"Remnants:\", \"Realities:\", \"Eternities:\", \"Infinities:\"],\r\n        [format, this.formatSmall, this.formatSmall, this.formatSmall],\r\n        \"(No prestige layers reached yet.)\"\r\n      );\r\n    },\r\n    prestigeResource() {\r\n      return this.compareLayeredValues(\r\n        [\"realityShards\", \"imaginaryMachines\", \"realityMachines\", \"eternityPoints\", \"infinityPoints\"],\r\n        [\"Reality Shards:\", \"Reality Machines:\", \"Reality Machines:\", \"Eternity Points:\", \"Infinity Points:\"],\r\n        [format, x => formatMachines(this.saveData.realityMachines, x), format, format, format],\r\n        \"\"\r\n      );\r\n    },\r\n    // This is a slight workaround to hide DT/level once Doomed\r\n    extraProgressIndicator() {\r\n      return this.compareLayeredValues(\r\n        [\"pelleLore\", \"bestLevel\", \"dilatedTime\"],\r\n        [\"Your Reality is Doomed.\", \"Best Glyph Level:\", \"Dilated Time:\"],\r\n        [() => \"\", formatInt, format],\r\n        \"\"\r\n      );\r\n    },\r\n    name() {\r\n      return this.saveData.saveName;\r\n    },\r\n  },\r\n  methods: {\r\n    formatSmall(number) {\r\n      if (Decimal.gt(number, 1e4)) return format(number, 2);\r\n      return formatInt(number);\r\n    },\r\n    // Compares a list of properties in order, going through the array parameters until one of them is nonzero.\r\n    // If they're both the same number, don't add any styling. If they're both nonzero, then they're on the same\r\n    // layer and we only style the number. If one of them is zero, then they're different layers and we color the\r\n    // whole line instead. If every layer results in zero, we default to a given fallback string.\r\n    // Properties here are drawn in values returned from getSaveInfo() in modal.js\r\n    // eslint-disable-next-line max-params\r\n    compareLayeredValues(propArray, nameArray, formatArray, fallbackString) {\r\n      // Determine if they're on the same layer and if it's better or worse\r\n      let isSameLayer, isBetter;\r\n      for (let index = 0; index < propArray.length; index++) {\r\n        const prop = propArray[index];\r\n        if (Decimal.eq(this.saveData[prop], 0) && Decimal.eq(this.otherData[prop], 0)) {\r\n          // They're both zero\r\n          continue;\r\n        } else if (Decimal.eq(this.saveData[prop], this.otherData[prop])) {\r\n          // They're both the same value\r\n          isSameLayer = true;\r\n          isBetter = 0;\r\n          break;\r\n        } else if (Decimal.neq(this.saveData[prop], 0) && Decimal.neq(this.otherData[prop], 0)) {\r\n          // Both have nonzero values on the same layer\r\n          isSameLayer = true;\r\n          isBetter = Decimal.gt(this.saveData[prop], this.otherData[prop]) ? 1 : -1;\r\n          break;\r\n        } else {\r\n          // The only other case is that one is zero and the other isn't\r\n          isSameLayer = false;\r\n          isBetter = Decimal.gt(this.saveData[prop], 0) ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Figure out what the raw text should be, based on the first nonzero value\r\n      let layerName = fallbackString, layerValue = \"\";\r\n      for (let index = 0; index < propArray.length; index++) {\r\n        const prop = propArray[index];\r\n        if (Decimal.gt(this.saveData[prop], 0)) {\r\n          layerName = nameArray[index];\r\n          // This is often called with format(), so we supply a default 2 decimal places\r\n          layerValue = formatArray[index](this.saveData[prop], 2);\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Style it appropriately\r\n      if (isBetter === 0) return `${layerName} ${layerValue}`;\r\n      const parseColor = color => getComputedStyle(document.body).getPropertyValue(`--color-${color}`).split(\"#\")[1];\r\n      const colorTag = `<span style=\"color:#${parseColor(isBetter === 1 ? \"good\" : \"infinity\")}\">`;\r\n      return isSameLayer\r\n        ? `${layerName} ${colorTag}${layerValue}</span>`\r\n        : `${colorTag}${layerName} ${layerValue}</span>`;\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-modal-options__save-record\">\r\n    <h3>{{ saveType }} <span v-if=\"saveId\">(Slot #{{ saveId + 1 }}):</span></h3>\r\n    <span v-if=\"showName\">\r\n      <span v-if=\"name\">\r\n        Save Name: {{ name }}\r\n      </span>\r\n      <span v-else>\r\n        Unnamed Save\r\n      </span>\r\n      <br>\r\n    </span>\r\n    {{ timePlayed }}\r\n    <br>\r\n    <span v-html=\"antimatter\" />\r\n    <span v-html=\"prestigeCount\" />\r\n    <span v-html=\"prestigeResource\" />\r\n    <span v-html=\"extraProgressIndicator\" />\r\n    <br>\r\n    <slot />\r\n  </div>\r\n</template>\r\n"],"sourceRoot":"src/components/modals/cloud"},"metadata":{},"sourceType":"module"}