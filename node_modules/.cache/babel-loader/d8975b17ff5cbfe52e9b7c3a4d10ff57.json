{"ast":null,"code":"import \"core-js/modules/es.array.sort.js\";\nimport EternityMilestoneButton from \"./EternityMilestoneButton\";\nexport default {\n  name: \"EternityMilestonesTab\",\n  components: {\n    EternityMilestoneButton\n  },\n\n  data() {\n    return {\n      eternityCount: new Decimal()\n    };\n  },\n\n  computed: {\n    milestones() {\n      return Object.values(GameDatabase.eternity.milestones).sort((a, b) => a.eternities - b.eternities).map(config => new EternityMilestoneState(config));\n    },\n\n    rows() {\n      return Math.ceil(this.milestones.length / 3);\n    }\n\n  },\n  methods: {\n    update() {\n      this.eternityCount.copyFrom(Currency.eternities.value.floor());\n    },\n\n    getMilestone(row, column) {\n      return () => this.milestones[(row - 1) * 3 + column - 1];\n    }\n\n  }\n};","map":{"version":3,"sources":["EternityMilestonesTab.vue"],"names":[],"mappings":";AACA,OAAA,uBAAA,MAAA,2BAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,uBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA;AADA,GAFA;;AAKA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,aAAA,EAAA,IAAA,OAAA;AADA,KAAA;AAGA,GATA;;AAUA,EAAA,QAAA,EAAA;AACA,IAAA,UAAA,GAAA;AACA,aAAA,MAAA,CAAA,MAAA,CAAA,YAAA,CAAA,QAAA,CAAA,UAAA,EACA,IADA,CACA,CAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAAA,UAAA,GAAA,CAAA,CAAA,UADA,EAEA,GAFA,CAEA,MAAA,IAAA,IAAA,sBAAA,CAAA,MAAA,CAFA,CAAA;AAGA,KALA;;AAMA,IAAA,IAAA,GAAA;AACA,aAAA,IAAA,CAAA,IAAA,CAAA,KAAA,UAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACA;;AARA,GAVA;AAoBA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,aAAA,CAAA,QAAA,CAAA,QAAA,CAAA,UAAA,CAAA,KAAA,CAAA,KAAA,EAAA;AACA,KAHA;;AAIA,IAAA,YAAA,CAAA,GAAA,EAAA,MAAA,EAAA;AACA,aAAA,MAAA,KAAA,UAAA,CAAA,CAAA,GAAA,GAAA,CAAA,IAAA,CAAA,GAAA,MAAA,GAAA,CAAA,CAAA;AACA;;AANA;AApBA,CAAA","sourcesContent":["<script>\r\nimport EternityMilestoneButton from \"./EternityMilestoneButton\";\r\n\r\nexport default {\r\n  name: \"EternityMilestonesTab\",\r\n  components: {\r\n    EternityMilestoneButton\r\n  },\r\n  data() {\r\n    return {\r\n      eternityCount: new Decimal(),\r\n    };\r\n  },\r\n  computed: {\r\n    milestones() {\r\n      return Object.values(GameDatabase.eternity.milestones)\r\n        .sort((a, b) => a.eternities - b.eternities)\r\n        .map(config => new EternityMilestoneState(config));\r\n    },\r\n    rows() {\r\n      return Math.ceil(this.milestones.length / 3);\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.eternityCount.copyFrom(Currency.eternities.value.floor());\r\n    },\r\n    getMilestone(row, column) {\r\n      return () => this.milestones[(row - 1) * 3 + column - 1];\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-eternity-milestone-grid\">\r\n    <div>You have {{ quantify(\"Eternity\", eternityCount, 3) }}.</div>\r\n    <div>\r\n      Offline generation milestones are only active under certain conditions, mouse-over to see these conditions.\r\n    </div>\r\n    <div\r\n      v-for=\"row in rows\"\r\n      :key=\"row\"\r\n      class=\"l-eternity-milestone-grid__row\"\r\n    >\r\n      <EternityMilestoneButton\r\n        v-for=\"column in 3\"\r\n        :key=\"row * 3 + column\"\r\n        :get-milestone=\"getMilestone(row, column)\"\r\n        class=\"l-eternity-milestone-grid__cell\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/eternity-milestones"},"metadata":{},"sourceType":"module"}