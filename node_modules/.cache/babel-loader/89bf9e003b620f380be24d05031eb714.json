{"ast":null,"code":"import { CELESTIAL_NAV_DRAW_ORDER, pelleStarPosition } from \"../navigation\"; // Determines styling, overall visibility, and placement/scaling of the sigil. Center and size are defined such that\n// the sigil will largely stay within a circle of radius \"size\" centered on \"center\"\n\nconst SigilAttributes = {\n  visible: () => Pelle.hasGalaxyGenerator,\n  center: pelleStarPosition(0, 0),\n  size: 20,\n  color: \"#00ffff\",\n  canvasLayer: CELESTIAL_NAV_DRAW_ORDER.CANVAS_OVERLAY\n};\n/**\r\n * Method to make an appropriately-formatted entry to be fed into the navigation code\r\n *\r\n * @member {String} type  String specifying the actual shape of the element to be drawn; must be \"circle\" or \"arc\"\r\n * @member {Object} att   Object whose props list out attributes of the shape to be drawn:\r\n *  center - Center of the circle or logarithmic spiral (\"arc\") being drawn\r\n *  radius - Only used for \"circle\" and is the radius of the circle being drawn\r\n *  initRadius/finalRadius - Radius endpoints for a spiral\r\n *  initAngle/finalAngle - Angular endpoints for a spiral\r\n * @member {Object} draw  Object whose props (thickness, layer) determine the thickness and z-index of this element\r\n * @member {String} colorOverride Color to use for rendering the element, used instead of SigilAttributes.color\r\n */\n// eslint-disable-next-line max-params\n\nfunction sigilShape(type, att, draw, colorOverride) {\n  let pos, path, pathStart, pathEnd;\n\n  switch (type) {\n    case \"circle\":\n      pos = att.center;\n      path = LogarithmicSpiral.fromPolarEndpoints(att.center, 0, att.radius * SigilAttributes.size, 1, att.radius * SigilAttributes.size);\n      pathStart = att.initAngle;\n      pathEnd = att.finalAngle;\n      break;\n\n    case \"arc\":\n      pos = att.center;\n      pathStart = att.initAngle;\n      pathEnd = att.finalAngle;\n      path = LogarithmicSpiral.fromPolarEndpoints(att.center, pathStart, att.initRadius * SigilAttributes.size, pathEnd, att.finalRadius * SigilAttributes.size);\n      break;\n\n    default:\n      throw Error(\"Unrecognized shape in sigil specification\");\n  }\n\n  return {\n    visible: () => SigilAttributes.visible(),\n    complete: () => 1,\n    node: {\n      position: pos,\n      ring: {\n        rMajor: SigilAttributes.size * draw.thickness\n      },\n      bgDrawOrder: SigilAttributes.canvasLayer + draw.layer\n    },\n    connector: {\n      pathStart,\n      pathEnd,\n      drawOrder: SigilAttributes.canvasLayer + draw.layer,\n      path,\n      fill: colorOverride !== null && colorOverride !== void 0 ? colorOverride : SigilAttributes.color,\n      completeWidth: SigilAttributes.size * draw.thickness,\n      noBG: true\n    }\n  };\n} // List of specified primitive graphics elements with which to construct the sigil; see docstring of sigilShape\n// for description of proper attribute specifications. These are two circular rings in the center of the galaxy\n\n\nconst Shapes = {\n  disc: sigilShape(\"circle\", {\n    center: SigilAttributes.center,\n    radius: 0.2,\n    initAngle: 0,\n    finalAngle: 6.28\n  }, {\n    thickness: 0.15,\n    layer: 1\n  }, \"#88ffff\"),\n  glow: sigilShape(\"circle\", {\n    center: SigilAttributes.center,\n    radius: 0.125,\n    initAngle: 0,\n    finalAngle: 6.28\n  }, {\n    thickness: 0.05,\n    layer: 2\n  }, \"white\")\n}; // This segment adds multiple circular arcs around the entire sigil, in a shape resembling a spiral galaxy\n\nconst arcSegments = 10;\n\nfor (let arcIndex = 0; arcIndex < arcSegments; arcIndex++) {\n  const len = 2 * Math.PI / arcSegments;\n  const init = arcIndex * len;\n  Shapes[`spiral${arcIndex}`] = sigilShape(\"arc\", {\n    center: SigilAttributes.center,\n    initRadius: 0.2,\n    finalRadius: 0.9,\n    initAngle: init,\n    finalAngle: init + Math.PI\n  }, {\n    thickness: 0.1,\n    layer: 0\n  }, \"cyan\");\n}\n\nexport const galaxyIcon = Object.values(Shapes).mapToObject((key, idx) => `galaxy-icon-${idx}`, val => val);","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/celestials/navigation-sigils/galaxy-icon.js"],"names":["CELESTIAL_NAV_DRAW_ORDER","pelleStarPosition","SigilAttributes","visible","Pelle","hasGalaxyGenerator","center","size","color","canvasLayer","CANVAS_OVERLAY","sigilShape","type","att","draw","colorOverride","pos","path","pathStart","pathEnd","LogarithmicSpiral","fromPolarEndpoints","radius","initAngle","finalAngle","initRadius","finalRadius","Error","complete","node","position","ring","rMajor","thickness","bgDrawOrder","layer","connector","drawOrder","fill","completeWidth","noBG","Shapes","disc","glow","arcSegments","arcIndex","len","Math","PI","init","galaxyIcon","Object","values","mapToObject","key","idx","val"],"mappings":"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","sourcesContent":["import { CELESTIAL_NAV_DRAW_ORDER, pelleStarPosition } from \"../navigation\";\r\n\r\n// Determines styling, overall visibility, and placement/scaling of the sigil. Center and size are defined such that\r\n// the sigil will largely stay within a circle of radius \"size\" centered on \"center\"\r\nconst SigilAttributes = {\r\n  visible: () => Pelle.hasGalaxyGenerator,\r\n  center: pelleStarPosition(0, 0),\r\n  size: 20,\r\n  color: \"#00ffff\",\r\n  canvasLayer: CELESTIAL_NAV_DRAW_ORDER.CANVAS_OVERLAY,\r\n};\r\n\r\n/**\r\n * Method to make an appropriately-formatted entry to be fed into the navigation code\r\n *\r\n * @member {String} type  String specifying the actual shape of the element to be drawn; must be \"circle\" or \"arc\"\r\n * @member {Object} att   Object whose props list out attributes of the shape to be drawn:\r\n *  center - Center of the circle or logarithmic spiral (\"arc\") being drawn\r\n *  radius - Only used for \"circle\" and is the radius of the circle being drawn\r\n *  initRadius/finalRadius - Radius endpoints for a spiral\r\n *  initAngle/finalAngle - Angular endpoints for a spiral\r\n * @member {Object} draw  Object whose props (thickness, layer) determine the thickness and z-index of this element\r\n * @member {String} colorOverride Color to use for rendering the element, used instead of SigilAttributes.color\r\n */\r\n// eslint-disable-next-line max-params\r\nfunction sigilShape(type, att, draw, colorOverride) {\r\n  let pos, path, pathStart, pathEnd;\r\n  switch (type) {\r\n    case \"circle\":\r\n      pos = att.center;\r\n      path = LogarithmicSpiral.fromPolarEndpoints(att.center, 0, att.radius * SigilAttributes.size,\r\n        1, att.radius * SigilAttributes.size);\r\n      pathStart = att.initAngle;\r\n      pathEnd = att.finalAngle;\r\n      break;\r\n    case \"arc\":\r\n      pos = att.center;\r\n      pathStart = att.initAngle;\r\n      pathEnd = att.finalAngle;\r\n      path = LogarithmicSpiral.fromPolarEndpoints(att.center, pathStart, att.initRadius * SigilAttributes.size,\r\n        pathEnd, att.finalRadius * SigilAttributes.size);\r\n      break;\r\n    default:\r\n      throw Error(\"Unrecognized shape in sigil specification\");\r\n  }\r\n\r\n  return {\r\n    visible: () => SigilAttributes.visible(),\r\n    complete: () => 1,\r\n    node: {\r\n      position: pos,\r\n      ring: {\r\n        rMajor: SigilAttributes.size * draw.thickness,\r\n      },\r\n      bgDrawOrder: SigilAttributes.canvasLayer + draw.layer,\r\n    },\r\n    connector: {\r\n      pathStart,\r\n      pathEnd,\r\n      drawOrder: SigilAttributes.canvasLayer + draw.layer,\r\n      path,\r\n      fill: colorOverride ?? SigilAttributes.color,\r\n      completeWidth: SigilAttributes.size * draw.thickness,\r\n      noBG: true\r\n    },\r\n  };\r\n}\r\n\r\n// List of specified primitive graphics elements with which to construct the sigil; see docstring of sigilShape\r\n// for description of proper attribute specifications. These are two circular rings in the center of the galaxy\r\nconst Shapes = {\r\n  disc: sigilShape(\"circle\",\r\n    { center: SigilAttributes.center, radius: 0.2, initAngle: 0, finalAngle: 6.28 },\r\n    { thickness: 0.15, layer: 1 },\r\n    \"#88ffff\"),\r\n  glow: sigilShape(\"circle\",\r\n    { center: SigilAttributes.center, radius: 0.125, initAngle: 0, finalAngle: 6.28 },\r\n    { thickness: 0.05, layer: 2 },\r\n    \"white\"),\r\n};\r\n\r\n// This segment adds multiple circular arcs around the entire sigil, in a shape resembling a spiral galaxy\r\nconst arcSegments = 10;\r\nfor (let arcIndex = 0; arcIndex < arcSegments; arcIndex++) {\r\n  const len = 2 * Math.PI / arcSegments;\r\n  const init = arcIndex * len;\r\n  Shapes[`spiral${arcIndex}`] = sigilShape(\"arc\",\r\n    { center: SigilAttributes.center, initRadius: 0.2, finalRadius: 0.9, initAngle: init, finalAngle: init + Math.PI },\r\n    { thickness: 0.1, layer: 0 },\r\n    \"cyan\");\r\n}\r\n\r\nexport const galaxyIcon = Object.values(Shapes)\r\n  .mapToObject((key, idx) => `galaxy-icon-${idx}`, val => val);\r\n"]},"metadata":{},"sourceType":"module"}