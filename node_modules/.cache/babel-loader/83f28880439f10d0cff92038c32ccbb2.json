{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport CelestialQuoteHistory from \"@/components/CelestialQuoteHistory\";\nimport RaPet from \"./RaPet\";\nimport RaPetRemembranceButton from \"./RaPetRemembranceButton\";\nexport default {\n  name: \"RaTab\",\n  components: {\n    RaPet,\n    RaPetRemembranceButton,\n    CelestialQuoteHistory\n  },\n\n  data() {\n    return {\n      memoriesPerChunk: 0,\n      showReality: false,\n      isRaCapped: false,\n      totalLevels: 0,\n      showRemembrance: false,\n      hasRemembrance: false,\n      remembranceReq: 0,\n      remembranceMult: 1,\n      remembranceNerf: 1,\n      petWithRemembrance: \"\",\n      isRunning: false,\n      memoryBoosts: \"\"\n    };\n  },\n\n  computed: {\n    laitelaUnlock: () => Laitela.isUnlocked,\n    pets: () => [{\n      pet: Ra.pets.teresa,\n      scalingUpgradeVisible: () => Ra.unlocks.chargedInfinityUpgrades.isUnlocked,\n      scalingUpgradeText: () => `You can Charge ${quantifyInt(\"Infinity Upgrade\", Ra.totalCharges)}.`\n    }, {\n      pet: Ra.pets.effarig,\n      scalingUpgradeVisible: () => AlchemyResources.all.filter(r => r.isUnlocked).length > 0,\n      scalingUpgradeText: () => {\n        const resources = AlchemyResources.all.filter(r => r.isUnlocked).length;\n        return `You have unlocked ${quantifyInt(\"Alchemy Resource\", resources)}.`;\n      }\n    }, {\n      pet: Ra.pets.enslaved,\n      scalingUpgradeVisible: () => Ra.unlocks.improvedStoredTime.isUnlocked,\n      scalingUpgradeText: () => `Stored game time\n          ${formatX(Ra.unlocks.improvedStoredTime.effects.gameTimeAmplification.effectOrDefault(1), 2)} and real time\n          +${formatInt(Ra.unlocks.improvedStoredTime.effects.realTimeCap.effectOrDefault(0) / (1000 * 3600))} hours`\n    }, {\n      pet: Ra.pets.v,\n      scalingUpgradeVisible: () => Ra.unlocks.unlockHardV.isUnlocked,\n      scalingUpgradeText: () => {\n        const triadCount = Ra.unlocks.unlockHardV.effectOrDefault(0);\n        return `You have unlocked ${quantifyInt(\"Triad Study\", triadCount)}.`;\n      }\n    }],\n\n    petStyle() {\n      return {\n        color: this.petWithRemembrance === \"\" ? \"white\" : this.pets.find(pet => pet.pet.name === this.petWithRemembrance).pet.color\n      };\n    },\n\n    runButtonClassObject() {\n      return {\n        \"c-ra-run-button__icon\": true,\n        \"c-ra-run-button__icon--running\": this.isRunning,\n        \"c-celestial-run-button--clickable\": !this.isDoomed,\n        \"o-pelle-disabled-pointer\": this.isDoomed\n      };\n    },\n\n    runDescription() {\n      return GameDatabase.celestials.descriptions[4].effects().replace(/^[0-9A-Z_a-z]/, c => c.toUpperCase()).split(\"\\n\");\n    },\n\n    memoryDescription() {\n      return `Within Ra's Reality, Memory Chunks for Celestial Memories\n        will be generated based on certain resource amounts.`;\n    },\n\n    isDoomed: () => Pelle.isDoomed\n  },\n  methods: {\n    update() {\n      this.memoriesPerChunk = Ra.productionPerMemoryChunk;\n      this.isRaCapped = Ra.totalPetLevel === 100;\n      this.totalLevels = Ra.totalPetLevel;\n      this.showRemembrance = Ra.unlocks.effarigUnlock.canBeApplied;\n      this.hasRemembrance = Ra.remembrance.isUnlocked;\n      this.remembranceReq = Ra.remembrance.requiredLevels;\n      this.remembranceMult = Ra.remembrance.multiplier;\n      this.remembranceNerf = Ra.remembrance.nerf;\n      this.petWithRemembrance = Ra.petWithRemembrance;\n      this.isRunning = Ra.isRunning;\n      this.memoryBoosts = Ra.memoryBoostResources;\n    },\n\n    startRun() {\n      if (this.isDoomed) return;\n      Modal.celestials.show({\n        name: \"Ra's\",\n        number: 4\n      });\n    },\n\n    toggleMode() {\n      Ra.toggleMode();\n    }\n\n  }\n};","map":{"version":3,"sources":["RaTab.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport CelestialQuoteHistory from \"@/components/CelestialQuoteHistory\";\r\nimport RaPet from \"./RaPet\";\r\nimport RaPetRemembranceButton from \"./RaPetRemembranceButton\";\r\n\r\nexport default {\r\n  name: \"RaTab\",\r\n  components: {\r\n    RaPet,\r\n    RaPetRemembranceButton,\r\n    CelestialQuoteHistory\r\n  },\r\n  data() {\r\n    return {\r\n      memoriesPerChunk: 0,\r\n      showReality: false,\r\n      isRaCapped: false,\r\n      totalLevels: 0,\r\n      showRemembrance: false,\r\n      hasRemembrance: false,\r\n      remembranceReq: 0,\r\n      remembranceMult: 1,\r\n      remembranceNerf: 1,\r\n      petWithRemembrance: \"\",\r\n      isRunning: false,\r\n      memoryBoosts: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    laitelaUnlock: () => Laitela.isUnlocked,\r\n    pets: () => [\r\n      {\r\n        pet: Ra.pets.teresa,\r\n        scalingUpgradeVisible: () => Ra.unlocks.chargedInfinityUpgrades.isUnlocked,\r\n        scalingUpgradeText: () => `You can Charge ${quantifyInt(\"Infinity Upgrade\", Ra.totalCharges)}.`,\r\n      },\r\n      {\r\n        pet: Ra.pets.effarig,\r\n        scalingUpgradeVisible: () => AlchemyResources.all.filter(r => r.isUnlocked).length > 0,\r\n        scalingUpgradeText: () => {\r\n          const resources = AlchemyResources.all.filter(r => r.isUnlocked).length;\r\n          return `You have unlocked ${quantifyInt(\"Alchemy Resource\", resources)}.`;\r\n        },\r\n      },\r\n      {\r\n        pet: Ra.pets.enslaved,\r\n        scalingUpgradeVisible: () => Ra.unlocks.improvedStoredTime.isUnlocked,\r\n        scalingUpgradeText: () => `Stored game time\r\n          ${formatX(Ra.unlocks.improvedStoredTime.effects.gameTimeAmplification.effectOrDefault(1), 2)} and real time\r\n          +${formatInt(Ra.unlocks.improvedStoredTime.effects.realTimeCap.effectOrDefault(0) / (1000 * 3600))} hours`,\r\n      },\r\n      {\r\n        pet: Ra.pets.v,\r\n        scalingUpgradeVisible: () => Ra.unlocks.unlockHardV.isUnlocked,\r\n        scalingUpgradeText: () => {\r\n          const triadCount = Ra.unlocks.unlockHardV.effectOrDefault(0);\r\n          return `You have unlocked ${quantifyInt(\"Triad Study\", triadCount)}.`;\r\n        },\r\n      }\r\n    ],\r\n    petStyle() {\r\n      return {\r\n        color: (this.petWithRemembrance === \"\")\r\n          ? \"white\"\r\n          : this.pets.find(pet => pet.pet.name === this.petWithRemembrance).pet.color,\r\n      };\r\n    },\r\n    runButtonClassObject() {\r\n      return {\r\n        \"c-ra-run-button__icon\": true,\r\n        \"c-ra-run-button__icon--running\": this.isRunning,\r\n        \"c-celestial-run-button--clickable\": !this.isDoomed,\r\n        \"o-pelle-disabled-pointer\": this.isDoomed\r\n      };\r\n    },\r\n    runDescription() {\r\n      return GameDatabase.celestials.descriptions[4].effects().replace(/^\\w/u, c => c.toUpperCase()).split(\"\\n\");\r\n    },\r\n    memoryDescription() {\r\n      return `Within Ra's Reality, Memory Chunks for Celestial Memories\r\n        will be generated based on certain resource amounts.`;\r\n    },\r\n    isDoomed: () => Pelle.isDoomed,\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.memoriesPerChunk = Ra.productionPerMemoryChunk;\r\n      this.isRaCapped = Ra.totalPetLevel === 100;\r\n      this.totalLevels = Ra.totalPetLevel;\r\n      this.showRemembrance = Ra.unlocks.effarigUnlock.canBeApplied;\r\n      this.hasRemembrance = Ra.remembrance.isUnlocked;\r\n      this.remembranceReq = Ra.remembrance.requiredLevels;\r\n      this.remembranceMult = Ra.remembrance.multiplier;\r\n      this.remembranceNerf = Ra.remembrance.nerf;\r\n      this.petWithRemembrance = Ra.petWithRemembrance;\r\n      this.isRunning = Ra.isRunning;\r\n      this.memoryBoosts = Ra.memoryBoostResources;\r\n    },\r\n    startRun() {\r\n      if (this.isDoomed) return;\r\n      Modal.celestials.show({ name: \"Ra's\", number: 4 });\r\n    },\r\n    toggleMode() {\r\n      Ra.toggleMode();\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-ra-celestial-tab\">\r\n    <div class=\"c-ra-memory-header\">\r\n      <CelestialQuoteHistory celestial=\"ra\" />\r\n      <div v-if=\"!isRaCapped\">\r\n        Each Memory Chunk generates a base of one Memory per second<span v-if=\"memoriesPerChunk > 1\">,\r\n          which has been increased to {{ quantify(\"Memory\", memoriesPerChunk, 2, 3) }} per second</span>.\r\n        <br>\r\n        Storing real time prevents Memory Chunk generation, but Memories will still be gained normally.\r\n        <span v-if=\"memoriesPerChunk > 1\">\r\n          <br>\r\n          This is being increased due to {{ memoryBoosts }}.\r\n        </span>\r\n      </div>\r\n      <div v-else>\r\n        All Memories have been returned.\r\n      </div>\r\n    </div>\r\n    <div>\r\n      Mouse-over the icons below the bar to see descriptions of upgrades,\r\n      <br>\r\n      and mouse-over <i class=\"fas fa-question-circle\" /> icons for specific resource information.\r\n    </div>\r\n    <div class=\"l-ra-all-pets-container\">\r\n      <RaPet\r\n        v-for=\"(pet, i) in pets\"\r\n        :key=\"i\"\r\n        :pet-config=\"pet\"\r\n      />\r\n    </div>\r\n    <div class=\"l-ra-non-pets\">\r\n      <button class=\"c-ra-run-button\">\r\n        <h2 :class=\"{ 'o-pelle-disabled': isDoomed }\">\r\n          <span v-if=\"isRunning\">You are in </span>\r\n          <span v-else>Start </span>\r\n          Ra's Reality\r\n        </h2>\r\n        <div\r\n          :class=\"runButtonClassObject\"\r\n          @click=\"startRun\"\r\n        >\r\n          <span class=\"c-ra-run-button__icon__sigil fas fa-sun\" />\r\n        </div>\r\n        <span\r\n          v-for=\"(line, lineId) in runDescription\"\r\n          :key=\"lineId + '-ra-run-desc'\"\r\n        >\r\n          {{ line }}\r\n        </span>\r\n        <br>\r\n        <span>\r\n          {{ memoryDescription }}\r\n        </span>\r\n      </button>\r\n      <div\r\n        v-if=\"showRemembrance && !isRaCapped\"\r\n        class=\"c-ra-remembrance-unlock\"\r\n      >\r\n        <h1 :style=\"petStyle\">\r\n          Remembrance\r\n        </h1>\r\n        <span :style=\"petStyle\">\r\n          Whichever Celestial has Remembrance will get {{ formatX(remembranceMult) }} Memory Chunk gain. The other\r\n          Celestials will get {{ formatX(remembranceNerf, 1, 1) }} Memory Chunk gain.\r\n        </span>\r\n        <div\r\n          v-if=\"hasRemembrance\"\r\n          class=\"c-ra-remembrance-unlock-inner\"\r\n        >\r\n          <RaPetRemembranceButton\r\n            v-for=\"(pet, i) in pets\"\r\n            :key=\"i\"\r\n            :pet-config=\"pet\"\r\n          />\r\n        </div>\r\n        <div\r\n          v-else\r\n          class=\"c-ra-remembrance-unlock-inner\"\r\n        >\r\n          Unlocked by getting {{ formatInt(remembranceReq) }} total Celestial Memory levels\r\n          (you need {{ formatInt(remembranceReq - totalLevels) }} more)\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n"],"sourceRoot":"src/components/tabs/celestial-ra"},"metadata":{},"sourceType":"module"}