{"ast":null,"code":"/**\r\n * This slotted component manages a context menu that is accessible both\r\n * by right clicking and by hovering; this is mostly about wrangling timers.\r\n */\nexport default {\n  name: \"HoverMenu\",\n  props: {\n    saveslot: {\n      type: Number,\n      default: 0\n    }\n  },\n  data: () => ({\n    componentID: UIID.next(),\n    contextMenuHideTimer: null,\n    contextMenuShowTimer: null\n  }),\n  computed: {\n    contextMenuIsVisible() {\n      return this.$viewModel.currentContextMenu === this.componentID;\n    },\n\n    listeners() {\n      return Object.assign({}, this.$listeners, {\n        touchstart: () => this.startShowTimer(),\n        mouseenter: () => this.startShowTimer(),\n        mouseleave: () => this.startHideTimer()\n      });\n    }\n\n  },\n  methods: {\n    startShowTimer() {\n      this.stopHideTimer();\n      if (this.contextMenuIsVisible || this.contextMenuShowTimer) return;\n      this.contextMenuShowTimer = setTimeout(() => {\n        this.contextMenuShowTimer = null;\n        this.showContextMenu();\n      }, 250);\n    },\n\n    showContextMenu() {\n      this.stopTimers();\n      this.$viewModel.currentContextMenu = this.componentID;\n    },\n\n    startHideTimer() {\n      this.stopShowTimer();\n      if (!this.contextMenuIsVisible || this.contextMenuHideTimer) return;\n      this.contextMenuHideTimer = setTimeout(() => {\n        this.contextMenuHideTimer = null;\n        this.hideContextMenu();\n      }, 500);\n    },\n\n    hideContextMenu() {\n      this.stopTimers();\n\n      if (this.$viewModel.currentContextMenu === this.componentID) {\n        this.$viewModel.currentContextMenu = null;\n      }\n    },\n\n    toggleContextMenu() {\n      if (this.contextMenuIsVisible) this.hideContextMenu();else this.showContextMenu();\n    },\n\n    stopTimers() {\n      this.stopHideTimer();\n      this.stopShowTimer();\n    },\n\n    stopHideTimer() {\n      if (this.contextMenuHideTimer) {\n        clearTimeout(this.contextMenuHideTimer);\n        this.contextMenuHideTimer = null;\n      }\n    },\n\n    stopShowTimer() {\n      if (this.contextMenuShowTimer) {\n        clearTimeout(this.contextMenuShowTimer);\n        this.contextMenuShowTimer = null;\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["HoverMenu.vue"],"names":[],"mappings":"AACA;AACA;AACA;AACA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,WADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA;AADA,GAFA;AAQA,EAAA,IAAA,EAAA,OAAA;AACA,IAAA,WAAA,EAAA,IAAA,CAAA,IAAA,EADA;AAEA,IAAA,oBAAA,EAAA,IAFA;AAGA,IAAA,oBAAA,EAAA;AAHA,GAAA,CARA;AAaA,EAAA,QAAA,EAAA;AACA,IAAA,oBAAA,GAAA;AACA,aAAA,KAAA,UAAA,CAAA,kBAAA,KAAA,KAAA,WAAA;AACA,KAHA;;AAIA,IAAA,SAAA,GAAA;AACA,aAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAA,UAAA,EAAA;AACA,QAAA,UAAA,EAAA,MAAA,KAAA,cAAA,EADA;AAEA,QAAA,UAAA,EAAA,MAAA,KAAA,cAAA,EAFA;AAGA,QAAA,UAAA,EAAA,MAAA,KAAA,cAAA;AAHA,OAAA,CAAA;AAKA;;AAVA,GAbA;AAyBA,EAAA,OAAA,EAAA;AACA,IAAA,cAAA,GAAA;AACA,WAAA,aAAA;AACA,UAAA,KAAA,oBAAA,IAAA,KAAA,oBAAA,EAAA;AACA,WAAA,oBAAA,GAAA,UAAA,CAAA,MAAA;AACA,aAAA,oBAAA,GAAA,IAAA;AACA,aAAA,eAAA;AACA,OAHA,EAGA,GAHA,CAAA;AAIA,KARA;;AASA,IAAA,eAAA,GAAA;AACA,WAAA,UAAA;AACA,WAAA,UAAA,CAAA,kBAAA,GAAA,KAAA,WAAA;AACA,KAZA;;AAaA,IAAA,cAAA,GAAA;AACA,WAAA,aAAA;AACA,UAAA,CAAA,KAAA,oBAAA,IAAA,KAAA,oBAAA,EAAA;AACA,WAAA,oBAAA,GAAA,UAAA,CAAA,MAAA;AACA,aAAA,oBAAA,GAAA,IAAA;AACA,aAAA,eAAA;AACA,OAHA,EAGA,GAHA,CAAA;AAIA,KApBA;;AAqBA,IAAA,eAAA,GAAA;AACA,WAAA,UAAA;;AACA,UAAA,KAAA,UAAA,CAAA,kBAAA,KAAA,KAAA,WAAA,EAAA;AACA,aAAA,UAAA,CAAA,kBAAA,GAAA,IAAA;AACA;AACA,KA1BA;;AA2BA,IAAA,iBAAA,GAAA;AACA,UAAA,KAAA,oBAAA,EAAA,KAAA,eAAA,GAAA,KACA,KAAA,eAAA;AACA,KA9BA;;AA+BA,IAAA,UAAA,GAAA;AACA,WAAA,aAAA;AACA,WAAA,aAAA;AACA,KAlCA;;AAmCA,IAAA,aAAA,GAAA;AACA,UAAA,KAAA,oBAAA,EAAA;AACA,QAAA,YAAA,CAAA,KAAA,oBAAA,CAAA;AACA,aAAA,oBAAA,GAAA,IAAA;AACA;AACA,KAxCA;;AAyCA,IAAA,aAAA,GAAA;AACA,UAAA,KAAA,oBAAA,EAAA;AACA,QAAA,YAAA,CAAA,KAAA,oBAAA,CAAA;AACA,aAAA,oBAAA,GAAA,IAAA;AACA;AACA;;AA9CA;AAzBA,CAAA","sourcesContent":["<script>\r\n/**\r\n * This slotted component manages a context menu that is accessible both\r\n * by right clicking and by hovering; this is mostly about wrangling timers.\r\n */\r\n\r\nexport default {\r\n  name: \"HoverMenu\",\r\n  props: {\r\n    saveslot: {\r\n      type: Number,\r\n      default: 0\r\n    }\r\n  },\r\n  data: () => ({\r\n    componentID: UIID.next(),\r\n    contextMenuHideTimer: null,\r\n    contextMenuShowTimer: null,\r\n  }),\r\n  computed: {\r\n    contextMenuIsVisible() {\r\n      return this.$viewModel.currentContextMenu === this.componentID;\r\n    },\r\n    listeners() {\r\n      return Object.assign({}, this.$listeners, {\r\n        touchstart: () => this.startShowTimer(),\r\n        mouseenter: () => this.startShowTimer(),\r\n        mouseleave: () => this.startHideTimer(),\r\n      });\r\n    }\r\n  },\r\n  methods: {\r\n    startShowTimer() {\r\n      this.stopHideTimer();\r\n      if (this.contextMenuIsVisible || this.contextMenuShowTimer) return;\r\n      this.contextMenuShowTimer = setTimeout(() => {\r\n        this.contextMenuShowTimer = null;\r\n        this.showContextMenu();\r\n      }, 250);\r\n    },\r\n    showContextMenu() {\r\n      this.stopTimers();\r\n      this.$viewModel.currentContextMenu = this.componentID;\r\n    },\r\n    startHideTimer() {\r\n      this.stopShowTimer();\r\n      if (!this.contextMenuIsVisible || this.contextMenuHideTimer) return;\r\n      this.contextMenuHideTimer = setTimeout(() => {\r\n        this.contextMenuHideTimer = null;\r\n        this.hideContextMenu();\r\n      }, 500);\r\n    },\r\n    hideContextMenu() {\r\n      this.stopTimers();\r\n      if (this.$viewModel.currentContextMenu === this.componentID) {\r\n        this.$viewModel.currentContextMenu = null;\r\n      }\r\n    },\r\n    toggleContextMenu() {\r\n      if (this.contextMenuIsVisible) this.hideContextMenu();\r\n      else this.showContextMenu();\r\n    },\r\n    stopTimers() {\r\n      this.stopHideTimer();\r\n      this.stopShowTimer();\r\n    },\r\n    stopHideTimer() {\r\n      if (this.contextMenuHideTimer) {\r\n        clearTimeout(this.contextMenuHideTimer);\r\n        this.contextMenuHideTimer = null;\r\n      }\r\n    },\r\n    stopShowTimer() {\r\n      if (this.contextMenuShowTimer) {\r\n        clearTimeout(this.contextMenuShowTimer);\r\n        this.contextMenuShowTimer = null;\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    class=\"hover-menu__wrapper\"\r\n    v-on=\"listeners\"\r\n    @contextmenu.prevent=\"toggleContextMenu\"\r\n  >\r\n    <slot\r\n      ref=\"clown\"\r\n      name=\"object\"\r\n    />\r\n    <slot\r\n      v-if=\"contextMenuIsVisible\"\r\n      name=\"menu\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n\r\n<style scoped>\r\n.hover-menu__wrapper {\r\n  position: relative;\r\n}\r\n</style>"],"sourceRoot":"src/components/tabs/time-studies/tt-shop"},"metadata":{},"sourceType":"module"}