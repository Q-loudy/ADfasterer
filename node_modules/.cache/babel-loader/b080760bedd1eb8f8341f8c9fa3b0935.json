{"ast":null,"code":"import { BitUpgradeState } from \"../game-mechanics\";\nimport { GameDatabase } from \"../secret-formula/game-database\";\nimport { Quotes } from \"./quotes\";\nexport const ENSLAVED_UNLOCKS = {\n  FREE_TICKSPEED_SOFTCAP: {\n    id: 0,\n    price: TimeSpan.fromYears(1e35).totalMilliseconds,\n    secondaryRequirement: () => true,\n    description: () => `Increase the softcap to Tickspeed upgrades from Time Dimensions by ${formatInt(1e5)}`\n  },\n  RUN: {\n    id: 1,\n    price: TimeSpan.fromYears(1e40).totalMilliseconds,\n\n    secondaryRequirement() {\n      const hasLevelRequirement = player.records.bestReality.glyphLevel >= 5000;\n      const hasRarityRequirement = strengthToRarity(player.records.bestReality.glyphStrength) >= 100;\n      return hasLevelRequirement && hasRarityRequirement;\n    },\n\n    description() {\n      const hasLevelRequirement = player.records.bestReality.glyphLevel >= 5000;\n      const hasRarityRequirement = strengthToRarity(player.records.bestReality.glyphStrength) >= 100;\n      return `Unlock The Nameless Ones' Reality (requires ${hasLevelRequirement ? \"[✓]\" : \"[✗]\"} a level\n      ${formatInt(5000)} Glyph and ${hasRarityRequirement ? \"[✓]\" : \"[✗]\"} a ${formatRarity(100)} rarity Glyph)`;\n    }\n\n  }\n};\nexport const Enslaved = {\n  displayName: \"The Nameless Ones\",\n  possessiveName: \"The Nameless Ones'\",\n  boostReality: false,\n  BROKEN_CHALLENGES: [2, 3, 4, 5, 7, 8, 10, 11, 12],\n  nextTickDiff: 50,\n  isReleaseTick: false,\n  autoReleaseTick: 0,\n  autoReleaseSpeed: 0,\n  timeCap: 1e300,\n  glyphLevelMin: 5000,\n  currentBlackHoleStoreAmountPerMs: 0,\n  tachyonNerf: 0.3,\n\n  toggleStoreBlackHole() {\n    if (!this.canModifyGameTimeStorage) return;\n    player.celestials.enslaved.isStoring = !player.celestials.enslaved.isStoring;\n    player.celestials.enslaved.isStoringReal = false;\n  },\n\n  toggleStoreReal() {\n    if (!this.canModifyRealTimeStorage && !this.isStoredRealTimeCapped) return;\n    player.celestials.enslaved.isStoringReal = !player.celestials.enslaved.isStoringReal;\n    player.celestials.enslaved.isStoring = false;\n  },\n\n  toggleAutoStoreReal() {\n    if (!this.canModifyRealTimeStorage) return;\n    player.celestials.enslaved.autoStoreReal = !player.celestials.enslaved.autoStoreReal;\n  },\n\n  get canModifyGameTimeStorage() {\n    return Enslaved.isUnlocked && !Pelle.isDoomed && !BlackHoles.arePaused && !EternityChallenge(12).isRunning && !Enslaved.isRunning && !Laitela.isRunning;\n  },\n\n  get canModifyRealTimeStorage() {\n    return Enslaved.isUnlocked && !Pelle.isDoomed;\n  },\n\n  get isStoredRealTimeCapped() {\n    return player.celestials.enslaved.storedReal < this.storedRealTimeCap;\n  },\n\n  // We assume that the situations where you can't modify time storage settings (of either type) are exactly the cases\n  // where they have also been explicitly disabled via other game mechanics. This also reduces UI boilerplate code.\n  // Note that we force time storage when auto-releasing, as not doing so caused a lot of poor usability issues\n  get isStoringGameTime() {\n    return this.canModifyGameTimeStorage && (this.isAutoReleasing || player.celestials.enslaved.isStoring);\n  },\n\n  get isStoringRealTime() {\n    return this.canModifyRealTimeStorage && player.celestials.enslaved.isStoringReal;\n  },\n\n  get storedRealTimeEfficiency() {\n    return 0.7;\n  },\n\n  get storedRealTimeCap() {\n    const addedCap = Ra.unlocks.improvedStoredTime.effects.realTimeCap.effectOrDefault(0);\n    return 1000 * 3600 * 8 + addedCap;\n  },\n\n  get isAutoReleasing() {\n    return player.celestials.enslaved.isAutoReleasing && !BlackHoles.areNegative && !Pelle.isDisabled(\"blackhole\");\n  },\n\n  storeRealTime() {\n    if (Pelle.isDoomed) return;\n    const thisUpdate = Date.now();\n    const diff = Math.max(thisUpdate - player.lastUpdate, 0);\n    const efficiency = this.storedRealTimeEfficiency;\n    const maxTime = this.storedRealTimeCap;\n    player.celestials.enslaved.storedReal += diff * efficiency;\n\n    if (player.celestials.enslaved.storedReal > maxTime) {\n      player.celestials.enslaved.isStoringReal = false;\n      player.celestials.enslaved.storedReal = maxTime;\n    } // More than 24 hours in milliseconds\n\n\n    if (player.celestials.enslaved.storedReal > 24 * 60 * 60 * 1000) SecretAchievement(46).unlock();\n    player.lastUpdate = thisUpdate;\n  },\n\n  autoStoreRealTime(diffMs) {\n    const maxGain = this.storedRealTimeCap - player.celestials.enslaved.storedReal;\n    const used = Math.min(diffMs, Math.max(0, maxGain / this.storedRealTimeEfficiency));\n    player.celestials.enslaved.storedReal += used * this.storedRealTimeEfficiency;\n    player.lastUpdate += used;\n    return diffMs - used;\n  },\n\n  canRelease(auto) {\n    return !Enslaved.isStoringRealTime && !EternityChallenge(12).isRunning && !Laitela.isRunning && !(Enslaved.isRunning && auto) && !Pelle.isDoomed;\n  },\n\n  // \"autoRelease\" should only be true when called with the Ra upgrade\n  useStoredTime(autoRelease) {\n    if (!this.canRelease(autoRelease)) return;\n    const maxInversion = player.requirementChecks.reality.slowestBH <= 1e-300;\n\n    if (ImaginaryUpgrade(24).isLockingMechanics && Ra.isRunning && maxInversion) {\n      if (!autoRelease) ImaginaryUpgrade(24).tryShowWarningModal(\"discharge your Black Hole\");\n      return;\n    }\n\n    player.requirementChecks.reality.slowestBH = 1;\n    let release = player.celestials.enslaved.stored;\n\n    if (Enslaved.isRunning) {\n      release = Enslaved.storedTimeInsideEnslaved(release);\n\n      if (Time.thisReality.totalYears + TimeSpan.fromMilliseconds(release).totalYears > 1) {\n        EnslavedProgress.storedTime.giveProgress();\n      }\n    }\n\n    if (autoRelease) release *= 0.01;\n    this.nextTickDiff = Math.clampMax(release, this.timeCap);\n    this.isReleaseTick = true; // Effective gamespeed from stored time assumes a \"default\" 50 ms update rate for consistency\n\n    const effectiveGamespeed = release / 50;\n    player.celestials.ra.peakGamespeed = Math.max(player.celestials.ra.peakGamespeed, effectiveGamespeed);\n    this.autoReleaseSpeed = release / player.options.updateRate / 5;\n    player.celestials.enslaved.stored *= autoRelease ? 0.99 : 0;\n  },\n\n  has(info) {\n    return player.celestials.enslaved.unlocks.includes(info.id);\n  },\n\n  canBuy(info) {\n    return player.celestials.enslaved.stored >= info.price && info.secondaryRequirement() && !this.has(info);\n  },\n\n  buyUnlock(info) {\n    if (!this.canBuy(info)) return false;\n    if (info.id === ENSLAVED_UNLOCKS.RUN.id) this.quotes.unlockRun.show();\n    player.celestials.enslaved.stored -= info.price;\n    player.celestials.enslaved.unlocks.push(info.id);\n    return true;\n  },\n\n  initializeRun() {\n    clearCelestialRuns();\n    player.celestials.enslaved.run = true;\n    player.celestials.enslaved.hasSecretStudy = false;\n    this.feltEternity = false; // Re-validation needs to be done here because this code gets called after the automator attempts to start.\n    // This is a special case for Nameless because it's one of the only two cases where a command becomes locked\n    // again (the other being Pelle entry, which just force-stops the automator entirely).\n\n    AutomatorData.recalculateErrors();\n\n    if (AutomatorBackend.state.mode === AUTOMATOR_MODE.RUN && AutomatorData.currentErrors().length) {\n      AutomatorBackend.stop();\n      GameUI.notify.error(\"This Reality forbids Black Holes! (Automator stopped)\");\n    }\n\n    this.quotes.startRun.show();\n  },\n\n  get isRunning() {\n    return player.celestials.enslaved.run;\n  },\n\n  completeRun() {\n    player.celestials.enslaved.completed = true;\n    this.quotes.completeReality.show();\n  },\n\n  get isCompleted() {\n    return player.celestials.enslaved.completed;\n  },\n\n  get canTickHintTimer() {\n    return !EnslavedProgress.hintsUnlocked.hasProgress && Enslaved.has(ENSLAVED_UNLOCKS.RUN) && !Enslaved.isCompleted;\n  },\n\n  get isUnlocked() {\n    return EffarigUnlock.eternity.isUnlocked;\n  },\n\n  get realityBoostRatio() {\n    return Math.max(1, Math.floor(player.celestials.enslaved.storedReal / Math.max(1000, Time.thisRealityRealTime.totalMilliseconds)));\n  },\n\n  get canAmplify() {\n    return this.realityBoostRatio > 1 && !Pelle.isDoomed && !isInCelestialReality();\n  },\n\n  storedTimeInsideEnslaved(stored) {\n    if (stored <= 1e3) return stored;\n    return Math.pow(10, Math.pow(Math.log10(stored / 1e3), 0.55)) * 1e3;\n  },\n\n  feelEternity() {\n    if (this.feltEternity) {\n      Modal.message.show(`You have already exposed this crack in the Reality. Time in this Eternity is being multiplied\n        by your Eternity count, up to a maximum of ${formatX(1e66)}.`, {\n        closeEvent: GAME_EVENT.REALITY_RESET_AFTER\n      }, 1);\n    } else {\n      EnslavedProgress.feelEternity.giveProgress();\n      this.feltEternity = true;\n      Modal.message.show(`Time in this Eternity will be multiplied by your Eternity count,\n        up to a maximum of ${formatX(1e66)}.`, {\n        closeEvent: GAME_EVENT.REALITY_RESET_AFTER\n      }, 1);\n    }\n  },\n\n  get feltEternity() {\n    return player.celestials.enslaved.feltEternity;\n  },\n\n  set feltEternity(value) {\n    player.celestials.enslaved.feltEternity = value;\n  },\n\n  get nextHintCost() {\n    return TimeSpan.fromYears(1e40 * Math.pow(3, this.hintCostIncreases)).totalMilliseconds;\n  },\n\n  get hintCostIncreases() {\n    const hintTime = player.celestials.enslaved.zeroHintTime - Date.now();\n    return Math.clampMin(hintTime / TimeSpan.fromDays(1).totalMilliseconds, 0);\n  },\n\n  spendTimeForHint() {\n    if (player.celestials.enslaved.stored < this.nextHintCost) return false;\n    player.celestials.enslaved.stored -= this.nextHintCost;\n\n    if (Enslaved.hintCostIncreases === 0) {\n      player.celestials.enslaved.zeroHintTime = Date.now() + TimeSpan.fromDays(1).totalMilliseconds;\n    } else {\n      player.celestials.enslaved.zeroHintTime += TimeSpan.fromDays(1).totalMilliseconds;\n    }\n\n    return true;\n  },\n\n  quotes: Quotes.enslaved,\n  // Unicode f0c1.\n  symbol: \"\\uf0c1\"\n};\n\nclass EnslavedProgressState extends BitUpgradeState {\n  get bits() {\n    return player.celestials.enslaved.hintBits;\n  }\n\n  set bits(value) {\n    player.celestials.enslaved.hintBits = value;\n  }\n\n  get hasProgress() {\n    return Boolean(player.celestials.enslaved.progressBits & 1 << this.id);\n  }\n\n  get hasHint() {\n    return this.hasProgress || this.isUnlocked;\n  }\n\n  get hintInfo() {\n    return this.config.hint;\n  }\n\n  get completedInfo() {\n    return typeof this.config.condition === \"function\" ? this.config.condition() : this.config.condition;\n  }\n\n  giveProgress() {\n    // Bump the last hint time appropriately if the player found the hint\n    if (this.hasHint && !this.hasProgress) {\n      player.celestials.enslaved.zeroHintTime -= Math.log(2) / Math.log(3) * TimeSpan.fromDays(1).totalMilliseconds;\n      GameUI.notify.success(\"You found a crack in The Nameless Ones' Reality!\", 10000);\n    }\n\n    player.celestials.enslaved.progressBits |= 1 << this.id;\n  }\n\n}\n\nexport const EnslavedProgress = mapGameDataToObject(GameDatabase.celestials.enslaved.progress, config => new EnslavedProgressState(config));\nexport const Tesseracts = {\n  get bought() {\n    return player.celestials.enslaved.tesseracts;\n  },\n\n  get extra() {\n    return this.bought * (SingularityMilestone.tesseractMultFromSingularities.effectOrDefault(1) - 1);\n  },\n\n  get effectiveCount() {\n    return this.bought + this.extra;\n  },\n\n  buyTesseract() {\n    if (!this.canBuyTesseract) return;\n    if (GameEnd.creditsEverClosed) return;\n    player.celestials.enslaved.tesseracts++;\n  },\n\n  // This used to be a somewhat complicated function which spaced costs out super-exponentially, but the decision to\n  // hardcap all resources (as feasible) to e9e15 meant that in practice only the first 10 or so could actually be\n  // obtained. Changing the function to a hardcoded array is better for understanding the code since it's small.\n  // Note that costs go a bit past e9e15 because while AM is capped at e9e15, most other resources (including IP)\n  // aren't and can go a tiny bit past it.\n  // The formula is a hardcoded 2, 4, 6 followed by successive multiplication by 2x, 4x, 6x, and so on.\n  BASE_COSTS: [2, 4, 6, 12, 48, 288, 2304, 23040, 276480, 3870720, 61931520, 1114767360],\n\n  costs(index) {\n    // In practice this should never happen, but have it just to be safe\n    if (index >= this.BASE_COSTS.length) return Decimal.pow10(Number.MAX_VALUE);\n    return Decimal.pow10(1e7 * this.BASE_COSTS[Math.floor(index)]);\n  },\n\n  get nextCost() {\n    return this.costs(this.bought);\n  },\n\n  get canBuyTesseract() {\n    return Enslaved.isCompleted && Currency.infinityPoints.gte(Tesseracts.nextCost);\n  },\n\n  capIncrease(count = this.bought) {\n    const totalCount = count * SingularityMilestone.tesseractMultFromSingularities.effectOrDefault(1);\n    const base = totalCount < 1 ? 0 : 250e3 * Math.pow(2, totalCount);\n    return base * (AlchemyResource.boundless.effectValue + 1);\n  },\n\n  get nextTesseractIncrease() {\n    return this.capIncrease(this.bought + 1) - this.capIncrease(this.bought);\n  }\n\n};\nEventHub.logic.on(GAME_EVENT.TAB_CHANGED, () => {\n  if (Tab.celestials.enslaved.isOpen) Enslaved.quotes.initial.show();\n});","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/celestials/enslaved.js"],"names":["BitUpgradeState","GameDatabase","Quotes","ENSLAVED_UNLOCKS","FREE_TICKSPEED_SOFTCAP","id","price","TimeSpan","fromYears","totalMilliseconds","secondaryRequirement","description","formatInt","RUN","hasLevelRequirement","player","records","bestReality","glyphLevel","hasRarityRequirement","strengthToRarity","glyphStrength","formatRarity","Enslaved","displayName","possessiveName","boostReality","BROKEN_CHALLENGES","nextTickDiff","isReleaseTick","autoReleaseTick","autoReleaseSpeed","timeCap","glyphLevelMin","currentBlackHoleStoreAmountPerMs","tachyonNerf","toggleStoreBlackHole","canModifyGameTimeStorage","celestials","enslaved","isStoring","isStoringReal","toggleStoreReal","canModifyRealTimeStorage","isStoredRealTimeCapped","toggleAutoStoreReal","autoStoreReal","isUnlocked","Pelle","isDoomed","BlackHoles","arePaused","EternityChallenge","isRunning","Laitela","storedReal","storedRealTimeCap","isStoringGameTime","isAutoReleasing","isStoringRealTime","storedRealTimeEfficiency","addedCap","Ra","unlocks","improvedStoredTime","effects","realTimeCap","effectOrDefault","areNegative","isDisabled","storeRealTime","thisUpdate","Date","now","diff","Math","max","lastUpdate","efficiency","maxTime","SecretAchievement","unlock","autoStoreRealTime","diffMs","maxGain","used","min","canRelease","auto","useStoredTime","autoRelease","maxInversion","requirementChecks","reality","slowestBH","ImaginaryUpgrade","isLockingMechanics","tryShowWarningModal","release","stored","storedTimeInsideEnslaved","Time","thisReality","totalYears","fromMilliseconds","EnslavedProgress","storedTime","giveProgress","clampMax","effectiveGamespeed","ra","peakGamespeed","options","updateRate","has","info","includes","canBuy","buyUnlock","quotes","unlockRun","show","push","initializeRun","clearCelestialRuns","run","hasSecretStudy","feltEternity","AutomatorData","recalculateErrors","AutomatorBackend","state","mode","AUTOMATOR_MODE","currentErrors","length","stop","GameUI","notify","error","startRun","completeRun","completed","completeReality","isCompleted","canTickHintTimer","hintsUnlocked","hasProgress","EffarigUnlock","eternity","realityBoostRatio","floor","thisRealityRealTime","canAmplify","isInCelestialReality","pow","log10","feelEternity","Modal","message","formatX","closeEvent","GAME_EVENT","REALITY_RESET_AFTER","value","nextHintCost","hintCostIncreases","hintTime","zeroHintTime","clampMin","fromDays","spendTimeForHint","symbol","EnslavedProgressState","bits","hintBits","Boolean","progressBits","hasHint","hintInfo","config","hint","completedInfo","condition","log","success","mapGameDataToObject","progress","Tesseracts","bought","tesseracts","extra","SingularityMilestone","tesseractMultFromSingularities","effectiveCount","buyTesseract","canBuyTesseract","GameEnd","creditsEverClosed","BASE_COSTS","costs","index","Decimal","pow10","Number","MAX_VALUE","nextCost","Currency","infinityPoints","gte","capIncrease","count","totalCount","base","AlchemyResource","boundless","effectValue","nextTesseractIncrease","EventHub","logic","on","TAB_CHANGED","Tab","isOpen","initial"],"mappings":"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","sourcesContent":["import { BitUpgradeState } from \"../game-mechanics\";\r\nimport { GameDatabase } from \"../secret-formula/game-database\";\r\n\r\nimport { Quotes } from \"./quotes\";\r\n\r\nexport const ENSLAVED_UNLOCKS = {\r\n  FREE_TICKSPEED_SOFTCAP: {\r\n    id: 0,\r\n    price: TimeSpan.fromYears(1e35).totalMilliseconds,\r\n    secondaryRequirement: () => true,\r\n    description: () => `Increase the softcap to Tickspeed upgrades from Time Dimensions by ${formatInt(1e5)}`,\r\n  },\r\n  RUN: {\r\n    id: 1,\r\n    price: TimeSpan.fromYears(1e40).totalMilliseconds,\r\n    secondaryRequirement() {\r\n      const hasLevelRequirement = player.records.bestReality.glyphLevel >= 5000;\r\n      const hasRarityRequirement = strengthToRarity(player.records.bestReality.glyphStrength) >= 100;\r\n      return hasLevelRequirement && hasRarityRequirement;\r\n    },\r\n    description() {\r\n      const hasLevelRequirement = player.records.bestReality.glyphLevel >= 5000;\r\n      const hasRarityRequirement = strengthToRarity(player.records.bestReality.glyphStrength) >= 100;\r\n      return `Unlock The Nameless Ones' Reality (requires ${hasLevelRequirement ? \"[✓]\" : \"[✗]\"} a level\r\n      ${formatInt(5000)} Glyph and ${hasRarityRequirement ? \"[✓]\" : \"[✗]\"} a ${formatRarity(100)} rarity Glyph)`;\r\n    }\r\n  }\r\n};\r\n\r\nexport const Enslaved = {\r\n  displayName: \"The Nameless Ones\",\r\n  possessiveName: \"The Nameless Ones'\",\r\n  boostReality: false,\r\n  BROKEN_CHALLENGES: [2, 3, 4, 5, 7, 8, 10, 11, 12],\r\n  nextTickDiff: 50,\r\n  isReleaseTick: false,\r\n  autoReleaseTick: 0,\r\n  autoReleaseSpeed: 0,\r\n  timeCap: 1e300,\r\n  glyphLevelMin: 5000,\r\n  currentBlackHoleStoreAmountPerMs: 0,\r\n  tachyonNerf: 0.3,\r\n  toggleStoreBlackHole() {\r\n    if (!this.canModifyGameTimeStorage) return;\r\n    player.celestials.enslaved.isStoring = !player.celestials.enslaved.isStoring;\r\n    player.celestials.enslaved.isStoringReal = false;\r\n  },\r\n  toggleStoreReal() {\r\n    if (!this.canModifyRealTimeStorage && !this.isStoredRealTimeCapped) return;\r\n    player.celestials.enslaved.isStoringReal = !player.celestials.enslaved.isStoringReal;\r\n    player.celestials.enslaved.isStoring = false;\r\n  },\r\n  toggleAutoStoreReal() {\r\n    if (!this.canModifyRealTimeStorage) return;\r\n    player.celestials.enslaved.autoStoreReal = !player.celestials.enslaved.autoStoreReal;\r\n  },\r\n  get canModifyGameTimeStorage() {\r\n    return Enslaved.isUnlocked && !Pelle.isDoomed && !BlackHoles.arePaused && !EternityChallenge(12).isRunning &&\r\n      !Enslaved.isRunning && !Laitela.isRunning;\r\n  },\r\n  get canModifyRealTimeStorage() {\r\n    return Enslaved.isUnlocked && !Pelle.isDoomed;\r\n  },\r\n  get isStoredRealTimeCapped() {\r\n    return player.celestials.enslaved.storedReal < this.storedRealTimeCap;\r\n  },\r\n  // We assume that the situations where you can't modify time storage settings (of either type) are exactly the cases\r\n  // where they have also been explicitly disabled via other game mechanics. This also reduces UI boilerplate code.\r\n  // Note that we force time storage when auto-releasing, as not doing so caused a lot of poor usability issues\r\n  get isStoringGameTime() {\r\n    return this.canModifyGameTimeStorage && (this.isAutoReleasing || player.celestials.enslaved.isStoring);\r\n  },\r\n  get isStoringRealTime() {\r\n    return this.canModifyRealTimeStorage && player.celestials.enslaved.isStoringReal;\r\n  },\r\n  get storedRealTimeEfficiency() {\r\n    return 0.7;\r\n  },\r\n  get storedRealTimeCap() {\r\n    const addedCap = Ra.unlocks.improvedStoredTime.effects.realTimeCap.effectOrDefault(0);\r\n    return 1000 * 3600 * 8 + addedCap;\r\n  },\r\n  get isAutoReleasing() {\r\n    return player.celestials.enslaved.isAutoReleasing && !BlackHoles.areNegative && !Pelle.isDisabled(\"blackhole\");\r\n  },\r\n  storeRealTime() {\r\n    if (Pelle.isDoomed) return;\r\n    const thisUpdate = Date.now();\r\n    const diff = Math.max(thisUpdate - player.lastUpdate, 0);\r\n    const efficiency = this.storedRealTimeEfficiency;\r\n    const maxTime = this.storedRealTimeCap;\r\n    player.celestials.enslaved.storedReal += diff * efficiency;\r\n    if (player.celestials.enslaved.storedReal > maxTime) {\r\n      player.celestials.enslaved.isStoringReal = false;\r\n      player.celestials.enslaved.storedReal = maxTime;\r\n    }\r\n    // More than 24 hours in milliseconds\r\n    if (player.celestials.enslaved.storedReal > (24 * 60 * 60 * 1000)) SecretAchievement(46).unlock();\r\n    player.lastUpdate = thisUpdate;\r\n  },\r\n  autoStoreRealTime(diffMs) {\r\n    const maxGain = this.storedRealTimeCap - player.celestials.enslaved.storedReal;\r\n    const used = Math.min(diffMs, Math.max(0, maxGain / this.storedRealTimeEfficiency));\r\n    player.celestials.enslaved.storedReal += used * this.storedRealTimeEfficiency;\r\n    player.lastUpdate += used;\r\n    return diffMs - used;\r\n  },\r\n  canRelease(auto) {\r\n    return !Enslaved.isStoringRealTime && !EternityChallenge(12).isRunning && !Laitela.isRunning &&\r\n      !(Enslaved.isRunning && auto) && !Pelle.isDoomed;\r\n  },\r\n  // \"autoRelease\" should only be true when called with the Ra upgrade\r\n  useStoredTime(autoRelease) {\r\n    if (!this.canRelease(autoRelease)) return;\r\n    const maxInversion = player.requirementChecks.reality.slowestBH <= 1e-300;\r\n    if (ImaginaryUpgrade(24).isLockingMechanics && Ra.isRunning && maxInversion) {\r\n      if (!autoRelease) ImaginaryUpgrade(24).tryShowWarningModal(\"discharge your Black Hole\");\r\n      return;\r\n    }\r\n    player.requirementChecks.reality.slowestBH = 1;\r\n    let release = player.celestials.enslaved.stored;\r\n    if (Enslaved.isRunning) {\r\n      release = Enslaved.storedTimeInsideEnslaved(release);\r\n      if (Time.thisReality.totalYears + TimeSpan.fromMilliseconds(release).totalYears > 1) {\r\n        EnslavedProgress.storedTime.giveProgress();\r\n      }\r\n    }\r\n    if (autoRelease) release *= 0.01;\r\n    this.nextTickDiff = Math.clampMax(release, this.timeCap);\r\n    this.isReleaseTick = true;\r\n    // Effective gamespeed from stored time assumes a \"default\" 50 ms update rate for consistency\r\n    const effectiveGamespeed = release / 50;\r\n    player.celestials.ra.peakGamespeed = Math.max(player.celestials.ra.peakGamespeed, effectiveGamespeed);\r\n    this.autoReleaseSpeed = release / player.options.updateRate / 5;\r\n    player.celestials.enslaved.stored *= autoRelease ? 0.99 : 0;\r\n  },\r\n  has(info) {\r\n    return player.celestials.enslaved.unlocks.includes(info.id);\r\n  },\r\n  canBuy(info) {\r\n    return player.celestials.enslaved.stored >= info.price && info.secondaryRequirement() && !this.has(info);\r\n  },\r\n  buyUnlock(info) {\r\n    if (!this.canBuy(info)) return false;\r\n    if (info.id === ENSLAVED_UNLOCKS.RUN.id) this.quotes.unlockRun.show();\r\n    player.celestials.enslaved.stored -= info.price;\r\n    player.celestials.enslaved.unlocks.push(info.id);\r\n    return true;\r\n  },\r\n  initializeRun() {\r\n    clearCelestialRuns();\r\n    player.celestials.enslaved.run = true;\r\n    player.celestials.enslaved.hasSecretStudy = false;\r\n    this.feltEternity = false;\r\n\r\n    // Re-validation needs to be done here because this code gets called after the automator attempts to start.\r\n    // This is a special case for Nameless because it's one of the only two cases where a command becomes locked\r\n    // again (the other being Pelle entry, which just force-stops the automator entirely).\r\n    AutomatorData.recalculateErrors();\r\n    if (AutomatorBackend.state.mode === AUTOMATOR_MODE.RUN && AutomatorData.currentErrors().length) {\r\n      AutomatorBackend.stop();\r\n      GameUI.notify.error(\"This Reality forbids Black Holes! (Automator stopped)\");\r\n    }\r\n\r\n    this.quotes.startRun.show();\r\n  },\r\n  get isRunning() {\r\n    return player.celestials.enslaved.run;\r\n  },\r\n  completeRun() {\r\n    player.celestials.enslaved.completed = true;\r\n    this.quotes.completeReality.show();\r\n  },\r\n  get isCompleted() {\r\n    return player.celestials.enslaved.completed;\r\n  },\r\n  get canTickHintTimer() {\r\n    return !EnslavedProgress.hintsUnlocked.hasProgress && Enslaved.has(ENSLAVED_UNLOCKS.RUN) && !Enslaved.isCompleted;\r\n  },\r\n  get isUnlocked() {\r\n    return EffarigUnlock.eternity.isUnlocked;\r\n  },\r\n  get realityBoostRatio() {\r\n    return Math.max(1, Math.floor(player.celestials.enslaved.storedReal /\r\n      Math.max(1000, Time.thisRealityRealTime.totalMilliseconds)));\r\n  },\r\n  get canAmplify() {\r\n    return this.realityBoostRatio > 1 && !Pelle.isDoomed && !isInCelestialReality();\r\n  },\r\n  storedTimeInsideEnslaved(stored) {\r\n    if (stored <= 1e3) return stored;\r\n    return Math.pow(10, Math.pow(Math.log10(stored / 1e3), 0.55)) * 1e3;\r\n  },\r\n  feelEternity() {\r\n    if (this.feltEternity) {\r\n      Modal.message.show(`You have already exposed this crack in the Reality. Time in this Eternity is being multiplied\r\n        by your Eternity count, up to a maximum of ${formatX(1e66)}.`,\r\n      { closeEvent: GAME_EVENT.REALITY_RESET_AFTER }, 1);\r\n    } else {\r\n      EnslavedProgress.feelEternity.giveProgress();\r\n      this.feltEternity = true;\r\n      Modal.message.show(`Time in this Eternity will be multiplied by your Eternity count,\r\n        up to a maximum of ${formatX(1e66)}.`, { closeEvent: GAME_EVENT.REALITY_RESET_AFTER }, 1);\r\n    }\r\n  },\r\n  get feltEternity() {\r\n    return player.celestials.enslaved.feltEternity;\r\n  },\r\n  set feltEternity(value) {\r\n    player.celestials.enslaved.feltEternity = value;\r\n  },\r\n  get nextHintCost() {\r\n    return TimeSpan.fromYears(1e40 * Math.pow(3, this.hintCostIncreases)).totalMilliseconds;\r\n  },\r\n  get hintCostIncreases() {\r\n    const hintTime = player.celestials.enslaved.zeroHintTime - Date.now();\r\n    return Math.clampMin(hintTime / TimeSpan.fromDays(1).totalMilliseconds, 0);\r\n  },\r\n  spendTimeForHint() {\r\n    if (player.celestials.enslaved.stored < this.nextHintCost) return false;\r\n    player.celestials.enslaved.stored -= this.nextHintCost;\r\n    if (Enslaved.hintCostIncreases === 0) {\r\n      player.celestials.enslaved.zeroHintTime = Date.now() + TimeSpan.fromDays(1).totalMilliseconds;\r\n    } else {\r\n      player.celestials.enslaved.zeroHintTime += TimeSpan.fromDays(1).totalMilliseconds;\r\n    }\r\n    return true;\r\n  },\r\n  quotes: Quotes.enslaved,\r\n  // Unicode f0c1.\r\n  symbol: \"\\uf0c1\"\r\n};\r\n\r\nclass EnslavedProgressState extends BitUpgradeState {\r\n  get bits() { return player.celestials.enslaved.hintBits; }\r\n  set bits(value) { player.celestials.enslaved.hintBits = value; }\r\n\r\n  get hasProgress() {\r\n    return Boolean(player.celestials.enslaved.progressBits & (1 << this.id));\r\n  }\r\n\r\n  get hasHint() {\r\n    return this.hasProgress || this.isUnlocked;\r\n  }\r\n\r\n  get hintInfo() {\r\n    return this.config.hint;\r\n  }\r\n\r\n  get completedInfo() {\r\n    return typeof this.config.condition === \"function\" ? this.config.condition() : this.config.condition;\r\n  }\r\n\r\n  giveProgress() {\r\n    // Bump the last hint time appropriately if the player found the hint\r\n    if (this.hasHint && !this.hasProgress) {\r\n      player.celestials.enslaved.zeroHintTime -= Math.log(2) / Math.log(3) * TimeSpan.fromDays(1).totalMilliseconds;\r\n      GameUI.notify.success(\"You found a crack in The Nameless Ones' Reality!\", 10000);\r\n    }\r\n    player.celestials.enslaved.progressBits |= (1 << this.id);\r\n  }\r\n}\r\n\r\nexport const EnslavedProgress = mapGameDataToObject(\r\n  GameDatabase.celestials.enslaved.progress,\r\n  config => new EnslavedProgressState(config)\r\n);\r\n\r\nexport const Tesseracts = {\r\n  get bought() {\r\n    return player.celestials.enslaved.tesseracts;\r\n  },\r\n\r\n  get extra() {\r\n    return this.bought * (SingularityMilestone.tesseractMultFromSingularities.effectOrDefault(1) - 1);\r\n  },\r\n\r\n  get effectiveCount() {\r\n    return this.bought + this.extra;\r\n  },\r\n\r\n  buyTesseract() {\r\n    if (!this.canBuyTesseract) return;\r\n    if (GameEnd.creditsEverClosed) return;\r\n    player.celestials.enslaved.tesseracts++;\r\n  },\r\n\r\n  // This used to be a somewhat complicated function which spaced costs out super-exponentially, but the decision to\r\n  // hardcap all resources (as feasible) to e9e15 meant that in practice only the first 10 or so could actually be\r\n  // obtained. Changing the function to a hardcoded array is better for understanding the code since it's small.\r\n  // Note that costs go a bit past e9e15 because while AM is capped at e9e15, most other resources (including IP)\r\n  // aren't and can go a tiny bit past it.\r\n  // The formula is a hardcoded 2, 4, 6 followed by successive multiplication by 2x, 4x, 6x, and so on.\r\n  BASE_COSTS: [2, 4, 6, 12, 48, 288, 2304, 23040, 276480, 3870720, 61931520, 1114767360],\r\n  costs(index) {\r\n    // In practice this should never happen, but have it just to be safe\r\n    if (index >= this.BASE_COSTS.length) return Decimal.pow10(Number.MAX_VALUE);\r\n    return Decimal.pow10(1e7 * this.BASE_COSTS[Math.floor(index)]);\r\n  },\r\n\r\n  get nextCost() {\r\n    return this.costs(this.bought);\r\n  },\r\n\r\n  get canBuyTesseract() {\r\n    return Enslaved.isCompleted && Currency.infinityPoints.gte(Tesseracts.nextCost);\r\n  },\r\n\r\n  capIncrease(count = this.bought) {\r\n    const totalCount = count * SingularityMilestone.tesseractMultFromSingularities.effectOrDefault(1);\r\n    const base = totalCount < 1 ? 0 : 250e3 * Math.pow(2, totalCount);\r\n    return base * (AlchemyResource.boundless.effectValue + 1);\r\n  },\r\n\r\n  get nextTesseractIncrease() {\r\n    return this.capIncrease(this.bought + 1) - this.capIncrease(this.bought);\r\n  },\r\n};\r\n\r\nEventHub.logic.on(GAME_EVENT.TAB_CHANGED, () => {\r\n  if (Tab.celestials.enslaved.isOpen) Enslaved.quotes.initial.show();\r\n});\r\n"]},"metadata":{},"sourceType":"module"}