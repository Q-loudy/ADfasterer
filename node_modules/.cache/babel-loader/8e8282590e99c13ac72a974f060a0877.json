{"ast":null,"code":"import { RebuyableMechanicState, SetPurchasableMechanicState } from \"./game-mechanics\";\nimport { SpeedrunMilestones } from \"./speedrun\";\nexport class BreakInfinityUpgradeState extends SetPurchasableMechanicState {\n  get currency() {\n    return Currency.infinityPoints;\n  }\n\n  get set() {\n    return player.infinityUpgrades;\n  }\n\n  onPurchased() {\n    if (this.id === \"postGalaxy\") {\n      SpeedrunMilestones(7).tryComplete();\n      PelleStrikes.powerGalaxies.trigger();\n    }\n  }\n\n}\n\nclass RebuyableBreakInfinityUpgradeState extends RebuyableMechanicState {\n  get currency() {\n    return Currency.infinityPoints;\n  }\n\n  get boughtAmount() {\n    return player.infinityRebuyables[this.id];\n  }\n\n  set boughtAmount(value) {\n    player.infinityRebuyables[this.id] = value;\n  }\n\n  get isCapped() {\n    return this.boughtAmount === this.config.maxUpgrades;\n  }\n\n  onPurchased() {\n    var _this$config$onPurcha, _this$config;\n\n    (_this$config$onPurcha = (_this$config = this.config).onPurchased) === null || _this$config$onPurcha === void 0 ? void 0 : _this$config$onPurcha.call(_this$config);\n  }\n\n}\n\nexport const BreakInfinityUpgrade = mapGameDataToObject(GameDatabase.infinity.breakUpgrades, config => config.rebuyable ? new RebuyableBreakInfinityUpgradeState(config) : new BreakInfinityUpgradeState(config));","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/break-infinity-upgrades.js"],"names":["RebuyableMechanicState","SetPurchasableMechanicState","SpeedrunMilestones","BreakInfinityUpgradeState","currency","Currency","infinityPoints","set","player","infinityUpgrades","onPurchased","id","tryComplete","PelleStrikes","powerGalaxies","trigger","RebuyableBreakInfinityUpgradeState","boughtAmount","infinityRebuyables","value","isCapped","config","maxUpgrades","BreakInfinityUpgrade","mapGameDataToObject","GameDatabase","infinity","breakUpgrades","rebuyable"],"mappings":"AAAA,SAASA,sBAAT,EAAiCC,2BAAjC,QAAoE,kBAApE;AACA,SAASC,kBAAT,QAAmC,YAAnC;AAEA,OAAO,MAAMC,yBAAN,SAAwCF,2BAAxC,CAAoE;AAC7D,MAARG,QAAQ,GAAG;AACb,WAAOC,QAAQ,CAACC,cAAhB;AACD;;AAEM,MAAHC,GAAG,GAAG;AACR,WAAOC,MAAM,CAACC,gBAAd;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,QAAI,KAAKC,EAAL,KAAY,YAAhB,EAA8B;AAC5BT,MAAAA,kBAAkB,CAAC,CAAD,CAAlB,CAAsBU,WAAtB;AACAC,MAAAA,YAAY,CAACC,aAAb,CAA2BC,OAA3B;AACD;AACF;;AAdwE;;AAiB3E,MAAMC,kCAAN,SAAiDhB,sBAAjD,CAAwE;AAC1D,MAARI,QAAQ,GAAG;AACb,WAAOC,QAAQ,CAACC,cAAhB;AACD;;AAEe,MAAZW,YAAY,GAAG;AACjB,WAAOT,MAAM,CAACU,kBAAP,CAA0B,KAAKP,EAA/B,CAAP;AACD;;AAEe,MAAZM,YAAY,CAACE,KAAD,EAAQ;AACtBX,IAAAA,MAAM,CAACU,kBAAP,CAA0B,KAAKP,EAA/B,IAAqCQ,KAArC;AACD;;AAEW,MAARC,QAAQ,GAAG;AACb,WAAO,KAAKH,YAAL,KAAsB,KAAKI,MAAL,CAAYC,WAAzC;AACD;;AAEDZ,EAAAA,WAAW,GAAG;AAAA;;AACZ,kDAAKW,MAAL,EAAYX,WAAZ;AACD;;AAnBqE;;AAsBxE,OAAO,MAAMa,oBAAoB,GAAGC,mBAAmB,CACrDC,YAAY,CAACC,QAAb,CAAsBC,aAD+B,EAErDN,MAAM,IAAKA,MAAM,CAACO,SAAP,GACP,IAAIZ,kCAAJ,CAAuCK,MAAvC,CADO,GAEP,IAAIlB,yBAAJ,CAA8BkB,MAA9B,CAJiD,CAAhD","sourcesContent":["import { RebuyableMechanicState, SetPurchasableMechanicState } from \"./game-mechanics\";\r\nimport { SpeedrunMilestones } from \"./speedrun\";\r\n\r\nexport class BreakInfinityUpgradeState extends SetPurchasableMechanicState {\r\n  get currency() {\r\n    return Currency.infinityPoints;\r\n  }\r\n\r\n  get set() {\r\n    return player.infinityUpgrades;\r\n  }\r\n\r\n  onPurchased() {\r\n    if (this.id === \"postGalaxy\") {\r\n      SpeedrunMilestones(7).tryComplete();\r\n      PelleStrikes.powerGalaxies.trigger();\r\n    }\r\n  }\r\n}\r\n\r\nclass RebuyableBreakInfinityUpgradeState extends RebuyableMechanicState {\r\n  get currency() {\r\n    return Currency.infinityPoints;\r\n  }\r\n\r\n  get boughtAmount() {\r\n    return player.infinityRebuyables[this.id];\r\n  }\r\n\r\n  set boughtAmount(value) {\r\n    player.infinityRebuyables[this.id] = value;\r\n  }\r\n\r\n  get isCapped() {\r\n    return this.boughtAmount === this.config.maxUpgrades;\r\n  }\r\n\r\n  onPurchased() {\r\n    this.config.onPurchased?.();\r\n  }\r\n}\r\n\r\nexport const BreakInfinityUpgrade = mapGameDataToObject(\r\n  GameDatabase.infinity.breakUpgrades,\r\n  config => (config.rebuyable\r\n    ? new RebuyableBreakInfinityUpgradeState(config)\r\n    : new BreakInfinityUpgradeState(config))\r\n);\r\n"]},"metadata":{},"sourceType":"module"}