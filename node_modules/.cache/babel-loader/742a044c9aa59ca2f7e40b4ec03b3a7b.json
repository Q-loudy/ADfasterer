{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport { AlchemyCircleLayout } from \"./alchemy-circle-layout\";\nimport AlchemyCircleNode from \"./AlchemyCircleNode\";\nimport AlchemyResourceInfo from \"./AlchemyResourceInfo\";\nimport PrimaryButton from \"@/components/PrimaryButton\";\nexport default {\n  name: \"AlchemyTab\",\n  components: {\n    PrimaryButton,\n    AlchemyCircleNode,\n    AlchemyResourceInfo\n  },\n\n  data() {\n    return {\n      infoResourceId: 0,\n      focusedResourceId: -1,\n      reactionsAvailable: false,\n      realityCreationVisible: false,\n      animationTimer: 0,\n      alchemyCap: 0,\n      capFactor: 0,\n      createdRealityGlyph: false,\n      allReactionsDisabled: false,\n      // Used to force a re-render of reaction lines when reality glyphs are created\n      realityAmount: 0\n    };\n  },\n\n  computed: {\n    resources: () => AlchemyResources.all,\n    layout: () => new AlchemyCircleLayout(),\n    sizeMultiplier: () => 5,\n\n    infoResource() {\n      return this.resources[this.infoResourceId];\n    },\n\n    circleStyle() {\n      const size = this.layout.size * this.sizeMultiplier;\n      return {\n        width: `${size}rem`,\n        height: `${size}rem`,\n        opacity: this.isDoomed ? 0.8 : 1\n      };\n    },\n\n    orbitClass() {\n      return this.focusedResourceId === -1 || this.isDoomed ? undefined : \"o-alchemy-orbit--unfocused\";\n    },\n\n    realityGlyphCreationClass() {\n      return {\n        \"o-primary-btn--subtab-option\": true,\n        \"tutorial--glow\": !this.createdRealityGlyph\n      };\n    },\n\n    reactions() {\n      return AlchemyReactions.all.compact().filter(r => r.product.isUnlocked);\n    },\n\n    isDoomed() {\n      return Pelle.isDoomed;\n    },\n\n    pelleSymbol() {\n      return Pelle.symbol;\n    }\n\n  },\n  methods: {\n    update() {\n      this.reactionsAvailable = AlchemyResources.all.filter(res => !res.isBaseResource && res.isUnlocked).length !== 0;\n      this.realityCreationVisible = Ra.pets.effarig.level === 25;\n      this.animationTimer += 35;\n      this.alchemyCap = Ra.alchemyResourceCap;\n      this.capFactor = 1 / GlyphSacrificeHandler.glyphRefinementEfficiency;\n      this.createdRealityGlyph = player.reality.glyphs.createdRealityGlyph;\n      this.allReactionsDisabled = this.reactions.every(reaction => !reaction.isActive);\n      this.realityAmount = AlchemyResource.reality.amount;\n    },\n\n    orbitSize(orbit) {\n      const maxRadius = this.layout.orbits.map(o => o.radius).max();\n      return `${orbit.radius / maxRadius * 50}%`;\n    },\n\n    handleMouseEnter(node) {\n      this.infoResourceId = node.resource.id;\n\n      if (node.resource.isUnlocked) {\n        this.focusedResourceId = node.resource.id;\n      }\n    },\n\n    handleMouseLeave() {\n      this.focusedResourceId = -1;\n    },\n\n    handleClick(node) {\n      const resource = node.resource;\n      if (!resource.isUnlocked) return;\n\n      if (this.infoResourceId !== resource.id) {\n        this.infoResourceId = resource.id;\n        this.focusedResourceId = resource.id;\n        return;\n      }\n\n      if (resource.isBaseResource) return;\n      resource.reaction.isActive = !resource.reaction.isActive;\n      GameUI.update();\n    },\n\n    isUnlocked(reactionArrow) {\n      return reactionArrow.product.resource.isUnlocked && reactionArrow.reagent.resource.isUnlocked;\n    },\n\n    isCapped(reactionArrow) {\n      const inRes = reactionArrow.reagent.resource;\n      const outRes = reactionArrow.product.resource; // We render the reaction as capped if it won't trigger; this can happen under two conditions - either the\n      // output is higher than this particular input amount, or it's at its cap due to a different input\n\n      return outRes.amount > 0 && outRes.amount >= inRes.amount || outRes.amount >= outRes.cap;\n    },\n\n    isLessThanRequired(reactionArrow) {\n      return reactionArrow.product.resource.amount > 0 && reactionArrow.reagent.cost < reactionArrow.reagent.resource.cap;\n    },\n\n    isActiveReaction(reactionArrow) {\n      return reactionArrow.reaction.isActive && !this.isDoomed;\n    },\n\n    isFocusedReaction(reactionArrow) {\n      if (this.isDoomed) return false;\n      return this.isUnlocked(reactionArrow) && (reactionArrow.product.resource.id === this.focusedResourceId || reactionArrow.reagent.resource.id === this.focusedResourceId);\n    },\n\n    isDisplayed(reactionArrow) {\n      return this.isUnlocked(reactionArrow) && (this.isActiveReaction(reactionArrow) || this.isFocusedReaction(reactionArrow));\n    },\n\n    isFocusedNode(node) {\n      var _focusedResource$reac, _node$resource$reacti;\n\n      if (this.focusedResourceId === -1 || this.isDoomed) return true;\n      const focusedResource = this.resources[this.focusedResourceId];\n      if (focusedResource === node.resource) return true;\n      return ((_focusedResource$reac = focusedResource.reaction) === null || _focusedResource$reac === void 0 ? void 0 : _focusedResource$reac.reagents.some(r => r.resource === node.resource)) || ((_node$resource$reacti = node.resource.reaction) === null || _node$resource$reacti === void 0 ? void 0 : _node$resource$reacti.reagents.some(r => r.resource === focusedResource));\n    },\n\n    reactionArrowPositions(reactionArrow) {\n      if (!this.isDisplayed(reactionArrow) || this.isCapped(reactionArrow)) return undefined;\n      const xStart = reactionArrow.reagent.x;\n      const yStart = reactionArrow.reagent.y;\n      const xEnd = reactionArrow.product.x;\n      const yEnd = reactionArrow.product.y;\n      const pathLength = Math.sqrt(Math.pow(xEnd - xStart, 2) + Math.pow(yEnd - yStart, 2));\n      const animationTime = pathLength * 40;\n      const reactionProgress = this.animationTimer % animationTime / animationTime;\n      const leadPoint = Math.max(0, reactionProgress + 2 / pathLength);\n      const trailPoint = Math.min(1, reactionProgress - 2 / pathLength);\n      return {\n        x1: `${xStart * (1 - leadPoint) + xEnd * leadPoint}%`,\n        y1: `${yStart * (1 - leadPoint) + yEnd * leadPoint}%`,\n        x2: `${xStart * (1 - trailPoint) + xEnd * trailPoint}%`,\n        y2: `${yStart * (1 - trailPoint) + yEnd * trailPoint}%`\n      };\n    },\n\n    reactionArrowPaths(reactionArrow) {\n      return {\n        x1: `${reactionArrow.reagent.x}%`,\n        y1: `${reactionArrow.reagent.y}%`,\n        x2: `${reactionArrow.product.x}%`,\n        y2: `${reactionArrow.product.y}%`\n      };\n    },\n\n    reactionPathClass(reactionArrow) {\n      return {\n        \"o-alchemy-reaction-path\": this.isUnlocked(reactionArrow),\n        \"o-alchemy-reaction-path--capped\": this.isCapped(reactionArrow) && this.isDisplayed(reactionArrow),\n        \"o-alchemy-reaction-path--less-than-required\": this.isLessThanRequired(reactionArrow) && this.isDisplayed(reactionArrow),\n        \"o-alchemy-reaction-path--focused\": !this.isCapped(reactionArrow) && this.isFocusedReaction(reactionArrow),\n        \"o-alchemy-reaction-path--not-focused\": !this.isFocusedReaction(reactionArrow) && this.focusedResourceId !== -1,\n        \"o-alchemy-reaction-path--doomed\": this.isDoomed\n      };\n    },\n\n    reactionArrowClass(reactionArrow) {\n      return {\n        \"o-alchemy-reaction-arrow\": !this.isCapped(reactionArrow) && this.isDisplayed(reactionArrow),\n        \"o-alchemy-reaction-arrow--focused\": this.isFocusedReaction(reactionArrow)\n      };\n    },\n\n    showAlchemyHowTo() {\n      ui.view.h2pForcedTab = GameDatabase.h2p.tabs.filter(tab => tab.name === \"Glyph Alchemy\")[0];\n      Modal.h2p.show();\n    },\n\n    toggleAllReactions() {\n      const setIsActive = this.allReactionsDisabled;\n\n      for (const reaction of this.reactions) {\n        reaction.isActive = setIsActive;\n      }\n    },\n\n    nodeClass(node) {\n      const resource = node.resource;\n      return {\n        \"o-clickable\": resource.isUnlocked && !resource.isBaseResource && !this.isDoomed\n      };\n    }\n\n  }\n};","map":{"version":3,"sources":["AlchemyTab.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport { AlchemyCircleLayout } from \"./alchemy-circle-layout\";\r\nimport AlchemyCircleNode from \"./AlchemyCircleNode\";\r\nimport AlchemyResourceInfo from \"./AlchemyResourceInfo\";\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\n\r\nexport default {\r\n  name: \"AlchemyTab\",\r\n  components: {\r\n    PrimaryButton,\r\n    AlchemyCircleNode,\r\n    AlchemyResourceInfo\r\n  },\r\n  data() {\r\n    return {\r\n      infoResourceId: 0,\r\n      focusedResourceId: -1,\r\n      reactionsAvailable: false,\r\n      realityCreationVisible: false,\r\n      animationTimer: 0,\r\n      alchemyCap: 0,\r\n      capFactor: 0,\r\n      createdRealityGlyph: false,\r\n      allReactionsDisabled: false,\r\n      // Used to force a re-render of reaction lines when reality glyphs are created\r\n      realityAmount: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    resources: () => AlchemyResources.all,\r\n    layout: () => new AlchemyCircleLayout(),\r\n    sizeMultiplier: () => 5,\r\n    infoResource() {\r\n      return this.resources[this.infoResourceId];\r\n    },\r\n    circleStyle() {\r\n      const size = this.layout.size * this.sizeMultiplier;\r\n      return {\r\n        width: `${size}rem`,\r\n        height: `${size}rem`,\r\n        opacity: this.isDoomed ? 0.8 : 1\r\n      };\r\n    },\r\n    orbitClass() {\r\n      return (this.focusedResourceId === -1 || this.isDoomed) ? undefined : \"o-alchemy-orbit--unfocused\";\r\n    },\r\n    realityGlyphCreationClass() {\r\n      return {\r\n        \"o-primary-btn--subtab-option\": true,\r\n        \"tutorial--glow\": !this.createdRealityGlyph\r\n      };\r\n    },\r\n    reactions() {\r\n      return AlchemyReactions.all.compact().filter(r => r.product.isUnlocked);\r\n    },\r\n    isDoomed() {\r\n      return Pelle.isDoomed;\r\n    },\r\n    pelleSymbol() {\r\n      return Pelle.symbol;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.reactionsAvailable = AlchemyResources.all.filter(res => !res.isBaseResource && res.isUnlocked).length !== 0;\r\n      this.realityCreationVisible = Ra.pets.effarig.level === 25;\r\n      this.animationTimer += 35;\r\n      this.alchemyCap = Ra.alchemyResourceCap;\r\n      this.capFactor = 1 / GlyphSacrificeHandler.glyphRefinementEfficiency;\r\n      this.createdRealityGlyph = player.reality.glyphs.createdRealityGlyph;\r\n      this.allReactionsDisabled = this.reactions.every(reaction => !reaction.isActive);\r\n      this.realityAmount = AlchemyResource.reality.amount;\r\n    },\r\n    orbitSize(orbit) {\r\n      const maxRadius = this.layout.orbits.map(o => o.radius).max();\r\n      return `${(orbit.radius / maxRadius * 50)}%`;\r\n    },\r\n    handleMouseEnter(node) {\r\n      this.infoResourceId = node.resource.id;\r\n      if (node.resource.isUnlocked) {\r\n        this.focusedResourceId = node.resource.id;\r\n      }\r\n    },\r\n    handleMouseLeave() {\r\n      this.focusedResourceId = -1;\r\n    },\r\n    handleClick(node) {\r\n      const resource = node.resource;\r\n      if (!resource.isUnlocked) return;\r\n      if (this.infoResourceId !== resource.id) {\r\n        this.infoResourceId = resource.id;\r\n        this.focusedResourceId = resource.id;\r\n        return;\r\n      }\r\n      if (resource.isBaseResource) return;\r\n      resource.reaction.isActive = !resource.reaction.isActive;\r\n      GameUI.update();\r\n    },\r\n    isUnlocked(reactionArrow) {\r\n      return reactionArrow.product.resource.isUnlocked && reactionArrow.reagent.resource.isUnlocked;\r\n    },\r\n    isCapped(reactionArrow) {\r\n      const inRes = reactionArrow.reagent.resource;\r\n      const outRes = reactionArrow.product.resource;\r\n      // We render the reaction as capped if it won't trigger; this can happen under two conditions - either the\r\n      // output is higher than this particular input amount, or it's at its cap due to a different input\r\n      return (outRes.amount > 0 && outRes.amount >= inRes.amount) || outRes.amount >= outRes.cap;\r\n    },\r\n    isLessThanRequired(reactionArrow) {\r\n      return reactionArrow.product.resource.amount > 0 &&\r\n        reactionArrow.reagent.cost < reactionArrow.reagent.resource.cap;\r\n    },\r\n    isActiveReaction(reactionArrow) {\r\n      return reactionArrow.reaction.isActive && !this.isDoomed;\r\n    },\r\n    isFocusedReaction(reactionArrow) {\r\n      if (this.isDoomed) return false;\r\n      return this.isUnlocked(reactionArrow) && (reactionArrow.product.resource.id === this.focusedResourceId ||\r\n        reactionArrow.reagent.resource.id === this.focusedResourceId);\r\n    },\r\n    isDisplayed(reactionArrow) {\r\n      return this.isUnlocked(reactionArrow) &&\r\n        (this.isActiveReaction(reactionArrow) || this.isFocusedReaction(reactionArrow));\r\n    },\r\n    isFocusedNode(node) {\r\n      if (this.focusedResourceId === -1 || this.isDoomed) return true;\r\n      const focusedResource = this.resources[this.focusedResourceId];\r\n      if (focusedResource === node.resource) return true;\r\n      return focusedResource.reaction?.reagents.some(r => r.resource === node.resource) ||\r\n        node.resource.reaction?.reagents.some(r => r.resource === focusedResource);\r\n    },\r\n    reactionArrowPositions(reactionArrow) {\r\n      if (!this.isDisplayed(reactionArrow) || this.isCapped(reactionArrow)) return undefined;\r\n      const xStart = reactionArrow.reagent.x;\r\n      const yStart = reactionArrow.reagent.y;\r\n      const xEnd = reactionArrow.product.x;\r\n      const yEnd = reactionArrow.product.y;\r\n      const pathLength = Math.sqrt(Math.pow(xEnd - xStart, 2) + Math.pow(yEnd - yStart, 2));\r\n      const animationTime = pathLength * 40;\r\n      const reactionProgress = (this.animationTimer % animationTime) / animationTime;\r\n      const leadPoint = Math.max(0, reactionProgress + 2 / pathLength);\r\n      const trailPoint = Math.min(1, reactionProgress - 2 / pathLength);\r\n      return {\r\n        x1: `${xStart * (1 - leadPoint) + xEnd * leadPoint}%`,\r\n        y1: `${yStart * (1 - leadPoint) + yEnd * leadPoint}%`,\r\n        x2: `${xStart * (1 - trailPoint) + xEnd * trailPoint}%`,\r\n        y2: `${yStart * (1 - trailPoint) + yEnd * trailPoint}%`,\r\n      };\r\n    },\r\n    reactionArrowPaths(reactionArrow) {\r\n      return {\r\n        x1: `${reactionArrow.reagent.x}%`,\r\n        y1: `${reactionArrow.reagent.y}%`,\r\n        x2: `${reactionArrow.product.x}%`,\r\n        y2: `${reactionArrow.product.y}%`,\r\n      };\r\n    },\r\n    reactionPathClass(reactionArrow) {\r\n      return {\r\n        \"o-alchemy-reaction-path\": this.isUnlocked(reactionArrow),\r\n        \"o-alchemy-reaction-path--capped\": this.isCapped(reactionArrow) && this.isDisplayed(reactionArrow),\r\n        \"o-alchemy-reaction-path--less-than-required\": this.isLessThanRequired(reactionArrow) &&\r\n          this.isDisplayed(reactionArrow),\r\n        \"o-alchemy-reaction-path--focused\": !this.isCapped(reactionArrow) && this.isFocusedReaction(reactionArrow),\r\n        \"o-alchemy-reaction-path--not-focused\": !this.isFocusedReaction(reactionArrow) && this.focusedResourceId !== -1,\r\n        \"o-alchemy-reaction-path--doomed\": this.isDoomed\r\n      };\r\n    },\r\n    reactionArrowClass(reactionArrow) {\r\n      return {\r\n        \"o-alchemy-reaction-arrow\": !this.isCapped(reactionArrow) && this.isDisplayed(reactionArrow),\r\n        \"o-alchemy-reaction-arrow--focused\": this.isFocusedReaction(reactionArrow),\r\n      };\r\n    },\r\n    showAlchemyHowTo() {\r\n      ui.view.h2pForcedTab = GameDatabase.h2p.tabs.filter(tab => tab.name === \"Glyph Alchemy\")[0];\r\n      Modal.h2p.show();\r\n    },\r\n    toggleAllReactions() {\r\n      const setIsActive = this.allReactionsDisabled;\r\n      for (const reaction of this.reactions) {\r\n        reaction.isActive = setIsActive;\r\n      }\r\n    },\r\n    nodeClass(node) {\r\n      const resource = node.resource;\r\n      return {\r\n        \"o-clickable\": resource.isUnlocked && !resource.isBaseResource && !this.isDoomed\r\n      };\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-ra-alchemy-tab\">\r\n    <div class=\"c-subtab-option-container\">\r\n      <PrimaryButton\r\n        class=\"o-primary-btn--subtab-option\"\r\n        @click=\"showAlchemyHowTo\"\r\n      >\r\n        Click for alchemy info\r\n      </PrimaryButton>\r\n      <PrimaryButton\r\n        v-if=\"!isDoomed\"\r\n        class=\"o-primary-btn--subtab-option\"\r\n        @click=\"toggleAllReactions\"\r\n      >\r\n        {{ allReactionsDisabled ? \"Enable\" : \"Disable\" }} all reactions\r\n      </PrimaryButton>\r\n      <PrimaryButton\r\n        v-if=\"realityCreationVisible\"\r\n        :class=\"realityGlyphCreationClass\"\r\n        onclick=\"Modal.realityGlyph.show()\"\r\n      >\r\n        View Reality Glyph creation\r\n      </PrimaryButton>\r\n    </div>\r\n    <AlchemyResourceInfo\r\n      :key=\"infoResourceId\"\r\n      :resource=\"infoResource\"\r\n    />\r\n    <br>\r\n    Glyphs can now be refined using your Glyph filter in the Glyphs tab.\r\n    <br>\r\n    When refining a Glyph, it will only give you resources up to a cap\r\n    of {{ formatX(capFactor) }} its highest refinement value.\r\n    <span v-if=\"reactionsAvailable\">\r\n      Reactions trigger once every time you Reality, unaffected by amplification from stored real time.\r\n    </span>\r\n    <div\r\n      class=\"l-alchemy-circle\"\r\n      :style=\"circleStyle\"\r\n    >\r\n      <span\r\n        v-if=\"isDoomed\"\r\n        class=\"c-pelle-symbol-overlay\"\r\n        v-html=\"pelleSymbol\"\r\n      />\r\n      <svg class=\"l-alchemy-orbit-canvas\">\r\n        <circle\r\n          v-for=\"(orbit, i) in layout.orbits\"\r\n          :key=\"i\"\r\n          cx=\"50%\"\r\n          cy=\"50%\"\r\n          class=\"o-alchemy-orbit\"\r\n          :r=\"orbitSize(orbit)\"\r\n          :class=\"orbitClass\"\r\n        />\r\n      </svg>\r\n      <AlchemyCircleNode\r\n        v-for=\"(node, i) in layout.nodes\"\r\n        :key=\"i\"\r\n        :node=\"node\"\r\n        :is-focused=\"isFocusedNode(node)\"\r\n        :class=\"nodeClass(node)\"\r\n        @mouseenter=\"handleMouseEnter(node)\"\r\n        @mouseleave=\"handleMouseLeave\"\r\n        @click=\"handleClick(node)\"\r\n      />\r\n      <svg class=\"l-alchemy-arrow-canvas\">\r\n        <line\r\n          v-for=\"(reactionArrow, idx) in layout.reactionArrows\"\r\n          :key=\"'arrow-' + idx + realityAmount\"\r\n          v-bind=\"reactionArrowPaths(reactionArrow)\"\r\n          :class=\"reactionPathClass(reactionArrow)\"\r\n        />\r\n        <line\r\n          v-for=\"(reactionArrow, idx) in layout.reactionArrows\"\r\n          :key=\"'arrow2-' + idx + realityAmount\"\r\n          v-bind=\"reactionArrowPositions(reactionArrow)\"\r\n          :class=\"reactionArrowClass(reactionArrow)\"\r\n        />\r\n      </svg>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.o-clickable {\r\n  cursor: pointer;\r\n}\r\n\r\n.c-pelle-symbol-overlay {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: -1.5rem;\r\n  left: 0;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 60rem;\r\n  color: var(--color-pelle--base);\r\n  text-shadow: 0 0 3rem;\r\n  pointer-events: none;\r\n  user-select: none;\r\n  opacity: 0.8;\r\n  z-index: 2;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/alchemy"},"metadata":{},"sourceType":"module"}