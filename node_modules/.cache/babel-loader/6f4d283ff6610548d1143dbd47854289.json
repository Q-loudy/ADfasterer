{"ast":null,"code":"import GlyphTooltipEffect from \"@/components/GlyphTooltipEffect\";\nexport default {\n  name: \"GlyphTooltip\",\n  components: {\n    GlyphTooltipEffect\n  },\n  props: {\n    type: {\n      type: String,\n      required: true\n    },\n    strength: {\n      type: Number,\n      required: true\n    },\n    level: {\n      type: Number,\n      required: true\n    },\n    effects: {\n      type: Number,\n      required: true\n    },\n    id: {\n      type: Number,\n      required: false,\n      default: 0\n    },\n    sacrificeReward: {\n      type: Number,\n      required: false,\n      default: 0\n    },\n    refineReward: {\n      type: Number,\n      required: false,\n      default: 0\n    },\n    uncappedRefineReward: {\n      type: Number,\n      required: false,\n      default: 0\n    },\n    currentAction: {\n      type: String,\n      required: true\n    },\n    scoreMode: {\n      type: Number,\n      required: true\n    },\n    showDeletionText: {\n      type: Boolean,\n      required: false,\n      default: true\n    },\n    displayLevel: {\n      type: Number,\n      required: false,\n      default: 0\n    },\n    changeWatcher: {\n      type: Number,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      showChaosText: false,\n      chaosDescription: \"\"\n    };\n  },\n\n  computed: {\n    onTouchDevice() {\n      return GameUI.touchDevice;\n    },\n\n    effectiveLevel() {\n      return this.displayLevel ? this.displayLevel : this.level;\n    },\n\n    sortedEffects() {\n      return getGlyphEffectValuesFromBitmask(this.effects, this.effectiveLevel, this.strength, this.type).filter(effect => GlyphEffects[effect.id].isGenerated === generatedTypes.includes(this.type));\n    },\n\n    rarityInfo() {\n      return getRarity(this.strength);\n    },\n\n    // Values for baseColor and textColor will only ever be black or white\n    baseColor() {\n      return CosmeticGlyphTypes[this.type].currentColor.bg;\n    },\n\n    textColor() {\n      return this.baseColor === \"black\" ? \"white\" : \"black\";\n    },\n\n    mainBorderColor() {\n      return GlyphAppearanceHandler.getBorderColor(this.type);\n    },\n\n    descriptionStyle() {\n      const color = GlyphAppearanceHandler.getRarityColor(this.strength, this.type);\n      const cursedColor = GlyphAppearanceHandler.isLightBG ? \"white\" : \"black\";\n      return {\n        color: this.type === \"cursed\" ? cursedColor : color,\n        animation: this.type === \"reality\" ? \"a-reality-glyph-name-cycle 10s infinite\" : undefined\n      };\n    },\n\n    description() {\n      const glyphName = `${this.type.capitalize()}`;\n\n      switch (this.type) {\n        case \"companion\":\n          return \"Companion Glyph\";\n\n        case \"cursed\":\n          return \"Cursed Glyph\";\n\n        case \"reality\":\n          return `Pure Glyph of ${glyphName}`;\n\n        default:\n          return `${this.rarityInfo.name} Glyph of ${glyphName}`;\n      }\n    },\n\n    isLevelCapped() {\n      return this.displayLevel && this.displayLevel < this.level;\n    },\n\n    isLevelBoosted() {\n      return this.displayLevel && this.displayLevel > this.level;\n    },\n\n    rarityText() {\n      if (!GlyphTypes[this.type].hasRarity) return \"\";\n      const strength = Pelle.isDoomed ? Pelle.glyphStrength : this.strength;\n      return `| Rarity:\n        <span style=\"color: ${this.descriptionStyle.color}\">${formatRarity(strengthToRarity(strength))}</span>`;\n    },\n\n    levelText() {\n      if (this.type === \"companion\") return \"\"; // eslint-disable-next-line no-nested-ternary\n\n      const arrow = this.isLevelCapped ? \"<i class='fas fa-sort-down'></i>\" : this.isLevelBoosted ? \"<i class='fas fa-sort-up'></i>\" : \"\"; // eslint-disable-next-line no-nested-ternary\n\n      const color = this.isLevelCapped ? \"#ff4444\" : this.isLevelBoosted ? \"#44FF44\" : undefined;\n      return `Level: <span style=\"color: ${color}\">\n              ${arrow}${formatInt(this.effectiveLevel)}${arrow}\n              </span>`;\n    },\n\n    eventHandlers() {\n      return GameUI.touchDevice ? {\n        touchstart: this.touchStart,\n        dragstart: this.dragStart,\n        dragEnd: this.dragEnd\n      } : {};\n    },\n\n    glyphTooltipStyle() {\n      // With computer mice, it's nice to just totally disable mouse events on the tooltip,\n      // which reduces the chances for stupidity\n      const borderColor = this.type === \"cursed\" ? this.textColor : GlyphAppearanceHandler.getBorderColor(this.type);\n      return {\n        \"pointer-events\": this.onTouchDevice ? undefined : \"none\",\n        \"border-color\": borderColor,\n        \"box-shadow\": `0 0 0.5rem ${borderColor}, 0 0 0.5rem ${borderColor} inset`,\n        animation: this.type === \"reality\" ? \"a-reality-glyph-tooltip-cycle 10s infinite\" : undefined,\n        color: this.textColor,\n        background: this.baseColor\n      };\n    },\n\n    glyphHeaderStyle() {\n      const isCursed = this.type === \"cursed\";\n      const isReality = this.type === \"reality\";\n      let color = GlyphAppearanceHandler.getRarityColor(this.strength, this.type);\n      if (isCursed) color = this.textColor;\n      if (this.type === \"companion\") color = GlyphAppearanceHandler.getBorderColor(this.type);\n      return {\n        \"border-color\": color,\n        \"box-shadow\": `0 0 0.5rem 0.1rem ${color}, 0 0 0.8rem ${color} inset`,\n        animation: isReality ? \"a-reality-glyph-tooltip-header-cycle 10s infinite\" : undefined,\n        color: this.textColor,\n        background: this.baseColor\n      };\n    }\n\n  },\n  watch: {\n    changeWatcher() {\n      this.$recompute(\"sortedEffects\");\n    }\n\n  },\n\n  mounted() {\n    // By attaching the tooltip to the body element, we make sure it ends up on top of anything\n    // else, with no z order shenanigans\n    document.body.appendChild(this.$el);\n  },\n\n  destroyed() {\n    try {\n      document.body.removeChild(this.$el);\n    } catch (e) {// If the tooltip isn't visible, then it can't be removed on account of not being there in the first place.\n      // Trying to remove it anyway causes an exception to be thrown but otherwise nothing seems to actually affect\n      // the game. Nevertheless, including this try/catch no-op suppresses console error spam.\n    }\n  },\n\n  methods: {\n    update() {\n      this.showChaosText = Pelle.specialGlyphEffect.isUnlocked;\n\n      if (this.showChaosText) {\n        this.chaosDescription = Pelle.getSpecialGlyphEffectDescription(this.type);\n      }\n    },\n\n    touchStart() {\n      // We _don't_ preventDefault here because we want the event to turn into a local\n      // dragstart that we can intercept\n      this.$parent.$emit(\"tooltip-touched\");\n    },\n\n    dragStart(ev) {\n      // Prevent dragging by tooltip on mobile\n      ev.preventDefault();\n      ev.stopPropagation();\n    },\n\n    dragEnd(ev) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    },\n\n    removeGlyph() {\n      GlyphSacrificeHandler.removeGlyph(Glyphs.findById(this.id), false);\n    },\n\n    getFontColor() {\n      return Theme.current().isDark() ? \"#cccccc\" : \"black\";\n    },\n\n    sacrificeText() {\n      if (this.type === \"companion\" || this.type === \"cursed\") return \"\";\n      const powerText = `${format(this.sacrificeReward, 2, 2)}`;\n      const isCurrentAction = this.currentAction === \"sacrifice\";\n      return `<span style=\"font-weight: ${isCurrentAction ? \"bold\" : \"\"};\">\n              Sacrifice: ${powerText}\n              </span>`;\n    },\n\n    refineText() {\n      if (this.type === \"companion\" || this.type === \"cursed\" || this.type === \"reality\") return \"\";\n      if (!AlchemyResource[this.type].isUnlocked) return \"\";\n      let refinementText = `${format(this.uncappedRefineReward, 2, 2)} ${GLYPH_SYMBOLS[this.type]}`;\n\n      if (this.uncappedRefineReward !== this.refineReward) {\n        refinementText += ` (Actual value due to cap: ${format(this.refineReward, 2, 2)} ${GLYPH_SYMBOLS[this.type]})`;\n      }\n\n      const isCurrentAction = this.currentAction === \"refine\";\n      return `<span style=\"font-weight: ${isCurrentAction ? \"bold\" : \"\"};\">\n              Refine: ${refinementText}\n              </span>`;\n    },\n\n    scoreText() {\n      if (this.type === \"companion\" || this.type === \"cursed\" || this.type === \"reality\") return \"\";\n      const showFilterScoreModes = [AUTO_GLYPH_SCORE.SPECIFIED_EFFECT, AUTO_GLYPH_SCORE.EFFECT_SCORE];\n      if (!showFilterScoreModes.includes(this.scoreMode)) return \"\";\n      return `Score: ${format(AutoGlyphProcessor.filterValue(this.$parent.glyph), 1, 1)}`;\n    }\n\n  }\n};","map":{"version":3,"sources":["GlyphTooltip.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport GlyphTooltipEffect from \"@/components/GlyphTooltipEffect\";\r\n\r\nexport default {\r\n  name: \"GlyphTooltip\",\r\n  components: {\r\n    GlyphTooltipEffect\r\n  },\r\n  props: {\r\n    type: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    strength: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    level: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    effects: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    id: {\r\n      type: Number,\r\n      required: false,\r\n      default: 0,\r\n    },\r\n    sacrificeReward: {\r\n      type: Number,\r\n      required: false,\r\n      default: 0,\r\n    },\r\n    refineReward: {\r\n      type: Number,\r\n      required: false,\r\n      default: 0,\r\n    },\r\n    uncappedRefineReward: {\r\n      type: Number,\r\n      required: false,\r\n      default: 0,\r\n    },\r\n    currentAction: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    scoreMode: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    showDeletionText: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: true,\r\n    },\r\n    displayLevel: {\r\n      type: Number,\r\n      required: false,\r\n      default: 0,\r\n    },\r\n    changeWatcher: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      showChaosText: false,\r\n      chaosDescription: \"\"\r\n    };\r\n  },\r\n  computed: {\r\n    onTouchDevice() {\r\n      return GameUI.touchDevice;\r\n    },\r\n    effectiveLevel() {\r\n      return this.displayLevel ? this.displayLevel : this.level;\r\n    },\r\n    sortedEffects() {\r\n      return getGlyphEffectValuesFromBitmask(this.effects, this.effectiveLevel, this.strength, this.type)\r\n        .filter(effect =>\r\n          GlyphEffects[effect.id].isGenerated === generatedTypes.includes(this.type));\r\n    },\r\n    rarityInfo() {\r\n      return getRarity(this.strength);\r\n    },\r\n    // Values for baseColor and textColor will only ever be black or white\r\n    baseColor() {\r\n      return CosmeticGlyphTypes[this.type].currentColor.bg;\r\n    },\r\n    textColor() {\r\n      return this.baseColor === \"black\" ? \"white\" : \"black\";\r\n    },\r\n    mainBorderColor() {\r\n      return GlyphAppearanceHandler.getBorderColor(this.type);\r\n    },\r\n    descriptionStyle() {\r\n      const color = GlyphAppearanceHandler.getRarityColor(this.strength, this.type);\r\n      const cursedColor = GlyphAppearanceHandler.isLightBG ? \"white\" : \"black\";\r\n      return {\r\n        color: this.type === \"cursed\" ? cursedColor : color,\r\n        animation: this.type === \"reality\" ? \"a-reality-glyph-name-cycle 10s infinite\" : undefined\r\n      };\r\n    },\r\n    description() {\r\n      const glyphName = `${this.type.capitalize()}`;\r\n      switch (this.type) {\r\n        case \"companion\":\r\n          return \"Companion Glyph\";\r\n        case \"cursed\":\r\n          return \"Cursed Glyph\";\r\n        case \"reality\":\r\n          return `Pure Glyph of ${glyphName}`;\r\n        default:\r\n          return `${this.rarityInfo.name} Glyph of ${glyphName}`;\r\n      }\r\n    },\r\n    isLevelCapped() {\r\n      return this.displayLevel && this.displayLevel < this.level;\r\n    },\r\n    isLevelBoosted() {\r\n      return this.displayLevel && this.displayLevel > this.level;\r\n    },\r\n    rarityText() {\r\n      if (!GlyphTypes[this.type].hasRarity) return \"\";\r\n      const strength = Pelle.isDoomed ? Pelle.glyphStrength : this.strength;\r\n      return `| Rarity:\r\n        <span style=\"color: ${this.descriptionStyle.color}\">${formatRarity(strengthToRarity(strength))}</span>`;\r\n    },\r\n    levelText() {\r\n      if (this.type === \"companion\") return \"\";\r\n      // eslint-disable-next-line no-nested-ternary\r\n      const arrow = this.isLevelCapped\r\n        ? \"<i class='fas fa-sort-down'></i>\"\r\n        : (this.isLevelBoosted ? \"<i class='fas fa-sort-up'></i>\" : \"\");\r\n      // eslint-disable-next-line no-nested-ternary\r\n      const color = this.isLevelCapped\r\n        ? \"#ff4444\"\r\n        : (this.isLevelBoosted ? \"#44FF44\" : undefined);\r\n      return `Level: <span style=\"color: ${color}\">\r\n              ${arrow}${formatInt(this.effectiveLevel)}${arrow}\r\n              </span>`;\r\n    },\r\n    eventHandlers() {\r\n      return GameUI.touchDevice ? {\r\n        touchstart: this.touchStart,\r\n        dragstart: this.dragStart,\r\n        dragEnd: this.dragEnd,\r\n      } : {};\r\n    },\r\n    glyphTooltipStyle() {\r\n      // With computer mice, it's nice to just totally disable mouse events on the tooltip,\r\n      // which reduces the chances for stupidity\r\n      const borderColor = this.type === \"cursed\" ? this.textColor : GlyphAppearanceHandler.getBorderColor(this.type);\r\n      return {\r\n        \"pointer-events\": this.onTouchDevice ? undefined : \"none\",\r\n        \"border-color\": borderColor,\r\n        \"box-shadow\": `0 0 0.5rem ${borderColor}, 0 0 0.5rem ${borderColor} inset`,\r\n        animation: this.type === \"reality\" ? \"a-reality-glyph-tooltip-cycle 10s infinite\" : undefined,\r\n        color: this.textColor,\r\n        background: this.baseColor\r\n      };\r\n    },\r\n    glyphHeaderStyle() {\r\n      const isCursed = this.type === \"cursed\";\r\n      const isReality = this.type === \"reality\";\r\n\r\n      let color = GlyphAppearanceHandler.getRarityColor(this.strength, this.type);\r\n      if (isCursed) color = this.textColor;\r\n      if (this.type === \"companion\") color = GlyphAppearanceHandler.getBorderColor(this.type);\r\n      return {\r\n        \"border-color\": color,\r\n        \"box-shadow\": `0 0 0.5rem 0.1rem ${color}, 0 0 0.8rem ${color} inset`,\r\n        animation: isReality ? \"a-reality-glyph-tooltip-header-cycle 10s infinite\" : undefined,\r\n        color: this.textColor,\r\n        background: this.baseColor\r\n      };\r\n    }\r\n  },\r\n  watch: {\r\n    changeWatcher() {\r\n      this.$recompute(\"sortedEffects\");\r\n    }\r\n  },\r\n  mounted() {\r\n    // By attaching the tooltip to the body element, we make sure it ends up on top of anything\r\n    // else, with no z order shenanigans\r\n    document.body.appendChild(this.$el);\r\n  },\r\n  destroyed() {\r\n    try {\r\n      document.body.removeChild(this.$el);\r\n    } catch (e) {\r\n      // If the tooltip isn't visible, then it can't be removed on account of not being there in the first place.\r\n      // Trying to remove it anyway causes an exception to be thrown but otherwise nothing seems to actually affect\r\n      // the game. Nevertheless, including this try/catch no-op suppresses console error spam.\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.showChaosText = Pelle.specialGlyphEffect.isUnlocked;\r\n      if (this.showChaosText) {\r\n        this.chaosDescription = Pelle.getSpecialGlyphEffectDescription(this.type);\r\n      }\r\n    },\r\n    touchStart() {\r\n      // We _don't_ preventDefault here because we want the event to turn into a local\r\n      // dragstart that we can intercept\r\n      this.$parent.$emit(\"tooltip-touched\");\r\n    },\r\n    dragStart(ev) {\r\n      // Prevent dragging by tooltip on mobile\r\n      ev.preventDefault();\r\n      ev.stopPropagation();\r\n    },\r\n    dragEnd(ev) {\r\n      ev.preventDefault();\r\n      ev.stopPropagation();\r\n    },\r\n    removeGlyph() {\r\n      GlyphSacrificeHandler.removeGlyph(Glyphs.findById(this.id), false);\r\n    },\r\n    getFontColor() {\r\n      return Theme.current().isDark() ? \"#cccccc\" : \"black\";\r\n    },\r\n    sacrificeText() {\r\n      if (this.type === \"companion\" || this.type === \"cursed\") return \"\";\r\n      const powerText = `${format(this.sacrificeReward, 2, 2)}`;\r\n      const isCurrentAction = this.currentAction === \"sacrifice\";\r\n      return `<span style=\"font-weight: ${isCurrentAction ? \"bold\" : \"\"};\">\r\n              Sacrifice: ${powerText}\r\n              </span>`;\r\n    },\r\n    refineText() {\r\n      if (this.type === \"companion\" || this.type === \"cursed\" || this.type === \"reality\") return \"\";\r\n      if (!AlchemyResource[this.type].isUnlocked) return \"\";\r\n      let refinementText = `${format(this.uncappedRefineReward, 2, 2)} ${GLYPH_SYMBOLS[this.type]}`;\r\n      if (this.uncappedRefineReward !== this.refineReward) {\r\n        refinementText += ` (Actual value due to cap: ${format(this.refineReward, 2, 2)} ${GLYPH_SYMBOLS[this.type]})`;\r\n      }\r\n      const isCurrentAction = this.currentAction === \"refine\";\r\n      return `<span style=\"font-weight: ${isCurrentAction ? \"bold\" : \"\"};\">\r\n              Refine: ${refinementText}\r\n              </span>`;\r\n    },\r\n    scoreText() {\r\n      if (this.type === \"companion\" || this.type === \"cursed\" || this.type === \"reality\") return \"\";\r\n      const showFilterScoreModes = [AUTO_GLYPH_SCORE.SPECIFIED_EFFECT, AUTO_GLYPH_SCORE.EFFECT_SCORE];\r\n      if (!showFilterScoreModes.includes(this.scoreMode)) return \"\";\r\n      return `Score: ${format(AutoGlyphProcessor.filterValue(this.$parent.glyph), 1, 1)}`;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    class=\"l-glyph-tooltip c-glyph-tooltip\"\r\n    :style=\"glyphTooltipStyle\"\r\n    v-on=\"eventHandlers\"\r\n  >\r\n    <div\r\n      class=\"c-glyph-tooltip__header\"\r\n      :style=\"glyphHeaderStyle\"\r\n    >\r\n      <span\r\n        class=\"c-glyph-tooltip__description\"\r\n        :style=\"descriptionStyle\"\r\n        v-html=\"description\"\r\n      />\r\n      <span class=\"l-glyph-tooltip__info\">\r\n        <span v-html=\"levelText\" />\r\n        <span v-html=\"rarityText\" />\r\n      </span>\r\n      <span v-if=\"showDeletionText\">\r\n        <span\r\n          class=\"c-glyph-tooltip__sacrifice\"\r\n          v-on=\"onTouchDevice ? { click: removeGlyph } : {}\"\r\n        >\r\n          <span v-html=\"sacrificeText()\" />\r\n          <span v-if=\"sacrificeText() && refineText()\"> | </span>\r\n          <span v-html=\"refineText()\" />\r\n        </span>\r\n      </span>\r\n      <span class=\"c-glyph-tooltip__sacrifice\">{{ scoreText() }}</span>\r\n    </div>\r\n    <div class=\"l-glyph-tooltip__effects\">\r\n      <GlyphTooltipEffect\r\n        v-for=\"e in sortedEffects\"\r\n        :key=\"e.id + changeWatcher\"\r\n        :effect=\"e.id\"\r\n        :value=\"e.value\"\r\n      />\r\n      <div\r\n        v-if=\"showChaosText\"\r\n        class=\"pelle-current-glyph-effects c-glyph-tooltip__effect\"\r\n      >\r\n        {{ chaosDescription }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-glyph-tooltip__sacrifice {\r\n  font-size: 1rem;\r\n  font-weight: normal;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components"},"metadata":{},"sourceType":"module"}