{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport { DC } from \"../../constants\";\nexport const PERK_FAMILY = {\n  ANTIMATTER: \"ANTIMATTER\",\n  INFINITY: \"INFINITY\",\n  ETERNITY: \"ETERNITY\",\n  DILATION: \"DILATION\",\n  REALITY: \"REALITY\",\n  AUTOMATION: \"AUTOMATION\",\n  ACHIEVEMENT: \"ACHIEVEMENT\"\n}; // This function isn't used in-game, see note below for its intended usage\n// eslint-disable-next-line no-unused-vars\n\nfunction vectorToNum(v) {\n  return Math.floor(v.x / 5) + 400 * Math.floor(v.y / 5) + 80200;\n}\n/**\r\n * In order to reduce boilerplate code and excessive Vector object declarations, the node positions in fixed layouts\r\n * are specified as numbers which are decoded on-the-fly using positionNumToVector in PerksTab.vue. The function\r\n * vectorToNum above is the inverse of that function.\r\n *\r\n * To make a new preset layout, define vectorToNum in the console, move all the nodes around in-game and then run\r\n *    Object.values(PerkNetwork.network.body.nodes).filter(n => n.edges.length !== 0).map(v => vectorToNum(v))\r\n * in the console to get all the current node positions. Then, append the resulting numbers to each layoutPosList\r\n * array below and make the appripriate entry in PerkLayouts.\r\n *\r\n * Note: This encoding/decoding only works properly for coordinates with values between -1000 and 1000, and will\r\n * be slightly off for vectors whose coordinates aren't divisible by 5\r\n */\n\n\nexport const perks = {\n  firstPerk: {\n    id: 0,\n    label: \"START\",\n    family: PERK_FAMILY.REALITY,\n\n    get description() {\n      return `Remove the achievement requirement from the Reality Study\n      and allow you to choose from ${formatInt(4)} different Glyphs on Reality.`;\n    },\n\n    effect: 4,\n    layoutPosList: [76596, 80200, 80600, 80200, 80188, 67769]\n  },\n  startAM: {\n    id: 10,\n    label: \"SAM\",\n    family: PERK_FAMILY.ANTIMATTER,\n\n    get description() {\n      return `Start every reset with ${format(5e130)} antimatter.`;\n    },\n\n    bumpCurrency: () => Currency.antimatter.bumpTo(5e130),\n    effect: 5e130,\n    layoutPosList: [76559, 80600, 80199, 80600, 82191, 75745]\n  },\n  startIP1: {\n    id: 12,\n    label: \"SIP1\",\n    family: PERK_FAMILY.INFINITY,\n\n    get description() {\n      return `Start every Eternity and Reality with ${format(5e15)} Infinity Points.`;\n    },\n\n    bumpCurrency: () => Currency.infinityPoints.bumpTo(5e15),\n    effect: 5e15,\n    layoutPosList: [74523, 80599, 79798, 80599, 82594, 91322]\n  },\n  startIP2: {\n    id: 13,\n    label: \"SIP2\",\n    family: PERK_FAMILY.INFINITY,\n\n    get description() {\n      return `Start every Eternity and Reality with ${format(5e130)} Infinity Points.`;\n    },\n\n    bumpCurrency: () => Currency.infinityPoints.bumpTo(5e130),\n    effect: 5e130,\n    layoutPosList: [62111, 80598, 79797, 80998, 82597, 91690]\n  },\n  startEP1: {\n    id: 14,\n    label: \"SEP1\",\n    family: PERK_FAMILY.ETERNITY,\n\n    get description() {\n      return `Start every Reality with ${formatInt(10)} Eternity Points.`;\n    },\n\n    bumpCurrency: () => Currency.eternityPoints.bumpTo(10),\n    effect: 10,\n    automatorPoints: 5,\n    shortDescription: () => `Start with ${formatInt(10)} EP`,\n    layoutPosList: [88915, 80999, 79398, 80598, 82197, 103734]\n  },\n  startEP2: {\n    id: 15,\n    label: \"SEP2\",\n    family: PERK_FAMILY.ETERNITY,\n\n    get description() {\n      return `Start every Reality with ${format(5000)} Eternity Points.`;\n    },\n\n    bumpCurrency: () => Currency.eternityPoints.bumpTo(5000),\n    effect: 5000,\n    layoutPosList: [92484, 81398, 78998, 80597, 82200, 102193]\n  },\n  startEP3: {\n    id: 16,\n    label: \"SEP3\",\n    family: PERK_FAMILY.ETERNITY,\n\n    get description() {\n      return `Start every Reality with ${format(5e9)} Eternity Points.`;\n    },\n\n    bumpCurrency: () => Currency.eternityPoints.bumpTo(5e9),\n    effect: 5e9,\n    automatorPoints: 10,\n    shortDescription: () => `Start with ${format(5e9)} EP`,\n    layoutPosList: [96459, 81798, 78997, 80596, 82203, 106224]\n  },\n  startTP: {\n    id: 17,\n    label: \"STP\",\n    family: PERK_FAMILY.DILATION,\n\n    get description() {\n      return `After unlocking Dilation, gain ${formatInt(10)} Tachyon Particles.`;\n    },\n\n    effect: () => Enslaved.isRunning ? 1 : 10,\n    automatorPoints: 5,\n    shortDescription: () => `Start with ${formatInt(10)} TP`,\n    layoutPosList: [102120, 81399, 79399, 80197, 81800, 109376]\n  },\n  antimatterNoReset: {\n    id: 30,\n    label: \"ANR\",\n    family: PERK_FAMILY.ANTIMATTER,\n    description: `Dimension Boosts and Antimatter Galaxies no longer reset\n      Antimatter, Antimatter Dimensions, Tickspeed, or Dimensional Sacrifice.`,\n    layoutPosList: [85343, 81000, 79799, 80199, 82194, 92553]\n  },\n  studyPassive: {\n    id: 31,\n    label: \"PASS\",\n    family: PERK_FAMILY.ETERNITY,\n\n    get description() {\n      return `Improve Time Study 122 to ${formatX(50)} Eternity Points and\n        Time Study 142 to ${formatX(DC.E50)} Infinity Points.\n        ${Pelle.isDoomed ? \"\" : `In addition, Time Study 132 also makes Replicanti ${format(3)} times faster.`}`;\n    },\n\n    layoutPosList: [67054, 79400, 80999, 80202, 78594, 52589]\n  },\n  autounlockEU1: {\n    id: 40,\n    label: \"EU1\",\n    family: PERK_FAMILY.ETERNITY,\n    description: `Automatically unlock the first row of Eternity Upgrades for free once you have Eternities.`,\n    layoutPosList: [89407, 80601, 80201, 79800, 80591, 73007]\n  },\n  autounlockEU2: {\n    id: 41,\n    label: \"EU2\",\n    family: PERK_FAMILY.ETERNITY,\n\n    get description() {\n      return `The second row of Eternity Upgrades is automatically purchased\n        at ${formatX(1e10)} times less than their original price.`;\n    },\n\n    layoutPosList: [103008, 81001, 80202, 79400, 80594, 81867]\n  },\n  autounlockDilation1: {\n    id: 42,\n    label: \"DU1\",\n    family: PERK_FAMILY.DILATION,\n    description: \"After unlocking Dilation, automatically unlock the second row of Dilation Upgrades for free.\",\n    layoutPosList: [119833, 81801, 79403, 79398, 80200, 97510]\n  },\n  autounlockDilation2: {\n    id: 43,\n    label: \"DU2\",\n    family: PERK_FAMILY.DILATION,\n    description: \"After unlocking Dilation, automatically unlock the third row of Dilation Upgrades for free.\",\n    layoutPosList: [124260, 82201, 79003, 79397, 80203, 85513]\n  },\n  autounlockDilation3: {\n    id: 44,\n    label: \"ATT\",\n    family: PERK_FAMILY.DILATION,\n    description: \"Automatically purchase the passive Time Theorem generation Dilation Upgrade once you can afford it.\",\n    automatorPoints: 5,\n    shortDescription: () => \"Auto-purchase TT generation\",\n    layoutPosList: [124289, 82601, 79002, 79396, 80206, 72282]\n  },\n  autounlockTD: {\n    id: 45,\n    label: \"ATD\",\n    family: PERK_FAMILY.DILATION,\n    description: \"Auto-unlock Time Dimensions 5-8 once you can afford them.\",\n    automatorPoints: 5,\n    shortDescription: () => \"Auto-unlock TD 5-8\",\n    layoutPosList: [127117, 82600, 79001, 79796, 80209, 61869]\n  },\n  autounlockReality: {\n    id: 46,\n    label: \"REAL\",\n    family: PERK_FAMILY.REALITY,\n\n    get description() {\n      return `Auto-unlocks Reality once you have ${format(DC.E4000)} Eternity Points\n        and have unlocked Time Dimension 8.`;\n    },\n\n    automatorPoints: 10,\n    shortDescription: () => \"Auto-unlock Reality\",\n    layoutPosList: [124343, 83000, 79000, 79795, 80212, 71046]\n  },\n  bypassIDAntimatter: {\n    id: 51,\n    label: \"IDR\",\n    family: PERK_FAMILY.INFINITY,\n    description: \"Infinity Dimensions no longer have antimatter requirements.\",\n    layoutPosList: [51317, 80998, 79397, 80997, 82600, 104489]\n  },\n  bypassTGReset: {\n    id: 52,\n    label: \"TGR\",\n    family: PERK_FAMILY.DILATION,\n    description: \"The 2nd rebuyable Dilation Upgrade no longer resets your Dilated Time.\",\n    layoutPosList: [116568, 81800, 79801, 79798, 81400, 112677]\n  },\n  bypassECDilation: {\n    id: 53,\n    label: \"DILR\",\n    family: PERK_FAMILY.DILATION,\n    description: \"Remove the Eternity Challenge 11, Eternity Challenge 12, and total Time Theorem \" + \"requirements from Time Dilation unlock.\",\n    automatorPoints: 5,\n    shortDescription: () => `Unlocking Dilation only requires TT`,\n    layoutPosList: [129011, 81802, 80203, 80198, 80600, 109116]\n  },\n  bypassEC1Lock: {\n    id: 54,\n    label: \"EC1R\",\n    family: PERK_FAMILY.ETERNITY,\n    description: \"Remove the Eternity Challenge 1 requirement from Time Study 181.\",\n    layoutPosList: [64284, 79000, 81399, 80603, 78597, 44167]\n  },\n  bypassEC2Lock: {\n    id: 55,\n    label: \"EC2R\",\n    family: PERK_FAMILY.ETERNITY,\n    description: \"Remove the Eternity Challenge 2 requirement from Time Study 181.\",\n    layoutPosList: [55463, 78999, 80998, 80602, 78197, 48944]\n  },\n  bypassEC3Lock: {\n    id: 56,\n    label: \"EC3R\",\n    family: PERK_FAMILY.ETERNITY,\n    description: \"Remove the Eternity Challenge 3 requirement from Time Study 181.\",\n    layoutPosList: [75475, 79001, 81400, 80203, 78997, 47822]\n  },\n  bypassEC5Lock: {\n    id: 57,\n    label: \"EC5R\",\n    family: PERK_FAMILY.ETERNITY,\n    description: \"Remove the Eternity Challenge 5 requirement from Time Study 62.\",\n    layoutPosList: [70626, 79800, 81000, 80201, 78591, 62607]\n  },\n  autocompleteEC1: {\n    id: 60,\n    label: \"PEC1\",\n    family: PERK_FAMILY.AUTOMATION,\n\n    get description() {\n      return `Auto-complete one Eternity Challenge every ${formatInt(60)} minutes (real-time).\n              ECs will be completed sequentially, requiring all previous\n              ECs to be fully completed before progressing to the next EC.`;\n    },\n\n    effect: 60,\n    automatorPoints: 5,\n    shortDescription: () => `Auto-complete ECs every ${formatInt(60)} minutes`,\n    layoutPosList: [90660, 79402, 81002, 79803, 79397, 46664]\n  },\n  autocompleteEC2: {\n    id: 61,\n    label: \"PEC2\",\n    family: PERK_FAMILY.AUTOMATION,\n\n    get description() {\n      return `Auto-complete one Eternity Challenge every ${formatInt(40)} minutes (real-time).\n        (${formatInt(20)} minute decrease)`;\n    },\n\n    effect: 40,\n    layoutPosList: [95485, 79002, 81402, 79804, 79400, 53486]\n  },\n  autocompleteEC3: {\n    id: 62,\n    label: \"PEC3\",\n    family: PERK_FAMILY.AUTOMATION,\n\n    get description() {\n      return `Auto-complete one Eternity Challenge every ${formatInt(20)} minutes (real-time).\n        (${formatInt(20)} minute decrease)`;\n    },\n\n    effect: 20,\n    automatorPoints: 10,\n    shortDescription: () => `Auto-complete ECs every ${formatInt(20)} minutes`,\n    layoutPosList: [96311, 78602, 81401, 80204, 79403, 61903]\n  },\n  studyActiveEP: {\n    id: 70,\n    label: \"ACT\",\n    family: PERK_FAMILY.ETERNITY,\n    description: \"Active path multipliers are always maximized.\",\n    layoutPosList: [56633, 79399, 80599, 80601, 78194, 58565]\n  },\n  studyIdleEP: {\n    id: 71,\n    label: \"IDL\",\n    family: PERK_FAMILY.ETERNITY,\n\n    get description() {\n      return `Idle path multipliers start as if you have spent ${formatInt(15)} minutes in this Infinity/Eternity.`;\n    },\n\n    effect: 15,\n    layoutPosList: [80248, 79401, 81001, 79802, 78994, 56239]\n  },\n  studyECRequirement: {\n    id: 72,\n    label: \"ECR\",\n    family: PERK_FAMILY.ETERNITY,\n    description: \"Remove non-Time Theorem requirements for unlocking Eternity Challenges.\",\n    automatorPoints: 10,\n    shortDescription: () => \"Remove EC secondary requirements\",\n    layoutPosList: [62714, 78600, 81398, 80604, 78600, 40599]\n  },\n  studyECBulk: {\n    id: 73,\n    label: \"ECB\",\n    family: PERK_FAMILY.ETERNITY,\n    description: `You can complete multiple tiers of Eternity Challenges at once if\n      you reach the goal for a higher completion of that challenge.`,\n    automatorPoints: 15,\n    shortDescription: () => \"Bulk EC Completion\",\n    layoutPosList: [62741, 78200, 81397, 81004, 78603, 41435]\n  },\n  retroactiveTP1: {\n    id: 80,\n    label: \"TP1\",\n    family: PERK_FAMILY.DILATION,\n\n    get description() {\n      return `When buying the 3rd rebuyable Dilation Upgrade,\n        multiply your current Tachyon Particle amount by ${formatFloat(1.5, 1)}.`;\n    },\n\n    effect: 1.5,\n    layoutPosList: [111739, 81799, 79800, 79797, 81403, 115434]\n  },\n  retroactiveTP2: {\n    id: 81,\n    label: \"TP2\",\n    family: PERK_FAMILY.DILATION,\n\n    get description() {\n      return `When buying the 3rd rebuyable Dilation Upgrade,\n        multiply your current Tachyon Particle amount by ${formatInt(2)}.`;\n    },\n\n    effect: 2,\n    layoutPosList: [103757, 82199, 79401, 80196, 81406, 117382]\n  },\n  retroactiveTP3: {\n    id: 82,\n    label: \"TP3\",\n    family: PERK_FAMILY.DILATION,\n\n    get description() {\n      return `When buying the 3rd rebuyable Dilation Upgrade,\n        multiply your current Tachyon Particle amount by ${formatFloat(2.5, 1)}.`;\n    },\n\n    effect: 2.5,\n    layoutPosList: [96175, 82599, 79400, 80195, 81409, 116540]\n  },\n  retroactiveTP4: {\n    id: 83,\n    label: \"TP4\",\n    family: PERK_FAMILY.DILATION,\n\n    get description() {\n      return `When buying the 3rd rebuyable Dilation Upgrade,\n        multiply your current Tachyon Particle amount by ${formatInt(3)}.`;\n    },\n\n    effect: 3,\n    automatorPoints: 10,\n    shortDescription: () => `${formatX(3)} TP upgrade applies retroactively`,\n    layoutPosList: [86984, 82598, 78999, 80595, 81412, 114103]\n  },\n  autobuyerDilation: {\n    id: 100,\n    label: \"DAU\",\n    family: PERK_FAMILY.AUTOMATION,\n    description: \"Unlock autobuyers for the repeatable Dilation Upgrades.\",\n    automatorPoints: 5,\n    shortDescription: () => \"Dilation Upgrade Autobuyers\",\n    layoutPosList: [117401, 81401, 79802, 79799, 80597, 96672]\n  },\n  autobuyerFasterID: {\n    id: 101,\n    label: \"IDAS\",\n    family: PERK_FAMILY.AUTOMATION,\n\n    get description() {\n      return `Infinity Dimension autobuyers work ${formatX(3)} faster.`;\n    },\n\n    effect: 1 / 3,\n    automatorPoints: 5,\n    shortDescription: () => \"Faster ID Autobuyers\",\n    layoutPosList: [74095, 80199, 80198, 81000, 82997, 77720]\n  },\n  autobuyerFasterReplicanti: {\n    id: 102,\n    label: \"REPAS\",\n    family: PERK_FAMILY.AUTOMATION,\n\n    get description() {\n      return `Replicanti autobuyers work ${formatX(3)} faster.`;\n    },\n\n    effect: 1 / 3,\n    automatorPoints: 5,\n    shortDescription: () => \"Faster Replicanti Autobuyers\",\n    layoutPosList: [57685, 80198, 80197, 80999, 83000, 79297]\n  },\n  autobuyerFasterDilation: {\n    id: 103,\n    label: \"DAS\",\n    family: PERK_FAMILY.AUTOMATION,\n\n    get description() {\n      return `Dilation Upgrade autobuyers work ${formatX(3)} faster.`;\n    },\n\n    effect: 1 / 3,\n    automatorPoints: 5,\n    shortDescription: () => \"Faster Dilation Autobuyers\",\n    layoutPosList: [113895, 82602, 79402, 79395, 80609, 72715]\n  },\n  ttBuySingle: {\n    id: 104,\n    label: \"TTS\",\n    family: PERK_FAMILY.AUTOMATION,\n    description: \"Unlock a Time Theorem Autobuyer which buys single Time Theorems every tick.\",\n    automatorPoints: 5,\n    shortDescription: () => \"Single TT Autobuyer\",\n    layoutPosList: [44631, 79398, 80598, 81001, 77797, 57325]\n  },\n  ttFree: {\n    id: 105,\n    label: \"TTF\",\n    family: PERK_FAMILY.AUTOMATION,\n\n    get description() {\n      return `Purchasing Time Theorems no longer spends your Antimatter, Infinity Points, or Eternity Points.`;\n    },\n\n    layoutPosList: [33840, 78998, 80597, 81002, 77800, 67309]\n  },\n  ttBuyMax: {\n    id: 106,\n    label: \"TTM\",\n    family: PERK_FAMILY.AUTOMATION,\n\n    get description() {\n      return `Upgrade the Time Theorem Autobuyer to buy max Time Theorems.`;\n    },\n\n    automatorPoints: 10,\n    shortDescription: () => \"Max TT Autobuyer\",\n    layoutPosList: [25055, 78598, 80997, 81003, 77803, 65739]\n  },\n  dilationAutobuyerBulk: {\n    id: 107,\n    label: \"DAB\",\n    family: PERK_FAMILY.AUTOMATION,\n\n    get description() {\n      return `Dilation Upgrade autobuyers buy three times as many Dilation Upgrades at once.`;\n    },\n\n    effect: 3,\n    automatorPoints: 5,\n    shortDescription: () => \"Dilation Autobuyer bulk\",\n    layoutPosList: [127384, 81400, 79803, 79399, 81000, 103048]\n  },\n  achievementGroup1: {\n    id: 201,\n    label: \"ACH1\",\n    family: PERK_FAMILY.ACHIEVEMENT,\n\n    get description() {\n      return `Reduce the Achievement timer to ${formatInt(20)} minutes per\n        Achievement (${formatInt(10)} minute decrease).`;\n    },\n\n    effect: 10,\n    automatorPoints: 5,\n    shortDescription: () => `Faster Achievements: every ${formatInt(20)} minutes`,\n    layoutPosList: [65386, 80201, 80601, 79801, 79791, 81371]\n  },\n  achievementGroup2: {\n    id: 202,\n    label: \"ACH2\",\n    family: PERK_FAMILY.ACHIEVEMENT,\n\n    get description() {\n      return `Reduce the Achievement timer to ${formatInt(12)} minutes per\n        Achievement (${formatInt(8)} minute decrease).`;\n    },\n\n    effect: 8,\n    layoutPosList: [54976, 80202, 80602, 79401, 79794, 93780]\n  },\n  achievementGroup3: {\n    id: 203,\n    label: \"ACH3\",\n    family: PERK_FAMILY.ACHIEVEMENT,\n\n    get description() {\n      return `Reduce the Achievement timer to ${formatInt(6)} minutes per\n        Achievement (${formatInt(6)} minute decrease).`;\n    },\n\n    effect: 6,\n    layoutPosList: [44168, 80602, 80603, 79402, 79797, 83005]\n  },\n  achievementGroup4: {\n    id: 204,\n    label: \"ACH4\",\n    family: PERK_FAMILY.ACHIEVEMENT,\n\n    get description() {\n      return `Reduce the Achievement timer to ${formatInt(2)} minutes per\n        Achievement (${formatInt(4)} minute decrease).`;\n    },\n\n    effect: 4,\n    layoutPosList: [33760, 81002, 81003, 79403, 79800, 95422]\n  },\n  achievementGroup5: {\n    id: 205,\n    label: \"ACHNR\",\n    family: PERK_FAMILY.ACHIEVEMENT,\n\n    get description() {\n      return `Immediately unlock the first ${formatInt(13)} rows of Achievements\n        and Reality no longer resets them.`;\n    },\n\n    automatorPoints: 10,\n    shortDescription: () => \"Keep Achievements on Reality\",\n    layoutPosList: [23353, 81402, 81403, 79404, 79803, 84639]\n  }\n};\nexport const perkConnections = function () {\n  const p = perks; // First item is the start, other items are the ends\n\n  const groups = [[p.firstPerk, p.achievementGroup1, p.startAM, p.autounlockEU1, p.bypassEC5Lock], [p.startAM, p.antimatterNoReset, p.startIP1], [p.antimatterNoReset, p.startEP1], [p.startIP1, p.startIP2, p.startEP1, p.autobuyerFasterID], [p.startIP2, p.bypassIDAntimatter, p.autobuyerFasterReplicanti], [p.startEP1, p.startEP2, p.startTP], [p.startEP2, p.startEP3], [p.startTP, p.startEP1, p.retroactiveTP1], [p.autounlockEU1, p.autounlockEU2], [p.autounlockEU2, p.autounlockEU1, p.autobuyerDilation], [p.autounlockDilation1, p.autounlockDilation2], [p.autounlockDilation2, p.autounlockDilation3], [p.autounlockDilation3, p.autobuyerFasterDilation, p.autounlockTD], [p.autounlockTD, p.autounlockReality], [p.bypassTGReset, p.autobuyerDilation, p.retroactiveTP1], [p.bypassEC1Lock, p.bypassEC2Lock, p.bypassEC3Lock, p.studyECRequirement], [p.bypassEC2Lock, p.studyActiveEP, p.bypassEC1Lock], [p.bypassEC3Lock, p.studyIdleEP, p.bypassEC1Lock], [p.bypassEC5Lock, p.studyActiveEP, p.studyIdleEP, p.studyPassive], [p.studyPassive, p.bypassEC1Lock], [p.autocompleteEC1, p.autocompleteEC2], [p.autocompleteEC2, p.autocompleteEC3], [p.studyActiveEP, p.bypassEC2Lock, p.ttBuySingle], [p.studyIdleEP, p.bypassEC3Lock, p.autocompleteEC1], [p.studyECRequirement, p.studyECBulk], [p.retroactiveTP1, p.bypassTGReset, p.startTP, p.retroactiveTP2], [p.retroactiveTP2, p.retroactiveTP3], [p.retroactiveTP3, p.retroactiveTP4], [p.autobuyerDilation, p.autounlockEU2, p.autounlockDilation1, p.bypassECDilation, p.bypassTGReset, p.dilationAutobuyerBulk], [p.autobuyerFasterID], [p.ttBuySingle, p.ttFree], [p.ttFree, p.ttBuyMax], [p.achievementGroup1, p.achievementGroup2], [p.achievementGroup2, p.achievementGroup3], [p.achievementGroup3, p.achievementGroup4], [p.achievementGroup4, p.achievementGroup5]];\n  const connections = {};\n\n  for (const perk of Object.values(perks)) {\n    const connectedPerks = [];\n    const directConnections = groups.find(g => g[0] === perk);\n\n    if (directConnections !== undefined) {\n      connectedPerks.push(...directConnections.slice(1));\n    }\n\n    const indirectConnections = groups.filter(g => g.slice(1).some(groupPerk => groupPerk === perk)).map(g => g[0]);\n    connectedPerks.push(...indirectConnections);\n    connections[perk.id] = [...new Set(connectedPerks.map(connectedPerk => connectedPerk.id))];\n  }\n\n  return connections;\n}();","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/reality/perks.js"],"names":["DC","PERK_FAMILY","ANTIMATTER","INFINITY","ETERNITY","DILATION","REALITY","AUTOMATION","ACHIEVEMENT","vectorToNum","v","Math","floor","x","y","perks","firstPerk","id","label","family","description","formatInt","effect","layoutPosList","startAM","format","bumpCurrency","Currency","antimatter","bumpTo","startIP1","infinityPoints","startIP2","startEP1","eternityPoints","automatorPoints","shortDescription","startEP2","startEP3","startTP","Enslaved","isRunning","antimatterNoReset","studyPassive","formatX","E50","Pelle","isDoomed","autounlockEU1","autounlockEU2","autounlockDilation1","autounlockDilation2","autounlockDilation3","autounlockTD","autounlockReality","E4000","bypassIDAntimatter","bypassTGReset","bypassECDilation","bypassEC1Lock","bypassEC2Lock","bypassEC3Lock","bypassEC5Lock","autocompleteEC1","autocompleteEC2","autocompleteEC3","studyActiveEP","studyIdleEP","studyECRequirement","studyECBulk","retroactiveTP1","formatFloat","retroactiveTP2","retroactiveTP3","retroactiveTP4","autobuyerDilation","autobuyerFasterID","autobuyerFasterReplicanti","autobuyerFasterDilation","ttBuySingle","ttFree","ttBuyMax","dilationAutobuyerBulk","achievementGroup1","achievementGroup2","achievementGroup3","achievementGroup4","achievementGroup5","perkConnections","p","groups","connections","perk","Object","values","connectedPerks","directConnections","find","g","undefined","push","slice","indirectConnections","filter","some","groupPerk","map","Set","connectedPerk"],"mappings":"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","sourcesContent":["import { DC } from \"../../constants\";\r\n\r\nexport const PERK_FAMILY = {\r\n  ANTIMATTER: \"ANTIMATTER\",\r\n  INFINITY: \"INFINITY\",\r\n  ETERNITY: \"ETERNITY\",\r\n  DILATION: \"DILATION\",\r\n  REALITY: \"REALITY\",\r\n  AUTOMATION: \"AUTOMATION\",\r\n  ACHIEVEMENT: \"ACHIEVEMENT\",\r\n};\r\n\r\n// This function isn't used in-game, see note below for its intended usage\r\n// eslint-disable-next-line no-unused-vars\r\nfunction vectorToNum(v) {\r\n  return Math.floor(v.x / 5) + 400 * Math.floor(v.y / 5) + 80200;\r\n}\r\n\r\n/**\r\n * In order to reduce boilerplate code and excessive Vector object declarations, the node positions in fixed layouts\r\n * are specified as numbers which are decoded on-the-fly using positionNumToVector in PerksTab.vue. The function\r\n * vectorToNum above is the inverse of that function.\r\n *\r\n * To make a new preset layout, define vectorToNum in the console, move all the nodes around in-game and then run\r\n *    Object.values(PerkNetwork.network.body.nodes).filter(n => n.edges.length !== 0).map(v => vectorToNum(v))\r\n * in the console to get all the current node positions. Then, append the resulting numbers to each layoutPosList\r\n * array below and make the appripriate entry in PerkLayouts.\r\n *\r\n * Note: This encoding/decoding only works properly for coordinates with values between -1000 and 1000, and will\r\n * be slightly off for vectors whose coordinates aren't divisible by 5\r\n */\r\nexport const perks = {\r\n  firstPerk: {\r\n    id: 0,\r\n    label: \"START\",\r\n    family: PERK_FAMILY.REALITY,\r\n    get description() {\r\n      return `Remove the achievement requirement from the Reality Study\r\n      and allow you to choose from ${formatInt(4)} different Glyphs on Reality.`;\r\n    },\r\n    effect: 4,\r\n    layoutPosList: [76596, 80200, 80600, 80200, 80188, 67769],\r\n  },\r\n  startAM: {\r\n    id: 10,\r\n    label: \"SAM\",\r\n    family: PERK_FAMILY.ANTIMATTER,\r\n    get description() {\r\n      return `Start every reset with ${format(5e130)} antimatter.`;\r\n    },\r\n    bumpCurrency: () => Currency.antimatter.bumpTo(5e130),\r\n    effect: 5e130,\r\n    layoutPosList: [76559, 80600, 80199, 80600, 82191, 75745],\r\n  },\r\n  startIP1: {\r\n    id: 12,\r\n    label: \"SIP1\",\r\n    family: PERK_FAMILY.INFINITY,\r\n    get description() {\r\n      return `Start every Eternity and Reality with ${format(5e15)} Infinity Points.`;\r\n    },\r\n    bumpCurrency: () => Currency.infinityPoints.bumpTo(5e15),\r\n    effect: 5e15,\r\n    layoutPosList: [74523, 80599, 79798, 80599, 82594, 91322],\r\n  },\r\n  startIP2: {\r\n    id: 13,\r\n    label: \"SIP2\",\r\n    family: PERK_FAMILY.INFINITY,\r\n    get description() {\r\n      return `Start every Eternity and Reality with ${format(5e130)} Infinity Points.`;\r\n    },\r\n    bumpCurrency: () => Currency.infinityPoints.bumpTo(5e130),\r\n    effect: 5e130,\r\n    layoutPosList: [62111, 80598, 79797, 80998, 82597, 91690],\r\n  },\r\n  startEP1: {\r\n    id: 14,\r\n    label: \"SEP1\",\r\n    family: PERK_FAMILY.ETERNITY,\r\n    get description() {\r\n      return `Start every Reality with ${formatInt(10)} Eternity Points.`;\r\n    },\r\n    bumpCurrency: () => Currency.eternityPoints.bumpTo(10),\r\n    effect: 10,\r\n    automatorPoints: 5,\r\n    shortDescription: () => `Start with ${formatInt(10)} EP`,\r\n    layoutPosList: [88915, 80999, 79398, 80598, 82197, 103734],\r\n  },\r\n  startEP2: {\r\n    id: 15,\r\n    label: \"SEP2\",\r\n    family: PERK_FAMILY.ETERNITY,\r\n    get description() {\r\n      return `Start every Reality with ${format(5000)} Eternity Points.`;\r\n    },\r\n    bumpCurrency: () => Currency.eternityPoints.bumpTo(5000),\r\n    effect: 5000,\r\n    layoutPosList: [92484, 81398, 78998, 80597, 82200, 102193],\r\n  },\r\n  startEP3: {\r\n    id: 16,\r\n    label: \"SEP3\",\r\n    family: PERK_FAMILY.ETERNITY,\r\n    get description() {\r\n      return `Start every Reality with ${format(5e9)} Eternity Points.`;\r\n    },\r\n    bumpCurrency: () => Currency.eternityPoints.bumpTo(5e9),\r\n    effect: 5e9,\r\n    automatorPoints: 10,\r\n    shortDescription: () => `Start with ${format(5e9)} EP`,\r\n    layoutPosList: [96459, 81798, 78997, 80596, 82203, 106224],\r\n  },\r\n  startTP: {\r\n    id: 17,\r\n    label: \"STP\",\r\n    family: PERK_FAMILY.DILATION,\r\n    get description() {\r\n      return `After unlocking Dilation, gain ${formatInt(10)} Tachyon Particles.`;\r\n    },\r\n    effect: () => (Enslaved.isRunning ? 1 : 10),\r\n    automatorPoints: 5,\r\n    shortDescription: () => `Start with ${formatInt(10)} TP`,\r\n    layoutPosList: [102120, 81399, 79399, 80197, 81800, 109376],\r\n  },\r\n  antimatterNoReset: {\r\n    id: 30,\r\n    label: \"ANR\",\r\n    family: PERK_FAMILY.ANTIMATTER,\r\n    description: `Dimension Boosts and Antimatter Galaxies no longer reset\r\n      Antimatter, Antimatter Dimensions, Tickspeed, or Dimensional Sacrifice.`,\r\n    layoutPosList: [85343, 81000, 79799, 80199, 82194, 92553],\r\n  },\r\n  studyPassive: {\r\n    id: 31,\r\n    label: \"PASS\",\r\n    family: PERK_FAMILY.ETERNITY,\r\n    get description() {\r\n      return `Improve Time Study 122 to ${formatX(50)} Eternity Points and\r\n        Time Study 142 to ${formatX(DC.E50)} Infinity Points.\r\n        ${Pelle.isDoomed ? \"\" : `In addition, Time Study 132 also makes Replicanti ${format(3)} times faster.`}`;\r\n    },\r\n    layoutPosList: [67054, 79400, 80999, 80202, 78594, 52589],\r\n  },\r\n  autounlockEU1: {\r\n    id: 40,\r\n    label: \"EU1\",\r\n    family: PERK_FAMILY.ETERNITY,\r\n    description: `Automatically unlock the first row of Eternity Upgrades for free once you have Eternities.`,\r\n    layoutPosList: [89407, 80601, 80201, 79800, 80591, 73007],\r\n  },\r\n  autounlockEU2: {\r\n    id: 41,\r\n    label: \"EU2\",\r\n    family: PERK_FAMILY.ETERNITY,\r\n    get description() {\r\n      return `The second row of Eternity Upgrades is automatically purchased\r\n        at ${formatX(1e10)} times less than their original price.`;\r\n    },\r\n    layoutPosList: [103008, 81001, 80202, 79400, 80594, 81867],\r\n  },\r\n  autounlockDilation1: {\r\n    id: 42,\r\n    label: \"DU1\",\r\n    family: PERK_FAMILY.DILATION,\r\n    description: \"After unlocking Dilation, automatically unlock the second row of Dilation Upgrades for free.\",\r\n    layoutPosList: [119833, 81801, 79403, 79398, 80200, 97510],\r\n  },\r\n  autounlockDilation2: {\r\n    id: 43,\r\n    label: \"DU2\",\r\n    family: PERK_FAMILY.DILATION,\r\n    description: \"After unlocking Dilation, automatically unlock the third row of Dilation Upgrades for free.\",\r\n    layoutPosList: [124260, 82201, 79003, 79397, 80203, 85513],\r\n  },\r\n  autounlockDilation3: {\r\n    id: 44,\r\n    label: \"ATT\",\r\n    family: PERK_FAMILY.DILATION,\r\n    description: \"Automatically purchase the passive Time Theorem generation Dilation Upgrade once you can afford it.\",\r\n    automatorPoints: 5,\r\n    shortDescription: () => \"Auto-purchase TT generation\",\r\n    layoutPosList: [124289, 82601, 79002, 79396, 80206, 72282],\r\n  },\r\n  autounlockTD: {\r\n    id: 45,\r\n    label: \"ATD\",\r\n    family: PERK_FAMILY.DILATION,\r\n    description: \"Auto-unlock Time Dimensions 5-8 once you can afford them.\",\r\n    automatorPoints: 5,\r\n    shortDescription: () => \"Auto-unlock TD 5-8\",\r\n    layoutPosList: [127117, 82600, 79001, 79796, 80209, 61869],\r\n  },\r\n  autounlockReality: {\r\n    id: 46,\r\n    label: \"REAL\",\r\n    family: PERK_FAMILY.REALITY,\r\n    get description() {\r\n      return `Auto-unlocks Reality once you have ${format(DC.E4000)} Eternity Points\r\n        and have unlocked Time Dimension 8.`;\r\n    },\r\n    automatorPoints: 10,\r\n    shortDescription: () => \"Auto-unlock Reality\",\r\n    layoutPosList: [124343, 83000, 79000, 79795, 80212, 71046],\r\n  },\r\n  bypassIDAntimatter: {\r\n    id: 51,\r\n    label: \"IDR\",\r\n    family: PERK_FAMILY.INFINITY,\r\n    description: \"Infinity Dimensions no longer have antimatter requirements.\",\r\n    layoutPosList: [51317, 80998, 79397, 80997, 82600, 104489],\r\n  },\r\n  bypassTGReset: {\r\n    id: 52,\r\n    label: \"TGR\",\r\n    family: PERK_FAMILY.DILATION,\r\n    description: \"The 2nd rebuyable Dilation Upgrade no longer resets your Dilated Time.\",\r\n    layoutPosList: [116568, 81800, 79801, 79798, 81400, 112677],\r\n  },\r\n  bypassECDilation: {\r\n    id: 53,\r\n    label: \"DILR\",\r\n    family: PERK_FAMILY.DILATION,\r\n    description: \"Remove the Eternity Challenge 11, Eternity Challenge 12, and total Time Theorem \" +\r\n      \"requirements from Time Dilation unlock.\",\r\n    automatorPoints: 5,\r\n    shortDescription: () => `Unlocking Dilation only requires TT`,\r\n    layoutPosList: [129011, 81802, 80203, 80198, 80600, 109116],\r\n  },\r\n  bypassEC1Lock: {\r\n    id: 54,\r\n    label: \"EC1R\",\r\n    family: PERK_FAMILY.ETERNITY,\r\n    description: \"Remove the Eternity Challenge 1 requirement from Time Study 181.\",\r\n    layoutPosList: [64284, 79000, 81399, 80603, 78597, 44167],\r\n  },\r\n  bypassEC2Lock: {\r\n    id: 55,\r\n    label: \"EC2R\",\r\n    family: PERK_FAMILY.ETERNITY,\r\n    description: \"Remove the Eternity Challenge 2 requirement from Time Study 181.\",\r\n    layoutPosList: [55463, 78999, 80998, 80602, 78197, 48944],\r\n  },\r\n  bypassEC3Lock: {\r\n    id: 56,\r\n    label: \"EC3R\",\r\n    family: PERK_FAMILY.ETERNITY,\r\n    description: \"Remove the Eternity Challenge 3 requirement from Time Study 181.\",\r\n    layoutPosList: [75475, 79001, 81400, 80203, 78997, 47822],\r\n  },\r\n  bypassEC5Lock: {\r\n    id: 57,\r\n    label: \"EC5R\",\r\n    family: PERK_FAMILY.ETERNITY,\r\n    description: \"Remove the Eternity Challenge 5 requirement from Time Study 62.\",\r\n    layoutPosList: [70626, 79800, 81000, 80201, 78591, 62607],\r\n  },\r\n  autocompleteEC1: {\r\n    id: 60,\r\n    label: \"PEC1\",\r\n    family: PERK_FAMILY.AUTOMATION,\r\n    get description() {\r\n      return `Auto-complete one Eternity Challenge every ${formatInt(60)} minutes (real-time).\r\n              ECs will be completed sequentially, requiring all previous\r\n              ECs to be fully completed before progressing to the next EC.`;\r\n    },\r\n    effect: 60,\r\n    automatorPoints: 5,\r\n    shortDescription: () => `Auto-complete ECs every ${formatInt(60)} minutes`,\r\n    layoutPosList: [90660, 79402, 81002, 79803, 79397, 46664],\r\n  },\r\n  autocompleteEC2: {\r\n    id: 61,\r\n    label: \"PEC2\",\r\n    family: PERK_FAMILY.AUTOMATION,\r\n    get description() {\r\n      return `Auto-complete one Eternity Challenge every ${formatInt(40)} minutes (real-time).\r\n        (${formatInt(20)} minute decrease)`;\r\n    },\r\n    effect: 40,\r\n    layoutPosList: [95485, 79002, 81402, 79804, 79400, 53486],\r\n  },\r\n  autocompleteEC3: {\r\n    id: 62,\r\n    label: \"PEC3\",\r\n    family: PERK_FAMILY.AUTOMATION,\r\n    get description() {\r\n      return `Auto-complete one Eternity Challenge every ${formatInt(20)} minutes (real-time).\r\n        (${formatInt(20)} minute decrease)`;\r\n    },\r\n    effect: 20,\r\n    automatorPoints: 10,\r\n    shortDescription: () => `Auto-complete ECs every ${formatInt(20)} minutes`,\r\n    layoutPosList: [96311, 78602, 81401, 80204, 79403, 61903],\r\n  },\r\n  studyActiveEP: {\r\n    id: 70,\r\n    label: \"ACT\",\r\n    family: PERK_FAMILY.ETERNITY,\r\n    description: \"Active path multipliers are always maximized.\",\r\n    layoutPosList: [56633, 79399, 80599, 80601, 78194, 58565],\r\n  },\r\n  studyIdleEP: {\r\n    id: 71,\r\n    label: \"IDL\",\r\n    family: PERK_FAMILY.ETERNITY,\r\n    get description() {\r\n      return `Idle path multipliers start as if you have spent ${formatInt(15)} minutes in this Infinity/Eternity.`;\r\n    },\r\n    effect: 15,\r\n    layoutPosList: [80248, 79401, 81001, 79802, 78994, 56239],\r\n  },\r\n  studyECRequirement: {\r\n    id: 72,\r\n    label: \"ECR\",\r\n    family: PERK_FAMILY.ETERNITY,\r\n    description: \"Remove non-Time Theorem requirements for unlocking Eternity Challenges.\",\r\n    automatorPoints: 10,\r\n    shortDescription: () => \"Remove EC secondary requirements\",\r\n    layoutPosList: [62714, 78600, 81398, 80604, 78600, 40599],\r\n  },\r\n  studyECBulk: {\r\n    id: 73,\r\n    label: \"ECB\",\r\n    family: PERK_FAMILY.ETERNITY,\r\n    description:\r\n      `You can complete multiple tiers of Eternity Challenges at once if\r\n      you reach the goal for a higher completion of that challenge.`,\r\n    automatorPoints: 15,\r\n    shortDescription: () => \"Bulk EC Completion\",\r\n    layoutPosList: [62741, 78200, 81397, 81004, 78603, 41435],\r\n  },\r\n  retroactiveTP1: {\r\n    id: 80,\r\n    label: \"TP1\",\r\n    family: PERK_FAMILY.DILATION,\r\n    get description() {\r\n      return `When buying the 3rd rebuyable Dilation Upgrade,\r\n        multiply your current Tachyon Particle amount by ${formatFloat(1.5, 1)}.`;\r\n    },\r\n    effect: 1.5,\r\n    layoutPosList: [111739, 81799, 79800, 79797, 81403, 115434],\r\n  },\r\n  retroactiveTP2: {\r\n    id: 81,\r\n    label: \"TP2\",\r\n    family: PERK_FAMILY.DILATION,\r\n    get description() {\r\n      return `When buying the 3rd rebuyable Dilation Upgrade,\r\n        multiply your current Tachyon Particle amount by ${formatInt(2)}.`;\r\n    },\r\n    effect: 2,\r\n    layoutPosList: [103757, 82199, 79401, 80196, 81406, 117382],\r\n  },\r\n  retroactiveTP3: {\r\n    id: 82,\r\n    label: \"TP3\",\r\n    family: PERK_FAMILY.DILATION,\r\n    get description() {\r\n      return `When buying the 3rd rebuyable Dilation Upgrade,\r\n        multiply your current Tachyon Particle amount by ${formatFloat(2.5, 1)}.`;\r\n    },\r\n    effect: 2.5,\r\n    layoutPosList: [96175, 82599, 79400, 80195, 81409, 116540],\r\n  },\r\n  retroactiveTP4: {\r\n    id: 83,\r\n    label: \"TP4\",\r\n    family: PERK_FAMILY.DILATION,\r\n    get description() {\r\n      return `When buying the 3rd rebuyable Dilation Upgrade,\r\n        multiply your current Tachyon Particle amount by ${formatInt(3)}.`;\r\n    },\r\n    effect: 3,\r\n    automatorPoints: 10,\r\n    shortDescription: () => `${formatX(3)} TP upgrade applies retroactively`,\r\n    layoutPosList: [86984, 82598, 78999, 80595, 81412, 114103],\r\n  },\r\n  autobuyerDilation: {\r\n    id: 100,\r\n    label: \"DAU\",\r\n    family: PERK_FAMILY.AUTOMATION,\r\n    description: \"Unlock autobuyers for the repeatable Dilation Upgrades.\",\r\n    automatorPoints: 5,\r\n    shortDescription: () => \"Dilation Upgrade Autobuyers\",\r\n    layoutPosList: [117401, 81401, 79802, 79799, 80597, 96672],\r\n  },\r\n  autobuyerFasterID: {\r\n    id: 101,\r\n    label: \"IDAS\",\r\n    family: PERK_FAMILY.AUTOMATION,\r\n    get description() {\r\n      return `Infinity Dimension autobuyers work ${formatX(3)} faster.`;\r\n    },\r\n    effect: 1 / 3,\r\n    automatorPoints: 5,\r\n    shortDescription: () => \"Faster ID Autobuyers\",\r\n    layoutPosList: [74095, 80199, 80198, 81000, 82997, 77720],\r\n  },\r\n  autobuyerFasterReplicanti: {\r\n    id: 102,\r\n    label: \"REPAS\",\r\n    family: PERK_FAMILY.AUTOMATION,\r\n    get description() {\r\n      return `Replicanti autobuyers work ${formatX(3)} faster.`;\r\n    },\r\n    effect: 1 / 3,\r\n    automatorPoints: 5,\r\n    shortDescription: () => \"Faster Replicanti Autobuyers\",\r\n    layoutPosList: [57685, 80198, 80197, 80999, 83000, 79297],\r\n  },\r\n  autobuyerFasterDilation: {\r\n    id: 103,\r\n    label: \"DAS\",\r\n    family: PERK_FAMILY.AUTOMATION,\r\n    get description() {\r\n      return `Dilation Upgrade autobuyers work ${formatX(3)} faster.`;\r\n    },\r\n    effect: 1 / 3,\r\n    automatorPoints: 5,\r\n    shortDescription: () => \"Faster Dilation Autobuyers\",\r\n    layoutPosList: [113895, 82602, 79402, 79395, 80609, 72715],\r\n  },\r\n  ttBuySingle: {\r\n    id: 104,\r\n    label: \"TTS\",\r\n    family: PERK_FAMILY.AUTOMATION,\r\n    description: \"Unlock a Time Theorem Autobuyer which buys single Time Theorems every tick.\",\r\n    automatorPoints: 5,\r\n    shortDescription: () => \"Single TT Autobuyer\",\r\n    layoutPosList: [44631, 79398, 80598, 81001, 77797, 57325],\r\n  },\r\n  ttFree: {\r\n    id: 105,\r\n    label: \"TTF\",\r\n    family: PERK_FAMILY.AUTOMATION,\r\n    get description() {\r\n      return `Purchasing Time Theorems no longer spends your Antimatter, Infinity Points, or Eternity Points.`;\r\n    },\r\n    layoutPosList: [33840, 78998, 80597, 81002, 77800, 67309],\r\n  },\r\n  ttBuyMax: {\r\n    id: 106,\r\n    label: \"TTM\",\r\n    family: PERK_FAMILY.AUTOMATION,\r\n    get description() {\r\n      return `Upgrade the Time Theorem Autobuyer to buy max Time Theorems.`;\r\n    },\r\n    automatorPoints: 10,\r\n    shortDescription: () => \"Max TT Autobuyer\",\r\n    layoutPosList: [25055, 78598, 80997, 81003, 77803, 65739],\r\n  },\r\n  dilationAutobuyerBulk: {\r\n    id: 107,\r\n    label: \"DAB\",\r\n    family: PERK_FAMILY.AUTOMATION,\r\n    get description() {\r\n      return `Dilation Upgrade autobuyers buy three times as many Dilation Upgrades at once.`;\r\n    },\r\n    effect: 3,\r\n    automatorPoints: 5,\r\n    shortDescription: () => \"Dilation Autobuyer bulk\",\r\n    layoutPosList: [127384, 81400, 79803, 79399, 81000, 103048],\r\n  },\r\n  achievementGroup1: {\r\n    id: 201,\r\n    label: \"ACH1\",\r\n    family: PERK_FAMILY.ACHIEVEMENT,\r\n    get description() {\r\n      return `Reduce the Achievement timer to ${formatInt(20)} minutes per\r\n        Achievement (${formatInt(10)} minute decrease).`;\r\n    },\r\n    effect: 10,\r\n    automatorPoints: 5,\r\n    shortDescription: () => `Faster Achievements: every ${formatInt(20)} minutes`,\r\n    layoutPosList: [65386, 80201, 80601, 79801, 79791, 81371],\r\n  },\r\n  achievementGroup2: {\r\n    id: 202,\r\n    label: \"ACH2\",\r\n    family: PERK_FAMILY.ACHIEVEMENT,\r\n    get description() {\r\n      return `Reduce the Achievement timer to ${formatInt(12)} minutes per\r\n        Achievement (${formatInt(8)} minute decrease).`;\r\n    },\r\n    effect: 8,\r\n    layoutPosList: [54976, 80202, 80602, 79401, 79794, 93780],\r\n  },\r\n  achievementGroup3: {\r\n    id: 203,\r\n    label: \"ACH3\",\r\n    family: PERK_FAMILY.ACHIEVEMENT,\r\n    get description() {\r\n      return `Reduce the Achievement timer to ${formatInt(6)} minutes per\r\n        Achievement (${formatInt(6)} minute decrease).`;\r\n    },\r\n    effect: 6,\r\n    layoutPosList: [44168, 80602, 80603, 79402, 79797, 83005],\r\n  },\r\n  achievementGroup4: {\r\n    id: 204,\r\n    label: \"ACH4\",\r\n    family: PERK_FAMILY.ACHIEVEMENT,\r\n    get description() {\r\n      return `Reduce the Achievement timer to ${formatInt(2)} minutes per\r\n        Achievement (${formatInt(4)} minute decrease).`;\r\n    },\r\n    effect: 4,\r\n    layoutPosList: [33760, 81002, 81003, 79403, 79800, 95422],\r\n  },\r\n  achievementGroup5: {\r\n    id: 205,\r\n    label: \"ACHNR\",\r\n    family: PERK_FAMILY.ACHIEVEMENT,\r\n    get description() {\r\n      return `Immediately unlock the first ${formatInt(13)} rows of Achievements\r\n        and Reality no longer resets them.`;\r\n    },\r\n    automatorPoints: 10,\r\n    shortDescription: () => \"Keep Achievements on Reality\",\r\n    layoutPosList: [23353, 81402, 81403, 79404, 79803, 84639],\r\n  }\r\n};\r\n\r\nexport const perkConnections = (function() {\r\n  const p = perks;\r\n  // First item is the start, other items are the ends\r\n  const groups = [\r\n    [p.firstPerk, p.achievementGroup1, p.startAM, p.autounlockEU1, p.bypassEC5Lock],\r\n    [p.startAM, p.antimatterNoReset, p.startIP1],\r\n    [p.antimatterNoReset, p.startEP1],\r\n    [p.startIP1, p.startIP2, p.startEP1, p.autobuyerFasterID],\r\n    [p.startIP2, p.bypassIDAntimatter, p.autobuyerFasterReplicanti],\r\n    [p.startEP1, p.startEP2, p.startTP],\r\n    [p.startEP2, p.startEP3],\r\n    [p.startTP, p.startEP1, p.retroactiveTP1],\r\n    [p.autounlockEU1, p.autounlockEU2],\r\n    [p.autounlockEU2, p.autounlockEU1, p.autobuyerDilation],\r\n    [p.autounlockDilation1, p.autounlockDilation2],\r\n    [p.autounlockDilation2, p.autounlockDilation3],\r\n    [p.autounlockDilation3, p.autobuyerFasterDilation, p.autounlockTD],\r\n    [p.autounlockTD, p.autounlockReality],\r\n    [p.bypassTGReset, p.autobuyerDilation, p.retroactiveTP1],\r\n    [p.bypassEC1Lock, p.bypassEC2Lock, p.bypassEC3Lock, p.studyECRequirement],\r\n    [p.bypassEC2Lock, p.studyActiveEP, p.bypassEC1Lock],\r\n    [p.bypassEC3Lock, p.studyIdleEP, p.bypassEC1Lock],\r\n    [p.bypassEC5Lock, p.studyActiveEP, p.studyIdleEP, p.studyPassive],\r\n    [p.studyPassive, p.bypassEC1Lock],\r\n    [p.autocompleteEC1, p.autocompleteEC2],\r\n    [p.autocompleteEC2, p.autocompleteEC3],\r\n    [p.studyActiveEP, p.bypassEC2Lock, p.ttBuySingle],\r\n    [p.studyIdleEP, p.bypassEC3Lock, p.autocompleteEC1],\r\n    [p.studyECRequirement, p.studyECBulk],\r\n    [p.retroactiveTP1, p.bypassTGReset, p.startTP, p.retroactiveTP2],\r\n    [p.retroactiveTP2, p.retroactiveTP3],\r\n    [p.retroactiveTP3, p.retroactiveTP4],\r\n    [p.autobuyerDilation, p.autounlockEU2, p.autounlockDilation1,\r\n      p.bypassECDilation, p.bypassTGReset, p.dilationAutobuyerBulk],\r\n    [p.autobuyerFasterID],\r\n    [p.ttBuySingle, p.ttFree],\r\n    [p.ttFree, p.ttBuyMax],\r\n    [p.achievementGroup1, p.achievementGroup2],\r\n    [p.achievementGroup2, p.achievementGroup3],\r\n    [p.achievementGroup3, p.achievementGroup4],\r\n    [p.achievementGroup4, p.achievementGroup5],\r\n  ];\r\n  const connections = {};\r\n  for (const perk of Object.values(perks)) {\r\n    const connectedPerks = [];\r\n    const directConnections = groups.find(g => g[0] === perk);\r\n    if (directConnections !== undefined) {\r\n      connectedPerks.push(...directConnections.slice(1));\r\n    }\r\n    const indirectConnections = groups\r\n      .filter(g => g.slice(1).some(groupPerk => groupPerk === perk))\r\n      .map(g => g[0]);\r\n    connectedPerks.push(...indirectConnections);\r\n    connections[perk.id] = [...new Set(connectedPerks.map(connectedPerk => connectedPerk.id))];\r\n  }\r\n  return connections;\r\n}());\r\n"]},"metadata":{},"sourceType":"module"}