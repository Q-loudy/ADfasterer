{"ast":null,"code":"import \"core-js/modules/es.array.reduce.js\";\nimport { DC } from \"../../constants\";\nimport { PlayerProgress } from \"../../player-progress\";\nimport { MultiplierTabHelper } from \"./helper-functions\";\nimport { MultiplierTabIcons } from \"./icons\"; // See index.js for documentation\n\nexport const ID = {\n  total: {\n    name: dim => {\n      if (dim) return `ID ${dim} Multiplier`;\n      if (EternityChallenge(7).isRunning) return \"AD7 Production\";\n      return \"Infinity Power Production\";\n    },\n    displayOverride: dim => dim ? formatX(InfinityDimension(dim).multiplier, 2) : `${format(InfinityDimension(1).productionPerSecond, 2)}/sec`,\n    multValue: dim => dim ? InfinityDimension(dim).multiplier : InfinityDimensions.all.filter(id => id.isProducing).map(id => id.multiplier).reduce((x, y) => x.times(y), DC.D1),\n    isActive: dim => dim ? InfinityDimension(dim).isProducing : PlayerProgress.eternityUnlocked() || InfinityDimension(1).isProducing,\n    dilationEffect: () => {\n      const baseEff = player.dilation.active ? 0.75 * Effects.product(DilationUpgrade.dilationPenalty) : 1;\n      return baseEff * (Effarig.isRunning ? Effarig.multDilation : 1);\n    },\n    isDilated: true,\n    overlay: [\"∞\", \"<i class='fa-solid fa-cube' />\"],\n    icon: dim => MultiplierTabIcons.DIMENSION(\"ID\", dim)\n  },\n  purchase: {\n    name: dim => dim ? `Purchased ID ${dim}` : \"Purchases\",\n    multValue: dim => {\n      const getMult = id => Decimal.pow(InfinityDimension(id).powerMultiplier, Math.floor(InfinityDimension(id).baseAmount / 10));\n\n      if (dim) return getMult(dim);\n      return InfinityDimensions.all.filter(id => id.isProducing).map(id => getMult(id.tier)).reduce((x, y) => x.times(y), DC.D1);\n    },\n    isActive: () => !EternityChallenge(2).isRunning && !EternityChallenge(10).isRunning,\n    icon: dim => MultiplierTabIcons.PURCHASE(\"ID\", dim)\n  },\n  highestDim: {\n    name: () => `Amount of highest Dimension`,\n    displayOverride: () => {\n      const dim = MultiplierTabHelper.activeDimCount(\"ID\");\n      return `ID ${dim}, ${format(InfinityDimension(dim).amount, 2)}`;\n    },\n    multValue: () => InfinityDimension(MultiplierTabHelper.activeDimCount(\"ID\")).amount,\n    isActive: () => InfinityDimension(1).isProducing,\n    icon: MultiplierTabIcons.DIMENSION(\"ID\")\n  },\n  basePurchase: {\n    name: \"Base purchases\",\n    multValue: dim => {\n      const getMult = id => {\n        const purchases = id === 8 ? Math.floor(InfinityDimension(id).baseAmount / 10) : Math.min(InfinityDimensions.HARDCAP_PURCHASES, Math.floor(InfinityDimension(id).baseAmount / 10));\n\n        const baseMult = InfinityDimension(id)._powerMultiplier;\n\n        return Decimal.pow(baseMult, purchases);\n      };\n\n      if (dim) return getMult(dim);\n      return InfinityDimensions.all.filter(id => id.isProducing).map(id => getMult(id.tier)).reduce((x, y) => x.times(y), DC.D1);\n    },\n    isActive: true,\n    icon: MultiplierTabIcons.PURCHASE(\"baseID\")\n  },\n  tesseractPurchase: {\n    name: \"Tesseracts\",\n    multValue: dim => {\n      const getMult = id => {\n        if (id === 8) return DC.D1;\n        const purchases = Math.floor(InfinityDimension(id).baseAmount / 10);\n        return Decimal.pow(InfinityDimension(id)._powerMultiplier, Math.clampMin(purchases - InfinityDimensions.HARDCAP_PURCHASES, 0));\n      };\n\n      if (dim) return getMult(dim);\n      return InfinityDimensions.all.filter(id => id.isProducing).map(id => getMult(id.tier)).reduce((x, y) => x.times(y), DC.D1);\n    },\n    isActive: () => Tesseracts.bought > 0,\n    icon: MultiplierTabIcons.PURCHASE(\"tesseractID\")\n  },\n  infinityGlyphSacrifice: {\n    name: \"Infinity Glyph sacrifice\",\n    multValue: () => InfinityDimension(8).isProducing ? Decimal.pow(GlyphSacrifice.infinity.effectValue, Math.floor(InfinityDimension(8).baseAmount / 10)) : DC.D1,\n    isActive: () => GlyphSacrifice.infinity.effectValue > 1,\n    icon: MultiplierTabIcons.SACRIFICE(\"infinity\")\n  },\n  powPurchase: {\n    name: \"Imaginary Upgrade - Recollection of Intrusion\",\n    powValue: () => ImaginaryUpgrade(14).effectOrDefault(1),\n    isActive: () => ImaginaryUpgrade(14).canBeApplied,\n    icon: MultiplierTabIcons.UPGRADE(\"imaginary\")\n  },\n  replicanti: {\n    name: \"Replicanti Multiplier\",\n    multValue: dim => Decimal.pow(replicantiMult(), dim ? 1 : MultiplierTabHelper.activeDimCount(\"ID\")),\n    isActive: () => Replicanti.areUnlocked,\n    icon: MultiplierTabIcons.SPECIFIC_GLYPH(\"replication\")\n  },\n  achievementMult: {\n    name: \"Achievement Multiplier\",\n    multValue: dim => Decimal.pow(Achievements.power, dim ? 1 : MultiplierTabHelper.activeDimCount(\"ID\")),\n    isActive: () => Achievement(75).canBeApplied && !Pelle.isDoomed,\n    icon: MultiplierTabIcons.ACHIEVEMENT\n  },\n  achievement: {\n    // Note: This only applies to ID1\n    name: () => \"Achievement 94\",\n    multValue: dim => (dim !== null && dim !== void 0 ? dim : 1) === 1 ? Achievement(94).effectOrDefault(1) : 1,\n    isActive: () => Achievement(94).canBeApplied,\n    icon: MultiplierTabIcons.ACHIEVEMENT\n  },\n  timeStudy: {\n    name: dim => dim ? `Time Studies (ID ${dim})` : \"Time Studies\",\n    multValue: dim => {\n      const allMult = DC.D1.timesEffectsOf(TimeStudy(82), TimeStudy(92), TimeStudy(162));\n      if (dim) return dim === 4 ? allMult.times(TimeStudy(72).effectOrDefault(1)) : allMult;\n      const maxActiveDim = MultiplierTabHelper.activeDimCount(\"ID\");\n      return Decimal.pow(allMult, maxActiveDim).times(maxActiveDim >= 4 ? TimeStudy(72).effectOrDefault(1) : DC.D1);\n    },\n    isActive: () => PlayerProgress.eternityUnlocked(),\n    icon: MultiplierTabIcons.TIME_STUDY\n  },\n  eternityUpgrade: {\n    name: \"Eternity Upgrades\",\n    multValue: dim => {\n      const allMult = DC.D1.timesEffectsOf(EternityUpgrade.idMultEP, EternityUpgrade.idMultEternities, EternityUpgrade.idMultICRecords);\n      return Decimal.pow(allMult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"ID\"));\n    },\n    isActive: () => PlayerProgress.eternityUnlocked(),\n    icon: MultiplierTabIcons.UPGRADE(\"eternity\")\n  },\n  eu1: {\n    name: () => \"Unspent Eternity Points\",\n    multValue: dim => Decimal.pow(EternityUpgrade.idMultEP.effectOrDefault(1), dim ? 1 : MultiplierTabHelper.activeDimCount(\"ID\")),\n    isActive: () => EternityUpgrade.idMultEP.canBeApplied,\n    icon: MultiplierTabIcons.UPGRADE(\"eternity\")\n  },\n  eu2: {\n    name: () => \"Eternity Count\",\n    multValue: dim => Decimal.pow(EternityUpgrade.idMultEternities.effectOrDefault(1), dim ? 1 : MultiplierTabHelper.activeDimCount(\"ID\")),\n    isActive: () => EternityUpgrade.idMultEternities.canBeApplied,\n    icon: MultiplierTabIcons.UPGRADE(\"eternity\")\n  },\n  eu3: {\n    name: () => \"Infinity Challenge Records\",\n    multValue: dim => Decimal.pow(EternityUpgrade.idMultICRecords.effectOrDefault(1), dim ? 1 : MultiplierTabHelper.activeDimCount(\"ID\")),\n    isActive: () => EternityUpgrade.idMultICRecords.canBeApplied,\n    icon: MultiplierTabIcons.UPGRADE(\"eternity\")\n  },\n  infinityChallenge: {\n    name: \"Infinity Challenges\",\n    multValue: dim => {\n      const allMult = DC.D1.timesEffectsOf(InfinityChallenge(1).reward, InfinityChallenge(6).reward);\n      return Decimal.pow(allMult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"ID\"));\n    },\n    isActive: () => InfinityChallenge(1).isCompleted,\n    icon: MultiplierTabIcons.CHALLENGE(\"infinity\")\n  },\n  eternityChallenge: {\n    name: dim => dim ? `Eternity Challenges (ID ${dim})` : \" Eternity Challenges\",\n    multValue: dim => {\n      const allMult = DC.D1.timesEffectsOf(EternityChallenge(4).reward, EternityChallenge(9).reward).times(EternityChallenge(7).isRunning ? Tickspeed.perSecond : DC.D1);\n\n      if (dim) {\n        if (dim === 1) return allMult.times(EternityChallenge(2).reward.effectOrDefault(1));\n        return allMult;\n      }\n\n      const maxActiveDim = MultiplierTabHelper.activeDimCount(\"ID\");\n      return Decimal.pow(allMult, maxActiveDim).times(maxActiveDim >= 1 ? EternityChallenge(2).reward.effectOrDefault(1) : DC.D1);\n    },\n    isActive: () => EternityChallenge(2).completions > 0,\n    icon: MultiplierTabIcons.CHALLENGE(\"eternity\")\n  },\n  tickspeed: {\n    name: () => \"Tickspeed (EC7)\",\n    displayOverride: () => {\n      const tickRate = Tickspeed.perSecond;\n      const activeDims = MultiplierTabHelper.activeDimCount(\"ID\");\n      const dimString = MultiplierTabHelper.pluralizeDimensions(activeDims);\n      return `${format(tickRate, 2, 2)}/sec on ${formatInt(activeDims)} ${dimString}\n        ➜ ${formatX(tickRate.pow(activeDims), 2, 2)}`;\n    },\n    multValue: () => Tickspeed.perSecond.pow(8),\n    isActive: () => EternityChallenge(7).isRunning,\n    icon: MultiplierTabIcons.TICKSPEED\n  },\n  glyph: {\n    name: \"Glyph Effects\",\n    multValue: () => 1,\n    powValue: () => getAdjustedGlyphEffect(\"infinitypow\") * getAdjustedGlyphEffect(\"effarigdimensions\"),\n    isActive: () => PlayerProgress.realityUnlocked(),\n    icon: MultiplierTabIcons.GENERIC_GLYPH\n  },\n  alchemy: {\n    name: \"Glyph Alchemy\",\n    multValue: dim => Decimal.pow(AlchemyResource.dimensionality.effectOrDefault(1), dim ? 1 : MultiplierTabHelper.activeDimCount(\"ID\")),\n    powValue: () => AlchemyResource.infinity.effectOrDefault(1) * Ra.momentumValue,\n    isActive: () => Ra.unlocks.unlockGlyphAlchemy.canBeApplied,\n    icon: MultiplierTabIcons.ALCHEMY\n  },\n  imaginaryUpgrade: {\n    name: \"Imaginary Upgrade - Hyperbolic Apeirogon\",\n    multValue: dim => Decimal.pow(ImaginaryUpgrade(8).effectOrDefault(1), dim ? 1 : MultiplierTabHelper.activeDimCount(\"ID\")),\n    isActive: () => ImaginaryUpgrade(8).canBeApplied,\n    icon: MultiplierTabIcons.UPGRADE(\"imaginary\")\n  },\n  pelle: {\n    name: \"Pelle Rift Effects\",\n    multValue: dim => {\n      const mult = DC.D1.timesEffectsOf(PelleRifts.recursion.milestones[1]);\n      const maxActiveDim = MultiplierTabHelper.activeDimCount(\"ID\"); // This only affects ID1\n\n      const decayMult = (dim ? dim === 1 : maxActiveDim >= 1) ? PelleRifts.decay.milestones[0].effectOrDefault(1) : DC.D1;\n      return Decimal.pow(mult, dim ? 1 : maxActiveDim).times(decayMult);\n    },\n    powValue: () => PelleRifts.paradox.effectOrDefault(DC.D1).toNumber(),\n    isActive: () => Pelle.isDoomed,\n    icon: MultiplierTabIcons.PELLE\n  },\n  iap: {\n    name: \"Shop Tab Purchases\",\n    multValue: dim => Decimal.pow(ShopPurchase.allDimPurchases.currentMult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"ID\")),\n    isActive: () => ShopPurchaseData.totalSTD > 0,\n    icon: MultiplierTabIcons.IAP\n  },\n  powerConversion: {\n    name: \"Infinity Power Conversion\",\n    powValue: () => InfinityDimensions.powerConversionRate,\n    isActive: () => Currency.infinityPower.value.gt(1) && !EternityChallenge(9).isRunning,\n    icon: MultiplierTabIcons.IPOW_CONVERSION\n  },\n  nerfV: {\n    name: \"V's Reality\",\n    powValue: () => 0.5,\n    isActive: () => V.isRunning,\n    icon: MultiplierTabIcons.GENERIC_V\n  },\n  nerfCursed: {\n    name: \"Cursed Glyphs\",\n    powValue: () => getAdjustedGlyphEffect(\"curseddimensions\"),\n    isActive: () => getAdjustedGlyphEffect(\"curseddimensions\") !== 1,\n    icon: MultiplierTabIcons.SPECIFIC_GLYPH(\"cursed\")\n  },\n  nerfPelle: {\n    name: \"Doomed Reality\",\n    powValue: 0.5,\n    isActive: () => PelleStrikes.powerGalaxies.hasStrike,\n    icon: MultiplierTabIcons.PELLE\n  }\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/multiplier-tab/infinity-dimensions.js"],"names":["DC","PlayerProgress","MultiplierTabHelper","MultiplierTabIcons","ID","total","name","dim","EternityChallenge","isRunning","displayOverride","formatX","InfinityDimension","multiplier","format","productionPerSecond","multValue","InfinityDimensions","all","filter","id","isProducing","map","reduce","x","y","times","D1","isActive","eternityUnlocked","dilationEffect","baseEff","player","dilation","active","Effects","product","DilationUpgrade","dilationPenalty","Effarig","multDilation","isDilated","overlay","icon","DIMENSION","purchase","getMult","Decimal","pow","powerMultiplier","Math","floor","baseAmount","tier","PURCHASE","highestDim","activeDimCount","amount","basePurchase","purchases","min","HARDCAP_PURCHASES","baseMult","_powerMultiplier","tesseractPurchase","clampMin","Tesseracts","bought","infinityGlyphSacrifice","GlyphSacrifice","infinity","effectValue","SACRIFICE","powPurchase","powValue","ImaginaryUpgrade","effectOrDefault","canBeApplied","UPGRADE","replicanti","replicantiMult","Replicanti","areUnlocked","SPECIFIC_GLYPH","achievementMult","Achievements","power","Achievement","Pelle","isDoomed","ACHIEVEMENT","achievement","timeStudy","allMult","timesEffectsOf","TimeStudy","maxActiveDim","TIME_STUDY","eternityUpgrade","EternityUpgrade","idMultEP","idMultEternities","idMultICRecords","eu1","eu2","eu3","infinityChallenge","InfinityChallenge","reward","isCompleted","CHALLENGE","eternityChallenge","Tickspeed","perSecond","completions","tickspeed","tickRate","activeDims","dimString","pluralizeDimensions","formatInt","TICKSPEED","glyph","getAdjustedGlyphEffect","realityUnlocked","GENERIC_GLYPH","alchemy","AlchemyResource","dimensionality","Ra","momentumValue","unlocks","unlockGlyphAlchemy","ALCHEMY","imaginaryUpgrade","pelle","mult","PelleRifts","recursion","milestones","decayMult","decay","paradox","toNumber","PELLE","iap","ShopPurchase","allDimPurchases","currentMult","ShopPurchaseData","totalSTD","IAP","powerConversion","powerConversionRate","Currency","infinityPower","value","gt","IPOW_CONVERSION","nerfV","V","GENERIC_V","nerfCursed","nerfPelle","PelleStrikes","powerGalaxies","hasStrike"],"mappings":"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","sourcesContent":["import { DC } from \"../../constants\";\r\nimport { PlayerProgress } from \"../../player-progress\";\r\n\r\nimport { MultiplierTabHelper } from \"./helper-functions\";\r\nimport { MultiplierTabIcons } from \"./icons\";\r\n\r\n// See index.js for documentation\r\nexport const ID = {\r\n  total: {\r\n    name: dim => {\r\n      if (dim) return `ID ${dim} Multiplier`;\r\n      if (EternityChallenge(7).isRunning) return \"AD7 Production\";\r\n      return \"Infinity Power Production\";\r\n    },\r\n    displayOverride: dim => (dim\r\n      ? formatX(InfinityDimension(dim).multiplier, 2)\r\n      : `${format(InfinityDimension(1).productionPerSecond, 2)}/sec`\r\n    ),\r\n    multValue: dim => (dim\r\n      ? InfinityDimension(dim).multiplier\r\n      : InfinityDimensions.all\r\n        .filter(id => id.isProducing)\r\n        .map(id => id.multiplier)\r\n        .reduce((x, y) => x.times(y), DC.D1)),\r\n    isActive: dim => (dim\r\n      ? InfinityDimension(dim).isProducing\r\n      : (PlayerProgress.eternityUnlocked() || InfinityDimension(1).isProducing)),\r\n    dilationEffect: () => {\r\n      const baseEff = player.dilation.active\r\n        ? 0.75 * Effects.product(DilationUpgrade.dilationPenalty)\r\n        : 1;\r\n      return baseEff * (Effarig.isRunning ? Effarig.multDilation : 1);\r\n    },\r\n    isDilated: true,\r\n    overlay: [\"∞\", \"<i class='fa-solid fa-cube' />\"],\r\n    icon: dim => MultiplierTabIcons.DIMENSION(\"ID\", dim),\r\n  },\r\n  purchase: {\r\n    name: dim => (dim ? `Purchased ID ${dim}` : \"Purchases\"),\r\n    multValue: dim => {\r\n      const getMult = id => Decimal.pow(InfinityDimension(id).powerMultiplier,\r\n        Math.floor(InfinityDimension(id).baseAmount / 10));\r\n      if (dim) return getMult(dim);\r\n      return InfinityDimensions.all\r\n        .filter(id => id.isProducing)\r\n        .map(id => getMult(id.tier))\r\n        .reduce((x, y) => x.times(y), DC.D1);\r\n    },\r\n    isActive: () => !EternityChallenge(2).isRunning && !EternityChallenge(10).isRunning,\r\n    icon: dim => MultiplierTabIcons.PURCHASE(\"ID\", dim),\r\n  },\r\n  highestDim: {\r\n    name: () => `Amount of highest Dimension`,\r\n    displayOverride: () => {\r\n      const dim = MultiplierTabHelper.activeDimCount(\"ID\");\r\n      return `ID ${dim}, ${format(InfinityDimension(dim).amount, 2)}`;\r\n    },\r\n    multValue: () => InfinityDimension(MultiplierTabHelper.activeDimCount(\"ID\")).amount,\r\n    isActive: () => InfinityDimension(1).isProducing,\r\n    icon: MultiplierTabIcons.DIMENSION(\"ID\"),\r\n  },\r\n\r\n  basePurchase: {\r\n    name: \"Base purchases\",\r\n    multValue: dim => {\r\n      const getMult = id => {\r\n        const purchases = id === 8\r\n          ? Math.floor(InfinityDimension(id).baseAmount / 10)\r\n          : Math.min(InfinityDimensions.HARDCAP_PURCHASES, Math.floor(InfinityDimension(id).baseAmount / 10));\r\n        const baseMult = InfinityDimension(id)._powerMultiplier;\r\n        return Decimal.pow(baseMult, purchases);\r\n      };\r\n      if (dim) return getMult(dim);\r\n      return InfinityDimensions.all\r\n        .filter(id => id.isProducing)\r\n        .map(id => getMult(id.tier))\r\n        .reduce((x, y) => x.times(y), DC.D1);\r\n    },\r\n    isActive: true,\r\n    icon: MultiplierTabIcons.PURCHASE(\"baseID\"),\r\n  },\r\n  tesseractPurchase: {\r\n    name: \"Tesseracts\",\r\n    multValue: dim => {\r\n      const getMult = id => {\r\n        if (id === 8) return DC.D1;\r\n        const purchases = Math.floor(InfinityDimension(id).baseAmount / 10);\r\n        return Decimal.pow(InfinityDimension(id)._powerMultiplier,\r\n          Math.clampMin(purchases - InfinityDimensions.HARDCAP_PURCHASES, 0));\r\n      };\r\n      if (dim) return getMult(dim);\r\n      return InfinityDimensions.all\r\n        .filter(id => id.isProducing)\r\n        .map(id => getMult(id.tier))\r\n        .reduce((x, y) => x.times(y), DC.D1);\r\n    },\r\n    isActive: () => Tesseracts.bought > 0,\r\n    icon: MultiplierTabIcons.PURCHASE(\"tesseractID\"),\r\n  },\r\n  infinityGlyphSacrifice: {\r\n    name: \"Infinity Glyph sacrifice\",\r\n    multValue: () => (InfinityDimension(8).isProducing\r\n      ? Decimal.pow(GlyphSacrifice.infinity.effectValue, Math.floor(InfinityDimension(8).baseAmount / 10))\r\n      : DC.D1),\r\n    isActive: () => GlyphSacrifice.infinity.effectValue > 1,\r\n    icon: MultiplierTabIcons.SACRIFICE(\"infinity\"),\r\n  },\r\n  powPurchase: {\r\n    name: \"Imaginary Upgrade - Recollection of Intrusion\",\r\n    powValue: () => ImaginaryUpgrade(14).effectOrDefault(1),\r\n    isActive: () => ImaginaryUpgrade(14).canBeApplied,\r\n    icon: MultiplierTabIcons.UPGRADE(\"imaginary\"),\r\n  },\r\n\r\n  replicanti: {\r\n    name: \"Replicanti Multiplier\",\r\n    multValue: dim => Decimal.pow(replicantiMult(), dim ? 1 : MultiplierTabHelper.activeDimCount(\"ID\")),\r\n    isActive: () => Replicanti.areUnlocked,\r\n    icon: MultiplierTabIcons.SPECIFIC_GLYPH(\"replication\"),\r\n  },\r\n  achievementMult: {\r\n    name: \"Achievement Multiplier\",\r\n    multValue: dim => Decimal.pow(Achievements.power, dim ? 1 : MultiplierTabHelper.activeDimCount(\"ID\")),\r\n    isActive: () => Achievement(75).canBeApplied && !Pelle.isDoomed,\r\n    icon: MultiplierTabIcons.ACHIEVEMENT,\r\n  },\r\n  achievement: {\r\n    // Note: This only applies to ID1\r\n    name: () => \"Achievement 94\",\r\n    multValue: dim => ((dim ?? 1) === 1 ? Achievement(94).effectOrDefault(1) : 1),\r\n    isActive: () => Achievement(94).canBeApplied,\r\n    icon: MultiplierTabIcons.ACHIEVEMENT,\r\n  },\r\n  timeStudy: {\r\n    name: dim => (dim ? `Time Studies (ID ${dim})` : \"Time Studies\"),\r\n    multValue: dim => {\r\n      const allMult = DC.D1.timesEffectsOf(\r\n        TimeStudy(82),\r\n        TimeStudy(92),\r\n        TimeStudy(162)\r\n      );\r\n      if (dim) return dim === 4 ? allMult.times(TimeStudy(72).effectOrDefault(1)) : allMult;\r\n      const maxActiveDim = MultiplierTabHelper.activeDimCount(\"ID\");\r\n      return Decimal.pow(allMult, maxActiveDim).times(maxActiveDim >= 4 ? TimeStudy(72).effectOrDefault(1) : DC.D1);\r\n    },\r\n    isActive: () => PlayerProgress.eternityUnlocked(),\r\n    icon: MultiplierTabIcons.TIME_STUDY,\r\n  },\r\n  eternityUpgrade: {\r\n    name: \"Eternity Upgrades\",\r\n    multValue: dim => {\r\n      const allMult = DC.D1.timesEffectsOf(\r\n        EternityUpgrade.idMultEP,\r\n        EternityUpgrade.idMultEternities,\r\n        EternityUpgrade.idMultICRecords,\r\n      );\r\n      return Decimal.pow(allMult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"ID\"));\r\n    },\r\n    isActive: () => PlayerProgress.eternityUnlocked(),\r\n    icon: MultiplierTabIcons.UPGRADE(\"eternity\"),\r\n  },\r\n\r\n  eu1: {\r\n    name: () => \"Unspent Eternity Points\",\r\n    multValue: dim => Decimal.pow(EternityUpgrade.idMultEP.effectOrDefault(1),\r\n      dim ? 1 : MultiplierTabHelper.activeDimCount(\"ID\")),\r\n    isActive: () => EternityUpgrade.idMultEP.canBeApplied,\r\n    icon: MultiplierTabIcons.UPGRADE(\"eternity\"),\r\n  },\r\n  eu2: {\r\n    name: () => \"Eternity Count\",\r\n    multValue: dim => Decimal.pow(EternityUpgrade.idMultEternities.effectOrDefault(1),\r\n      dim ? 1 : MultiplierTabHelper.activeDimCount(\"ID\")),\r\n    isActive: () => EternityUpgrade.idMultEternities.canBeApplied,\r\n    icon: MultiplierTabIcons.UPGRADE(\"eternity\"),\r\n  },\r\n  eu3: {\r\n    name: () => \"Infinity Challenge Records\",\r\n    multValue: dim => Decimal.pow(EternityUpgrade.idMultICRecords.effectOrDefault(1),\r\n      dim ? 1 : MultiplierTabHelper.activeDimCount(\"ID\")),\r\n    isActive: () => EternityUpgrade.idMultICRecords.canBeApplied,\r\n    icon: MultiplierTabIcons.UPGRADE(\"eternity\"),\r\n  },\r\n\r\n  infinityChallenge: {\r\n    name: \"Infinity Challenges\",\r\n    multValue: dim => {\r\n      const allMult = DC.D1.timesEffectsOf(\r\n        InfinityChallenge(1).reward,\r\n        InfinityChallenge(6).reward,\r\n      );\r\n      return Decimal.pow(allMult, dim ? 1 : MultiplierTabHelper.activeDimCount(\"ID\"));\r\n    },\r\n    isActive: () => InfinityChallenge(1).isCompleted,\r\n    icon: MultiplierTabIcons.CHALLENGE(\"infinity\"),\r\n  },\r\n  eternityChallenge: {\r\n    name: dim => (dim ? `Eternity Challenges (ID ${dim})` : \" Eternity Challenges\"),\r\n    multValue: dim => {\r\n      const allMult = DC.D1.timesEffectsOf(\r\n        EternityChallenge(4).reward,\r\n        EternityChallenge(9).reward,\r\n      ).times(EternityChallenge(7).isRunning ? Tickspeed.perSecond : DC.D1);\r\n      if (dim) {\r\n        if (dim === 1) return allMult.times(EternityChallenge(2).reward.effectOrDefault(1));\r\n        return allMult;\r\n      }\r\n      const maxActiveDim = MultiplierTabHelper.activeDimCount(\"ID\");\r\n      return Decimal.pow(allMult, maxActiveDim)\r\n        .times(maxActiveDim >= 1 ? EternityChallenge(2).reward.effectOrDefault(1) : DC.D1);\r\n    },\r\n    isActive: () => EternityChallenge(2).completions > 0,\r\n    icon: MultiplierTabIcons.CHALLENGE(\"eternity\"),\r\n  },\r\n  tickspeed: {\r\n    name: () => \"Tickspeed (EC7)\",\r\n    displayOverride: () => {\r\n      const tickRate = Tickspeed.perSecond;\r\n      const activeDims = MultiplierTabHelper.activeDimCount(\"ID\");\r\n      const dimString = MultiplierTabHelper.pluralizeDimensions(activeDims);\r\n      return `${format(tickRate, 2, 2)}/sec on ${formatInt(activeDims)} ${dimString}\r\n        ➜ ${formatX(tickRate.pow(activeDims), 2, 2)}`;\r\n    },\r\n    multValue: () => Tickspeed.perSecond.pow(8),\r\n    isActive: () => EternityChallenge(7).isRunning,\r\n    icon: MultiplierTabIcons.TICKSPEED,\r\n  },\r\n  glyph: {\r\n    name: \"Glyph Effects\",\r\n    multValue: () => 1,\r\n    powValue: () => getAdjustedGlyphEffect(\"infinitypow\") * getAdjustedGlyphEffect(\"effarigdimensions\"),\r\n    isActive: () => PlayerProgress.realityUnlocked(),\r\n    icon: MultiplierTabIcons.GENERIC_GLYPH,\r\n  },\r\n  alchemy: {\r\n    name: \"Glyph Alchemy\",\r\n    multValue: dim => Decimal.pow(AlchemyResource.dimensionality.effectOrDefault(1),\r\n      dim ? 1 : MultiplierTabHelper.activeDimCount(\"ID\")),\r\n    powValue: () => AlchemyResource.infinity.effectOrDefault(1) * Ra.momentumValue,\r\n    isActive: () => Ra.unlocks.unlockGlyphAlchemy.canBeApplied,\r\n    icon: MultiplierTabIcons.ALCHEMY,\r\n  },\r\n  imaginaryUpgrade: {\r\n    name: \"Imaginary Upgrade - Hyperbolic Apeirogon\",\r\n    multValue: dim => Decimal.pow(ImaginaryUpgrade(8).effectOrDefault(1),\r\n      dim ? 1 : MultiplierTabHelper.activeDimCount(\"ID\")),\r\n    isActive: () => ImaginaryUpgrade(8).canBeApplied,\r\n    icon: MultiplierTabIcons.UPGRADE(\"imaginary\"),\r\n  },\r\n  pelle: {\r\n    name: \"Pelle Rift Effects\",\r\n    multValue: dim => {\r\n      const mult = DC.D1.timesEffectsOf(PelleRifts.recursion.milestones[1]);\r\n      const maxActiveDim = MultiplierTabHelper.activeDimCount(\"ID\");\r\n      // This only affects ID1\r\n      const decayMult = ((dim ? dim === 1 : maxActiveDim >= 1)\r\n        ? PelleRifts.decay.milestones[0].effectOrDefault(1)\r\n        : DC.D1);\r\n      return Decimal.pow(mult, dim ? 1 : maxActiveDim).times(decayMult);\r\n    },\r\n    powValue: () => PelleRifts.paradox.effectOrDefault(DC.D1).toNumber(),\r\n    isActive: () => Pelle.isDoomed,\r\n    icon: MultiplierTabIcons.PELLE,\r\n  },\r\n  iap: {\r\n    name: \"Shop Tab Purchases\",\r\n    multValue: dim => Decimal.pow(ShopPurchase.allDimPurchases.currentMult,\r\n      dim ? 1 : MultiplierTabHelper.activeDimCount(\"ID\")),\r\n    isActive: () => ShopPurchaseData.totalSTD > 0,\r\n    icon: MultiplierTabIcons.IAP,\r\n  },\r\n\r\n  powerConversion: {\r\n    name: \"Infinity Power Conversion\",\r\n    powValue: () => InfinityDimensions.powerConversionRate,\r\n    isActive: () => Currency.infinityPower.value.gt(1) && !EternityChallenge(9).isRunning,\r\n    icon: MultiplierTabIcons.IPOW_CONVERSION,\r\n  },\r\n\r\n  nerfV: {\r\n    name: \"V's Reality\",\r\n    powValue: () => 0.5,\r\n    isActive: () => V.isRunning,\r\n    icon: MultiplierTabIcons.GENERIC_V,\r\n  },\r\n  nerfCursed: {\r\n    name: \"Cursed Glyphs\",\r\n    powValue: () => getAdjustedGlyphEffect(\"curseddimensions\"),\r\n    isActive: () => getAdjustedGlyphEffect(\"curseddimensions\") !== 1,\r\n    icon: MultiplierTabIcons.SPECIFIC_GLYPH(\"cursed\"),\r\n  },\r\n  nerfPelle: {\r\n    name: \"Doomed Reality\",\r\n    powValue: 0.5,\r\n    isActive: () => PelleStrikes.powerGalaxies.hasStrike,\r\n    icon: MultiplierTabIcons.PELLE,\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}