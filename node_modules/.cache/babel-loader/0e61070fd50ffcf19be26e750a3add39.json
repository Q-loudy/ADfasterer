{"ast":null,"code":"export default {\n  name: \"RealityButton\",\n\n  data() {\n    return {\n      canReality: false,\n      showSpecialEffect: false,\n      hasRealityStudy: false,\n      machinesGained: new Decimal(),\n      projectedRM: new Decimal(),\n      newIMCap: 0,\n      realityTime: 0,\n      glyphLevel: 0,\n      nextGlyphPercent: 0,\n      nextMachineEP: 0,\n      shardsGained: 0,\n      currentShardsRate: 0,\n      bestShardRate: 0,\n      bestShardRateVal: 0,\n      ppGained: 0,\n      celestialRunText: [\"\", \"\", \"\", \"\", \"\"]\n    };\n  },\n\n  computed: {\n    formatMachinesGained() {\n      if (this.machinesGained.gt(0)) return `Machines gained: ${format(this.machinesGained, 2)}`;\n      return \"No Machines gained\";\n    },\n\n    formatMachineStats() {\n      if (!PlayerProgress.realityUnlocked() && this.nextMachineEP.gt(\"1e8000\")) {\n        return `(Capped this Reality!)`;\n      }\n\n      if (this.machinesGained.gt(0) && this.machinesGained.lt(100)) {\n        if (simulatedRealityCount(false) === 0) return `(Next at ${format(this.nextMachineEP, 2)} EP)`;\n        return `(Next ${formatInt(simulatedRealityCount(false) + 1)} at ${format(this.nextMachineEP, 2)} EP)`;\n      }\n\n      if (this.machinesGained.eq(0) && this.newIMCap === 0) {\n        return `(Projected: ${format(this.projectedRM, 2)} RM)`;\n      }\n\n      if (this.newIMCap !== 0) {\n        return `(iM Cap: ${formatMachines(0, this.newIMCap)})`;\n      }\n\n      if (this.machinesGained.lt(Number.MAX_VALUE)) {\n        return `(${format(this.machinesGained.divide(this.realityTime), 2, 2)} RM/min)`;\n      }\n\n      return \"\";\n    },\n\n    formatGlyphLevel() {\n      if (this.glyphLevel >= 10000) return `Glyph level: ${formatInt(this.glyphLevel)}`;\n      return `Glyph level: ${formatInt(this.glyphLevel)} (${this.nextGlyphPercent} to next)`;\n    },\n\n    showShardsRate() {\n      return this.currentShardsRate;\n    },\n\n    shardsGainedText() {\n      return quantify(\"Relic Shard\", this.shardsGained, 2);\n    },\n\n    classObject() {\n      return {\n        \"c-reality-button--unlocked\": this.canReality,\n        \"c-reality-button--locked\": !this.canReality,\n        \"c-reality-button--special\": this.showSpecialEffect\n      };\n    }\n\n  },\n  methods: {\n    percentToNextGlyphLevelText() {\n      const glyphState = getGlyphLevelInputs();\n      let level = glyphState.actualLevel;\n      if (!isFinite(level)) level = 0;\n      const decimalPoints = this.glyphLevel > 1000 ? 0 : 1;\n      return `${formatPercents(Math.min(level - Math.floor(level), 0.999), decimalPoints)}`;\n    },\n\n    update() {\n      this.hasRealityStudy = TimeStudy.reality.isBought;\n      this.canReality = isRealityAvailable();\n      this.showSpecialEffect = this.hasSpecialReward();\n\n      if (!this.canReality) {\n        this.shardsGained = 0;\n        return;\n      }\n\n      function EPforRM(rm) {\n        const adjusted = Decimal.divide(rm, MachineHandler.realityMachineMultiplier);\n        if (adjusted.lte(1)) return Decimal.pow10(4000);\n        if (adjusted.lte(10)) return Decimal.pow10(4000 / 27 * (adjusted.toNumber() + 26));\n        let result = Decimal.pow10(4000 * (adjusted.log10() / 3 + 1));\n\n        if (!PlayerProgress.realityUnlocked() && result.gte(\"1e6000\")) {\n          result = result.div(\"1e6000\").pow(4).times(\"1e6000\");\n        }\n\n        return result;\n      }\n\n      const multiplier = simulatedRealityCount(false) + 1;\n      this.projectedRM = MachineHandler.gainedRealityMachines.times(multiplier).clampMax(MachineHandler.hardcapRM);\n      this.newIMCap = MachineHandler.projectedIMCap;\n      this.machinesGained = this.projectedRM.clampMax(MachineHandler.distanceToRMCap);\n      this.realityTime = Time.thisRealityRealTime.totalMinutes;\n      this.glyphLevel = gainedGlyphLevel().actualLevel;\n      this.nextGlyphPercent = this.percentToNextGlyphLevelText();\n      this.nextMachineEP = EPforRM(Decimal.divide(this.machinesGained, multiplier).plus(1));\n      this.ppGained = multiplier;\n      this.shardsGained = Effarig.shardsGained * multiplier;\n      this.currentShardsRate = this.shardsGained / Time.thisRealityRealTime.totalMinutes;\n      this.bestShardRate = player.records.thisReality.bestRSmin * multiplier;\n      this.bestShardRateVal = player.records.thisReality.bestRSminVal * multiplier;\n      const teresaReward = this.formatScalingMultiplierText(\"Glyph Sacrifice\", Teresa.runRewardMultiplier, Math.max(Teresa.runRewardMultiplier, Teresa.rewardMultiplier(Currency.antimatter.value)));\n      const teresaThreshold = this.formatThresholdText(Teresa.rewardMultiplier(Currency.antimatter.value) > Teresa.runRewardMultiplier, player.celestials.teresa.bestRunAM, \"antimatter\");\n      this.celestialRunText = [[Teresa.isRunning, teresaReward, teresaThreshold]];\n    },\n\n    handleClick() {\n      if (this.canReality) {\n        requestManualReality();\n      }\n    },\n\n    formatScalingMultiplierText(resource, before, after) {\n      return `${resource} ${formatX(before, 2, 2)} âžœ ${formatX(after, 2, 2)}`;\n    },\n\n    formatThresholdText(condition, threshold, resourceName) {\n      if (condition) return \"\";\n      return `(${format(threshold, 2, 2)} ${resourceName} to improve)`;\n    },\n\n    // Make the button have a visual animation if Realitying will give a reward\n    hasSpecialReward() {\n      if (Teresa.isRunning && Teresa.rewardMultiplier(Currency.antimatter.value) > Teresa.runRewardMultiplier) {\n        return true;\n      }\n\n      return Currency.eternityPoints.value.exponent > 4000 && (Effarig.isRunning && !EffarigUnlock.reality.isUnlocked || Enslaved.isRunning && !Enslaved.isCompleted);\n    }\n\n  }\n};","map":{"version":3,"sources":["RealityButton.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nexport default {\r\n  name: \"RealityButton\",\r\n  data() {\r\n    return {\r\n      canReality: false,\r\n      showSpecialEffect: false,\r\n      hasRealityStudy: false,\r\n      machinesGained: new Decimal(),\r\n      projectedRM: new Decimal(),\r\n      newIMCap: 0,\r\n      realityTime: 0,\r\n      glyphLevel: 0,\r\n      nextGlyphPercent: 0,\r\n      nextMachineEP: 0,\r\n      shardsGained: 0,\r\n      currentShardsRate: 0,\r\n      bestShardRate: 0,\r\n      bestShardRateVal: 0,\r\n      ppGained: 0,\r\n      celestialRunText: [\"\", \"\", \"\", \"\", \"\"]\r\n    };\r\n  },\r\n  computed: {\r\n    formatMachinesGained() {\r\n      if (this.machinesGained.gt(0)) return `Machines gained: ${format(this.machinesGained, 2)}`;\r\n      return \"No Machines gained\";\r\n    },\r\n    formatMachineStats() {\r\n      if (!PlayerProgress.realityUnlocked() && this.nextMachineEP.gt(\"1e8000\")) {\r\n        return `(Capped this Reality!)`;\r\n      }\r\n      if (this.machinesGained.gt(0) && this.machinesGained.lt(100)) {\r\n        if (simulatedRealityCount(false) === 0) return `(Next at ${format(this.nextMachineEP, 2)} EP)`;\r\n        return `(Next ${formatInt(simulatedRealityCount(false) + 1)} at ${format(this.nextMachineEP, 2)} EP)`;\r\n      }\r\n      if (this.machinesGained.eq(0) && this.newIMCap === 0) {\r\n        return `(Projected: ${format(this.projectedRM, 2)} RM)`;\r\n      }\r\n      if (this.newIMCap !== 0) {\r\n        return `(iM Cap: ${formatMachines(0, this.newIMCap)})`;\r\n      }\r\n      if (this.machinesGained.lt(Number.MAX_VALUE)) {\r\n        return `(${format(this.machinesGained.divide(this.realityTime), 2, 2)} RM/min)`;\r\n      }\r\n      return \"\";\r\n    },\r\n    formatGlyphLevel() {\r\n      if (this.glyphLevel >= 10000) return `Glyph level: ${formatInt(this.glyphLevel)}`;\r\n      return `Glyph level: ${formatInt(this.glyphLevel)} (${this.nextGlyphPercent} to next)`;\r\n    },\r\n    showShardsRate() {\r\n      return this.currentShardsRate;\r\n    },\r\n    shardsGainedText() {\r\n      return quantify(\"Relic Shard\", this.shardsGained, 2);\r\n    },\r\n    classObject() {\r\n      return {\r\n        \"c-reality-button--unlocked\": this.canReality,\r\n        \"c-reality-button--locked\": !this.canReality,\r\n        \"c-reality-button--special\": this.showSpecialEffect,\r\n      };\r\n    }\r\n  },\r\n  methods: {\r\n    percentToNextGlyphLevelText() {\r\n      const glyphState = getGlyphLevelInputs();\r\n      let level = glyphState.actualLevel;\r\n      if (!isFinite(level)) level = 0;\r\n      const decimalPoints = this.glyphLevel > 1000 ? 0 : 1;\r\n      return `${formatPercents(Math.min(((level - Math.floor(level))), 0.999), decimalPoints)}`;\r\n    },\r\n    update() {\r\n      this.hasRealityStudy = TimeStudy.reality.isBought;\r\n      this.canReality = isRealityAvailable();\r\n      this.showSpecialEffect = this.hasSpecialReward();\r\n      if (!this.canReality) {\r\n        this.shardsGained = 0;\r\n        return;\r\n      }\r\n      function EPforRM(rm) {\r\n        const adjusted = Decimal.divide(rm, MachineHandler.realityMachineMultiplier);\r\n        if (adjusted.lte(1)) return Decimal.pow10(4000);\r\n        if (adjusted.lte(10)) return Decimal.pow10(4000 / 27 * (adjusted.toNumber() + 26));\r\n        let result = Decimal.pow10(4000 * (adjusted.log10() / 3 + 1));\r\n        if (!PlayerProgress.realityUnlocked() && result.gte(\"1e6000\")) {\r\n          result = result.div(\"1e6000\").pow(4).times(\"1e6000\");\r\n        }\r\n        return result;\r\n      }\r\n\r\n      const multiplier = simulatedRealityCount(false) + 1;\r\n      this.projectedRM = MachineHandler.gainedRealityMachines.times(multiplier)\r\n        .clampMax(MachineHandler.hardcapRM);\r\n      this.newIMCap = MachineHandler.projectedIMCap;\r\n      this.machinesGained = this.projectedRM.clampMax(MachineHandler.distanceToRMCap);\r\n      this.realityTime = Time.thisRealityRealTime.totalMinutes;\r\n      this.glyphLevel = gainedGlyphLevel().actualLevel;\r\n      this.nextGlyphPercent = this.percentToNextGlyphLevelText();\r\n      this.nextMachineEP = EPforRM(Decimal.divide(this.machinesGained, multiplier).plus(1));\r\n      this.ppGained = multiplier;\r\n      this.shardsGained = Effarig.shardsGained * multiplier;\r\n      this.currentShardsRate = (this.shardsGained / Time.thisRealityRealTime.totalMinutes);\r\n      this.bestShardRate = player.records.thisReality.bestRSmin * multiplier;\r\n      this.bestShardRateVal = player.records.thisReality.bestRSminVal * multiplier;\r\n\r\n      const teresaReward = this.formatScalingMultiplierText(\r\n        \"Glyph Sacrifice\",\r\n        Teresa.runRewardMultiplier,\r\n        Math.max(Teresa.runRewardMultiplier, Teresa.rewardMultiplier(Currency.antimatter.value)));\r\n      const teresaThreshold = this.formatThresholdText(\r\n        Teresa.rewardMultiplier(Currency.antimatter.value) > Teresa.runRewardMultiplier,\r\n        player.celestials.teresa.bestRunAM,\r\n        \"antimatter\");\r\n      this.celestialRunText = [\r\n        [Teresa.isRunning, teresaReward, teresaThreshold]];\r\n    },\r\n    handleClick() {\r\n      if (this.canReality) {\r\n        requestManualReality();\r\n      }\r\n    },\r\n    formatScalingMultiplierText(resource, before, after) {\r\n      return `${resource} ${formatX(before, 2, 2)} âžœ ${formatX(after, 2, 2)}`;\r\n    },\r\n    formatThresholdText(condition, threshold, resourceName) {\r\n      if (condition) return \"\";\r\n      return `(${format(threshold, 2, 2)} ${resourceName} to improve)`;\r\n    },\r\n    // Make the button have a visual animation if Realitying will give a reward\r\n    hasSpecialReward() {\r\n      if (Teresa.isRunning && Teresa.rewardMultiplier(Currency.antimatter.value) > Teresa.runRewardMultiplier) {\r\n        return true;\r\n      }\r\n      return Currency.eternityPoints.value.exponent > 4000 &&\r\n        ((Effarig.isRunning && !EffarigUnlock.reality.isUnlocked) || (Enslaved.isRunning && !Enslaved.isCompleted));\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-reality-button\">\r\n    <button\r\n      class=\"c-reality-button infotooltip\"\r\n      :class=\"classObject\"\r\n      @click=\"handleClick\"\r\n    >\r\n      <div class=\"l-reality-button__contents\">\r\n        <template v-if=\"canReality\">\r\n          <div class=\"c-reality-button__header\">\r\n            Make a new Reality\r\n          </div>\r\n          <div>{{ formatMachinesGained }} {{ formatMachineStats }}</div>\r\n          <div>{{ formatGlyphLevel }}</div>\r\n        </template>\r\n        <template v-else-if=\"hasRealityStudy\">\r\n          <div>Get {{ format(\"1e4000\") }} Eternity Points to unlock a new Reality</div>\r\n        </template>\r\n        <template v-else>\r\n          <div>Purchase the study in the Eternity tab to unlock a new Reality</div>\r\n        </template>\r\n        <div\r\n          v-if=\"canReality\"\r\n          class=\"infotooltiptext\"\r\n        >\r\n          <div>Other resources gained:</div>\r\n          <div>{{ quantifyInt(\"Perk Point\", ppGained) }}</div>\r\n          <div v-if=\"shardsGained !== 0\">\r\n            {{ shardsGainedText }} ({{ format(currentShardsRate, 2) }}/min)\r\n            <br>\r\n            Peak: {{ format(bestShardRate, 2) }}/min at {{ format(bestShardRateVal, 2) }} RS\r\n          </div>\r\n          <div\r\n            v-for=\"(celestialInfo, i) in celestialRunText\"\r\n            :key=\"i\"\r\n          >\r\n            <span v-if=\"celestialInfo[0]\">\r\n              {{ celestialInfo[1] }}\r\n              <br>\r\n              {{ celestialInfo[2] }}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </button>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/ui-modes/prestige-header"},"metadata":{},"sourceType":"module"}