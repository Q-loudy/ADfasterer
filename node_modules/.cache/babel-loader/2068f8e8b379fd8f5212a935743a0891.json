{"ast":null,"code":"export class DimensionState {\n  constructor(getData, tier) {\n    this._tier = tier;\n    this._getData = getData;\n    const DISPLAY_NAMES = [null, \"First\", \"Second\", \"Third\", \"Fourth\", \"Fifth\", \"Sixth\", \"Seventh\", \"Eighth\"];\n    this._displayName = DISPLAY_NAMES[tier];\n    const SHORT_DISPLAY_NAMES = [null, \"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\", \"8th\"];\n    this._shortDisplayName = SHORT_DISPLAY_NAMES[tier];\n  }\n\n  get tier() {\n    return this._tier;\n  }\n\n  get displayName() {\n    return this._displayName;\n  }\n\n  get shortDisplayName() {\n    return this._shortDisplayName;\n  }\n\n  get data() {\n    return this._getData()[this.tier - 1];\n  }\n  /** @returns {Decimal} */\n\n\n  get amount() {\n    return this.data.amount;\n  }\n  /** @param {Decimal} value */\n\n\n  set amount(value) {\n    this.data.amount = value;\n  }\n  /** @returns {number} */\n\n\n  get bought() {\n    return this.data.bought;\n  }\n  /** @param {number} value */\n\n\n  set bought(value) {\n    this.data.bought = value;\n  }\n  /** @abstract */\n\n\n  get productionPerSecond() {\n    throw new NotImplementedError();\n  }\n\n  get productionPerRealSecond() {\n    return this.productionPerSecond.times(getGameSpeedupForDisplay());\n  }\n\n  productionForDiff(diff) {\n    return this.productionPerSecond.times(diff / 1000);\n  }\n\n  produceCurrency(currency, diff) {\n    currency.add(this.productionForDiff(diff));\n  }\n\n  produceDimensions(dimension, diff) {\n    dimension.amount = dimension.amount.plus(this.productionForDiff(diff));\n  }\n\n  static get dimensionCount() {\n    return 8;\n  }\n\n  static createAccessor() {\n    const index = Array.range(1, this.dimensionCount).map(tier => new this(tier));\n    index.unshift(null);\n\n    const accessor = tier => index[tier];\n\n    accessor.index = index;\n    return accessor;\n  }\n\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/dimensions/dimension.js"],"names":["DimensionState","constructor","getData","tier","_tier","_getData","DISPLAY_NAMES","_displayName","SHORT_DISPLAY_NAMES","_shortDisplayName","displayName","shortDisplayName","data","amount","value","bought","productionPerSecond","NotImplementedError","productionPerRealSecond","times","getGameSpeedupForDisplay","productionForDiff","diff","produceCurrency","currency","add","produceDimensions","dimension","plus","dimensionCount","createAccessor","index","Array","range","map","unshift","accessor"],"mappings":"AAAA,OAAO,MAAMA,cAAN,CAAqB;AAC1BC,EAAAA,WAAW,CAACC,OAAD,EAAUC,IAAV,EAAgB;AACzB,SAAKC,KAAL,GAAaD,IAAb;AACA,SAAKE,QAAL,GAAgBH,OAAhB;AACA,UAAMI,aAAa,GAAG,CAAC,IAAD,EAAO,OAAP,EAAgB,QAAhB,EAA0B,OAA1B,EAAmC,QAAnC,EAA6C,OAA7C,EAAsD,OAAtD,EAA+D,SAA/D,EAA0E,QAA1E,CAAtB;AACA,SAAKC,YAAL,GAAoBD,aAAa,CAACH,IAAD,CAAjC;AACA,UAAMK,mBAAmB,GAAG,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,EAAqB,KAArB,EAA4B,KAA5B,EAAmC,KAAnC,EAA0C,KAA1C,EAAiD,KAAjD,EAAwD,KAAxD,CAA5B;AACA,SAAKC,iBAAL,GAAyBD,mBAAmB,CAACL,IAAD,CAA5C;AACD;;AAEO,MAAJA,IAAI,GAAG;AAAE,WAAO,KAAKC,KAAZ;AAAoB;;AAElB,MAAXM,WAAW,GAAG;AAAE,WAAO,KAAKH,YAAZ;AAA2B;;AAC3B,MAAhBI,gBAAgB,GAAG;AAAE,WAAO,KAAKF,iBAAZ;AAAgC;;AAEjD,MAAJG,IAAI,GAAG;AAAE,WAAO,KAAKP,QAAL,GAAgB,KAAKF,IAAL,GAAY,CAA5B,CAAP;AAAwC;AAErD;;;AACU,MAANU,MAAM,GAAG;AAAE,WAAO,KAAKD,IAAL,CAAUC,MAAjB;AAA0B;AACzC;;;AACU,MAANA,MAAM,CAACC,KAAD,EAAQ;AAAE,SAAKF,IAAL,CAAUC,MAAV,GAAmBC,KAAnB;AAA2B;AAE/C;;;AACU,MAANC,MAAM,GAAG;AAAE,WAAO,KAAKH,IAAL,CAAUG,MAAjB;AAA0B;AACzC;;;AACU,MAANA,MAAM,CAACD,KAAD,EAAQ;AAAE,SAAKF,IAAL,CAAUG,MAAV,GAAmBD,KAAnB;AAA2B;AAE/C;;;AACuB,MAAnBE,mBAAmB,GAAG;AAAE,UAAM,IAAIC,mBAAJ,EAAN;AAAkC;;AAEnC,MAAvBC,uBAAuB,GAAG;AAC5B,WAAO,KAAKF,mBAAL,CAAyBG,KAAzB,CAA+BC,wBAAwB,EAAvD,CAAP;AACD;;AAEDC,EAAAA,iBAAiB,CAACC,IAAD,EAAO;AACtB,WAAO,KAAKN,mBAAL,CAAyBG,KAAzB,CAA+BG,IAAI,GAAG,IAAtC,CAAP;AACD;;AAEDC,EAAAA,eAAe,CAACC,QAAD,EAAWF,IAAX,EAAiB;AAC9BE,IAAAA,QAAQ,CAACC,GAAT,CAAa,KAAKJ,iBAAL,CAAuBC,IAAvB,CAAb;AACD;;AAEDI,EAAAA,iBAAiB,CAACC,SAAD,EAAYL,IAAZ,EAAkB;AACjCK,IAAAA,SAAS,CAACd,MAAV,GAAmBc,SAAS,CAACd,MAAV,CAAiBe,IAAjB,CAAsB,KAAKP,iBAAL,CAAuBC,IAAvB,CAAtB,CAAnB;AACD;;AAEwB,aAAdO,cAAc,GAAG;AAAE,WAAO,CAAP;AAAW;;AAEpB,SAAdC,cAAc,GAAG;AACtB,UAAMC,KAAK,GAAGC,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAe,KAAKJ,cAApB,EAAoCK,GAApC,CAAwC/B,IAAI,IAAI,IAAI,IAAJ,CAASA,IAAT,CAAhD,CAAd;AACA4B,IAAAA,KAAK,CAACI,OAAN,CAAc,IAAd;;AACA,UAAMC,QAAQ,GAAGjC,IAAI,IAAI4B,KAAK,CAAC5B,IAAD,CAA9B;;AACAiC,IAAAA,QAAQ,CAACL,KAAT,GAAiBA,KAAjB;AACA,WAAOK,QAAP;AACD;;AAtDyB","sourcesContent":["export class DimensionState {\r\n  constructor(getData, tier) {\r\n    this._tier = tier;\r\n    this._getData = getData;\r\n    const DISPLAY_NAMES = [null, \"First\", \"Second\", \"Third\", \"Fourth\", \"Fifth\", \"Sixth\", \"Seventh\", \"Eighth\"];\r\n    this._displayName = DISPLAY_NAMES[tier];\r\n    const SHORT_DISPLAY_NAMES = [null, \"1st\", \"2nd\", \"3rd\", \"4th\", \"5th\", \"6th\", \"7th\", \"8th\"];\r\n    this._shortDisplayName = SHORT_DISPLAY_NAMES[tier];\r\n  }\r\n\r\n  get tier() { return this._tier; }\r\n\r\n  get displayName() { return this._displayName; }\r\n  get shortDisplayName() { return this._shortDisplayName; }\r\n\r\n  get data() { return this._getData()[this.tier - 1]; }\r\n\r\n  /** @returns {Decimal} */\r\n  get amount() { return this.data.amount; }\r\n  /** @param {Decimal} value */\r\n  set amount(value) { this.data.amount = value; }\r\n\r\n  /** @returns {number} */\r\n  get bought() { return this.data.bought; }\r\n  /** @param {number} value */\r\n  set bought(value) { this.data.bought = value; }\r\n\r\n  /** @abstract */\r\n  get productionPerSecond() { throw new NotImplementedError(); }\r\n\r\n  get productionPerRealSecond() {\r\n    return this.productionPerSecond.times(getGameSpeedupForDisplay());\r\n  }\r\n\r\n  productionForDiff(diff) {\r\n    return this.productionPerSecond.times(diff / 1000);\r\n  }\r\n\r\n  produceCurrency(currency, diff) {\r\n    currency.add(this.productionForDiff(diff));\r\n  }\r\n\r\n  produceDimensions(dimension, diff) {\r\n    dimension.amount = dimension.amount.plus(this.productionForDiff(diff));\r\n  }\r\n\r\n  static get dimensionCount() { return 8; }\r\n\r\n  static createAccessor() {\r\n    const index = Array.range(1, this.dimensionCount).map(tier => new this(tier));\r\n    index.unshift(null);\r\n    const accessor = tier => index[tier];\r\n    accessor.index = index;\r\n    return accessor;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}