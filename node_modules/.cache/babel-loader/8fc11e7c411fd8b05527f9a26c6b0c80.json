{"ast":null,"code":"import _objectSpread from \"C:/Games/ADFasterer/ADfasterer/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.string.trim-end.js\";\nimport \"core-js/modules/es.string.trim-start.js\";\nimport { DC } from \"../../constants\";\nimport wordShift from \"../../word-shift\";\nexport function emphasizeEnd(fraction) {\n  return Math.pow(fraction, 10);\n}\nexport function vUnlockProgress(index) {\n  if (VUnlocks.vAchievementUnlock.isUnlocked) return 1;\n  const db = Object.values(GameDatabase.celestials.v.mainUnlock).find(e => e.id === index);\n  return db.progress();\n}\nexport function vUnlockLegendLabel(complete, index) {\n  const db = Object.values(GameDatabase.celestials.v.mainUnlock).find(e => e.id === index);\n  if (complete >= 1) return `${db.name} condition for V`;\n  return `Reach ${db.format(db.resource())} / ${db.format(db.requirement)} ${db.name}.`;\n} // Angle is defined/rescaled so that 0 is the first rift, 4 is the last one, and all 5 are equally spaced around\n// a circle. Starts at top-left and goes clockwise, reference point is that 3 is directly down. It's allowed to be\n// non-integer since it's also used for off-center curve control points\n\nexport function pelleStarPosition(angle, scale) {\n  const pelleCenter = new Vector(750, 550);\n  const theta = (0.7 - 0.4 * angle) * Math.PI;\n  return new Vector(scale * Math.cos(theta), -scale * Math.sin(theta)).plus(pelleCenter);\n} // Makes curved spokes connecting the center of Pelle to all the outer nodes corresponding to rifts\n\nfunction pelleStarConnector(index, fillColor, isOverfill) {\n  return function () {\n    // This should be half of the second argument used in pelleStarPosition when used to define rift node positions\n    const pelleSize = 75;\n    const pathStart = (0.4 * index + 0.5) * Math.PI; // Technically 2 should be about 1.929 and 4/3 should be about 1.328; exact values for both of these leave a small\n    // gap between the path and the node, so we round up a bit to make those go away\n\n    const pathEnd = pathStart + 2;\n    const path = LogarithmicSpiral.fromPolarEndpoints(pelleStarPosition(index + 0.5, pelleSize), pathStart, pelleSize, pathEnd, 4 / 3 * pelleSize); // The +0.01 prevents curve decomposition errors from happening\n\n    const pathPadStart = path.angleFromRadius(pelleSize + 0.01) - pathStart;\n    const pathPadEnd = pathEnd - path.angleFromRadius(4 / 3 * pelleSize);\n    return {\n      pathStart,\n      pathEnd,\n      path,\n      pathPadStart,\n      pathPadEnd,\n      fill: fillColor,\n      drawOrder: isOverfill ? CELESTIAL_NAV_DRAW_ORDER.NODE_OVERLAYS : undefined,\n      noBG: isOverfill\n    };\n  }();\n}\n\nconst FILL_STATE = {\n  LOCKED: 0,\n  FILL: 1,\n  DRAIN: 2,\n  OVERFILL: 3\n};\n\nfunction riftFillStage(name) {\n  const rift = PelleRifts[name.toLowerCase()];\n  if (!rift.canBeApplied) return FILL_STATE.LOCKED;\n  if (!Pelle.hasGalaxyGenerator || rift.reducedTo === 1) return FILL_STATE.FILL;\n  if (rift.reducedTo < 1) return FILL_STATE.DRAIN;\n  return FILL_STATE.OVERFILL;\n}\n\nexport const CELESTIAL_NAV_DRAW_ORDER = {\n  // Node background is a black fuzzy circle drawn behind nodes. It can help show their\n  // outline in some cases, and can be used in cases where a connector passes under a node\n  NODE_BG: 0,\n  CONNECTORS: 1000,\n  NODES: 2000,\n  NODE_OVERLAYS: 3000,\n  CANVAS_OVERLAY: 4000\n};\nconst Positions = Object.freeze({\n  teresa: new Vector(100, 100),\n  teresaPerkPointShop: new Vector(0, -50),\n  effarigShop: new Vector(300, 0),\n  effarigRealityUnlock: new Vector(400, 50),\n  effarigNode: new Vector(550, 25),\n  enslavedReality: new Vector(650, 250),\n  enslavedGlyphLevel: new Vector(650 + 75 * Math.cos(Math.PI / 180 * -60), 250 + 75 * Math.sin(Math.PI / 180 * -60)),\n  enslavedGlyphRarity: new Vector(650 + 75 * Math.cos(Math.PI / 180 * 120), 250 + 75 * Math.sin(Math.PI / 180 * 120)),\n  vUnlockAchievement: new Vector(400, 350 + 50 * Math.sqrt(3)),\n  vAchievement0: new Vector(350, 350),\n  vAchievement1: new Vector(450, 350),\n  vAchievement2: new Vector(500, 350 + 50 * Math.sqrt(3)),\n  vAchievement3: new Vector(450, 350 + 100 * Math.sqrt(3)),\n  vAchievement4: new Vector(350, 350 + 100 * Math.sqrt(3)),\n  vAchievement5: new Vector(300, 350 + 50 * Math.sqrt(3)),\n  raReality: new Vector(400, 200),\n  raPetTeresa: new Vector(400 + 85 * Math.sin(Math.PI / 180 * 252), 200 + 85 * Math.cos(Math.PI / 180 * 252)),\n  raPetEffarig: new Vector(400 + 85 * Math.sin(Math.PI / 180 * 140), 200 + 85 * Math.cos(Math.PI / 180 * 140)),\n  raPetEnslaved: new Vector(400 + 85 * Math.sin(Math.PI / 180 * 78), 200 + 85 * Math.cos(Math.PI / 180 * 78)),\n  raPetV: new Vector(400 + 85 * Math.sin(Math.PI / 180 * 0), 200 + 85 * Math.cos(Math.PI / 180 * 0)),\n  laitelaFirstCenter: new Vector(150, 450),\n  laitelaFirstLeft: new Vector(100, 500),\n  laitelaFirstRight: new Vector(200, 500),\n  laitelaSecondCenter: new Vector(150, 550),\n  laitelaSecondLeft: new Vector(100, 600),\n  laitelaSecondRight: new Vector(200, 600),\n  laitelaThirdCenter: new Vector(150, 650),\n  pelleUnlock: new Vector(450, 580),\n  pelleAchievementRequirement: pelleStarPosition(0, 0),\n  pelleVacuum: pelleStarPosition(0, 150),\n  pelleDecay: pelleStarPosition(1, 150),\n  pelleChaos: pelleStarPosition(2, 150),\n  pelleRecursion: pelleStarPosition(3, 150),\n  pelleParadox: pelleStarPosition(4, 150),\n  pelleGalaxyGen: pelleStarPosition(0, 0)\n}); // Reduces boilerplate for rift line objects, but needs quite a few parameters to do so since there are three separate\n// elements that render for filling - the initial fill, the drain, and then the overfill\n// eslint-disable-next-line max-params\n\nfunction pelleRiftFill(name, index, textAngle, fillType) {\n  let visibleCheck, progressFn, legendFn, percentFn, incompleteClass, nodeFill, connectorFill;\n\n  switch (fillType) {\n    case FILL_STATE.FILL:\n      // The curve starts inside of the node, so we give the completion variable a bit of a headstart so that we can\n      // immediately see some filling even when it's pretty much still empty\n      visibleCheck = () => riftFillStage(name) === FILL_STATE.FILL;\n\n      progressFn = () => Math.clamp(0.1 + PelleRifts[name.toLowerCase()].realPercentage / 0.9, 1e-6, 1);\n\n      legendFn = () => false;\n\n      percentFn = () => PelleRifts[name.toLowerCase()].realPercentage;\n\n      incompleteClass = \"c-celestial-nav__test-incomplete\";\n      nodeFill = \"crimson\";\n      connectorFill = \"crimson\";\n      break;\n\n    case FILL_STATE.DRAIN:\n      // The logarithmic curve code sometimes throws errors if you attempt to draw with complete === 0, so we cheat and\n      // make it a really tiny number that should format to 0 in most notations. We also do a pow in order to make it\n      // visually smoother, because the generator spiral blocks the bottom bit and makes it look static near the end of\n      // the drain\n      visibleCheck = () => riftFillStage(name) >= FILL_STATE.DRAIN;\n\n      progressFn = () => Math.clamp(Math.sqrt(PelleRifts[name.toLowerCase()].reducedTo), 1e-6, 1);\n\n      legendFn = () => riftFillStage(name) === FILL_STATE.DRAIN && PelleRifts[name.toLowerCase()].reducedTo < 1;\n\n      percentFn = () => PelleRifts[name.toLowerCase()].reducedTo;\n\n      incompleteClass = \"c-celestial-nav__drained-rift\";\n      nodeFill = \"crimson\";\n      connectorFill = \"#550919\";\n      break;\n\n    case FILL_STATE.OVERFILL:\n      visibleCheck = () => riftFillStage(name) === FILL_STATE.OVERFILL;\n\n      progressFn = () => Math.clamp(PelleRifts[name.toLowerCase()].percentage - 1, 1e-6, 1);\n\n      percentFn = () => PelleRifts[name.toLowerCase()].percentage;\n\n      legendFn = () => true;\n\n      incompleteClass = undefined;\n      nodeFill = \"#ff7700\";\n      connectorFill = \"#ff9900\";\n      break;\n  }\n\n  return {\n    visible: () => Pelle.isDoomed && visibleCheck(),\n    complete: () => progressFn(),\n    node: {\n      clickAction: () => Tab.celestials.pelle.show(true),\n      incompleteClass,\n      position: Positions[`pelle${name}`],\n      fill: nodeFill,\n      ring: {\n        rMajor: 8\n      },\n      forceLegend: () => legendFn(),\n      legend: {\n        text: () => [`${formatPercents(percentFn(), 1)} ${wordShift.wordCycle(PelleRifts[name.toLowerCase()].name)}`],\n        angle: textAngle,\n        diagonal: 30,\n        horizontal: 16\n      }\n    },\n    connector: pelleStarConnector(index, connectorFill, fillType === FILL_STATE.OVERFILL)\n  };\n} // Slightly reduces boilerplate; there are a total of 15 rift elements which are largely duplicated code\n\n\nconst fillStates = [\"fill\", \"drain\", \"overfill\"];\nconst riftNames = [\"Vacuum\", \"Decay\", \"Chaos\", \"Recursion\", \"Paradox\"];\nconst angles = [225, 315, 45, 135, 135];\nconst riftFillElements = {};\n\nfor (const fill of fillStates) {\n  for (let index = 0; index < riftNames.length; index++) {\n    const name = riftNames[index];\n    riftFillElements[`pelle-${name}-${fill}`] = pelleRiftFill(name, index, angles[index], FILL_STATE[fill.toUpperCase()]);\n  }\n}\n\nexport const celestialNavigation = _objectSpread(_objectSpread({\n  \"teresa-base\": {\n    visible: () => true,\n    complete: () => 1,\n    node: {\n      clickAction: () => Tab.celestials.teresa.show(true),\n      completeClass: \"c-celestial-nav__test-complete\",\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      position: Positions.teresa,\n      ring: {\n        rMajor: 78,\n        rMinor: 64\n      },\n      legend: {\n        text: \"Teresa\",\n        angle: 135,\n        diagonal: 32,\n        horizontal: 16\n      }\n    }\n  },\n  \"teresa-reality-unlock\": {\n    visible: () => true,\n    complete: () => TeresaUnlocks.run.canBeApplied ? 1 : Decimal.pLog10(Teresa.pouredAmount) / Math.log10(TeresaUnlocks.run.price),\n    node: {\n      completeClass: \"c-celestial-nav__test-complete\",\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      position: Positions.teresa,\n      ring: {\n        rMajor: 32,\n        rMinor: 22\n      },\n      legend: {\n        hideWhenCompleted: true,\n        text: () => {\n          const rm = Teresa.pouredAmount;\n          const cost = TeresaUnlocks.run.price;\n          return `Pour ${format(rm, 2)} / ${format(cost, 2)} RM`;\n        },\n        angle: 135,\n        diagonal: 16,\n        horizontal: 16\n      }\n    },\n    connector: function () {\n      const pathStart = -Math.PI;\n      const pathEnd = Math.PI;\n      const path = LogarithmicSpiral.fromPolarEndpoints(Positions.teresa, -Math.PI, 69, Math.PI, 26);\n      const pathPadStart = path.angleFromRadius(64 - 3) - pathStart;\n      const pathPadEnd = pathEnd - path.angleFromRadius(34);\n      return {\n        pathStart,\n        pathEnd,\n        path,\n        pathPadStart,\n        pathPadEnd\n      };\n    }()\n  },\n  \"teresa-reality\": {\n    visible: () => true,\n    complete: () => Teresa.runCompleted ? 1 : 0,\n    node: {\n      clickAction: () => Tab.celestials.teresa.show(true),\n      completeClass: \"c-celestial-nav__test-complete\",\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      symbol: \"Ϟ\",\n      position: Positions.teresa,\n      ring: {\n        rMajor: 16\n      },\n      alwaysShowLegend: true,\n      legend: {\n        text: \"Teresa's Reality\",\n        angle: -135,\n        diagonal: 96,\n        horizontal: 16\n      }\n    }\n  },\n  \"teresa-pp-shop\": {\n    visible: () => true,\n    complete: () => TeresaUnlocks.shop.canBeApplied ? 1 : Decimal.pLog10(Teresa.pouredAmount) / Math.log10(TeresaUnlocks.shop.price),\n    node: {\n      clickAction: () => Tab.celestials.teresa.show(true),\n      completeClass: \"c-celestial-nav__test-complete\",\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      position: Positions.teresaPerkPointShop,\n      ring: {\n        rMajor: 16,\n        rMinor: 0\n      },\n      legend: {\n        text: complete => {\n          if (complete >= 1) return \"Teresa's Perk Point Shop\";\n          const rm = Teresa.pouredAmount;\n          const cost = TeresaUnlocks.shop.price;\n          return [\"Teresa's Perk Point Shop\", `Pour ${format(rm, 2)} / ${format(cost, 2)} Reality Machines`];\n        },\n        angle: -35,\n        diagonal: 16,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: LinearPath.connectCircles(Positions.teresa, 78 - 1, Positions.teresaPerkPointShop, 16 - 1),\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"effarig-shop\": {\n    visible: () => true,\n    complete: () => TeresaUnlocks.effarig.canBeApplied ? 1 : Decimal.pLog10(Teresa.pouredAmount) / Math.log10(TeresaUnlocks.effarig.price),\n    node: {\n      clickAction: () => Tab.celestials.effarig.show(true),\n      completeClass: \"c-celestial-nav__effarig\",\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      position: Positions.effarigShop,\n      ring: {\n        rMajor: 24\n      },\n      legend: {\n        text: complete => {\n          if (complete >= 1) return \"Effarig's Shop\";\n          const rm = Teresa.pouredAmount;\n          const cost = TeresaUnlocks.effarig.price;\n          return [\"Effarig\", `Pour ${format(rm, 2)} / ${format(cost, 2)} Reality Machines`];\n        },\n        angle: -135,\n        diagonal: 16,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: LinearPath.connectCircles(Positions.teresa, 78 - 1, Positions.effarigShop, 24 - 1),\n      fill: \"url(#gradTeresaEffarig)\"\n    }\n  },\n  \"effarig-reality-unlock\": {\n    visible: () => TeresaUnlocks.effarig.canBeApplied,\n    // If the upgrade to unlock the reality isn't yet bought, clamp the progress at 99.9%,\n    // even if the player has enough relic shards to buy it.\n    complete: () => EffarigUnlock.run.isUnlocked ? 1 : Math.clampMax(0.999, Decimal.pLog10(Currency.relicShards.value) / Math.log10(EffarigUnlock.run.cost)),\n    node: {\n      clickAction: () => Tab.celestials.effarig.show(true),\n      completeClass: \"c-celestial-nav__effarig\",\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      position: Positions.effarigRealityUnlock,\n      ring: {\n        rMajor: 16\n      },\n      legend: {\n        text: complete => {\n          if (complete >= 1) return \"Unlock Effarig's Reality\";\n          const rs = Currency.relicShards.value;\n          const cost = EffarigUnlock.run.cost;\n          return [\"Unlock Effarig's Reality\", `Reach ${format(rs, 2)} / ${format(cost, 2)} Relic Shards`];\n        },\n        angle: 75,\n        diagonal: 40,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: LinearPath.connectCircles(Positions.effarigShop, 24 - 1, Positions.effarigRealityUnlock, 16 - 1),\n      fill: \"#d13737\"\n    }\n  },\n  \"effarig-infinity\": {\n    visible: () => EffarigUnlock.run.isUnlocked,\n    complete: () => {\n      if (EffarigUnlock.infinity.isUnlocked) return 1;\n      if (!Effarig.isRunning) return 0;\n      return Currency.antimatter.value.pLog10() / Decimal.NUMBER_MAX_VALUE.log10();\n    },\n    node: {\n      clickAction: () => Tab.celestials.effarig.show(true),\n      completeClass: \"c-celestial-nav__effarig\",\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      position: Positions.effarigNode,\n      ring: {\n        rMajor: 60,\n        rMinor: 52\n      },\n      legend: {\n        text: complete => {\n          if (complete >= 1) return \"Effarig's Infinity\";\n          if (complete === 0) return \"Unlock Effarig's Reality\";\n          const am = Effarig.isRunning ? Currency.antimatter.value : 0;\n          return [\"Effarig's Infinity\", `Reach ${format(am, 2)} / ${format(Number.MAX_VALUE, 2)}`, \"Antimatter inside Effarig's Reality.\"];\n        },\n        angle: 0,\n        diagonal: 100,\n        horizontal: 16\n      },\n      bgDrawOrder: CELESTIAL_NAV_DRAW_ORDER.NODE_BG + 750\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: LinearPath.connectCircles(Positions.effarigRealityUnlock, 16 - 1, Positions.effarigNode, 60 - 1),\n      fill: \"#d13737\"\n    }\n  },\n  \"effarig-eternity\": {\n    visible: () => EffarigUnlock.infinity.isUnlocked,\n    complete: () => {\n      if (EffarigUnlock.eternity.isUnlocked) return 1;\n      if (!Effarig.isRunning) return 0;\n      return Currency.infinityPoints.value.pLog10() / Decimal.NUMBER_MAX_VALUE.log10();\n    },\n    node: {\n      clickAction: () => Tab.celestials.effarig.show(true),\n      completeClass: \"c-celestial-nav__effarig\",\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#7131ec\",\n      position: Positions.effarigNode,\n      ring: {\n        rMajor: 40,\n        rMinor: 30\n      },\n      legend: {\n        text: complete => {\n          if (complete >= 1) return \"Effarig's Eternity\";\n          const ip = Effarig.isRunning ? Currency.infinityPoints.value : 0;\n          return [\"Effarig's Eternity\", `Reach ${format(ip, 2)} / ${format(Number.MAX_VALUE, 2)}`, \"Infinity Points inside Effarig's Reality.\"];\n        },\n        angle: -45,\n        diagonal: 16,\n        horizontal: 16\n      }\n    },\n    connector: function () {\n      const pathStart = -Math.PI;\n      const pathEnd = 0;\n      const path = LogarithmicSpiral.fromPolarEndpoints(new Vector(560, 25), pathStart, 66, pathEnd, 26);\n      const pathPadStart = 0;\n      const pathPadEnd = pathEnd - path.angleFromRadius(30);\n      return {\n        pathStart,\n        pathEnd,\n        path,\n        pathPadStart,\n        pathPadEnd,\n        fill: \"#d13737\"\n      };\n    }()\n  },\n  \"effarig-reality\": {\n    visible: () => EffarigUnlock.eternity.isUnlocked,\n    complete: () => {\n      if (EffarigUnlock.reality.isUnlocked) return 1;\n      if (!Effarig.isRunning) return 0;\n      return Currency.eternityPoints.value.pLog10() / 4000;\n    },\n    node: {\n      clickAction: () => Tab.celestials.effarig.show(true),\n      completeClass: \"c-celestial-nav__effarig\",\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#A101ec\",\n      position: new Vector(550, 25),\n      ring: {\n        rMajor: 20,\n        rMinor: 0\n      },\n      symbol: \"Ϙ\",\n      alwaysShowLegend: true,\n      legend: {\n        text: complete => {\n          if (complete >= 1) return \"Effarig's Reality\";\n          const ep = Effarig.isRunning ? Currency.eternityPoints.value : 0;\n          const goal = DC.E4000;\n          return [\"Effarig's Reality\", `Reach ${format(ep, 2)} / ${format(goal, 2)}`, \"Eternity Points inside Effarig's Reality.\"];\n        },\n        angle: -120,\n        diagonal: 82,\n        horizontal: 16\n      }\n    },\n    connector: function () {\n      const pathStart = 0;\n      const pathEnd = Math.PI;\n      const path = LogarithmicSpiral.fromPolarEndpoints(new Vector(558, 25), pathStart, 26, pathEnd, 24);\n      const pathPadStart = 0;\n      const pathPadEnd = 0;\n      return {\n        pathStart,\n        pathEnd,\n        path,\n        pathPadStart,\n        pathPadEnd,\n        fill: \"#d13737\"\n      };\n    }()\n  },\n  \"enslaved\": {\n    visible: () => EffarigUnlock.eternity.isUnlocked,\n    complete: () => EffarigUnlock.eternity.isUnlocked ? 1 : 0,\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.enslaved.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#ffa337\",\n      position: Positions.enslavedReality,\n      ring: {\n        rMajor: 80,\n        rMinor: 70,\n        gapCenterDeg: 15,\n        gapDeg: 200\n      },\n      alwaysShowLegend: false,\n      legend: {\n        text: \"Nameless\",\n        angle: -90,\n        diagonal: 20,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      drawOrder: CELESTIAL_NAV_DRAW_ORDER.NODE_BG + 500,\n      path: LinearPath.connectCircles(Positions.effarigNode, 40 - 1, Positions.enslavedReality, 80 - 1),\n      fill: \"url(#gradEffarigEnslaved)\"\n    }\n  },\n  \"enslaved-unlock-glyph-level\": {\n    visible: () => EffarigUnlock.eternity.isUnlocked,\n    complete: () => player.records.bestReality.glyphLevel / 5000,\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.enslaved.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#ffa337\",\n      position: Positions.enslavedGlyphLevel,\n      ring: {\n        rMajor: 24,\n        rMinor: 16,\n        gapCenterDeg: 40,\n        gapDeg: 60,\n        gapAngleDeg: 0\n      },\n      legend: {\n        text: complete => {\n          if (complete >= 1) return \"Glyph level chain has been broken\";\n          const goal = 5000;\n          return [\"Break a chain\", `Reach Glyph level ${formatInt(Math.min(player.records.bestReality.glyphLevel, goal))}/${formatInt(goal)}`];\n        },\n        angle: -45,\n        diagonal: 16,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: new LinearPath(new Vector(650 - 74 * Math.sqrt(0.75), 250 - 74 * 0.5), Positions.enslavedGlyphLevel).trimEnd(23),\n      fill: \"#ffa337\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"enslaved-unlock-glyph-rarity\": {\n    visible: () => EffarigUnlock.eternity.isUnlocked,\n    complete: () => {\n      const bestRarity = strengthToRarity(player.records.bestReality.glyphStrength);\n      return bestRarity / 100;\n    },\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.enslaved.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#ffa337\",\n      position: Positions.enslavedGlyphRarity,\n      ring: {\n        rMajor: 24,\n        rMinor: 16,\n        gapCenterDeg: 220,\n        gapDeg: 60,\n        gapAngleDeg: 0\n      },\n      legend: {\n        text: complete => {\n          if (complete >= 1) return \"Glyph rarity chain has been broken\";\n          const goal = 100;\n          return [\"Break a chain\", `Reach Glyph rarity ${formatPercents(complete * goal / 100, 1)}/${formatPercents(goal / 100, 1)}`];\n        },\n        angle: 45,\n        diagonal: 32,\n        horizontal: 32\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: new LinearPath(Positions.enslavedGlyphRarity, Positions.enslavedGlyphLevel).trimStart(23).trimEnd(23),\n      fill: \"#ffa337\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"enslaved-reality\": {\n    visible: () => EffarigUnlock.eternity.isUnlocked,\n    complete: () => {\n      if (Enslaved.isCompleted) return 1;\n      if (!Enslaved.isRunning) return 0;\n      return Currency.eternityPoints.value.pLog10() / 4000;\n    },\n    node: {\n      clickAction: () => Tab.celestials.enslaved.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#ffa337\",\n      position: Positions.enslavedReality,\n      ring: {\n        rMajor: 80,\n        rMinor: 70,\n        gapCenterDeg: 195,\n        gapDeg: 200\n      },\n      alwaysShowLegend: true,\n      legend: {\n        text: complete => {\n          if (complete >= 1) return \"The Nameless Ones' Reality\";\n          const ep = Enslaved.isRunning ? Currency.eternityPoints.value : 0;\n          const goal = DC.E4000;\n          return [\"The Nameless Ones' Reality\", `Reach ${format(ep, 2)} / ${format(goal, 2)}`, \"Eternity Points inside The Nameless Ones' Reality.\"];\n        },\n        angle: 45,\n        diagonal: 16,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: new LinearPath(Positions.enslavedGlyphRarity, new Vector(650 + 74 * Math.sqrt(0.75), 250 + 74 * 0.5)).trimStart(23),\n      fill: \"#ffa337\"\n    }\n  },\n  \"v-unlock-achievement\": {\n    visible: () => EffarigUnlock.reality.isUnlocked,\n    complete: () => {\n      if (Achievement(151).isUnlocked) return 1;\n      if (!player.requirementChecks.infinity.noAD8) return 0;\n      return player.galaxies / 800;\n    },\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.v.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      symbol: \"⌬\",\n      symbolOffset: \"2\",\n      fill: \"#ffe066\",\n      position: Positions.vUnlockAchievement,\n      ring: {\n        rMajor: 20\n      },\n      alwaysShowLegend: true,\n      legend: {\n        text: complete => {\n          const goal = 800;\n          if (complete >= 1) return \"V's Reality\";\n          const galaxies = player.requirementChecks.infinity.noAD8 ? player.galaxies : 0;\n          return [\"V's unlock Achievement\", `Reach ${formatInt(galaxies)} / ${formatInt(goal)} Antimatter Galaxies without buying`, \"8th Antimatter Dimensions in your current Infinity\"];\n        },\n        angle: 135,\n        diagonal: 60,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: LinearPath.connectCircles(Positions.enslavedReality, 80 - 1, Positions.vUnlockAchievement, 16 - 1),\n      fill: \"url(#gradEnslavedV)\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"v-unlock-1\": {\n    visible: () => Achievement(151).isUnlocked || VUnlocks.vAchievementUnlock.isUnlocked,\n    complete: () => vUnlockProgress(1),\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.v.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#ffe066\",\n      position: Positions.vAchievement1,\n      ring: {\n        rMajor: 8\n      },\n      legend: {\n        text: complete => vUnlockLegendLabel(complete, 1),\n        angle: -135,\n        diagonal: 50,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: new LinearPath(Positions.vUnlockAchievement, Positions.vAchievement1),\n      fill: \"#ffe066\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"v-unlock-2\": {\n    visible: () => Achievement(151).isUnlocked || VUnlocks.vAchievementUnlock.isUnlocked,\n    complete: () => vUnlockProgress(2),\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.v.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#ffe066\",\n      position: Positions.vAchievement2,\n      ring: {\n        rMajor: 8\n      },\n      legend: {\n        text: complete => vUnlockLegendLabel(complete, 2),\n        angle: -45,\n        diagonal: 30,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: new LinearPath(Positions.vUnlockAchievement, Positions.vAchievement2),\n      fill: \"#ffe066\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"v-unlock-3\": {\n    visible: () => Achievement(151).isUnlocked || VUnlocks.vAchievementUnlock.isUnlocked,\n    complete: () => vUnlockProgress(3),\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.v.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#ffe066\",\n      position: Positions.vAchievement3,\n      ring: {\n        rMajor: 8\n      },\n      legend: {\n        text: complete => vUnlockLegendLabel(complete, 3),\n        angle: 45,\n        diagonal: 30,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: new LinearPath(Positions.vUnlockAchievement, Positions.vAchievement3),\n      fill: \"#ffe066\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"v-unlock-4\": {\n    visible: () => Achievement(151).isUnlocked || VUnlocks.vAchievementUnlock.isUnlocked,\n    complete: () => vUnlockProgress(4),\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.v.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#ffe066\",\n      position: Positions.vAchievement4,\n      ring: {\n        rMajor: 8\n      },\n      legend: {\n        text: complete => vUnlockLegendLabel(complete, 4),\n        angle: 135,\n        diagonal: 30,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: new LinearPath(Positions.vUnlockAchievement, Positions.vAchievement4),\n      fill: \"#ffe066\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"v-unlock-5\": {\n    visible: () => Achievement(151).isUnlocked || VUnlocks.vAchievementUnlock.isUnlocked,\n    complete: () => vUnlockProgress(5),\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.v.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#ffe066\",\n      position: Positions.vAchievement5,\n      ring: {\n        rMajor: 8\n      },\n      legend: {\n        text: complete => vUnlockLegendLabel(complete, 5),\n        angle: -135,\n        diagonal: 30,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: new LinearPath(Positions.vUnlockAchievement, Positions.vAchievement5),\n      fill: \"#ffe066\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"v-unlock-6\": {\n    visible: () => Achievement(151).isUnlocked || VUnlocks.vAchievementUnlock.isUnlocked,\n    complete: () => vUnlockProgress(6),\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.v.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#ffe066\",\n      position: Positions.vAchievement0,\n      ring: {\n        rMajor: 8\n      },\n      legend: {\n        text: complete => vUnlockLegendLabel(complete, 6),\n        angle: -135,\n        diagonal: 30,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: new LinearPath(Positions.vUnlockAchievement, Positions.vAchievement0),\n      fill: \"#ffe066\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"v-achievement-0\": {\n    visible: () => VUnlocks.vAchievementUnlock.isUnlocked,\n    complete: () => VRunUnlocks.all[0].completions / 6,\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.v.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#ffe066\",\n      position: Positions.vAchievement0,\n      ring: {\n        rMajor: 8\n      },\n      legend: {\n        text: complete => {\n          const name = VRunUnlocks.all[0].config.name;\n          if (complete >= 1) return `V-Achievement \"${name}\"`;\n          const completions = VRunUnlocks.all[0].completions;\n          return [\"V-Achievement\", `Reach ${formatInt(completions)} / ${formatInt(6)} completions in ${name}.`];\n        },\n        angle: -135,\n        diagonal: 16,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: new LinearPath(Positions.vAchievement5, Positions.vAchievement0),\n      fill: \"#ffe066\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"v-achievement-1\": {\n    visible: () => VUnlocks.vAchievementUnlock.isUnlocked,\n    complete: () => VRunUnlocks.all[1].completions / 6,\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.v.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#ffe066\",\n      position: Positions.vAchievement1,\n      ring: {\n        rMajor: 8\n      },\n      legend: {\n        text: complete => {\n          const name = VRunUnlocks.all[1].config.name;\n          if (complete >= 1) return `V-Achievement \"${name}\"`;\n          const completions = VRunUnlocks.all[1].completions;\n          return [\"V-Achievement\", `Reach ${formatInt(completions)} / ${formatInt(6)} completions in ${name}.`];\n        },\n        angle: 20,\n        diagonal: 16,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: new LinearPath(Positions.vAchievement0, Positions.vAchievement1),\n      fill: \"#ffe066\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"v-achievement-2\": {\n    visible: () => VUnlocks.vAchievementUnlock.isUnlocked,\n    complete: () => VRunUnlocks.all[2].completions / 6,\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.v.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#ffe066\",\n      position: Positions.vAchievement2,\n      ring: {\n        rMajor: 8\n      },\n      legend: {\n        text: complete => {\n          const name = VRunUnlocks.all[2].config.name;\n          if (complete >= 1) return `V-Achievement \"${name}\"`;\n          const completions = VRunUnlocks.all[2].completions;\n          return [\"V-Achievement\", `Reach ${formatInt(completions)} / ${formatInt(6)} completions in ${name}.`];\n        },\n        angle: 315,\n        diagonal: 25,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: new LinearPath(Positions.vAchievement1, Positions.vAchievement2),\n      fill: \"#ffe066\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"v-achievement-3\": {\n    visible: () => VUnlocks.vAchievementUnlock.isUnlocked,\n    complete: () => VRunUnlocks.all[3].completions / 6,\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.v.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#ffe066\",\n      position: Positions.vAchievement3,\n      ring: {\n        rMajor: 8\n      },\n      legend: {\n        text: complete => {\n          const name = VRunUnlocks.all[3].config.name;\n          if (complete >= 1) return `V-Achievement \"${name}\"`;\n          const completions = VRunUnlocks.all[3].completions;\n          return [\"V-Achievement\", `Reach ${formatInt(completions)} / ${formatInt(6)} completions in ${name}.`];\n        },\n        angle: 135,\n        diagonal: 25,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: new LinearPath(Positions.vAchievement2, Positions.vAchievement3),\n      fill: \"#ffe066\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"v-achievement-4\": {\n    visible: () => VUnlocks.vAchievementUnlock.isUnlocked,\n    complete: () => VRunUnlocks.all[4].completions / 6,\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.v.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#ffe066\",\n      position: Positions.vAchievement4,\n      ring: {\n        rMajor: 8\n      },\n      legend: {\n        text: complete => {\n          const name = VRunUnlocks.all[4].config.name;\n          if (complete >= 1) return `V-Achievement \"${name}\"`;\n          const completions = VRunUnlocks.all[4].completions;\n          return [\"V-Achievement\", `Reach ${formatInt(completions)} / ${formatInt(6)} completions in ${name}.`];\n        },\n        angle: 60,\n        diagonal: 25,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: new LinearPath(Positions.vAchievement3, Positions.vAchievement4),\n      fill: \"#ffe066\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"v-achievement-5\": {\n    visible: () => VUnlocks.vAchievementUnlock.isUnlocked,\n    complete: () => VRunUnlocks.all[5].completions / 6,\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.v.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#ffe066\",\n      position: Positions.vAchievement5,\n      ring: {\n        rMajor: 8\n      },\n      legend: {\n        text: complete => {\n          const name = VRunUnlocks.all[5].config.name;\n          if (complete >= 1) return `V-Achievement \"${name}\"`;\n          const completions = VRunUnlocks.all[5].completions;\n          return [\"V-Achievement\", `Reach ${formatInt(completions)} / ${formatInt(6)} completions in ${name}.`];\n        },\n        angle: 260,\n        diagonal: 30,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: new LinearPath(Positions.vAchievement4, Positions.vAchievement5),\n      fill: \"#ffe066\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"ra\": {\n    visible: () => VUnlocks.raUnlock.isUnlocked,\n    complete: () => VUnlocks.raUnlock.isUnlocked ? 1 : 0,\n    node: {\n      clickAction: () => Tab.celestials.ra.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      symbol: \"\\uf185\",\n      symbolOffset: \"2\",\n      fill: \"#9063de\",\n      position: Positions.raReality,\n      ring: {\n        rMajor: 24\n      },\n      alwaysShowLegend: true,\n      legend: {\n        text: \"Ra's Reality\",\n        angle: 230,\n        diagonal: 85,\n        horizontal: 16\n      }\n    }\n  },\n  \"teresa-pet\": {\n    visible: () => VUnlocks.raUnlock.isUnlocked,\n    complete: () => VUnlocks.raUnlock.isUnlocked ? 1 : 0,\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.ra.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#9063de\",\n      isStacked: true,\n      position: Positions.raPetTeresa,\n      ring: {\n        rMajor: 12\n      },\n      legend: {\n        text: () => {\n          const level = Ra.pets.teresa.level;\n          if (level === 25) return `Ra's Teresa Memories have all been returned`;\n          return [\"Ra's Teresa Memory level\", `${formatInt(level)} / ${formatInt(25)}`];\n        },\n        angle: 142,\n        diagonal: 85,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0.05,\n      pathEnd: 0.95,\n      path: new LinearPath(Positions.raReality, Positions.raPetTeresa),\n      fill: \"#9063de\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"teresa-pet-to-teresa\": {\n    visible: () => VUnlocks.raUnlock.isUnlocked,\n    complete: () => Ra.pets.teresa.level / 25,\n    drawOrder: -1,\n    connector: {\n      pathStart: 0.05,\n      pathEnd: 0.70,\n      path: new LinearPath(Positions.raPetTeresa, Positions.teresa),\n      fill: \"url(#gradRaTeresa)\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"effarig-pet\": {\n    visible: () => VUnlocks.raUnlock.isUnlocked,\n    complete: () => Ra.pets.teresa.level / 8,\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.ra.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#9063de\",\n      isStacked: true,\n      position: Positions.raPetEffarig,\n      ring: {\n        rMajor: 12\n      },\n      legend: {\n        text: complete => {\n          const unlocked = Ra.pets.teresa.level;\n          const level = Ra.pets.effarig.level;\n          if (complete < 1) return `Ra's Teresa Memory level ${unlocked} / ${formatInt(8)}`;\n          if (level === 25) return `Ra's Effarig Memories have all been returned`;\n          return [\"Ra's Effarig Memory level\", `${formatInt(level)} / ${formatInt(25)}`];\n        },\n        angle: 142,\n        diagonal: 85,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0.05,\n      pathEnd: 0.95,\n      path: new LinearPath(Positions.raReality, Positions.raPetEffarig),\n      fill: \"#9063de\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"effarig-pet-to-effarig\": {\n    visible: () => Ra.unlocks.effarigUnlock.isUnlocked,\n    complete: () => Ra.pets.effarig.level / 25,\n    drawOrder: -1,\n    connector: {\n      pathStart: 0.05,\n      pathEnd: 0.60,\n      path: new LinearPath(Positions.raPetEffarig, Positions.effarigNode),\n      fill: \"url(#gradRaEffarig)\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"enslaved-pet\": {\n    visible: () => Ra.unlocks.effarigUnlock.isUnlocked,\n    complete: () => Ra.pets.effarig.level / 8,\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.ra.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#9063de\",\n      isStacked: true,\n      position: Positions.raPetEnslaved,\n      ring: {\n        rMajor: 12\n      },\n      legend: {\n        text: complete => {\n          const unlocked = Ra.pets.effarig.level;\n          const level = Ra.pets.enslaved.level;\n          if (complete < 1) return `Ra's Effarig Memory level ${unlocked} / ${formatInt(8)}`;\n          if (level === 25) return `Ra's Nameless Memories have all been returned`;\n          return [\"Ra's Nameless Memory level\", `${formatInt(level)} / ${formatInt(25)}`];\n        },\n        angle: 142,\n        diagonal: 85,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0.05,\n      pathEnd: 0.95,\n      path: new LinearPath(Positions.raReality, Positions.raPetEnslaved),\n      fill: \"#9063de\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"enslaved-pet-to-enslaved\": {\n    visible: () => Ra.unlocks.enslavedUnlock.isUnlocked,\n    complete: () => Ra.pets.enslaved.level / 25,\n    drawOrder: -1,\n    connector: {\n      pathStart: 0.05,\n      pathEnd: 0.55,\n      path: new LinearPath(Positions.raPetEnslaved, Positions.enslavedReality),\n      fill: \"url(#gradRaEnslaved)\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"v-pet\": {\n    visible: () => Ra.unlocks.enslavedUnlock.isUnlocked,\n    complete: () => Ra.pets.enslaved.level / 8,\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.ra.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#9063de\",\n      isStacked: true,\n      position: Positions.raPetV,\n      ring: {\n        rMajor: 12\n      },\n      legend: {\n        text: complete => {\n          const unlocked = Ra.pets.enslaved.level;\n          const level = Ra.pets.v.level;\n          if (complete < 1) return `Ra's Nameless Memory level ${unlocked} / ${formatInt(8)}`;\n          if (level === 25) return `Ra's V Memories have all been returned`;\n          return [\"Ra's V Memory level\", `${formatInt(level)} / ${formatInt(25)}`];\n        },\n        angle: 142,\n        diagonal: 85,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0.05,\n      pathEnd: 0.95,\n      path: new LinearPath(Positions.raReality, Positions.raPetV),\n      fill: \"#9063de\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"v-pet-to-v\": {\n    visible: () => Ra.unlocks.vUnlock.isUnlocked,\n    complete: () => Ra.pets.v.level / 25,\n    drawOrder: -1,\n    connector: {\n      pathStart: 0.05,\n      pathEnd: 0.42,\n      path: new LinearPath(Positions.raPetV, Positions.vUnlockAchievement),\n      fill: \"url(#gradRaV)\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"ra-ring-1\": {\n    visible: () => VUnlocks.raUnlock.isUnlocked,\n    complete: () => VUnlocks.raUnlock.isUnlocked ? 1 : 0,\n    node: {\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#9063de\",\n      position: Positions.raReality,\n      ring: {\n        rMajor: 90,\n        rMinor: 80,\n        gapCenterDeg: 74,\n        gapDeg: 268\n      }\n    }\n  },\n  \"ra-ring-2\": {\n    visible: () => VUnlocks.raUnlock.isUnlocked,\n    complete: () => VUnlocks.raUnlock.isUnlocked ? 1 : 0,\n    node: {\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#9063de\",\n      position: Positions.raReality,\n      ring: {\n        rMajor: 90,\n        rMinor: 80,\n        gapCenterDeg: 161,\n        gapDeg: 318\n      }\n    }\n  },\n  \"ra-ring-3\": {\n    visible: () => VUnlocks.raUnlock.isUnlocked,\n    complete: () => VUnlocks.raUnlock.isUnlocked ? 1 : 0,\n    node: {\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#9063de\",\n      position: Positions.raReality,\n      ring: {\n        rMajor: 90,\n        rMinor: 80,\n        gapCenterDeg: 231,\n        gapDeg: 301\n      }\n    }\n  },\n  \"ra-ring-4\": {\n    visible: () => VUnlocks.raUnlock.isUnlocked,\n    complete: () => VUnlocks.raUnlock.isUnlocked ? 1 : 0,\n    node: {\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#9063de\",\n      position: Positions.raReality,\n      ring: {\n        rMajor: 90,\n        rMinor: 80,\n        gapCenterDeg: 293,\n        gapDeg: 334\n      }\n    }\n  },\n  \"ra-ring-5\": {\n    visible: () => VUnlocks.raUnlock.isUnlocked,\n    complete: () => VUnlocks.raUnlock.isUnlocked ? 1 : 0,\n    node: {\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"#9063de\",\n      position: Positions.raReality,\n      ring: {\n        rMajor: 90,\n        rMinor: 80,\n        gapCenterDeg: -14,\n        gapDeg: 316\n      }\n    }\n  },\n  \"laitela-unlock\": {\n    visible: () => Ra.unlocks.vUnlock.isUnlocked,\n    complete: () => {\n      if (DarkMatterDimension(1).unlockUpgrade.canBeBought || Laitela.isUnlocked) return 1;\n\n      if (MachineHandler.isIMUnlocked) {\n        if (player.requirementChecks.reality.maxID1.neq(0)) return 0.5;\n        return 0.5 + 0.5 * Math.clampMax(0.999, player.antimatter.exponent / 1.5e12);\n      }\n\n      return Math.clampMax(0.5, Currency.realityMachines.value.pLog10() / MachineHandler.baseRMCap.exponent);\n    },\n    drawOrder: -1,\n    node: {\n      clickAction: () => Tab.celestials.laitela.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      symbol: \"ᛝ\",\n      symbolScale: 1.6,\n      symbolOffset: \"0.6\",\n      fill: \"white\",\n      position: Positions.laitelaFirstCenter,\n      ring: {\n        rMajor: 15\n      },\n      alwaysShowLegend: true,\n      legend: {\n        text: complete => {\n          const realityName = \"Lai'tela's Reality\";\n          if (complete >= 1) return [realityName];\n\n          if (!MachineHandler.isIMUnlocked) {\n            const realityMachines = Currency.realityMachines.value;\n            const realityMachineCap = MachineHandler.baseRMCap;\n            return [realityName, \"The limits of Reality Machines bind you\", `${format(realityMachines)} / ${format(realityMachineCap)}`];\n          }\n\n          const hasIDs = player.requirementChecks.reality.maxID1.neq(0);\n          if (hasIDs) return [realityName, \"The Power of Infinity Dimensions\", \"blocks your path.\"];\n          const antimatter = Currency.antimatter.value;\n          const amGoal = DC.E1_5E12;\n          return [realityName, `${format(antimatter)} / ${format(amGoal)}`];\n        },\n        angle: 260,\n        diagonal: 15,\n        horizontal: 8\n      }\n    },\n    connector: {\n      pathStart: 0.05,\n      pathEnd: 1,\n      path: new LinearPath(Positions.raReality, Positions.laitelaFirstCenter),\n      fill: \"url(#gradRaLaitela)\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"laitela-2nd-dim\": {\n    visible: () => Laitela.isUnlocked,\n    complete: () => {\n      const upgrade = DarkMatterDimension(2).unlockUpgrade;\n      if (upgrade.canBeBought || upgrade.isBought) return 1;\n      if (upgrade.isAvailableForPurchase) return upgrade.currency.value / upgrade.cost;\n      return Laitela.difficultyTier < 1 ? 0 : 30 / player.celestials.laitela.fastestCompletion;\n    },\n    node: {\n      clickAction: () => Tab.celestials.laitela.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"white\",\n      position: Positions.laitelaFirstLeft,\n      ring: {\n        rMajor: 8\n      },\n      legend: {\n        text: complete => {\n          const dmdText = \"2nd Dark Matter Dimension\";\n          const dim = DarkMatterDimension(2);\n          if (dim.isUnlocked) return [dmdText];\n          const goal = dim.adjustedStartingCost;\n          if (complete >= 1) return [dmdText, `Dark Matter ${format(Currency.darkMatter.max.min(goal), dim.isUnlocked ? 0 : 2)} / ${format(goal)}`];\n          const upgrade = dim.unlockUpgrade;\n          if (upgrade.isAvailableForPurchase) return [dmdText, `Imaginary Machines\n            ${format(Math.min(upgrade.currency.value, upgrade.cost), upgrade.canBeBought ? 1 : 2)}\n            / ${format(upgrade.cost, 1)}`];\n          if (player.celestials.laitela.fastestCompletion > 30 && Laitela.difficultyTier < 0) return [dmdText, `Beat Lai'tela's Reality in less that ${format(30)} seconds`];\n          return [dmdText, `Beat Lai'tela's Reality`];\n        },\n        angle: 135,\n        diagonal: 30,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0.17,\n      pathEnd: 0.89,\n      path: new LinearPath(Positions.laitelaFirstCenter, Positions.laitelaFirstLeft),\n      fill: \"white\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"laitela-singularity\": {\n    visible: () => Laitela.isUnlocked,\n    complete: () => Currency.singularities.gte(1) ? 1 : Math.clampMax(0.999, Currency.darkEnergy.value / Singularity.cap),\n    node: {\n      clickAction: () => Tab.celestials.laitela.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"white\",\n      position: Positions.laitelaFirstRight,\n      ring: {\n        rMajor: 8\n      },\n      legend: {\n        text: complete => {\n          if (complete >= 1) return [\"Obtain a Singularity\"];\n          const darkEnergy = Currency.darkEnergy.value;\n          const singularityGoal = Singularity.cap;\n          return [\"Condense your Dark Energy\", \"Into a Singularity\", `${format(darkEnergy)} / ${format(singularityGoal)}`];\n        },\n        angle: 45,\n        diagonal: 65,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0.17,\n      pathEnd: 0.89,\n      path: new LinearPath(Positions.laitelaFirstCenter, Positions.laitelaFirstRight),\n      fill: \"white\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"laitela-3rd-dim\": {\n    visible: () => DarkMatterDimension(2).isUnlocked && Currency.singularities.gte(1),\n    complete: () => {\n      const upgrade = DarkMatterDimension(3).unlockUpgrade;\n      if (upgrade.canBeBought || upgrade.isBought) return 1;\n      if (upgrade.isAvailableForPurchase) return upgrade.currency.value / upgrade.cost;\n      if (!player.auto.singularity.isActive) return 0.5;\n      return Math.clampMax(0.999, Singularity.singularitiesGained / 20);\n    },\n    node: {\n      clickAction: () => Tab.celestials.laitela.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"white\",\n      position: Positions.laitelaSecondCenter,\n      ring: {\n        rMajor: 15\n      },\n      legend: {\n        text: complete => {\n          const dmdText = \"3rd Dark Matter Dimension\";\n          const dim = DarkMatterDimension(3);\n          if (dim.isUnlocked) return [dmdText];\n          const goal = dim.adjustedStartingCost;\n          if (complete >= 1) return [dmdText, `Dark Matter ${format(Currency.darkMatter.max.min(goal), dim.isUnlocked ? 0 : 2)} / ${format(goal)}`];\n          const upgrade = dim.unlockUpgrade;\n          if (upgrade.isAvailableForPurchase) return [dmdText, `Imaginary Machines\n            ${format(Math.min(upgrade.currency.value, upgrade.cost), upgrade.canBeBought ? 0 : 2)}\n            / ${format(upgrade.cost)}`];\n          if (!player.auto.singularity.isActive) return [dmdText, \"Unlock Automatic Singularities\", `${format(Currency.singularities.value)} / ${format(SingularityMilestone.autoCondense.start)}`];\n          return [dmdText, `Automatically Condense ${format(20)} Singularities at once`, `${format(Math.clampMax(Singularity.singularitiesGained, 20))} / ${format(20)}`];\n        },\n        angle: 15,\n        diagonal: 30,\n        horizontal: 16\n      }\n    },\n    connector: [{\n      pathStart: 0.10,\n      pathEnd: 0.89,\n      path: new LinearPath(Positions.laitelaFirstLeft, Positions.laitelaSecondCenter),\n      fill: \"white\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }, {\n      pathStart: 0.10,\n      pathEnd: 0.89,\n      path: new LinearPath(Positions.laitelaFirstRight, Positions.laitelaSecondCenter),\n      fill: \"white\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }]\n  },\n  \"laitela-4th-dim\": {\n    visible: () => DarkMatterDimension(3).isUnlocked,\n    complete: () => {\n      const upgrade = DarkMatterDimension(4).unlockUpgrade;\n      if (upgrade.canBeBought || upgrade.isBought) return 1;\n      if (upgrade.isAvailableForPurchase) return upgrade.currency.value / upgrade.cost;\n      return (Replicanti.galaxies.total + player.galaxies + player.dilation.totalTachyonGalaxies) / 80000;\n    },\n    node: {\n      clickAction: () => Tab.celestials.laitela.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"white\",\n      position: Positions.laitelaSecondLeft,\n      ring: {\n        rMajor: 8\n      },\n      legend: {\n        text: complete => {\n          const dmdText = \"4th Dark Matter Dimension\";\n          const dim = DarkMatterDimension(4);\n          if (dim.isUnlocked) return [dmdText];\n          const goal = dim.adjustedStartingCost;\n          if (complete >= 1) return [dmdText, `Dark Matter ${format(Currency.darkMatter.max.min(goal), dim.isUnlocked ? 0 : 2)} / ${format(goal)}`];\n          const upgrade = dim.unlockUpgrade;\n          if (upgrade.isAvailableForPurchase) return [dmdText, `Imaginary Machines\n            ${format(Math.min(upgrade.currency.value, upgrade.cost), upgrade.canBeBought ? 1 : 2)}\n            / ${format(upgrade.cost, 1)}`];\n          const allGalaxies = Replicanti.galaxies.total + player.galaxies + player.dilation.totalTachyonGalaxies;\n          return [dmdText, `Have ${format(80000)} total Galaxies`, `${format(Math.clampMax(allGalaxies, 80000))} / ${format(80000)}`];\n        },\n        angle: 225,\n        diagonal: 30,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0.11,\n      pathEnd: 0.89,\n      path: new LinearPath(Positions.laitelaSecondCenter, Positions.laitelaSecondLeft),\n      fill: \"white\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"laitela-annihilation\": {\n    visible: () => DarkMatterDimension(4).isUnlocked,\n    complete: () => {\n      const upgrade = ImaginaryUpgrade(19);\n      if (upgrade.canBeBought || upgrade.isBought) return 1;\n      if (upgrade.isAvailableForPurchase) return Currency.imaginaryMachines.value / upgrade.cost;\n      return upgrade.isPossible ? Tickspeed.continuumValue / 3850000 : 0;\n    },\n    node: {\n      clickAction: () => Tab.celestials.laitela.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"white\",\n      position: Positions.laitelaSecondRight,\n      ring: {\n        rMajor: 8\n      },\n      legend: {\n        text: () => [\"Annihilate your\", \"Dark Matter Dimensions\"],\n        angle: 315,\n        diagonal: 30,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0.11,\n      pathEnd: 0.89,\n      path: new LinearPath(Positions.laitelaSecondCenter, Positions.laitelaSecondRight),\n      fill: \"white\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"laitela-destabilization\": {\n    visible: () => DarkMatterDimension(4).isUnlocked && ImaginaryUpgrade(19).isBought,\n    complete: () => Laitela.difficultyTier / 8,\n    node: {\n      clickAction: () => Tab.celestials.laitela.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      symbolScale: 1.6,\n      symbolOffset: \"0.6\",\n      fill: \"white\",\n      position: Positions.laitelaThirdCenter,\n      ring: {\n        rMajor: 15\n      },\n      legend: {\n        text: complete => {\n          if (complete < 1) return [\"Destabilize Lai'tela's Reality\", \"To the point where you cannot\", \"use any Dimensions\", `${format(Laitela.difficultyTier)} / ${format(8)} Dimensions disabled`];\n          return [\"Completely destabilized\", \"Lai'tela's Reality\"];\n        },\n        angle: 180,\n        diagonal: 15,\n        horizontal: 8\n      }\n    },\n    connector: [{\n      pathStart: 0.11,\n      pathEnd: 0.83,\n      path: new LinearPath(Positions.laitelaSecondLeft, Positions.laitelaThirdCenter),\n      fill: \"white\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }, {\n      pathStart: 0.11,\n      pathEnd: 0.83,\n      path: new LinearPath(Positions.laitelaSecondRight, Positions.laitelaThirdCenter),\n      fill: \"white\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }]\n  },\n  \"pelle-unlock\": {\n    visible: () => Laitela.difficultyTier > 4,\n    complete: () => {\n      if (Pelle.isUnlocked) return 1;\n      const imCost = Math.clampMax(emphasizeEnd(Math.log10(Currency.imaginaryMachines.value) / Math.log10(1.6e15)), 1);\n      let laitelaProgress = Laitela.isRunning ? Math.min(Currency.eternityPoints.value.log10() / 4000, 0.99) : 0;\n      if (Laitela.difficultyTier !== 8 || Glyphs.activeWithoutCompanion.length > 1) laitelaProgress = 0;else if (ImaginaryUpgrade(25).isAvailableForPurchase) laitelaProgress = 1;\n      return (imCost + laitelaProgress) / 2;\n    },\n    node: {\n      clickAction: () => Tab.celestials.pelle.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"crimson\",\n      position: Positions.pelleUnlock,\n      ring: {\n        rMajor: 8\n      },\n      legend: {\n        text: complete => {\n          if (complete === 1) {\n            return [\"Unlock Pelle\", \"The Celestial of Antimatter\"];\n          }\n\n          let laitelaString = `${format(Currency.eternityPoints.value)} / ${format(\"1e4000\")} EP`;\n\n          if (!Laitela.isRunning || Laitela.difficultyTier !== 8 || Glyphs.activeWithoutCompanion.length > 1) {\n            laitelaString = \"Lai'tela's Reality is still intact\";\n          } else if (ImaginaryUpgrade(25).isAvailableForPurchase) {\n            laitelaString = \"Lai'tela's Reality has been destroyed\";\n          }\n\n          return [\"Unlock Pelle\", \"The Celestial of Antimatter\", `${format(Currency.imaginaryMachines.value, 2)} / ${format(1.6e15, 2)} iM`, laitelaString];\n        },\n        angle: 105,\n        diagonal: 90,\n        horizontal: 10\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: new LinearPath(Positions.laitelaThirdCenter, Positions.pelleUnlock),\n      fill: \"url(#gradLaitelaPelle)\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  },\n  \"pelle-doomed-requirement\": {\n    visible: () => Pelle.isUnlocked,\n    complete: () => {\n      if (Pelle.isDoomed) return 1;\n      const achievements = Achievements.prePelleRows.countWhere(r => r.every(a => a.isUnlocked)) / Achievements.prePelleRows.length;\n      const alchemy = AlchemyResources.all.countWhere(r => r.capped) / AlchemyResources.all.length;\n      return (emphasizeEnd(achievements) + emphasizeEnd(alchemy)) / 2;\n    },\n    node: {\n      clickAction: () => Tab.celestials.pelle.show(true),\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      symbol: \"♅\",\n      symbolOffset: \"1.6\",\n      fill: \"crimson\",\n      position: Positions.pelleAchievementRequirement,\n      ring: {\n        rMajor: 20\n      },\n      forceLegend: () => Pelle.isUnlocked && !Pelle.hasGalaxyGenerator,\n      legend: {\n        text: complete => {\n          if (complete >= 1) return Pelle.isDoomed ? \"Doomed Reality\" : \"Doom your Reality\";\n          const achievements = [Achievements.prePelleRows.countWhere(r => r.every(a => a.isUnlocked)), Achievements.prePelleRows.length];\n          const alchemy = [AlchemyResources.all.countWhere(r => r.capped), AlchemyResources.all.length];\n          return [`Complete ${formatInt(achievements[0])} / ${formatInt(achievements[1])} rows of Achievements`, `Fill ${formatInt(alchemy[0])} / ${formatInt(alchemy[1])} Alchemy Resources`];\n        },\n        angle: 290,\n        diagonal: 40,\n        horizontal: 16\n      }\n    },\n    connector: {\n      pathStart: 0,\n      pathEnd: 1,\n      path: new LinearPath(Positions.pelleUnlock, Positions.pelleAchievementRequirement),\n      fill: \"crimson\",\n      completeWidth: 6,\n      incompleteWidth: 4\n    }\n  }\n}, riftFillElements), {}, {\n  // Needs a separate node in order to color the background of the galaxy generator not-gray. Note that this node gets\n  // placed on top of the \"main\" Doomed node once it's visible\n  \"pelle-galaxy-generator-start-node\": {\n    visible: () => Pelle.hasGalaxyGenerator,\n    complete: () => Pelle.hasGalaxyGenerator ? 1 : 0,\n    node: {\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\n      fill: \"black\",\n      position: Positions.pelleAchievementRequirement,\n      ring: {\n        rMajor: 20\n      },\n      alwaysShowLegend: true,\n      legend: {\n        text: () => [\"Galaxy Generator:\", `${format(GalaxyGenerator.generatedGalaxies, 2)} / ${format(GalaxyGenerator.generationCap, 2)} Galaxies`],\n        angle: 290,\n        diagonal: 40,\n        horizontal: 16\n      }\n    }\n  },\n  // Invisible element to suppress the mouseover detection on the galaxy icon causing the legend to flicker\n  \"pelle-galaxy-generator-sigil-mask\": {\n    visible: () => Pelle.hasGalaxyGenerator,\n    complete: () => Pelle.hasGalaxyGenerator ? 1 : 0,\n    node: {\n      clickAction: () => Tab.celestials.pelle.show(true),\n      position: Positions.pelleAchievementRequirement,\n      ring: {\n        rMajor: 20\n      }\n    }\n  },\n  \"pelle-galaxy-generator-path\": {\n    visible: () => Pelle.hasGalaxyGenerator,\n    complete: () => {\n      const riftCaps = PelleRifts.all.map(r => r.config.galaxyGeneratorThreshold);\n      const brokenRifts = riftCaps.countWhere(n => GalaxyGenerator.generatedGalaxies >= n);\n      if (brokenRifts === 5) return 1;\n      const prevRift = riftCaps.filter(n => GalaxyGenerator.generatedGalaxies >= n).max();\n      const nextRift = riftCaps.filter(n => GalaxyGenerator.generatedGalaxies < n).min();\n      const currRiftProp = Math.sqrt((GalaxyGenerator.generatedGalaxies - prevRift) / (nextRift - prevRift));\n      return (brokenRifts + currRiftProp) / 5;\n    },\n    connector: function () {\n      const pathStart = 0.5 * Math.PI;\n      const pathEnd = pathStart + 10 * Math.PI;\n      const path = LogarithmicSpiral.fromPolarEndpoints(pelleStarPosition(0, 0), pathStart, 18, pathEnd, 150);\n      return {\n        pathStart,\n        pathEnd,\n        path,\n        pathPadStart: 0,\n        pathPadEnd: 0,\n        fill: \"#00bbbb\"\n      };\n    }()\n  },\n  // The path BG is invisible, but we want to make sure it extends far enough that it expands out \"forever\"\n  \"pelle-galaxy-generator-infinite\": {\n    visible: () => Pelle.hasGalaxyGenerator && !Number.isFinite(GalaxyGenerator.generationCap),\n    complete: () => Math.clamp((GalaxyGenerator.generatedGalaxies - 1e10) / 2e11, 1e-6, 1),\n    connector: function () {\n      const pathStart = 0.5 * Math.PI;\n      const pathEnd = pathStart + 10 * Math.PI;\n      const path = LogarithmicSpiral.fromPolarEndpoints(pelleStarPosition(0, 0), pathStart, 150, pathEnd, 1250);\n      return {\n        pathStart,\n        pathEnd,\n        path,\n        pathPadStart: 0,\n        pathPadEnd: 0,\n        drawOrder: CELESTIAL_NAV_DRAW_ORDER.CANVAS_OVERLAY,\n        fill: \"#00bbbb\",\n        noBG: true\n      };\n    }()\n  }\n});","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/celestials/navigation.js"],"names":["DC","wordShift","emphasizeEnd","fraction","Math","pow","vUnlockProgress","index","VUnlocks","vAchievementUnlock","isUnlocked","db","Object","values","GameDatabase","celestials","v","mainUnlock","find","e","id","progress","vUnlockLegendLabel","complete","name","format","resource","requirement","pelleStarPosition","angle","scale","pelleCenter","Vector","theta","PI","cos","sin","plus","pelleStarConnector","fillColor","isOverfill","pelleSize","pathStart","pathEnd","path","LogarithmicSpiral","fromPolarEndpoints","pathPadStart","angleFromRadius","pathPadEnd","fill","drawOrder","CELESTIAL_NAV_DRAW_ORDER","NODE_OVERLAYS","undefined","noBG","FILL_STATE","LOCKED","FILL","DRAIN","OVERFILL","riftFillStage","rift","PelleRifts","toLowerCase","canBeApplied","Pelle","hasGalaxyGenerator","reducedTo","NODE_BG","CONNECTORS","NODES","CANVAS_OVERLAY","Positions","freeze","teresa","teresaPerkPointShop","effarigShop","effarigRealityUnlock","effarigNode","enslavedReality","enslavedGlyphLevel","enslavedGlyphRarity","vUnlockAchievement","sqrt","vAchievement0","vAchievement1","vAchievement2","vAchievement3","vAchievement4","vAchievement5","raReality","raPetTeresa","raPetEffarig","raPetEnslaved","raPetV","laitelaFirstCenter","laitelaFirstLeft","laitelaFirstRight","laitelaSecondCenter","laitelaSecondLeft","laitelaSecondRight","laitelaThirdCenter","pelleUnlock","pelleAchievementRequirement","pelleVacuum","pelleDecay","pelleChaos","pelleRecursion","pelleParadox","pelleGalaxyGen","pelleRiftFill","textAngle","fillType","visibleCheck","progressFn","legendFn","percentFn","incompleteClass","nodeFill","connectorFill","clamp","realPercentage","percentage","visible","isDoomed","node","clickAction","Tab","pelle","show","position","ring","rMajor","forceLegend","legend","text","formatPercents","wordCycle","diagonal","horizontal","connector","fillStates","riftNames","angles","riftFillElements","length","toUpperCase","celestialNavigation","completeClass","rMinor","TeresaUnlocks","run","Decimal","pLog10","Teresa","pouredAmount","log10","price","hideWhenCompleted","rm","cost","runCompleted","symbol","alwaysShowLegend","shop","LinearPath","connectCircles","completeWidth","incompleteWidth","effarig","EffarigUnlock","clampMax","Currency","relicShards","value","rs","infinity","Effarig","isRunning","antimatter","NUMBER_MAX_VALUE","am","Number","MAX_VALUE","bgDrawOrder","eternity","infinityPoints","ip","reality","eternityPoints","ep","goal","E4000","enslaved","gapCenterDeg","gapDeg","player","records","bestReality","glyphLevel","gapAngleDeg","formatInt","min","trimEnd","bestRarity","strengthToRarity","glyphStrength","trimStart","Enslaved","isCompleted","Achievement","requirementChecks","noAD8","galaxies","symbolOffset","VRunUnlocks","all","completions","config","raUnlock","ra","isStacked","level","Ra","pets","unlocked","unlocks","effarigUnlock","enslavedUnlock","vUnlock","DarkMatterDimension","unlockUpgrade","canBeBought","Laitela","MachineHandler","isIMUnlocked","maxID1","neq","exponent","realityMachines","baseRMCap","laitela","symbolScale","realityName","realityMachineCap","hasIDs","amGoal","E1_5E12","upgrade","isBought","isAvailableForPurchase","currency","difficultyTier","fastestCompletion","dmdText","dim","adjustedStartingCost","darkMatter","max","singularities","gte","darkEnergy","Singularity","cap","singularityGoal","auto","singularity","isActive","singularitiesGained","SingularityMilestone","autoCondense","start","Replicanti","total","dilation","totalTachyonGalaxies","allGalaxies","ImaginaryUpgrade","imaginaryMachines","isPossible","Tickspeed","continuumValue","imCost","laitelaProgress","Glyphs","activeWithoutCompanion","laitelaString","achievements","Achievements","prePelleRows","countWhere","r","every","a","alchemy","AlchemyResources","capped","GalaxyGenerator","generatedGalaxies","generationCap","riftCaps","map","galaxyGeneratorThreshold","brokenRifts","n","prevRift","filter","nextRift","currRiftProp","isFinite"],"mappings":"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","sourcesContent":["import { DC } from \"../../constants\";\r\nimport wordShift from \"../../word-shift\";\r\n\r\nexport function emphasizeEnd(fraction) {\r\n  return Math.pow(fraction, 10);\r\n}\r\n\r\nexport function vUnlockProgress(index) {\r\n  if (VUnlocks.vAchievementUnlock.isUnlocked) return 1;\r\n  const db = Object.values(GameDatabase.celestials.v.mainUnlock).find(e => e.id === index);\r\n  return db.progress();\r\n}\r\n\r\nexport function vUnlockLegendLabel(complete, index) {\r\n  const db = Object.values(GameDatabase.celestials.v.mainUnlock).find(e => e.id === index);\r\n  if (complete >= 1) return `${db.name} condition for V`;\r\n  return `Reach ${db.format(db.resource())} / ${db.format(db.requirement)} ${db.name}.`;\r\n}\r\n\r\n// Angle is defined/rescaled so that 0 is the first rift, 4 is the last one, and all 5 are equally spaced around\r\n// a circle. Starts at top-left and goes clockwise, reference point is that 3 is directly down. It's allowed to be\r\n// non-integer since it's also used for off-center curve control points\r\nexport function pelleStarPosition(angle, scale) {\r\n  const pelleCenter = new Vector(750, 550);\r\n  const theta = (0.7 - 0.4 * angle) * Math.PI;\r\n  return new Vector(scale * Math.cos(theta), -scale * Math.sin(theta)).plus(pelleCenter);\r\n}\r\n\r\n// Makes curved spokes connecting the center of Pelle to all the outer nodes corresponding to rifts\r\nfunction pelleStarConnector(index, fillColor, isOverfill) {\r\n  return (function() {\r\n    // This should be half of the second argument used in pelleStarPosition when used to define rift node positions\r\n    const pelleSize = 75;\r\n    const pathStart = (0.4 * index + 0.5) * Math.PI;\r\n\r\n    // Technically 2 should be about 1.929 and 4/3 should be about 1.328; exact values for both of these leave a small\r\n    // gap between the path and the node, so we round up a bit to make those go away\r\n    const pathEnd = pathStart + 2;\r\n    const path = LogarithmicSpiral.fromPolarEndpoints(pelleStarPosition(index + 0.5, pelleSize),\r\n      pathStart, pelleSize, pathEnd, 4 / 3 * pelleSize);\r\n    // The +0.01 prevents curve decomposition errors from happening\r\n    const pathPadStart = path.angleFromRadius(pelleSize + 0.01) - pathStart;\r\n    const pathPadEnd = pathEnd - path.angleFromRadius(4 / 3 * pelleSize);\r\n    return {\r\n      pathStart,\r\n      pathEnd,\r\n      path,\r\n      pathPadStart,\r\n      pathPadEnd,\r\n      fill: fillColor,\r\n      drawOrder: isOverfill ? CELESTIAL_NAV_DRAW_ORDER.NODE_OVERLAYS : undefined,\r\n      noBG: isOverfill,\r\n    };\r\n  }());\r\n}\r\n\r\nconst FILL_STATE = {\r\n  LOCKED: 0,\r\n  FILL: 1,\r\n  DRAIN: 2,\r\n  OVERFILL: 3\r\n};\r\n\r\nfunction riftFillStage(name) {\r\n  const rift = PelleRifts[name.toLowerCase()];\r\n  if (!rift.canBeApplied) return FILL_STATE.LOCKED;\r\n  if (!Pelle.hasGalaxyGenerator || rift.reducedTo === 1) return FILL_STATE.FILL;\r\n  if (rift.reducedTo < 1) return FILL_STATE.DRAIN;\r\n  return FILL_STATE.OVERFILL;\r\n}\r\n\r\nexport const CELESTIAL_NAV_DRAW_ORDER = {\r\n  // Node background is a black fuzzy circle drawn behind nodes. It can help show their\r\n  // outline in some cases, and can be used in cases where a connector passes under a node\r\n  NODE_BG: 0,\r\n  CONNECTORS: 1000,\r\n  NODES: 2000,\r\n  NODE_OVERLAYS: 3000,\r\n  CANVAS_OVERLAY: 4000,\r\n};\r\n\r\nconst Positions = Object.freeze({\r\n  teresa: new Vector(100, 100),\r\n  teresaPerkPointShop: new Vector(0, -50),\r\n\r\n  effarigShop: new Vector(300, 0),\r\n  effarigRealityUnlock: new Vector(400, 50),\r\n  effarigNode: new Vector(550, 25),\r\n\r\n  enslavedReality: new Vector(650, 250),\r\n  enslavedGlyphLevel: new Vector(650 + 75 * Math.cos(Math.PI / 180 * -60), 250 + 75 * Math.sin(Math.PI / 180 * -60)),\r\n  enslavedGlyphRarity: new Vector(650 + 75 * Math.cos(Math.PI / 180 * 120), 250 + 75 * Math.sin(Math.PI / 180 * 120)),\r\n\r\n  vUnlockAchievement: new Vector(400, 350 + 50 * Math.sqrt(3)),\r\n  vAchievement0: new Vector(350, 350),\r\n  vAchievement1: new Vector(450, 350),\r\n  vAchievement2: new Vector(500, 350 + 50 * Math.sqrt(3)),\r\n  vAchievement3: new Vector(450, 350 + 100 * Math.sqrt(3)),\r\n  vAchievement4: new Vector(350, 350 + 100 * Math.sqrt(3)),\r\n  vAchievement5: new Vector(300, 350 + 50 * Math.sqrt(3)),\r\n\r\n  raReality: new Vector(400, 200),\r\n  raPetTeresa: new Vector(400 + 85 * Math.sin(Math.PI / 180 * 252), 200 + 85 * Math.cos(Math.PI / 180 * 252)),\r\n  raPetEffarig: new Vector(400 + 85 * Math.sin(Math.PI / 180 * 140), 200 + 85 * Math.cos(Math.PI / 180 * 140)),\r\n  raPetEnslaved: new Vector(400 + 85 * Math.sin(Math.PI / 180 * 78), 200 + 85 * Math.cos(Math.PI / 180 * 78)),\r\n  raPetV: new Vector(400 + 85 * Math.sin(Math.PI / 180 * 0), 200 + 85 * Math.cos(Math.PI / 180 * 0)),\r\n\r\n  laitelaFirstCenter: new Vector(150, 450),\r\n  laitelaFirstLeft: new Vector(100, 500),\r\n  laitelaFirstRight: new Vector(200, 500),\r\n  laitelaSecondCenter: new Vector(150, 550),\r\n  laitelaSecondLeft: new Vector(100, 600),\r\n  laitelaSecondRight: new Vector(200, 600),\r\n  laitelaThirdCenter: new Vector(150, 650),\r\n\r\n  pelleUnlock: new Vector(450, 580),\r\n  pelleAchievementRequirement: pelleStarPosition(0, 0),\r\n  pelleVacuum: pelleStarPosition(0, 150),\r\n  pelleDecay: pelleStarPosition(1, 150),\r\n  pelleChaos: pelleStarPosition(2, 150),\r\n  pelleRecursion: pelleStarPosition(3, 150),\r\n  pelleParadox: pelleStarPosition(4, 150),\r\n\r\n  pelleGalaxyGen: pelleStarPosition(0, 0),\r\n});\r\n\r\n// Reduces boilerplate for rift line objects, but needs quite a few parameters to do so since there are three separate\r\n// elements that render for filling - the initial fill, the drain, and then the overfill\r\n// eslint-disable-next-line max-params\r\nfunction pelleRiftFill(name, index, textAngle, fillType) {\r\n  let visibleCheck, progressFn, legendFn, percentFn, incompleteClass, nodeFill, connectorFill;\r\n  switch (fillType) {\r\n    case FILL_STATE.FILL:\r\n      // The curve starts inside of the node, so we give the completion variable a bit of a headstart so that we can\r\n      // immediately see some filling even when it's pretty much still empty\r\n      visibleCheck = () => riftFillStage(name) === FILL_STATE.FILL;\r\n      progressFn = () => Math.clamp(0.1 + PelleRifts[name.toLowerCase()].realPercentage / 0.9, 1e-6, 1);\r\n      legendFn = () => false;\r\n      percentFn = () => PelleRifts[name.toLowerCase()].realPercentage;\r\n      incompleteClass = \"c-celestial-nav__test-incomplete\";\r\n      nodeFill = \"crimson\";\r\n      connectorFill = \"crimson\";\r\n      break;\r\n    case FILL_STATE.DRAIN:\r\n      // The logarithmic curve code sometimes throws errors if you attempt to draw with complete === 0, so we cheat and\r\n      // make it a really tiny number that should format to 0 in most notations. We also do a pow in order to make it\r\n      // visually smoother, because the generator spiral blocks the bottom bit and makes it look static near the end of\r\n      // the drain\r\n      visibleCheck = () => riftFillStage(name) >= FILL_STATE.DRAIN;\r\n      progressFn = () => Math.clamp(Math.sqrt(PelleRifts[name.toLowerCase()].reducedTo), 1e-6, 1);\r\n      legendFn = () => riftFillStage(name) === FILL_STATE.DRAIN && PelleRifts[name.toLowerCase()].reducedTo < 1;\r\n      percentFn = () => PelleRifts[name.toLowerCase()].reducedTo;\r\n      incompleteClass = \"c-celestial-nav__drained-rift\";\r\n      nodeFill = \"crimson\";\r\n      connectorFill = \"#550919\";\r\n      break;\r\n    case FILL_STATE.OVERFILL:\r\n      visibleCheck = () => riftFillStage(name) === FILL_STATE.OVERFILL;\r\n      progressFn = () => Math.clamp(PelleRifts[name.toLowerCase()].percentage - 1, 1e-6, 1);\r\n      percentFn = () => PelleRifts[name.toLowerCase()].percentage;\r\n      legendFn = () => true;\r\n      incompleteClass = undefined;\r\n      nodeFill = \"#ff7700\";\r\n      connectorFill = \"#ff9900\";\r\n      break;\r\n  }\r\n\r\n  return {\r\n    visible: () => Pelle.isDoomed && visibleCheck(),\r\n    complete: () => progressFn(),\r\n    node: {\r\n      clickAction: () => Tab.celestials.pelle.show(true),\r\n      incompleteClass,\r\n      position: Positions[`pelle${name}`],\r\n      fill: nodeFill,\r\n      ring: {\r\n        rMajor: 8,\r\n      },\r\n      forceLegend: () => legendFn(),\r\n      legend: {\r\n        text: () => [\r\n          `${formatPercents(percentFn(), 1)} ${wordShift.wordCycle(PelleRifts[name.toLowerCase()].name)}`\r\n        ],\r\n        angle: textAngle,\r\n        diagonal: 30,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: pelleStarConnector(index, connectorFill, fillType === FILL_STATE.OVERFILL),\r\n  };\r\n}\r\n\r\n// Slightly reduces boilerplate; there are a total of 15 rift elements which are largely duplicated code\r\nconst fillStates = [\"fill\", \"drain\", \"overfill\"];\r\nconst riftNames = [\"Vacuum\", \"Decay\", \"Chaos\", \"Recursion\", \"Paradox\"];\r\nconst angles = [225, 315, 45, 135, 135];\r\nconst riftFillElements = {};\r\nfor (const fill of fillStates) {\r\n  for (let index = 0; index < riftNames.length; index++) {\r\n    const name = riftNames[index];\r\n    riftFillElements[`pelle-${name}-${fill}`] = pelleRiftFill(name, index, angles[index],\r\n      FILL_STATE[fill.toUpperCase()]);\r\n  }\r\n}\r\n\r\nexport const celestialNavigation = {\r\n  \"teresa-base\": {\r\n    visible: () => true,\r\n    complete: () => 1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.teresa.show(true),\r\n      completeClass: \"c-celestial-nav__test-complete\",\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      position: Positions.teresa,\r\n      ring: {\r\n        rMajor: 78,\r\n        rMinor: 64,\r\n      },\r\n      legend: {\r\n        text: \"Teresa\",\r\n        angle: 135,\r\n        diagonal: 32,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n  },\r\n  \"teresa-reality-unlock\": {\r\n    visible: () => true,\r\n    complete: () => (TeresaUnlocks.run.canBeApplied\r\n      ? 1 : Decimal.pLog10(Teresa.pouredAmount) / Math.log10(TeresaUnlocks.run.price)),\r\n    node: {\r\n      completeClass: \"c-celestial-nav__test-complete\",\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      position: Positions.teresa,\r\n      ring: {\r\n        rMajor: 32,\r\n        rMinor: 22,\r\n      },\r\n      legend: {\r\n        hideWhenCompleted: true,\r\n        text: () => {\r\n          const rm = Teresa.pouredAmount;\r\n          const cost = TeresaUnlocks.run.price;\r\n          return `Pour ${format(rm, 2)} / ${format(cost, 2)} RM`;\r\n        },\r\n        angle: 135,\r\n        diagonal: 16,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: (function() {\r\n      const pathStart = -Math.PI;\r\n      const pathEnd = Math.PI;\r\n      const path = LogarithmicSpiral.fromPolarEndpoints(Positions.teresa, -Math.PI, 69, Math.PI, 26);\r\n      const pathPadStart = path.angleFromRadius(64 - 3) - pathStart;\r\n      const pathPadEnd = pathEnd - path.angleFromRadius(34);\r\n      return {\r\n        pathStart,\r\n        pathEnd,\r\n        path,\r\n        pathPadStart,\r\n        pathPadEnd,\r\n      };\r\n    }()),\r\n  },\r\n  \"teresa-reality\": {\r\n    visible: () => true,\r\n    complete: () => (Teresa.runCompleted ? 1 : 0),\r\n    node: {\r\n      clickAction: () => Tab.celestials.teresa.show(true),\r\n      completeClass: \"c-celestial-nav__test-complete\",\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      symbol: \"Ϟ\",\r\n      position: Positions.teresa,\r\n      ring: {\r\n        rMajor: 16,\r\n      },\r\n      alwaysShowLegend: true,\r\n      legend: {\r\n        text: \"Teresa's Reality\",\r\n        angle: -135,\r\n        diagonal: 96,\r\n        horizontal: 16,\r\n      },\r\n    }\r\n  },\r\n  \"teresa-pp-shop\": {\r\n    visible: () => true,\r\n    complete: () => (TeresaUnlocks.shop.canBeApplied\r\n      ? 1 : Decimal.pLog10(Teresa.pouredAmount) / Math.log10(TeresaUnlocks.shop.price)),\r\n    node: {\r\n      clickAction: () => Tab.celestials.teresa.show(true),\r\n      completeClass: \"c-celestial-nav__test-complete\",\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      position: Positions.teresaPerkPointShop,\r\n      ring: {\r\n        rMajor: 16,\r\n        rMinor: 0,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          if (complete >= 1) return \"Teresa's Perk Point Shop\";\r\n          const rm = Teresa.pouredAmount;\r\n          const cost = TeresaUnlocks.shop.price;\r\n          return [\r\n            \"Teresa's Perk Point Shop\",\r\n            `Pour ${format(rm, 2)} / ${format(cost, 2)} Reality Machines`\r\n          ];\r\n        },\r\n        angle: -35,\r\n        diagonal: 16,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: LinearPath.connectCircles(Positions.teresa, 78 - 1, Positions.teresaPerkPointShop, 16 - 1),\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"effarig-shop\": {\r\n    visible: () => true,\r\n    complete: () => (TeresaUnlocks.effarig.canBeApplied\r\n      ? 1 : Decimal.pLog10(Teresa.pouredAmount) / Math.log10(TeresaUnlocks.effarig.price)),\r\n    node: {\r\n      clickAction: () => Tab.celestials.effarig.show(true),\r\n      completeClass: \"c-celestial-nav__effarig\",\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      position: Positions.effarigShop,\r\n      ring: {\r\n        rMajor: 24,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          if (complete >= 1) return \"Effarig's Shop\";\r\n          const rm = Teresa.pouredAmount;\r\n          const cost = TeresaUnlocks.effarig.price;\r\n          return [\r\n            \"Effarig\",\r\n            `Pour ${format(rm, 2)} / ${format(cost, 2)} Reality Machines`\r\n          ];\r\n        },\r\n        angle: -135,\r\n        diagonal: 16,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: LinearPath.connectCircles(Positions.teresa, 78 - 1, Positions.effarigShop, 24 - 1),\r\n      fill: \"url(#gradTeresaEffarig)\",\r\n    }\r\n  },\r\n  \"effarig-reality-unlock\": {\r\n    visible: () => TeresaUnlocks.effarig.canBeApplied,\r\n    // If the upgrade to unlock the reality isn't yet bought, clamp the progress at 99.9%,\r\n    // even if the player has enough relic shards to buy it.\r\n    complete: () => (EffarigUnlock.run.isUnlocked\r\n      ? 1 : Math.clampMax(0.999, Decimal.pLog10(Currency.relicShards.value) /\r\n        Math.log10(EffarigUnlock.run.cost))),\r\n    node: {\r\n      clickAction: () => Tab.celestials.effarig.show(true),\r\n      completeClass: \"c-celestial-nav__effarig\",\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      position: Positions.effarigRealityUnlock,\r\n      ring: {\r\n        rMajor: 16,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          if (complete >= 1) return \"Unlock Effarig's Reality\";\r\n          const rs = Currency.relicShards.value;\r\n          const cost = EffarigUnlock.run.cost;\r\n          return [\r\n            \"Unlock Effarig's Reality\",\r\n            `Reach ${format(rs, 2)} / ${format(cost, 2)} Relic Shards`\r\n          ];\r\n        },\r\n        angle: 75,\r\n        diagonal: 40,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: LinearPath.connectCircles(Positions.effarigShop, 24 - 1, Positions.effarigRealityUnlock, 16 - 1),\r\n      fill: \"#d13737\",\r\n    }\r\n  },\r\n  \"effarig-infinity\": {\r\n    visible: () => EffarigUnlock.run.isUnlocked,\r\n    complete: () => {\r\n      if (EffarigUnlock.infinity.isUnlocked) return 1;\r\n      if (!Effarig.isRunning) return 0;\r\n\r\n      return Currency.antimatter.value.pLog10() / Decimal.NUMBER_MAX_VALUE.log10();\r\n    },\r\n    node: {\r\n      clickAction: () => Tab.celestials.effarig.show(true),\r\n      completeClass: \"c-celestial-nav__effarig\",\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      position: Positions.effarigNode,\r\n      ring: {\r\n        rMajor: 60,\r\n        rMinor: 52,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          if (complete >= 1) return \"Effarig's Infinity\";\r\n          if (complete === 0) return \"Unlock Effarig's Reality\";\r\n          const am = Effarig.isRunning ? Currency.antimatter.value : 0;\r\n          return [\r\n            \"Effarig's Infinity\",\r\n            `Reach ${format(am, 2)} / ${format(Number.MAX_VALUE, 2)}`,\r\n            \"Antimatter inside Effarig's Reality.\"\r\n          ];\r\n        },\r\n        angle: 0,\r\n        diagonal: 100,\r\n        horizontal: 16,\r\n      },\r\n      bgDrawOrder: CELESTIAL_NAV_DRAW_ORDER.NODE_BG + 750,\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: LinearPath.connectCircles(Positions.effarigRealityUnlock, 16 - 1, Positions.effarigNode, 60 - 1),\r\n      fill: \"#d13737\",\r\n    }\r\n  },\r\n  \"effarig-eternity\": {\r\n    visible: () => EffarigUnlock.infinity.isUnlocked,\r\n    complete: () => {\r\n      if (EffarigUnlock.eternity.isUnlocked) return 1;\r\n      if (!Effarig.isRunning) return 0;\r\n\r\n      return Currency.infinityPoints.value.pLog10() / Decimal.NUMBER_MAX_VALUE.log10();\r\n    },\r\n    node: {\r\n      clickAction: () => Tab.celestials.effarig.show(true),\r\n      completeClass: \"c-celestial-nav__effarig\",\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#7131ec\",\r\n      position: Positions.effarigNode,\r\n      ring: {\r\n        rMajor: 40,\r\n        rMinor: 30,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          if (complete >= 1) return \"Effarig's Eternity\";\r\n          const ip = Effarig.isRunning ? Currency.infinityPoints.value : 0;\r\n          return [\r\n            \"Effarig's Eternity\",\r\n            `Reach ${format(ip, 2)} / ${format(Number.MAX_VALUE, 2)}`,\r\n            \"Infinity Points inside Effarig's Reality.\"\r\n          ];\r\n        },\r\n        angle: -45,\r\n        diagonal: 16,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: (function() {\r\n      const pathStart = -Math.PI;\r\n      const pathEnd = 0;\r\n      const path = LogarithmicSpiral.fromPolarEndpoints(new Vector(560, 25), pathStart, 66, pathEnd, 26);\r\n      const pathPadStart = 0;\r\n      const pathPadEnd = pathEnd - path.angleFromRadius(30);\r\n      return {\r\n        pathStart,\r\n        pathEnd,\r\n        path,\r\n        pathPadStart,\r\n        pathPadEnd,\r\n        fill: \"#d13737\"\r\n      };\r\n    }())\r\n  },\r\n  \"effarig-reality\": {\r\n    visible: () => EffarigUnlock.eternity.isUnlocked,\r\n    complete: () => {\r\n      if (EffarigUnlock.reality.isUnlocked) return 1;\r\n      if (!Effarig.isRunning) return 0;\r\n\r\n      return Currency.eternityPoints.value.pLog10() / 4000;\r\n    },\r\n    node: {\r\n      clickAction: () => Tab.celestials.effarig.show(true),\r\n      completeClass: \"c-celestial-nav__effarig\",\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#A101ec\",\r\n      position: new Vector(550, 25),\r\n      ring: {\r\n        rMajor: 20,\r\n        rMinor: 0,\r\n      },\r\n      symbol: \"Ϙ\",\r\n      alwaysShowLegend: true,\r\n      legend: {\r\n        text: complete => {\r\n          if (complete >= 1) return \"Effarig's Reality\";\r\n          const ep = Effarig.isRunning ? Currency.eternityPoints.value : 0;\r\n          const goal = DC.E4000;\r\n          return [\r\n            \"Effarig's Reality\",\r\n            `Reach ${format(ep, 2)} / ${format(goal, 2)}`,\r\n            \"Eternity Points inside Effarig's Reality.\"\r\n          ];\r\n        },\r\n        angle: -120,\r\n        diagonal: 82,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: (function() {\r\n      const pathStart = 0;\r\n      const pathEnd = Math.PI;\r\n      const path = LogarithmicSpiral.fromPolarEndpoints(new Vector(558, 25), pathStart, 26, pathEnd, 24);\r\n      const pathPadStart = 0;\r\n      const pathPadEnd = 0;\r\n      return {\r\n        pathStart,\r\n        pathEnd,\r\n        path,\r\n        pathPadStart,\r\n        pathPadEnd,\r\n        fill: \"#d13737\"\r\n      };\r\n    }())\r\n  },\r\n  \"enslaved\": {\r\n    visible: () => EffarigUnlock.eternity.isUnlocked,\r\n    complete: () => (EffarigUnlock.eternity.isUnlocked ? 1 : 0),\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.enslaved.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#ffa337\",\r\n      position: Positions.enslavedReality,\r\n      ring: {\r\n        rMajor: 80,\r\n        rMinor: 70,\r\n        gapCenterDeg: 15,\r\n        gapDeg: 200,\r\n      },\r\n      alwaysShowLegend: false,\r\n      legend: {\r\n        text: \"Nameless\",\r\n        angle: -90,\r\n        diagonal: 20,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      drawOrder: CELESTIAL_NAV_DRAW_ORDER.NODE_BG + 500,\r\n      path: LinearPath.connectCircles(Positions.effarigNode, 40 - 1, Positions.enslavedReality, 80 - 1),\r\n      fill: \"url(#gradEffarigEnslaved)\",\r\n    }\r\n  },\r\n  \"enslaved-unlock-glyph-level\": {\r\n    visible: () => EffarigUnlock.eternity.isUnlocked,\r\n    complete: () => player.records.bestReality.glyphLevel / 5000,\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.enslaved.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#ffa337\",\r\n      position: Positions.enslavedGlyphLevel,\r\n      ring: {\r\n        rMajor: 24,\r\n        rMinor: 16,\r\n        gapCenterDeg: 40,\r\n        gapDeg: 60,\r\n        gapAngleDeg: 0,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          if (complete >= 1) return \"Glyph level chain has been broken\";\r\n          const goal = 5000;\r\n          return [\r\n            \"Break a chain\",\r\n            `Reach Glyph level ${formatInt(Math.min(player.records.bestReality.glyphLevel, goal))}/${formatInt(goal)}`\r\n          ];\r\n        },\r\n        angle: -45,\r\n        diagonal: 16,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: new LinearPath(\r\n        new Vector(650 - 74 * Math.sqrt(0.75), 250 - 74 * 0.5),\r\n        Positions.enslavedGlyphLevel)\r\n        .trimEnd(23),\r\n      fill: \"#ffa337\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"enslaved-unlock-glyph-rarity\": {\r\n    visible: () => EffarigUnlock.eternity.isUnlocked,\r\n    complete: () => {\r\n      const bestRarity = strengthToRarity(player.records.bestReality.glyphStrength);\r\n      return bestRarity / 100;\r\n    },\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.enslaved.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#ffa337\",\r\n      position: Positions.enslavedGlyphRarity,\r\n      ring: {\r\n        rMajor: 24,\r\n        rMinor: 16,\r\n        gapCenterDeg: 220,\r\n        gapDeg: 60,\r\n        gapAngleDeg: 0,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          if (complete >= 1) return \"Glyph rarity chain has been broken\";\r\n          const goal = 100;\r\n          return [\r\n            \"Break a chain\",\r\n            `Reach Glyph rarity ${formatPercents(complete * goal / 100, 1)}/${formatPercents(goal / 100, 1)}`\r\n          ];\r\n        },\r\n        angle: 45,\r\n        diagonal: 32,\r\n        horizontal: 32,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: new LinearPath(Positions.enslavedGlyphRarity, Positions.enslavedGlyphLevel).trimStart(23).trimEnd(23),\r\n      fill: \"#ffa337\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"enslaved-reality\": {\r\n    visible: () => EffarigUnlock.eternity.isUnlocked,\r\n    complete: () => {\r\n      if (Enslaved.isCompleted) return 1;\r\n      if (!Enslaved.isRunning) return 0;\r\n\r\n      return Currency.eternityPoints.value.pLog10() / 4000;\r\n    },\r\n    node: {\r\n      clickAction: () => Tab.celestials.enslaved.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#ffa337\",\r\n      position: Positions.enslavedReality,\r\n      ring: {\r\n        rMajor: 80,\r\n        rMinor: 70,\r\n        gapCenterDeg: 195,\r\n        gapDeg: 200,\r\n      },\r\n      alwaysShowLegend: true,\r\n      legend: {\r\n        text: complete => {\r\n          if (complete >= 1) return \"The Nameless Ones' Reality\";\r\n          const ep = Enslaved.isRunning ? Currency.eternityPoints.value : 0;\r\n          const goal = DC.E4000;\r\n          return [\r\n            \"The Nameless Ones' Reality\",\r\n            `Reach ${format(ep, 2)} / ${format(goal, 2)}`,\r\n            \"Eternity Points inside The Nameless Ones' Reality.\"\r\n          ];\r\n        },\r\n        angle: 45,\r\n        diagonal: 16,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: new LinearPath(Positions.enslavedGlyphRarity, new Vector(650 + 74 * Math.sqrt(0.75), 250 + 74 * 0.5))\r\n        .trimStart(23),\r\n      fill: \"#ffa337\",\r\n    }\r\n  },\r\n  \"v-unlock-achievement\": {\r\n    visible: () => EffarigUnlock.reality.isUnlocked,\r\n    complete: () => {\r\n      if (Achievement(151).isUnlocked) return 1;\r\n      if (!player.requirementChecks.infinity.noAD8) return 0;\r\n\r\n      return player.galaxies / 800;\r\n    },\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.v.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      symbol: \"⌬\",\r\n      symbolOffset: \"2\",\r\n      fill: \"#ffe066\",\r\n      position: Positions.vUnlockAchievement,\r\n      ring: {\r\n        rMajor: 20,\r\n      },\r\n      alwaysShowLegend: true,\r\n      legend: {\r\n        text: complete => {\r\n          const goal = 800;\r\n          if (complete >= 1) return \"V's Reality\";\r\n          const galaxies = player.requirementChecks.infinity.noAD8 ? player.galaxies : 0;\r\n          return [\r\n            \"V's unlock Achievement\",\r\n            `Reach ${formatInt(galaxies)} / ${formatInt(goal)} Antimatter Galaxies without buying`,\r\n            \"8th Antimatter Dimensions in your current Infinity\"\r\n          ];\r\n        },\r\n        angle: 135,\r\n        diagonal: 60,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: LinearPath.connectCircles(Positions.enslavedReality, 80 - 1, Positions.vUnlockAchievement, 16 - 1),\r\n      fill: \"url(#gradEnslavedV)\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"v-unlock-1\": {\r\n    visible: () => Achievement(151).isUnlocked || VUnlocks.vAchievementUnlock.isUnlocked,\r\n    complete: () => vUnlockProgress(1),\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.v.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#ffe066\",\r\n      position: Positions.vAchievement1,\r\n      ring: {\r\n        rMajor: 8,\r\n      },\r\n      legend: {\r\n        text: complete => vUnlockLegendLabel(complete, 1),\r\n        angle: -135,\r\n        diagonal: 50,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: new LinearPath(Positions.vUnlockAchievement, Positions.vAchievement1),\r\n      fill: \"#ffe066\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"v-unlock-2\": {\r\n    visible: () => Achievement(151).isUnlocked || VUnlocks.vAchievementUnlock.isUnlocked,\r\n    complete: () => vUnlockProgress(2),\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.v.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#ffe066\",\r\n      position: Positions.vAchievement2,\r\n      ring: {\r\n        rMajor: 8,\r\n      },\r\n      legend: {\r\n        text: complete => vUnlockLegendLabel(complete, 2),\r\n        angle: -45,\r\n        diagonal: 30,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: new LinearPath(Positions.vUnlockAchievement, Positions.vAchievement2),\r\n      fill: \"#ffe066\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"v-unlock-3\": {\r\n    visible: () => Achievement(151).isUnlocked || VUnlocks.vAchievementUnlock.isUnlocked,\r\n    complete: () => vUnlockProgress(3),\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.v.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#ffe066\",\r\n      position: Positions.vAchievement3,\r\n      ring: {\r\n        rMajor: 8,\r\n      },\r\n      legend: {\r\n        text: complete => vUnlockLegendLabel(complete, 3),\r\n        angle: 45,\r\n        diagonal: 30,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: new LinearPath(Positions.vUnlockAchievement, Positions.vAchievement3),\r\n      fill: \"#ffe066\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"v-unlock-4\": {\r\n    visible: () => Achievement(151).isUnlocked || VUnlocks.vAchievementUnlock.isUnlocked,\r\n    complete: () => vUnlockProgress(4),\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.v.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#ffe066\",\r\n      position: Positions.vAchievement4,\r\n      ring: {\r\n        rMajor: 8,\r\n      },\r\n      legend: {\r\n        text: complete => vUnlockLegendLabel(complete, 4),\r\n        angle: 135,\r\n        diagonal: 30,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: new LinearPath(Positions.vUnlockAchievement, Positions.vAchievement4),\r\n      fill: \"#ffe066\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"v-unlock-5\": {\r\n    visible: () => Achievement(151).isUnlocked || VUnlocks.vAchievementUnlock.isUnlocked,\r\n    complete: () => vUnlockProgress(5),\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.v.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#ffe066\",\r\n      position: Positions.vAchievement5,\r\n      ring: {\r\n        rMajor: 8,\r\n      },\r\n      legend: {\r\n        text: complete => vUnlockLegendLabel(complete, 5),\r\n        angle: -135,\r\n        diagonal: 30,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: new LinearPath(Positions.vUnlockAchievement, Positions.vAchievement5),\r\n      fill: \"#ffe066\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"v-unlock-6\": {\r\n    visible: () => Achievement(151).isUnlocked || VUnlocks.vAchievementUnlock.isUnlocked,\r\n    complete: () => vUnlockProgress(6),\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.v.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#ffe066\",\r\n      position: Positions.vAchievement0,\r\n      ring: {\r\n        rMajor: 8,\r\n      },\r\n      legend: {\r\n        text: complete => vUnlockLegendLabel(complete, 6),\r\n        angle: -135,\r\n        diagonal: 30,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: new LinearPath(Positions.vUnlockAchievement, Positions.vAchievement0),\r\n      fill: \"#ffe066\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n\r\n  \"v-achievement-0\": {\r\n    visible: () => VUnlocks.vAchievementUnlock.isUnlocked,\r\n    complete: () => VRunUnlocks.all[0].completions / 6,\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.v.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#ffe066\",\r\n      position: Positions.vAchievement0,\r\n      ring: {\r\n        rMajor: 8,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          const name = VRunUnlocks.all[0].config.name;\r\n          if (complete >= 1) return `V-Achievement \"${name}\"`;\r\n          const completions = VRunUnlocks.all[0].completions;\r\n          return [\r\n            \"V-Achievement\",\r\n            `Reach ${formatInt(completions)} / ${formatInt(6)} completions in ${name}.`\r\n          ];\r\n        },\r\n        angle: -135,\r\n        diagonal: 16,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: new LinearPath(Positions.vAchievement5, Positions.vAchievement0),\r\n      fill: \"#ffe066\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"v-achievement-1\": {\r\n    visible: () => VUnlocks.vAchievementUnlock.isUnlocked,\r\n    complete: () => VRunUnlocks.all[1].completions / 6,\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.v.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#ffe066\",\r\n      position: Positions.vAchievement1,\r\n      ring: {\r\n        rMajor: 8,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          const name = VRunUnlocks.all[1].config.name;\r\n          if (complete >= 1) return `V-Achievement \"${name}\"`;\r\n          const completions = VRunUnlocks.all[1].completions;\r\n          return [\r\n            \"V-Achievement\",\r\n            `Reach ${formatInt(completions)} / ${formatInt(6)} completions in ${name}.`\r\n          ];\r\n        },\r\n        angle: 20,\r\n        diagonal: 16,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: new LinearPath(Positions.vAchievement0, Positions.vAchievement1),\r\n      fill: \"#ffe066\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"v-achievement-2\": {\r\n    visible: () => VUnlocks.vAchievementUnlock.isUnlocked,\r\n    complete: () => VRunUnlocks.all[2].completions / 6,\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.v.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#ffe066\",\r\n      position: Positions.vAchievement2,\r\n      ring: {\r\n        rMajor: 8,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          const name = VRunUnlocks.all[2].config.name;\r\n          if (complete >= 1) return `V-Achievement \"${name}\"`;\r\n          const completions = VRunUnlocks.all[2].completions;\r\n          return [\r\n            \"V-Achievement\",\r\n            `Reach ${formatInt(completions)} / ${formatInt(6)} completions in ${name}.`\r\n          ];\r\n        },\r\n        angle: 315,\r\n        diagonal: 25,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: new LinearPath(Positions.vAchievement1, Positions.vAchievement2),\r\n      fill: \"#ffe066\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"v-achievement-3\": {\r\n    visible: () => VUnlocks.vAchievementUnlock.isUnlocked,\r\n    complete: () => VRunUnlocks.all[3].completions / 6,\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.v.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#ffe066\",\r\n      position: Positions.vAchievement3,\r\n      ring: {\r\n        rMajor: 8,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          const name = VRunUnlocks.all[3].config.name;\r\n          if (complete >= 1) return `V-Achievement \"${name}\"`;\r\n          const completions = VRunUnlocks.all[3].completions;\r\n          return [\r\n            \"V-Achievement\",\r\n            `Reach ${formatInt(completions)} / ${formatInt(6)} completions in ${name}.`\r\n          ];\r\n        },\r\n        angle: 135,\r\n        diagonal: 25,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: new LinearPath(Positions.vAchievement2, Positions.vAchievement3),\r\n      fill: \"#ffe066\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"v-achievement-4\": {\r\n    visible: () => VUnlocks.vAchievementUnlock.isUnlocked,\r\n    complete: () => VRunUnlocks.all[4].completions / 6,\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.v.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#ffe066\",\r\n      position: Positions.vAchievement4,\r\n      ring: {\r\n        rMajor: 8,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          const name = VRunUnlocks.all[4].config.name;\r\n          if (complete >= 1) return `V-Achievement \"${name}\"`;\r\n          const completions = VRunUnlocks.all[4].completions;\r\n          return [\r\n            \"V-Achievement\",\r\n            `Reach ${formatInt(completions)} / ${formatInt(6)} completions in ${name}.`\r\n          ];\r\n        },\r\n        angle: 60,\r\n        diagonal: 25,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: new LinearPath(Positions.vAchievement3, Positions.vAchievement4),\r\n      fill: \"#ffe066\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"v-achievement-5\": {\r\n    visible: () => VUnlocks.vAchievementUnlock.isUnlocked,\r\n    complete: () => VRunUnlocks.all[5].completions / 6,\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.v.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#ffe066\",\r\n      position: Positions.vAchievement5,\r\n      ring: {\r\n        rMajor: 8,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          const name = VRunUnlocks.all[5].config.name;\r\n          if (complete >= 1) return `V-Achievement \"${name}\"`;\r\n          const completions = VRunUnlocks.all[5].completions;\r\n          return [\r\n            \"V-Achievement\",\r\n            `Reach ${formatInt(completions)} / ${formatInt(6)} completions in ${name}.`\r\n          ];\r\n        },\r\n        angle: 260,\r\n        diagonal: 30,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: new LinearPath(Positions.vAchievement4, Positions.vAchievement5),\r\n      fill: \"#ffe066\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n\r\n  \"ra\": {\r\n    visible: () => VUnlocks.raUnlock.isUnlocked,\r\n    complete: () => (VUnlocks.raUnlock.isUnlocked ? 1 : 0),\r\n    node: {\r\n      clickAction: () => Tab.celestials.ra.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      symbol: \"\\uf185\",\r\n      symbolOffset: \"2\",\r\n      fill: \"#9063de\",\r\n      position: Positions.raReality,\r\n      ring: {\r\n        rMajor: 24,\r\n      },\r\n      alwaysShowLegend: true,\r\n      legend: {\r\n        text: \"Ra's Reality\",\r\n        angle: 230,\r\n        diagonal: 85,\r\n        horizontal: 16,\r\n      },\r\n    }\r\n  },\r\n  \"teresa-pet\": {\r\n    visible: () => VUnlocks.raUnlock.isUnlocked,\r\n    complete: () => (VUnlocks.raUnlock.isUnlocked ? 1 : 0),\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.ra.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#9063de\",\r\n      isStacked: true,\r\n      position: Positions.raPetTeresa,\r\n      ring: {\r\n        rMajor: 12,\r\n      },\r\n      legend: {\r\n        text: () => {\r\n          const level = Ra.pets.teresa.level;\r\n          if (level === 25) return `Ra's Teresa Memories have all been returned`;\r\n          return [\r\n            \"Ra's Teresa Memory level\",\r\n            `${formatInt(level)} / ${formatInt(25)}`\r\n          ];\r\n        },\r\n        angle: 142,\r\n        diagonal: 85,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0.05,\r\n      pathEnd: 0.95,\r\n      path: new LinearPath(Positions.raReality, Positions.raPetTeresa),\r\n      fill: \"#9063de\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"teresa-pet-to-teresa\": {\r\n    visible: () => VUnlocks.raUnlock.isUnlocked,\r\n    complete: () => Ra.pets.teresa.level / 25,\r\n    drawOrder: -1,\r\n    connector: {\r\n      pathStart: 0.05,\r\n      pathEnd: 0.70,\r\n      path: new LinearPath(Positions.raPetTeresa, Positions.teresa),\r\n      fill: \"url(#gradRaTeresa)\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"effarig-pet\": {\r\n    visible: () => VUnlocks.raUnlock.isUnlocked,\r\n    complete: () => Ra.pets.teresa.level / 8,\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.ra.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#9063de\",\r\n      isStacked: true,\r\n      position: Positions.raPetEffarig,\r\n      ring: {\r\n        rMajor: 12,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          const unlocked = Ra.pets.teresa.level;\r\n          const level = Ra.pets.effarig.level;\r\n          if (complete < 1) return `Ra's Teresa Memory level ${unlocked} / ${formatInt(8)}`;\r\n          if (level === 25) return `Ra's Effarig Memories have all been returned`;\r\n          return [\r\n            \"Ra's Effarig Memory level\",\r\n            `${formatInt(level)} / ${formatInt(25)}`\r\n          ];\r\n        },\r\n        angle: 142,\r\n        diagonal: 85,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0.05,\r\n      pathEnd: 0.95,\r\n      path: new LinearPath(Positions.raReality, Positions.raPetEffarig),\r\n      fill: \"#9063de\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"effarig-pet-to-effarig\": {\r\n    visible: () => Ra.unlocks.effarigUnlock.isUnlocked,\r\n    complete: () => Ra.pets.effarig.level / 25,\r\n    drawOrder: -1,\r\n    connector: {\r\n      pathStart: 0.05,\r\n      pathEnd: 0.60,\r\n      path: new LinearPath(Positions.raPetEffarig, Positions.effarigNode),\r\n      fill: \"url(#gradRaEffarig)\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"enslaved-pet\": {\r\n    visible: () => Ra.unlocks.effarigUnlock.isUnlocked,\r\n    complete: () => Ra.pets.effarig.level / 8,\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.ra.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#9063de\",\r\n      isStacked: true,\r\n      position: Positions.raPetEnslaved,\r\n      ring: {\r\n        rMajor: 12,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          const unlocked = Ra.pets.effarig.level;\r\n          const level = Ra.pets.enslaved.level;\r\n          if (complete < 1) return `Ra's Effarig Memory level ${unlocked} / ${formatInt(8)}`;\r\n          if (level === 25) return `Ra's Nameless Memories have all been returned`;\r\n          return [\r\n            \"Ra's Nameless Memory level\",\r\n            `${formatInt(level)} / ${formatInt(25)}`\r\n          ];\r\n        },\r\n        angle: 142,\r\n        diagonal: 85,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0.05,\r\n      pathEnd: 0.95,\r\n      path: new LinearPath(Positions.raReality, Positions.raPetEnslaved),\r\n      fill: \"#9063de\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"enslaved-pet-to-enslaved\": {\r\n    visible: () => Ra.unlocks.enslavedUnlock.isUnlocked,\r\n    complete: () => Ra.pets.enslaved.level / 25,\r\n    drawOrder: -1,\r\n    connector: {\r\n      pathStart: 0.05,\r\n      pathEnd: 0.55,\r\n      path: new LinearPath(Positions.raPetEnslaved, Positions.enslavedReality),\r\n      fill: \"url(#gradRaEnslaved)\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"v-pet\": {\r\n    visible: () => Ra.unlocks.enslavedUnlock.isUnlocked,\r\n    complete: () => Ra.pets.enslaved.level / 8,\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.ra.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#9063de\",\r\n      isStacked: true,\r\n      position: Positions.raPetV,\r\n      ring: {\r\n        rMajor: 12,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          const unlocked = Ra.pets.enslaved.level;\r\n          const level = Ra.pets.v.level;\r\n          if (complete < 1) return `Ra's Nameless Memory level ${unlocked} / ${formatInt(8)}`;\r\n          if (level === 25) return `Ra's V Memories have all been returned`;\r\n          return [\r\n            \"Ra's V Memory level\",\r\n            `${formatInt(level)} / ${formatInt(25)}`\r\n          ];\r\n        },\r\n        angle: 142,\r\n        diagonal: 85,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0.05,\r\n      pathEnd: 0.95,\r\n      path: new LinearPath(Positions.raReality, Positions.raPetV),\r\n      fill: \"#9063de\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"v-pet-to-v\": {\r\n    visible: () => Ra.unlocks.vUnlock.isUnlocked,\r\n    complete: () => Ra.pets.v.level / 25,\r\n    drawOrder: -1,\r\n    connector: {\r\n      pathStart: 0.05,\r\n      pathEnd: 0.42,\r\n      path: new LinearPath(Positions.raPetV, Positions.vUnlockAchievement),\r\n      fill: \"url(#gradRaV)\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"ra-ring-1\": {\r\n    visible: () => VUnlocks.raUnlock.isUnlocked,\r\n    complete: () => (VUnlocks.raUnlock.isUnlocked ? 1 : 0),\r\n    node: {\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#9063de\",\r\n      position: Positions.raReality,\r\n      ring: {\r\n        rMajor: 90,\r\n        rMinor: 80,\r\n        gapCenterDeg: 74,\r\n        gapDeg: 268,\r\n      },\r\n    }\r\n  },\r\n  \"ra-ring-2\": {\r\n    visible: () => VUnlocks.raUnlock.isUnlocked,\r\n    complete: () => (VUnlocks.raUnlock.isUnlocked ? 1 : 0),\r\n    node: {\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#9063de\",\r\n      position: Positions.raReality,\r\n      ring: {\r\n        rMajor: 90,\r\n        rMinor: 80,\r\n        gapCenterDeg: 161,\r\n        gapDeg: 318,\r\n      },\r\n    }\r\n  },\r\n  \"ra-ring-3\": {\r\n    visible: () => VUnlocks.raUnlock.isUnlocked,\r\n    complete: () => (VUnlocks.raUnlock.isUnlocked ? 1 : 0),\r\n    node: {\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#9063de\",\r\n      position: Positions.raReality,\r\n      ring: {\r\n        rMajor: 90,\r\n        rMinor: 80,\r\n        gapCenterDeg: 231,\r\n        gapDeg: 301,\r\n      },\r\n    }\r\n  },\r\n  \"ra-ring-4\": {\r\n    visible: () => VUnlocks.raUnlock.isUnlocked,\r\n    complete: () => (VUnlocks.raUnlock.isUnlocked ? 1 : 0),\r\n    node: {\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#9063de\",\r\n      position: Positions.raReality,\r\n      ring: {\r\n        rMajor: 90,\r\n        rMinor: 80,\r\n        gapCenterDeg: 293,\r\n        gapDeg: 334,\r\n      },\r\n    }\r\n  },\r\n  \"ra-ring-5\": {\r\n    visible: () => VUnlocks.raUnlock.isUnlocked,\r\n    complete: () => (VUnlocks.raUnlock.isUnlocked ? 1 : 0),\r\n    node: {\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"#9063de\",\r\n      position: Positions.raReality,\r\n      ring: {\r\n        rMajor: 90,\r\n        rMinor: 80,\r\n        gapCenterDeg: -14,\r\n        gapDeg: 316,\r\n      },\r\n    }\r\n  },\r\n  \"laitela-unlock\": {\r\n    visible: () => Ra.unlocks.vUnlock.isUnlocked,\r\n    complete: () => {\r\n      if (DarkMatterDimension(1).unlockUpgrade.canBeBought || Laitela.isUnlocked) return 1;\r\n      if (MachineHandler.isIMUnlocked) {\r\n        if (player.requirementChecks.reality.maxID1.neq(0)) return 0.5;\r\n        return 0.5 + 0.5 * Math.clampMax(0.999, player.antimatter.exponent / 1.5e12);\r\n      }\r\n      return Math.clampMax(0.5, Currency.realityMachines.value.pLog10() / MachineHandler.baseRMCap.exponent);\r\n    },\r\n    drawOrder: -1,\r\n    node: {\r\n      clickAction: () => Tab.celestials.laitela.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      symbol: \"ᛝ\",\r\n      symbolScale: 1.6,\r\n      symbolOffset: \"0.6\",\r\n      fill: \"white\",\r\n      position: Positions.laitelaFirstCenter,\r\n      ring: {\r\n        rMajor: 15,\r\n      },\r\n      alwaysShowLegend: true,\r\n      legend: {\r\n        text: complete => {\r\n          const realityName = \"Lai'tela's Reality\";\r\n          if (complete >= 1) return [realityName];\r\n\r\n          if (!MachineHandler.isIMUnlocked) {\r\n            const realityMachines = Currency.realityMachines.value;\r\n            const realityMachineCap = MachineHandler.baseRMCap;\r\n            return [\r\n              realityName,\r\n              \"The limits of Reality Machines bind you\",\r\n              `${format(realityMachines)} / ${format(realityMachineCap)}`\r\n            ];\r\n          }\r\n\r\n          const hasIDs = player.requirementChecks.reality.maxID1.neq(0);\r\n          if (hasIDs) return [\r\n            realityName,\r\n            \"The Power of Infinity Dimensions\",\r\n            \"blocks your path.\"\r\n          ];\r\n\r\n          const antimatter = Currency.antimatter.value;\r\n          const amGoal = DC.E1_5E12;\r\n          return [\r\n            realityName,\r\n            `${format(antimatter)} / ${format(amGoal)}`\r\n          ];\r\n        },\r\n        angle: 260,\r\n        diagonal: 15,\r\n        horizontal: 8,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0.05,\r\n      pathEnd: 1,\r\n      path: new LinearPath(Positions.raReality, Positions.laitelaFirstCenter),\r\n      fill: \"url(#gradRaLaitela)\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"laitela-2nd-dim\": {\r\n    visible: () => Laitela.isUnlocked,\r\n    complete: () => {\r\n      const upgrade = DarkMatterDimension(2).unlockUpgrade;\r\n      if (upgrade.canBeBought || upgrade.isBought) return 1;\r\n      if (upgrade.isAvailableForPurchase) return upgrade.currency.value / upgrade.cost;\r\n      return Laitela.difficultyTier < 1\r\n        ? 0\r\n        : 30 / player.celestials.laitela.fastestCompletion;\r\n    },\r\n    node: {\r\n      clickAction: () => Tab.celestials.laitela.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"white\",\r\n      position: Positions.laitelaFirstLeft,\r\n      ring: {\r\n        rMajor: 8,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          const dmdText = \"2nd Dark Matter Dimension\";\r\n          const dim = DarkMatterDimension(2);\r\n          if (dim.isUnlocked) return [dmdText];\r\n\r\n          const goal = dim.adjustedStartingCost;\r\n          if (complete >= 1) return [\r\n            dmdText,\r\n            `Dark Matter ${format(Currency.darkMatter.max.min(goal), dim.isUnlocked ? 0 : 2)} / ${format(goal)}`\r\n          ];\r\n\r\n          const upgrade = dim.unlockUpgrade;\r\n          if (upgrade.isAvailableForPurchase) return [\r\n            dmdText,\r\n            `Imaginary Machines\r\n            ${format(Math.min(upgrade.currency.value, upgrade.cost), upgrade.canBeBought ? 1 : 2)}\r\n            / ${format(upgrade.cost, 1)}`\r\n          ];\r\n\r\n          if (player.celestials.laitela.fastestCompletion > 30 && Laitela.difficultyTier < 0) return [\r\n            dmdText,\r\n            `Beat Lai'tela's Reality in less that ${format(30)} seconds`\r\n          ];\r\n          return [\r\n            dmdText,\r\n            `Beat Lai'tela's Reality`\r\n          ];\r\n        },\r\n        angle: 135,\r\n        diagonal: 30,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0.17,\r\n      pathEnd: 0.89,\r\n      path: new LinearPath(Positions.laitelaFirstCenter, Positions.laitelaFirstLeft),\r\n      fill: \"white\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"laitela-singularity\": {\r\n    visible: () => Laitela.isUnlocked,\r\n    complete: () => (Currency.singularities.gte(1)\r\n      ? 1\r\n      : Math.clampMax(0.999, Currency.darkEnergy.value / Singularity.cap)),\r\n    node: {\r\n      clickAction: () => Tab.celestials.laitela.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"white\",\r\n      position: Positions.laitelaFirstRight,\r\n      ring: {\r\n        rMajor: 8,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          if (complete >= 1) return [\"Obtain a Singularity\"];\r\n          const darkEnergy = Currency.darkEnergy.value;\r\n          const singularityGoal = Singularity.cap;\r\n          return [\r\n            \"Condense your Dark Energy\",\r\n            \"Into a Singularity\",\r\n            `${format(darkEnergy)} / ${format(singularityGoal)}`\r\n          ];\r\n        },\r\n        angle: 45,\r\n        diagonal: 65,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0.17,\r\n      pathEnd: 0.89,\r\n      path: new LinearPath(Positions.laitelaFirstCenter, Positions.laitelaFirstRight),\r\n      fill: \"white\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    }\r\n  },\r\n  \"laitela-3rd-dim\": {\r\n    visible: () => DarkMatterDimension(2).isUnlocked && Currency.singularities.gte(1),\r\n    complete: () => {\r\n      const upgrade = DarkMatterDimension(3).unlockUpgrade;\r\n      if (upgrade.canBeBought || upgrade.isBought) return 1;\r\n      if (upgrade.isAvailableForPurchase) return upgrade.currency.value / upgrade.cost;\r\n      if (!player.auto.singularity.isActive) return 0.5;\r\n      return Math.clampMax(0.999, Singularity.singularitiesGained / 20);\r\n    },\r\n    node: {\r\n      clickAction: () => Tab.celestials.laitela.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"white\",\r\n      position: Positions.laitelaSecondCenter,\r\n      ring: {\r\n        rMajor: 15,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          const dmdText = \"3rd Dark Matter Dimension\";\r\n          const dim = DarkMatterDimension(3);\r\n          if (dim.isUnlocked) return [dmdText];\r\n\r\n          const goal = dim.adjustedStartingCost;\r\n          if (complete >= 1) return [\r\n            dmdText,\r\n            `Dark Matter ${format(Currency.darkMatter.max.min(goal), dim.isUnlocked ? 0 : 2)} / ${format(goal)}`\r\n          ];\r\n\r\n          const upgrade = dim.unlockUpgrade;\r\n          if (upgrade.isAvailableForPurchase) return [\r\n            dmdText,\r\n            `Imaginary Machines\r\n            ${format(Math.min(upgrade.currency.value, upgrade.cost), upgrade.canBeBought ? 0 : 2)}\r\n            / ${format(upgrade.cost)}`\r\n          ];\r\n\r\n          if (!player.auto.singularity.isActive) return [\r\n            dmdText,\r\n            \"Unlock Automatic Singularities\",\r\n            `${format(Currency.singularities.value)} / ${format(SingularityMilestone.autoCondense.start)}`\r\n          ];\r\n\r\n          return [\r\n            dmdText,\r\n            `Automatically Condense ${format(20)} Singularities at once`,\r\n            `${format(Math.clampMax(Singularity.singularitiesGained, 20))} / ${format(20)}`\r\n          ];\r\n        },\r\n        angle: 15,\r\n        diagonal: 30,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: [\r\n      {\r\n        pathStart: 0.10,\r\n        pathEnd: 0.89,\r\n        path: new LinearPath(Positions.laitelaFirstLeft, Positions.laitelaSecondCenter),\r\n        fill: \"white\",\r\n        completeWidth: 6,\r\n        incompleteWidth: 4,\r\n      }, {\r\n        pathStart: 0.10,\r\n        pathEnd: 0.89,\r\n        path: new LinearPath(Positions.laitelaFirstRight, Positions.laitelaSecondCenter),\r\n        fill: \"white\",\r\n        completeWidth: 6,\r\n        incompleteWidth: 4,\r\n\r\n      },\r\n    ],\r\n  },\r\n  \"laitela-4th-dim\": {\r\n    visible: () => DarkMatterDimension(3).isUnlocked,\r\n    complete: () => {\r\n      const upgrade = DarkMatterDimension(4).unlockUpgrade;\r\n      if (upgrade.canBeBought || upgrade.isBought) return 1;\r\n      if (upgrade.isAvailableForPurchase) return upgrade.currency.value / upgrade.cost;\r\n      return (Replicanti.galaxies.total + player.galaxies + player.dilation.totalTachyonGalaxies) / 80000;\r\n    },\r\n    node: {\r\n      clickAction: () => Tab.celestials.laitela.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"white\",\r\n      position: Positions.laitelaSecondLeft,\r\n      ring: {\r\n        rMajor: 8,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          const dmdText = \"4th Dark Matter Dimension\";\r\n          const dim = DarkMatterDimension(4);\r\n          if (dim.isUnlocked) return [dmdText];\r\n\r\n          const goal = dim.adjustedStartingCost;\r\n          if (complete >= 1) return [\r\n            dmdText,\r\n            `Dark Matter ${format(Currency.darkMatter.max.min(goal), dim.isUnlocked ? 0 : 2)} / ${format(goal)}`\r\n          ];\r\n\r\n          const upgrade = dim.unlockUpgrade;\r\n          if (upgrade.isAvailableForPurchase) return [\r\n            dmdText,\r\n            `Imaginary Machines\r\n            ${format(Math.min(upgrade.currency.value, upgrade.cost), upgrade.canBeBought ? 1 : 2)}\r\n            / ${format(upgrade.cost, 1)}`\r\n          ];\r\n\r\n          const allGalaxies = Replicanti.galaxies.total + player.galaxies + player.dilation.totalTachyonGalaxies;\r\n          return [\r\n            dmdText,\r\n            `Have ${format(80000)} total Galaxies`,\r\n            `${format(Math.clampMax(allGalaxies, 80000))} / ${format(80000)}`\r\n          ];\r\n        },\r\n        angle: 225,\r\n        diagonal: 30,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0.11,\r\n      pathEnd: 0.89,\r\n      path: new LinearPath(Positions.laitelaSecondCenter, Positions.laitelaSecondLeft),\r\n      fill: \"white\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    },\r\n  },\r\n  \"laitela-annihilation\": {\r\n    visible: () => DarkMatterDimension(4).isUnlocked,\r\n    complete: () => {\r\n      const upgrade = ImaginaryUpgrade(19);\r\n      if (upgrade.canBeBought || upgrade.isBought) return 1;\r\n      if (upgrade.isAvailableForPurchase) return Currency.imaginaryMachines.value / upgrade.cost;\r\n      return upgrade.isPossible\r\n        ? Tickspeed.continuumValue / 3850000\r\n        : 0;\r\n    },\r\n    node: {\r\n      clickAction: () => Tab.celestials.laitela.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"white\",\r\n      position: Positions.laitelaSecondRight,\r\n      ring: {\r\n        rMajor: 8,\r\n      },\r\n      legend: {\r\n        text: () => [\r\n          \"Annihilate your\",\r\n          \"Dark Matter Dimensions\"\r\n        ],\r\n        angle: 315,\r\n        diagonal: 30,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0.11,\r\n      pathEnd: 0.89,\r\n      path: new LinearPath(Positions.laitelaSecondCenter, Positions.laitelaSecondRight),\r\n      fill: \"white\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    },\r\n  },\r\n  \"laitela-destabilization\": {\r\n    visible: () => DarkMatterDimension(4).isUnlocked && ImaginaryUpgrade(19).isBought,\r\n    complete: () => Laitela.difficultyTier / 8,\r\n    node: {\r\n      clickAction: () => Tab.celestials.laitela.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      symbolScale: 1.6,\r\n      symbolOffset: \"0.6\",\r\n      fill: \"white\",\r\n      position: Positions.laitelaThirdCenter,\r\n      ring: {\r\n        rMajor: 15,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          if (complete < 1) return [\r\n            \"Destabilize Lai'tela's Reality\",\r\n            \"To the point where you cannot\",\r\n            \"use any Dimensions\",\r\n            `${format(Laitela.difficultyTier)} / ${format(8)} Dimensions disabled`\r\n          ];\r\n          return [\r\n            \"Completely destabilized\",\r\n            \"Lai'tela's Reality\",\r\n          ];\r\n        },\r\n        angle: 180,\r\n        diagonal: 15,\r\n        horizontal: 8,\r\n      },\r\n    },\r\n    connector: [\r\n      {\r\n        pathStart: 0.11,\r\n        pathEnd: 0.83,\r\n        path: new LinearPath(Positions.laitelaSecondLeft, Positions.laitelaThirdCenter),\r\n        fill: \"white\",\r\n        completeWidth: 6,\r\n        incompleteWidth: 4,\r\n      }, {\r\n        pathStart: 0.11,\r\n        pathEnd: 0.83,\r\n        path: new LinearPath(Positions.laitelaSecondRight, Positions.laitelaThirdCenter),\r\n        fill: \"white\",\r\n        completeWidth: 6,\r\n        incompleteWidth: 4,\r\n      }\r\n    ]\r\n  },\r\n  \"pelle-unlock\": {\r\n    visible: () => Laitela.difficultyTier > 4,\r\n    complete: () => {\r\n      if (Pelle.isUnlocked) return 1;\r\n      const imCost = Math.clampMax(emphasizeEnd(Math.log10(Currency.imaginaryMachines.value) / Math.log10(1.6e15)), 1);\r\n      let laitelaProgress = Laitela.isRunning ? Math.min(Currency.eternityPoints.value.log10() / 4000, 0.99) : 0;\r\n      if (Laitela.difficultyTier !== 8 || Glyphs.activeWithoutCompanion.length > 1) laitelaProgress = 0;\r\n      else if (ImaginaryUpgrade(25).isAvailableForPurchase) laitelaProgress = 1;\r\n      return (imCost + laitelaProgress) / 2;\r\n    },\r\n    node: {\r\n      clickAction: () => Tab.celestials.pelle.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"crimson\",\r\n      position: Positions.pelleUnlock,\r\n      ring: {\r\n        rMajor: 8,\r\n      },\r\n      legend: {\r\n        text: complete => {\r\n          if (complete === 1) {\r\n            return [\r\n              \"Unlock Pelle\",\r\n              \"The Celestial of Antimatter\"\r\n            ];\r\n          }\r\n          let laitelaString = `${format(Currency.eternityPoints.value)} / ${format(\"1e4000\")} EP`;\r\n          if (!Laitela.isRunning || Laitela.difficultyTier !== 8 || Glyphs.activeWithoutCompanion.length > 1) {\r\n            laitelaString = \"Lai'tela's Reality is still intact\";\r\n          } else if (ImaginaryUpgrade(25).isAvailableForPurchase) {\r\n            laitelaString = \"Lai'tela's Reality has been destroyed\";\r\n          }\r\n          return [\r\n            \"Unlock Pelle\",\r\n            \"The Celestial of Antimatter\",\r\n            `${format(Currency.imaginaryMachines.value, 2)} / ${format(1.6e15, 2)} iM`,\r\n            laitelaString\r\n          ];\r\n        },\r\n        angle: 105,\r\n        diagonal: 90,\r\n        horizontal: 10,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: new LinearPath(Positions.laitelaThirdCenter, Positions.pelleUnlock),\r\n      fill: \"url(#gradLaitelaPelle)\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    },\r\n  },\r\n  \"pelle-doomed-requirement\": {\r\n    visible: () => Pelle.isUnlocked,\r\n    complete: () => {\r\n      if (Pelle.isDoomed) return 1;\r\n      const achievements = Achievements.prePelleRows.countWhere(r => r.every(a => a.isUnlocked)) /\r\n        Achievements.prePelleRows.length;\r\n      const alchemy = AlchemyResources.all.countWhere(r => r.capped) / AlchemyResources.all.length;\r\n      return (emphasizeEnd(achievements) + emphasizeEnd(alchemy)) / 2;\r\n    },\r\n    node: {\r\n      clickAction: () => Tab.celestials.pelle.show(true),\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      symbol: \"♅\",\r\n      symbolOffset: \"1.6\",\r\n      fill: \"crimson\",\r\n      position: Positions.pelleAchievementRequirement,\r\n      ring: {\r\n        rMajor: 20,\r\n      },\r\n      forceLegend: () => Pelle.isUnlocked && !Pelle.hasGalaxyGenerator,\r\n      legend: {\r\n        text: complete => {\r\n          if (complete >= 1) return Pelle.isDoomed ? \"Doomed Reality\" : \"Doom your Reality\";\r\n          const achievements = [Achievements.prePelleRows.countWhere(r => r.every(a => a.isUnlocked)),\r\n            Achievements.prePelleRows.length];\r\n          const alchemy = [AlchemyResources.all.countWhere(r => r.capped), AlchemyResources.all.length];\r\n          return [\r\n            `Complete ${formatInt(achievements[0])} / ${formatInt(achievements[1])} rows of Achievements`,\r\n            `Fill ${formatInt(alchemy[0])} / ${formatInt(alchemy[1])} Alchemy Resources`,\r\n          ];\r\n        },\r\n        angle: 290,\r\n        diagonal: 40,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n    connector: {\r\n      pathStart: 0,\r\n      pathEnd: 1,\r\n      path: new LinearPath(Positions.pelleUnlock, Positions.pelleAchievementRequirement),\r\n      fill: \"crimson\",\r\n      completeWidth: 6,\r\n      incompleteWidth: 4,\r\n    },\r\n  },\r\n\r\n  // All the fill elements are generated outside of here as a loop, and then unpacked here with the spread operator\r\n  ...riftFillElements,\r\n\r\n  // Needs a separate node in order to color the background of the galaxy generator not-gray. Note that this node gets\r\n  // placed on top of the \"main\" Doomed node once it's visible\r\n  \"pelle-galaxy-generator-start-node\": {\r\n    visible: () => Pelle.hasGalaxyGenerator,\r\n    complete: () => (Pelle.hasGalaxyGenerator ? 1 : 0),\r\n    node: {\r\n      incompleteClass: \"c-celestial-nav__test-incomplete\",\r\n      fill: \"black\",\r\n      position: Positions.pelleAchievementRequirement,\r\n      ring: {\r\n        rMajor: 20,\r\n      },\r\n      alwaysShowLegend: true,\r\n      legend: {\r\n        text: () => [\r\n          \"Galaxy Generator:\",\r\n          `${format(GalaxyGenerator.generatedGalaxies, 2)} / ${format(GalaxyGenerator.generationCap, 2)} Galaxies`\r\n        ],\r\n        angle: 290,\r\n        diagonal: 40,\r\n        horizontal: 16,\r\n      },\r\n    },\r\n  },\r\n  // Invisible element to suppress the mouseover detection on the galaxy icon causing the legend to flicker\r\n  \"pelle-galaxy-generator-sigil-mask\": {\r\n    visible: () => Pelle.hasGalaxyGenerator,\r\n    complete: () => (Pelle.hasGalaxyGenerator ? 1 : 0),\r\n    node: {\r\n      clickAction: () => Tab.celestials.pelle.show(true),\r\n      position: Positions.pelleAchievementRequirement,\r\n      ring: {\r\n        rMajor: 20,\r\n      },\r\n    },\r\n  },\r\n  \"pelle-galaxy-generator-path\": {\r\n    visible: () => Pelle.hasGalaxyGenerator,\r\n    complete: () => {\r\n      const riftCaps = PelleRifts.all.map(r => r.config.galaxyGeneratorThreshold);\r\n      const brokenRifts = riftCaps.countWhere(n => GalaxyGenerator.generatedGalaxies >= n);\r\n      if (brokenRifts === 5) return 1;\r\n      const prevRift = riftCaps.filter(n => GalaxyGenerator.generatedGalaxies >= n).max();\r\n      const nextRift = riftCaps.filter(n => GalaxyGenerator.generatedGalaxies < n).min();\r\n      const currRiftProp = Math.sqrt((GalaxyGenerator.generatedGalaxies - prevRift) / (nextRift - prevRift));\r\n      return (brokenRifts + currRiftProp) / 5;\r\n    },\r\n    connector: (function() {\r\n      const pathStart = 0.5 * Math.PI;\r\n      const pathEnd = pathStart + 10 * Math.PI;\r\n      const path = LogarithmicSpiral.fromPolarEndpoints(pelleStarPosition(0, 0),\r\n        pathStart, 18, pathEnd, 150);\r\n      return {\r\n        pathStart,\r\n        pathEnd,\r\n        path,\r\n        pathPadStart: 0,\r\n        pathPadEnd: 0,\r\n        fill: \"#00bbbb\",\r\n      };\r\n    }()),\r\n  },\r\n\r\n  // The path BG is invisible, but we want to make sure it extends far enough that it expands out \"forever\"\r\n  \"pelle-galaxy-generator-infinite\": {\r\n    visible: () => Pelle.hasGalaxyGenerator && !Number.isFinite(GalaxyGenerator.generationCap),\r\n    complete: () => Math.clamp((GalaxyGenerator.generatedGalaxies - 1e10) / 2e11, 1e-6, 1),\r\n    connector: (function() {\r\n      const pathStart = 0.5 * Math.PI;\r\n      const pathEnd = pathStart + 10 * Math.PI;\r\n      const path = LogarithmicSpiral.fromPolarEndpoints(pelleStarPosition(0, 0),\r\n        pathStart, 150, pathEnd, 1250);\r\n      return {\r\n        pathStart,\r\n        pathEnd,\r\n        path,\r\n        pathPadStart: 0,\r\n        pathPadEnd: 0,\r\n        drawOrder: CELESTIAL_NAV_DRAW_ORDER.CANVAS_OVERLAY,\r\n        fill: \"#00bbbb\",\r\n        noBG: true,\r\n      };\r\n    }()),\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}