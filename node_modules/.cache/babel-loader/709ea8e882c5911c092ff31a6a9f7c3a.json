{"ast":null,"code":"import { UpgradeableAutobuyerState } from \"./autobuyer\";\nexport class GalaxyAutobuyerState extends UpgradeableAutobuyerState {\n  get data() {\n    return player.auto.galaxy;\n  }\n\n  get name() {\n    return `Antimatter Galaxy`;\n  }\n\n  get isUnlocked() {\n    if (Pelle.isDisabled(\"galaxyAutobuyer\")) return false;\n    return this.canBeUpgraded;\n  }\n\n  get canBeUpgraded() {\n    return NormalChallenge(11).isCompleted;\n  }\n\n  get baseInterval() {\n    return Player.defaultStart.auto.galaxy.interval;\n  }\n\n  get limitGalaxies() {\n    return this.data.limitGalaxies;\n  }\n\n  set limitGalaxies(value) {\n    this.data.limitGalaxies = value;\n  }\n\n  get maxGalaxies() {\n    return this.data.maxGalaxies;\n  }\n\n  set maxGalaxies(value) {\n    this.data.maxGalaxies = value;\n  }\n\n  get buyMaxInterval() {\n    return this.data.buyMaxInterval;\n  }\n\n  set buyMaxInterval(value) {\n    this.data.buyMaxInterval = value;\n  }\n\n  get isBuyMaxUnlocked() {\n    return EternityMilestone.autobuyMaxGalaxies.isReached;\n  }\n\n  get interval() {\n    return this.isBuyMaxUnlocked ? TimeSpan.fromSeconds(this.buyMaxInterval).totalMilliseconds : super.interval;\n  }\n\n  get canTick() {\n    return Galaxy.canBeBought && Galaxy.requirement.isSatisfied && super.canTick;\n  }\n\n  get resetTickOn() {\n    return PRESTIGE_EVENT.INFINITY;\n  }\n\n  tick() {\n    super.tick();\n    const limit = this.limitGalaxies ? this.maxGalaxies : Number.MAX_VALUE;\n    requestGalaxyReset(this.isBuyMaxUnlocked, limit);\n  }\n\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/autobuyers/galaxy-autobuyer.js"],"names":["UpgradeableAutobuyerState","GalaxyAutobuyerState","data","player","auto","galaxy","name","isUnlocked","Pelle","isDisabled","canBeUpgraded","NormalChallenge","isCompleted","baseInterval","Player","defaultStart","interval","limitGalaxies","value","maxGalaxies","buyMaxInterval","isBuyMaxUnlocked","EternityMilestone","autobuyMaxGalaxies","isReached","TimeSpan","fromSeconds","totalMilliseconds","canTick","Galaxy","canBeBought","requirement","isSatisfied","resetTickOn","PRESTIGE_EVENT","INFINITY","tick","limit","Number","MAX_VALUE","requestGalaxyReset"],"mappings":"AAAA,SAASA,yBAAT,QAA0C,aAA1C;AAEA,OAAO,MAAMC,oBAAN,SAAmCD,yBAAnC,CAA6D;AAC1D,MAAJE,IAAI,GAAG;AACT,WAAOC,MAAM,CAACC,IAAP,CAAYC,MAAnB;AACD;;AAEO,MAAJC,IAAI,GAAG;AACT,WAAQ,mBAAR;AACD;;AAEa,MAAVC,UAAU,GAAG;AACf,QAAIC,KAAK,CAACC,UAAN,CAAiB,iBAAjB,CAAJ,EAAyC,OAAO,KAAP;AACzC,WAAO,KAAKC,aAAZ;AACD;;AAEgB,MAAbA,aAAa,GAAG;AAClB,WAAOC,eAAe,CAAC,EAAD,CAAf,CAAoBC,WAA3B;AACD;;AAEe,MAAZC,YAAY,GAAG;AACjB,WAAOC,MAAM,CAACC,YAAP,CAAoBX,IAApB,CAAyBC,MAAzB,CAAgCW,QAAvC;AACD;;AAEgB,MAAbC,aAAa,GAAG;AAClB,WAAO,KAAKf,IAAL,CAAUe,aAAjB;AACD;;AAEgB,MAAbA,aAAa,CAACC,KAAD,EAAQ;AACvB,SAAKhB,IAAL,CAAUe,aAAV,GAA0BC,KAA1B;AACD;;AAEc,MAAXC,WAAW,GAAG;AAChB,WAAO,KAAKjB,IAAL,CAAUiB,WAAjB;AACD;;AAEc,MAAXA,WAAW,CAACD,KAAD,EAAQ;AACrB,SAAKhB,IAAL,CAAUiB,WAAV,GAAwBD,KAAxB;AACD;;AAEiB,MAAdE,cAAc,GAAG;AACnB,WAAO,KAAKlB,IAAL,CAAUkB,cAAjB;AACD;;AAEiB,MAAdA,cAAc,CAACF,KAAD,EAAQ;AACxB,SAAKhB,IAAL,CAAUkB,cAAV,GAA2BF,KAA3B;AACD;;AAEmB,MAAhBG,gBAAgB,GAAG;AACrB,WAAOC,iBAAiB,CAACC,kBAAlB,CAAqCC,SAA5C;AACD;;AAEW,MAARR,QAAQ,GAAG;AACb,WAAO,KAAKK,gBAAL,GACHI,QAAQ,CAACC,WAAT,CAAqB,KAAKN,cAA1B,EAA0CO,iBADvC,GAEH,MAAMX,QAFV;AAGD;;AAEU,MAAPY,OAAO,GAAG;AACZ,WAAOC,MAAM,CAACC,WAAP,IAAsBD,MAAM,CAACE,WAAP,CAAmBC,WAAzC,IAAwD,MAAMJ,OAArE;AACD;;AAEc,MAAXK,WAAW,GAAG;AAChB,WAAOC,cAAc,CAACC,QAAtB;AACD;;AAEDC,EAAAA,IAAI,GAAG;AACL,UAAMA,IAAN;AACA,UAAMC,KAAK,GAAG,KAAKpB,aAAL,GAAqB,KAAKE,WAA1B,GAAwCmB,MAAM,CAACC,SAA7D;AACAC,IAAAA,kBAAkB,CAAC,KAAKnB,gBAAN,EAAwBgB,KAAxB,CAAlB;AACD;;AApEiE","sourcesContent":["import { UpgradeableAutobuyerState } from \"./autobuyer\";\r\n\r\nexport class GalaxyAutobuyerState extends UpgradeableAutobuyerState {\r\n  get data() {\r\n    return player.auto.galaxy;\r\n  }\r\n\r\n  get name() {\r\n    return `Antimatter Galaxy`;\r\n  }\r\n\r\n  get isUnlocked() {\r\n    if (Pelle.isDisabled(\"galaxyAutobuyer\")) return false;\r\n    return this.canBeUpgraded;\r\n  }\r\n\r\n  get canBeUpgraded() {\r\n    return NormalChallenge(11).isCompleted;\r\n  }\r\n\r\n  get baseInterval() {\r\n    return Player.defaultStart.auto.galaxy.interval;\r\n  }\r\n\r\n  get limitGalaxies() {\r\n    return this.data.limitGalaxies;\r\n  }\r\n\r\n  set limitGalaxies(value) {\r\n    this.data.limitGalaxies = value;\r\n  }\r\n\r\n  get maxGalaxies() {\r\n    return this.data.maxGalaxies;\r\n  }\r\n\r\n  set maxGalaxies(value) {\r\n    this.data.maxGalaxies = value;\r\n  }\r\n\r\n  get buyMaxInterval() {\r\n    return this.data.buyMaxInterval;\r\n  }\r\n\r\n  set buyMaxInterval(value) {\r\n    this.data.buyMaxInterval = value;\r\n  }\r\n\r\n  get isBuyMaxUnlocked() {\r\n    return EternityMilestone.autobuyMaxGalaxies.isReached;\r\n  }\r\n\r\n  get interval() {\r\n    return this.isBuyMaxUnlocked\r\n      ? TimeSpan.fromSeconds(this.buyMaxInterval).totalMilliseconds\r\n      : super.interval;\r\n  }\r\n\r\n  get canTick() {\r\n    return Galaxy.canBeBought && Galaxy.requirement.isSatisfied && super.canTick;\r\n  }\r\n\r\n  get resetTickOn() {\r\n    return PRESTIGE_EVENT.INFINITY;\r\n  }\r\n\r\n  tick() {\r\n    super.tick();\r\n    const limit = this.limitGalaxies ? this.maxGalaxies : Number.MAX_VALUE;\r\n    requestGalaxyReset(this.isBuyMaxUnlocked, limit);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}