{"ast":null,"code":"import { UpgradeableAutobuyerState } from \"./autobuyer\";\nexport class DimBoostAutobuyerState extends UpgradeableAutobuyerState {\n  get data() {\n    return player.auto.dimBoost;\n  }\n\n  get name() {\n    return `Dimension Boost`;\n  }\n\n  get isUnlocked() {\n    if (Pelle.isDisabled(\"dimBoostAutobuyer\")) return false;\n    return this.canBeUpgraded;\n  }\n\n  get canBeUpgraded() {\n    return NormalChallenge(10).isCompleted;\n  }\n\n  get baseInterval() {\n    return Player.defaultStart.auto.dimBoost.interval;\n  }\n\n  get limitDimBoosts() {\n    return this.data.limitDimBoosts;\n  }\n\n  set limitDimBoosts(value) {\n    this.data.limitDimBoosts = value;\n  }\n\n  get maxDimBoosts() {\n    return this.data.maxDimBoosts;\n  }\n\n  set maxDimBoosts(value) {\n    this.data.maxDimBoosts = value;\n  }\n\n  get limitUntilGalaxies() {\n    return this.data.limitUntilGalaxies;\n  }\n\n  set limitUntilGalaxies(value) {\n    this.data.limitUntilGalaxies = value;\n  }\n\n  get galaxies() {\n    return this.data.galaxies;\n  }\n\n  set galaxies(value) {\n    this.data.galaxies = value;\n  }\n\n  get bulk() {\n    return this.data.bulk;\n  }\n\n  set bulk(value) {\n    this.data.bulk = value;\n  }\n\n  get buyMaxInterval() {\n    return this.data.buyMaxInterval;\n  }\n\n  set buyMaxInterval(value) {\n    this.data.buyMaxInterval = value;\n  }\n\n  get isBuyMaxUnlocked() {\n    return BreakInfinityUpgrade.autobuyMaxDimboosts.isBought;\n  }\n\n  get interval() {\n    return this.isBuyMaxUnlocked ? TimeSpan.fromSeconds(this.buyMaxInterval).totalMilliseconds : super.interval;\n  }\n\n  get canTick() {\n    return DimBoost.canBeBought && DimBoost.requirement.isSatisfied && super.canTick;\n  }\n\n  get resetTickOn() {\n    // Before max dimboost, we want to do dimboosts as quickly as possible,\n    // so we reset the autobuyer's timer to 0 after every galaxy.\n    // After max dimboost, we'll generally have \"Blink of an eye\",\n    // so doing a dimboost right after a galaxy will do a single dimboost\n    // and then wait for the autobuyer interval to do any more dimboosts,\n    // which seems unideal and in fact does slow getting dimboosts/galaxies\n    // at the start of infinities down by about 20%.\n    // After \"Yo dawg, I heard you liked reskins...\", it doesn't matter much\n    // which we do (less than 1 tick difference, it seems).\n    return this.isBuyMaxUnlocked ? PRESTIGE_EVENT.INFINITY : PRESTIGE_EVENT.ANTIMATTER_GALAXY;\n  }\n\n  tick() {\n    if (this.isBuyMaxUnlocked) {\n      const _galaxyCondition = !this.limitUntilGalaxies || player.galaxies >= this.galaxies;\n\n      if (!DimBoost.canUnlockNewDimension && !_galaxyCondition) return;\n      requestDimensionBoost(true);\n      super.tick();\n      return;\n    }\n\n    const limitCondition = !this.limitDimBoosts || DimBoost.purchasedBoosts < this.maxDimBoosts;\n    const galaxyCondition = this.limitUntilGalaxies && player.galaxies >= this.galaxies;\n\n    if (limitCondition || galaxyCondition) {\n      requestDimensionBoost(false);\n      super.tick();\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/autobuyers/dimboost-autobuyer.js"],"names":["UpgradeableAutobuyerState","DimBoostAutobuyerState","data","player","auto","dimBoost","name","isUnlocked","Pelle","isDisabled","canBeUpgraded","NormalChallenge","isCompleted","baseInterval","Player","defaultStart","interval","limitDimBoosts","value","maxDimBoosts","limitUntilGalaxies","galaxies","bulk","buyMaxInterval","isBuyMaxUnlocked","BreakInfinityUpgrade","autobuyMaxDimboosts","isBought","TimeSpan","fromSeconds","totalMilliseconds","canTick","DimBoost","canBeBought","requirement","isSatisfied","resetTickOn","PRESTIGE_EVENT","INFINITY","ANTIMATTER_GALAXY","tick","galaxyCondition","canUnlockNewDimension","requestDimensionBoost","limitCondition","purchasedBoosts"],"mappings":"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","sourcesContent":["import { UpgradeableAutobuyerState } from \"./autobuyer\";\r\n\r\nexport class DimBoostAutobuyerState extends UpgradeableAutobuyerState {\r\n  get data() {\r\n    return player.auto.dimBoost;\r\n  }\r\n\r\n  get name() {\r\n    return `Dimension Boost`;\r\n  }\r\n\r\n  get isUnlocked() {\r\n    if (Pelle.isDisabled(\"dimBoostAutobuyer\")) return false;\r\n    return this.canBeUpgraded;\r\n  }\r\n\r\n  get canBeUpgraded() {\r\n    return NormalChallenge(10).isCompleted;\r\n  }\r\n\r\n  get baseInterval() {\r\n    return Player.defaultStart.auto.dimBoost.interval;\r\n  }\r\n\r\n  get limitDimBoosts() {\r\n    return this.data.limitDimBoosts;\r\n  }\r\n\r\n  set limitDimBoosts(value) {\r\n    this.data.limitDimBoosts = value;\r\n  }\r\n\r\n  get maxDimBoosts() {\r\n    return this.data.maxDimBoosts;\r\n  }\r\n\r\n  set maxDimBoosts(value) {\r\n    this.data.maxDimBoosts = value;\r\n  }\r\n\r\n  get limitUntilGalaxies() {\r\n    return this.data.limitUntilGalaxies;\r\n  }\r\n\r\n  set limitUntilGalaxies(value) {\r\n    this.data.limitUntilGalaxies = value;\r\n  }\r\n\r\n  get galaxies() {\r\n    return this.data.galaxies;\r\n  }\r\n\r\n  set galaxies(value) {\r\n    this.data.galaxies = value;\r\n  }\r\n\r\n  get bulk() {\r\n    return this.data.bulk;\r\n  }\r\n\r\n  set bulk(value) {\r\n    this.data.bulk = value;\r\n  }\r\n\r\n  get buyMaxInterval() {\r\n    return this.data.buyMaxInterval;\r\n  }\r\n\r\n  set buyMaxInterval(value) {\r\n    this.data.buyMaxInterval = value;\r\n  }\r\n\r\n  get isBuyMaxUnlocked() {\r\n    return BreakInfinityUpgrade.autobuyMaxDimboosts.isBought;\r\n  }\r\n\r\n  get interval() {\r\n    return this.isBuyMaxUnlocked\r\n      ? TimeSpan.fromSeconds(this.buyMaxInterval).totalMilliseconds\r\n      : super.interval;\r\n  }\r\n\r\n  get canTick() {\r\n    return DimBoost.canBeBought && DimBoost.requirement.isSatisfied && super.canTick;\r\n  }\r\n\r\n  get resetTickOn() {\r\n    // Before max dimboost, we want to do dimboosts as quickly as possible,\r\n    // so we reset the autobuyer's timer to 0 after every galaxy.\r\n    // After max dimboost, we'll generally have \"Blink of an eye\",\r\n    // so doing a dimboost right after a galaxy will do a single dimboost\r\n    // and then wait for the autobuyer interval to do any more dimboosts,\r\n    // which seems unideal and in fact does slow getting dimboosts/galaxies\r\n    // at the start of infinities down by about 20%.\r\n    // After \"Yo dawg, I heard you liked reskins...\", it doesn't matter much\r\n    // which we do (less than 1 tick difference, it seems).\r\n    return this.isBuyMaxUnlocked ? PRESTIGE_EVENT.INFINITY : PRESTIGE_EVENT.ANTIMATTER_GALAXY;\r\n  }\r\n\r\n  tick() {\r\n    if (this.isBuyMaxUnlocked) {\r\n      const galaxyCondition = !this.limitUntilGalaxies || player.galaxies >= this.galaxies;\r\n      if (!DimBoost.canUnlockNewDimension && !galaxyCondition) return;\r\n      requestDimensionBoost(true);\r\n      super.tick();\r\n      return;\r\n    }\r\n\r\n    const limitCondition = !this.limitDimBoosts || DimBoost.purchasedBoosts < this.maxDimBoosts;\r\n    const galaxyCondition = this.limitUntilGalaxies && player.galaxies >= this.galaxies;\r\n    if (limitCondition || galaxyCondition) {\r\n      requestDimensionBoost(false);\r\n      super.tick();\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}