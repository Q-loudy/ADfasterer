{"ast":null,"code":"// The glyphTypes entry is used for both gameplay and cosmetics purposes, so we cannot modify isUnlocked for cosmetics.\n// For the purposes of cosmetics, the difference between isUnlocked and canCustomize is as follows:\n// - isUnlocked: Whether or not this type appears as a choice in glyph-specific customization for overriding their\n//    normal display type; this is ignored for functional type entries\n// - canCustomize: Whether or not this type can have its color/symbol changed in the type-specific customization\nexport const glyphTypes = {\n  time: {\n    id: \"time\",\n    symbol: GLYPH_SYMBOLS.time,\n    color: \"#b241e3\",\n    primaryEffect: \"timepow\",\n    alchemyResource: ALCHEMY_RESOURCE.TIME,\n    hasRarity: true\n  },\n  dilation: {\n    id: \"dilation\",\n    symbol: GLYPH_SYMBOLS.dilation,\n    color: \"#64dd17\",\n    alchemyResource: ALCHEMY_RESOURCE.DILATION,\n    hasRarity: true\n  },\n  replication: {\n    id: \"replication\",\n    symbol: GLYPH_SYMBOLS.replication,\n    color: \"#03a9f4\",\n    alchemyResource: ALCHEMY_RESOURCE.REPLICATION,\n    hasRarity: true\n  },\n  infinity: {\n    id: \"infinity\",\n    symbol: GLYPH_SYMBOLS.infinity,\n    color: \"#b67f33\",\n    primaryEffect: \"infinitypow\",\n    alchemyResource: ALCHEMY_RESOURCE.INFINITY,\n    hasRarity: true\n  },\n  power: {\n    id: \"power\",\n    symbol: GLYPH_SYMBOLS.power,\n    color: \"#22aa48\",\n    primaryEffect: \"powerpow\",\n    alchemyResource: ALCHEMY_RESOURCE.POWER,\n    hasRarity: true\n  },\n  effarig: {\n    id: \"effarig\",\n    symbol: GLYPH_SYMBOLS.effarig,\n    color: \"#e21717\",\n    isUnlocked: () => EffarigUnlock.reality.isUnlocked,\n    canCustomize: () => EffarigUnlock.reality.isUnlocked,\n    alchemyResource: ALCHEMY_RESOURCE.EFFARIG,\n    hasRarity: true // Effarig glyphs have no primary effect; all are equally likely\n\n  },\n  reality: {\n    id: \"reality\",\n    symbol: GLYPH_SYMBOLS.reality,\n    fixedSymbolColor: true,\n    isUnlocked: () => false,\n    canCustomize: () => player.reality.glyphs.createdRealityGlyph,\n    // Refining a reality glyph is pretty wasteful anyway, but might as well have this here\n    alchemyResource: ALCHEMY_RESOURCE.REALITY\n  },\n  cursed: {\n    id: \"cursed\",\n    symbol: GLYPH_SYMBOLS.cursed,\n    color: \"#000000\",\n    fixedSymbolColor: true,\n    isUnlocked: () => false,\n    canCustomize: () => V.isFlipped\n  },\n  companion: {\n    id: \"companion\",\n    symbol: GLYPH_SYMBOLS.companion,\n    color: \"#feaec9\",\n    fixedSymbolColor: true,\n    isUnlocked: () => false,\n    canCustomize: () => false\n  }\n};\nexport const cosmeticGlyphs = {\n  music: {\n    id: \"music\",\n    symbol: \"♫\",\n    color: \"#FF80AB\",\n    isUnlocked: () => TeresaUnlocks.shop.isUnlocked\n  },\n  blob: {\n    id: \"blob\",\n    symbol: \"\\uE010\",\n    color: \"#E4B51A\",\n    preventBlur: true,\n    isUnlocked: () => Themes.available().map(t => t.name).includes(\"S11\"),\n    canCustomize: () => false\n  }\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/reality/glyph-types.js"],"names":["glyphTypes","time","id","symbol","GLYPH_SYMBOLS","color","primaryEffect","alchemyResource","ALCHEMY_RESOURCE","TIME","hasRarity","dilation","DILATION","replication","REPLICATION","infinity","INFINITY","power","POWER","effarig","isUnlocked","EffarigUnlock","reality","canCustomize","EFFARIG","fixedSymbolColor","player","glyphs","createdRealityGlyph","REALITY","cursed","V","isFlipped","companion","cosmeticGlyphs","music","TeresaUnlocks","shop","blob","preventBlur","Themes","available","map","t","name","includes"],"mappings":"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","sourcesContent":["// The glyphTypes entry is used for both gameplay and cosmetics purposes, so we cannot modify isUnlocked for cosmetics.\r\n// For the purposes of cosmetics, the difference between isUnlocked and canCustomize is as follows:\r\n// - isUnlocked: Whether or not this type appears as a choice in glyph-specific customization for overriding their\r\n//    normal display type; this is ignored for functional type entries\r\n// - canCustomize: Whether or not this type can have its color/symbol changed in the type-specific customization\r\nexport const glyphTypes = {\r\n  time: {\r\n    id: \"time\",\r\n    symbol: GLYPH_SYMBOLS.time,\r\n    color: \"#b241e3\",\r\n    primaryEffect: \"timepow\",\r\n    alchemyResource: ALCHEMY_RESOURCE.TIME,\r\n    hasRarity: true\r\n  },\r\n  dilation: {\r\n    id: \"dilation\",\r\n    symbol: GLYPH_SYMBOLS.dilation,\r\n    color: \"#64dd17\",\r\n    alchemyResource: ALCHEMY_RESOURCE.DILATION,\r\n    hasRarity: true\r\n  },\r\n  replication: {\r\n    id: \"replication\",\r\n    symbol: GLYPH_SYMBOLS.replication,\r\n    color: \"#03a9f4\",\r\n    alchemyResource: ALCHEMY_RESOURCE.REPLICATION,\r\n    hasRarity: true\r\n  },\r\n  infinity: {\r\n    id: \"infinity\",\r\n    symbol: GLYPH_SYMBOLS.infinity,\r\n    color: \"#b67f33\",\r\n    primaryEffect: \"infinitypow\",\r\n    alchemyResource: ALCHEMY_RESOURCE.INFINITY,\r\n    hasRarity: true\r\n  },\r\n  power: {\r\n    id: \"power\",\r\n    symbol: GLYPH_SYMBOLS.power,\r\n    color: \"#22aa48\",\r\n    primaryEffect: \"powerpow\",\r\n    alchemyResource: ALCHEMY_RESOURCE.POWER,\r\n    hasRarity: true\r\n  },\r\n  effarig: {\r\n    id: \"effarig\",\r\n    symbol: GLYPH_SYMBOLS.effarig,\r\n    color: \"#e21717\",\r\n    isUnlocked: () => EffarigUnlock.reality.isUnlocked,\r\n    canCustomize: () => EffarigUnlock.reality.isUnlocked,\r\n    alchemyResource: ALCHEMY_RESOURCE.EFFARIG,\r\n    hasRarity: true\r\n    // Effarig glyphs have no primary effect; all are equally likely\r\n  },\r\n  reality: {\r\n    id: \"reality\",\r\n    symbol: GLYPH_SYMBOLS.reality,\r\n    fixedSymbolColor: true,\r\n    isUnlocked: () => false,\r\n    canCustomize: () => player.reality.glyphs.createdRealityGlyph,\r\n    // Refining a reality glyph is pretty wasteful anyway, but might as well have this here\r\n    alchemyResource: ALCHEMY_RESOURCE.REALITY\r\n  },\r\n  cursed: {\r\n    id: \"cursed\",\r\n    symbol: GLYPH_SYMBOLS.cursed,\r\n    color: \"#000000\",\r\n    fixedSymbolColor: true,\r\n    isUnlocked: () => false,\r\n    canCustomize: () => V.isFlipped,\r\n  },\r\n  companion: {\r\n    id: \"companion\",\r\n    symbol: GLYPH_SYMBOLS.companion,\r\n    color: \"#feaec9\",\r\n    fixedSymbolColor: true,\r\n    isUnlocked: () => false,\r\n    canCustomize: () => false,\r\n  },\r\n};\r\n\r\nexport const cosmeticGlyphs = {\r\n  music: {\r\n    id: \"music\",\r\n    symbol: \"♫\",\r\n    color: \"#FF80AB\",\r\n    isUnlocked: () => TeresaUnlocks.shop.isUnlocked,\r\n  },\r\n  blob: {\r\n    id: \"blob\",\r\n    symbol: \"\\uE010\",\r\n    color: \"#E4B51A\",\r\n    preventBlur: true,\r\n    isUnlocked: () => Themes.available().map(t => t.name).includes(\"S11\"),\r\n    canCustomize: () => false,\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}