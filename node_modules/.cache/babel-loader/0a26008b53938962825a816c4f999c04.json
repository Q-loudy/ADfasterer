{"ast":null,"code":"import \"core-js/modules/es.array.flat.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport { DC } from \"../../constants\";\nimport { Quotes } from \"../quotes\";\nimport { DarkMatterDimensions } from \"./dark-matter-dimension\";\nexport const Laitela = {\n  displayName: \"Lai'tela\",\n  possessiveName: \"Lai'tela's\",\n\n  get celestial() {\n    return player.celestials.laitela;\n  },\n\n  get isUnlocked() {\n    return ImaginaryUpgrade(15).isBought;\n  },\n\n  initializeRun() {\n    clearCelestialRuns();\n    this.celestial.run = true;\n  },\n\n  get isRunning() {\n    return this.celestial.run;\n  },\n\n  get difficultyTier() {\n    return player.celestials.laitela.difficultyTier;\n  },\n\n  set difficultyTier(tier) {\n    player.celestials.laitela.difficultyTier = tier;\n  },\n\n  get maxAllowedDimension() {\n    return 8 - this.difficultyTier;\n  },\n\n  get isFullyDestabilized() {\n    return Laitela.maxAllowedDimension === 0;\n  },\n\n  get continuumUnlocked() {\n    return ImaginaryUpgrade(15).isBought && !Pelle.isDisabled(\"continuum\");\n  },\n\n  get continuumActive() {\n    return this.continuumUnlocked && !player.auto.disableContinuum && !Pelle.isDisabled(\"continuum\");\n  },\n\n  setContinuum(x) {\n    player.auto.disableContinuum = !x; // If continuum is now not disabled (i.e. is enabled) we update the relevant requirement check.\n\n    if (!player.auto.disableContinuum) {\n      player.requirementChecks.reality.noContinuum = false;\n    }\n  },\n\n  get matterExtraPurchaseFactor() {\n    return 1 + 0.5 * Math.pow(Decimal.pLog10(Currency.darkMatter.max) / 50, 0.4) * (1 + SingularityMilestone.continuumMult.effectOrDefault(0));\n  },\n\n  get realityReward() {\n    return Math.clampMin(Math.pow(100, this.difficultyTier) * Math.pow(360 / player.celestials.laitela.fastestCompletion, 2), 1);\n  },\n\n  // Note that entropy goes from 0 to 1, with 1 being completion\n  get entropyGainPerSecond() {\n    return Math.clamp(Math.pow(Currency.antimatter.value.add(1).log10() / 1e11, 2), 0, 100) / 200;\n  },\n\n  get darkMatterMultGain() {\n    return Decimal.pow(Currency.darkMatter.value.dividedBy(this.annihilationDMRequirement).plus(1).log10(), 1.5).toNumber() * ImaginaryUpgrade(21).effectOrDefault(1);\n  },\n\n  get darkMatterMult() {\n    return this.celestial.darkMatterMult;\n  },\n\n  get darkMatterMultRatio() {\n    return (this.celestial.darkMatterMult + this.darkMatterMultGain) / this.celestial.darkMatterMult;\n  },\n\n  get annihilationUnlocked() {\n    return ImaginaryUpgrade(19).isBought;\n  },\n\n  get annihilationDMRequirement() {\n    return 1e60;\n  },\n\n  get canAnnihilate() {\n    return Laitela.annihilationUnlocked && Currency.darkMatter.gte(this.annihilationDMRequirement);\n  },\n\n  annihilate(force) {\n    if (!force && !this.canAnnihilate) return false;\n    this.celestial.darkMatterMult += this.darkMatterMultGain;\n    DarkMatterDimensions.reset();\n    Laitela.quotes.annihilation.show();\n    Achievement(176).unlock();\n    return true;\n  },\n\n  // Greedily buys the cheapest available upgrade until none are affordable\n  maxAllDMDimensions(maxTier) {\n    // Note that tier is 1-indexed\n    const unlockedDimensions = DarkMatterDimensions.all.filter(d => d.isUnlocked && d.tier <= maxTier);\n    const upgradeInfo = unlockedDimensions.map(d => [[d.rawIntervalCost, d.intervalCostIncrease, d.maxIntervalPurchases, x => d.buyManyInterval(x)], [d.rawPowerDMCost, d.powerDMCostIncrease, Infinity, x => d.buyManyPowerDM(x)], [d.rawPowerDECost, d.powerDECostIncrease, Infinity, x => d.buyManyPowerDE(x)]]).flat(1);\n\n    const buy = function (upgrade, purchases) {\n      upgrade[3](purchases);\n      upgrade[0] = upgrade[0].times(Decimal.pow(upgrade[1], purchases));\n      upgrade[2] -= purchases;\n    }; // Buy everything costing less than 0.02 of initial matter.\n\n\n    const darkMatter = Currency.darkMatter.value;\n\n    for (const upgrade of upgradeInfo) {\n      const purchases = Math.clamp(Math.floor(darkMatter.times(0.02).div(upgrade[0]).log(upgrade[1])), 0, upgrade[2]);\n      buy(upgrade, purchases);\n    }\n\n    while (upgradeInfo.some(upgrade => upgrade[0].lte(darkMatter) && upgrade[2] > 0)) {\n      const cheapestUpgrade = upgradeInfo.filter(upgrade => upgrade[2] > 0).sort((a, b) => a[0].minus(b[0]).sign())[0];\n      buy(cheapestUpgrade, 1);\n    }\n  },\n\n  reset() {\n    this.annihilate(true);\n    this.celestial.darkMatterMult = 1;\n    Currency.darkMatter.max = DC.D1;\n    Currency.darkMatter.reset();\n    Currency.singularities.reset();\n    this.celestial.fastestCompletion = 3600;\n    this.celestial.difficultyTier = 0;\n    this.celestial.singularityCapIncreases = 0;\n  },\n\n  quotes: Quotes.laitela,\n  symbol: \"ᛝ\"\n};\nEventHub.logic.on(GAME_EVENT.TAB_CHANGED, () => {\n  if (Tab.celestials.laitela.isOpen) Laitela.quotes.unlock.show();\n});","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/celestials/laitela/laitela.js"],"names":["DC","Quotes","DarkMatterDimensions","Laitela","displayName","possessiveName","celestial","player","celestials","laitela","isUnlocked","ImaginaryUpgrade","isBought","initializeRun","clearCelestialRuns","run","isRunning","difficultyTier","tier","maxAllowedDimension","isFullyDestabilized","continuumUnlocked","Pelle","isDisabled","continuumActive","auto","disableContinuum","setContinuum","x","requirementChecks","reality","noContinuum","matterExtraPurchaseFactor","Math","pow","Decimal","pLog10","Currency","darkMatter","max","SingularityMilestone","continuumMult","effectOrDefault","realityReward","clampMin","fastestCompletion","entropyGainPerSecond","clamp","antimatter","value","add","log10","darkMatterMultGain","dividedBy","annihilationDMRequirement","plus","toNumber","darkMatterMult","darkMatterMultRatio","annihilationUnlocked","canAnnihilate","gte","annihilate","force","reset","quotes","annihilation","show","Achievement","unlock","maxAllDMDimensions","maxTier","unlockedDimensions","all","filter","d","upgradeInfo","map","rawIntervalCost","intervalCostIncrease","maxIntervalPurchases","buyManyInterval","rawPowerDMCost","powerDMCostIncrease","Infinity","buyManyPowerDM","rawPowerDECost","powerDECostIncrease","buyManyPowerDE","flat","buy","upgrade","purchases","times","floor","div","log","some","lte","cheapestUpgrade","sort","a","b","minus","sign","D1","singularities","singularityCapIncreases","symbol","EventHub","logic","on","GAME_EVENT","TAB_CHANGED","Tab","isOpen"],"mappings":"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","sourcesContent":["import { DC } from \"../../constants\";\r\nimport { Quotes } from \"../quotes\";\r\n\r\nimport { DarkMatterDimensions } from \"./dark-matter-dimension\";\r\n\r\nexport const Laitela = {\r\n  displayName: \"Lai'tela\",\r\n  possessiveName: \"Lai'tela's\",\r\n  get celestial() {\r\n    return player.celestials.laitela;\r\n  },\r\n  get isUnlocked() {\r\n    return ImaginaryUpgrade(15).isBought;\r\n  },\r\n  initializeRun() {\r\n    clearCelestialRuns();\r\n    this.celestial.run = true;\r\n  },\r\n  get isRunning() {\r\n    return this.celestial.run;\r\n  },\r\n  get difficultyTier() {\r\n    return player.celestials.laitela.difficultyTier;\r\n  },\r\n  set difficultyTier(tier) {\r\n    player.celestials.laitela.difficultyTier = tier;\r\n  },\r\n  get maxAllowedDimension() {\r\n    return 8 - this.difficultyTier;\r\n  },\r\n  get isFullyDestabilized() {\r\n    return Laitela.maxAllowedDimension === 0;\r\n  },\r\n  get continuumUnlocked() {\r\n    return ImaginaryUpgrade(15).isBought && !Pelle.isDisabled(\"continuum\");\r\n  },\r\n  get continuumActive() {\r\n    return this.continuumUnlocked && !player.auto.disableContinuum && !Pelle.isDisabled(\"continuum\");\r\n  },\r\n  setContinuum(x) {\r\n    player.auto.disableContinuum = !x;\r\n    // If continuum is now not disabled (i.e. is enabled) we update the relevant requirement check.\r\n    if (!player.auto.disableContinuum) {\r\n      player.requirementChecks.reality.noContinuum = false;\r\n    }\r\n  },\r\n  get matterExtraPurchaseFactor() {\r\n    return (1 + 0.5 * Math.pow(Decimal.pLog10(Currency.darkMatter.max) / 50, 0.4) *\r\n      (1 + SingularityMilestone.continuumMult.effectOrDefault(0)));\r\n  },\r\n  get realityReward() {\r\n    return Math.clampMin(Math.pow(100, this.difficultyTier) *\r\n      Math.pow(360 / player.celestials.laitela.fastestCompletion, 2), 1);\r\n  },\r\n  // Note that entropy goes from 0 to 1, with 1 being completion\r\n  get entropyGainPerSecond() {\r\n    return Math.clamp(Math.pow(Currency.antimatter.value.add(1).log10() / 1e11, 2), 0, 100) / 200;\r\n  },\r\n  get darkMatterMultGain() {\r\n    return Decimal.pow(Currency.darkMatter.value.dividedBy(this.annihilationDMRequirement)\r\n      .plus(1).log10(), 1.5).toNumber() * ImaginaryUpgrade(21).effectOrDefault(1);\r\n  },\r\n  get darkMatterMult() {\r\n    return this.celestial.darkMatterMult;\r\n  },\r\n  get darkMatterMultRatio() {\r\n    return (this.celestial.darkMatterMult + this.darkMatterMultGain) / this.celestial.darkMatterMult;\r\n  },\r\n  get annihilationUnlocked() {\r\n    return ImaginaryUpgrade(19).isBought;\r\n  },\r\n  get annihilationDMRequirement() {\r\n    return 1e60;\r\n  },\r\n  get canAnnihilate() {\r\n    return Laitela.annihilationUnlocked && Currency.darkMatter.gte(this.annihilationDMRequirement);\r\n  },\r\n  annihilate(force) {\r\n    if (!force && !this.canAnnihilate) return false;\r\n    this.celestial.darkMatterMult += this.darkMatterMultGain;\r\n    DarkMatterDimensions.reset();\r\n    Laitela.quotes.annihilation.show();\r\n    Achievement(176).unlock();\r\n    return true;\r\n  },\r\n  // Greedily buys the cheapest available upgrade until none are affordable\r\n  maxAllDMDimensions(maxTier) {\r\n    // Note that tier is 1-indexed\r\n    const unlockedDimensions = DarkMatterDimensions.all\r\n      .filter(d => d.isUnlocked && d.tier <= maxTier);\r\n    const upgradeInfo = unlockedDimensions\r\n      .map(d => [\r\n        [d.rawIntervalCost, d.intervalCostIncrease, d.maxIntervalPurchases, x => d.buyManyInterval(x)],\r\n        [d.rawPowerDMCost, d.powerDMCostIncrease, Infinity, x => d.buyManyPowerDM(x)],\r\n        [d.rawPowerDECost, d.powerDECostIncrease, Infinity, x => d.buyManyPowerDE(x)]])\r\n      .flat(1);\r\n    const buy = function(upgrade, purchases) {\r\n      upgrade[3](purchases);\r\n      upgrade[0] = upgrade[0].times(Decimal.pow(upgrade[1], purchases));\r\n      upgrade[2] -= purchases;\r\n    };\r\n    // Buy everything costing less than 0.02 of initial matter.\r\n    const darkMatter = Currency.darkMatter.value;\r\n    for (const upgrade of upgradeInfo) {\r\n      const purchases = Math.clamp(Math.floor(darkMatter.times(0.02).div(upgrade[0]).log(upgrade[1])), 0, upgrade[2]);\r\n      buy(upgrade, purchases);\r\n    }\r\n    while (upgradeInfo.some(upgrade => upgrade[0].lte(darkMatter) && upgrade[2] > 0)) {\r\n      const cheapestUpgrade = upgradeInfo.filter(upgrade => upgrade[2] > 0).sort((a, b) => a[0].minus(b[0]).sign())[0];\r\n      buy(cheapestUpgrade, 1);\r\n    }\r\n  },\r\n  reset() {\r\n    this.annihilate(true);\r\n    this.celestial.darkMatterMult = 1;\r\n    Currency.darkMatter.max = DC.D1;\r\n    Currency.darkMatter.reset();\r\n    Currency.singularities.reset();\r\n    this.celestial.fastestCompletion = 3600;\r\n    this.celestial.difficultyTier = 0;\r\n    this.celestial.singularityCapIncreases = 0;\r\n  },\r\n  quotes: Quotes.laitela,\r\n  symbol: \"ᛝ\"\r\n};\r\n\r\nEventHub.logic.on(GAME_EVENT.TAB_CHANGED, () => {\r\n  if (Tab.celestials.laitela.isOpen) Laitela.quotes.unlock.show();\r\n});\r\n"]},"metadata":{},"sourceType":"module"}