{"ast":null,"code":"import \"core-js/modules/es.array.reduce.js\";\nexport const progressStages = [\n/**\r\n * This is used in both the catchup modal and for cloud save comparisons. Due to the fact that it's used for\r\n * cloud comparisons, there's a lot of processing that needs to be done on raw player-like objects that aren't\r\n * actually the player object itself. This means we can't take advantage of a lot of accessors and whatnot, and\r\n * that many props which are normally Decimals are actually Strings at this point.\r\n * @template\r\n * {\r\n *  @property {Number} id         Value corresponding to entry in PROGRESS_STAGE enum\r\n *  @property {String} name       Name describing the stage of the game this entry is associated with\r\n *  @property {function: @return Boolean} hasReached        Checking function for whether this stage has been\r\n *    reached; all checks are run in descending order, starting at the end of the list and moving upward. The\r\n *    last one checked (first entry) always returns true as a catch-all condition\r\n *  @property {String | function: @return Number} suggestedResource     A resource or multiple resources which may be\r\n *    useful for the player to aim for at this stage. It's okay to reference the player object in this prop because\r\n *    it's only ever used in the catchup modal and not in the cloud save conflict checker.\r\n *  @property {function: @return Number} subProgressValue   A value between 0 and 1 corresponding approximately\r\n *    to the progress within a stage. Values near 0 correspond to near the end of the previous stage and values\r\n *    near 1 correspond to near the start of the next stage; however in-between values are not an indicator of\r\n *    absolute progress and shouldn't be used as such\r\n * }\r\n */\n{\n  id: PROGRESS_STAGE.PRE_INFINITY,\n  name: \"Antimatter Production\",\n  hasReached: () => true,\n  suggestedResource: \"Antimatter\",\n  // Galaxies are worth 1/3 each, boosts break ties within galaxies, and antimatter breaks ties within boosts\n  subProgressValue: save => 0.33 * save.galaxies + 0.02 * save.dimensionBoosts + new Decimal(save.antimatter).log10() / 16000\n}, {\n  id: PROGRESS_STAGE.EARLY_INFINITY,\n  name: \"Infinity\",\n  hasReached: save => new Decimal(save.infinities).gt(0),\n  suggestedResource: \"Infinity Points\",\n  // Half from infinity count, half from crunch autobuyer state\n  subProgressValue: save => Math.clampMax(new Decimal(save.infinities).toNumber(), 500) / 1000 + Math.log10(150000 / player.auto.bigCrunch.interval) / 6.35\n}, {\n  id: PROGRESS_STAGE.BREAK_INFINITY,\n  name: \"Broken Infinity\",\n  hasReached: save => save.auto.bigCrunch.interval <= 100,\n  suggestedResource: \"Infinity Points\",\n  subProgressValue: save => Math.sqrt(new Decimal(save.infinityPoints).log10() / 145)\n}, {\n  id: PROGRESS_STAGE.REPLICANTI,\n  name: \"Replicanti\",\n  hasReached: save => save.replicanti.unl,\n  suggestedResource: \"Infinity Points\",\n  subProgressValue: save => Math.sqrt((new Decimal(save.infinityPoints).log10() - 140) / 170)\n}, {\n  id: PROGRESS_STAGE.EARLY_ETERNITY,\n  name: \"Eternity\",\n  hasReached: save => new Decimal(save.eternities).gt(0),\n  suggestedResource: \"Eternity Points and Eternity count\",\n  subProgressValue: save => new Decimal(save.eternities).clampMax(1e5).toNumber() / 1e5\n}, {\n  id: PROGRESS_STAGE.ETERNITY_CHALLENGES,\n  name: \"Eternity Challenges\",\n  hasReached: save => save.eternityChalls.eterc1 > 0,\n  suggestedResource: \"Eternity Challenge Completions and Eternity Points\",\n  // Half from ECs, half from EP (up to e1300)\n  subProgressValue: save => 0.008 * Object.values(save.eternityChalls).reduce((sum, c) => sum + c, 0) + new Decimal(save.eternityPoints).log10() / 2500\n}, {\n  id: PROGRESS_STAGE.EARLY_DILATION,\n  name: \"Time Dilation\",\n  hasReached: save => new Decimal(save.dilation.dilatedTime).gt(0),\n  suggestedResource: \"Dilated Time\",\n  subProgressValue: save => new Decimal(save.dilation.dilatedTime).log10() / 15\n}, {\n  id: PROGRESS_STAGE.LATE_ETERNITY,\n  name: \"Late Eternity\",\n  hasReached: save => new Decimal(save.dilation.dilatedTime).gt(1e15),\n  suggestedResource: () => new Decimal(player.eternityPoints).log10() > 4000 ? \"Eternity Points and/or Dilated Time. Alternatively, you can unlock and perform your first Reality\" : \"Eternity Points and/or Dilated Time\",\n  // Tracks up to e8000 even though many players will reality well before that; we still want to distinguish\n  // which saves are farther all the way up to the zeroth-reality RM cap\n  subProgressValue: save => Math.clampMax(Math.sqrt((new Decimal(save.eternityPoints).log10() - 1300) / 6700), 1)\n}, {\n  id: PROGRESS_STAGE.EARLY_REALITY,\n  name: \"Reality\",\n  hasReached: save => save.realities > 0,\n  // For the first few realities, we give a bit of extra suggestion just in case the player ended up taking a break\n  // and returned in the middle of a reality while they're still relatively slow\n  suggestedResource: () => {\n    if (player.realities > 5) return \"Reality Machines\";\n    const suffix = \"in your current Reality, and your Reality Machines in the long term\";\n    if (player.eternities.eq(0)) return `Infinity Points ${suffix}`;\n    if (player.dilation.dilatedTime.eq(0)) return `Eternity Points ${suffix}`;\n    return `Eternity Points and/or Dilated Time ${suffix}`;\n  },\n  subProgressValue: save => Math.clampMax(save.realities / 100, 1)\n}, {\n  id: PROGRESS_STAGE.TERESA,\n  name: \"Teresa (1st Celestial)\",\n  hasReached: save => {\n    var _save$celestials, _save$celestials$tere;\n\n    return ((_save$celestials = save.celestials) === null || _save$celestials === void 0 ? void 0 : (_save$celestials$tere = _save$celestials.teresa) === null || _save$celestials$tere === void 0 ? void 0 : _save$celestials$tere.quoteBits) > 0;\n  },\n  suggestedResource: \"Reality Machines\",\n  subProgressValue: save => Math.log10(1 + save.celestials.teresa.pouredAmount) / 21\n}, {\n  id: PROGRESS_STAGE.EFFARIG,\n  name: \"Effarig (2nd Celestial)\",\n  hasReached: save => {\n    var _save$celestials2, _save$celestials2$eff;\n\n    return ((_save$celestials2 = save.celestials) === null || _save$celestials2 === void 0 ? void 0 : (_save$celestials2$eff = _save$celestials2.effarig) === null || _save$celestials2$eff === void 0 ? void 0 : _save$celestials2$eff.quoteBits) > 0;\n  },\n  suggestedResource: \"Reality Machines and Relic Shards\",\n  subProgressValue: save => Math.log10(1 + save.celestials.effarig.relicShards) / 14\n}, {\n  id: PROGRESS_STAGE.ENSLAVED,\n  name: \"The Nameless Ones (3rd Celestial)\",\n  hasReached: save => {\n    var _save$celestials3, _save$celestials3$ens;\n\n    return ((_save$celestials3 = save.celestials) === null || _save$celestials3 === void 0 ? void 0 : (_save$celestials3$ens = _save$celestials3.enslaved) === null || _save$celestials3$ens === void 0 ? void 0 : _save$celestials3$ens.quoteBits) > 0;\n  },\n  suggestedResource: \"Reality Machines and Glyph Level\",\n  subProgressValue: save => Math.sqrt((new Decimal(save.reality.realityMachines).log10() - 30) / 30)\n}, {\n  id: PROGRESS_STAGE.V,\n  name: \"V (4th Celestial)\",\n  hasReached: save => {\n    var _save$celestials4, _save$celestials4$v;\n\n    return ((_save$celestials4 = save.celestials) === null || _save$celestials4 === void 0 ? void 0 : (_save$celestials4$v = _save$celestials4.v) === null || _save$celestials4$v === void 0 ? void 0 : _save$celestials4$v.quoteBits) > 0;\n  },\n  suggestedResource: \"Number of V-Achievements\",\n  subProgressValue: save => 0.0277 * Object.values(save.celestials.v.runUnlocks).reduce((total, ach) => total + ach, 0)\n}, {\n  id: PROGRESS_STAGE.RA,\n  name: \"Ra (5th Celestial)\",\n  hasReached: save => {\n    var _save$celestials5, _save$celestials5$ra;\n\n    return ((_save$celestials5 = save.celestials) === null || _save$celestials5 === void 0 ? void 0 : (_save$celestials5$ra = _save$celestials5.ra) === null || _save$celestials5$ra === void 0 ? void 0 : _save$celestials5$ra.quoteBits) > 0;\n  },\n  suggestedResource: \"Celestial Memories\",\n  subProgressValue: save => Object.values(save.celestials.ra.pets).reduce((sum, pet) => sum + pet.level, 0) / 100\n}, {\n  id: PROGRESS_STAGE.IMAGINARY_MACHINES,\n  name: \"Imaginary Machines\",\n  hasReached: save => {\n    var _save$reality;\n\n    return ((_save$reality = save.reality) === null || _save$reality === void 0 ? void 0 : _save$reality.iMCap) > 0;\n  },\n  suggestedResource: \"Imaginary Machines\",\n  subProgressValue: save => Math.log10(1 + save.reality.iMCap) / 9\n}, {\n  id: PROGRESS_STAGE.LAITELA,\n  name: \"Lai'tela (6th Celestial)\",\n  hasReached: save => {\n    var _save$celestials6, _save$celestials6$lai;\n\n    return ((_save$celestials6 = save.celestials) === null || _save$celestials6 === void 0 ? void 0 : (_save$celestials6$lai = _save$celestials6.laitela) === null || _save$celestials6$lai === void 0 ? void 0 : _save$celestials6$lai.quoteBits) > 0;\n  },\n  suggestedResource: \"Dark Matter and Singularities\",\n  subProgressValue: save => new Decimal(save.celestials.laitela.darkMatter).log10() / 308.25\n}, {\n  id: PROGRESS_STAGE.PELLE,\n  name: \"Pelle (7th Celestial)\",\n  hasReached: save => {\n    var _save$celestials7, _save$celestials7$pel;\n\n    return (_save$celestials7 = save.celestials) === null || _save$celestials7 === void 0 ? void 0 : (_save$celestials7$pel = _save$celestials7.pelle) === null || _save$celestials7$pel === void 0 ? void 0 : _save$celestials7$pel.doomed;\n  },\n  suggestedResource: \"Remnants\",\n  subProgressValue: save => Math.log10(1 + save.celestials.pelle.remnants) / 9\n}];","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/progress-checker.js"],"names":["progressStages","id","PROGRESS_STAGE","PRE_INFINITY","name","hasReached","suggestedResource","subProgressValue","save","galaxies","dimensionBoosts","Decimal","antimatter","log10","EARLY_INFINITY","infinities","gt","Math","clampMax","toNumber","player","auto","bigCrunch","interval","BREAK_INFINITY","sqrt","infinityPoints","REPLICANTI","replicanti","unl","EARLY_ETERNITY","eternities","ETERNITY_CHALLENGES","eternityChalls","eterc1","Object","values","reduce","sum","c","eternityPoints","EARLY_DILATION","dilation","dilatedTime","LATE_ETERNITY","EARLY_REALITY","realities","suffix","eq","TERESA","celestials","teresa","quoteBits","pouredAmount","EFFARIG","effarig","relicShards","ENSLAVED","enslaved","reality","realityMachines","V","v","runUnlocks","total","ach","RA","ra","pets","pet","level","IMAGINARY_MACHINES","iMCap","LAITELA","laitela","darkMatter","PELLE","pelle","doomed","remnants"],"mappings":"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","sourcesContent":["export const progressStages = [\r\n  /**\r\n   * This is used in both the catchup modal and for cloud save comparisons. Due to the fact that it's used for\r\n   * cloud comparisons, there's a lot of processing that needs to be done on raw player-like objects that aren't\r\n   * actually the player object itself. This means we can't take advantage of a lot of accessors and whatnot, and\r\n   * that many props which are normally Decimals are actually Strings at this point.\r\n   * @template\r\n   * {\r\n   *  @property {Number} id         Value corresponding to entry in PROGRESS_STAGE enum\r\n   *  @property {String} name       Name describing the stage of the game this entry is associated with\r\n   *  @property {function: @return Boolean} hasReached        Checking function for whether this stage has been\r\n   *    reached; all checks are run in descending order, starting at the end of the list and moving upward. The\r\n   *    last one checked (first entry) always returns true as a catch-all condition\r\n   *  @property {String | function: @return Number} suggestedResource     A resource or multiple resources which may be\r\n   *    useful for the player to aim for at this stage. It's okay to reference the player object in this prop because\r\n   *    it's only ever used in the catchup modal and not in the cloud save conflict checker.\r\n   *  @property {function: @return Number} subProgressValue   A value between 0 and 1 corresponding approximately\r\n   *    to the progress within a stage. Values near 0 correspond to near the end of the previous stage and values\r\n   *    near 1 correspond to near the start of the next stage; however in-between values are not an indicator of\r\n   *    absolute progress and shouldn't be used as such\r\n   * }\r\n   */\r\n  {\r\n    id: PROGRESS_STAGE.PRE_INFINITY,\r\n    name: \"Antimatter Production\",\r\n    hasReached: () => true,\r\n    suggestedResource: \"Antimatter\",\r\n    // Galaxies are worth 1/3 each, boosts break ties within galaxies, and antimatter breaks ties within boosts\r\n    subProgressValue: save => 0.33 * save.galaxies + 0.02 * save.dimensionBoosts +\r\n      new Decimal(save.antimatter).log10() / 16000,\r\n  },\r\n  {\r\n    id: PROGRESS_STAGE.EARLY_INFINITY,\r\n    name: \"Infinity\",\r\n    hasReached: save => new Decimal(save.infinities).gt(0),\r\n    suggestedResource: \"Infinity Points\",\r\n    // Half from infinity count, half from crunch autobuyer state\r\n    subProgressValue: save => Math.clampMax(new Decimal(save.infinities).toNumber(), 500) / 1000 +\r\n      Math.log10(150000 / player.auto.bigCrunch.interval) / 6.35,\r\n  },\r\n  {\r\n    id: PROGRESS_STAGE.BREAK_INFINITY,\r\n    name: \"Broken Infinity\",\r\n    hasReached: save => save.auto.bigCrunch.interval <= 100,\r\n    suggestedResource: \"Infinity Points\",\r\n    subProgressValue: save => Math.sqrt(new Decimal(save.infinityPoints).log10() / 145),\r\n  },\r\n  {\r\n    id: PROGRESS_STAGE.REPLICANTI,\r\n    name: \"Replicanti\",\r\n    hasReached: save => save.replicanti.unl,\r\n    suggestedResource: \"Infinity Points\",\r\n    subProgressValue: save => Math.sqrt((new Decimal(save.infinityPoints).log10() - 140) / 170),\r\n  },\r\n  {\r\n    id: PROGRESS_STAGE.EARLY_ETERNITY,\r\n    name: \"Eternity\",\r\n    hasReached: save => new Decimal(save.eternities).gt(0),\r\n    suggestedResource: \"Eternity Points and Eternity count\",\r\n    subProgressValue: save => new Decimal(save.eternities).clampMax(1e5).toNumber() / 1e5,\r\n  },\r\n  {\r\n    id: PROGRESS_STAGE.ETERNITY_CHALLENGES,\r\n    name: \"Eternity Challenges\",\r\n    hasReached: save => save.eternityChalls.eterc1 > 0,\r\n    suggestedResource: \"Eternity Challenge Completions and Eternity Points\",\r\n    // Half from ECs, half from EP (up to e1300)\r\n    subProgressValue: save => 0.008 * Object.values(save.eternityChalls).reduce((sum, c) => sum + c, 0) +\r\n      new Decimal(save.eternityPoints).log10() / 2500,\r\n  },\r\n  {\r\n    id: PROGRESS_STAGE.EARLY_DILATION,\r\n    name: \"Time Dilation\",\r\n    hasReached: save => new Decimal(save.dilation.dilatedTime).gt(0),\r\n    suggestedResource: \"Dilated Time\",\r\n    subProgressValue: save => new Decimal(save.dilation.dilatedTime).log10() / 15,\r\n  },\r\n  {\r\n    id: PROGRESS_STAGE.LATE_ETERNITY,\r\n    name: \"Late Eternity\",\r\n    hasReached: save => new Decimal(save.dilation.dilatedTime).gt(1e15),\r\n    suggestedResource: () => (new Decimal(player.eternityPoints).log10() > 4000\r\n      ? \"Eternity Points and/or Dilated Time. Alternatively, you can unlock and perform your first Reality\"\r\n      : \"Eternity Points and/or Dilated Time\"\r\n    ),\r\n    // Tracks up to e8000 even though many players will reality well before that; we still want to distinguish\r\n    // which saves are farther all the way up to the zeroth-reality RM cap\r\n    subProgressValue: save => Math.clampMax(Math.sqrt((new Decimal(save.eternityPoints).log10() - 1300) / 6700), 1),\r\n  },\r\n  {\r\n    id: PROGRESS_STAGE.EARLY_REALITY,\r\n    name: \"Reality\",\r\n    hasReached: save => save.realities > 0,\r\n    // For the first few realities, we give a bit of extra suggestion just in case the player ended up taking a break\r\n    // and returned in the middle of a reality while they're still relatively slow\r\n    suggestedResource: () => {\r\n      if (player.realities > 5) return \"Reality Machines\";\r\n      const suffix = \"in your current Reality, and your Reality Machines in the long term\";\r\n      if (player.eternities.eq(0)) return `Infinity Points ${suffix}`;\r\n      if (player.dilation.dilatedTime.eq(0)) return `Eternity Points ${suffix}`;\r\n      return `Eternity Points and/or Dilated Time ${suffix}`;\r\n    },\r\n    subProgressValue: save => Math.clampMax(save.realities / 100, 1),\r\n  },\r\n  {\r\n    id: PROGRESS_STAGE.TERESA,\r\n    name: \"Teresa (1st Celestial)\",\r\n    hasReached: save => save.celestials?.teresa?.quoteBits > 0,\r\n    suggestedResource: \"Reality Machines\",\r\n    subProgressValue: save => Math.log10(1 + save.celestials.teresa.pouredAmount) / 21,\r\n  },\r\n  {\r\n    id: PROGRESS_STAGE.EFFARIG,\r\n    name: \"Effarig (2nd Celestial)\",\r\n    hasReached: save => save.celestials?.effarig?.quoteBits > 0,\r\n    suggestedResource: \"Reality Machines and Relic Shards\",\r\n    subProgressValue: save => Math.log10(1 + save.celestials.effarig.relicShards) / 14,\r\n  },\r\n  {\r\n    id: PROGRESS_STAGE.ENSLAVED,\r\n    name: \"The Nameless Ones (3rd Celestial)\",\r\n    hasReached: save => save.celestials?.enslaved?.quoteBits > 0,\r\n    suggestedResource: \"Reality Machines and Glyph Level\",\r\n    subProgressValue: save => Math.sqrt((new Decimal(save.reality.realityMachines).log10() - 30) / 30),\r\n  },\r\n  {\r\n    id: PROGRESS_STAGE.V,\r\n    name: \"V (4th Celestial)\",\r\n    hasReached: save => save.celestials?.v?.quoteBits > 0,\r\n    suggestedResource: \"Number of V-Achievements\",\r\n    subProgressValue: save => 0.0277 * Object.values(save.celestials.v.runUnlocks)\r\n      .reduce((total, ach) => total + ach, 0),\r\n  },\r\n  {\r\n    id: PROGRESS_STAGE.RA,\r\n    name: \"Ra (5th Celestial)\",\r\n    hasReached: save => save.celestials?.ra?.quoteBits > 0,\r\n    suggestedResource: \"Celestial Memories\",\r\n    subProgressValue: save => Object.values(save.celestials.ra.pets).reduce((sum, pet) => sum + pet.level, 0) / 100,\r\n  },\r\n  {\r\n    id: PROGRESS_STAGE.IMAGINARY_MACHINES,\r\n    name: \"Imaginary Machines\",\r\n    hasReached: save => save.reality?.iMCap > 0,\r\n    suggestedResource: \"Imaginary Machines\",\r\n    subProgressValue: save => Math.log10(1 + save.reality.iMCap) / 9,\r\n  },\r\n  {\r\n    id: PROGRESS_STAGE.LAITELA,\r\n    name: \"Lai'tela (6th Celestial)\",\r\n    hasReached: save => save.celestials?.laitela?.quoteBits > 0,\r\n    suggestedResource: \"Dark Matter and Singularities\",\r\n    subProgressValue: save => new Decimal(save.celestials.laitela.darkMatter).log10() / 308.25,\r\n  },\r\n  {\r\n    id: PROGRESS_STAGE.PELLE,\r\n    name: \"Pelle (7th Celestial)\",\r\n    hasReached: save => save.celestials?.pelle?.doomed,\r\n    suggestedResource: \"Remnants\",\r\n    subProgressValue: save => Math.log10(1 + save.celestials.pelle.remnants) / 9,\r\n  },\r\n];\r\n"]},"metadata":{},"sourceType":"module"}