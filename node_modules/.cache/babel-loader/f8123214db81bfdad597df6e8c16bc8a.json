{"ast":null,"code":"import AutobuyerGroupToggleLabel from \"./AutobuyerGroupToggleLabel\";\nimport AutobuyerIntervalLabel from \"./AutobuyerIntervalLabel\";\nimport SingleAutobuyerInRow from \"./SingleAutobuyerInRow\"; // This component is the container for an individual group of autobuyers, such as all of the AD autobuyers in the\n// single-row layout once they're all maxed and have the same parameters\n\nexport default {\n  name: \"MultipleAutobuyersBox\",\n  components: {\n    AutobuyerIntervalLabel,\n    AutobuyerGroupToggleLabel,\n    SingleAutobuyerInRow\n  },\n  props: {\n    type: {\n      type: Function,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      continuumActive: false,\n      anyUnlocked: false,\n      displayLabelAsGroup: false,\n      parentActive: false\n    };\n  },\n\n  computed: {\n    autobuyers() {\n      return this.type.zeroIndexed;\n    },\n\n    name() {\n      return this.type.groupName;\n    },\n\n    entryCount() {\n      return this.type.entryCount;\n    },\n\n    rowCount() {\n      return Math.ceil(this.entryCount / 8);\n    },\n\n    entryCountPerRow() {\n      return this.rowCount === 1 ? this.entryCount : 5;\n    },\n\n    boxSize() {\n      // The 1% reduced flex-basis is used to prevent wrapping due to the margins.\n      return `flex: 1 0 ${100 / this.entryCountPerRow - 1}%`;\n    },\n\n    isADBox() {\n      return this.name === Autobuyer.antimatterDimension.groupName;\n    },\n\n    showAutobuyers() {\n      // Only display the Antimatter Dimension Autobuyers if the bulk is the same and there are any of them unlocked\n      if (this.isADBox) return this.anyUnlocked && this.displayLabelAsGroup;\n      return this.anyUnlocked;\n    }\n\n  },\n  methods: {\n    update() {\n      var _type$allMaxedInterva, _type$allUnlimitedBul;\n\n      this.continuumActive = Laitela.continuumActive;\n      const type = this.type;\n      this.anyUnlocked = type.anyUnlocked;\n      this.displayLabelAsGroup = ((_type$allMaxedInterva = type.allMaxedInterval) !== null && _type$allMaxedInterva !== void 0 ? _type$allMaxedInterva : true) && ((_type$allUnlimitedBul = type.allUnlimitedBulk) !== null && _type$allUnlimitedBul !== void 0 ? _type$allUnlimitedBul : true);\n      this.parentActive = type.isActive;\n    },\n\n    toggleGroup() {\n      this.type.toggle();\n    }\n\n  }\n};","map":{"version":3,"sources":["MultipleAutobuyersBox.vue"],"names":[],"mappings":"AACA,OAAA,yBAAA,MAAA,6BAAA;AACA,OAAA,sBAAA,MAAA,0BAAA;AACA,OAAA,oBAAA,MAAA,wBAAA,C,CAEA;AACA;;AACA,eAAA;AACA,EAAA,IAAA,EAAA,uBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,sBADA;AAEA,IAAA,yBAFA;AAGA,IAAA;AAHA,GAFA;AAOA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GAPA;;AAaA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,eAAA,EAAA,KADA;AAEA,MAAA,WAAA,EAAA,KAFA;AAGA,MAAA,mBAAA,EAAA,KAHA;AAIA,MAAA,YAAA,EAAA;AAJA,KAAA;AAMA,GApBA;;AAqBA,EAAA,QAAA,EAAA;AACA,IAAA,UAAA,GAAA;AACA,aAAA,KAAA,IAAA,CAAA,WAAA;AACA,KAHA;;AAIA,IAAA,IAAA,GAAA;AACA,aAAA,KAAA,IAAA,CAAA,SAAA;AACA,KANA;;AAOA,IAAA,UAAA,GAAA;AACA,aAAA,KAAA,IAAA,CAAA,UAAA;AACA,KATA;;AAUA,IAAA,QAAA,GAAA;AACA,aAAA,IAAA,CAAA,IAAA,CAAA,KAAA,UAAA,GAAA,CAAA,CAAA;AACA,KAZA;;AAaA,IAAA,gBAAA,GAAA;AACA,aAAA,KAAA,QAAA,KAAA,CAAA,GAAA,KAAA,UAAA,GAAA,CAAA;AACA,KAfA;;AAgBA,IAAA,OAAA,GAAA;AACA;AACA,aAAA,aAAA,MAAA,KAAA,gBAAA,GAAA,CAAA,GAAA;AACA,KAnBA;;AAoBA,IAAA,OAAA,GAAA;AACA,aAAA,KAAA,IAAA,KAAA,SAAA,CAAA,mBAAA,CAAA,SAAA;AACA,KAtBA;;AAuBA,IAAA,cAAA,GAAA;AACA;AACA,UAAA,KAAA,OAAA,EAAA,OAAA,KAAA,WAAA,IAAA,KAAA,mBAAA;AACA,aAAA,KAAA,WAAA;AACA;;AA3BA,GArBA;AAkDA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AAAA;;AACA,WAAA,eAAA,GAAA,OAAA,CAAA,eAAA;AACA,YAAA,IAAA,GAAA,KAAA,IAAA;AACA,WAAA,WAAA,GAAA,IAAA,CAAA,WAAA;AACA,WAAA,mBAAA,GAAA,0BAAA,IAAA,CAAA,gBAAA,yEAAA,IAAA,+BAAA,IAAA,CAAA,gBAAA,yEAAA,IAAA,CAAA;AACA,WAAA,YAAA,GAAA,IAAA,CAAA,QAAA;AACA,KAPA;;AAQA,IAAA,WAAA,GAAA;AACA,WAAA,IAAA,CAAA,MAAA;AACA;;AAVA;AAlDA,CAAA","sourcesContent":["<script>\r\nimport AutobuyerGroupToggleLabel from \"./AutobuyerGroupToggleLabel\";\r\nimport AutobuyerIntervalLabel from \"./AutobuyerIntervalLabel\";\r\nimport SingleAutobuyerInRow from \"./SingleAutobuyerInRow\";\r\n\r\n// This component is the container for an individual group of autobuyers, such as all of the AD autobuyers in the\r\n// single-row layout once they're all maxed and have the same parameters\r\nexport default {\r\n  name: \"MultipleAutobuyersBox\",\r\n  components: {\r\n    AutobuyerIntervalLabel,\r\n    AutobuyerGroupToggleLabel,\r\n    SingleAutobuyerInRow,\r\n  },\r\n  props: {\r\n    type: {\r\n      type: Function,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      continuumActive: false,\r\n      anyUnlocked: false,\r\n      displayLabelAsGroup: false,\r\n      parentActive: false,\r\n    };\r\n  },\r\n  computed: {\r\n    autobuyers() {\r\n      return this.type.zeroIndexed;\r\n    },\r\n    name() {\r\n      return this.type.groupName;\r\n    },\r\n    entryCount() {\r\n      return this.type.entryCount;\r\n    },\r\n    rowCount() {\r\n      return Math.ceil(this.entryCount / 8);\r\n    },\r\n    entryCountPerRow() {\r\n      return this.rowCount === 1 ? this.entryCount : 5;\r\n    },\r\n    boxSize() {\r\n      // The 1% reduced flex-basis is used to prevent wrapping due to the margins.\r\n      return `flex: 1 0 ${100 / this.entryCountPerRow - 1}%`;\r\n    },\r\n    isADBox() {\r\n      return this.name === Autobuyer.antimatterDimension.groupName;\r\n    },\r\n    showAutobuyers() {\r\n      // Only display the Antimatter Dimension Autobuyers if the bulk is the same and there are any of them unlocked\r\n      if (this.isADBox) return this.anyUnlocked && this.displayLabelAsGroup;\r\n      return this.anyUnlocked;\r\n    },\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.continuumActive = Laitela.continuumActive;\r\n      const type = this.type;\r\n      this.anyUnlocked = type.anyUnlocked;\r\n      this.displayLabelAsGroup = (type.allMaxedInterval ?? true) && (type.allUnlimitedBulk ?? true);\r\n      this.parentActive = type.isActive;\r\n    },\r\n    toggleGroup() {\r\n      this.type.toggle();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <span\r\n    v-if=\"showAutobuyers && !(isADBox && continuumActive)\"\r\n    class=\"c-autobuyer-box-row\"\r\n  >\r\n    <AutobuyerGroupToggleLabel\r\n      :is-active=\"parentActive\"\r\n      :name=\"name\"\r\n      @click=\"toggleGroup\"\r\n    />\r\n    <div class=\"l-autobuyer-box__title\">\r\n      {{ name }}<br>Autobuyers\r\n      <!-- If we're showing as a group, then all attributes are the same and we can arbitrarily take the first one -->\r\n      <AutobuyerIntervalLabel\r\n        v-if=\"displayLabelAsGroup\"\r\n        :autobuyer=\"autobuyers[0]\"\r\n      />\r\n    </div>\r\n    <div class=\"l-autobuyer-box__autobuyers\">\r\n      <template\r\n        v-for=\"(autobuyer, id) in autobuyers\"\r\n      >\r\n        <SingleAutobuyerInRow\r\n          :key=\"id\"\r\n          class=\"l-autobuyer-box__autobuyers-internal\"\r\n          :style=\"boxSize\"\r\n          :autobuyer=\"autobuyer\"\r\n          :show-individual=\"!displayLabelAsGroup\"\r\n          :parent-disabled=\"!parentActive\"\r\n        />\r\n        <br\r\n          v-if=\"id % entryCountPerRow === entryCountPerRow\"\r\n          :key=\"id\"\r\n        >\r\n      </template>\r\n    </div>\r\n  </span>\r\n  <span\r\n    v-else-if=\"isADBox && continuumActive\"\r\n    class=\"c-autobuyer-box-row\"\r\n  >\r\n    Continuum replaces your Antimatter Dimension and Tickspeed Autobuyers, as your production multipliers\r\n    <br>\r\n    now automatically and continuously scale based on how many purchases you would have had otherwise.\r\n  </span>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/autobuyers"},"metadata":{},"sourceType":"module"}