{"ast":null,"code":"import \"core-js/modules/es.array.sort.js\";\nimport GlyphComponent from \"@/components/GlyphComponent\";\nimport GlyphSetName from \"@/components/GlyphSetName\";\nexport default {\n  name: \"GlyphSetPreview\",\n  components: {\n    GlyphComponent,\n    GlyphSetName\n  },\n  props: {\n    text: {\n      type: String,\n      required: false,\n      default: \"\"\n    },\n    textHidden: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    glyphs: {\n      type: Array,\n      required: true\n    },\n    ignoreModifiedLevel: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    flipTooltip: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    isInModal: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    showName: {\n      type: Boolean,\n      required: false,\n      default: true\n    },\n    forceNameColor: {\n      type: Boolean,\n      required: false,\n      default: true\n    },\n    showSacrifice: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    noneText: {\n      type: String,\n      required: false,\n      default: \"(No Glyphs equipped)\"\n    },\n    sort: {\n      type: Boolean,\n      required: false,\n      default: true\n    }\n  },\n\n  data() {\n    return {\n      realityGlyphBoost: 0\n    };\n  },\n\n  computed: {\n    orderedGlyphs() {\n      if (!this.sort) return this.glyphs;\n      const standardOrder = [\"reality\", \"effarig\", \"power\", \"infinity\", \"replication\", \"time\", \"dilation\", \"cursed\", \"companion\"];\n      const order = Glyphs.copyForRecords(this.glyphs); // Technically doesn't stable sort between glyphs of the same type, probably fine though\n\n      order.sort((a, b) => standardOrder.indexOf(a.type) - standardOrder.indexOf(b.type));\n      return order;\n    }\n\n  },\n  watch: {\n    glyphs() {\n      this.$recompute(\"orderedGlyphs\");\n    }\n\n  },\n  methods: {\n    update() {\n      // There should only be one reality glyph; this picks one pseudo-randomly if multiple are cheated/glitched in\n      const realityGlyph = this.glyphs.filter(g => g.type === \"reality\")[0];\n      this.realityGlyphBoost = realityGlyph ? GlyphEffects.realityglyphlevel.effect(realityGlyph.level) : 0;\n    },\n\n    showModal() {\n      if (this.isInModal) return;\n      Modal.glyphShowcasePanel.show({\n        name: this.text,\n        glyphSet: this.glyphs,\n        closeEvent: GAME_EVENT.GLYPH_SET_SAVE_CHANGE,\n        displaySacrifice: this.showSacrifice\n      });\n    },\n\n    // Necessary to force a re-render for the set name if the set itself changes\n    glyphHash() {\n      return Glyphs.hash(this.glyphs);\n    }\n\n  }\n};","map":{"version":3,"sources":["GlyphSetPreview.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport GlyphComponent from \"@/components/GlyphComponent\";\r\nimport GlyphSetName from \"@/components/GlyphSetName\";\r\n\r\nexport default {\r\n  name: \"GlyphSetPreview\",\r\n  components: {\r\n    GlyphComponent,\r\n    GlyphSetName\r\n  },\r\n  props: {\r\n    text: {\r\n      type: String,\r\n      required: false,\r\n      default: \"\"\r\n    },\r\n    textHidden: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    },\r\n    glyphs: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    ignoreModifiedLevel: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    },\r\n    flipTooltip: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    },\r\n    isInModal: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    },\r\n    showName: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: true\r\n    },\r\n    forceNameColor: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: true\r\n    },\r\n    showSacrifice: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    },\r\n    noneText: {\r\n      type: String,\r\n      required: false,\r\n      default: \"(No Glyphs equipped)\"\r\n    },\r\n    sort: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      realityGlyphBoost: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    orderedGlyphs() {\r\n      if (!this.sort) return this.glyphs;\r\n      const standardOrder = [\"reality\", \"effarig\", \"power\", \"infinity\", \"replication\", \"time\", \"dilation\",\r\n        \"cursed\", \"companion\"];\r\n      const order = Glyphs.copyForRecords(this.glyphs);\r\n      // Technically doesn't stable sort between glyphs of the same type, probably fine though\r\n      order.sort((a, b) => standardOrder.indexOf(a.type) - standardOrder.indexOf(b.type));\r\n      return order;\r\n    },\r\n  },\r\n  watch: {\r\n    glyphs() {\r\n      this.$recompute(\"orderedGlyphs\");\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      // There should only be one reality glyph; this picks one pseudo-randomly if multiple are cheated/glitched in\r\n      const realityGlyph = this.glyphs.filter(g => g.type === \"reality\")[0];\r\n      this.realityGlyphBoost = realityGlyph\r\n        ? GlyphEffects.realityglyphlevel.effect(realityGlyph.level)\r\n        : 0;\r\n    },\r\n    showModal() {\r\n      if (this.isInModal) return;\r\n      Modal.glyphShowcasePanel.show({\r\n        name: this.text,\r\n        glyphSet: this.glyphs,\r\n        closeEvent: GAME_EVENT.GLYPH_SET_SAVE_CHANGE,\r\n        displaySacrifice: this.showSacrifice,\r\n      });\r\n    },\r\n    // Necessary to force a re-render for the set name if the set itself changes\r\n    glyphHash() {\r\n      return Glyphs.hash(this.glyphs);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <span v-if=\"text && !textHidden\">\r\n      {{ text }}\r\n      <br>\r\n    </span>\r\n    <span\r\n      v-if=\"glyphs.length !== 0\"\r\n      :class=\"{ 'l-glyph-set-preview': !isInModal}\"\r\n      @click=\"showModal\"\r\n    >\r\n      <GlyphSetName\r\n        v-if=\"showName\"\r\n        :key=\"glyphHash()\"\r\n        :glyph-set=\"glyphs\"\r\n        :force-color=\"forceNameColor\"\r\n      />\r\n      <GlyphComponent\r\n        v-for=\"(g, idx) in orderedGlyphs\"\r\n        :key=\"idx\"\r\n        class=\"l-preview\"\r\n        :glyph=\"g\"\r\n        :show-sacrifice=\"showSacrifice\"\r\n        :draggable=\"false\"\r\n        :circular=\"true\"\r\n        :ignore-modified-level=\"ignoreModifiedLevel\"\r\n        :reality-glyph-boost=\"realityGlyphBoost\"\r\n        :flip-tooltip=\"flipTooltip\"\r\n        :is-in-modal=\"isInModal\"\r\n        size=\"3rem\"\r\n        :text-proportion=\"0.5\"\r\n        glow-blur=\"0.2rem\"\r\n        glow-spread=\"0.1rem\"\r\n      />\r\n    </span>\r\n    <span v-else>\r\n      <GlyphSetName\r\n        v-if=\"showName\"\r\n        :glyph-set=\"glyphs\"\r\n        :force-color=\"forceNameColor\"\r\n      />\r\n      {{ noneText }}\r\n    </span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.l-preview {\r\n  margin: 0.2rem;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components"},"metadata":{},"sourceType":"module"}