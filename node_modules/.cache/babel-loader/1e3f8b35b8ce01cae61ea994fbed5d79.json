{"ast":null,"code":"import CosmeticSetDropdown from \"@/components/modals/options/glyph-appearance/CosmeticSetDropdown\";\nimport ExpandingControlBox from \"@/components/ExpandingControlBox\";\nimport GlyphComponent from \"@/components/GlyphComponent\";\nimport ModalWrapperChoice from \"@/components/modals/ModalWrapperChoice\";\nexport default {\n  name: \"CosmeticSetChoiceModal\",\n  components: {\n    ModalWrapperChoice,\n    ExpandingControlBox,\n    CosmeticSetDropdown,\n    GlyphComponent\n  },\n\n  data() {\n    return {\n      initialSet: \"\",\n      currentSet: \"\"\n    };\n  },\n\n  computed: {\n    lockedSets() {\n      return GlyphAppearanceHandler.lockedSets;\n    },\n\n    cosmeticTypes() {\n      return CosmeticGlyphTypes.list.filter(t => t.isCosmetic && t.isUnlocked).map(t => t.id);\n    },\n\n    setName() {\n      var _this$currentSet$name, _this$currentSet;\n\n      return (_this$currentSet$name = (_this$currentSet = this.currentSet) === null || _this$currentSet === void 0 ? void 0 : _this$currentSet.name) !== null && _this$currentSet$name !== void 0 ? _this$currentSet$name : \"None Selected\";\n    },\n\n    setContents() {\n      const contents = []; // We explicitly pass in x => x as the formatting function in order to override END formatting; if we don't,\n      // this modal will show END symbols/colors when opened at game completion\n\n      if (this.symbols) contents.push(quantify(\"symbol\", this.symbols.length, 0, 0, x => x));\n      if (this.colors) contents.push(quantify(\"color scheme\", this.colors.length, 0, 0, x => x));\n      return contents.join(\" and \");\n    },\n\n    symbols() {\n      return this.currentSet.symbol;\n    },\n\n    colors() {\n      return this.currentSet.color;\n    },\n\n    glyphIconProps() {\n      return {\n        size: \"3rem\",\n        \"glow-blur\": \"0.3rem\",\n        \"glow-spread\": \"0.1rem\",\n        \"text-proportion\": 0.66\n      };\n    }\n\n  },\n\n  created() {\n    this.initialSet = GlyphAppearanceHandler.chosenFromModal;\n    GlyphAppearanceHandler.setInModal = this.initialSet;\n  },\n\n  methods: {\n    update() {\n      this.currentSet = GlyphAppearanceHandler.setInModal;\n    },\n\n    chooseSet() {\n      GlyphAppearanceHandler.chosenFromModal = this.currentSet;\n    },\n\n    cancelSet() {\n      GlyphAppearanceHandler.chosenFromModal = this.initialSet;\n      this.emitClose();\n    },\n\n    fakeGlyph(color) {\n      return {\n        type: \"power\",\n        strength: 1,\n        color\n      };\n    }\n\n  }\n};","map":{"version":3,"sources":["CosmeticSetChoiceModal.vue"],"names":[],"mappings":"AACA,OAAA,mBAAA,MAAA,kEAAA;AACA,OAAA,mBAAA,MAAA,kCAAA;AACA,OAAA,cAAA,MAAA,6BAAA;AACA,OAAA,kBAAA,MAAA,wCAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,wBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,kBADA;AAEA,IAAA,mBAFA;AAGA,IAAA,mBAHA;AAIA,IAAA;AAJA,GAFA;;AAQA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,UAAA,EAAA,EADA;AAEA,MAAA,UAAA,EAAA;AAFA,KAAA;AAIA,GAbA;;AAcA,EAAA,QAAA,EAAA;AACA,IAAA,UAAA,GAAA;AACA,aAAA,sBAAA,CAAA,UAAA;AACA,KAHA;;AAIA,IAAA,aAAA,GAAA;AACA,aAAA,kBAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,IAAA,CAAA,CAAA,UAAA,IAAA,CAAA,CAAA,UAAA,EAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA;AACA,KANA;;AAOA,IAAA,OAAA,GAAA;AAAA;;AACA,0DAAA,KAAA,UAAA,qDAAA,iBAAA,IAAA,yEAAA,eAAA;AACA,KATA;;AAUA,IAAA,WAAA,GAAA;AACA,YAAA,QAAA,GAAA,EAAA,CADA,CAEA;AACA;;AACA,UAAA,KAAA,OAAA,EAAA,QAAA,CAAA,IAAA,CAAA,QAAA,CAAA,QAAA,EAAA,KAAA,OAAA,CAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAAA;AACA,UAAA,KAAA,MAAA,EAAA,QAAA,CAAA,IAAA,CAAA,QAAA,CAAA,cAAA,EAAA,KAAA,MAAA,CAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAAA;AACA,aAAA,QAAA,CAAA,IAAA,CAAA,OAAA,CAAA;AACA,KAjBA;;AAkBA,IAAA,OAAA,GAAA;AACA,aAAA,KAAA,UAAA,CAAA,MAAA;AACA,KApBA;;AAqBA,IAAA,MAAA,GAAA;AACA,aAAA,KAAA,UAAA,CAAA,KAAA;AACA,KAvBA;;AAwBA,IAAA,cAAA,GAAA;AACA,aAAA;AACA,QAAA,IAAA,EAAA,MADA;AAEA,qBAAA,QAFA;AAGA,uBAAA,QAHA;AAIA,2BAAA;AAJA,OAAA;AAMA;;AA/BA,GAdA;;AA+CA,EAAA,OAAA,GAAA;AACA,SAAA,UAAA,GAAA,sBAAA,CAAA,eAAA;AACA,IAAA,sBAAA,CAAA,UAAA,GAAA,KAAA,UAAA;AACA,GAlDA;;AAmDA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,UAAA,GAAA,sBAAA,CAAA,UAAA;AACA,KAHA;;AAIA,IAAA,SAAA,GAAA;AACA,MAAA,sBAAA,CAAA,eAAA,GAAA,KAAA,UAAA;AACA,KANA;;AAOA,IAAA,SAAA,GAAA;AACA,MAAA,sBAAA,CAAA,eAAA,GAAA,KAAA,UAAA;AACA,WAAA,SAAA;AACA,KAVA;;AAWA,IAAA,SAAA,CAAA,KAAA,EAAA;AACA,aAAA;AACA,QAAA,IAAA,EAAA,OADA;AAEA,QAAA,QAAA,EAAA,CAFA;AAGA,QAAA;AAHA,OAAA;AAKA;;AAjBA;AAnDA,CAAA","sourcesContent":["<script>\r\nimport CosmeticSetDropdown from \"@/components/modals/options/glyph-appearance/CosmeticSetDropdown\";\r\nimport ExpandingControlBox from \"@/components/ExpandingControlBox\";\r\nimport GlyphComponent from \"@/components/GlyphComponent\";\r\nimport ModalWrapperChoice from \"@/components/modals/ModalWrapperChoice\";\r\n\r\nexport default {\r\n  name: \"CosmeticSetChoiceModal\",\r\n  components: {\r\n    ModalWrapperChoice,\r\n    ExpandingControlBox,\r\n    CosmeticSetDropdown,\r\n    GlyphComponent\r\n  },\r\n  data() {\r\n    return {\r\n      initialSet: \"\",\r\n      currentSet: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    lockedSets() {\r\n      return GlyphAppearanceHandler.lockedSets;\r\n    },\r\n    cosmeticTypes() {\r\n      return CosmeticGlyphTypes.list.filter(t => t.isCosmetic && t.isUnlocked).map(t => t.id);\r\n    },\r\n    setName() {\r\n      return this.currentSet?.name ?? \"None Selected\";\r\n    },\r\n    setContents() {\r\n      const contents = [];\r\n      // We explicitly pass in x => x as the formatting function in order to override END formatting; if we don't,\r\n      // this modal will show END symbols/colors when opened at game completion\r\n      if (this.symbols) contents.push(quantify(\"symbol\", this.symbols.length, 0, 0, x => x));\r\n      if (this.colors) contents.push(quantify(\"color scheme\", this.colors.length, 0, 0, x => x));\r\n      return contents.join(\" and \");\r\n    },\r\n    symbols() {\r\n      return this.currentSet.symbol;\r\n    },\r\n    colors() {\r\n      return this.currentSet.color;\r\n    },\r\n    glyphIconProps() {\r\n      return {\r\n        size: \"3rem\",\r\n        \"glow-blur\": \"0.3rem\",\r\n        \"glow-spread\": \"0.1rem\",\r\n        \"text-proportion\": 0.66,\r\n      };\r\n    },\r\n  },\r\n  created() {\r\n    this.initialSet = GlyphAppearanceHandler.chosenFromModal;\r\n    GlyphAppearanceHandler.setInModal = this.initialSet;\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.currentSet = GlyphAppearanceHandler.setInModal;\r\n    },\r\n    chooseSet() {\r\n      GlyphAppearanceHandler.chosenFromModal = this.currentSet;\r\n    },\r\n    cancelSet() {\r\n      GlyphAppearanceHandler.chosenFromModal = this.initialSet;\r\n      this.emitClose();\r\n    },\r\n    fakeGlyph(color) {\r\n      return {\r\n        type: \"power\",\r\n        strength: 1,\r\n        color,\r\n      };\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapperChoice\r\n    :cancel-fn=\"cancelSet\"\r\n    @confirm=\"chooseSet\"\r\n  >\r\n    <template #header>\r\n      Choose a Glyph Cosmetic Set\r\n    </template>\r\n    <div class=\"c-center\">\r\n      <ExpandingControlBox\r\n        class=\"o-primary-btn c-dropdown-btn\"\r\n      >\r\n        <template #header>\r\n          <div class=\"c-dropdown-header\">\r\n            ▼ Available Sets ▼\r\n            <br>\r\n            {{ setName }}\r\n          </div>\r\n        </template>\r\n        <template #dropdown>\r\n          <CosmeticSetDropdown />\r\n        </template>\r\n      </ExpandingControlBox>\r\n      <div v-if=\"currentSet\">\r\n        The \"{{ currentSet.name }}\" Set contains the following {{ setContents }}:\r\n        <br>\r\n        <span\r\n          v-for=\"symbol of symbols\"\r\n          :key=\"symbol\"\r\n          class=\"o-single-symbol\"\r\n        >\r\n          {{ symbol }}\r\n        </span>\r\n        <br>\r\n        <span\r\n          v-for=\"color of colors\"\r\n          :key=\"color\"\r\n          class=\"o-single-glyph\"\r\n        >\r\n          <GlyphComponent\r\n            v-bind=\"glyphIconProps\"\r\n            :glyph=\"fakeGlyph(color)\"\r\n          />\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </ModalWrapperChoice>\r\n</template>\r\n\r\n<style scoped>\r\n.c-center {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 38rem;\r\n  align-items: center;\r\n}\r\n\r\n.t-s12 .c-center {\r\n  width: 50rem;\r\n  text-align: center;\r\n}\r\n\r\n.c-dropdown-btn {\r\n  width: 24rem;\r\n  margin: 0.3rem;\r\n  padding: 0;\r\n}\r\n\r\n.c-dropdown-header {\r\n  height: 5rem;\r\n  padding: 0.5rem;\r\n  user-select: none;\r\n}\r\n\r\n.o-single-symbol {\r\n  font-size: 3rem;\r\n}\r\n\r\n.o-single-glyph {\r\n  padding: 0.5rem;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/modals/options/glyph-appearance"},"metadata":{},"sourceType":"module"}