{"ast":null,"code":"export class PlayerProgress {\n  constructor(player) {\n    this._player = player;\n  }\n\n  get isInfinityUnlocked() {\n    // Infinity count data is stored in either player.infinitied or player.infinities based on if the save is before\n    // or after the reality update, but this also gets checked in the import modal before any migration code is run.\n    // Thus, it needs to manually support \"before\" and \"after\" states by converting both to Decimal.\n    const infinityData = this._player.infinitied ? this._player.infinitied : this._player.infinities;\n    return new Decimal(infinityData).gt(0) || this.isEternityUnlocked;\n  }\n\n  get isEternityUnlocked() {\n    // Similarly to above, player.eternities is a number pre-reality update and a Decimal post-reality update\n    return new Decimal(this._player.eternities).gt(0) || this.isRealityUnlocked;\n  }\n\n  get isRealityUnlocked() {\n    return this._player.realities > 0;\n  }\n\n  get hasFullCompletion() {\n    var _this$_player$records;\n\n    return ((_this$_player$records = this._player.records) === null || _this$_player$records === void 0 ? void 0 : _this$_player$records.fullGameCompletions) > 0;\n  }\n\n  static get current() {\n    return new PlayerProgress(player);\n  }\n\n  static of(player) {\n    return new PlayerProgress(player);\n  }\n\n  static infinityUnlocked() {\n    return PlayerProgress.current.isInfinityUnlocked;\n  }\n\n  static hasBroken() {\n    return player.break || this.isEternityUnlocked || this.isRealityUnlocked;\n  }\n\n  static replicantiUnlocked() {\n    return Replicanti.areUnlocked || this.isEternityUnlocked;\n  }\n\n  static eternityUnlocked() {\n    return PlayerProgress.current.isEternityUnlocked;\n  }\n\n  static dilationUnlocked() {\n    return TimeStudy.dilation.isBought;\n  }\n\n  static realityUnlocked() {\n    return PlayerProgress.current.isRealityUnlocked;\n  }\n\n  static seenAlteredSpeed() {\n    const ec12 = EternityChallenge(12);\n    return this.realityUnlocked() || ec12.completions > 0 || ec12.isRunning;\n  }\n\n  static challengeCompleted() {\n    return NormalChallenges.all.slice(1).some(c => c.isCompleted);\n  }\n\n  static infinityChallengeCompleted() {\n    return InfinityChallenges.all.some(c => c.isCompleted);\n  }\n\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/player-progress.js"],"names":["PlayerProgress","constructor","player","_player","isInfinityUnlocked","infinityData","infinitied","infinities","Decimal","gt","isEternityUnlocked","eternities","isRealityUnlocked","realities","hasFullCompletion","records","fullGameCompletions","current","of","infinityUnlocked","hasBroken","break","replicantiUnlocked","Replicanti","areUnlocked","eternityUnlocked","dilationUnlocked","TimeStudy","dilation","isBought","realityUnlocked","seenAlteredSpeed","ec12","EternityChallenge","completions","isRunning","challengeCompleted","NormalChallenges","all","slice","some","c","isCompleted","infinityChallengeCompleted","InfinityChallenges"],"mappings":"AAAA,OAAO,MAAMA,cAAN,CAAqB;AAC1BC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,SAAKC,OAAL,GAAeD,MAAf;AACD;;AAEqB,MAAlBE,kBAAkB,GAAG;AACvB;AACA;AACA;AACA,UAAMC,YAAY,GAAG,KAAKF,OAAL,CAAaG,UAAb,GAA0B,KAAKH,OAAL,CAAaG,UAAvC,GAAoD,KAAKH,OAAL,CAAaI,UAAtF;AACA,WAAO,IAAIC,OAAJ,CAAYH,YAAZ,EAA0BI,EAA1B,CAA6B,CAA7B,KAAmC,KAAKC,kBAA/C;AACD;;AAEqB,MAAlBA,kBAAkB,GAAG;AACvB;AACA,WAAO,IAAIF,OAAJ,CAAY,KAAKL,OAAL,CAAaQ,UAAzB,EAAqCF,EAArC,CAAwC,CAAxC,KAA8C,KAAKG,iBAA1D;AACD;;AAEoB,MAAjBA,iBAAiB,GAAG;AACtB,WAAO,KAAKT,OAAL,CAAaU,SAAb,GAAyB,CAAhC;AACD;;AAEoB,MAAjBC,iBAAiB,GAAG;AAAA;;AACtB,WAAO,+BAAKX,OAAL,CAAaY,OAAb,gFAAsBC,mBAAtB,IAA4C,CAAnD;AACD;;AAEiB,aAAPC,OAAO,GAAG;AACnB,WAAO,IAAIjB,cAAJ,CAAmBE,MAAnB,CAAP;AACD;;AAEQ,SAAFgB,EAAE,CAAChB,MAAD,EAAS;AAChB,WAAO,IAAIF,cAAJ,CAAmBE,MAAnB,CAAP;AACD;;AAEsB,SAAhBiB,gBAAgB,GAAG;AACxB,WAAOnB,cAAc,CAACiB,OAAf,CAAuBb,kBAA9B;AACD;;AAEe,SAATgB,SAAS,GAAG;AACjB,WAAOlB,MAAM,CAACmB,KAAP,IAAgB,KAAKX,kBAArB,IAA2C,KAAKE,iBAAvD;AACD;;AAEwB,SAAlBU,kBAAkB,GAAG;AAC1B,WAAOC,UAAU,CAACC,WAAX,IAA0B,KAAKd,kBAAtC;AACD;;AAEsB,SAAhBe,gBAAgB,GAAG;AACxB,WAAOzB,cAAc,CAACiB,OAAf,CAAuBP,kBAA9B;AACD;;AAEsB,SAAhBgB,gBAAgB,GAAG;AACxB,WAAOC,SAAS,CAACC,QAAV,CAAmBC,QAA1B;AACD;;AAEqB,SAAfC,eAAe,GAAG;AACvB,WAAO9B,cAAc,CAACiB,OAAf,CAAuBL,iBAA9B;AACD;;AAEsB,SAAhBmB,gBAAgB,GAAG;AACxB,UAAMC,IAAI,GAAGC,iBAAiB,CAAC,EAAD,CAA9B;AACA,WAAO,KAAKH,eAAL,MAA0BE,IAAI,CAACE,WAAL,GAAmB,CAA7C,IAAkDF,IAAI,CAACG,SAA9D;AACD;;AAEwB,SAAlBC,kBAAkB,GAAG;AAC1B,WAAOC,gBAAgB,CAACC,GAAjB,CAAqBC,KAArB,CAA2B,CAA3B,EAA8BC,IAA9B,CAAmCC,CAAC,IAAIA,CAAC,CAACC,WAA1C,CAAP;AACD;;AAEgC,SAA1BC,0BAA0B,GAAG;AAClC,WAAOC,kBAAkB,CAACN,GAAnB,CAAuBE,IAAvB,CAA4BC,CAAC,IAAIA,CAAC,CAACC,WAAnC,CAAP;AACD;;AArEyB","sourcesContent":["export class PlayerProgress {\r\n  constructor(player) {\r\n    this._player = player;\r\n  }\r\n\r\n  get isInfinityUnlocked() {\r\n    // Infinity count data is stored in either player.infinitied or player.infinities based on if the save is before\r\n    // or after the reality update, but this also gets checked in the import modal before any migration code is run.\r\n    // Thus, it needs to manually support \"before\" and \"after\" states by converting both to Decimal.\r\n    const infinityData = this._player.infinitied ? this._player.infinitied : this._player.infinities;\r\n    return new Decimal(infinityData).gt(0) || this.isEternityUnlocked;\r\n  }\r\n\r\n  get isEternityUnlocked() {\r\n    // Similarly to above, player.eternities is a number pre-reality update and a Decimal post-reality update\r\n    return new Decimal(this._player.eternities).gt(0) || this.isRealityUnlocked;\r\n  }\r\n\r\n  get isRealityUnlocked() {\r\n    return this._player.realities > 0;\r\n  }\r\n\r\n  get hasFullCompletion() {\r\n    return this._player.records?.fullGameCompletions > 0;\r\n  }\r\n\r\n  static get current() {\r\n    return new PlayerProgress(player);\r\n  }\r\n\r\n  static of(player) {\r\n    return new PlayerProgress(player);\r\n  }\r\n\r\n  static infinityUnlocked() {\r\n    return PlayerProgress.current.isInfinityUnlocked;\r\n  }\r\n\r\n  static hasBroken() {\r\n    return player.break || this.isEternityUnlocked || this.isRealityUnlocked;\r\n  }\r\n\r\n  static replicantiUnlocked() {\r\n    return Replicanti.areUnlocked || this.isEternityUnlocked;\r\n  }\r\n\r\n  static eternityUnlocked() {\r\n    return PlayerProgress.current.isEternityUnlocked;\r\n  }\r\n\r\n  static dilationUnlocked() {\r\n    return TimeStudy.dilation.isBought;\r\n  }\r\n\r\n  static realityUnlocked() {\r\n    return PlayerProgress.current.isRealityUnlocked;\r\n  }\r\n\r\n  static seenAlteredSpeed() {\r\n    const ec12 = EternityChallenge(12);\r\n    return this.realityUnlocked() || ec12.completions > 0 || ec12.isRunning;\r\n  }\r\n\r\n  static challengeCompleted() {\r\n    return NormalChallenges.all.slice(1).some(c => c.isCompleted);\r\n  }\r\n\r\n  static infinityChallengeCompleted() {\r\n    return InfinityChallenges.all.some(c => c.isCompleted);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}