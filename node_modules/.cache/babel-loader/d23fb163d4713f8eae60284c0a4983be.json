{"ast":null,"code":"import { RebuyableMechanicState, SetPurchasableMechanicState } from \"./game-mechanics\";\nimport { DC } from \"./constants\";\nimport FullScreenAnimationHandler from \"./full-screen-animation-handler\";\nimport { SpeedrunMilestones } from \"./speedrun\";\nexport function animateAndDilate() {\n  FullScreenAnimationHandler.display(\"a-dilate\", 2);\n  setTimeout(() => {\n    startDilatedEternity();\n    if (Pelle.isDoomed) PelleStrikes.dilation.trigger();\n  }, 1000);\n} // eslint-disable-next-line no-empty-function\n\nexport function animateAndUndilate(callback) {\n  FullScreenAnimationHandler.display(\"a-undilate\", 2);\n  setTimeout(() => {\n    eternity(false, false, {\n      switchingDilation: true\n    });\n    if (callback) callback();\n  }, 1000);\n}\nexport function startDilatedEternityRequest() {\n  if (!PlayerProgress.dilationUnlocked() || Pelle.isDoomed && !Pelle.canDilateInPelle) return;\n  const playAnimation = player.options.animations.dilation && !FullScreenAnimationHandler.isDisplaying;\n\n  if (player.dilation.active) {\n    if (player.options.confirmations.dilation) {\n      Modal.exitDilation.show();\n    } else if (playAnimation) {\n      animateAndUndilate();\n    } else {\n      eternity(false, false, {\n        switchingDilation: true\n      });\n    }\n  } else if (player.options.confirmations.dilation) {\n    Modal.enterDilation.show();\n  } else if (playAnimation) {\n    animateAndDilate();\n  } else {\n    startDilatedEternity();\n  }\n}\nexport function startDilatedEternity(auto) {\n  if (!PlayerProgress.dilationUnlocked()) return false;\n  if (GameEnd.creditsEverClosed) return false;\n\n  if (player.dilation.active) {\n    eternity(false, auto, {\n      switchingDilation: true\n    });\n    return false;\n  }\n\n  Achievement(136).unlock();\n  eternity(false, auto, {\n    switchingDilation: true\n  });\n  player.dilation.active = true;\n  if (Pelle.isDoomed) PelleStrikes.dilation.trigger();\n  return true;\n}\nconst DIL_UPG_NAMES = [null, \"dtGain\", \"galaxyThreshold\", \"tachyonGain\", \"doubleGalaxies\", \"tdMultReplicanti\", \"ndMultDT\", \"ipMultDT\", \"timeStudySplit\", \"dilationPenalty\", \"ttGenerator\", \"dtGainPelle\", \"galaxyMultiplier\", \"tickspeedPower\", \"galaxyThresholdPelle\", \"flatDilationMult\"];\nexport function buyDilationUpgrade(id, bulk = 1) {\n  if (GameEnd.creditsEverClosed) return false; // Upgrades 1-3 are rebuyable, and can be automatically bought in bulk with a perk shop upgrade\n\n  const upgrade = DilationUpgrade[DIL_UPG_NAMES[id]];\n\n  if (id > 3 && id < 11) {\n    if (player.dilation.upgrades.has(id)) return false;\n    if (!Currency.dilatedTime.purchase(upgrade.cost)) return false;\n    player.dilation.upgrades.add(id);\n    if (id === 4) player.dilation.totalTachyonGalaxies *= 2;\n  } else {\n    const upgAmount = player.dilation.rebuyables[id];\n    if (Currency.dilatedTime.lt(upgrade.cost) || upgAmount >= upgrade.config.purchaseCap) return false;\n    let buying = Decimal.affordGeometricSeries(Currency.dilatedTime.value, upgrade.config.initialCost, upgrade.config.increment, upgAmount).toNumber();\n    buying = Math.clampMax(buying, bulk);\n    buying = Math.clampMax(buying, upgrade.config.purchaseCap - upgAmount);\n    const cost = Decimal.sumGeometricSeries(buying, upgrade.config.initialCost, upgrade.config.increment, upgAmount);\n    Currency.dilatedTime.subtract(cost);\n    player.dilation.rebuyables[id] += buying;\n\n    if (id === 2) {\n      if (!Perk.bypassTGReset.isBought || Pelle.isDoomed) Currency.dilatedTime.reset();\n      player.dilation.nextThreshold = DC.E3;\n      player.dilation.baseTachyonGalaxies = 0;\n      player.dilation.totalTachyonGalaxies = 0;\n    }\n\n    if (id === 3 && !Pelle.isDisabled(\"tpMults\")) {\n      let retroactiveTPFactor = Effects.max(1, Perk.retroactiveTP1, Perk.retroactiveTP2, Perk.retroactiveTP3, Perk.retroactiveTP4);\n\n      if (Enslaved.isRunning) {\n        retroactiveTPFactor = Math.pow(retroactiveTPFactor, Enslaved.tachyonNerf);\n      }\n\n      Currency.tachyonParticles.multiply(Decimal.pow(retroactiveTPFactor, buying));\n    }\n  }\n\n  return true;\n}\nexport function getTachyonGalaxyMult(thresholdUpgrade) {\n  // This specifically needs to be an undefined check because sometimes thresholdUpgrade is zero\n  const upgrade = thresholdUpgrade === undefined ? DilationUpgrade.galaxyThreshold.effectValue : thresholdUpgrade;\n  const thresholdMult = 3.65 * upgrade + 0.35;\n  const glyphEffect = getAdjustedGlyphEffect(\"dilationgalaxyThreshold\");\n  const glyphReduction = glyphEffect === 0 ? 1 : glyphEffect;\n  const power = DilationUpgrade.galaxyThresholdPelle.canBeApplied ? DilationUpgrade.galaxyThresholdPelle.effectValue : 1;\n  return (1 + thresholdMult * glyphReduction) ** power;\n}\nexport function getDilationGainPerSecond() {\n  if (Pelle.isDoomed) {\n    const tachyonEffect = Currency.tachyonParticles.value.pow(PelleRifts.paradox.milestones[1].effectOrDefault(1));\n    return new Decimal(tachyonEffect).timesEffectsOf(DilationUpgrade.dtGain, DilationUpgrade.dtGainPelle, DilationUpgrade.flatDilationMult).times(ShopPurchase.dilatedTimePurchases.currentMult ** 0.5).times(Pelle.specialGlyphEffect.dilation).div(1e5);\n  }\n\n  let dtRate = new Decimal(Currency.tachyonParticles.value).timesEffectsOf(DilationUpgrade.dtGain, Achievement(132), Achievement(137), RealityUpgrade(1), AlchemyResource.dilation, Ra.unlocks.continuousTTBoost.effects.dilatedTime, Ra.unlocks.peakGamespeedDT);\n  dtRate = dtRate.times(getAdjustedGlyphEffect(\"dilationDT\"));\n  dtRate = dtRate.times(ShopPurchase.dilatedTimePurchases.currentMult);\n  dtRate = dtRate.times(Math.clampMin(Decimal.log10(Replicanti.amount) * getAdjustedGlyphEffect(\"replicationdtgain\"), 1));\n  if (Enslaved.isRunning && !dtRate.eq(0)) dtRate = Decimal.pow10(Math.pow(dtRate.plus(1).log10(), 0.85) - 1);\n  if (V.isRunning) dtRate = dtRate.pow(0.5);\n  return dtRate;\n}\nexport function tachyonGainMultiplier() {\n  if (Pelle.isDisabled(\"tpMults\")) return new Decimal(1);\n  const pow = Enslaved.isRunning ? Enslaved.tachyonNerf : 1;\n  return DC.D1.timesEffectsOf(DilationUpgrade.tachyonGain, GlyphSacrifice.dilation, Achievement(132), RealityUpgrade(4), RealityUpgrade(8), RealityUpgrade(15)).pow(pow);\n}\nexport function rewardTP() {\n  Currency.tachyonParticles.bumpTo(getTP(player.records.thisEternity.maxAM, true));\n  player.dilation.lastEP = Currency.eternityPoints.value;\n} // This function exists to apply Teresa-25 in a consistent way; TP multipliers can be very volatile and\n// applying the reward only once upon unlock promotes min-maxing the upgrade by unlocking dilation with\n// TP multipliers as large as possible. Applying the reward to a base TP value and letting the multipliers\n// act dynamically on this fixed base value elsewhere solves that issue\n\nexport function getBaseTP(antimatter, requireEternity) {\n  if (!Player.canEternity && requireEternity) return DC.D0;\n  const am = isInCelestialReality() || Pelle.isDoomed ? antimatter : Ra.unlocks.unlockDilationStartingTP.effectOrDefault(antimatter);\n  let baseTP = Decimal.pow(Decimal.log10(am) / 400, 1.5);\n  if (Enslaved.isRunning) baseTP = baseTP.pow(Enslaved.tachyonNerf);\n  return baseTP;\n} // Returns the TP that would be gained this run\n\nexport function getTP(antimatter, requireEternity) {\n  return getBaseTP(antimatter, requireEternity).times(tachyonGainMultiplier());\n} // Returns the amount of TP gained, subtracting out current TP; used for displaying gained TP, text on the\n// \"exit dilation\" button (saying whether you need more antimatter), and in last 10 eternities\n\nexport function getTachyonGain(requireEternity) {\n  return getTP(Currency.antimatter.value, requireEternity).minus(Currency.tachyonParticles.value).clampMin(0);\n} // Returns the minimum antimatter needed in order to gain more TP; used only for display purposes\n\nexport function getTachyonReq() {\n  let effectiveTP = Currency.tachyonParticles.value.dividedBy(tachyonGainMultiplier());\n  if (Enslaved.isRunning) effectiveTP = effectiveTP.pow(1 / Enslaved.tachyonNerf);\n  return Decimal.pow10(effectiveTP.times(Math.pow(400, 1.5)).pow(2 / 3).toNumber());\n}\nexport function getDilationTimeEstimate(goal) {\n  const currentDTGain = getDilationGainPerSecond();\n  const rawDTGain = currentDTGain.times(getGameSpeedupForDisplay());\n  const currentDT = Currency.dilatedTime.value;\n  if (currentDTGain.eq(0)) return null;\n\n  if (PelleRifts.paradox.isActive) {\n    const drain = Pelle.riftDrainPercent;\n    const goalNetRate = rawDTGain.minus(Decimal.multiply(goal, drain));\n    const currNetRate = rawDTGain.minus(currentDT.times(drain));\n    if (goalNetRate.lt(0)) return \"Never affordable due to Rift drain\";\n    return TimeSpan.fromSeconds(currNetRate.div(goalNetRate).ln() / drain).toTimeEstimate();\n  }\n\n  return TimeSpan.fromSeconds(Decimal.sub(goal, currentDT).div(rawDTGain).toNumber()).toTimeEstimate();\n}\nexport function dilatedValueOf(value) {\n  const log10 = value.log10();\n  const dilationPenalty = 0.75 * Effects.product(DilationUpgrade.dilationPenalty);\n  return Decimal.pow10(Math.sign(log10) * Math.pow(Math.abs(log10), dilationPenalty));\n}\n\nclass DilationUpgradeState extends SetPurchasableMechanicState {\n  get currency() {\n    return Currency.dilatedTime;\n  }\n\n  get set() {\n    return player.dilation.upgrades;\n  }\n\n  onPurchased() {\n    if (this.id === 4) player.dilation.totalTachyonGalaxies *= 2;\n    if (this.id === 10) SpeedrunMilestones(15).tryComplete();\n  }\n\n}\n\nclass RebuyableDilationUpgradeState extends RebuyableMechanicState {\n  get currency() {\n    return Currency.dilatedTime;\n  }\n\n  get boughtAmount() {\n    return player.dilation.rebuyables[this.id];\n  }\n\n  set boughtAmount(value) {\n    player.dilation.rebuyables[this.id] = value;\n  }\n\n  get isCapped() {\n    return this.config.reachedCap();\n  }\n\n  purchase(bulk) {\n    buyDilationUpgrade(this.config.id, bulk);\n  }\n\n}\n\nexport const DilationUpgrade = mapGameDataToObject(GameDatabase.eternity.dilation, config => config.rebuyable ? new RebuyableDilationUpgradeState(config) : new DilationUpgradeState(config));\nexport const DilationUpgrades = {\n  rebuyable: [DilationUpgrade.dtGain, DilationUpgrade.galaxyThreshold, DilationUpgrade.tachyonGain],\n  fromId: id => DilationUpgrade.all.find(x => x.id === Number(id))\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/dilation.js"],"names":["RebuyableMechanicState","SetPurchasableMechanicState","DC","FullScreenAnimationHandler","SpeedrunMilestones","animateAndDilate","display","setTimeout","startDilatedEternity","Pelle","isDoomed","PelleStrikes","dilation","trigger","animateAndUndilate","callback","eternity","switchingDilation","startDilatedEternityRequest","PlayerProgress","dilationUnlocked","canDilateInPelle","playAnimation","player","options","animations","isDisplaying","active","confirmations","Modal","exitDilation","show","enterDilation","auto","GameEnd","creditsEverClosed","Achievement","unlock","DIL_UPG_NAMES","buyDilationUpgrade","id","bulk","upgrade","DilationUpgrade","upgrades","has","Currency","dilatedTime","purchase","cost","add","totalTachyonGalaxies","upgAmount","rebuyables","lt","config","purchaseCap","buying","Decimal","affordGeometricSeries","value","initialCost","increment","toNumber","Math","clampMax","sumGeometricSeries","subtract","Perk","bypassTGReset","isBought","reset","nextThreshold","E3","baseTachyonGalaxies","isDisabled","retroactiveTPFactor","Effects","max","retroactiveTP1","retroactiveTP2","retroactiveTP3","retroactiveTP4","Enslaved","isRunning","pow","tachyonNerf","tachyonParticles","multiply","getTachyonGalaxyMult","thresholdUpgrade","undefined","galaxyThreshold","effectValue","thresholdMult","glyphEffect","getAdjustedGlyphEffect","glyphReduction","power","galaxyThresholdPelle","canBeApplied","getDilationGainPerSecond","tachyonEffect","PelleRifts","paradox","milestones","effectOrDefault","timesEffectsOf","dtGain","dtGainPelle","flatDilationMult","times","ShopPurchase","dilatedTimePurchases","currentMult","specialGlyphEffect","div","dtRate","RealityUpgrade","AlchemyResource","Ra","unlocks","continuousTTBoost","effects","peakGamespeedDT","clampMin","log10","Replicanti","amount","eq","pow10","plus","V","tachyonGainMultiplier","D1","tachyonGain","GlyphSacrifice","rewardTP","bumpTo","getTP","records","thisEternity","maxAM","lastEP","eternityPoints","getBaseTP","antimatter","requireEternity","Player","canEternity","D0","am","isInCelestialReality","unlockDilationStartingTP","baseTP","getTachyonGain","minus","getTachyonReq","effectiveTP","dividedBy","getDilationTimeEstimate","goal","currentDTGain","rawDTGain","getGameSpeedupForDisplay","currentDT","isActive","drain","riftDrainPercent","goalNetRate","currNetRate","TimeSpan","fromSeconds","ln","toTimeEstimate","sub","dilatedValueOf","dilationPenalty","product","sign","abs","DilationUpgradeState","currency","set","onPurchased","tryComplete","RebuyableDilationUpgradeState","boughtAmount","isCapped","reachedCap","mapGameDataToObject","GameDatabase","rebuyable","DilationUpgrades","fromId","all","find","x","Number"],"mappings":"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","sourcesContent":["import { RebuyableMechanicState, SetPurchasableMechanicState } from \"./game-mechanics\";\r\nimport { DC } from \"./constants\";\r\nimport FullScreenAnimationHandler from \"./full-screen-animation-handler\";\r\nimport { SpeedrunMilestones } from \"./speedrun\";\r\n\r\nexport function animateAndDilate() {\r\n  FullScreenAnimationHandler.display(\"a-dilate\", 2);\r\n  setTimeout(() => {\r\n    startDilatedEternity();\r\n    if (Pelle.isDoomed) PelleStrikes.dilation.trigger();\r\n  }, 1000);\r\n}\r\n\r\n// eslint-disable-next-line no-empty-function\r\nexport function animateAndUndilate(callback) {\r\n  FullScreenAnimationHandler.display(\"a-undilate\", 2);\r\n  setTimeout(() => {\r\n    eternity(false, false, { switchingDilation: true });\r\n    if (callback) callback();\r\n  }, 1000);\r\n}\r\n\r\nexport function startDilatedEternityRequest() {\r\n  if (!PlayerProgress.dilationUnlocked() || (Pelle.isDoomed && !Pelle.canDilateInPelle)) return;\r\n  const playAnimation = player.options.animations.dilation && !FullScreenAnimationHandler.isDisplaying;\r\n  if (player.dilation.active) {\r\n    if (player.options.confirmations.dilation) {\r\n      Modal.exitDilation.show();\r\n    } else if (playAnimation) {\r\n      animateAndUndilate();\r\n    } else {\r\n      eternity(false, false, { switchingDilation: true });\r\n    }\r\n  } else if (player.options.confirmations.dilation) {\r\n    Modal.enterDilation.show();\r\n  } else if (playAnimation) {\r\n    animateAndDilate();\r\n  } else {\r\n    startDilatedEternity();\r\n  }\r\n}\r\n\r\nexport function startDilatedEternity(auto) {\r\n  if (!PlayerProgress.dilationUnlocked()) return false;\r\n  if (GameEnd.creditsEverClosed) return false;\r\n  if (player.dilation.active) {\r\n    eternity(false, auto, { switchingDilation: true });\r\n    return false;\r\n  }\r\n  Achievement(136).unlock();\r\n  eternity(false, auto, { switchingDilation: true });\r\n  player.dilation.active = true;\r\n  if (Pelle.isDoomed) PelleStrikes.dilation.trigger();\r\n  return true;\r\n}\r\n\r\nconst DIL_UPG_NAMES = [\r\n  null, \"dtGain\", \"galaxyThreshold\", \"tachyonGain\", \"doubleGalaxies\", \"tdMultReplicanti\",\r\n  \"ndMultDT\", \"ipMultDT\", \"timeStudySplit\", \"dilationPenalty\", \"ttGenerator\",\r\n  \"dtGainPelle\", \"galaxyMultiplier\", \"tickspeedPower\", \"galaxyThresholdPelle\", \"flatDilationMult\"\r\n];\r\n\r\nexport function buyDilationUpgrade(id, bulk = 1) {\r\n  if (GameEnd.creditsEverClosed) return false;\r\n  // Upgrades 1-3 are rebuyable, and can be automatically bought in bulk with a perk shop upgrade\r\n  const upgrade = DilationUpgrade[DIL_UPG_NAMES[id]];\r\n  if (id > 3 && id < 11) {\r\n    if (player.dilation.upgrades.has(id)) return false;\r\n    if (!Currency.dilatedTime.purchase(upgrade.cost)) return false;\r\n    player.dilation.upgrades.add(id);\r\n    if (id === 4) player.dilation.totalTachyonGalaxies *= 2;\r\n  } else {\r\n    const upgAmount = player.dilation.rebuyables[id];\r\n    if (Currency.dilatedTime.lt(upgrade.cost) || upgAmount >= upgrade.config.purchaseCap) return false;\r\n\r\n    let buying = Decimal.affordGeometricSeries(Currency.dilatedTime.value,\r\n      upgrade.config.initialCost, upgrade.config.increment, upgAmount).toNumber();\r\n    buying = Math.clampMax(buying, bulk);\r\n    buying = Math.clampMax(buying, upgrade.config.purchaseCap - upgAmount);\r\n    const cost = Decimal.sumGeometricSeries(buying, upgrade.config.initialCost, upgrade.config.increment, upgAmount);\r\n    Currency.dilatedTime.subtract(cost);\r\n    player.dilation.rebuyables[id] += buying;\r\n    if (id === 2) {\r\n      if (!Perk.bypassTGReset.isBought || Pelle.isDoomed) Currency.dilatedTime.reset();\r\n      player.dilation.nextThreshold = DC.E3;\r\n      player.dilation.baseTachyonGalaxies = 0;\r\n      player.dilation.totalTachyonGalaxies = 0;\r\n    }\r\n\r\n    if (id === 3 && !Pelle.isDisabled(\"tpMults\")) {\r\n      let retroactiveTPFactor = Effects.max(\r\n        1,\r\n        Perk.retroactiveTP1,\r\n        Perk.retroactiveTP2,\r\n        Perk.retroactiveTP3,\r\n        Perk.retroactiveTP4\r\n      );\r\n      if (Enslaved.isRunning) {\r\n        retroactiveTPFactor = Math.pow(retroactiveTPFactor, Enslaved.tachyonNerf);\r\n      }\r\n      Currency.tachyonParticles.multiply(Decimal.pow(retroactiveTPFactor, buying));\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function getTachyonGalaxyMult(thresholdUpgrade) {\r\n  // This specifically needs to be an undefined check because sometimes thresholdUpgrade is zero\r\n  const upgrade = thresholdUpgrade === undefined ? DilationUpgrade.galaxyThreshold.effectValue : thresholdUpgrade;\r\n  const thresholdMult = 3.65 * upgrade + 0.35;\r\n  const glyphEffect = getAdjustedGlyphEffect(\"dilationgalaxyThreshold\");\r\n  const glyphReduction = glyphEffect === 0 ? 1 : glyphEffect;\r\n  const power = DilationUpgrade.galaxyThresholdPelle.canBeApplied\r\n    ? DilationUpgrade.galaxyThresholdPelle.effectValue : 1;\r\n  return (1 + thresholdMult * glyphReduction) ** power;\r\n}\r\n\r\nexport function getDilationGainPerSecond() {\r\n  if (Pelle.isDoomed) {\r\n    const tachyonEffect = Currency.tachyonParticles.value.pow(PelleRifts.paradox.milestones[1].effectOrDefault(1));\r\n    return new Decimal(tachyonEffect)\r\n      .timesEffectsOf(DilationUpgrade.dtGain, DilationUpgrade.dtGainPelle, DilationUpgrade.flatDilationMult)\r\n      .times(ShopPurchase.dilatedTimePurchases.currentMult ** 0.5)\r\n      .times(Pelle.specialGlyphEffect.dilation).div(1e5);\r\n  }\r\n  let dtRate = new Decimal(Currency.tachyonParticles.value)\r\n    .timesEffectsOf(\r\n      DilationUpgrade.dtGain,\r\n      Achievement(132),\r\n      Achievement(137),\r\n      RealityUpgrade(1),\r\n      AlchemyResource.dilation,\r\n      Ra.unlocks.continuousTTBoost.effects.dilatedTime,\r\n      Ra.unlocks.peakGamespeedDT\r\n    );\r\n  dtRate = dtRate.times(getAdjustedGlyphEffect(\"dilationDT\"));\r\n  dtRate = dtRate.times(ShopPurchase.dilatedTimePurchases.currentMult);\r\n  dtRate = dtRate.times(\r\n    Math.clampMin(Decimal.log10(Replicanti.amount) * getAdjustedGlyphEffect(\"replicationdtgain\"), 1));\r\n  if (Enslaved.isRunning && !dtRate.eq(0)) dtRate = Decimal.pow10(Math.pow(dtRate.plus(1).log10(), 0.85) - 1);\r\n  if (V.isRunning) dtRate = dtRate.pow(0.5);\r\n  return dtRate;\r\n}\r\n\r\nexport function tachyonGainMultiplier() {\r\n  if (Pelle.isDisabled(\"tpMults\")) return new Decimal(1);\r\n  const pow = Enslaved.isRunning ? Enslaved.tachyonNerf : 1;\r\n  return DC.D1.timesEffectsOf(\r\n    DilationUpgrade.tachyonGain,\r\n    GlyphSacrifice.dilation,\r\n    Achievement(132),\r\n    RealityUpgrade(4),\r\n    RealityUpgrade(8),\r\n    RealityUpgrade(15)\r\n  ).pow(pow);\r\n}\r\n\r\nexport function rewardTP() {\r\n  Currency.tachyonParticles.bumpTo(getTP(player.records.thisEternity.maxAM, true));\r\n  player.dilation.lastEP = Currency.eternityPoints.value;\r\n}\r\n\r\n// This function exists to apply Teresa-25 in a consistent way; TP multipliers can be very volatile and\r\n// applying the reward only once upon unlock promotes min-maxing the upgrade by unlocking dilation with\r\n// TP multipliers as large as possible. Applying the reward to a base TP value and letting the multipliers\r\n// act dynamically on this fixed base value elsewhere solves that issue\r\nexport function getBaseTP(antimatter, requireEternity) {\r\n  if (!Player.canEternity && requireEternity) return DC.D0;\r\n  const am = (isInCelestialReality() || Pelle.isDoomed)\r\n    ? antimatter\r\n    : Ra.unlocks.unlockDilationStartingTP.effectOrDefault(antimatter);\r\n  let baseTP = Decimal.pow(Decimal.log10(am) / 400, 1.5);\r\n  if (Enslaved.isRunning) baseTP = baseTP.pow(Enslaved.tachyonNerf);\r\n  return baseTP;\r\n}\r\n\r\n// Returns the TP that would be gained this run\r\nexport function getTP(antimatter, requireEternity) {\r\n  return getBaseTP(antimatter, requireEternity).times(tachyonGainMultiplier());\r\n}\r\n\r\n// Returns the amount of TP gained, subtracting out current TP; used for displaying gained TP, text on the\r\n// \"exit dilation\" button (saying whether you need more antimatter), and in last 10 eternities\r\nexport function getTachyonGain(requireEternity) {\r\n  return getTP(Currency.antimatter.value, requireEternity).minus(Currency.tachyonParticles.value).clampMin(0);\r\n}\r\n\r\n// Returns the minimum antimatter needed in order to gain more TP; used only for display purposes\r\nexport function getTachyonReq() {\r\n  let effectiveTP = Currency.tachyonParticles.value.dividedBy(tachyonGainMultiplier());\r\n  if (Enslaved.isRunning) effectiveTP = effectiveTP.pow(1 / Enslaved.tachyonNerf);\r\n  return Decimal.pow10(\r\n    effectiveTP\r\n      .times(Math.pow(400, 1.5))\r\n      .pow(2 / 3)\r\n      .toNumber()\r\n  );\r\n}\r\n\r\nexport function getDilationTimeEstimate(goal) {\r\n  const currentDTGain = getDilationGainPerSecond();\r\n  const rawDTGain = currentDTGain.times(getGameSpeedupForDisplay());\r\n  const currentDT = Currency.dilatedTime.value;\r\n  if (currentDTGain.eq(0)) return null;\r\n  if (PelleRifts.paradox.isActive) {\r\n    const drain = Pelle.riftDrainPercent;\r\n    const goalNetRate = rawDTGain.minus(Decimal.multiply(goal, drain));\r\n    const currNetRate = rawDTGain.minus(currentDT.times(drain));\r\n    if (goalNetRate.lt(0)) return \"Never affordable due to Rift drain\";\r\n    return TimeSpan.fromSeconds(currNetRate.div(goalNetRate).ln() / drain).toTimeEstimate();\r\n  }\r\n  return TimeSpan.fromSeconds(Decimal.sub(goal, currentDT)\r\n    .div(rawDTGain).toNumber()).toTimeEstimate();\r\n}\r\n\r\nexport function dilatedValueOf(value) {\r\n  const log10 = value.log10();\r\n  const dilationPenalty = 0.75 * Effects.product(DilationUpgrade.dilationPenalty);\r\n  return Decimal.pow10(Math.sign(log10) * Math.pow(Math.abs(log10), dilationPenalty));\r\n}\r\n\r\nclass DilationUpgradeState extends SetPurchasableMechanicState {\r\n  get currency() {\r\n    return Currency.dilatedTime;\r\n  }\r\n\r\n  get set() {\r\n    return player.dilation.upgrades;\r\n  }\r\n\r\n  onPurchased() {\r\n    if (this.id === 4) player.dilation.totalTachyonGalaxies *= 2;\r\n    if (this.id === 10) SpeedrunMilestones(15).tryComplete();\r\n  }\r\n}\r\n\r\nclass RebuyableDilationUpgradeState extends RebuyableMechanicState {\r\n  get currency() {\r\n    return Currency.dilatedTime;\r\n  }\r\n\r\n  get boughtAmount() {\r\n    return player.dilation.rebuyables[this.id];\r\n  }\r\n\r\n  set boughtAmount(value) {\r\n    player.dilation.rebuyables[this.id] = value;\r\n  }\r\n\r\n  get isCapped() {\r\n    return this.config.reachedCap();\r\n  }\r\n\r\n  purchase(bulk) {\r\n    buyDilationUpgrade(this.config.id, bulk);\r\n  }\r\n}\r\n\r\nexport const DilationUpgrade = mapGameDataToObject(\r\n  GameDatabase.eternity.dilation,\r\n  config => (config.rebuyable\r\n    ? new RebuyableDilationUpgradeState(config)\r\n    : new DilationUpgradeState(config))\r\n);\r\n\r\nexport const DilationUpgrades = {\r\n  rebuyable: [\r\n    DilationUpgrade.dtGain,\r\n    DilationUpgrade.galaxyThreshold,\r\n    DilationUpgrade.tachyonGain,\r\n  ],\r\n  fromId: id => DilationUpgrade.all.find(x => x.id === Number(id))\r\n};\r\n"]},"metadata":{},"sourceType":"module"}