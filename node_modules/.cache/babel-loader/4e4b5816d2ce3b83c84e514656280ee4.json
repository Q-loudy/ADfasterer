{"ast":null,"code":"import { MatterScale } from \"./matter-scale\";\nimport PrimaryButton from \"@/components/PrimaryButton\";\nexport default {\n  name: \"StatisticsTab\",\n  components: {\n    PrimaryButton\n  },\n\n  data() {\n    return {\n      isDoomed: false,\n      realTimeDoomed: TimeSpan.zero,\n      totalAntimatter: new Decimal(0),\n      realTimePlayed: TimeSpan.zero,\n      timeSinceCreation: 0,\n      uniqueNews: 0,\n      totalNews: 0,\n      secretAchievementCount: 0,\n      infinity: {\n        isUnlocked: false,\n        count: new Decimal(0),\n        banked: new Decimal(0),\n        projectedBanked: new Decimal(0),\n        bankRate: new Decimal(0),\n        hasBest: false,\n        best: TimeSpan.zero,\n        this: TimeSpan.zero,\n        thisReal: TimeSpan.zero,\n        bestRate: new Decimal(0)\n      },\n      eternity: {\n        isUnlocked: false,\n        count: new Decimal(0),\n        hasBest: false,\n        best: TimeSpan.zero,\n        this: TimeSpan.zero,\n        thisReal: TimeSpan.zero,\n        bestRate: new Decimal(0)\n      },\n      reality: {\n        isUnlocked: false,\n        count: 0,\n        best: TimeSpan.zero,\n        bestReal: TimeSpan.zero,\n        this: TimeSpan.zero,\n        thisReal: TimeSpan.zero,\n        totalTimePlayed: TimeSpan.zero,\n        bestRate: new Decimal(0),\n        bestRarity: 0\n      },\n      matterScale: [],\n      lastMatterTime: 0,\n      paperclips: 0,\n      fullTimePlayed: 0\n    };\n  },\n\n  computed: {\n    // These are here to avoid extra spaces in-game pre-reality and to get around codefactor 120-char limits in the\n    // HTML template due to the fact that adding a linebreak also adds a space\n    infinityCountString() {\n      const num = this.infinity.count;\n      return num.gt(0) ? `${this.formatDecimalAmount(num)} ${pluralize(\"Infinity\", num.floor())}` : \"no Infinities\";\n    },\n\n    eternityCountString() {\n      const num = this.eternity.count;\n      return num.gt(0) ? `${this.formatDecimalAmount(num)} ${pluralize(\"Eternity\", num.floor())}` : \"no Eternities\";\n    },\n\n    fullGameCompletions() {\n      return player.records.fullGameCompletions;\n    },\n\n    startDate() {\n      return Time.toDateTimeString(player.records.gameCreatedTime);\n    },\n\n    saveAge() {\n      return TimeSpan.fromMilliseconds(this.timeSinceCreation);\n    }\n\n  },\n  methods: {\n    update() {\n      const records = player.records;\n      this.totalAntimatter.copyFrom(records.totalAntimatter);\n      this.realTimePlayed.setFrom(records.realTimePlayed);\n      this.fullTimePlayed = TimeSpan.fromMilliseconds(records.previousRunRealTime + records.realTimePlayed);\n      this.uniqueNews = NewsHandler.uniqueTickersSeen;\n      this.totalNews = player.news.totalSeen;\n      this.secretAchievementCount = SecretAchievements.all.filter(a => a.isUnlocked).length;\n      this.timeSinceCreation = Date.now() - player.records.gameCreatedTime;\n      const progress = PlayerProgress.current;\n      const isInfinityUnlocked = progress.isInfinityUnlocked;\n      const infinity = this.infinity;\n      const bestInfinity = records.bestInfinity;\n      infinity.isUnlocked = isInfinityUnlocked;\n\n      if (isInfinityUnlocked) {\n        infinity.count.copyFrom(Currency.infinities);\n        infinity.banked.copyFrom(Currency.infinitiesBanked);\n        infinity.projectedBanked = new Decimal(0).plusEffectsOf(Achievement(131).effects.bankedInfinitiesGain, TimeStudy(191));\n        infinity.bankRate = infinity.projectedBanked.div(Math.clampMin(33, records.thisEternity.time)).times(60000);\n        infinity.hasBest = bestInfinity.time < 999999999999;\n        infinity.best.setFrom(bestInfinity.time);\n        infinity.this.setFrom(records.thisInfinity.time);\n        infinity.bestRate.copyFrom(bestInfinity.bestIPminEternity);\n      }\n\n      const isEternityUnlocked = progress.isEternityUnlocked;\n      const eternity = this.eternity;\n      const bestEternity = records.bestEternity;\n      eternity.isUnlocked = isEternityUnlocked;\n\n      if (isEternityUnlocked) {\n        eternity.count.copyFrom(Currency.eternities);\n        eternity.hasBest = bestEternity.time < 999999999999;\n        eternity.best.setFrom(bestEternity.time);\n        eternity.this.setFrom(records.thisEternity.time);\n        eternity.bestRate.copyFrom(bestEternity.bestEPminReality);\n      }\n\n      const isRealityUnlocked = progress.isRealityUnlocked;\n      const reality = this.reality;\n      const bestReality = records.bestReality;\n      reality.isUnlocked = isRealityUnlocked;\n\n      if (isRealityUnlocked) {\n        reality.count = Math.floor(Currency.realities.value);\n        reality.best.setFrom(bestReality.time);\n        reality.bestReal.setFrom(bestReality.realTime);\n        reality.this.setFrom(records.thisReality.time);\n        reality.totalTimePlayed.setFrom(records.totalTimePlayed); // Real time tracking is only a thing once reality is unlocked:\n\n        infinity.thisReal.setFrom(records.thisInfinity.realTime);\n        infinity.bankRate = infinity.projectedBanked.div(Math.clampMin(33, records.thisEternity.realTime)).times(60000);\n        eternity.thisReal.setFrom(records.thisEternity.realTime);\n        reality.thisReal.setFrom(records.thisReality.realTime);\n        reality.bestRate.copyFrom(bestReality.RMmin);\n        reality.bestRarity = Math.max(strengthToRarity(bestReality.glyphStrength), 0);\n      }\n\n      this.updateMatterScale();\n      this.isDoomed = Pelle.isDoomed;\n      this.realTimeDoomed.setFrom(player.records.realTimeDoomed);\n      this.paperclips = player.news.specialTickerData.paperclips;\n    },\n\n    formatDecimalAmount(value) {\n      return value.gt(1e9) ? format(value, 3) : formatInt(Math.floor(value.toNumber()));\n    },\n\n    // Only updates once per second to reduce jitter\n    updateMatterScale() {\n      if (Date.now() - this.lastMatterTime > 1000) {\n        this.matterScale = MatterScale.estimate(Currency.antimatter.value);\n        this.lastMatterTime = Date.now();\n      }\n    },\n\n    realityClassObject() {\n      return {\n        \"c-stats-tab-title\": true,\n        \"c-stats-tab-reality\": !this.isDoomed,\n        \"c-stats-tab-doomed\": this.isDoomed\n      };\n    }\n\n  }\n};","map":{"version":3,"sources":["StatisticsTab.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport { MatterScale } from \"./matter-scale\";\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\n\r\nexport default {\r\n  name: \"StatisticsTab\",\r\n  components: {\r\n    PrimaryButton\r\n  },\r\n  data() {\r\n    return {\r\n      isDoomed: false,\r\n      realTimeDoomed: TimeSpan.zero,\r\n      totalAntimatter: new Decimal(0),\r\n      realTimePlayed: TimeSpan.zero,\r\n      timeSinceCreation: 0,\r\n      uniqueNews: 0,\r\n      totalNews: 0,\r\n      secretAchievementCount: 0,\r\n      infinity: {\r\n        isUnlocked: false,\r\n        count: new Decimal(0),\r\n        banked: new Decimal(0),\r\n        projectedBanked: new Decimal(0),\r\n        bankRate: new Decimal(0),\r\n        hasBest: false,\r\n        best: TimeSpan.zero,\r\n        this: TimeSpan.zero,\r\n        thisReal: TimeSpan.zero,\r\n        bestRate: new Decimal(0),\r\n      },\r\n      eternity: {\r\n        isUnlocked: false,\r\n        count: new Decimal(0),\r\n        hasBest: false,\r\n        best: TimeSpan.zero,\r\n        this: TimeSpan.zero,\r\n        thisReal: TimeSpan.zero,\r\n        bestRate: new Decimal(0),\r\n      },\r\n      reality: {\r\n        isUnlocked: false,\r\n        count: 0,\r\n        best: TimeSpan.zero,\r\n        bestReal: TimeSpan.zero,\r\n        this: TimeSpan.zero,\r\n        thisReal: TimeSpan.zero,\r\n        totalTimePlayed: TimeSpan.zero,\r\n        bestRate: new Decimal(0),\r\n        bestRarity: 0,\r\n      },\r\n      matterScale: [],\r\n      lastMatterTime: 0,\r\n      paperclips: 0,\r\n      fullTimePlayed: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    // These are here to avoid extra spaces in-game pre-reality and to get around codefactor 120-char limits in the\r\n    // HTML template due to the fact that adding a linebreak also adds a space\r\n    infinityCountString() {\r\n      const num = this.infinity.count;\r\n      return num.gt(0)\r\n        ? `${this.formatDecimalAmount(num)} ${pluralize(\"Infinity\", num.floor())}`\r\n        : \"no Infinities\";\r\n    },\r\n    eternityCountString() {\r\n      const num = this.eternity.count;\r\n      return num.gt(0)\r\n        ? `${this.formatDecimalAmount(num)} ${pluralize(\"Eternity\", num.floor())}`\r\n        : \"no Eternities\";\r\n    },\r\n    fullGameCompletions() {\r\n      return player.records.fullGameCompletions;\r\n    },\r\n    startDate() {\r\n      return Time.toDateTimeString(player.records.gameCreatedTime);\r\n    },\r\n    saveAge() {\r\n      return TimeSpan.fromMilliseconds(this.timeSinceCreation);\r\n    },\r\n  },\r\n  methods: {\r\n    update() {\r\n      const records = player.records;\r\n      this.totalAntimatter.copyFrom(records.totalAntimatter);\r\n      this.realTimePlayed.setFrom(records.realTimePlayed);\r\n      this.fullTimePlayed = TimeSpan.fromMilliseconds(records.previousRunRealTime + records.realTimePlayed);\r\n      this.uniqueNews = NewsHandler.uniqueTickersSeen;\r\n      this.totalNews = player.news.totalSeen;\r\n      this.secretAchievementCount = SecretAchievements.all.filter(a => a.isUnlocked).length;\r\n      this.timeSinceCreation = Date.now() - player.records.gameCreatedTime;\r\n\r\n      const progress = PlayerProgress.current;\r\n      const isInfinityUnlocked = progress.isInfinityUnlocked;\r\n      const infinity = this.infinity;\r\n      const bestInfinity = records.bestInfinity;\r\n      infinity.isUnlocked = isInfinityUnlocked;\r\n      if (isInfinityUnlocked) {\r\n        infinity.count.copyFrom(Currency.infinities);\r\n        infinity.banked.copyFrom(Currency.infinitiesBanked);\r\n        infinity.projectedBanked = new Decimal(0).plusEffectsOf(\r\n          Achievement(131).effects.bankedInfinitiesGain,\r\n          TimeStudy(191)\r\n        );\r\n        infinity.bankRate = infinity.projectedBanked.div(Math.clampMin(33, records.thisEternity.time)).times(60000);\r\n        infinity.hasBest = bestInfinity.time < 999999999999;\r\n        infinity.best.setFrom(bestInfinity.time);\r\n        infinity.this.setFrom(records.thisInfinity.time);\r\n        infinity.bestRate.copyFrom(bestInfinity.bestIPminEternity);\r\n      }\r\n\r\n      const isEternityUnlocked = progress.isEternityUnlocked;\r\n      const eternity = this.eternity;\r\n      const bestEternity = records.bestEternity;\r\n      eternity.isUnlocked = isEternityUnlocked;\r\n      if (isEternityUnlocked) {\r\n        eternity.count.copyFrom(Currency.eternities);\r\n        eternity.hasBest = bestEternity.time < 999999999999;\r\n        eternity.best.setFrom(bestEternity.time);\r\n        eternity.this.setFrom(records.thisEternity.time);\r\n        eternity.bestRate.copyFrom(bestEternity.bestEPminReality);\r\n      }\r\n\r\n      const isRealityUnlocked = progress.isRealityUnlocked;\r\n      const reality = this.reality;\r\n      const bestReality = records.bestReality;\r\n      reality.isUnlocked = isRealityUnlocked;\r\n\r\n      if (isRealityUnlocked) {\r\n        reality.count = Math.floor(Currency.realities.value);\r\n        reality.best.setFrom(bestReality.time);\r\n        reality.bestReal.setFrom(bestReality.realTime);\r\n        reality.this.setFrom(records.thisReality.time);\r\n        reality.totalTimePlayed.setFrom(records.totalTimePlayed);\r\n        // Real time tracking is only a thing once reality is unlocked:\r\n        infinity.thisReal.setFrom(records.thisInfinity.realTime);\r\n        infinity.bankRate = infinity.projectedBanked.div(Math.clampMin(33, records.thisEternity.realTime)).times(60000);\r\n        eternity.thisReal.setFrom(records.thisEternity.realTime);\r\n        reality.thisReal.setFrom(records.thisReality.realTime);\r\n        reality.bestRate.copyFrom(bestReality.RMmin);\r\n        reality.bestRarity = Math.max(strengthToRarity(bestReality.glyphStrength), 0);\r\n      }\r\n      this.updateMatterScale();\r\n\r\n      this.isDoomed = Pelle.isDoomed;\r\n      this.realTimeDoomed.setFrom(player.records.realTimeDoomed);\r\n      this.paperclips = player.news.specialTickerData.paperclips;\r\n    },\r\n    formatDecimalAmount(value) {\r\n      return value.gt(1e9) ? format(value, 3) : formatInt(Math.floor(value.toNumber()));\r\n    },\r\n    // Only updates once per second to reduce jitter\r\n    updateMatterScale() {\r\n      if (Date.now() - this.lastMatterTime > 1000) {\r\n        this.matterScale = MatterScale.estimate(Currency.antimatter.value);\r\n        this.lastMatterTime = Date.now();\r\n      }\r\n    },\r\n    realityClassObject() {\r\n      return {\r\n        \"c-stats-tab-title\": true,\r\n        \"c-stats-tab-reality\": !this.isDoomed,\r\n        \"c-stats-tab-doomed\": this.isDoomed,\r\n      };\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"c-stats-tab\">\r\n    <div>\r\n      <PrimaryButton onclick=\"Modal.catchup.show(0)\">\r\n        View Content Summary\r\n      </PrimaryButton>\r\n      <div class=\"c-stats-tab-title c-stats-tab-general\">\r\n        General\r\n      </div>\r\n      <div class=\"c-stats-tab-general\">\r\n        <div>You have made a total of {{ format(totalAntimatter, 2, 1) }} antimatter.</div>\r\n        <div>You have played for {{ realTimePlayed }}. (real time)</div>\r\n        <div v-if=\"reality.isUnlocked\">\r\n          Your existence has spanned {{ reality.totalTimePlayed }} of time. (game time)\r\n        </div>\r\n        <div>\r\n          Your save was created on {{ startDate }} ({{ saveAge }} ago)\r\n        </div>\r\n        <br>\r\n        <div>\r\n          You have seen {{ quantifyInt(\"news message\", totalNews) }} in total.\r\n        </div>\r\n        <div>\r\n          You have seen {{ quantifyInt(\"unique news message\", uniqueNews) }}.\r\n        </div>\r\n        <div>\r\n          You have unlocked {{ quantifyInt(\"Secret Achievement\", secretAchievementCount) }}.\r\n        </div>\r\n        <div v-if=\"paperclips\">\r\n          You have {{ quantifyInt(\"useless paperclip\", paperclips) }}.\r\n        </div>\r\n        <div v-if=\"fullGameCompletions\">\r\n          <br>\r\n          <b>\r\n            You have completed the entire game {{ quantifyInt(\"time\", fullGameCompletions) }}.\r\n            <br>\r\n            You have played for {{ fullTimePlayed }} across all playthroughs.\r\n          </b>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <br>\r\n        <div class=\"c-matter-scale-container c-stats-tab-general\">\r\n          <div\r\n            v-for=\"(line, i) in matterScale\"\r\n            :key=\"i\"\r\n          >\r\n            {{ line }}\r\n          </div>\r\n          <br v-if=\"matterScale.length < 2\">\r\n          <br v-if=\"matterScale.length < 3\">\r\n        </div>\r\n      </div>\r\n      <br>\r\n    </div>\r\n    <div\r\n      v-if=\"infinity.isUnlocked\"\r\n      class=\"c-stats-tab-subheader c-stats-tab-general\"\r\n    >\r\n      <div class=\"c-stats-tab-title c-stats-tab-infinity\">\r\n        Infinity\r\n      </div>\r\n      <div>\r\n        You have {{ infinityCountString }}<span v-if=\"eternity.isUnlocked\"> this Eternity</span>.\r\n      </div>\r\n      <div v-if=\"infinity.banked.gt(0)\">\r\n        You have {{ formatDecimalAmount(infinity.banked.floor()) }}\r\n        {{ pluralize(\"Banked Infinity\", infinity.banked.floor()) }}.\r\n      </div>\r\n      <div v-if=\"infinity.hasBest\">\r\n        Your fastest Infinity was {{ infinity.best.toStringShort() }}.\r\n      </div>\r\n      <div v-else>\r\n        You have no fastest Infinity<span v-if=\"eternity.isUnlocked\"> this Eternity</span>.\r\n      </div>\r\n      <div>\r\n        You have spent {{ infinity.this.toStringShort() }} in this Infinity.\r\n        <span v-if=\"reality.isUnlocked\">\r\n          ({{ infinity.thisReal.toStringShort() }} real time)\r\n        </span>\r\n      </div>\r\n      <div>\r\n        Your best Infinity Points per minute\r\n        <span v-if=\"eternity.count.gt(0)\">this Eternity </span>\r\n        is {{ format(infinity.bestRate, 2, 2) }}.\r\n      </div>\r\n      <br>\r\n    </div>\r\n    <div\r\n      v-if=\"eternity.isUnlocked\"\r\n      class=\"c-stats-tab-subheader c-stats-tab-general\"\r\n    >\r\n      <div class=\"c-stats-tab-title c-stats-tab-eternity\">\r\n        Eternity\r\n      </div>\r\n      <div>\r\n        You have {{ eternityCountString }}<span v-if=\"reality.isUnlocked\"> this Reality</span>.\r\n      </div>\r\n      <div v-if=\"infinity.projectedBanked.gt(0)\">\r\n        You will gain {{ formatDecimalAmount(infinity.projectedBanked.floor()) }}\r\n        {{ pluralize(\"Banked Infinity\", infinity.projectedBanked.floor()) }} on Eternity\r\n        ({{ formatDecimalAmount(infinity.bankRate) }} per minute).\r\n      </div>\r\n      <div v-else-if=\"infinity.banked.gt(0)\">\r\n        You will gain no Banked Infinities on Eternity.\r\n      </div>\r\n      <div v-if=\"eternity.hasBest\">\r\n        Your fastest Eternity was {{ eternity.best.toStringShort() }}.\r\n      </div>\r\n      <div v-else>\r\n        You have no fastest Eternity<span v-if=\"reality.isUnlocked\"> this Reality</span>.\r\n      </div>\r\n      <div>\r\n        You have spent {{ eternity.this.toStringShort() }} in this Eternity.\r\n        <span v-if=\"reality.isUnlocked\">\r\n          ({{ eternity.thisReal.toStringShort() }} real time)\r\n        </span>\r\n      </div>\r\n      <div>\r\n        Your best Eternity Points per minute\r\n        <span v-if=\"reality.isUnlocked\">this Reality </span>\r\n        is {{ format(eternity.bestRate, 2, 2) }}.\r\n      </div>\r\n      <br>\r\n    </div>\r\n    <div\r\n      v-if=\"reality.isUnlocked\"\r\n      class=\"c-stats-tab-subheader c-stats-tab-general\"\r\n    >\r\n      <div :class=\"realityClassObject()\">\r\n        {{ isDoomed ? \"Doomed Reality\" : \"Reality\" }}\r\n      </div>\r\n      <div>You have {{ quantifyInt(\"Reality\", reality.count) }}.</div>\r\n      <div>Your fastest game-time Reality was {{ reality.best.toStringShort() }}.</div>\r\n      <div>Your fastest real-time Reality was {{ reality.bestReal.toStringShort() }}.</div>\r\n      <div :class=\"{ 'c-stats-tab-doomed' : isDoomed }\">\r\n        You have spent {{ reality.this.toStringShort() }}\r\n        in this {{ isDoomed ? \"Armageddon\" : \"Reality\" }}.\r\n        ({{ reality.thisReal.toStringShort() }} real time)\r\n      </div>\r\n      <div\r\n        v-if=\"isDoomed\"\r\n        class=\"c-stats-tab-doomed\"\r\n      >\r\n        You have been Doomed for {{ realTimeDoomed.toStringShort() }}, real time.\r\n      </div>\r\n      <div>\r\n        Your best Reality Machines per minute is {{ format(reality.bestRate, 2, 2) }}.\r\n      </div>\r\n      <div>Your best Glyph rarity is {{ formatRarity(reality.bestRarity) }}.</div>\r\n      <br>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-matter-scale-container {\r\n  height: 5rem;\r\n}\r\n\r\n.c-stats-tab-general {\r\n  color: var(--color-text);\r\n}\r\n\r\n.c-stats-tab-title {\r\n  font-size: 2rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.c-stats-tab-subheader {\r\n  height: 15rem;\r\n}\r\n\r\n.c-stats-tab-infinity {\r\n  color: var(--color-infinity);\r\n}\r\n\r\n.c-stats-tab-eternity {\r\n  color: var(--color-eternity);\r\n}\r\n\r\n.c-stats-tab-reality {\r\n  color: var(--color-reality);\r\n}\r\n\r\n.c-stats-tab-doomed {\r\n  color: var(--color-pelle--base);\r\n}\r\n</style>"],"sourceRoot":"src/components/tabs/statistics"},"metadata":{},"sourceType":"module"}