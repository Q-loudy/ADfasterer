{"ast":null,"code":"import \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport CurrentGlyphEffect from \"./CurrentGlyphEffect\";\nimport GlyphSetName from \"@/components/GlyphSetName\";\nconst glyphEffectsOrder = [\"powerpow\", \"powermult\", \"powerdimboost\", \"powerbuy10\", \"infinitypow\", \"infinityinfmult\", \"infinityIP\", \"infinityrate\", \"replicationpow\", \"replicationdtgain\", \"replicationspeed\", \"replicationglyphlevel\", \"timepow\", \"timeshardpow\", \"timeEP\", \"timespeed\", \"timeetermult\", \"dilationpow\", \"dilationTTgen\", \"dilationDT\", \"dilationgalaxyThreshold\", \"effarigrm\", \"effarigglyph\", \"effarigblackhole\", \"effarigachievement\", \"effarigforgotten\", \"effarigdimensions\", \"effarigantimatter\", \"cursedgalaxies\", \"cursedtickspeed\", \"curseddimensions\", \"cursedEP\", \"realityglyphlevel\", \"realitygalaxies\", \"realityrow1pow\", \"realityDTglyph\", \"companiondescription\", \"companionEP\"];\nexport default {\n  name: \"CurrentGlyphEffects\",\n  components: {\n    GlyphSetName,\n    CurrentGlyphEffect\n  },\n\n  data() {\n    return {\n      effects: [],\n      isColored: false,\n      hasEffarig: false,\n      hasReality: false,\n      logTotalSacrifice: 0,\n      pelleChaosEffect: {}\n    };\n  },\n\n  computed: {\n    isSoftcapActive() {\n      return this.effects.length && !this.effects.every(e => e.value.capped === false);\n    },\n\n    uniqueGlyphText() {\n      if (!this.hasEffarig && !this.hasReality) return \"\";\n      const uniqueGlyphs = [];\n      if (this.hasEffarig) uniqueGlyphs.push(`<span style=\"color: ${GlyphAppearanceHandler.getBorderColor(\"effarig\")};\">Effarig</span>`);\n      if (this.hasReality) uniqueGlyphs.push(`<span style=\"animation: a-reality-glyph-description-cycle 10s infinite;\">Reality</span>`);\n      return `You cannot have more than one ${uniqueGlyphs.join(\" or \")}\n        Glyph equipped${uniqueGlyphs.length > 1 ? \" each.\" : \".\"}`;\n    },\n\n    noEffects() {\n      return !this.effects.length;\n    },\n\n    glyphSet() {\n      return Glyphs.activeList;\n    },\n\n    pelleGlyphText() {\n      return Pelle.isDoomed ? `Glyph Rarity is set to ${formatPercents(strengthToRarity(Pelle.glyphStrength))}\n          and Level is capped at ${formatInt(Pelle.glyphMaxLevel)}` : \"\";\n    },\n\n    showChaosText() {\n      return this.pelleChaosEffect.isUnlocked && !this.noEffects;\n    },\n\n    chaosEffect() {\n      return this.pelleChaosEffect.description;\n    }\n\n  },\n  watch: {\n    logTotalSacrifice() {\n      this.glyphsChanged();\n    }\n\n  },\n\n  created() {\n    this.on$(GAME_EVENT.GLYPHS_EQUIPPED_CHANGED, this.glyphsChanged);\n    this.glyphsChanged();\n  },\n\n  methods: {\n    update() {\n      this.isColored = player.options.glyphTextColors;\n      this.hasEffarig = Glyphs.active.some(g => g && g.type === \"effarig\");\n      this.hasReality = Glyphs.active.some(g => g && g.type === \"reality\");\n      this.logTotalSacrifice = GameCache.logTotalGlyphSacrifice.value;\n      this.pelleChaosEffect = Pelle.specialGlyphEffect;\n    },\n\n    glyphsChanged() {\n      this.effects = getActiveGlyphEffects();\n      this.effects.sort((a, b) => glyphEffectsOrder.indexOf(a.id) - glyphEffectsOrder.indexOf(b.id));\n    }\n\n  }\n};","map":{"version":3,"sources":["CurrentGlyphEffects.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport CurrentGlyphEffect from \"./CurrentGlyphEffect\";\r\nimport GlyphSetName from \"@/components/GlyphSetName\";\r\n\r\nconst glyphEffectsOrder =\r\n  [\"powerpow\", \"powermult\", \"powerdimboost\", \"powerbuy10\",\r\n    \"infinitypow\", \"infinityinfmult\", \"infinityIP\", \"infinityrate\",\r\n    \"replicationpow\", \"replicationdtgain\", \"replicationspeed\", \"replicationglyphlevel\",\r\n    \"timepow\", \"timeshardpow\", \"timeEP\", \"timespeed\", \"timeetermult\",\r\n    \"dilationpow\", \"dilationTTgen\", \"dilationDT\", \"dilationgalaxyThreshold\",\r\n    \"effarigrm\", \"effarigglyph\", \"effarigblackhole\", \"effarigachievement\",\r\n    \"effarigforgotten\", \"effarigdimensions\", \"effarigantimatter\",\r\n    \"cursedgalaxies\", \"cursedtickspeed\", \"curseddimensions\", \"cursedEP\",\r\n    \"realityglyphlevel\", \"realitygalaxies\", \"realityrow1pow\", \"realityDTglyph\",\r\n    \"companiondescription\", \"companionEP\"];\r\n\r\nexport default {\r\n  name: \"CurrentGlyphEffects\",\r\n  components: {\r\n    GlyphSetName,\r\n    CurrentGlyphEffect\r\n  },\r\n  data() {\r\n    return {\r\n      effects: [],\r\n      isColored: false,\r\n      hasEffarig: false,\r\n      hasReality: false,\r\n      logTotalSacrifice: 0,\r\n      pelleChaosEffect: {},\r\n    };\r\n  },\r\n  computed: {\r\n    isSoftcapActive() {\r\n      return this.effects.length && !this.effects.every(e => e.value.capped === false);\r\n    },\r\n    uniqueGlyphText() {\r\n      if (!this.hasEffarig && !this.hasReality) return \"\";\r\n      const uniqueGlyphs = [];\r\n      if (this.hasEffarig) uniqueGlyphs.push(\r\n        `<span style=\"color: ${GlyphAppearanceHandler.getBorderColor(\"effarig\")};\">Effarig</span>`);\r\n      if (this.hasReality) uniqueGlyphs.push(\r\n        `<span style=\"animation: a-reality-glyph-description-cycle 10s infinite;\">Reality</span>`);\r\n      return `You cannot have more than one ${uniqueGlyphs.join(\" or \")}\r\n        Glyph equipped${uniqueGlyphs.length > 1 ? \" each.\" : \".\"}`;\r\n    },\r\n    noEffects() {\r\n      return !this.effects.length;\r\n    },\r\n    glyphSet() {\r\n      return Glyphs.activeList;\r\n    },\r\n    pelleGlyphText() {\r\n      return Pelle.isDoomed\r\n        ? `Glyph Rarity is set to ${formatPercents(strengthToRarity(Pelle.glyphStrength))}\r\n          and Level is capped at ${formatInt(Pelle.glyphMaxLevel)}`\r\n        : \"\";\r\n    },\r\n    showChaosText() {\r\n      return this.pelleChaosEffect.isUnlocked && !this.noEffects;\r\n    },\r\n    chaosEffect() {\r\n      return this.pelleChaosEffect.description;\r\n    },\r\n  },\r\n  watch: {\r\n    logTotalSacrifice() {\r\n      this.glyphsChanged();\r\n    }\r\n  },\r\n  created() {\r\n    this.on$(GAME_EVENT.GLYPHS_EQUIPPED_CHANGED, this.glyphsChanged);\r\n    this.glyphsChanged();\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isColored = player.options.glyphTextColors;\r\n      this.hasEffarig = Glyphs.active.some(g => g && g.type === \"effarig\");\r\n      this.hasReality = Glyphs.active.some(g => g && g.type === \"reality\");\r\n\r\n      this.logTotalSacrifice = GameCache.logTotalGlyphSacrifice.value;\r\n\r\n      this.pelleChaosEffect = Pelle.specialGlyphEffect;\r\n    },\r\n    glyphsChanged() {\r\n      this.effects = getActiveGlyphEffects();\r\n      this.effects.sort((a, b) => glyphEffectsOrder.indexOf(a.id) - glyphEffectsOrder.indexOf(b.id));\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"c-current-glyph-effects l-current-glyph-effects\">\r\n    <div class=\"pelle-current-glyph-effects\">\r\n      {{ pelleGlyphText }}\r\n    </div>\r\n    <div class=\"c-current-glyph-effects__header\">\r\n      Currently active Glyph effects:\r\n    </div>\r\n    <GlyphSetName :glyph-set=\"glyphSet\" />\r\n    <br v-if=\"isSoftcapActive || hasEffarig || hasReality\">\r\n    <span v-html=\"uniqueGlyphText\" />\r\n    <div\r\n      v-if=\"isSoftcapActive\"\r\n      class=\"l-current-glyph-effects__capped-header\"\r\n    >\r\n      <span class=\"c-current-glyph-effects__effect--capped\">Italic</span> effects have been slightly reduced\r\n      due to a softcap\r\n    </div>\r\n    <br>\r\n    <div v-if=\"noEffects\">\r\n      None (equip Glyphs to get their effects)\r\n    </div>\r\n    <CurrentGlyphEffect\r\n      v-for=\"effect in effects\"\r\n      :key=\"effect.id + logTotalSacrifice\"\r\n      :effect=\"effect\"\r\n      :is-colored=\"isColored\"\r\n    />\r\n    <div\r\n      v-if=\"showChaosText\"\r\n      class=\"pelle-current-glyph-effects\"\r\n    >\r\n      {{ chaosEffect }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/glyphs"},"metadata":{},"sourceType":"module"}