{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.reduce.js\";\n\n// Deepmerge library modified for Antimatter Dimensions usage (mainly Decimal integration)\n// Source: https://github.com/TehShrike/deepmerge\nfunction emptyTarget(val) {\n  return Array.isArray(val) ? [] : {};\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n  if (value instanceof Decimal) {\n    return new Decimal(value);\n  }\n\n  if (value instanceof Set) {\n    return new Set(value);\n  }\n\n  return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;\n}\n\nfunction defaultArrayMerge(target, source, options) {\n  return target.concat(source).map(element => cloneUnlessOtherwiseSpecified(element, options));\n}\n\nfunction mergeObject(target, source, options) {\n  const destination = {};\n\n  if (options.isMergeableObject(target)) {\n    Object.keys(target).forEach(key => {\n      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n    });\n  }\n\n  Object.keys(source).forEach(key => {\n    if (target[key] && target[key] instanceof Decimal) {\n      destination[key] = new Decimal(source[key]);\n    } else if (target[key] && target[key] instanceof Set) {\n      destination[key] = new Set(source[key]);\n    } else if (!options.isMergeableObject(source[key]) || !target[key]) {\n      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n    } else {\n      destination[key] = deepmerge(target[key], source[key], options);\n    }\n  });\n  return destination;\n}\n\nexport function deepmerge(target, source, options = {}) {\n  options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n  options.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\n  if (target instanceof Decimal) {\n    return new Decimal(source);\n  }\n\n  if (target instanceof Set) {\n    return new Set(source);\n  }\n\n  const sourceIsArray = Array.isArray(source);\n  const targetIsArray = Array.isArray(target);\n  const sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n  if (!sourceAndTargetTypesMatch) {\n    return cloneUnlessOtherwiseSpecified(source, options);\n  }\n\n  if (sourceIsArray) {\n    return options.arrayMerge(target, source, options);\n  }\n\n  return mergeObject(target, source, options);\n}\nexport function deepmergeAll(array, options) {\n  if (!Array.isArray(array)) {\n    throw new Error(\"first argument should be an array\");\n  }\n\n  if (!options) {\n    // eslint-disable-next-line no-shadow\n    const deepCloneMerge = (destinationArray, sourceArray, options) => sourceArray.map((element, index) => {\n      if (destinationArray[index] && destinationArray[index] instanceof Decimal) {\n        return new Decimal(element);\n      }\n\n      if (destinationArray[index] && destinationArray[index] instanceof Set) {\n        return new Set(element);\n      }\n\n      if (!options.isMergeableObject(element) || !destinationArray[index]) {\n        return cloneUnlessOtherwiseSpecified(element, options);\n      }\n\n      return deepmerge(destinationArray[index], element, options);\n    }); // eslint-disable-next-line no-param-reassign\n\n\n    options = {\n      arrayMerge: deepCloneMerge\n    };\n  }\n\n  return array.reduce((prev, next) => deepmerge(prev, next, options), {});\n}\n\nfunction isMergeableObject(value) {\n  return isNonNullObject(value) && !isSpecial(value);\n}\n\nfunction isNonNullObject(value) {\n  return Boolean(value) && typeof value === \"object\";\n}\n\nfunction isSpecial(value) {\n  const stringValue = Object.prototype.toString.call(value);\n  return stringValue === \"[object RegExp]\" || stringValue === \"[object Date]\";\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/utility/deepmerge.js"],"names":["emptyTarget","val","Array","isArray","cloneUnlessOtherwiseSpecified","value","options","Decimal","Set","clone","isMergeableObject","deepmerge","defaultArrayMerge","target","source","concat","map","element","mergeObject","destination","Object","keys","forEach","key","arrayMerge","sourceIsArray","targetIsArray","sourceAndTargetTypesMatch","deepmergeAll","array","Error","deepCloneMerge","destinationArray","sourceArray","index","reduce","prev","next","isNonNullObject","isSpecial","Boolean","stringValue","prototype","toString","call"],"mappings":"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","sourcesContent":["// Deepmerge library modified for Antimatter Dimensions usage (mainly Decimal integration)\r\n// Source: https://github.com/TehShrike/deepmerge\r\n\r\nfunction emptyTarget(val) {\r\n  return Array.isArray(val) ? [] : {};\r\n}\r\n\r\nfunction cloneUnlessOtherwiseSpecified(value, options) {\r\n  if (value instanceof Decimal) {\r\n    return new Decimal(value);\r\n  }\r\n  if (value instanceof Set) {\r\n    return new Set(value);\r\n  }\r\n  return (options.clone !== false && options.isMergeableObject(value))\r\n    ? deepmerge(emptyTarget(value), value, options)\r\n    : value;\r\n}\r\n\r\nfunction defaultArrayMerge(target, source, options) {\r\n  return target.concat(source).map(element => cloneUnlessOtherwiseSpecified(element, options));\r\n}\r\n\r\nfunction mergeObject(target, source, options) {\r\n  const destination = {};\r\n  if (options.isMergeableObject(target)) {\r\n    Object.keys(target).forEach(key => {\r\n      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\r\n    });\r\n  }\r\n  Object.keys(source).forEach(key => {\r\n    if (target[key] && target[key] instanceof Decimal) {\r\n      destination[key] = new Decimal(source[key]);\r\n    } else if (target[key] && target[key] instanceof Set) {\r\n      destination[key] = new Set(source[key]);\r\n    } else if (!options.isMergeableObject(source[key]) || !target[key]) {\r\n      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\r\n    } else {\r\n      destination[key] = deepmerge(target[key], source[key], options);\r\n    }\r\n  });\r\n  return destination;\r\n}\r\n\r\nexport function deepmerge(target, source, options = {}) {\r\n  options.arrayMerge = options.arrayMerge || defaultArrayMerge;\r\n  options.isMergeableObject = options.isMergeableObject || isMergeableObject;\r\n\r\n  if (target instanceof Decimal) {\r\n    return new Decimal(source);\r\n  }\r\n\r\n  if (target instanceof Set) {\r\n    return new Set(source);\r\n  }\r\n\r\n  const sourceIsArray = Array.isArray(source);\r\n  const targetIsArray = Array.isArray(target);\r\n  const sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\r\n\r\n  if (!sourceAndTargetTypesMatch) {\r\n    return cloneUnlessOtherwiseSpecified(source, options);\r\n  }\r\n\r\n  if (sourceIsArray) {\r\n    return options.arrayMerge(target, source, options);\r\n  }\r\n\r\n  return mergeObject(target, source, options);\r\n}\r\n\r\nexport function deepmergeAll(array, options) {\r\n  if (!Array.isArray(array)) {\r\n    throw new Error(\"first argument should be an array\");\r\n  }\r\n\r\n  if (!options) {\r\n    // eslint-disable-next-line no-shadow\r\n    const deepCloneMerge = (destinationArray, sourceArray, options) => sourceArray.map((element, index) => {\r\n      if (destinationArray[index] && destinationArray[index] instanceof Decimal) {\r\n        return new Decimal(element);\r\n      }\r\n\r\n      if (destinationArray[index] && destinationArray[index] instanceof Set) {\r\n        return new Set(element);\r\n      }\r\n\r\n      if (!options.isMergeableObject(element) || !destinationArray[index]) {\r\n        return cloneUnlessOtherwiseSpecified(element, options);\r\n      }\r\n      return deepmerge(destinationArray[index], element, options);\r\n\r\n    });\r\n    // eslint-disable-next-line no-param-reassign\r\n    options = {\r\n      arrayMerge: deepCloneMerge\r\n    };\r\n  }\r\n\r\n  return array.reduce((prev, next) => deepmerge(prev, next, options), {});\r\n}\r\n\r\nfunction isMergeableObject(value) {\r\n  return isNonNullObject(value) && !isSpecial(value);\r\n}\r\n\r\nfunction isNonNullObject(value) {\r\n  return Boolean(value) && typeof value === \"object\";\r\n}\r\n\r\nfunction isSpecial(value) {\r\n  const stringValue = Object.prototype.toString.call(value);\r\n  return stringValue === \"[object RegExp]\" || stringValue === \"[object Date]\";\r\n}\r\n"]},"metadata":{},"sourceType":"module"}