{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\n\n/* eslint-disable max-depth */\n\n/* eslint-disable camelcase */\nimport { MultiplierTabHelper } from \"./helper-functions\";\nimport { multiplierTabValues } from \"./values\";\nconst dynamicGenProps = [\"TP\", \"DT\", \"infinities\", \"eternities\", \"gamespeed\", \"replicanti\"];\nconst propList = {\n  AD: [\"purchase\", \"dimboost\", \"sacrifice\", \"achievementMult\", \"achievement\", \"infinityUpgrade\", \"breakInfinityUpgrade\", \"infinityPower\", \"infinityChallenge\", \"timeStudy\", \"eternityChallenge\", \"glyph\", \"v\", \"alchemy\", \"pelle\", \"iap\", \"effectNC\", \"nerfIC\", \"nerfV\", \"nerfCursed\", \"nerfPelle\"],\n  ID: [\"purchase\", \"achievementMult\", \"achievement\", \"replicanti\", \"infinityChallenge\", \"timeStudy\", \"eternityUpgrade\", \"eternityChallenge\", \"glyph\", \"alchemy\", \"imaginaryUpgrade\", \"pelle\", \"iap\", \"nerfV\", \"nerfCursed\", \"nerfPelle\"],\n  TD: [\"purchase\", \"achievementMult\", \"achievement\", \"timeStudy\", \"eternityUpgrade\", \"eternityChallenge\", \"dilationUpgrade\", \"realityUpgrade\", \"glyph\", \"alchemy\", \"imaginaryUpgrade\", \"pelle\", \"iap\", \"nerfV\", \"nerfCursed\"],\n  IP: [\"base\", \"infinityUpgrade\", \"achievement\", \"timeStudy\", \"dilationUpgrade\", \"glyph\", \"alchemy\", \"pelle\", \"iap\", \"nerfTeresa\", \"nerfV\"],\n  EP: [\"base\", \"eternityUpgrade\", \"timeStudy\", \"glyph\", \"realityUpgrade\", \"pelle\", \"iap\", \"nerfTeresa\", \"nerfV\"]\n}; // Some of the props above would contain every entry except \"total\" in their respective value GameDB entry, so we\n// generate them dynamically instead\n\nfor (const prop of dynamicGenProps) {\n  propList[prop] = [];\n\n  for (const toCopy of Object.keys(multiplierTabValues[prop])) {\n    if (toCopy !== \"total\") propList[prop].push(toCopy);\n  }\n} // Used for individual dimension breakdowns of effects (eg. full achievement mult into its values on individual ADs)\n// Results in an array of [\"key_1\", \"key_2\", ... , \"key_8\"]\n\n\nfunction append8(key) {\n  const props = [];\n\n  for (let dim = 1; dim <= 8; dim++) props.push(`${key}_${dim}`);\n\n  return props;\n} // Helper method to create very long lists of entries in the tree; format is \"RESOURCE_SOURCE_DIMENSION\"\n\n\nfunction getProps(resource, tier) {\n  const props = propList[resource].map(s => `${resource}_${s}`);\n  if (!tier) return props;\n  const newProps = [];\n\n  for (const effect of props) newProps.push(`${effect}_${tier}`);\n\n  return newProps;\n} // Everything in multiplierTabTree is associated with values in multiplierTabValues. The only explicitly\n// initialized props here are the \"root\" props which are viewable on the tab with full breakdowns. After the initial\n// specification, all children props are dynamically added based on the arrays in the helper functions above\n\n\nexport const multiplierTabTree = {\n  AM_total: [[\"AD_total\", \"tickspeed_total\", \"AM_effarigAM\"]],\n  AD_total: [getProps(\"AD\"), append8(\"AD_total\")],\n  ID_total: [getProps(\"ID\"), append8(\"ID_total\")],\n  TD_total: [getProps(\"TD\"), append8(\"TD_total\")],\n  IP_total: [getProps(\"IP\")],\n  IP_base: [[\"IP_antimatter\", \"IP_divisor\"]],\n  EP_total: [getProps(\"EP\")],\n  EP_base: [[\"EP_IP\", \"EP_divisor\"]],\n  TP_total: [getProps(\"TP\")],\n  DT_total: [getProps(\"DT\")],\n  tickspeed_total: [[\"tickspeed_base\", \"tickspeed_upgrades\", \"tickspeed_galaxies\", \"tickspeed_pelleTickspeedPow\"]],\n  tickspeed_upgrades: [[\"tickspeedUpgrades_purchased\", \"tickspeedUpgrades_free\"]],\n  tickspeed_galaxies: [[\"galaxies_antimatter\", \"galaxies_replicanti\", \"galaxies_tachyon\", \"galaxies_nerfPelle\"]],\n  infinities_total: [getProps(\"infinities\")],\n  eternities_total: [getProps(\"eternities\")],\n  gamespeed_total: [getProps(\"gamespeed\")],\n  replicanti_total: [getProps(\"replicanti\")]\n}; // Gamespeed's two alternate displays are current and average gamespeed, distinguished by which of two\n// mutually-exclusive entries appear in the list. We explicity modify props here as needed\n\nconst allGamespeed = multiplierTabTree.gamespeed_total[0];\nmultiplierTabTree.gamespeed_total[0] = [...allGamespeed].filter(key => key !== \"gamespeed_blackHoleAvg\");\nmultiplierTabTree.gamespeed_total[1] = [...allGamespeed].filter(key => key !== \"gamespeed_blackHoleCurr\"); // DT doesn't explicitly have an entry to TP, due to it being its own total entry, so we link them together\n\nmultiplierTabTree.DT_total[0].unshift(\"TP_total\"); // Additional data specification for dynamically-generated props\n\nconst dimTypes = [\"AD\", \"ID\", \"TD\"];\nconst singleRes = [\"IP\", \"EP\", \"DT\", \"infinities\", \"replicanti\"];\nconst targetedEffects = {\n  achievement: {\n    checkFn: MultiplierTabHelper.achievementDimCheck,\n    AD: [23, 28, 31, 34, 43, 48, 56, 64, 65, 68, 71, 72, 73, 74, 76, 84, 91, 92, 183],\n    TD: [105, 128],\n    IP: [85, 93, 116, 125, 141],\n    DT: [132, 137],\n    infinities: [87, 131, 164]\n  },\n  timeStudy: {\n    checkFn: MultiplierTabHelper.timeStudyDimCheck,\n    AD: [71, 91, 101, 161, 193, 214, 234],\n    ID: [72, 82, 92, 102, 162],\n    TD: [11, 73, 93, 103, 151, 221, 227, 301],\n    IP: [41, 51, 141, 142, 143],\n    EP: [61, 121, 122, 123],\n    replicanti: [62, 132, 213]\n  },\n  infinityChallenge: {\n    checkFn: MultiplierTabHelper.ICDimCheck,\n    AD: [3, 4, 8],\n    ID: [1, 6]\n  },\n  eternityChallenge: {\n    checkFn: MultiplierTabHelper.ECDimCheck,\n    ID: [2, 4, 9],\n    TD: [1, 10]\n  }\n}; // Highest actively-producing dimensions need a special case\n\nfor (const dim of dimTypes) {\n  multiplierTabTree[`${dim}_total`][0].push(`${dim}_highestDim`);\n  multiplierTabTree[`${dim}_total`][1].push(`${dim}_highestDim`);\n} // EC7 also needs a special case for tickspeed, since it doesn't appear on the multipliers themselves\n\n\nfor (const dim of [\"ID\", \"TD\"]) {\n  multiplierTabTree[`${dim}_total`][0].push(`${dim}_tickspeed`);\n  multiplierTabTree[`${dim}_total`][1].push(`${dim}_tickspeed`);\n} // Dynamically generate all values from existing values, but broken down by dimension\n\n\nfor (const res of dimTypes) {\n  for (const prop of getProps(res)) multiplierTabTree[prop] = [append8(prop)];\n\n  for (let dim = 1; dim <= 8; dim++) multiplierTabTree[`${res}_total_${dim}`] = [getProps(res, dim)];\n} // A few dynamically-generated props are largely useless in terms of what they connect to, in that they have very few\n// entries or have 8 identical entries, so we explicitly remove those lists for a cleaner appearance on the UI\n\n\nconst removedRegexes = [\"AD_sacrifice\", \"AD_breakInfinityUpgrade\", \"AD_nerfIC\", \"AD_infinityUpgrade\", \"AD_v\", \"ID_replicanti\", \"ID_infinityChallenge\", \"ID_eternityUpgrades\", \"TD_achievement\", \"TD_eternityUpgrade\", \"TD_dilationUpgrade\", \"TD_realityUpgrade\", \".._achievementMult\", \".._glyph\", \".._alchemy\", \".._imaginaryUpgrade\", \".._iap\", \".._nerfV\", \".._nerfCursed\", \".._nerfPelle\", \".._pelle\"];\nconst removedProps = Object.keys(multiplierTabTree).filter(key => removedRegexes.some(regex => key.match(regex)));\n\nfor (const prop of removedProps) {\n  multiplierTabTree[prop] = undefined;\n} // We need to handle infinity power multiplier a bit differently; previous steps of dynamic generation fill it with\n// 8 identical AD multipliers, but we want to replace it with ID mults and the conversion rate\n\n\nmultiplierTabTree.AD_infinityPower = [[\"ID_total\", \"ID_powerConversion\"]];\n\nfor (let dim = 1; dim <= 8; dim++) {\n  multiplierTabTree[`AD_infinityPower_${dim}`] = [[\"ID_total\", \"ID_powerConversion\"]];\n} // Tesseracts are added one layer deep, but we don't want to override the existing ID_purchase entry\n\n\nmultiplierTabTree.ID_purchase.unshift([\"ID_basePurchase\", \"ID_tesseractPurchase\", \"ID_infinityGlyphSacrifice\", \"ID_powPurchase\"]);\n\nfor (let dim = 1; dim <= 7; dim++) {\n  multiplierTabTree[`ID_purchase_${dim}`] = [[`ID_basePurchase_${dim}`, `ID_tesseractPurchase_${dim}`, \"ID_powPurchase\"]];\n}\n\nmultiplierTabTree.ID_purchase_8 = [[`ID_basePurchase_8`, `ID_infinityGlyphSacrifice`, \"ID_powPurchase\"]]; // These are also added one layer deep\n\nfor (let dim = 1; dim <= 7; dim++) {\n  multiplierTabTree[`TD_purchase_${dim}`] = [[`TD_basePurchase_${dim}`, `TD_powPurchase_${dim}`]];\n}\n\nmultiplierTabTree.TD_purchase.push([\"TD_basePurchase\", \"TD_timeGlyphSacrifice\", \"TD_powPurchase\"]);\nmultiplierTabTree.TD_purchase_8 = [[\"TD_basePurchase_8\", \"TD_timeGlyphSacrifice\", \"TD_powPurchase\"]]; // Dynamically fill effects which only affect certain dimensions, as noted in targetedEffects\n\nfor (const res of dimTypes) {\n  for (const eff of Object.keys(targetedEffects)) {\n    if (!targetedEffects[eff][res]) continue;\n    multiplierTabTree[`${res}_${eff}`] = [[]];\n\n    for (const id of targetedEffects[eff][res]) {\n      for (let dim = 1; dim <= 8; dim++) {\n        const propStr = `${res}_${eff}_${dim}`;\n        const dimStr = `${res}${dim}`;\n\n        if (targetedEffects[eff].checkFn(id, dimStr)) {\n          if (!multiplierTabTree[propStr]) multiplierTabTree[propStr] = [[]];\n          multiplierTabTree[propStr][0].push(`general_${eff}_${id}_${dimStr}`);\n        }\n      }\n\n      multiplierTabTree[`${res}_${eff}`][0].push(`general_${eff}_${id}_${res}`);\n    }\n  }\n} // Dynamically fill effects which affect single resources as well\n\n\nfor (const res of singleRes) {\n  for (const eff of Object.keys(targetedEffects)) {\n    if (!targetedEffects[eff][res]) continue;\n    multiplierTabTree[`${res}_${eff}`] = [[]];\n\n    for (const ach of targetedEffects[eff][res]) {\n      multiplierTabTree[`${res}_${eff}`][0].push(`general_${eff}_${ach}`);\n    }\n  }\n} // Fill in eternity upgrade entries\n\n\nmultiplierTabTree.ID_eternityUpgrade = [[`ID_eu1`, `ID_eu2`, `ID_eu3`]];\nmultiplierTabTree.TD_eternityUpgrade = [[`TD_eu1`, `TD_eu2`]];\n\nfor (let dim = 1; dim <= 8; dim++) {\n  multiplierTabTree[`ID_eternityUpgrade_${dim}`] = [[`ID_eu1_${dim}`, `ID_eu2_${dim}`, `ID_eu3_${dim}`]];\n  multiplierTabTree[`TD_eternityUpgrade_${dim}`] = [[`TD_eu1_${dim}`, `TD_eu2_${dim}`]];\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/multiplier-tab/tree.js"],"names":["MultiplierTabHelper","multiplierTabValues","dynamicGenProps","propList","AD","ID","TD","IP","EP","prop","toCopy","Object","keys","push","append8","key","props","dim","getProps","resource","tier","map","s","newProps","effect","multiplierTabTree","AM_total","AD_total","ID_total","TD_total","IP_total","IP_base","EP_total","EP_base","TP_total","DT_total","tickspeed_total","tickspeed_upgrades","tickspeed_galaxies","infinities_total","eternities_total","gamespeed_total","replicanti_total","allGamespeed","filter","unshift","dimTypes","singleRes","targetedEffects","achievement","checkFn","achievementDimCheck","DT","infinities","timeStudy","timeStudyDimCheck","replicanti","infinityChallenge","ICDimCheck","eternityChallenge","ECDimCheck","res","removedRegexes","removedProps","some","regex","match","undefined","AD_infinityPower","ID_purchase","ID_purchase_8","TD_purchase","TD_purchase_8","eff","id","propStr","dimStr","ach","ID_eternityUpgrade","TD_eternityUpgrade"],"mappings":"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","sourcesContent":["/* eslint-disable max-depth */\r\n/* eslint-disable camelcase */\r\nimport { MultiplierTabHelper } from \"./helper-functions\";\r\nimport { multiplierTabValues } from \"./values\";\r\n\r\nconst dynamicGenProps = [\"TP\", \"DT\", \"infinities\", \"eternities\", \"gamespeed\", \"replicanti\"];\r\nconst propList = {\r\n  AD: [\"purchase\", \"dimboost\", \"sacrifice\", \"achievementMult\", \"achievement\", \"infinityUpgrade\",\r\n    \"breakInfinityUpgrade\", \"infinityPower\", \"infinityChallenge\", \"timeStudy\", \"eternityChallenge\", \"glyph\", \"v\",\r\n    \"alchemy\", \"pelle\", \"iap\", \"effectNC\", \"nerfIC\", \"nerfV\", \"nerfCursed\", \"nerfPelle\"],\r\n  ID: [\"purchase\", \"achievementMult\", \"achievement\", \"replicanti\", \"infinityChallenge\", \"timeStudy\", \"eternityUpgrade\",\r\n    \"eternityChallenge\", \"glyph\", \"alchemy\", \"imaginaryUpgrade\", \"pelle\", \"iap\", \"nerfV\", \"nerfCursed\", \"nerfPelle\"],\r\n  TD: [\"purchase\", \"achievementMult\", \"achievement\", \"timeStudy\", \"eternityUpgrade\", \"eternityChallenge\",\r\n    \"dilationUpgrade\", \"realityUpgrade\", \"glyph\", \"alchemy\", \"imaginaryUpgrade\", \"pelle\", \"iap\", \"nerfV\", \"nerfCursed\"],\r\n  IP: [\"base\", \"infinityUpgrade\", \"achievement\", \"timeStudy\", \"dilationUpgrade\", \"glyph\", \"alchemy\", \"pelle\", \"iap\",\r\n    \"nerfTeresa\", \"nerfV\"],\r\n  EP: [\"base\", \"eternityUpgrade\", \"timeStudy\", \"glyph\", \"realityUpgrade\", \"pelle\", \"iap\", \"nerfTeresa\", \"nerfV\"],\r\n};\r\n\r\n// Some of the props above would contain every entry except \"total\" in their respective value GameDB entry, so we\r\n// generate them dynamically instead\r\nfor (const prop of dynamicGenProps) {\r\n  propList[prop] = [];\r\n  for (const toCopy of Object.keys(multiplierTabValues[prop])) {\r\n    if (toCopy !== \"total\") propList[prop].push(toCopy);\r\n  }\r\n}\r\n\r\n// Used for individual dimension breakdowns of effects (eg. full achievement mult into its values on individual ADs)\r\n// Results in an array of [\"key_1\", \"key_2\", ... , \"key_8\"]\r\nfunction append8(key) {\r\n  const props = [];\r\n  for (let dim = 1; dim <= 8; dim++) props.push(`${key}_${dim}`);\r\n  return props;\r\n}\r\n\r\n// Helper method to create very long lists of entries in the tree; format is \"RESOURCE_SOURCE_DIMENSION\"\r\nfunction getProps(resource, tier) {\r\n  const props = propList[resource].map(s => `${resource}_${s}`);\r\n  if (!tier) return props;\r\n  const newProps = [];\r\n  for (const effect of props) newProps.push(`${effect}_${tier}`);\r\n  return newProps;\r\n}\r\n\r\n// Everything in multiplierTabTree is associated with values in multiplierTabValues. The only explicitly\r\n// initialized props here are the \"root\" props which are viewable on the tab with full breakdowns. After the initial\r\n// specification, all children props are dynamically added based on the arrays in the helper functions above\r\nexport const multiplierTabTree = {\r\n  AM_total: [\r\n    [\"AD_total\", \"tickspeed_total\", \"AM_effarigAM\"]\r\n  ],\r\n  AD_total: [\r\n    getProps(\"AD\"),\r\n    append8(\"AD_total\")\r\n  ],\r\n  ID_total: [\r\n    getProps(\"ID\"),\r\n    append8(\"ID_total\")\r\n  ],\r\n  TD_total: [\r\n    getProps(\"TD\"),\r\n    append8(\"TD_total\")\r\n  ],\r\n  IP_total: [\r\n    getProps(\"IP\")\r\n  ],\r\n  IP_base: [\r\n    [\"IP_antimatter\", \"IP_divisor\"]\r\n  ],\r\n  EP_total: [\r\n    getProps(\"EP\")\r\n  ],\r\n  EP_base: [\r\n    [\"EP_IP\", \"EP_divisor\"]\r\n  ],\r\n  TP_total: [\r\n    getProps(\"TP\")\r\n  ],\r\n  DT_total: [\r\n    getProps(\"DT\")\r\n  ],\r\n  tickspeed_total: [\r\n    [\"tickspeed_base\", \"tickspeed_upgrades\", \"tickspeed_galaxies\", \"tickspeed_pelleTickspeedPow\"]\r\n  ],\r\n  tickspeed_upgrades: [\r\n    [\"tickspeedUpgrades_purchased\", \"tickspeedUpgrades_free\"]\r\n  ],\r\n  tickspeed_galaxies: [\r\n    [\"galaxies_antimatter\", \"galaxies_replicanti\", \"galaxies_tachyon\", \"galaxies_nerfPelle\"]\r\n  ],\r\n  infinities_total: [\r\n    getProps(\"infinities\")\r\n  ],\r\n  eternities_total: [\r\n    getProps(\"eternities\")\r\n  ],\r\n  gamespeed_total: [\r\n    getProps(\"gamespeed\")\r\n  ],\r\n  replicanti_total: [\r\n    getProps(\"replicanti\")\r\n  ],\r\n};\r\n\r\n// Gamespeed's two alternate displays are current and average gamespeed, distinguished by which of two\r\n// mutually-exclusive entries appear in the list. We explicity modify props here as needed\r\nconst allGamespeed = multiplierTabTree.gamespeed_total[0];\r\nmultiplierTabTree.gamespeed_total[0] = [...allGamespeed].filter(key => key !== \"gamespeed_blackHoleAvg\");\r\nmultiplierTabTree.gamespeed_total[1] = [...allGamespeed].filter(key => key !== \"gamespeed_blackHoleCurr\");\r\n\r\n// DT doesn't explicitly have an entry to TP, due to it being its own total entry, so we link them together\r\nmultiplierTabTree.DT_total[0].unshift(\"TP_total\");\r\n\r\n// Additional data specification for dynamically-generated props\r\nconst dimTypes = [\"AD\", \"ID\", \"TD\"];\r\nconst singleRes = [\"IP\", \"EP\", \"DT\", \"infinities\", \"replicanti\"];\r\nconst targetedEffects = {\r\n  achievement: {\r\n    checkFn: MultiplierTabHelper.achievementDimCheck,\r\n    AD: [23, 28, 31, 34, 43, 48, 56, 64, 65, 68, 71, 72, 73, 74, 76, 84, 91, 92, 183],\r\n    TD: [105, 128],\r\n    IP: [85, 93, 116, 125, 141],\r\n    DT: [132, 137],\r\n    infinities: [87, 131, 164],\r\n  },\r\n  timeStudy: {\r\n    checkFn: MultiplierTabHelper.timeStudyDimCheck,\r\n    AD: [71, 91, 101, 161, 193, 214, 234],\r\n    ID: [72, 82, 92, 102, 162],\r\n    TD: [11, 73, 93, 103, 151, 221, 227, 301],\r\n    IP: [41, 51, 141, 142, 143],\r\n    EP: [61, 121, 122, 123],\r\n    replicanti: [62, 132, 213],\r\n  },\r\n  infinityChallenge: {\r\n    checkFn: MultiplierTabHelper.ICDimCheck,\r\n    AD: [3, 4, 8],\r\n    ID: [1, 6],\r\n  },\r\n  eternityChallenge: {\r\n    checkFn: MultiplierTabHelper.ECDimCheck,\r\n    ID: [2, 4, 9],\r\n    TD: [1, 10],\r\n  },\r\n};\r\n\r\n// Highest actively-producing dimensions need a special case\r\nfor (const dim of dimTypes) {\r\n  multiplierTabTree[`${dim}_total`][0].push(`${dim}_highestDim`);\r\n  multiplierTabTree[`${dim}_total`][1].push(`${dim}_highestDim`);\r\n}\r\n\r\n// EC7 also needs a special case for tickspeed, since it doesn't appear on the multipliers themselves\r\nfor (const dim of [\"ID\", \"TD\"]) {\r\n  multiplierTabTree[`${dim}_total`][0].push(`${dim}_tickspeed`);\r\n  multiplierTabTree[`${dim}_total`][1].push(`${dim}_tickspeed`);\r\n}\r\n\r\n// Dynamically generate all values from existing values, but broken down by dimension\r\nfor (const res of dimTypes) {\r\n  for (const prop of getProps(res)) multiplierTabTree[prop] = [append8(prop)];\r\n  for (let dim = 1; dim <= 8; dim++) multiplierTabTree[`${res}_total_${dim}`] = [getProps(res, dim)];\r\n}\r\n\r\n// A few dynamically-generated props are largely useless in terms of what they connect to, in that they have very few\r\n// entries or have 8 identical entries, so we explicitly remove those lists for a cleaner appearance on the UI\r\nconst removedRegexes = [\"AD_sacrifice\", \"AD_breakInfinityUpgrade\", \"AD_nerfIC\", \"AD_infinityUpgrade\", \"AD_v\",\r\n  \"ID_replicanti\", \"ID_infinityChallenge\", \"ID_eternityUpgrades\",\r\n  \"TD_achievement\", \"TD_eternityUpgrade\", \"TD_dilationUpgrade\", \"TD_realityUpgrade\",\r\n  \".._achievementMult\", \".._glyph\", \".._alchemy\", \".._imaginaryUpgrade\", \".._iap\",\r\n  \".._nerfV\", \".._nerfCursed\", \".._nerfPelle\", \".._pelle\"\r\n];\r\nconst removedProps = Object.keys(multiplierTabTree)\r\n  .filter(key => removedRegexes.some(regex => key.match(regex)));\r\nfor (const prop of removedProps) {\r\n  multiplierTabTree[prop] = undefined;\r\n}\r\n\r\n// We need to handle infinity power multiplier a bit differently; previous steps of dynamic generation fill it with\r\n// 8 identical AD multipliers, but we want to replace it with ID mults and the conversion rate\r\nmultiplierTabTree.AD_infinityPower = [[\"ID_total\", \"ID_powerConversion\"]];\r\nfor (let dim = 1; dim <= 8; dim++) {\r\n  multiplierTabTree[`AD_infinityPower_${dim}`] = [[\"ID_total\", \"ID_powerConversion\"]];\r\n}\r\n\r\n// Tesseracts are added one layer deep, but we don't want to override the existing ID_purchase entry\r\nmultiplierTabTree.ID_purchase.unshift([\"ID_basePurchase\", \"ID_tesseractPurchase\",\r\n  \"ID_infinityGlyphSacrifice\", \"ID_powPurchase\"]);\r\nfor (let dim = 1; dim <= 7; dim++) {\r\n  multiplierTabTree[`ID_purchase_${dim}`] = [[`ID_basePurchase_${dim}`, `ID_tesseractPurchase_${dim}`,\r\n    \"ID_powPurchase\"]];\r\n}\r\nmultiplierTabTree.ID_purchase_8 = [[`ID_basePurchase_8`, `ID_infinityGlyphSacrifice`, \"ID_powPurchase\"]];\r\n\r\n// These are also added one layer deep\r\nfor (let dim = 1; dim <= 7; dim++) {\r\n  multiplierTabTree[`TD_purchase_${dim}`] = [[`TD_basePurchase_${dim}`, `TD_powPurchase_${dim}`]];\r\n}\r\nmultiplierTabTree.TD_purchase.push([\"TD_basePurchase\", \"TD_timeGlyphSacrifice\", \"TD_powPurchase\"]);\r\nmultiplierTabTree.TD_purchase_8 = [[\"TD_basePurchase_8\", \"TD_timeGlyphSacrifice\", \"TD_powPurchase\"]];\r\n\r\n// Dynamically fill effects which only affect certain dimensions, as noted in targetedEffects\r\nfor (const res of dimTypes) {\r\n  for (const eff of Object.keys(targetedEffects)) {\r\n    if (!targetedEffects[eff][res]) continue;\r\n    multiplierTabTree[`${res}_${eff}`] = [[]];\r\n    for (const id of targetedEffects[eff][res]) {\r\n      for (let dim = 1; dim <= 8; dim++) {\r\n        const propStr = `${res}_${eff}_${dim}`;\r\n        const dimStr = `${res}${dim}`;\r\n        if (targetedEffects[eff].checkFn(id, dimStr)) {\r\n          if (!multiplierTabTree[propStr]) multiplierTabTree[propStr] = [[]];\r\n          multiplierTabTree[propStr][0].push(`general_${eff}_${id}_${dimStr}`);\r\n        }\r\n      }\r\n      multiplierTabTree[`${res}_${eff}`][0].push(`general_${eff}_${id}_${res}`);\r\n    }\r\n  }\r\n}\r\n\r\n// Dynamically fill effects which affect single resources as well\r\nfor (const res of singleRes) {\r\n  for (const eff of Object.keys(targetedEffects)) {\r\n    if (!targetedEffects[eff][res]) continue;\r\n    multiplierTabTree[`${res}_${eff}`] = [[]];\r\n    for (const ach of targetedEffects[eff][res]) {\r\n      multiplierTabTree[`${res}_${eff}`][0].push(`general_${eff}_${ach}`);\r\n    }\r\n  }\r\n}\r\n\r\n// Fill in eternity upgrade entries\r\nmultiplierTabTree.ID_eternityUpgrade = [[`ID_eu1`, `ID_eu2`, `ID_eu3`]];\r\nmultiplierTabTree.TD_eternityUpgrade = [[`TD_eu1`, `TD_eu2`]];\r\nfor (let dim = 1; dim <= 8; dim++) {\r\n  multiplierTabTree[`ID_eternityUpgrade_${dim}`] = [[`ID_eu1_${dim}`, `ID_eu2_${dim}`, `ID_eu3_${dim}`]];\r\n  multiplierTabTree[`TD_eternityUpgrade_${dim}`] = [[`TD_eu1_${dim}`, `TD_eu2_${dim}`]];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}