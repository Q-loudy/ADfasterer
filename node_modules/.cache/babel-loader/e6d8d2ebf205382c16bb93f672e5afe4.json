{"ast":null,"code":"import \"core-js/modules/es.array.flat-map.js\";\nimport \"core-js/modules/es.array.unscopables.flat-map.js\";\nimport { TimeStudyState } from \"./time-studies\";\nexport const NormalTimeStudies = {};\nNormalTimeStudies.pathList = [{\n  path: TIME_STUDY_PATH.ANTIMATTER_DIM,\n  studies: [71, 81, 91, 101],\n  name: \"Antimatter Dims\"\n}, {\n  path: TIME_STUDY_PATH.INFINITY_DIM,\n  studies: [72, 82, 92, 102],\n  name: \"Infinity Dims\"\n}, {\n  path: TIME_STUDY_PATH.TIME_DIM,\n  studies: [73, 83, 93, 103],\n  name: \"Time Dims\"\n}, {\n  path: TIME_STUDY_PATH.ACTIVE,\n  studies: [121, 131, 141],\n  name: \"Active\"\n}, {\n  path: TIME_STUDY_PATH.PASSIVE,\n  studies: [122, 132, 142],\n  name: \"Passive\"\n}, {\n  path: TIME_STUDY_PATH.IDLE,\n  studies: [123, 133, 143],\n  name: \"Idle\"\n}, {\n  path: TIME_STUDY_PATH.LIGHT,\n  studies: [221, 223, 225, 227, 231, 233],\n  name: \"Light\"\n}, {\n  path: TIME_STUDY_PATH.DARK,\n  studies: [222, 224, 226, 228, 232, 234],\n  name: \"Dark\"\n}];\nNormalTimeStudies.paths = NormalTimeStudies.pathList.mapToObject(e => e.path, e => e.studies);\nexport class NormalTimeStudyState extends TimeStudyState {\n  constructor(config) {\n    var _path$path;\n\n    const type = config.id > 300 ? TIME_STUDY_TYPE.TRIAD : TIME_STUDY_TYPE.NORMAL;\n    super(config, type);\n    const path = NormalTimeStudies.pathList.find(p => p.studies.includes(this.id));\n    this._path = (_path$path = path === null || path === void 0 ? void 0 : path.path) !== null && _path$path !== void 0 ? _path$path : TIME_STUDY_PATH.NONE;\n  }\n\n  get isUnlocked() {\n    var _this$config$unlocked, _this$config$unlocked2, _this$config;\n\n    return (_this$config$unlocked = (_this$config$unlocked2 = (_this$config = this.config).unlocked) === null || _this$config$unlocked2 === void 0 ? void 0 : _this$config$unlocked2.call(_this$config)) !== null && _this$config$unlocked !== void 0 ? _this$config$unlocked : true;\n  }\n\n  get isTriad() {\n    return this.id > 300;\n  }\n\n  get isBought() {\n    return GameCache.timeStudies.value[this.id];\n  } // The requiresST prop is an array containing IDs indicating other studies which, if ANY in the array are purchased,\n  // will cause the study to also cost space theorems. This array is effectively assumed to be empty if not present.\n\n\n  costsST() {\n    return this.config.requiresST && this.config.requiresST.some(s => TimeStudy(s).isBought);\n  }\n\n  checkRequirement() {\n    const check = req => typeof req === \"number\" ? TimeStudy(req).isBought : req();\n\n    const currTree = GameCache.currentStudyTree.value;\n\n    switch (this.config.reqType) {\n      case TS_REQUIREMENT_TYPE.AT_LEAST_ONE:\n        return this.config.requirement.some(r => check(r));\n\n      case TS_REQUIREMENT_TYPE.ALL:\n        return this.config.requirement.every(r => check(r));\n\n      case TS_REQUIREMENT_TYPE.DIMENSION_PATH:\n        // In some cases of loading, sometimes the current tree might be undefined when this code is executed. The\n        // exact situations seem unclear, but it may be an interaction between the automator and offline progress\n        return this.config.requirement.every(r => check(r)) && currTree && currTree.currDimPathCount < currTree.allowedDimPathCount;\n\n      default:\n        throw Error(`Unrecognized TS requirement type: ${this.reqType}`);\n    }\n  } // This checks for and forbids buying studies due to being part of a set which can't normally be bought\n  // together (eg. active/passive/idle and light/dark) unless the player has the requisite ST.\n\n\n  checkSetRequirement() {\n    return this.costsST() ? !Pelle.isDisabled(\"V\") && V.availableST >= this.STCost : true;\n  }\n\n  get canBeBought() {\n    return this.checkRequirement() && this.checkSetRequirement();\n  }\n\n  get isEffectActive() {\n    return this.isBought;\n  }\n\n  purchase(auto = false) {\n    if (this.isBought || !this.isAffordable || !this.canBeBought) return false;\n    if (GameEnd.creditsEverClosed) return false;\n\n    if (ImaginaryUpgrade(19).isLockingMechanics && player.timestudy.studies.length === 8) {\n      if (!auto) ImaginaryUpgrade(19).tryShowWarningModal();\n      return false;\n    }\n\n    if (this.costsST()) player.celestials.v.STSpent += this.STCost;\n    player.timestudy.studies.push(this.id);\n    player.requirementChecks.reality.maxStudies = Math.clampMin(player.requirementChecks.reality.maxStudies, player.timestudy.studies.length);\n    if (this.id > 300) player.requirementChecks.reality.noTriads = false;\n    Currency.timeTheorems.subtract(this.cost);\n    GameCache.timeStudies.invalidate();\n    TimeStudyTree.commitToGameState([TimeStudy(this.id)]);\n    if (this.id === 181 && Pelle.isDoomed) Achievement(186).unlock();\n    return true;\n  }\n\n  purchaseUntil() {\n    TimeStudyTree.commitToGameState(buyStudiesUntil(this.id));\n  }\n\n  get path() {\n    return this._path;\n  }\n\n}\nNormalTimeStudyState.studies = mapGameData(GameDatabase.eternity.timeStudies.normal, config => new NormalTimeStudyState(config));\nNormalTimeStudyState.all = NormalTimeStudyState.studies.filter(e => e !== undefined);\n/**\r\n * @returns {NormalTimeStudyState}\r\n */\n\nexport function TimeStudy(id) {\n  return NormalTimeStudyState.studies[id];\n}\n/**\r\n * @returns {NormalTimeStudyState[]}\r\n */\n\nTimeStudy.boughtNormalTS = function () {\n  return player.timestudy.studies.map(id => TimeStudy(id));\n};\n\nTimeStudy.preferredPaths = {\n  dimension: {\n    get path() {\n      return player.timestudy.preferredPaths[0];\n    },\n\n    set path(value) {\n      const options = [1, 2, 3];\n      player.timestudy.preferredPaths[0] = value.filter(id => options.includes(id));\n    },\n\n    get studies() {\n      return player.timestudy.preferredPaths[0].flatMap(path => NormalTimeStudies.paths[path]);\n    },\n\n    get usePriority() {\n      return this.path.length > 1 || TimeStudy(201).isBought || DilationUpgrade.timeStudySplit.isBought || PlayerProgress.realityUnlocked();\n    }\n\n  },\n  pace: {\n    get path() {\n      return player.timestudy.preferredPaths[1];\n    },\n\n    set path(value) {\n      const options = [4, 5, 6];\n      player.timestudy.preferredPaths[1] = options.includes(value) ? value : 0;\n    },\n\n    get studies() {\n      return NormalTimeStudies.paths[player.timestudy.preferredPaths[1]];\n    }\n\n  }\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/time-studies/normal-time-study.js"],"names":["TimeStudyState","NormalTimeStudies","pathList","path","TIME_STUDY_PATH","ANTIMATTER_DIM","studies","name","INFINITY_DIM","TIME_DIM","ACTIVE","PASSIVE","IDLE","LIGHT","DARK","paths","mapToObject","e","NormalTimeStudyState","constructor","config","type","id","TIME_STUDY_TYPE","TRIAD","NORMAL","find","p","includes","_path","NONE","isUnlocked","unlocked","isTriad","isBought","GameCache","timeStudies","value","costsST","requiresST","some","s","TimeStudy","checkRequirement","check","req","currTree","currentStudyTree","reqType","TS_REQUIREMENT_TYPE","AT_LEAST_ONE","requirement","r","ALL","every","DIMENSION_PATH","currDimPathCount","allowedDimPathCount","Error","checkSetRequirement","Pelle","isDisabled","V","availableST","STCost","canBeBought","isEffectActive","purchase","auto","isAffordable","GameEnd","creditsEverClosed","ImaginaryUpgrade","isLockingMechanics","player","timestudy","length","tryShowWarningModal","celestials","v","STSpent","push","requirementChecks","reality","maxStudies","Math","clampMin","noTriads","Currency","timeTheorems","subtract","cost","invalidate","TimeStudyTree","commitToGameState","isDoomed","Achievement","unlock","purchaseUntil","buyStudiesUntil","mapGameData","GameDatabase","eternity","normal","all","filter","undefined","boughtNormalTS","map","preferredPaths","dimension","options","flatMap","usePriority","DilationUpgrade","timeStudySplit","PlayerProgress","realityUnlocked","pace"],"mappings":"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","sourcesContent":["import { TimeStudyState } from \"./time-studies\";\r\n\r\nexport const NormalTimeStudies = {};\r\n\r\nNormalTimeStudies.pathList = [\r\n  { path: TIME_STUDY_PATH.ANTIMATTER_DIM, studies: [71, 81, 91, 101], name: \"Antimatter Dims\" },\r\n  { path: TIME_STUDY_PATH.INFINITY_DIM, studies: [72, 82, 92, 102], name: \"Infinity Dims\" },\r\n  { path: TIME_STUDY_PATH.TIME_DIM, studies: [73, 83, 93, 103], name: \"Time Dims\" },\r\n  { path: TIME_STUDY_PATH.ACTIVE, studies: [121, 131, 141], name: \"Active\" },\r\n  { path: TIME_STUDY_PATH.PASSIVE, studies: [122, 132, 142], name: \"Passive\" },\r\n  { path: TIME_STUDY_PATH.IDLE, studies: [123, 133, 143], name: \"Idle\" },\r\n  { path: TIME_STUDY_PATH.LIGHT, studies: [221, 223, 225, 227, 231, 233], name: \"Light\" },\r\n  { path: TIME_STUDY_PATH.DARK, studies: [222, 224, 226, 228, 232, 234], name: \"Dark\" }\r\n];\r\n\r\nNormalTimeStudies.paths = NormalTimeStudies.pathList.mapToObject(e => e.path, e => e.studies);\r\n\r\nexport class NormalTimeStudyState extends TimeStudyState {\r\n  constructor(config) {\r\n    const type = config.id > 300 ? TIME_STUDY_TYPE.TRIAD : TIME_STUDY_TYPE.NORMAL;\r\n    super(config, type);\r\n    const path = NormalTimeStudies.pathList.find(p => p.studies.includes(this.id));\r\n    this._path = path?.path ?? TIME_STUDY_PATH.NONE;\r\n  }\r\n\r\n  get isUnlocked() {\r\n    return this.config.unlocked?.() ?? true;\r\n  }\r\n\r\n  get isTriad() {\r\n    return this.id > 300;\r\n  }\r\n\r\n  get isBought() {\r\n    return GameCache.timeStudies.value[this.id];\r\n  }\r\n\r\n  // The requiresST prop is an array containing IDs indicating other studies which, if ANY in the array are purchased,\r\n  // will cause the study to also cost space theorems. This array is effectively assumed to be empty if not present.\r\n  costsST() {\r\n    return this.config.requiresST && this.config.requiresST.some(s => TimeStudy(s).isBought);\r\n  }\r\n\r\n  checkRequirement() {\r\n    const check = req => (typeof req === \"number\"\r\n      ? TimeStudy(req).isBought\r\n      : req());\r\n    const currTree = GameCache.currentStudyTree.value;\r\n    switch (this.config.reqType) {\r\n      case TS_REQUIREMENT_TYPE.AT_LEAST_ONE:\r\n        return this.config.requirement.some(r => check(r));\r\n      case TS_REQUIREMENT_TYPE.ALL:\r\n        return this.config.requirement.every(r => check(r));\r\n      case TS_REQUIREMENT_TYPE.DIMENSION_PATH:\r\n        // In some cases of loading, sometimes the current tree might be undefined when this code is executed. The\r\n        // exact situations seem unclear, but it may be an interaction between the automator and offline progress\r\n        return this.config.requirement.every(r => check(r)) && currTree &&\r\n          currTree.currDimPathCount < currTree.allowedDimPathCount;\r\n      default:\r\n        throw Error(`Unrecognized TS requirement type: ${this.reqType}`);\r\n    }\r\n  }\r\n\r\n  // This checks for and forbids buying studies due to being part of a set which can't normally be bought\r\n  // together (eg. active/passive/idle and light/dark) unless the player has the requisite ST.\r\n  checkSetRequirement() {\r\n    return this.costsST() ? !Pelle.isDisabled(\"V\") && (V.availableST >= this.STCost) : true;\r\n  }\r\n\r\n  get canBeBought() {\r\n    return this.checkRequirement() && this.checkSetRequirement();\r\n  }\r\n\r\n  get isEffectActive() {\r\n    return this.isBought;\r\n  }\r\n\r\n  purchase(auto = false) {\r\n    if (this.isBought || !this.isAffordable || !this.canBeBought) return false;\r\n    if (GameEnd.creditsEverClosed) return false;\r\n    if (ImaginaryUpgrade(19).isLockingMechanics && player.timestudy.studies.length === 8) {\r\n      if (!auto) ImaginaryUpgrade(19).tryShowWarningModal();\r\n      return false;\r\n    }\r\n    if (this.costsST()) player.celestials.v.STSpent += this.STCost;\r\n    player.timestudy.studies.push(this.id);\r\n    player.requirementChecks.reality.maxStudies = Math.clampMin(player.requirementChecks.reality.maxStudies,\r\n      player.timestudy.studies.length);\r\n    if (this.id > 300) player.requirementChecks.reality.noTriads = false;\r\n    Currency.timeTheorems.subtract(this.cost);\r\n    GameCache.timeStudies.invalidate();\r\n    TimeStudyTree.commitToGameState([TimeStudy(this.id)]);\r\n    if (this.id === 181 && Pelle.isDoomed) Achievement(186).unlock();\r\n    return true;\r\n  }\r\n\r\n  purchaseUntil() {\r\n    TimeStudyTree.commitToGameState(buyStudiesUntil(this.id));\r\n  }\r\n\r\n  get path() {\r\n    return this._path;\r\n  }\r\n}\r\n\r\nNormalTimeStudyState.studies = mapGameData(\r\n  GameDatabase.eternity.timeStudies.normal,\r\n  config => new NormalTimeStudyState(config)\r\n);\r\n\r\nNormalTimeStudyState.all = NormalTimeStudyState.studies.filter(e => e !== undefined);\r\n\r\n/**\r\n * @returns {NormalTimeStudyState}\r\n */\r\nexport function TimeStudy(id) {\r\n  return NormalTimeStudyState.studies[id];\r\n}\r\n\r\n/**\r\n * @returns {NormalTimeStudyState[]}\r\n */\r\nTimeStudy.boughtNormalTS = function() {\r\n  return player.timestudy.studies.map(id => TimeStudy(id));\r\n};\r\n\r\nTimeStudy.preferredPaths = {\r\n  dimension: {\r\n    get path() {\r\n      return player.timestudy.preferredPaths[0];\r\n    },\r\n    set path(value) {\r\n      const options = [1, 2, 3];\r\n      player.timestudy.preferredPaths[0] = value.filter(id => options.includes(id));\r\n    },\r\n    get studies() {\r\n      return player.timestudy.preferredPaths[0].flatMap(path => NormalTimeStudies.paths[path]);\r\n    },\r\n    get usePriority() {\r\n      return this.path.length > 1 ||\r\n        TimeStudy(201).isBought ||\r\n        DilationUpgrade.timeStudySplit.isBought ||\r\n        PlayerProgress.realityUnlocked();\r\n    }\r\n  },\r\n  pace: {\r\n    get path() {\r\n      return player.timestudy.preferredPaths[1];\r\n    },\r\n    set path(value) {\r\n      const options = [4, 5, 6];\r\n      player.timestudy.preferredPaths[1] = options.includes(value) ? value : 0;\r\n    },\r\n    get studies() {\r\n      return NormalTimeStudies.paths[player.timestudy.preferredPaths[1]];\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}