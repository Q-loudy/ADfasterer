{"ast":null,"code":"export default {\n  name: \"ReplicantiGainText\",\n\n  data() {\n    return {\n      remainingTimeText: \"\",\n      galaxyText: \"\"\n    };\n  },\n\n  methods: {\n    update() {\n      const updateRateMs = player.options.updateRate;\n      const ticksPerSecond = 1000 / updateRateMs;\n      const logGainFactorPerTick = Decimal.divide(getGameSpeedupForDisplay() * updateRateMs * Math.log(player.replicanti.chance + 1), getReplicantiInterval());\n      const log10GainFactorPerTick = logGainFactorPerTick.dividedBy(Math.LN10); // The uncapped factor is needed for galaxy speed calculations\n\n      const log10GainFactorPerTickUncapped = Decimal.divide(getGameSpeedupForDisplay() * updateRateMs * Math.log(player.replicanti.chance + 1), getReplicantiInterval(false)).dividedBy(Math.LN10);\n      const replicantiAmount = Replicanti.amount;\n      const isAbove308 = Replicanti.isUncapped && replicantiAmount.log10() > LOG10_MAX_VALUE;\n\n      if (isAbove308) {\n        const postScale = Math.log10(ReplicantiGrowth.scaleFactor) / ReplicantiGrowth.scaleLog10;\n        const gainFactorPerSecond = logGainFactorPerTick.times(postScale).plus(1).pow(ticksPerSecond / postScale); // The calculations to estimate time to next milestone of OoM based on game state, assumes that uncapped\n        // replicanti growth scales as time^1/postScale, which turns out to be a reasonable approximation.\n\n        const milestoneStep = Pelle.isDoomed ? 100 : 1000;\n        const nextMilestone = Decimal.pow10(milestoneStep * Math.floor(replicantiAmount.log10() / milestoneStep + 1));\n        const coeff = Decimal.divide(updateRateMs / 1000, logGainFactorPerTick.times(postScale));\n        const timeToThousand = coeff.times(nextMilestone.divide(replicantiAmount).pow(postScale).minus(1)); // The calculation seems to choke and return zero if the time is too large, probably because of rounding issues\n\n        const timeEstimateText = timeToThousand.eq(0) ? \"an extremely long time\" : `${TimeSpan.fromSeconds(timeToThousand.toNumber())}`;\n        this.remainingTimeText = `You are gaining ${formatX(gainFactorPerSecond, 2, 1)} Replicanti per second` + ` (${timeEstimateText} until ${format(nextMilestone)})`;\n      } else {\n        this.remainingTimeText = \"\";\n      }\n\n      const totalTime = LOG10_MAX_VALUE / (ticksPerSecond * log10GainFactorPerTick.toNumber());\n      let remainingTime = (LOG10_MAX_VALUE - replicantiAmount.log10()) / (ticksPerSecond * log10GainFactorPerTick.toNumber());\n\n      if (remainingTime < 0) {\n        // If the cap is raised via Effarig Infinity but the player doesn't have TS192, this will be a negative number\n        remainingTime = 0;\n      }\n\n      const galaxiesPerSecond = log10GainFactorPerTickUncapped.times(ticksPerSecond / LOG10_MAX_VALUE);\n\n      const timeFromZeroRG = galaxies => 50 * Math.log((galaxies + 49.5) / 49.5);\n\n      let baseGalaxiesPerSecond, effectiveMaxRG, effectiveCurrentRG;\n\n      if (RealityUpgrade(6).isBought && !Pelle.isDoomed) {\n        baseGalaxiesPerSecond = galaxiesPerSecond.divide(RealityUpgrade(6).effectValue);\n        effectiveMaxRG = timeFromZeroRG(Replicanti.galaxies.max + Replicanti.galaxies.extra) - timeFromZeroRG(Replicanti.galaxies.extra);\n        effectiveCurrentRG = timeFromZeroRG(Replicanti.galaxies.bought + Replicanti.galaxies.extra) - timeFromZeroRG(Replicanti.galaxies.extra);\n      } else {\n        baseGalaxiesPerSecond = galaxiesPerSecond;\n        effectiveMaxRG = Replicanti.galaxies.max;\n        effectiveCurrentRG = Replicanti.galaxies.bought;\n      }\n\n      const secondsPerGalaxy = galaxiesPerSecond.reciprocal();\n\n      if (this.remainingTimeText === \"\") {\n        if (remainingTime === 0) {\n          this.remainingTimeText = `At Infinite Replicanti (normally takes\n            ${TimeSpan.fromSeconds(secondsPerGalaxy.toNumber())})`;\n        } else if (replicantiAmount.lt(100)) {\n          // Because of discrete replication, we add \"Approximately\" at very low amounts\n          this.remainingTimeText = `Approximately ${TimeSpan.fromSeconds(remainingTime)} remaining\n            until Infinite Replicanti`;\n        } else {\n          this.remainingTimeText = `${TimeSpan.fromSeconds(remainingTime)} remaining until Infinite Replicanti`;\n        }\n      } // If the player can get RG, this text is redundant with text below. It denotes total time from 1 to e308\n\n\n      if (Replicanti.galaxies.max === 0 && !isAbove308) {\n        this.remainingTimeText += ` (${TimeSpan.fromSeconds(totalTime)} total)`;\n      }\n\n      if (Replicanti.galaxies.max > 0) {\n        // If the player has max RGs, don't display the \"You are gaining blah\" text\n        if (player.replicanti.galaxies === Replicanti.galaxies.max) {\n          this.galaxyText = \"You have reached the maximum amount of Replicanti Galaxies\";\n        } else {\n          this.galaxyText = `You are gaining a Replicanti Galaxy every\n            ${TimeSpan.fromSeconds(secondsPerGalaxy.toNumber())}`;\n\n          if (galaxiesPerSecond.gte(1)) {\n            this.galaxyText = `You are gaining ${quantify(\"Replicanti Galaxy\", galaxiesPerSecond, 2, 1)} per second`;\n          } // Take the total time from zero replicanti to max RG + e308 replicanti and then subtract away the time which\n          // has already elapsed. The time elapsed is calculated from your current RG total (including the current one)\n          // and then subtracts away the time spent in the current RG so far.\n\n\n          const allGalaxyTime = Decimal.divide(effectiveMaxRG - effectiveCurrentRG, baseGalaxiesPerSecond).toNumber(); // Pending galaxy gain is here because the growth slows down significantly after\n          // 1e308 normally. However, the seconds per galaxy code is calculated as if\n          // uncapped since nobody would wait for 1e52345325 replicanti to buy an RG.\n          // To solve this problem, after 1e308, it uses the pending value as the basis of\n          // how \"\"close\"\" you are to the next galaxy instead of replicanti amount,\n          // which is a good enough best case approximation in my opinion.\n          // Note: This pending case ignores Reality Upgrade 6 but it's not really accurate anyway\n          // (basically assumes you'll get all your possible RGs now) so that's probably fine.\n\n          const pending = Replicanti.galaxies.gain;\n          let pendingTime = pending * secondsPerGalaxy.toNumber(); // If popular music is unlocked add the divide amount\n\n          if (Achievement(126).isUnlocked && !Pelle.isDoomed) {\n            const leftPercentAfterGalaxy = replicantiAmount.log10() / LOG10_MAX_VALUE - pending;\n            pendingTime += leftPercentAfterGalaxy * secondsPerGalaxy.toNumber();\n          }\n\n          const thisGalaxyTime = pending > 0 ? pendingTime : secondsPerGalaxy.toNumber() - remainingTime;\n          this.galaxyText += ` (all Replicanti Galaxies within\n            ${TimeSpan.fromSeconds(Math.clampMin(allGalaxyTime - thisGalaxyTime, 0))})`;\n        }\n      } else {\n        this.galaxyText = ``;\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["ReplicantiGainText.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nexport default {\r\n  name: \"ReplicantiGainText\",\r\n  data() {\r\n    return {\r\n      remainingTimeText: \"\",\r\n      galaxyText: \"\"\r\n    };\r\n  },\r\n  methods: {\r\n    update() {\r\n      const updateRateMs = player.options.updateRate;\r\n      const ticksPerSecond = 1000 / updateRateMs;\r\n      const logGainFactorPerTick = Decimal.divide(getGameSpeedupForDisplay() * updateRateMs *\r\n        (Math.log(player.replicanti.chance + 1)), getReplicantiInterval());\r\n      const log10GainFactorPerTick = logGainFactorPerTick.dividedBy(Math.LN10);\r\n\r\n      // The uncapped factor is needed for galaxy speed calculations\r\n      const log10GainFactorPerTickUncapped = Decimal.divide(getGameSpeedupForDisplay() * updateRateMs *\r\n        (Math.log(player.replicanti.chance + 1)), getReplicantiInterval(false)).dividedBy(Math.LN10);\r\n\r\n      const replicantiAmount = Replicanti.amount;\r\n      const isAbove308 = Replicanti.isUncapped && replicantiAmount.log10() > LOG10_MAX_VALUE;\r\n\r\n      if (isAbove308) {\r\n        const postScale = Math.log10(ReplicantiGrowth.scaleFactor) / ReplicantiGrowth.scaleLog10;\r\n        const gainFactorPerSecond = logGainFactorPerTick\r\n          .times(postScale)\r\n          .plus(1)\r\n          .pow(ticksPerSecond / postScale);\r\n        // The calculations to estimate time to next milestone of OoM based on game state, assumes that uncapped\r\n        // replicanti growth scales as time^1/postScale, which turns out to be a reasonable approximation.\r\n        const milestoneStep = Pelle.isDoomed ? 100 : 1000;\r\n        const nextMilestone = Decimal.pow10(milestoneStep * Math.floor(replicantiAmount.log10() / milestoneStep + 1));\r\n        const coeff = Decimal.divide(updateRateMs / 1000, logGainFactorPerTick.times(postScale));\r\n        const timeToThousand = coeff.times(nextMilestone.divide(replicantiAmount).pow(postScale).minus(1));\r\n        // The calculation seems to choke and return zero if the time is too large, probably because of rounding issues\r\n        const timeEstimateText = timeToThousand.eq(0)\r\n          ? \"an extremely long time\"\r\n          : `${TimeSpan.fromSeconds(timeToThousand.toNumber())}`;\r\n        this.remainingTimeText = `You are gaining ${formatX(gainFactorPerSecond, 2, 1)} Replicanti per second` +\r\n          ` (${timeEstimateText} until ${format(nextMilestone)})`;\r\n      } else {\r\n        this.remainingTimeText = \"\";\r\n      }\r\n\r\n      const totalTime = LOG10_MAX_VALUE / (ticksPerSecond * log10GainFactorPerTick.toNumber());\r\n      let remainingTime = (LOG10_MAX_VALUE - replicantiAmount.log10()) /\r\n        (ticksPerSecond * log10GainFactorPerTick.toNumber());\r\n      if (remainingTime < 0) {\r\n        // If the cap is raised via Effarig Infinity but the player doesn't have TS192, this will be a negative number\r\n        remainingTime = 0;\r\n      }\r\n\r\n      const galaxiesPerSecond = log10GainFactorPerTickUncapped.times(ticksPerSecond / LOG10_MAX_VALUE);\r\n      const timeFromZeroRG = galaxies => 50 * Math.log((galaxies + 49.5) / 49.5);\r\n      let baseGalaxiesPerSecond, effectiveMaxRG, effectiveCurrentRG;\r\n      if (RealityUpgrade(6).isBought && !Pelle.isDoomed) {\r\n        baseGalaxiesPerSecond = galaxiesPerSecond.divide(RealityUpgrade(6).effectValue);\r\n        effectiveMaxRG = timeFromZeroRG(Replicanti.galaxies.max + Replicanti.galaxies.extra) -\r\n          timeFromZeroRG(Replicanti.galaxies.extra);\r\n        effectiveCurrentRG = timeFromZeroRG(Replicanti.galaxies.bought + Replicanti.galaxies.extra) -\r\n          timeFromZeroRG(Replicanti.galaxies.extra);\r\n      } else {\r\n        baseGalaxiesPerSecond = galaxiesPerSecond;\r\n        effectiveMaxRG = Replicanti.galaxies.max;\r\n        effectiveCurrentRG = Replicanti.galaxies.bought;\r\n      }\r\n      const secondsPerGalaxy = galaxiesPerSecond.reciprocal();\r\n\r\n      if (this.remainingTimeText === \"\") {\r\n        if (remainingTime === 0) {\r\n          this.remainingTimeText = `At Infinite Replicanti (normally takes\r\n            ${TimeSpan.fromSeconds(secondsPerGalaxy.toNumber())})`;\r\n        } else if (replicantiAmount.lt(100)) {\r\n          // Because of discrete replication, we add \"Approximately\" at very low amounts\r\n          this.remainingTimeText = `Approximately ${TimeSpan.fromSeconds(remainingTime)} remaining\r\n            until Infinite Replicanti`;\r\n        } else {\r\n          this.remainingTimeText = `${TimeSpan.fromSeconds(remainingTime)} remaining until Infinite Replicanti`;\r\n        }\r\n      }\r\n\r\n      // If the player can get RG, this text is redundant with text below. It denotes total time from 1 to e308\r\n      if (Replicanti.galaxies.max === 0 && !isAbove308) {\r\n        this.remainingTimeText += ` (${TimeSpan.fromSeconds(totalTime)} total)`;\r\n      }\r\n\r\n\r\n      if (Replicanti.galaxies.max > 0) {\r\n        // If the player has max RGs, don't display the \"You are gaining blah\" text\r\n        if (player.replicanti.galaxies === Replicanti.galaxies.max) {\r\n          this.galaxyText = \"You have reached the maximum amount of Replicanti Galaxies\";\r\n        } else {\r\n          this.galaxyText = `You are gaining a Replicanti Galaxy every\r\n            ${TimeSpan.fromSeconds(secondsPerGalaxy.toNumber())}`;\r\n          if (galaxiesPerSecond.gte(1)) {\r\n            this.galaxyText = `You are gaining ${quantify(\"Replicanti Galaxy\", galaxiesPerSecond, 2, 1)} per second`;\r\n          }\r\n          // Take the total time from zero replicanti to max RG + e308 replicanti and then subtract away the time which\r\n          // has already elapsed. The time elapsed is calculated from your current RG total (including the current one)\r\n          // and then subtracts away the time spent in the current RG so far.\r\n          const allGalaxyTime = Decimal.divide(effectiveMaxRG - effectiveCurrentRG, baseGalaxiesPerSecond).toNumber();\r\n\r\n          // Pending galaxy gain is here because the growth slows down significantly after\r\n          // 1e308 normally. However, the seconds per galaxy code is calculated as if\r\n          // uncapped since nobody would wait for 1e52345325 replicanti to buy an RG.\r\n          // To solve this problem, after 1e308, it uses the pending value as the basis of\r\n          // how \"\"close\"\" you are to the next galaxy instead of replicanti amount,\r\n          // which is a good enough best case approximation in my opinion.\r\n          // Note: This pending case ignores Reality Upgrade 6 but it's not really accurate anyway\r\n          // (basically assumes you'll get all your possible RGs now) so that's probably fine.\r\n          const pending = Replicanti.galaxies.gain;\r\n          let pendingTime = pending * secondsPerGalaxy.toNumber();\r\n          // If popular music is unlocked add the divide amount\r\n          if (Achievement(126).isUnlocked && !Pelle.isDoomed) {\r\n            const leftPercentAfterGalaxy = replicantiAmount.log10() / LOG10_MAX_VALUE - pending;\r\n            pendingTime += leftPercentAfterGalaxy * secondsPerGalaxy.toNumber();\r\n          }\r\n          const thisGalaxyTime = pending > 0 ? pendingTime : secondsPerGalaxy.toNumber() - remainingTime;\r\n          this.galaxyText += ` (all Replicanti Galaxies within\r\n            ${TimeSpan.fromSeconds(Math.clampMin(allGalaxyTime - thisGalaxyTime, 0))})`;\r\n        }\r\n      } else {\r\n        this.galaxyText = ``;\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <p>{{ remainingTimeText }}<br>{{ galaxyText }}</p>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/replicanti"},"metadata":{},"sourceType":"module"}