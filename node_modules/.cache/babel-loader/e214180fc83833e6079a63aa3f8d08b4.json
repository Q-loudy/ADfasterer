{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nexport default {\n  name: \"AutoSacrificeAdvancedTab\",\n  props: {\n    glyphType: {\n      type: String,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      scoreThreshold: 0,\n      effectScores: {}\n    };\n  },\n\n  computed: {\n    typeConfig() {\n      return GlyphTypes[this.glyphType];\n    },\n\n    autoSacrificeSettings() {\n      return AutoGlyphProcessor.types[this.glyphType];\n    },\n\n    effects() {\n      return this.typeConfig.effects;\n    },\n\n    descStyle() {\n      return {\n        \"color\": GlyphAppearanceHandler.getBorderColor(this.glyphType),\n        \"border-color\": this.typeConfig.color\n      };\n    },\n\n    minScoreInputStyle() {\n      // Override some properties of the number input to match row style:\n      return {\n        \"font-size\": \"larger\",\n        \"border-width\": \"var(--var-border-width, 0.2rem)\"\n      };\n    },\n\n    questionmarkTooltip() {\n      return \"The score of a Glyph is its rarity percentage, plus the specified amount for each effect it has.\";\n    },\n\n    // This is an absolute value limit (ie. it's allowed to go negative down to negative this value)\n    weightInputLimit() {\n      return 999;\n    },\n\n    indexOffset() {\n      return AutoGlyphProcessor.bitmaskIndexOffset(this.glyphType);\n    }\n\n  },\n\n  created() {\n    this.effectScores = [...AutoGlyphProcessor.types[this.glyphType].effectScores];\n  },\n\n  methods: {\n    update() {\n      this.scoreThreshold = this.autoSacrificeSettings.score;\n\n      for (const e of this.effects) {\n        const shiftedIndex = e.bitmaskIndex - this.indexOffset;\n        this.effectScores[shiftedIndex] = this.autoSacrificeSettings.effectScores[shiftedIndex];\n      }\n    },\n\n    limitedInput(input) {\n      return Math.clamp(input, -this.weightInputLimit, this.weightInputLimit);\n    },\n\n    setScoreThreshold(event) {\n      const inputValue = event.target.value;\n\n      if (!isNaN(inputValue)) {\n        this.autoSacrificeSettings.score = this.limitedInput(inputValue);\n      }\n    },\n\n    setEffectScore(index, event) {\n      const inputValue = event.target.value;\n\n      if (!isNaN(inputValue)) {\n        this.autoSacrificeSettings.effectScores[index] = this.limitedInput(inputValue);\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["AutoSacrificeAdvancedTab.vue"],"names":[],"mappings":";AACA,eAAA;AACA,EAAA,IAAA,EAAA,0BADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GAFA;;AAQA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,cAAA,EAAA,CADA;AAEA,MAAA,YAAA,EAAA;AAFA,KAAA;AAIA,GAbA;;AAcA,EAAA,QAAA,EAAA;AACA,IAAA,UAAA,GAAA;AACA,aAAA,UAAA,CAAA,KAAA,SAAA,CAAA;AACA,KAHA;;AAIA,IAAA,qBAAA,GAAA;AACA,aAAA,kBAAA,CAAA,KAAA,CAAA,KAAA,SAAA,CAAA;AACA,KANA;;AAOA,IAAA,OAAA,GAAA;AACA,aAAA,KAAA,UAAA,CAAA,OAAA;AACA,KATA;;AAUA,IAAA,SAAA,GAAA;AACA,aAAA;AACA,iBAAA,sBAAA,CAAA,cAAA,CAAA,KAAA,SAAA,CADA;AAEA,wBAAA,KAAA,UAAA,CAAA;AAFA,OAAA;AAIA,KAfA;;AAgBA,IAAA,kBAAA,GAAA;AACA;AACA,aAAA;AACA,qBAAA,QADA;AAEA,wBAAA;AAFA,OAAA;AAIA,KAtBA;;AAuBA,IAAA,mBAAA,GAAA;AACA,aAAA,kGAAA;AACA,KAzBA;;AA0BA;AACA,IAAA,gBAAA,GAAA;AACA,aAAA,GAAA;AACA,KA7BA;;AA8BA,IAAA,WAAA,GAAA;AACA,aAAA,kBAAA,CAAA,kBAAA,CAAA,KAAA,SAAA,CAAA;AACA;;AAhCA,GAdA;;AAgDA,EAAA,OAAA,GAAA;AACA,SAAA,YAAA,GAAA,CAAA,GAAA,kBAAA,CAAA,KAAA,CAAA,KAAA,SAAA,EAAA,YAAA,CAAA;AACA,GAlDA;;AAmDA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,cAAA,GAAA,KAAA,qBAAA,CAAA,KAAA;;AACA,WAAA,MAAA,CAAA,IAAA,KAAA,OAAA,EAAA;AACA,cAAA,YAAA,GAAA,CAAA,CAAA,YAAA,GAAA,KAAA,WAAA;AACA,aAAA,YAAA,CAAA,YAAA,IAAA,KAAA,qBAAA,CAAA,YAAA,CAAA,YAAA,CAAA;AACA;AACA,KAPA;;AAQA,IAAA,YAAA,CAAA,KAAA,EAAA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,KAAA,EAAA,CAAA,KAAA,gBAAA,EAAA,KAAA,gBAAA,CAAA;AACA,KAVA;;AAWA,IAAA,iBAAA,CAAA,KAAA,EAAA;AACA,YAAA,UAAA,GAAA,KAAA,CAAA,MAAA,CAAA,KAAA;;AACA,UAAA,CAAA,KAAA,CAAA,UAAA,CAAA,EAAA;AACA,aAAA,qBAAA,CAAA,KAAA,GAAA,KAAA,YAAA,CAAA,UAAA,CAAA;AACA;AACA,KAhBA;;AAiBA,IAAA,cAAA,CAAA,KAAA,EAAA,KAAA,EAAA;AACA,YAAA,UAAA,GAAA,KAAA,CAAA,MAAA,CAAA,KAAA;;AACA,UAAA,CAAA,KAAA,CAAA,UAAA,CAAA,EAAA;AACA,aAAA,qBAAA,CAAA,YAAA,CAAA,KAAA,IAAA,KAAA,YAAA,CAAA,UAAA,CAAA;AACA;AACA;;AAtBA;AAnDA,CAAA","sourcesContent":["<script>\r\nexport default {\r\n  name: \"AutoSacrificeAdvancedTab\",\r\n  props: {\r\n    glyphType: {\r\n      type: String,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      scoreThreshold: 0,\r\n      effectScores: {},\r\n    };\r\n  },\r\n  computed: {\r\n    typeConfig() {\r\n      return GlyphTypes[this.glyphType];\r\n    },\r\n    autoSacrificeSettings() {\r\n      return AutoGlyphProcessor.types[this.glyphType];\r\n    },\r\n    effects() {\r\n      return this.typeConfig.effects;\r\n    },\r\n    descStyle() {\r\n      return {\r\n        \"color\": GlyphAppearanceHandler.getBorderColor(this.glyphType),\r\n        \"border-color\": this.typeConfig.color\r\n      };\r\n    },\r\n    minScoreInputStyle() {\r\n      // Override some properties of the number input to match row style:\r\n      return {\r\n        \"font-size\": \"larger\",\r\n        \"border-width\": \"var(--var-border-width, 0.2rem)\",\r\n      };\r\n    },\r\n    questionmarkTooltip() {\r\n      return \"The score of a Glyph is its rarity percentage, plus the specified amount for each effect it has.\";\r\n    },\r\n    // This is an absolute value limit (ie. it's allowed to go negative down to negative this value)\r\n    weightInputLimit() {\r\n      return 999;\r\n    },\r\n    indexOffset() {\r\n      return AutoGlyphProcessor.bitmaskIndexOffset(this.glyphType);\r\n    }\r\n  },\r\n  created() {\r\n    this.effectScores = [...AutoGlyphProcessor.types[this.glyphType].effectScores];\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.scoreThreshold = this.autoSacrificeSettings.score;\r\n      for (const e of this.effects) {\r\n        const shiftedIndex = e.bitmaskIndex - this.indexOffset;\r\n        this.effectScores[shiftedIndex] = this.autoSacrificeSettings.effectScores[shiftedIndex];\r\n      }\r\n    },\r\n    limitedInput(input) {\r\n      return Math.clamp(input, -this.weightInputLimit, this.weightInputLimit);\r\n    },\r\n    setScoreThreshold(event) {\r\n      const inputValue = event.target.value;\r\n      if (!isNaN(inputValue)) {\r\n        this.autoSacrificeSettings.score = this.limitedInput(inputValue);\r\n      }\r\n    },\r\n    setEffectScore(index, event) {\r\n      const inputValue = event.target.value;\r\n      if (!isNaN(inputValue)) {\r\n        this.autoSacrificeSettings.effectScores[index] = this.limitedInput(inputValue);\r\n      }\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-auto-sac-type-tab\">\r\n    <div class=\"l-auto-sac-type-tab__row-wrapper\">\r\n      <div>\r\n        <div\r\n          :ach-tooltip=\"questionmarkTooltip\"\r\n          class=\"o-questionmark\"\r\n        >\r\n          ?\r\n        </div>\r\n        <b> Threshold score</b> (rarity % + effect scores)\r\n      </div>\r\n      <input\r\n        ref=\"scoreThreshold\"\r\n        type=\"number\"\r\n        :min=\"-weightInputLimit\"\r\n        :max=\"weightInputLimit\"\r\n        class=\"c-auto-sac-type-tab__input\"\r\n        :value=\"scoreThreshold\"\r\n        :style=\"minScoreInputStyle\"\r\n        @blur=\"setScoreThreshold\"\r\n      >\r\n    </div>\r\n    <div\r\n      v-for=\"effect in effects\"\r\n      :key=\"effect.id\"\r\n      class=\"l-auto-sac-type-tab__row-wrapper\"\r\n    >\r\n      <div\r\n        class=\"c-auto-sac-type-tab__effect-desc l-auto-sac-type-tab__effect-desc\"\r\n        :style=\"descStyle\"\r\n      >\r\n        {{ effect.genericDesc }}\r\n      </div>\r\n      <input\r\n        type=\"number\"\r\n        :min=\"-weightInputLimit\"\r\n        :max=\"weightInputLimit\"\r\n        class=\"c-auto-sac-type-tab__input\"\r\n        :value=\"effectScores[effect.bitmaskIndex - indexOffset]\"\r\n        @blur=\"setEffectScore(effect.bitmaskIndex - indexOffset, $event)\"\r\n      >\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/glyphs/sidebar"},"metadata":{},"sourceType":"module"}