{"ast":null,"code":"import \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport HoverMenu from \"./HoverMenu\";\nexport default {\n  name: \"TimeStudySaveLoadButton\",\n  components: {\n    HoverMenu\n  },\n  props: {\n    saveslot: {\n      type: Number,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      name: \"\",\n      displayName: \"\",\n      canEternity: false\n    };\n  },\n\n  computed: {\n    preset() {\n      return player.timestudy.presets[this.saveslot - 1];\n    }\n\n  },\n  methods: {\n    update() {\n      this.name = player.timestudy.presets[this.saveslot - 1].name;\n      this.displayName = this.name === \"\" ? this.saveslot : this.name;\n      this.canEternity = Player.canEternity;\n    },\n\n    nicknameBlur(event) {\n      const newName = event.target.value.slice(0, 4).trim();\n      if (!this.isASCII(newName)) return;\n      const existingNames = player.timestudy.presets.map(p => p.name);\n      if (existingNames.includes(newName)) return;\n      this.preset.name = newName;\n      this.name = this.preset.name;\n    },\n\n    hideContextMenu() {\n      this.$viewModel.currentContextMenu = null;\n    },\n\n    // This is largely done because of UI reasons - there is no Unicode specification for character width, which means\n    // that arbitrary Unicode inputs can allow for massive text overflow\n    isASCII(input) {\n      // eslint-disable-next-line no-control-regex\n      return !/(?:(?![\\0-\\xFF])[\\s\\S])/.test(input);\n    },\n\n    save() {\n      this.hideContextMenu();\n      this.preset.studies = GameCache.currentStudyTree.value.exportString;\n      const presetName = this.name ? `Study preset \"${this.name}\"` : \"Study preset\";\n      GameUI.notify.eternity(`${presetName} saved in slot ${this.saveslot}`);\n    },\n\n    load() {\n      this.hideContextMenu();\n\n      if (this.preset.studies) {\n        // We need to use a combined tree for committing to the game state, or else it won't buy studies in the imported\n        // tree are only reachable if the current tree is already bought\n        const combinedTree = new TimeStudyTree();\n        combinedTree.attemptBuyArray(TimeStudyTree.currentStudies, false);\n        combinedTree.attemptBuyArray(combinedTree.parseStudyImport(this.preset.studies), true);\n        TimeStudyTree.commitToGameState(combinedTree.purchasedStudies, false, combinedTree.startEC);\n        const presetName = this.name ? `Study preset \"${this.name}\"` : \"Study preset\";\n        GameUI.notify.eternity(`${presetName} loaded from slot ${this.saveslot}`);\n      } else {\n        Modal.message.show(\"This Time Study list currently contains no Time Studies.\");\n      }\n    },\n\n    respecAndLoad() {\n      if (Player.canEternity) {\n        player.respec = true;\n        const newTree = new TimeStudyTree();\n        newTree.attemptBuyArray(newTree.parseStudyImport(this.preset.studies));\n        animateAndEternity(() => TimeStudyTree.commitToGameState(newTree.purchasedStudies, false, newTree.startEC));\n      }\n    },\n\n    deletePreset() {\n      this.hideContextMenu();\n      if (this.preset.studies) Modal.studyString.show({\n        id: this.saveslot - 1,\n        deleting: true\n      });else Modal.message.show(\"This Time Study list currently contains no Time Studies.\");\n    },\n\n    handleExport() {\n      this.hideContextMenu();\n      copyToClipboard(this.preset.studies);\n      const presetName = this.name ? `Study preset \"${this.name}\"` : \"Study preset\";\n      GameUI.notify.eternity(`${presetName} exported from slot ${this.saveslot} to your clipboard`);\n    },\n\n    edit() {\n      Modal.studyString.show({\n        id: this.saveslot - 1\n      });\n    }\n\n  }\n};","map":{"version":3,"sources":["TimeStudySaveLoadButton.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport HoverMenu from \"./HoverMenu\";\r\n\r\nexport default {\r\n  name: \"TimeStudySaveLoadButton\",\r\n  components: {\r\n    HoverMenu,\r\n  },\r\n  props: {\r\n    saveslot: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      name: \"\",\r\n      displayName: \"\",\r\n      canEternity: false\r\n    };\r\n  },\r\n  computed: {\r\n    preset() {\r\n      return player.timestudy.presets[this.saveslot - 1];\r\n    },\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.name = player.timestudy.presets[this.saveslot - 1].name;\r\n      this.displayName = this.name === \"\" ? this.saveslot : this.name;\r\n      this.canEternity = Player.canEternity;\r\n    },\r\n    nicknameBlur(event) {\r\n      const newName = event.target.value.slice(0, 4).trim();\r\n      if (!this.isASCII(newName)) return;\r\n\r\n      const existingNames = player.timestudy.presets.map(p => p.name);\r\n      if (existingNames.includes(newName)) return;\r\n\r\n      this.preset.name = newName;\r\n      this.name = this.preset.name;\r\n    },\r\n    hideContextMenu() {\r\n      this.$viewModel.currentContextMenu = null;\r\n    },\r\n    // This is largely done because of UI reasons - there is no Unicode specification for character width, which means\r\n    // that arbitrary Unicode inputs can allow for massive text overflow\r\n    isASCII(input) {\r\n      // eslint-disable-next-line no-control-regex\r\n      return !/[^\\u0000-\\u00ff]/u.test(input);\r\n    },\r\n    save() {\r\n      this.hideContextMenu();\r\n      this.preset.studies = GameCache.currentStudyTree.value.exportString;\r\n      const presetName = this.name ? `Study preset \"${this.name}\"` : \"Study preset\";\r\n      GameUI.notify.eternity(`${presetName} saved in slot ${this.saveslot}`);\r\n    },\r\n    load() {\r\n      this.hideContextMenu();\r\n      if (this.preset.studies) {\r\n        // We need to use a combined tree for committing to the game state, or else it won't buy studies in the imported\r\n        // tree are only reachable if the current tree is already bought\r\n        const combinedTree = new TimeStudyTree();\r\n        combinedTree.attemptBuyArray(TimeStudyTree.currentStudies, false);\r\n        combinedTree.attemptBuyArray(combinedTree.parseStudyImport(this.preset.studies), true);\r\n        TimeStudyTree.commitToGameState(combinedTree.purchasedStudies, false, combinedTree.startEC);\r\n\r\n        const presetName = this.name ? `Study preset \"${this.name}\"` : \"Study preset\";\r\n        GameUI.notify.eternity(`${presetName} loaded from slot ${this.saveslot}`);\r\n      } else {\r\n        Modal.message.show(\"This Time Study list currently contains no Time Studies.\");\r\n      }\r\n    },\r\n    respecAndLoad() {\r\n      if (Player.canEternity) {\r\n        player.respec = true;\r\n        const newTree = new TimeStudyTree();\r\n        newTree.attemptBuyArray(newTree.parseStudyImport(this.preset.studies));\r\n        animateAndEternity(() => TimeStudyTree.commitToGameState(newTree.purchasedStudies, false, newTree.startEC));\r\n      }\r\n    },\r\n    deletePreset() {\r\n      this.hideContextMenu();\r\n      if (this.preset.studies) Modal.studyString.show({ id: this.saveslot - 1, deleting: true });\r\n      else Modal.message.show(\"This Time Study list currently contains no Time Studies.\");\r\n    },\r\n    handleExport() {\r\n      this.hideContextMenu();\r\n      copyToClipboard(this.preset.studies);\r\n      const presetName = this.name ? `Study preset \"${this.name}\"` : \"Study preset\";\r\n      GameUI.notify.eternity(`${presetName} exported from slot ${this.saveslot} to your clipboard`);\r\n    },\r\n    edit() {\r\n      Modal.studyString.show({ id: this.saveslot - 1 });\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <HoverMenu class=\"l-tt-save-load-btn__wrapper\">\r\n    <template #object>\r\n      <button\r\n        class=\"l-tt-save-load-btn c-tt-buy-button c-tt-buy-button--unlocked\"\r\n        @click.shift.exact=\"save\"\r\n        @click.exact=\"load\"\r\n      >\r\n        {{ displayName }}\r\n      </button>\r\n    </template>\r\n    <template #menu>\r\n      <div class=\"l-tt-save-load-btn__menu c-tt-save-load-btn__menu\">\r\n        <span ach-tooltip=\"Set a custom name (up to 4 ASCII characters)\">\r\n          <input\r\n            type=\"text\"\r\n            size=\"4\"\r\n            maxlength=\"4\"\r\n            class=\"l-tt-save-load-btn__menu-rename c-tt-save-load-btn__menu-rename\"\r\n            :value=\"name\"\r\n            @keyup.esc=\"hideContextMenu\"\r\n            @blur=\"nicknameBlur\"\r\n          >\r\n        </span>\r\n        <div\r\n          class=\"l-tt-save-load-btn__menu-item c-tt-save-load-btn__menu-item\"\r\n          @click=\"edit\"\r\n        >\r\n          Edit\r\n        </div>\r\n        <div\r\n          class=\"l-tt-save-load-btn__menu-item c-tt-save-load-btn__menu-item\"\r\n          @click=\"handleExport\"\r\n        >\r\n          Export\r\n        </div>\r\n        <div\r\n          class=\"l-tt-save-load-btn__menu-item c-tt-save-load-btn__menu-item\"\r\n          @click=\"save\"\r\n        >\r\n          Save\r\n        </div>\r\n        <div class=\"l-tt-save-load-btn__menu-item\">\r\n          <div\r\n            class=\"c-tt-save-load-btn__menu-item\"\r\n            @click=\"load\"\r\n          >\r\n            Load\r\n          </div>\r\n          <div class=\"c-tt-save-load-btn__menu-item__hover-options\">\r\n            <div\r\n              :class=\"{\r\n                'c-tt-save-load-btn__menu-item__hover-option': true,\r\n                'c-tt-save-load-btn__menu-item__hover-option--disabled': !canEternity,\r\n              }\"\r\n              @click=\"respecAndLoad\"\r\n            >\r\n              Respec and Load\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div\r\n          class=\"l-tt-save-load-btn__menu-item c-tt-save-load-btn__menu-item\"\r\n          @click=\"deletePreset\"\r\n        >\r\n          Delete\r\n        </div>\r\n      </div>\r\n    </template>\r\n  </HoverMenu>\r\n</template>\r\n\r\n<style scoped>\r\n.l-tt-save-load-btn__wrapper {\r\n  position: relative;\r\n  margin: 0.3rem;\r\n}\r\n\r\n.l-tt-save-load-btn {\r\n  min-width: 2rem;\r\n}\r\n\r\n.l-tt-save-load-btn__menu {\r\n  position: absolute;\r\n  top: -0.5rem;\r\n  left: 50%;\r\n  padding: 0.5rem 0;\r\n  transform: translate(-50%, -100%);\r\n}\r\n\r\n.c-tt-save-load-btn__menu {\r\n  text-align: left;\r\n  font-family: Typewriter;\r\n  font-size: 1.4rem;\r\n  font-weight: bold;\r\n  color: white;\r\n  background: black;\r\n  border-radius: var(--var-border-radius, 0.5rem);\r\n}\r\n\r\n.l-tt-save-load-btn__menu::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 50%;\r\n  border-color: black transparent transparent;\r\n  border-style: solid;\r\n  border-width: var(--var-border-width, 0.5rem);\r\n  margin-left: -0.5rem;\r\n}\r\n\r\n.l-tt-save-load-btn__menu-rename {\r\n  margin: 0.3rem 0.5rem 0.5rem 0.7rem;\r\n}\r\n\r\n.c-tt-save-load-btn__menu-rename {\r\n  text-align: left;\r\n  font-family: Typewriter;\r\n  font-size: 1.4rem;\r\n  font-weight: bold;\r\n  border: none;\r\n  border-radius: var(--var-border-radius, 0.3rem);\r\n  padding: 0.2rem;\r\n}\r\n\r\n.l-tt-save-load-btn__menu-item {\r\n  position: relative;\r\n  cursor: pointer;\r\n}\r\n\r\n.c-tt-save-load-btn__menu-item {\r\n  text-align: left;\r\n  padding: 0.25rem 1rem;\r\n}\r\n\r\n.c-tt-save-load-btn__menu-item:hover {\r\n  color: black;\r\n  background: white;\r\n}\r\n\r\n.c-tt-save-load-btn__menu-item__hover-options {\r\n  visibility: hidden;\r\n  width: fit-content;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 100%;\r\n  opacity: 0;\r\n  color: white;\r\n  background: black;\r\n  border: 0.1rem solid black;\r\n  border-radius: var(--var-border-width, 0.5rem);\r\n  transform: translateX(0.5rem);\r\n  transition: visibility 0.2s, opacity 0.2s;\r\n  transition-delay: 0.5s;\r\n  cursor: pointer;\r\n}\r\n\r\n.c-tt-save-load-btn__menu-item__hover-option {\r\n  white-space: nowrap;\r\n  padding: 0.25rem 1rem;\r\n}\r\n\r\n.c-tt-save-load-btn__menu-item__hover-options::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  /* A single menu item is 26px tall, minus 5px from the border */\r\n  top: 0.8rem;\r\n  right: 100%;\r\n  border-top: 0.5rem solid transparent;\r\n  border-right: 0.5rem solid black;\r\n  border-bottom: 0.5rem solid transparent;\r\n}\r\n\r\n.c-tt-save-load-btn__menu-item:hover,\r\n.c-tt-save-load-btn__menu-item__hover-option:hover {\r\n  color: black;\r\n  background: white;\r\n}\r\n\r\n.l-tt-save-load-btn__menu-item:hover .c-tt-save-load-btn__menu-item__hover-options {\r\n  visibility: visible;\r\n  opacity: 1;\r\n  transition-delay: 0s;\r\n}\r\n\r\n.c-tt-save-load-btn__menu-item__hover-option--disabled {\r\n  opacity: 0.7;\r\n  cursor: default;\r\n}\r\n\r\n.c-tt-save-load-btn__menu-item__hover-option--disabled:hover {\r\n  color: white;\r\n  background: transparent;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/time-studies/tt-shop"},"metadata":{},"sourceType":"module"}