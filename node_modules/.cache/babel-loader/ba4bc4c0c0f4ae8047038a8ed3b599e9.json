{"ast":null,"code":"import { DC } from \"./constants\";\nexport class Sacrifice {\n  // This is tied to the \"buying an 8th dimension\" achievement in order to hide it from new players before they reach\n  // sacrifice for the first time.\n  static get isVisible() {\n    return Achievement(18).isUnlocked || PlayerProgress.realityUnlocked();\n  }\n\n  static get canSacrifice() {\n    return DimBoost.purchasedBoosts > 4 && !EternityChallenge(3).isRunning && this.nextBoost.gt(1) && AntimatterDimension(8).totalAmount.gt(0) && Currency.antimatter.lt(Player.infinityLimit) && !Enslaved.isRunning;\n  }\n\n  static get disabledCondition() {\n    if (NormalChallenge(10).isRunning) return \"8th Dimensions are disabled\";\n    if (EternityChallenge(3).isRunning) return \"Eternity Challenge 3\";\n    if (DimBoost.purchasedBoosts < 5) return `Requires ${formatInt(5)} Dimension Boosts`;\n    if (AntimatterDimension(8).totalAmount.eq(0)) return \"No 8th Antimatter Dimensions\";\n    if (this.nextBoost.lte(1)) return `${formatX(1)} multiplier`;\n    if (Player.isInAntimatterChallenge) return \"Challenge goal reached\";\n    return \"Need to Crunch\";\n  }\n\n  static getSacrificeDescription(changes) {\n    const f = (name, condition) => name in changes ? changes[name] : condition;\n\n    let factor = 2;\n    let places = 1;\n    let base = `(log₁₀(AD1)/${formatInt(10)})`;\n\n    if (f(\"Challenge8isRunning\", NormalChallenge(8).isRunning)) {\n      factor = 1;\n      base = \"x\";\n    } else if (f(\"InfinityChallenge2isCompleted\", InfinityChallenge(2).isCompleted)) {\n      factor = 1 / 120;\n      places = 3;\n      base = \"AD1\";\n    }\n\n    const exponent = (1 + (f(\"Achievement32\", Achievement(32).isEffectActive) ? Achievement(32).config.effect : 0) + (f(\"Achievement57\", Achievement(57).isEffectActive) ? Achievement(57).config.effect : 0)) * (1 + (f(\"Achievement88\", Achievement(88).isEffectActive) ? Achievement(88).config.effect : 0) + (f(\"TimeStudy228\", TimeStudy(228).isEffectActive) ? TimeStudy(228).config.effect : 0)) * factor;\n    return base + (exponent === 1 ? \"\" : formatPow(exponent, places, places));\n  } // The code path for calculating the sacrifice exponent is pretty convoluted, but needs to be structured this way\n  // in order to mostly replicate old pre-Reality behavior. There are two key things to note in how sacrifice behaves\n  // which are not immediately apparent here; IC2 changes the formula by getting rid of a log10 (and therefore makes\n  // sacrifice significantly stronger despite the much smaller exponent) and pre-Reality behavior assumed that the\n  // player would already have ach32/57 by the time they complete IC2. As Reality resets achievements, we had to\n  // assume that all things boosting sacrifice can be gotten independently, which resulted in some odd effect stacking.\n\n\n  static get sacrificeExponent() {\n    let base; // C8 seems weaker, but it actually follows its own formula which ends up being stronger based on how it stacks\n\n    if (NormalChallenge(8).isRunning) base = 1; // Pre-Reality this was 100; having ach32/57 results in 1.2x, which is brought back in line by changing to 120\n    else if (InfinityChallenge(2).isCompleted) base = 1 / 120;else base = 2; // All the factors which go into the multiplier have to combine this way in order to replicate legacy behavior\n\n    const preIC2 = 1 + Effects.sum(Achievement(32), Achievement(57));\n    const postIC2 = 1 + Effects.sum(Achievement(88), TimeStudy(228));\n    const triad = TimeStudy(304).effectOrDefault(1);\n    return base * preIC2 * postIC2 * triad;\n  }\n\n  static get nextBoost() {\n    const nd1Amount = AntimatterDimension(1).amount;\n    if (nd1Amount.eq(0)) return DC.D1;\n    const sacrificed = player.sacrificed.clampMin(1);\n    let prePowerSacrificeMult; // Pre-reality update C8 works really weirdly - every sacrifice, the current sacrifice multiplier gets applied to\n    // ND8, then sacrificed amount is updated, and then the updated sacrifice multiplier then gets applied to a\n    // different variable that is only applied during C8. However since sacrifice only depends on sacrificed ND1, this\n    // can actually be done in a single calculation in order to handle C8 in a less hacky way.\n\n    if (NormalChallenge(8).isRunning) {\n      prePowerSacrificeMult = nd1Amount.pow(0.05).dividedBy(sacrificed.pow(0.04)).clampMin(1).times(nd1Amount.pow(0.05).dividedBy(sacrificed.plus(nd1Amount).pow(0.04)));\n    } else if (InfinityChallenge(2).isCompleted) {\n      prePowerSacrificeMult = nd1Amount.dividedBy(sacrificed);\n    } else {\n      prePowerSacrificeMult = new Decimal(nd1Amount.log10() / 10 / Math.max(sacrificed.log10() / 10, 1));\n    }\n\n    return prePowerSacrificeMult.clampMin(1).pow(this.sacrificeExponent);\n  }\n\n  static get totalBoost() {\n    if (player.sacrificed.eq(0)) return DC.D1; // C8 uses a variable that keeps track of a sacrifice boost that persists across sacrifice-resets and isn't\n    // used anywhere else, which also naturally takes account of the exponent from achievements and time studies.\n\n    if (NormalChallenge(8).isRunning) {\n      return player.chall8TotalSacrifice;\n    }\n\n    let prePowerBoost;\n\n    if (InfinityChallenge(2).isCompleted) {\n      prePowerBoost = player.sacrificed;\n    } else {\n      prePowerBoost = new Decimal(player.sacrificed.log10() / 10);\n    }\n\n    return prePowerBoost.clampMin(1).pow(this.sacrificeExponent);\n  }\n\n}\nexport function sacrificeReset() {\n  if (!Sacrifice.canSacrifice) return false;\n  if ((!player.break || !InfinityChallenge.isRunning && NormalChallenge.isRunning) && Currency.antimatter.gt(Decimal.NUMBER_MAX_VALUE)) return false;\n\n  if (NormalChallenge(8).isRunning && Sacrifice.totalBoost.gte(Decimal.NUMBER_MAX_VALUE)) {\n    return false;\n  }\n\n  EventHub.dispatch(GAME_EVENT.SACRIFICE_RESET_BEFORE);\n  const nextBoost = Sacrifice.nextBoost;\n  player.chall8TotalSacrifice = player.chall8TotalSacrifice.times(nextBoost);\n  player.sacrificed = player.sacrificed.plus(AntimatterDimension(1).amount);\n  const isAch118Unlocked = Achievement(118).canBeApplied;\n\n  if (NormalChallenge(8).isRunning) {\n    if (!isAch118Unlocked) {\n      AntimatterDimensions.reset();\n    }\n\n    Currency.antimatter.reset();\n  } else if (!isAch118Unlocked) {\n    AntimatterDimensions.resetAmountUpToTier(NormalChallenge(12).isRunning ? 6 : 7);\n  }\n\n  player.requirementChecks.infinity.noSacrifice = false;\n  EventHub.dispatch(GAME_EVENT.SACRIFICE_RESET_AFTER);\n  return true;\n}\nexport function sacrificeBtnClick() {\n  if (!Sacrifice.isVisible || !Sacrifice.canSacrifice) return;\n\n  if (player.options.confirmations.sacrifice) {\n    Modal.sacrifice.show();\n  } else {\n    sacrificeReset();\n  }\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/sacrifice.js"],"names":["DC","Sacrifice","isVisible","Achievement","isUnlocked","PlayerProgress","realityUnlocked","canSacrifice","DimBoost","purchasedBoosts","EternityChallenge","isRunning","nextBoost","gt","AntimatterDimension","totalAmount","Currency","antimatter","lt","Player","infinityLimit","Enslaved","disabledCondition","NormalChallenge","formatInt","eq","lte","formatX","isInAntimatterChallenge","getSacrificeDescription","changes","f","name","condition","factor","places","base","InfinityChallenge","isCompleted","exponent","isEffectActive","config","effect","TimeStudy","formatPow","sacrificeExponent","preIC2","Effects","sum","postIC2","triad","effectOrDefault","nd1Amount","amount","D1","sacrificed","player","clampMin","prePowerSacrificeMult","pow","dividedBy","times","plus","Decimal","log10","Math","max","totalBoost","chall8TotalSacrifice","prePowerBoost","sacrificeReset","break","NUMBER_MAX_VALUE","gte","EventHub","dispatch","GAME_EVENT","SACRIFICE_RESET_BEFORE","isAch118Unlocked","canBeApplied","AntimatterDimensions","reset","resetAmountUpToTier","requirementChecks","infinity","noSacrifice","SACRIFICE_RESET_AFTER","sacrificeBtnClick","options","confirmations","sacrifice","Modal","show"],"mappings":"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","sourcesContent":["import { DC } from \"./constants\";\r\n\r\nexport class Sacrifice {\r\n  // This is tied to the \"buying an 8th dimension\" achievement in order to hide it from new players before they reach\r\n  // sacrifice for the first time.\r\n  static get isVisible() {\r\n    return Achievement(18).isUnlocked || PlayerProgress.realityUnlocked();\r\n  }\r\n\r\n  static get canSacrifice() {\r\n    return DimBoost.purchasedBoosts > 4 && !EternityChallenge(3).isRunning && this.nextBoost.gt(1) &&\r\n      AntimatterDimension(8).totalAmount.gt(0) && Currency.antimatter.lt(Player.infinityLimit) &&\r\n      !Enslaved.isRunning;\r\n  }\r\n\r\n  static get disabledCondition() {\r\n    if (NormalChallenge(10).isRunning) return \"8th Dimensions are disabled\";\r\n    if (EternityChallenge(3).isRunning) return \"Eternity Challenge 3\";\r\n    if (DimBoost.purchasedBoosts < 5) return `Requires ${formatInt(5)} Dimension Boosts`;\r\n    if (AntimatterDimension(8).totalAmount.eq(0)) return \"No 8th Antimatter Dimensions\";\r\n    if (this.nextBoost.lte(1)) return `${formatX(1)} multiplier`;\r\n    if (Player.isInAntimatterChallenge) return \"Challenge goal reached\";\r\n    return \"Need to Crunch\";\r\n  }\r\n\r\n  static getSacrificeDescription(changes) {\r\n    const f = (name, condition) => (name in changes ? changes[name] : condition);\r\n    let factor = 2;\r\n    let places = 1;\r\n    let base = `(log₁₀(AD1)/${formatInt(10)})`;\r\n    if (f(\"Challenge8isRunning\", NormalChallenge(8).isRunning)) {\r\n      factor = 1;\r\n      base = \"x\";\r\n    } else if (f(\"InfinityChallenge2isCompleted\", InfinityChallenge(2).isCompleted)) {\r\n      factor = 1 / 120;\r\n      places = 3;\r\n      base = \"AD1\";\r\n    }\r\n\r\n    const exponent = (1 +\r\n      (f(\"Achievement32\", Achievement(32).isEffectActive) ? Achievement(32).config.effect : 0) +\r\n      (f(\"Achievement57\", Achievement(57).isEffectActive) ? Achievement(57).config.effect : 0)\r\n    ) * (1 +\r\n      (f(\"Achievement88\", Achievement(88).isEffectActive) ? Achievement(88).config.effect : 0) +\r\n      (f(\"TimeStudy228\", TimeStudy(228).isEffectActive) ? TimeStudy(228).config.effect : 0)\r\n    ) * factor;\r\n    return base + (exponent === 1 ? \"\" : formatPow(exponent, places, places));\r\n  }\r\n\r\n  // The code path for calculating the sacrifice exponent is pretty convoluted, but needs to be structured this way\r\n  // in order to mostly replicate old pre-Reality behavior. There are two key things to note in how sacrifice behaves\r\n  // which are not immediately apparent here; IC2 changes the formula by getting rid of a log10 (and therefore makes\r\n  // sacrifice significantly stronger despite the much smaller exponent) and pre-Reality behavior assumed that the\r\n  // player would already have ach32/57 by the time they complete IC2. As Reality resets achievements, we had to\r\n  // assume that all things boosting sacrifice can be gotten independently, which resulted in some odd effect stacking.\r\n  static get sacrificeExponent() {\r\n    let base;\r\n    // C8 seems weaker, but it actually follows its own formula which ends up being stronger based on how it stacks\r\n    if (NormalChallenge(8).isRunning) base = 1;\r\n    // Pre-Reality this was 100; having ach32/57 results in 1.2x, which is brought back in line by changing to 120\r\n    else if (InfinityChallenge(2).isCompleted) base = 1 / 120;\r\n    else base = 2;\r\n\r\n    // All the factors which go into the multiplier have to combine this way in order to replicate legacy behavior\r\n    const preIC2 = 1 + Effects.sum(Achievement(32), Achievement(57));\r\n    const postIC2 = 1 + Effects.sum(Achievement(88), TimeStudy(228));\r\n    const triad = TimeStudy(304).effectOrDefault(1);\r\n\r\n    return base * preIC2 * postIC2 * triad;\r\n  }\r\n\r\n  static get nextBoost() {\r\n    const nd1Amount = AntimatterDimension(1).amount;\r\n    if (nd1Amount.eq(0)) return DC.D1;\r\n    const sacrificed = player.sacrificed.clampMin(1);\r\n    let prePowerSacrificeMult;\r\n    // Pre-reality update C8 works really weirdly - every sacrifice, the current sacrifice multiplier gets applied to\r\n    // ND8, then sacrificed amount is updated, and then the updated sacrifice multiplier then gets applied to a\r\n    // different variable that is only applied during C8. However since sacrifice only depends on sacrificed ND1, this\r\n    // can actually be done in a single calculation in order to handle C8 in a less hacky way.\r\n    if (NormalChallenge(8).isRunning) {\r\n      prePowerSacrificeMult = nd1Amount.pow(0.05).dividedBy(sacrificed.pow(0.04)).clampMin(1)\r\n        .times(nd1Amount.pow(0.05).dividedBy(sacrificed.plus(nd1Amount).pow(0.04)));\r\n    } else if (InfinityChallenge(2).isCompleted) {\r\n      prePowerSacrificeMult = nd1Amount.dividedBy(sacrificed);\r\n    } else {\r\n      prePowerSacrificeMult = new Decimal((nd1Amount.log10() / 10) / Math.max(sacrificed.log10() / 10, 1));\r\n    }\r\n\r\n    return prePowerSacrificeMult.clampMin(1).pow(this.sacrificeExponent);\r\n  }\r\n\r\n  static get totalBoost() {\r\n    if (player.sacrificed.eq(0)) return DC.D1;\r\n    // C8 uses a variable that keeps track of a sacrifice boost that persists across sacrifice-resets and isn't\r\n    // used anywhere else, which also naturally takes account of the exponent from achievements and time studies.\r\n    if (NormalChallenge(8).isRunning) {\r\n      return player.chall8TotalSacrifice;\r\n    }\r\n\r\n    let prePowerBoost;\r\n\r\n    if (InfinityChallenge(2).isCompleted) {\r\n      prePowerBoost = player.sacrificed;\r\n    } else {\r\n      prePowerBoost = new Decimal(player.sacrificed.log10() / 10);\r\n    }\r\n\r\n    return prePowerBoost.clampMin(1).pow(this.sacrificeExponent);\r\n  }\r\n}\r\n\r\nexport function sacrificeReset() {\r\n  if (!Sacrifice.canSacrifice) return false;\r\n  if ((!player.break || (!InfinityChallenge.isRunning && NormalChallenge.isRunning)) &&\r\n    Currency.antimatter.gt(Decimal.NUMBER_MAX_VALUE)) return false;\r\n  if (\r\n    NormalChallenge(8).isRunning &&\r\n    (Sacrifice.totalBoost.gte(Decimal.NUMBER_MAX_VALUE))\r\n  ) {\r\n    return false;\r\n  }\r\n  EventHub.dispatch(GAME_EVENT.SACRIFICE_RESET_BEFORE);\r\n  const nextBoost = Sacrifice.nextBoost;\r\n  player.chall8TotalSacrifice = player.chall8TotalSacrifice.times(nextBoost);\r\n  player.sacrificed = player.sacrificed.plus(AntimatterDimension(1).amount);\r\n  const isAch118Unlocked = Achievement(118).canBeApplied;\r\n  if (NormalChallenge(8).isRunning) {\r\n    if (!isAch118Unlocked) {\r\n      AntimatterDimensions.reset();\r\n    }\r\n    Currency.antimatter.reset();\r\n  } else if (!isAch118Unlocked) {\r\n    AntimatterDimensions.resetAmountUpToTier(NormalChallenge(12).isRunning ? 6 : 7);\r\n  }\r\n  player.requirementChecks.infinity.noSacrifice = false;\r\n  EventHub.dispatch(GAME_EVENT.SACRIFICE_RESET_AFTER);\r\n  return true;\r\n}\r\n\r\nexport function sacrificeBtnClick() {\r\n  if (!Sacrifice.isVisible || !Sacrifice.canSacrifice) return;\r\n  if (player.options.confirmations.sacrifice) {\r\n    Modal.sacrifice.show();\r\n  } else {\r\n    sacrificeReset();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}