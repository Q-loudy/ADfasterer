{"ast":null,"code":"require(\"core-js/modules/web.dom-collections.iterator.js\");\n\nwindow.EventHub = class EventHub {\n  constructor() {\n    this._handlers = {};\n  }\n\n  on(event, fn, target) {\n    let handlers = this._handlers[event];\n\n    if (handlers === undefined) {\n      handlers = [];\n      this._handlers[event] = handlers;\n    }\n\n    handlers.push({\n      fn,\n      target\n    });\n  }\n\n  offAll(target) {\n    for (const handlers of Object.keys(this._handlers)) {\n      this._handlers[handlers] = this._handlers[handlers].filter(handler => handler.target !== target);\n    }\n  }\n\n  dispatch(event, args) {\n    const handlers = this._handlers[event];\n    if (handlers === undefined) return;\n\n    for (const handler of handlers) {\n      handler.fn(args);\n    }\n  }\n\n  static dispatch(event, ...args) {\n    EventHub.logic.dispatch(event, args);\n    GameUI.dispatch(event, args);\n  }\n\n  static get stats() {\n    // For debug/profiling purposes\n    function countHandlers(eventHub) {\n      return Object.values(eventHub._handlers).map(handlers => handlers.length).sum();\n    }\n\n    return `UI(UPDATE/Total): ${EventHub.ui._handlers[GAME_EVENT.UPDATE].length}/${countHandlers(EventHub.ui)}; ` + `Logic(Total): ${countHandlers(EventHub.logic)}`;\n  }\n\n};\nEventHub.logic = new EventHub();\nEventHub.ui = new EventHub();\nwindow.GAME_EVENT = {\n  // Ticks\n  GAME_TICK_BEFORE: \"GAME_TICK_BEFORE\",\n  GAME_TICK_AFTER: \"GAME_TICK_AFTER\",\n  REPLICANTI_TICK_BEFORE: \"REPLICANTI_TICK_BEFORE\",\n  REPLICANTI_TICK_AFTER: \"REPLICANTI_TICK_AFTER\",\n  // Resets\n  DIMBOOST_BEFORE: \"DIMBOOST_BEFORE\",\n  DIMBOOST_AFTER: \"DIMBOOST_AFTER\",\n  GALAXY_RESET_BEFORE: \"GALAXY_RESET_BEFORE\",\n  GALAXY_RESET_AFTER: \"GALAXY_RESET_AFTER\",\n  SACRIFICE_RESET_BEFORE: \"SACRIFICE_RESET_BEFORE\",\n  SACRIFICE_RESET_AFTER: \"SACRIFICE_RESET_AFTER\",\n  BIG_CRUNCH_BEFORE: \"BIG_CRUNCH_BEFORE\",\n  BIG_CRUNCH_AFTER: \"BIG_CRUNCH_AFTER\",\n  ETERNITY_RESET_BEFORE: \"ETERNITY_RESET_BEFORE\",\n  ETERNITY_RESET_AFTER: \"ETERNITY_RESET_AFTER\",\n  REALITY_RESET_BEFORE: \"REALITY_RESET_BEFORE\",\n  REALITY_RESET_AFTER: \"REALITY_RESET_AFTER\",\n  SINGULARITY_RESET_BEFORE: \"SINGULARITY_RESET_BEFORE\",\n  SINGULARITY_RESET_AFTER: \"SINGULARITY_RESET_AFTER\",\n  ARMAGEDDON_BEFORE: \"ARMAGEDDON_BEFORE\",\n  ARMAGEDDON_AFTER: \"ARMAGEDDON_AFTER\",\n  // Glyphs\n  GLYPHS_EQUIPPED_CHANGED: \"GLYPHS_EQUIPPED_CHANGED\",\n  GLYPHS_CHANGED: \"GLYPHS_CHANGED\",\n  GLYPH_SACRIFICED: \"GLYPH_SACRIFICED\",\n  GLYPH_SET_SAVE_CHANGE: \"GLYPH_SET_SAVE_CHANGE\",\n  GLYPH_VISUAL_CHANGE: \"GLYPH_VISUAL_CHANGE\",\n  // Break Infinity\n  BREAK_INFINITY: \"BREAK_INFINITY\",\n  FIX_INFINITY: \"FIX_INFINITY\",\n  // Other\n  INFINITY_DIMENSION_UNLOCKED: \"INFINITY_DIMENSION_UNLOCKED\",\n  INFINITY_CHALLENGE_COMPLETED: \"INFINITY_CHALLENGE_COMPLETED\",\n  INFINITY_UPGRADE_BOUGHT: \"INFINITY_UPGRADE_BOUGHT\",\n  INFINITY_UPGRADE_CHARGED: \"INFINITY_UPGRADE_CHARGED\",\n  INFINITY_UPGRADES_DISCHARGED: \"INFINITY_UPGRADES_DISCHARGED\",\n  ACHIEVEMENT_UNLOCKED: \"ACHIEVEMENT_UNLOCKED\",\n  CHALLENGE_FAILED: \"CHALLENGE_FAILED\",\n  REALITY_UPGRADE_BOUGHT: \"REALITY_UPGRADE_BOUGHT\",\n  REALITY_UPGRADE_TEN_BOUGHT: \"REALITY_UPGRADE_TEN_BOUGHT\",\n  PERK_BOUGHT: \"PERK_BOUGHT\",\n  BLACK_HOLE_UNLOCKED: \"BLACK_HOLE_UNLOCKED\",\n  BLACK_HOLE_UPGRADE_BOUGHT: \"BLACK_HOLE_UPGRADE_BOUGHT\",\n  GAME_LOAD: \"GAME_LOAD\",\n  OFFLINE_CURRENCY_GAINED: \"OFFLINE_CURRENCY_GAINED\",\n  SAVE_CONVERTED_FROM_PREVIOUS_VERSION: \"SAVE_CONVERTED_FROM_PREVIOUS_VERSION\",\n  REALITY_FIRST_UNLOCKED: \"REALITY_FIRST_UNLOCKED\",\n  AUTOMATOR_TYPE_CHANGED: \"AUTOMATOR_TYPE_CHANGED\",\n  AUTOMATOR_SAVE_CHANGED: \"AUTOMATOR_SAVE_CHANGED\",\n  AUTOMATOR_CONSTANT_CHANGED: \"AUTOMATOR_CONSTANT_CHANGED\",\n  PELLE_STRIKE_UNLOCKED: \"PELLE_STRIKE_UNLOCKED\",\n  // Used by events to signify that they are triggered by a particular\n  // event, not handled by the event hub\n  ACHIEVEMENT_EVENT_OTHER: \"ACHIEVEMENT_EVENT_OTHER\",\n  ENTER_PRESSED: \"ENTER_PRESSED\",\n  ARROW_KEY_PRESSED: \"ARROW_KEY_PRESSED\",\n  // UI Events\n  UPDATE: \"UPDATE\",\n  TAB_CHANGED: \"TAB_CHANGED\",\n  CLOSE_MODAL: \"CLOSE_MODAL\"\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/event-hub.js"],"names":["window","EventHub","constructor","_handlers","on","event","fn","target","handlers","undefined","push","offAll","Object","keys","filter","handler","dispatch","args","logic","GameUI","stats","countHandlers","eventHub","values","map","length","sum","ui","GAME_EVENT","UPDATE","GAME_TICK_BEFORE","GAME_TICK_AFTER","REPLICANTI_TICK_BEFORE","REPLICANTI_TICK_AFTER","DIMBOOST_BEFORE","DIMBOOST_AFTER","GALAXY_RESET_BEFORE","GALAXY_RESET_AFTER","SACRIFICE_RESET_BEFORE","SACRIFICE_RESET_AFTER","BIG_CRUNCH_BEFORE","BIG_CRUNCH_AFTER","ETERNITY_RESET_BEFORE","ETERNITY_RESET_AFTER","REALITY_RESET_BEFORE","REALITY_RESET_AFTER","SINGULARITY_RESET_BEFORE","SINGULARITY_RESET_AFTER","ARMAGEDDON_BEFORE","ARMAGEDDON_AFTER","GLYPHS_EQUIPPED_CHANGED","GLYPHS_CHANGED","GLYPH_SACRIFICED","GLYPH_SET_SAVE_CHANGE","GLYPH_VISUAL_CHANGE","BREAK_INFINITY","FIX_INFINITY","INFINITY_DIMENSION_UNLOCKED","INFINITY_CHALLENGE_COMPLETED","INFINITY_UPGRADE_BOUGHT","INFINITY_UPGRADE_CHARGED","INFINITY_UPGRADES_DISCHARGED","ACHIEVEMENT_UNLOCKED","CHALLENGE_FAILED","REALITY_UPGRADE_BOUGHT","REALITY_UPGRADE_TEN_BOUGHT","PERK_BOUGHT","BLACK_HOLE_UNLOCKED","BLACK_HOLE_UPGRADE_BOUGHT","GAME_LOAD","OFFLINE_CURRENCY_GAINED","SAVE_CONVERTED_FROM_PREVIOUS_VERSION","REALITY_FIRST_UNLOCKED","AUTOMATOR_TYPE_CHANGED","AUTOMATOR_SAVE_CHANGED","AUTOMATOR_CONSTANT_CHANGED","PELLE_STRIKE_UNLOCKED","ACHIEVEMENT_EVENT_OTHER","ENTER_PRESSED","ARROW_KEY_PRESSED","TAB_CHANGED","CLOSE_MODAL"],"mappings":"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","sourcesContent":["window.EventHub = class EventHub {\r\n  constructor() {\r\n    this._handlers = {};\r\n  }\r\n\r\n  on(event, fn, target) {\r\n    let handlers = this._handlers[event];\r\n    if (handlers === undefined) {\r\n      handlers = [];\r\n      this._handlers[event] = handlers;\r\n    }\r\n    handlers.push({ fn, target });\r\n  }\r\n\r\n  offAll(target) {\r\n    for (const handlers of Object.keys(this._handlers)) {\r\n      this._handlers[handlers] = this._handlers[handlers]\r\n        .filter(handler => handler.target !== target);\r\n    }\r\n  }\r\n\r\n  dispatch(event, args) {\r\n    const handlers = this._handlers[event];\r\n    if (handlers === undefined) return;\r\n    for (const handler of handlers) {\r\n      handler.fn(args);\r\n    }\r\n  }\r\n\r\n  static dispatch(event, ...args) {\r\n    EventHub.logic.dispatch(event, args);\r\n    GameUI.dispatch(event, args);\r\n  }\r\n\r\n  static get stats() {\r\n    // For debug/profiling purposes\r\n    function countHandlers(eventHub) {\r\n      return Object.values(eventHub._handlers)\r\n        .map(handlers => handlers.length)\r\n        .sum();\r\n    }\r\n    return `UI(UPDATE/Total): ${EventHub.ui._handlers[GAME_EVENT.UPDATE].length}/${countHandlers(EventHub.ui)}; ` +\r\n      `Logic(Total): ${countHandlers(EventHub.logic)}`;\r\n  }\r\n};\r\n\r\nEventHub.logic = new EventHub();\r\nEventHub.ui = new EventHub();\r\n\r\nwindow.GAME_EVENT = {\r\n  // Ticks\r\n  GAME_TICK_BEFORE: \"GAME_TICK_BEFORE\",\r\n  GAME_TICK_AFTER: \"GAME_TICK_AFTER\",\r\n  REPLICANTI_TICK_BEFORE: \"REPLICANTI_TICK_BEFORE\",\r\n  REPLICANTI_TICK_AFTER: \"REPLICANTI_TICK_AFTER\",\r\n\r\n  // Resets\r\n  DIMBOOST_BEFORE: \"DIMBOOST_BEFORE\",\r\n  DIMBOOST_AFTER: \"DIMBOOST_AFTER\",\r\n  GALAXY_RESET_BEFORE: \"GALAXY_RESET_BEFORE\",\r\n  GALAXY_RESET_AFTER: \"GALAXY_RESET_AFTER\",\r\n  SACRIFICE_RESET_BEFORE: \"SACRIFICE_RESET_BEFORE\",\r\n  SACRIFICE_RESET_AFTER: \"SACRIFICE_RESET_AFTER\",\r\n  BIG_CRUNCH_BEFORE: \"BIG_CRUNCH_BEFORE\",\r\n  BIG_CRUNCH_AFTER: \"BIG_CRUNCH_AFTER\",\r\n  ETERNITY_RESET_BEFORE: \"ETERNITY_RESET_BEFORE\",\r\n  ETERNITY_RESET_AFTER: \"ETERNITY_RESET_AFTER\",\r\n  REALITY_RESET_BEFORE: \"REALITY_RESET_BEFORE\",\r\n  REALITY_RESET_AFTER: \"REALITY_RESET_AFTER\",\r\n  SINGULARITY_RESET_BEFORE: \"SINGULARITY_RESET_BEFORE\",\r\n  SINGULARITY_RESET_AFTER: \"SINGULARITY_RESET_AFTER\",\r\n  ARMAGEDDON_BEFORE: \"ARMAGEDDON_BEFORE\",\r\n  ARMAGEDDON_AFTER: \"ARMAGEDDON_AFTER\",\r\n\r\n  // Glyphs\r\n  GLYPHS_EQUIPPED_CHANGED: \"GLYPHS_EQUIPPED_CHANGED\",\r\n  GLYPHS_CHANGED: \"GLYPHS_CHANGED\",\r\n  GLYPH_SACRIFICED: \"GLYPH_SACRIFICED\",\r\n  GLYPH_SET_SAVE_CHANGE: \"GLYPH_SET_SAVE_CHANGE\",\r\n  GLYPH_VISUAL_CHANGE: \"GLYPH_VISUAL_CHANGE\",\r\n\r\n  // Break Infinity\r\n  BREAK_INFINITY: \"BREAK_INFINITY\",\r\n  FIX_INFINITY: \"FIX_INFINITY\",\r\n\r\n  // Other\r\n  INFINITY_DIMENSION_UNLOCKED: \"INFINITY_DIMENSION_UNLOCKED\",\r\n  INFINITY_CHALLENGE_COMPLETED: \"INFINITY_CHALLENGE_COMPLETED\",\r\n  INFINITY_UPGRADE_BOUGHT: \"INFINITY_UPGRADE_BOUGHT\",\r\n  INFINITY_UPGRADE_CHARGED: \"INFINITY_UPGRADE_CHARGED\",\r\n  INFINITY_UPGRADES_DISCHARGED: \"INFINITY_UPGRADES_DISCHARGED\",\r\n  ACHIEVEMENT_UNLOCKED: \"ACHIEVEMENT_UNLOCKED\",\r\n  CHALLENGE_FAILED: \"CHALLENGE_FAILED\",\r\n  REALITY_UPGRADE_BOUGHT: \"REALITY_UPGRADE_BOUGHT\",\r\n  REALITY_UPGRADE_TEN_BOUGHT: \"REALITY_UPGRADE_TEN_BOUGHT\",\r\n  PERK_BOUGHT: \"PERK_BOUGHT\",\r\n  BLACK_HOLE_UNLOCKED: \"BLACK_HOLE_UNLOCKED\",\r\n  BLACK_HOLE_UPGRADE_BOUGHT: \"BLACK_HOLE_UPGRADE_BOUGHT\",\r\n  GAME_LOAD: \"GAME_LOAD\",\r\n  OFFLINE_CURRENCY_GAINED: \"OFFLINE_CURRENCY_GAINED\",\r\n  SAVE_CONVERTED_FROM_PREVIOUS_VERSION: \"SAVE_CONVERTED_FROM_PREVIOUS_VERSION\",\r\n  REALITY_FIRST_UNLOCKED: \"REALITY_FIRST_UNLOCKED\",\r\n  AUTOMATOR_TYPE_CHANGED: \"AUTOMATOR_TYPE_CHANGED\",\r\n  AUTOMATOR_SAVE_CHANGED: \"AUTOMATOR_SAVE_CHANGED\",\r\n  AUTOMATOR_CONSTANT_CHANGED: \"AUTOMATOR_CONSTANT_CHANGED\",\r\n  PELLE_STRIKE_UNLOCKED: \"PELLE_STRIKE_UNLOCKED\",\r\n\r\n  // Used by events to signify that they are triggered by a particular\r\n  // event, not handled by the event hub\r\n  ACHIEVEMENT_EVENT_OTHER: \"ACHIEVEMENT_EVENT_OTHER\",\r\n\r\n  ENTER_PRESSED: \"ENTER_PRESSED\",\r\n  ARROW_KEY_PRESSED: \"ARROW_KEY_PRESSED\",\r\n\r\n  // UI Events\r\n  UPDATE: \"UPDATE\",\r\n  TAB_CHANGED: \"TAB_CHANGED\",\r\n  CLOSE_MODAL: \"CLOSE_MODAL\",\r\n};\r\n"]},"metadata":{},"sourceType":"script"}