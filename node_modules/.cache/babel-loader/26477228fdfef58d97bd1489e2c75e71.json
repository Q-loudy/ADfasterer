{"ast":null,"code":"import BigCrunchButton from \"../BigCrunchButton\";\nimport HeaderBlackHole from \"../HeaderBlackHole\";\nimport HeaderChallengeDisplay from \"../HeaderChallengeDisplay\";\nimport HeaderChallengeEffects from \"../HeaderChallengeEffects\";\nimport HeaderPrestigeGroup from \"../HeaderPrestigeGroup\";\nimport NewsTicker from \"../NewsTicker\";\nimport GameSpeedDisplay from \"@/components/GameSpeedDisplay\";\nexport default {\n  name: \"ModernUi\",\n  components: {\n    BigCrunchButton,\n    HeaderChallengeDisplay,\n    HeaderChallengeEffects,\n    NewsTicker,\n    HeaderBlackHole,\n    HeaderPrestigeGroup,\n    GameSpeedDisplay\n  },\n\n  data() {\n    return {\n      bigCrunch: false,\n      hasReality: false,\n      newGameKey: \"\"\n    };\n  },\n\n  computed: {\n    news() {\n      return this.$viewModel.news;\n    },\n\n    topMargin() {\n      return this.$viewModel.news ? \"\" : \"margin-top: 3.9rem\";\n    }\n\n  },\n  methods: {\n    update() {\n      const crunchButtonVisible = !player.break && Player.canCrunch;\n      this.bigCrunch = crunchButtonVisible && Time.bestInfinityRealTime.totalMinutes > 1;\n      this.hasReality = PlayerProgress.realityUnlocked(); // This only exists to force a key-swap after pressing the button to start a new game; the news ticker can break\n      // if it isn't redrawn\n\n      this.newGameKey = Pelle.isDoomed;\n    },\n\n    handleClick() {\n      if (PlayerProgress.infinityUnlocked()) manualBigCrunchResetRequest();else Modal.bigCrunch.show();\n    }\n\n  }\n};","map":{"version":3,"sources":["ModernUi.vue"],"names":[],"mappings":"AACA,OAAA,eAAA,MAAA,oBAAA;AACA,OAAA,eAAA,MAAA,oBAAA;AACA,OAAA,sBAAA,MAAA,2BAAA;AACA,OAAA,sBAAA,MAAA,2BAAA;AACA,OAAA,mBAAA,MAAA,wBAAA;AACA,OAAA,UAAA,MAAA,eAAA;AAEA,OAAA,gBAAA,MAAA,+BAAA;AAGA,eAAA;AACA,EAAA,IAAA,EAAA,UADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,eADA;AAEA,IAAA,sBAFA;AAGA,IAAA,sBAHA;AAIA,IAAA,UAJA;AAKA,IAAA,eALA;AAMA,IAAA,mBANA;AAOA,IAAA;AAPA,GAFA;;AAWA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,SAAA,EAAA,KADA;AAEA,MAAA,UAAA,EAAA,KAFA;AAGA,MAAA,UAAA,EAAA;AAHA,KAAA;AAKA,GAjBA;;AAkBA,EAAA,QAAA,EAAA;AACA,IAAA,IAAA,GAAA;AACA,aAAA,KAAA,UAAA,CAAA,IAAA;AACA,KAHA;;AAIA,IAAA,SAAA,GAAA;AACA,aAAA,KAAA,UAAA,CAAA,IAAA,GAAA,EAAA,GAAA,oBAAA;AACA;;AANA,GAlBA;AA0BA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,YAAA,mBAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,MAAA,CAAA,SAAA;AACA,WAAA,SAAA,GAAA,mBAAA,IAAA,IAAA,CAAA,oBAAA,CAAA,YAAA,GAAA,CAAA;AACA,WAAA,UAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAHA,CAIA;AACA;;AACA,WAAA,UAAA,GAAA,KAAA,CAAA,QAAA;AACA,KARA;;AASA,IAAA,WAAA,GAAA;AACA,UAAA,cAAA,CAAA,gBAAA,EAAA,EAAA,2BAAA,GAAA,KACA,KAAA,CAAA,SAAA,CAAA,IAAA;AACA;;AAZA;AA1BA,CAAA","sourcesContent":["<script>\r\nimport BigCrunchButton from \"../BigCrunchButton\";\r\nimport HeaderBlackHole from \"../HeaderBlackHole\";\r\nimport HeaderChallengeDisplay from \"../HeaderChallengeDisplay\";\r\nimport HeaderChallengeEffects from \"../HeaderChallengeEffects\";\r\nimport HeaderPrestigeGroup from \"../HeaderPrestigeGroup\";\r\nimport NewsTicker from \"../NewsTicker\";\r\n\r\nimport GameSpeedDisplay from \"@/components/GameSpeedDisplay\";\r\n\r\n\r\nexport default {\r\n  name: \"ModernUi\",\r\n  components: {\r\n    BigCrunchButton,\r\n    HeaderChallengeDisplay,\r\n    HeaderChallengeEffects,\r\n    NewsTicker,\r\n    HeaderBlackHole,\r\n    HeaderPrestigeGroup,\r\n    GameSpeedDisplay,\r\n  },\r\n  data() {\r\n    return {\r\n      bigCrunch: false,\r\n      hasReality: false,\r\n      newGameKey: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    news() {\r\n      return this.$viewModel.news;\r\n    },\r\n    topMargin() {\r\n      return this.$viewModel.news ? \"\" : \"margin-top: 3.9rem\";\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      const crunchButtonVisible = !player.break && Player.canCrunch;\r\n      this.bigCrunch = crunchButtonVisible && Time.bestInfinityRealTime.totalMinutes > 1;\r\n      this.hasReality = PlayerProgress.realityUnlocked();\r\n      // This only exists to force a key-swap after pressing the button to start a new game; the news ticker can break\r\n      // if it isn't redrawn\r\n      this.newGameKey = Pelle.isDoomed;\r\n    },\r\n    handleClick() {\r\n      if (PlayerProgress.infinityUnlocked()) manualBigCrunchResetRequest();\r\n      else Modal.bigCrunch.show();\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div id=\"page\">\r\n    <link\r\n      rel=\"stylesheet\"\r\n      type=\"text/css\"\r\n      href=\"stylesheets/new-ui-styles.css\"\r\n    >\r\n    <div\r\n      :key=\"newGameKey\"\r\n      class=\"game-container\"\r\n      :style=\"topMargin\"\r\n    >\r\n      <NewsTicker\r\n        v-if=\"news\"\r\n      />\r\n      <BigCrunchButton />\r\n      <div\r\n        v-if=\"!bigCrunch\"\r\n        class=\"tab-container\"\r\n      >\r\n        <HeaderPrestigeGroup />\r\n        <div class=\"information-header\">\r\n          <HeaderChallengeDisplay />\r\n          <HeaderChallengeEffects />\r\n          <GameSpeedDisplay v-if=\"hasReality\" />\r\n          <br v-if=\"hasReality\">\r\n          <HeaderBlackHole />\r\n        </div>\r\n        <slot />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/ui-modes/modern"},"metadata":{},"sourceType":"module"}