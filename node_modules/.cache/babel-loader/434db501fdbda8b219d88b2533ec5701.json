{"ast":null,"code":"import { BitUpgradeState } from \"../../utils\";\n\nclass PelleStrikeState extends BitUpgradeState {\n  get bits() {\n    return player.celestials.pelle.progressBits;\n  }\n\n  set bits(value) {\n    player.celestials.pelle.progressBits = value;\n  }\n\n  get hasStrike() {\n    return this.isUnlocked;\n  }\n\n  get canBeUnlocked() {\n    return Pelle.isDoomed && !this.hasStrike;\n  }\n\n  get requirement() {\n    const x = this.config.requirementDescription;\n    return typeof x === \"function\" ? x() : x;\n  }\n\n  get penalty() {\n    const x = this.config.penaltyDescription;\n    return typeof x === \"function\" ? x() : x;\n  }\n\n  reward() {\n    return this.config.rewardDescription();\n  }\n\n  get rift() {\n    return this.config.rift();\n  }\n\n  trigger() {\n    this.unlock();\n  }\n\n  onUnlock() {\n    GameUI.notify.strike(`You encountered a Pelle Strike: ${this.requirement}`);\n    player.celestials.pelle.collapsed.rifts = false; // If it's paradox, reset the records\n\n    if (this.id === 5) Pelle.resetResourcesForDilation();\n    Tab.celestials.pelle.show();\n    EventHub.dispatch(GAME_EVENT.PELLE_STRIKE_UNLOCKED);\n  }\n\n}\n\nexport const PelleStrikes = mapGameDataToObject(GameDatabase.celestials.pelle.strikes, config => new PelleStrikeState(config));","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/celestials/pelle/strikes.js"],"names":["BitUpgradeState","PelleStrikeState","bits","player","celestials","pelle","progressBits","value","hasStrike","isUnlocked","canBeUnlocked","Pelle","isDoomed","requirement","x","config","requirementDescription","penalty","penaltyDescription","reward","rewardDescription","rift","trigger","unlock","onUnlock","GameUI","notify","strike","collapsed","rifts","id","resetResourcesForDilation","Tab","show","EventHub","dispatch","GAME_EVENT","PELLE_STRIKE_UNLOCKED","PelleStrikes","mapGameDataToObject","GameDatabase","strikes"],"mappings":"AAAA,SAASA,eAAT,QAAgC,aAAhC;;AAEA,MAAMC,gBAAN,SAA+BD,eAA/B,CAA+C;AACrC,MAAJE,IAAI,GAAG;AAAE,WAAOC,MAAM,CAACC,UAAP,CAAkBC,KAAlB,CAAwBC,YAA/B;AAA8C;;AACnD,MAAJJ,IAAI,CAACK,KAAD,EAAQ;AAAEJ,IAAAA,MAAM,CAACC,UAAP,CAAkBC,KAAlB,CAAwBC,YAAxB,GAAuCC,KAAvC;AAA+C;;AAEpD,MAATC,SAAS,GAAG;AACd,WAAO,KAAKC,UAAZ;AACD;;AAEgB,MAAbC,aAAa,GAAG;AAClB,WAAOC,KAAK,CAACC,QAAN,IAAkB,CAAC,KAAKJ,SAA/B;AACD;;AAEc,MAAXK,WAAW,GAAG;AAChB,UAAMC,CAAC,GAAG,KAAKC,MAAL,CAAYC,sBAAtB;AACA,WAAO,OAAOF,CAAP,KAAa,UAAb,GAA0BA,CAAC,EAA3B,GAAgCA,CAAvC;AACD;;AAEU,MAAPG,OAAO,GAAG;AACZ,UAAMH,CAAC,GAAG,KAAKC,MAAL,CAAYG,kBAAtB;AACA,WAAO,OAAOJ,CAAP,KAAa,UAAb,GAA0BA,CAAC,EAA3B,GAAgCA,CAAvC;AACD;;AAEDK,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKJ,MAAL,CAAYK,iBAAZ,EAAP;AACD;;AAEO,MAAJC,IAAI,GAAG;AACT,WAAO,KAAKN,MAAL,CAAYM,IAAZ,EAAP;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,SAAKC,MAAL;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACTC,IAAAA,MAAM,CAACC,MAAP,CAAcC,MAAd,CAAsB,mCAAkC,KAAKd,WAAY,EAAzE;AACAV,IAAAA,MAAM,CAACC,UAAP,CAAkBC,KAAlB,CAAwBuB,SAAxB,CAAkCC,KAAlC,GAA0C,KAA1C,CAFS,CAIT;;AACA,QAAI,KAAKC,EAAL,KAAY,CAAhB,EAAmBnB,KAAK,CAACoB,yBAAN;AACnBC,IAAAA,GAAG,CAAC5B,UAAJ,CAAeC,KAAf,CAAqB4B,IAArB;AACAC,IAAAA,QAAQ,CAACC,QAAT,CAAkBC,UAAU,CAACC,qBAA7B;AACD;;AA1C4C;;AA6C/C,OAAO,MAAMC,YAAY,GAAGC,mBAAmB,CAC7CC,YAAY,CAACpC,UAAb,CAAwBC,KAAxB,CAA8BoC,OADe,EAE7C1B,MAAM,IAAI,IAAId,gBAAJ,CAAqBc,MAArB,CAFmC,CAAxC","sourcesContent":["import { BitUpgradeState } from \"../../utils\";\r\n\r\nclass PelleStrikeState extends BitUpgradeState {\r\n  get bits() { return player.celestials.pelle.progressBits; }\r\n  set bits(value) { player.celestials.pelle.progressBits = value; }\r\n\r\n  get hasStrike() {\r\n    return this.isUnlocked;\r\n  }\r\n\r\n  get canBeUnlocked() {\r\n    return Pelle.isDoomed && !this.hasStrike;\r\n  }\r\n\r\n  get requirement() {\r\n    const x = this.config.requirementDescription;\r\n    return typeof x === \"function\" ? x() : x;\r\n  }\r\n\r\n  get penalty() {\r\n    const x = this.config.penaltyDescription;\r\n    return typeof x === \"function\" ? x() : x;\r\n  }\r\n\r\n  reward() {\r\n    return this.config.rewardDescription();\r\n  }\r\n\r\n  get rift() {\r\n    return this.config.rift();\r\n  }\r\n\r\n  trigger() {\r\n    this.unlock();\r\n  }\r\n\r\n  onUnlock() {\r\n    GameUI.notify.strike(`You encountered a Pelle Strike: ${this.requirement}`);\r\n    player.celestials.pelle.collapsed.rifts = false;\r\n\r\n    // If it's paradox, reset the records\r\n    if (this.id === 5) Pelle.resetResourcesForDilation();\r\n    Tab.celestials.pelle.show();\r\n    EventHub.dispatch(GAME_EVENT.PELLE_STRIKE_UNLOCKED);\r\n  }\r\n}\r\n\r\nexport const PelleStrikes = mapGameDataToObject(\r\n  GameDatabase.celestials.pelle.strikes,\r\n  config => new PelleStrikeState(config)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}