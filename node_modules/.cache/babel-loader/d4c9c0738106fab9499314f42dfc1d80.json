{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\n\n/**\r\n * @abstract\r\n */\nexport class AutobuyerState {\n  constructor(id = null) {\n    this._id = id;\n  }\n  /**\r\n   * @abstract\r\n   */\n\n\n  get data() {\n    throw new NotImplementedError();\n  }\n  /**\r\n   * @abstract\r\n   */\n\n\n  get isUnlocked() {\n    throw new NotImplementedError();\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get canTick() {\n    const isDisabled = !player.auto.autobuyersOn || !this.constructor.isActive;\n    return this.isActive && !isDisabled && (this.isUnlocked || this.isBought);\n  }\n\n  get isActive() {\n    return this.data.isActive;\n  }\n\n  set isActive(value) {\n    this.data.isActive = value;\n  }\n\n  get bulk() {\n    return 1;\n  }\n\n  toggle() {\n    this.isActive = !this.isActive;\n  }\n  /**\r\n   * @abstract\r\n   */\n\n\n  tick() {\n    throw new NotImplementedError();\n  } // eslint-disable-next-line no-empty-function\n\n\n  reset() {}\n\n  static get entryCount() {\n    return 1;\n  }\n  /**\r\n   * @abstract\r\n   * @returns {string}\r\n   */\n\n\n  static get autobuyerGroupName() {\n    throw new NotImplementedError();\n  }\n\n  static get isActive() {\n    return true;\n  }\n  /** @abstract */\n\n\n  static set isActive(value) {\n    throw new NotImplementedError();\n  }\n\n  static createAccessor() {\n    const entryCount = this.entryCount;\n    /** @type {object[]} */\n\n    const zeroIndexed = Array.range(1, entryCount).map(id => new this(id));\n    const oneIndexed = [null, ...zeroIndexed];\n    /** @param {number} id */\n\n    const accessor = id => oneIndexed[id];\n\n    Object.defineProperties(accessor, {\n      oneIndexed: {\n        get: () => oneIndexed\n      },\n      zeroIndexed: {\n        get: () => zeroIndexed\n      },\n      entryCount: {\n        get: () => entryCount\n      },\n      anyUnlocked: {\n        get: () => zeroIndexed.some(x => x.isUnlocked)\n      },\n      allUnlocked: {\n        get: () => zeroIndexed.every(x => x.isUnlocked)\n      },\n      allActive: {\n        get: () => zeroIndexed.every(x => x.isActive)\n      },\n      groupName: {\n        get: () => this.autobuyerGroupName\n      },\n      isActive: {\n        get: () => this.isActive,\n        set: value => {\n          this.isActive = value;\n        }\n      }\n    });\n\n    accessor.toggle = () => this.isActive = !this.isActive;\n\n    return accessor;\n  }\n\n}\n/**\r\n * @abstract\r\n */\n\nexport class IntervaledAutobuyerState extends AutobuyerState {\n  get interval() {\n    return this.data.interval;\n  }\n\n  get canTick() {\n    return super.canTick && this.timeSinceLastTick >= this.interval;\n  }\n\n  get timeSinceLastTick() {\n    return player.records.realTimePlayed - this.data.lastTick;\n  }\n\n  tick() {\n    this.data.lastTick = player.records.realTimePlayed;\n  }\n  /**\r\n   * @abstract\r\n   */\n\n\n  get resetTickOn() {\n    return undefined;\n  }\n\n  resetTick(prestigeEvent) {\n    if (prestigeEvent >= this.resetTickOn) this.data.lastTick = 0;\n  } // eslint-disable-next-line no-empty-function\n\n\n  reset() {}\n\n}\n/**\r\n * @abstract\r\n */\n\nexport class UpgradeableAutobuyerState extends IntervaledAutobuyerState {\n  /**\r\n  * @abstract\r\n  */\n  get baseInterval() {\n    throw new NotImplementedError();\n  }\n\n  get cost() {\n    return this.data.cost;\n  }\n\n  get interval() {\n    const interval = this.data.interval;\n    return BreakInfinityUpgrade.autobuyerSpeed.isBought ? interval / 2 : interval;\n  }\n\n  get hasMaxedInterval() {\n    return this.data.interval <= 100;\n  }\n\n  upgradeInterval(free) {\n    if (this.hasMaxedInterval) return;\n    if (!free && !Currency.infinityPoints.purchase(this.cost)) return;\n    this.data.cost *= 2;\n    this.data.interval = Math.clampMin(this.data.interval * 0.6, 100);\n    Achievement(52).tryUnlock();\n    Achievement(53).tryUnlock();\n    GameUI.update();\n  }\n\n  maxIntervalForFree() {\n    while (!this.hasMaxedInterval) {\n      this.upgradeInterval(true);\n    }\n  }\n\n  reset() {\n    if (EternityMilestone.keepAutobuyers.isReached || PelleUpgrade.keepAutobuyers.canBeApplied) return;\n    this.data.interval = this.baseInterval;\n    this.data.cost = 1;\n  }\n\n  static createAccessor() {\n    const accessor = super.createAccessor();\n    Object.defineProperty(accessor, \"allMaxedInterval\", {\n      get: () => accessor.zeroIndexed.every(x => x.hasMaxedInterval)\n    });\n    Object.defineProperty(accessor, \"hasInstant\", {\n      get: () => accessor.zeroIndexed.some(x => x.interval < player.options.updateRate)\n    });\n    return accessor;\n  }\n\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/autobuyers/autobuyer.js"],"names":["AutobuyerState","constructor","id","_id","data","NotImplementedError","isUnlocked","canTick","isDisabled","player","auto","autobuyersOn","isActive","isBought","value","bulk","toggle","tick","reset","entryCount","autobuyerGroupName","createAccessor","zeroIndexed","Array","range","map","oneIndexed","accessor","Object","defineProperties","get","anyUnlocked","some","x","allUnlocked","every","allActive","groupName","set","IntervaledAutobuyerState","interval","timeSinceLastTick","records","realTimePlayed","lastTick","resetTickOn","undefined","resetTick","prestigeEvent","UpgradeableAutobuyerState","baseInterval","cost","BreakInfinityUpgrade","autobuyerSpeed","hasMaxedInterval","upgradeInterval","free","Currency","infinityPoints","purchase","Math","clampMin","Achievement","tryUnlock","GameUI","update","maxIntervalForFree","EternityMilestone","keepAutobuyers","isReached","PelleUpgrade","canBeApplied","defineProperty","options","updateRate"],"mappings":"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","sourcesContent":["/**\r\n * @abstract\r\n */\r\nexport class AutobuyerState {\r\n  constructor(id = null) {\r\n    this._id = id;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   */\r\n  get data() { throw new NotImplementedError(); }\r\n\r\n  /**\r\n   * @abstract\r\n   */\r\n  get isUnlocked() { throw new NotImplementedError(); }\r\n\r\n  get id() { return this._id; }\r\n\r\n  get canTick() {\r\n    const isDisabled = !player.auto.autobuyersOn || !this.constructor.isActive;\r\n    return this.isActive && !isDisabled && (this.isUnlocked || this.isBought);\r\n  }\r\n\r\n  get isActive() {\r\n    return this.data.isActive;\r\n  }\r\n\r\n  set isActive(value) {\r\n    this.data.isActive = value;\r\n  }\r\n\r\n  get bulk() {\r\n    return 1;\r\n  }\r\n\r\n  toggle() {\r\n    this.isActive = !this.isActive;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   */\r\n  tick() { throw new NotImplementedError(); }\r\n\r\n  // eslint-disable-next-line no-empty-function\r\n  reset() { }\r\n\r\n  static get entryCount() { return 1; }\r\n\r\n  /**\r\n   * @abstract\r\n   * @returns {string}\r\n   */\r\n  static get autobuyerGroupName() { throw new NotImplementedError(); }\r\n  static get isActive() { return true; }\r\n  /** @abstract */\r\n  static set isActive(value) { throw new NotImplementedError(); }\r\n\r\n  static createAccessor() {\r\n    const entryCount = this.entryCount;\r\n    /** @type {object[]} */\r\n    const zeroIndexed = Array.range(1, entryCount).map(id => new this(id));\r\n    const oneIndexed = [null, ...zeroIndexed];\r\n    /** @param {number} id */\r\n    const accessor = id => oneIndexed[id];\r\n    Object.defineProperties(accessor, {\r\n      oneIndexed: { get: () => oneIndexed },\r\n      zeroIndexed: { get: () => zeroIndexed },\r\n      entryCount: { get: () => entryCount },\r\n      anyUnlocked: { get: () => zeroIndexed.some(x => x.isUnlocked) },\r\n      allUnlocked: { get: () => zeroIndexed.every(x => x.isUnlocked) },\r\n      allActive: { get: () => zeroIndexed.every(x => x.isActive) },\r\n      groupName: { get: () => this.autobuyerGroupName },\r\n      isActive: {\r\n        get: () => this.isActive,\r\n        set: value => { this.isActive = value; },\r\n      },\r\n    });\r\n    accessor.toggle = () => this.isActive = !this.isActive;\r\n    return accessor;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @abstract\r\n */\r\nexport class IntervaledAutobuyerState extends AutobuyerState {\r\n  get interval() {\r\n    return this.data.interval;\r\n  }\r\n\r\n  get canTick() {\r\n    return super.canTick && this.timeSinceLastTick >= this.interval;\r\n  }\r\n\r\n  get timeSinceLastTick() {\r\n    return player.records.realTimePlayed - this.data.lastTick;\r\n  }\r\n\r\n  tick() {\r\n    this.data.lastTick = player.records.realTimePlayed;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   */\r\n  get resetTickOn() { return undefined; }\r\n\r\n  resetTick(prestigeEvent) {\r\n    if (prestigeEvent >= this.resetTickOn) this.data.lastTick = 0;\r\n  }\r\n\r\n  // eslint-disable-next-line no-empty-function\r\n  reset() { }\r\n}\r\n\r\n\r\n/**\r\n * @abstract\r\n */\r\nexport class UpgradeableAutobuyerState extends IntervaledAutobuyerState {\r\n  /**\r\n  * @abstract\r\n  */\r\n  get baseInterval() { throw new NotImplementedError(); }\r\n\r\n  get cost() {\r\n    return this.data.cost;\r\n  }\r\n\r\n  get interval() {\r\n    const interval = this.data.interval;\r\n    return BreakInfinityUpgrade.autobuyerSpeed.isBought ? interval / 2 : interval;\r\n  }\r\n\r\n  get hasMaxedInterval() {\r\n    return this.data.interval <= 100;\r\n  }\r\n\r\n  upgradeInterval(free) {\r\n    if (this.hasMaxedInterval) return;\r\n    if (!free && !Currency.infinityPoints.purchase(this.cost)) return;\r\n    this.data.cost *= 2;\r\n    this.data.interval = Math.clampMin(this.data.interval * 0.6, 100);\r\n    Achievement(52).tryUnlock();\r\n    Achievement(53).tryUnlock();\r\n    GameUI.update();\r\n  }\r\n\r\n  maxIntervalForFree() {\r\n    while (!this.hasMaxedInterval) {\r\n      this.upgradeInterval(true);\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    if (EternityMilestone.keepAutobuyers.isReached || PelleUpgrade.keepAutobuyers.canBeApplied) return;\r\n    this.data.interval = this.baseInterval;\r\n    this.data.cost = 1;\r\n  }\r\n\r\n  static createAccessor() {\r\n    const accessor = super.createAccessor();\r\n    Object.defineProperty(accessor, \"allMaxedInterval\", {\r\n      get: () => accessor.zeroIndexed.every(x => x.hasMaxedInterval)\r\n    });\r\n    Object.defineProperty(accessor, \"hasInstant\", {\r\n      get: () => accessor.zeroIndexed.some(x => x.interval < player.options.updateRate)\r\n    });\r\n    return accessor;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}