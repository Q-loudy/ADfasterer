{"ast":null,"code":"import { IntervaledAutobuyerState } from \"./autobuyer\";\nexport class TimeDimensionAutobuyerState extends IntervaledAutobuyerState {\n  get tier() {\n    return this.id;\n  }\n\n  get name() {\n    return TimeDimension(this.tier).shortDisplayName;\n  }\n\n  get fullName() {\n    return `${this.name} Time Dimension`;\n  }\n\n  get data() {\n    return player.auto.timeDims.all[this.tier - 1];\n  }\n\n  get interval() {\n    return 1000 / PerkShopUpgrade.autoSpeed.effectOrDefault(1);\n  }\n\n  get isUnlocked() {\n    return RealityUpgrade(13).isBought && (!Pelle.isDoomed || PelleUpgrade.TDAutobuyers.canBeApplied);\n  }\n\n  get resetTickOn() {\n    return PRESTIGE_EVENT.REALITY;\n  }\n\n  get hasUnlimitedBulk() {\n    return true;\n  }\n\n  tick() {\n    // We specifically call these two things before actually running the TD autobuyer code because that behavior\n    // is desirable to gameplay, but simply reordering the autobuyers overall has undesired side-effects. There\n    // are checks internal to these calls which ensure that they don't trigger even when still locked\n    applyEU2();\n    Autobuyer.epMult.tick();\n    const tier = this.tier;\n    if (!TimeDimension(tier).isAvailableForPurchase) return;\n    super.tick();\n\n    if (Currency.eternityPoints.exponent >= 10) {\n      buyMaxTimeDimension(tier, 1, true);\n    } else {\n      buySingleTimeDimension(tier, true);\n    }\n  }\n\n  static get entryCount() {\n    return 8;\n  }\n\n  static get autobuyerGroupName() {\n    return \"Time Dimension\";\n  }\n\n  static get isActive() {\n    return player.auto.timeDims.isActive;\n  }\n\n  static set isActive(value) {\n    player.auto.timeDims.isActive = value;\n  }\n\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/autobuyers/time-dimension-autobuyer.js"],"names":["IntervaledAutobuyerState","TimeDimensionAutobuyerState","tier","id","name","TimeDimension","shortDisplayName","fullName","data","player","auto","timeDims","all","interval","PerkShopUpgrade","autoSpeed","effectOrDefault","isUnlocked","RealityUpgrade","isBought","Pelle","isDoomed","PelleUpgrade","TDAutobuyers","canBeApplied","resetTickOn","PRESTIGE_EVENT","REALITY","hasUnlimitedBulk","tick","applyEU2","Autobuyer","epMult","isAvailableForPurchase","Currency","eternityPoints","exponent","buyMaxTimeDimension","buySingleTimeDimension","entryCount","autobuyerGroupName","isActive","value"],"mappings":"AAAA,SAASA,wBAAT,QAAyC,aAAzC;AAEA,OAAO,MAAMC,2BAAN,SAA0CD,wBAA1C,CAAmE;AAChE,MAAJE,IAAI,GAAG;AACT,WAAO,KAAKC,EAAZ;AACD;;AAEO,MAAJC,IAAI,GAAG;AACT,WAAOC,aAAa,CAAC,KAAKH,IAAN,CAAb,CAAyBI,gBAAhC;AACD;;AAEW,MAARC,QAAQ,GAAG;AACb,WAAQ,GAAE,KAAKH,IAAK,iBAApB;AACD;;AAEO,MAAJI,IAAI,GAAG;AACT,WAAOC,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqBC,GAArB,CAAyB,KAAKV,IAAL,GAAY,CAArC,CAAP;AACD;;AAEW,MAARW,QAAQ,GAAG;AACb,WAAO,OAAOC,eAAe,CAACC,SAAhB,CAA0BC,eAA1B,CAA0C,CAA1C,CAAd;AACD;;AAEa,MAAVC,UAAU,GAAG;AACf,WAAOC,cAAc,CAAC,EAAD,CAAd,CAAmBC,QAAnB,KAAgC,CAACC,KAAK,CAACC,QAAP,IAAmBC,YAAY,CAACC,YAAb,CAA0BC,YAA7E,CAAP;AACD;;AAEc,MAAXC,WAAW,GAAG;AAChB,WAAOC,cAAc,CAACC,OAAtB;AACD;;AAEmB,MAAhBC,gBAAgB,GAAG;AACrB,WAAO,IAAP;AACD;;AAEDC,EAAAA,IAAI,GAAG;AACL;AACA;AACA;AACAC,IAAAA,QAAQ;AACRC,IAAAA,SAAS,CAACC,MAAV,CAAiBH,IAAjB;AAEA,UAAM3B,IAAI,GAAG,KAAKA,IAAlB;AACA,QAAI,CAACG,aAAa,CAACH,IAAD,CAAb,CAAoB+B,sBAAzB,EAAiD;AACjD,UAAMJ,IAAN;;AACA,QAAIK,QAAQ,CAACC,cAAT,CAAwBC,QAAxB,IAAoC,EAAxC,EAA4C;AAC1CC,MAAAA,mBAAmB,CAACnC,IAAD,EAAO,CAAP,EAAU,IAAV,CAAnB;AACD,KAFD,MAEO;AACLoC,MAAAA,sBAAsB,CAACpC,IAAD,EAAO,IAAP,CAAtB;AACD;AACF;;AAEoB,aAAVqC,UAAU,GAAG;AAAE,WAAO,CAAP;AAAW;;AACR,aAAlBC,kBAAkB,GAAG;AAAE,WAAO,gBAAP;AAA0B;;AACzC,aAARC,QAAQ,GAAG;AAAE,WAAOhC,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqB8B,QAA5B;AAAuC;;AAC5C,aAARA,QAAQ,CAACC,KAAD,EAAQ;AAAEjC,IAAAA,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqB8B,QAArB,GAAgCC,KAAhC;AAAwC;;AArDG","sourcesContent":["import { IntervaledAutobuyerState } from \"./autobuyer\";\r\n\r\nexport class TimeDimensionAutobuyerState extends IntervaledAutobuyerState {\r\n  get tier() {\r\n    return this.id;\r\n  }\r\n\r\n  get name() {\r\n    return TimeDimension(this.tier).shortDisplayName;\r\n  }\r\n\r\n  get fullName() {\r\n    return `${this.name} Time Dimension`;\r\n  }\r\n\r\n  get data() {\r\n    return player.auto.timeDims.all[this.tier - 1];\r\n  }\r\n\r\n  get interval() {\r\n    return 1000 / PerkShopUpgrade.autoSpeed.effectOrDefault(1);\r\n  }\r\n\r\n  get isUnlocked() {\r\n    return RealityUpgrade(13).isBought && (!Pelle.isDoomed || PelleUpgrade.TDAutobuyers.canBeApplied);\r\n  }\r\n\r\n  get resetTickOn() {\r\n    return PRESTIGE_EVENT.REALITY;\r\n  }\r\n\r\n  get hasUnlimitedBulk() {\r\n    return true;\r\n  }\r\n\r\n  tick() {\r\n    // We specifically call these two things before actually running the TD autobuyer code because that behavior\r\n    // is desirable to gameplay, but simply reordering the autobuyers overall has undesired side-effects. There\r\n    // are checks internal to these calls which ensure that they don't trigger even when still locked\r\n    applyEU2();\r\n    Autobuyer.epMult.tick();\r\n\r\n    const tier = this.tier;\r\n    if (!TimeDimension(tier).isAvailableForPurchase) return;\r\n    super.tick();\r\n    if (Currency.eternityPoints.exponent >= 10) {\r\n      buyMaxTimeDimension(tier, 1, true);\r\n    } else {\r\n      buySingleTimeDimension(tier, true);\r\n    }\r\n  }\r\n\r\n  static get entryCount() { return 8; }\r\n  static get autobuyerGroupName() { return \"Time Dimension\"; }\r\n  static get isActive() { return player.auto.timeDims.isActive; }\r\n  static set isActive(value) { player.auto.timeDims.isActive = value; }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}