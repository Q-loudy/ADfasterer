{"ast":null,"code":"import AutobuyerBox from \"./AutobuyerBox\";\nimport AutobuyerDropdownEntry from \"./AutobuyerDropdownEntry\";\nimport AutobuyerInput from \"./AutobuyerInput\";\nimport AutobuyerIntervalButton from \"./AutobuyerIntervalButton\";\nimport ExpandingControlBox from \"@/components/ExpandingControlBox\";\nexport default {\n  name: \"BigCrunchAutobuyerBox\",\n  components: {\n    AutobuyerBox,\n    AutobuyerIntervalButton,\n    AutobuyerInput,\n    ExpandingControlBox,\n    AutobuyerDropdownEntry\n  },\n  props: {\n    isModal: {\n      type: Boolean,\n      required: false,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      isDoomed: false,\n      postBreak: false,\n      hasMaxedInterval: false,\n      mode: AUTO_CRUNCH_MODE.AMOUNT,\n      hasAdditionalModes: false,\n      increaseWithMult: true\n    };\n  },\n\n  computed: {\n    autobuyer: () => Autobuyer.bigCrunch,\n    modes: () => [AUTO_CRUNCH_MODE.AMOUNT, AUTO_CRUNCH_MODE.TIME, AUTO_CRUNCH_MODE.X_HIGHEST],\n    amountMode: () => AUTO_ETERNITY_MODE.AMOUNT\n  },\n  watch: {\n    increaseWithMult(newValue) {\n      this.autobuyer.increaseWithMult = newValue;\n    }\n\n  },\n  methods: {\n    update() {\n      this.isDoomed = Pelle.isDoomed;\n      this.postBreak = player.break;\n      this.hasMaxedInterval = this.autobuyer.hasMaxedInterval;\n      this.mode = this.autobuyer.mode;\n      this.hasAdditionalModes = this.autobuyer.hasAdditionalModes;\n      this.increaseWithMult = this.autobuyer.increaseWithMult;\n    },\n\n    modeProps(mode) {\n      switch (mode) {\n        case AUTO_CRUNCH_MODE.AMOUNT:\n          return {\n            title: \"Big Crunch at X IP\",\n            input: {\n              property: \"amount\",\n              type: \"decimal\"\n            }\n          };\n\n        case AUTO_CRUNCH_MODE.TIME:\n          return {\n            title: \"Seconds between Crunches\",\n            input: {\n              property: \"time\",\n              type: \"float\"\n            }\n          };\n\n        case AUTO_CRUNCH_MODE.X_HIGHEST:\n          return {\n            title: \"X times highest IP\",\n            input: {\n              property: \"xHighest\",\n              type: \"decimal\"\n            }\n          };\n      }\n\n      throw new Error(\"Unknown Auto Crunch mode\");\n    },\n\n    modeName(mode) {\n      return this.modeProps(mode).title;\n    }\n\n  }\n};","map":{"version":3,"sources":["BigCrunchAutobuyerBox.vue"],"names":[],"mappings":"AACA,OAAA,YAAA,MAAA,gBAAA;AACA,OAAA,sBAAA,MAAA,0BAAA;AACA,OAAA,cAAA,MAAA,kBAAA;AACA,OAAA,uBAAA,MAAA,2BAAA;AACA,OAAA,mBAAA,MAAA,kCAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,uBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,YADA;AAEA,IAAA,uBAFA;AAGA,IAAA,cAHA;AAIA,IAAA,mBAJA;AAKA,IAAA;AALA,GAFA;AASA,EAAA,KAAA,EAAA;AACA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,QAAA,EAAA,KAFA;AAGA,MAAA,OAAA,EAAA;AAHA;AADA,GATA;;AAgBA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,KADA;AAEA,MAAA,SAAA,EAAA,KAFA;AAGA,MAAA,gBAAA,EAAA,KAHA;AAIA,MAAA,IAAA,EAAA,gBAAA,CAAA,MAJA;AAKA,MAAA,kBAAA,EAAA,KALA;AAMA,MAAA,gBAAA,EAAA;AANA,KAAA;AAQA,GAzBA;;AA0BA,EAAA,QAAA,EAAA;AACA,IAAA,SAAA,EAAA,MAAA,SAAA,CAAA,SADA;AAEA,IAAA,KAAA,EAAA,MAAA,CACA,gBAAA,CAAA,MADA,EAEA,gBAAA,CAAA,IAFA,EAGA,gBAAA,CAAA,SAHA,CAFA;AAOA,IAAA,UAAA,EAAA,MAAA,kBAAA,CAAA;AAPA,GA1BA;AAmCA,EAAA,KAAA,EAAA;AACA,IAAA,gBAAA,CAAA,QAAA,EAAA;AACA,WAAA,SAAA,CAAA,gBAAA,GAAA,QAAA;AACA;;AAHA,GAnCA;AAwCA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,QAAA,GAAA,KAAA,CAAA,QAAA;AACA,WAAA,SAAA,GAAA,MAAA,CAAA,KAAA;AACA,WAAA,gBAAA,GAAA,KAAA,SAAA,CAAA,gBAAA;AACA,WAAA,IAAA,GAAA,KAAA,SAAA,CAAA,IAAA;AACA,WAAA,kBAAA,GAAA,KAAA,SAAA,CAAA,kBAAA;AACA,WAAA,gBAAA,GAAA,KAAA,SAAA,CAAA,gBAAA;AACA,KARA;;AASA,IAAA,SAAA,CAAA,IAAA,EAAA;AACA,cAAA,IAAA;AACA,aAAA,gBAAA,CAAA,MAAA;AAAA,iBAAA;AACA,YAAA,KAAA,EAAA,oBADA;AAEA,YAAA,KAAA,EAAA;AACA,cAAA,QAAA,EAAA,QADA;AAEA,cAAA,IAAA,EAAA;AAFA;AAFA,WAAA;;AAOA,aAAA,gBAAA,CAAA,IAAA;AAAA,iBAAA;AACA,YAAA,KAAA,EAAA,0BADA;AAEA,YAAA,KAAA,EAAA;AACA,cAAA,QAAA,EAAA,MADA;AAEA,cAAA,IAAA,EAAA;AAFA;AAFA,WAAA;;AAOA,aAAA,gBAAA,CAAA,SAAA;AAAA,iBAAA;AACA,YAAA,KAAA,EAAA,oBADA;AAEA,YAAA,KAAA,EAAA;AACA,cAAA,QAAA,EAAA,UADA;AAEA,cAAA,IAAA,EAAA;AAFA;AAFA,WAAA;AAfA;;AAuBA,YAAA,IAAA,KAAA,CAAA,0BAAA,CAAA;AACA,KAlCA;;AAmCA,IAAA,QAAA,CAAA,IAAA,EAAA;AACA,aAAA,KAAA,SAAA,CAAA,IAAA,EAAA,KAAA;AACA;;AArCA;AAxCA,CAAA","sourcesContent":["<script>\r\nimport AutobuyerBox from \"./AutobuyerBox\";\r\nimport AutobuyerDropdownEntry from \"./AutobuyerDropdownEntry\";\r\nimport AutobuyerInput from \"./AutobuyerInput\";\r\nimport AutobuyerIntervalButton from \"./AutobuyerIntervalButton\";\r\nimport ExpandingControlBox from \"@/components/ExpandingControlBox\";\r\n\r\nexport default {\r\n  name: \"BigCrunchAutobuyerBox\",\r\n  components: {\r\n    AutobuyerBox,\r\n    AutobuyerIntervalButton,\r\n    AutobuyerInput,\r\n    ExpandingControlBox,\r\n    AutobuyerDropdownEntry\r\n  },\r\n  props: {\r\n    isModal: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isDoomed: false,\r\n      postBreak: false,\r\n      hasMaxedInterval: false,\r\n      mode: AUTO_CRUNCH_MODE.AMOUNT,\r\n      hasAdditionalModes: false,\r\n      increaseWithMult: true,\r\n    };\r\n  },\r\n  computed: {\r\n    autobuyer: () => Autobuyer.bigCrunch,\r\n    modes: () => [\r\n      AUTO_CRUNCH_MODE.AMOUNT,\r\n      AUTO_CRUNCH_MODE.TIME,\r\n      AUTO_CRUNCH_MODE.X_HIGHEST,\r\n    ],\r\n    amountMode: () => AUTO_ETERNITY_MODE.AMOUNT\r\n  },\r\n  watch: {\r\n    increaseWithMult(newValue) {\r\n      this.autobuyer.increaseWithMult = newValue;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isDoomed = Pelle.isDoomed;\r\n      this.postBreak = player.break;\r\n      this.hasMaxedInterval = this.autobuyer.hasMaxedInterval;\r\n      this.mode = this.autobuyer.mode;\r\n      this.hasAdditionalModes = this.autobuyer.hasAdditionalModes;\r\n      this.increaseWithMult = this.autobuyer.increaseWithMult;\r\n    },\r\n    modeProps(mode) {\r\n      switch (mode) {\r\n        case AUTO_CRUNCH_MODE.AMOUNT: return {\r\n          title: \"Big Crunch at X IP\",\r\n          input: {\r\n            property: \"amount\",\r\n            type: \"decimal\"\r\n          },\r\n        };\r\n        case AUTO_CRUNCH_MODE.TIME: return {\r\n          title: \"Seconds between Crunches\",\r\n          input: {\r\n            property: \"time\",\r\n            type: \"float\"\r\n          },\r\n        };\r\n        case AUTO_CRUNCH_MODE.X_HIGHEST: return {\r\n          title: \"X times highest IP\",\r\n          input: {\r\n            property: \"xHighest\",\r\n            type: \"decimal\"\r\n          },\r\n        };\r\n      }\r\n      throw new Error(\"Unknown Auto Crunch mode\");\r\n    },\r\n    modeName(mode) {\r\n      return this.modeProps(mode).title;\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <AutobuyerBox\r\n    :autobuyer=\"autobuyer\"\r\n    :show-interval=\"!postBreak\"\r\n    :is-modal=\"isModal\"\r\n    name=\"Automatic Big Crunch\"\r\n  >\r\n    <template\r\n      v-if=\"!hasMaxedInterval\"\r\n      #intervalSlot\r\n    >\r\n      <AutobuyerIntervalButton :autobuyer=\"autobuyer\" />\r\n    </template>\r\n    <template\r\n      v-else-if=\"postBreak\"\r\n      #intervalSlot\r\n    >\r\n      <ExpandingControlBox\r\n        v-if=\"hasAdditionalModes\"\r\n        :auto-close=\"true\"\r\n      >\r\n        <template #header>\r\n          <div class=\"o-primary-btn c-autobuyer-box__mode-select c-autobuyer-box__mode-select-header\">\r\n            ▼ Current Setting: ▼\r\n            <br>\r\n            {{ modeName(mode) }}\r\n          </div>\r\n        </template>\r\n        <template #dropdown>\r\n          <AutobuyerDropdownEntry\r\n            :autobuyer=\"autobuyer\"\r\n            :modes=\"modes\"\r\n            :mode-name-fn=\"modeName\"\r\n          />\r\n        </template>\r\n      </ExpandingControlBox>\r\n      <span v-else>\r\n        {{ modeProps(mode).title }}:\r\n      </span>\r\n    </template>\r\n    <template\r\n      v-if=\"postBreak\"\r\n      #toggleSlot\r\n    >\r\n      <AutobuyerInput\r\n        :key=\"mode\"\r\n        :autobuyer=\"autobuyer\"\r\n        v-bind=\"modeProps(mode).input\"\r\n      />\r\n    </template>\r\n    <template\r\n      v-if=\"postBreak && mode === amountMode\"\r\n      #checkboxSlot\r\n    >\r\n      <label\r\n        class=\"o-autobuyer-toggle-checkbox o-clickable\"\r\n      >\r\n        <input\r\n          v-model=\"increaseWithMult\"\r\n          type=\"checkbox\"\r\n          class=\"o-clickable\"\r\n        >\r\n        Dynamic amount\r\n      </label>\r\n    </template>\r\n  </AutobuyerBox>\r\n</template>\r\n\r\n<style scoped>\r\n.o-clickable {\r\n  cursor: pointer;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/autobuyers"},"metadata":{},"sourceType":"module"}