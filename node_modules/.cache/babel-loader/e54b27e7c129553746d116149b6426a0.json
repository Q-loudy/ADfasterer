{"ast":null,"code":"import { DC } from \"@/core/constants\";\nexport default {\n  name: \"AntimatterDimensionProgressBar\",\n\n  data() {\n    return {\n      fill: 0,\n      tooltip: \"\",\n      displayPercents: \"\"\n    };\n  },\n\n  computed: {\n    progressBarStyle() {\n      return {\n        width: `${(this.fill * 100).toFixed(2)}%`\n      };\n    }\n\n  },\n  methods: {\n    // eslint-disable-next-line complexity\n    update() {\n      this.displayPercents = formatPercents(this.fill, 2);\n\n      const setProgress = (current, goal, tooltip) => {\n        this.fill = Math.clampMax(current.pLog10() / Decimal.log10(goal), 1);\n        this.tooltip = tooltip;\n      };\n\n      const setLinearProgress = (current, goal, tooltip) => {\n        this.fill = Math.clampMax(current / goal, 1);\n        this.tooltip = tooltip;\n      }; // Goals for challenges and challenge-like runs should come first because numbers will always be much smaller\n      // than normal and therefore default filling won't be meaningful. Since challenges get completed or abandoned from\n      // the inside outwards, we show the goals in that priority as well. It only makes sense to check cel6 and not the\n      // others because pre-cel3 completion it'll default to e4000 and cel4/5 don't have meaningful single goals\n\n\n      const inSpecialRun = Player.isInAntimatterChallenge || EternityChallenge.isRunning || player.dilation.active || Laitela.isRunning;\n\n      if (inSpecialRun) {\n        if (Player.isInAntimatterChallenge) {\n          setProgress(Currency.antimatter.value, Player.antimatterChallenge.goal, \"Percentage to Challenge goal\");\n        } else if (EternityChallenge.isRunning) {\n          if (Perk.studyECBulk.isBought) {\n            // Note: If the EC is fully complete, this prop doesn't exist\n            const goal = EternityChallenge.current.gainedCompletionStatus.nextGoalAt;\n\n            if (goal) {\n              setProgress(Currency.infinityPoints.value, goal, \"Percentage to next Challenge completion\");\n            } else {\n              // In a fully completed EC, there's nothing useful we can show so we just pin it at 100% and say so\n              setProgress(Currency.infinityPoints.value, 10, \"This Challenge is already fully completed!\");\n            }\n          } else {\n            setProgress(Currency.infinityPoints.value, Player.eternityGoal, \"Percentage to Eternity Challenge goal\");\n          }\n        } else if (player.dilation.active) {\n          if (player.dilation.lastEP.gt(0)) {\n            setProgress(Currency.antimatter.value, getTachyonReq(), \"Percentage to gain more TP in Dilation\");\n          } else {\n            setProgress(Currency.infinityPoints.value, Player.eternityGoal, \"Percentage to Eternity in Dilation\");\n          }\n        } else {\n          // Lai'tela destabilization; since the progress bar is logarithmically-scaled, we need to pow10 the arguments\n          setProgress(Decimal.pow10(player.celestials.laitela.entropy), 10, \"Percentage to Destabilized Reality\");\n        }\n      } else if (Pelle.isDoomed) {\n        if (PelleRifts.recursion.milestones[2].canBeApplied || GalaxyGenerator.spentGalaxies > 0) {\n          setProgress(Currency.infinityPoints.value, Tesseracts.nextCost, \"Percentage to next Tesseract\");\n        } else if (PelleStrikes.dilation.hasStrike) {\n          setProgress(Currency.eternityPoints.value, DC.E4000, \"Percentage to Galaxy Generator\");\n        } else if (PelleStrikes.ECs.hasStrike) {\n          setLinearProgress((Math.min(Currency.timeTheorems.max.toNumber() / 12900, 1) + Math.min(EternityChallenges.completions / 60, 1)) / 2, 1, \"Percentage to fifth Strike\");\n        } else if (PelleStrikes.eternity.hasStrike) {\n          setLinearProgress(Currency.timeTheorems.max.toNumber(), 115, \"Percentage to fourth Strike\");\n        } else if (PelleStrikes.powerGalaxies.hasStrike) {\n          setProgress(Currency.infinityPoints.value, Player.eternityGoal, \"Percentage to third Strike\");\n        } else if (PelleStrikes.infinity.hasStrike) {\n          if (player.break) {\n            setProgress(Currency.infinityPoints.value, 5e11, \"Percentage to second Strike\");\n          } else {\n            setProgress(Currency.antimatter.value, Decimal.NUMBER_MAX_VALUE, \"Percentage to Infinity\");\n          }\n        } else {\n          setProgress(Currency.antimatter.value, Decimal.NUMBER_MAX_VALUE, \"Percentage to first Strike\");\n        }\n      } else if (Enslaved.isCompleted) {\n        // Show all other goals from the top down, starting at features in the highest prestige layer\n        setProgress(Currency.infinityPoints.value, Tesseracts.nextCost, \"Percentage to next Tesseract\");\n      } else if (PlayerProgress.dilationUnlocked()) {\n        setProgress(Currency.eternityPoints.value, DC.E4000, \"Percentage to Reality\");\n      } else if (InfinityDimension(8).isUnlocked) {\n        setProgress(Currency.infinityPoints.value, Player.eternityGoal, \"Percentage to Eternity\");\n      } else if (player.break) {\n        const text = `Percentage to unlock a new ${InfinityDimensions.next().hasIPUnlock ? \"type of Dimension\" : \"Infinity Dimension\"}`;\n        const nextID = InfinityDimensions.next();\n\n        if (nextID.ipRequirementReached) {\n          setProgress(player.records.thisEternity.maxAM, nextID.amRequirement, text);\n        } else {\n          setProgress(player.infinityPoints, nextID.ipRequirement, text);\n        }\n      } else {\n        setProgress(Currency.antimatter.value, Decimal.NUMBER_MAX_VALUE, \"Percentage to Infinity\");\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["AntimatterDimensionProgressBar.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport { DC } from \"@/core/constants\";\r\n\r\nexport default {\r\n  name: \"AntimatterDimensionProgressBar\",\r\n  data() {\r\n    return {\r\n      fill: 0,\r\n      tooltip: \"\",\r\n      displayPercents: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    progressBarStyle() {\r\n      return {\r\n        width: `${(this.fill * 100).toFixed(2)}%`\r\n      };\r\n    }\r\n  },\r\n  methods: {\r\n    // eslint-disable-next-line complexity\r\n    update() {\r\n      this.displayPercents = formatPercents(this.fill, 2);\r\n      const setProgress = (current, goal, tooltip) => {\r\n        this.fill = Math.clampMax(current.pLog10() / Decimal.log10(goal), 1);\r\n        this.tooltip = tooltip;\r\n      };\r\n      const setLinearProgress = (current, goal, tooltip) => {\r\n        this.fill = Math.clampMax(current / goal, 1);\r\n        this.tooltip = tooltip;\r\n      };\r\n\r\n      // Goals for challenges and challenge-like runs should come first because numbers will always be much smaller\r\n      // than normal and therefore default filling won't be meaningful. Since challenges get completed or abandoned from\r\n      // the inside outwards, we show the goals in that priority as well. It only makes sense to check cel6 and not the\r\n      // others because pre-cel3 completion it'll default to e4000 and cel4/5 don't have meaningful single goals\r\n      const inSpecialRun = Player.isInAntimatterChallenge || EternityChallenge.isRunning || player.dilation.active ||\r\n        Laitela.isRunning;\r\n      if (inSpecialRun) {\r\n        if (Player.isInAntimatterChallenge) {\r\n          setProgress(Currency.antimatter.value, Player.antimatterChallenge.goal, \"Percentage to Challenge goal\");\r\n        } else if (EternityChallenge.isRunning) {\r\n          if (Perk.studyECBulk.isBought) {\r\n            // Note: If the EC is fully complete, this prop doesn't exist\r\n            const goal = EternityChallenge.current.gainedCompletionStatus.nextGoalAt;\r\n            if (goal) {\r\n              setProgress(Currency.infinityPoints.value, goal, \"Percentage to next Challenge completion\");\r\n            } else {\r\n              // In a fully completed EC, there's nothing useful we can show so we just pin it at 100% and say so\r\n              setProgress(Currency.infinityPoints.value, 10, \"This Challenge is already fully completed!\");\r\n            }\r\n          } else {\r\n            setProgress(Currency.infinityPoints.value, Player.eternityGoal, \"Percentage to Eternity Challenge goal\");\r\n          }\r\n        } else if (player.dilation.active) {\r\n          if (player.dilation.lastEP.gt(0)) {\r\n            setProgress(Currency.antimatter.value, getTachyonReq(), \"Percentage to gain more TP in Dilation\");\r\n          } else {\r\n            setProgress(Currency.infinityPoints.value, Player.eternityGoal, \"Percentage to Eternity in Dilation\");\r\n          }\r\n        } else {\r\n          // Lai'tela destabilization; since the progress bar is logarithmically-scaled, we need to pow10 the arguments\r\n          setProgress(Decimal.pow10(player.celestials.laitela.entropy), 10, \"Percentage to Destabilized Reality\");\r\n        }\r\n      } else if (Pelle.isDoomed) {\r\n        if (PelleRifts.recursion.milestones[2].canBeApplied || GalaxyGenerator.spentGalaxies > 0) {\r\n          setProgress(Currency.infinityPoints.value, Tesseracts.nextCost, \"Percentage to next Tesseract\");\r\n        } else if (PelleStrikes.dilation.hasStrike) {\r\n          setProgress(Currency.eternityPoints.value, DC.E4000, \"Percentage to Galaxy Generator\");\r\n        } else if (PelleStrikes.ECs.hasStrike) {\r\n          setLinearProgress(\r\n            (Math.min(Currency.timeTheorems.max.toNumber() / 12900, 1) +\r\n            Math.min(EternityChallenges.completions / 60, 1)) / 2,\r\n            1, \"Percentage to fifth Strike\");\r\n        } else if (PelleStrikes.eternity.hasStrike) {\r\n          setLinearProgress(Currency.timeTheorems.max.toNumber(), 115, \"Percentage to fourth Strike\");\r\n        } else if (PelleStrikes.powerGalaxies.hasStrike) {\r\n          setProgress(Currency.infinityPoints.value, Player.eternityGoal, \"Percentage to third Strike\");\r\n        } else if (PelleStrikes.infinity.hasStrike) {\r\n          if (player.break) {\r\n            setProgress(Currency.infinityPoints.value, 5e11, \"Percentage to second Strike\");\r\n          } else {\r\n            setProgress(Currency.antimatter.value, Decimal.NUMBER_MAX_VALUE, \"Percentage to Infinity\");\r\n          }\r\n        } else {\r\n          setProgress(Currency.antimatter.value, Decimal.NUMBER_MAX_VALUE, \"Percentage to first Strike\");\r\n        }\r\n      } else if (Enslaved.isCompleted) {\r\n        // Show all other goals from the top down, starting at features in the highest prestige layer\r\n        setProgress(Currency.infinityPoints.value, Tesseracts.nextCost, \"Percentage to next Tesseract\");\r\n      } else if (PlayerProgress.dilationUnlocked()) {\r\n        setProgress(Currency.eternityPoints.value, DC.E4000, \"Percentage to Reality\");\r\n      } else if (InfinityDimension(8).isUnlocked) {\r\n        setProgress(Currency.infinityPoints.value, Player.eternityGoal, \"Percentage to Eternity\");\r\n      } else if (player.break) {\r\n        const text = `Percentage to unlock a new ${InfinityDimensions.next().hasIPUnlock\r\n          ? \"type of Dimension\"\r\n          : \"Infinity Dimension\"}`;\r\n        const nextID = InfinityDimensions.next();\r\n        if (nextID.ipRequirementReached) {\r\n          setProgress(player.records.thisEternity.maxAM, nextID.amRequirement, text);\r\n        } else {\r\n          setProgress(player.infinityPoints, nextID.ipRequirement, text);\r\n        }\r\n      } else {\r\n        setProgress(Currency.antimatter.value, Decimal.NUMBER_MAX_VALUE, \"Percentage to Infinity\");\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"c-progress-bar\">\r\n    <div\r\n      :style=\"progressBarStyle\"\r\n      class=\"c-progress-bar__fill\"\r\n    >\r\n      <span\r\n        v-tooltip=\"tooltip\"\r\n        class=\"c-progress-bar__percents\"\r\n      >\r\n        {{ displayPercents }}\r\n      </span>\r\n    </div>\r\n  </div>\r\n</template>\r\n"],"sourceRoot":"src/components/tabs/antimatter-dimensions"},"metadata":{},"sourceType":"module"}