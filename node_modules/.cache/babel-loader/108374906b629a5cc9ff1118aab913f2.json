{"ast":null,"code":"import { DC } from \"../../constants\";\nimport { MultiplierTabHelper } from \"./helper-functions\";\nimport { MultiplierTabIcons } from \"./icons\"; // See index.js for documentation\n\nexport const tickspeed = {\n  total: {\n    name: \"Total Tickspeed\",\n    displayOverride: () => {\n      const tickRate = Tickspeed.perSecond;\n      const activeDims = MultiplierTabHelper.activeDimCount(\"AD\");\n      const dimString = MultiplierTabHelper.pluralizeDimensions(activeDims);\n      return `${format(tickRate, 2, 2)}/sec on ${formatInt(activeDims)} ${dimString}\n        ➜ ${formatX(tickRate.pow(activeDims), 2, 2)}`;\n    },\n    // This is necessary to make multValue entries from the other props scale properly, which are also all pow10\n    // due to the multiplier tab splitting up entries logarithmically\n    fakeValue: DC.E100,\n    multValue: () => Tickspeed.perSecond.pow(MultiplierTabHelper.activeDimCount(\"AD\")),\n    // No point in showing this breakdown at all unless both components are nonzero; however they will always be nonzero\n    // due to the way the calculation works, so we have to manually hide it here\n    isActive: () => Tickspeed.perSecond.gt(1) && effectiveBaseGalaxies() > 0,\n    dilationEffect: () => Effarig.isRunning ? Effarig.tickDilation : 1,\n    overlay: [\"<i class='fa-solid fa-clock' />\"],\n    icon: MultiplierTabIcons.TICKSPEED\n  },\n  base: {\n    name: \"Base Tickspeed from Achievements\",\n    displayOverride: () => {\n      const val = DC.D1.dividedByEffectsOf(Achievement(36), Achievement(45), Achievement(66), Achievement(83));\n      return `${format(val, 2, 2)}/sec`;\n    },\n    multValue: () => new Decimal.pow10(100 * MultiplierTabHelper.decomposeTickspeed().base),\n    isActive: () => [36, 45, 66, 83].some(a => Achievement(a).canBeApplied),\n    icon: MultiplierTabIcons.ACHIEVEMENT\n  },\n  upgrades: {\n    name: \"Tickspeed Upgrades\",\n    displayOverride: () => `${formatInt(Tickspeed.totalUpgrades)} Total`,\n    multValue: () => new Decimal.pow10(100 * MultiplierTabHelper.decomposeTickspeed().tickspeed),\n    isActive: true,\n    icon: MultiplierTabIcons.PURCHASE(\"AD\")\n  },\n  galaxies: {\n    name: \"Galaxies\",\n    displayOverride: () => {\n      const ag = player.galaxies + GalaxyGenerator.galaxies;\n      const rg = Replicanti.galaxies.total;\n      const tg = player.dilation.totalTachyonGalaxies;\n      return `${formatInt(ag + rg + tg)} Total`;\n    },\n    multValue: () => new Decimal.pow10(100 * MultiplierTabHelper.decomposeTickspeed().galaxies),\n    isActive: true,\n    icon: MultiplierTabIcons.GALAXY\n  },\n  pelleTickspeedPow: {\n    name: \"Tickspeed Dilation Upgrade\",\n    powValue: () => DilationUpgrade.tickspeedPower.effectValue,\n    isActive: () => DilationUpgrade.tickspeedPower.canBeApplied,\n    icon: MultiplierTabIcons.UPGRADE(\"dilation\")\n  }\n};\nexport const tickspeedUpgrades = {\n  purchased: {\n    name: \"Purchased Tickspeed Upgrades\",\n    displayOverride: () => Laitela.continuumActive ? formatFloat(Tickspeed.continuumValue, 2, 2) : formatInt(player.totalTickBought),\n    multValue: () => Decimal.pow10(Laitela.continuumActive ? Tickspeed.continuumValue : player.totalTickBought),\n    isActive: () => true,\n    icon: MultiplierTabIcons.PURCHASE(\"AD\")\n  },\n  free: {\n    name: \"Tickspeed Upgrades from TD\",\n    displayOverride: () => formatInt(player.totalTickGained),\n    multValue: () => Decimal.pow10(player.totalTickGained),\n    isActive: () => Currency.timeShards.gt(0),\n    icon: MultiplierTabIcons.SPECIFIC_GLYPH(\"time\")\n  }\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/multiplier-tab/tickspeed.js"],"names":["DC","MultiplierTabHelper","MultiplierTabIcons","tickspeed","total","name","displayOverride","tickRate","Tickspeed","perSecond","activeDims","activeDimCount","dimString","pluralizeDimensions","format","formatInt","formatX","pow","fakeValue","E100","multValue","isActive","gt","effectiveBaseGalaxies","dilationEffect","Effarig","isRunning","tickDilation","overlay","icon","TICKSPEED","base","val","D1","dividedByEffectsOf","Achievement","Decimal","pow10","decomposeTickspeed","some","a","canBeApplied","ACHIEVEMENT","upgrades","totalUpgrades","PURCHASE","galaxies","ag","player","GalaxyGenerator","rg","Replicanti","tg","dilation","totalTachyonGalaxies","GALAXY","pelleTickspeedPow","powValue","DilationUpgrade","tickspeedPower","effectValue","UPGRADE","tickspeedUpgrades","purchased","Laitela","continuumActive","formatFloat","continuumValue","totalTickBought","free","totalTickGained","Currency","timeShards","SPECIFIC_GLYPH"],"mappings":"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","sourcesContent":["import { DC } from \"../../constants\";\r\n\r\nimport { MultiplierTabHelper } from \"./helper-functions\";\r\nimport { MultiplierTabIcons } from \"./icons\";\r\n\r\n// See index.js for documentation\r\nexport const tickspeed = {\r\n  total: {\r\n    name: \"Total Tickspeed\",\r\n    displayOverride: () => {\r\n      const tickRate = Tickspeed.perSecond;\r\n      const activeDims = MultiplierTabHelper.activeDimCount(\"AD\");\r\n      const dimString = MultiplierTabHelper.pluralizeDimensions(activeDims);\r\n      return `${format(tickRate, 2, 2)}/sec on ${formatInt(activeDims)} ${dimString}\r\n        ➜ ${formatX(tickRate.pow(activeDims), 2, 2)}`;\r\n    },\r\n    // This is necessary to make multValue entries from the other props scale properly, which are also all pow10\r\n    // due to the multiplier tab splitting up entries logarithmically\r\n    fakeValue: DC.E100,\r\n    multValue: () => Tickspeed.perSecond.pow(MultiplierTabHelper.activeDimCount(\"AD\")),\r\n    // No point in showing this breakdown at all unless both components are nonzero; however they will always be nonzero\r\n    // due to the way the calculation works, so we have to manually hide it here\r\n    isActive: () => Tickspeed.perSecond.gt(1) && effectiveBaseGalaxies() > 0,\r\n    dilationEffect: () => (Effarig.isRunning ? Effarig.tickDilation : 1),\r\n    overlay: [\"<i class='fa-solid fa-clock' />\"],\r\n    icon: MultiplierTabIcons.TICKSPEED,\r\n  },\r\n  base: {\r\n    name: \"Base Tickspeed from Achievements\",\r\n    displayOverride: () => {\r\n      const val = DC.D1.dividedByEffectsOf(\r\n        Achievement(36),\r\n        Achievement(45),\r\n        Achievement(66),\r\n        Achievement(83)\r\n      );\r\n      return `${format(val, 2, 2)}/sec`;\r\n    },\r\n    multValue: () => new Decimal.pow10(100 * MultiplierTabHelper.decomposeTickspeed().base),\r\n    isActive: () => [36, 45, 66, 83].some(a => Achievement(a).canBeApplied),\r\n    icon: MultiplierTabIcons.ACHIEVEMENT,\r\n  },\r\n  upgrades: {\r\n    name: \"Tickspeed Upgrades\",\r\n    displayOverride: () => `${formatInt(Tickspeed.totalUpgrades)} Total`,\r\n    multValue: () => new Decimal.pow10(100 * MultiplierTabHelper.decomposeTickspeed().tickspeed),\r\n    isActive: true,\r\n    icon: MultiplierTabIcons.PURCHASE(\"AD\"),\r\n  },\r\n  galaxies: {\r\n    name: \"Galaxies\",\r\n    displayOverride: () => {\r\n      const ag = player.galaxies + GalaxyGenerator.galaxies;\r\n      const rg = Replicanti.galaxies.total;\r\n      const tg = player.dilation.totalTachyonGalaxies;\r\n      return `${formatInt(ag + rg + tg)} Total`;\r\n    },\r\n    multValue: () => new Decimal.pow10(100 * MultiplierTabHelper.decomposeTickspeed().galaxies),\r\n    isActive: true,\r\n    icon: MultiplierTabIcons.GALAXY,\r\n  },\r\n  pelleTickspeedPow: {\r\n    name: \"Tickspeed Dilation Upgrade\",\r\n    powValue: () => DilationUpgrade.tickspeedPower.effectValue,\r\n    isActive: () => DilationUpgrade.tickspeedPower.canBeApplied,\r\n    icon: MultiplierTabIcons.UPGRADE(\"dilation\"),\r\n  },\r\n};\r\n\r\nexport const tickspeedUpgrades = {\r\n  purchased: {\r\n    name: \"Purchased Tickspeed Upgrades\",\r\n    displayOverride: () => (Laitela.continuumActive\r\n      ? formatFloat(Tickspeed.continuumValue, 2, 2)\r\n      : formatInt(player.totalTickBought)),\r\n    multValue: () => Decimal.pow10(Laitela.continuumActive ? Tickspeed.continuumValue : player.totalTickBought),\r\n    isActive: () => true,\r\n    icon: MultiplierTabIcons.PURCHASE(\"AD\"),\r\n  },\r\n  free: {\r\n    name: \"Tickspeed Upgrades from TD\",\r\n    displayOverride: () => formatInt(player.totalTickGained),\r\n    multValue: () => Decimal.pow10(player.totalTickGained),\r\n    isActive: () => Currency.timeShards.gt(0),\r\n    icon: MultiplierTabIcons.SPECIFIC_GLYPH(\"time\"),\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}