{"ast":null,"code":"import \"core-js/modules/es.symbol.description.js\";\nimport wordShift from \"@/core/word-shift\";\nimport EffectDisplay from \"@/components/EffectDisplay\";\nimport HintText from \"@/components/HintText\";\nexport default {\n  name: \"NormalAchievement\",\n  components: {\n    EffectDisplay,\n    HintText\n  },\n  props: {\n    achievement: {\n      type: Object,\n      required: true\n    },\n    isObscured: {\n      type: Boolean,\n      required: false\n    }\n  },\n\n  data() {\n    return {\n      isDisabled: false,\n      isUnlocked: false,\n      isMouseOver: false,\n      isCancer: false,\n      showUnlockState: false,\n      realityUnlocked: false,\n      garbleTimer: 0,\n      garbleKey: 0,\n      achievementTime: 0\n    };\n  },\n\n  computed: {\n    id() {\n      return this.achievement.id;\n    },\n\n    displayId() {\n      var _this$config$displayI;\n\n      return (_this$config$displayI = this.config.displayId) !== null && _this$config$displayI !== void 0 ? _this$config$displayI : this.id;\n    },\n\n    config() {\n      return this.achievement.config;\n    },\n\n    styleObject() {\n      return {\n        \"background-position\": `-${(this.achievement.column - 1) * 104}px -${(this.achievement.row - 1) * 104}px`\n      };\n    },\n\n    classObject() {\n      return {\n        \"o-achievement\": true,\n        \"o-achievement--disabled\": this.isDisabled,\n        \"o-achievement--locked\": !this.isUnlocked && !this.isDisabled && !this.isObscured,\n        \"o-achievement--unlocked\": this.isUnlocked,\n        \"o-achievement--waiting\": !this.isUnlocked && this.isPreRealityAchievement && !this.isDisabled,\n        \"o-achievement--blink\": !this.isUnlocked && this.id === 78 && !this.isDisabled,\n        \"o-achievement--normal\": !this.isCancer && !this.isObscured,\n        \"o-achievement--cancer\": this.isCancer && !this.isObscured,\n        \"o-achievement--hidden\": this.isObscured\n      };\n    },\n\n    indicatorIconClass() {\n      if (this.isUnlocked) return \"fas fa-check\";\n      if (this.isPreRealityAchievement && !this.isDisabled) return \"far fa-clock\";\n      return \"fas fa-times\";\n    },\n\n    indicatorClassObject() {\n      return {\n        \"o-achievement__indicator\": true,\n        \"o-achievement__indicator--disabled\": this.isDisabled,\n        \"o-achievement__indicator--locked\": !this.isUnlocked && !this.isPreRealityAchievement && !this.isDisabled,\n        \"o-achievement__indicator--waiting\": !this.isUnlocked && this.isPreRealityAchievement && !this.isDisabled\n      };\n    },\n\n    rewardClassObject() {\n      return {\n        \"o-achievement__reward\": true,\n        \"o-achievement__reward--disabled\": this.isDisabled,\n        \"o-achievement__reward--locked\": !this.isUnlocked && !this.isPreRealityAchievement && !this.isDisabled,\n        \"o-achievement__reward--waiting\": !this.isUnlocked && this.isPreRealityAchievement && !this.isDisabled\n      };\n    },\n\n    isPreRealityAchievement() {\n      return this.realityUnlocked && this.achievement.row <= 13;\n    },\n\n    hasReward() {\n      return this.config.reward !== undefined && !this.isObscured;\n    },\n\n    // The garble templates themselves can be static, and shouldn't be recreated every render tick\n    garbledNameTemplate() {\n      return this.makeGarbledTemplate(this.config.name);\n    },\n\n    garbledIDTemplate() {\n      return this.makeGarbledTemplate(this.displayId);\n    },\n\n    garbledDescriptionTemplate() {\n      return this.makeGarbledTemplate(this.config.description);\n    },\n\n    achievedTime() {\n      if (!player.speedrun.isActive) return null;\n      if (this.achievementTime === undefined) return \"Not Achieved yet\";\n      return this.achievementTime === 0 ? \"Given at Speedrun start\" : `Achieved after ${TimeSpan.fromMilliseconds(this.achievementTime).toStringShort()}`;\n    }\n\n  },\n\n  beforeDestroy() {\n    clearTimeout(this.mouseOverInterval);\n  },\n\n  methods: {\n    update() {\n      this.isDisabled = Pelle.disabledAchievements.includes(this.id) && Pelle.isDoomed;\n      this.isUnlocked = this.achievement.isUnlocked && !this.isDisabled;\n      this.isCancer = Theme.current().name === \"S4\" || player.secretUnlocks.cancerAchievements;\n      this.showUnlockState = player.options.showHintText.achievementUnlockStates;\n      this.realityUnlocked = PlayerProgress.realityUnlocked();\n      this.processedName = this.processText(this.config.name, this.garbledNameTemplate);\n      this.processedId = this.processText(this.displayId, this.garbledIDTemplate);\n      this.processedDescription = this.processText(this.config.description, this.garbledDescriptionTemplate); // This uses key-swapping to force the garbled achievements to re-render their text, because otherwise they\n      // would remain static. Keys for non-garbled achievements won't change, and all keys remain unique.\n\n      this.garbleTimer++;\n\n      if (this.isObscured) {\n        this.garbleKey = 10 * this.id + Math.floor(this.garbleTimer / 3);\n      } else {\n        this.garbleKey = this.id;\n      }\n\n      if (player.speedrun.isActive) this.achievementTime = player.speedrun.achievementTimes[this.id];\n    },\n\n    onMouseEnter() {\n      clearTimeout(this.mouseOverInterval);\n      this.isMouseOver = true;\n    },\n\n    onMouseLeave() {\n      this.mouseOverInterval = setTimeout(() => this.isMouseOver = false, 300);\n    },\n\n    // We don't want to expose the original text for Pelle achievements, so we generate a random string with the same\n    // length of the original text in order to make something that fits reasonably within their respective places\n    makeGarbledTemplate(input) {\n      // Input might be either text or number\n      const text = `${input}`;\n      let garbled = \"\";\n\n      for (let i = 0; i < text.length; i++) {\n        if (text[i] === \" \") garbled += \" \";else {\n          const n = text[i].charCodeAt(); // Essentially seeded randomness so that the static parts of the randomized text are deterministic\n\n          garbled += String.fromCharCode(33 + (n * n + i * i) % 93);\n        }\n      }\n\n      return garbled;\n    },\n\n    // When appropriate, garbles input text for achievements on the last row. Otherwise leaves it unchanged\n    processText(unmodified, garbledTemplate) {\n      if (!this.isObscured) return unmodified; // The garbling effect often replaces spaces with non-spaces, which affects line length and can cause individual\n      // lines to become long enough that they can't word-wrap. To address that, we take the template as a reference\n      // and put spaces back into the same spots, ensuring that text can't overflow any worse than the original text\n\n      const raw = wordShift.randomCrossWords(garbledTemplate);\n      let modified = \"\";\n\n      for (let i = 0; i < raw.length; i++) {\n        if (garbledTemplate[i] === \" \") modified += \" \";else modified += raw[i];\n      }\n\n      return modified;\n    }\n\n  }\n};","map":{"version":3,"sources":["NormalAchievement.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport wordShift from \"@/core/word-shift\";\r\n\r\nimport EffectDisplay from \"@/components/EffectDisplay\";\r\nimport HintText from \"@/components/HintText\";\r\n\r\nexport default {\r\n  name: \"NormalAchievement\",\r\n  components: {\r\n    EffectDisplay,\r\n    HintText\r\n  },\r\n  props: {\r\n    achievement: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    isObscured: {\r\n      type: Boolean,\r\n      required: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isDisabled: false,\r\n      isUnlocked: false,\r\n      isMouseOver: false,\r\n      isCancer: false,\r\n      showUnlockState: false,\r\n      realityUnlocked: false,\r\n      garbleTimer: 0,\r\n      garbleKey: 0,\r\n      achievementTime: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    id() {\r\n      return this.achievement.id;\r\n    },\r\n    displayId() {\r\n      return this.config.displayId ?? this.id;\r\n    },\r\n    config() {\r\n      return this.achievement.config;\r\n    },\r\n    styleObject() {\r\n      return {\r\n        \"background-position\": `-${(this.achievement.column - 1) * 104}px -${(this.achievement.row - 1) * 104}px`\r\n      };\r\n    },\r\n    classObject() {\r\n      return {\r\n        \"o-achievement\": true,\r\n        \"o-achievement--disabled\": this.isDisabled,\r\n        \"o-achievement--locked\": !this.isUnlocked && !this.isDisabled && !this.isObscured,\r\n        \"o-achievement--unlocked\": this.isUnlocked,\r\n        \"o-achievement--waiting\": !this.isUnlocked && this.isPreRealityAchievement && !this.isDisabled,\r\n        \"o-achievement--blink\": !this.isUnlocked && this.id === 78 && !this.isDisabled,\r\n        \"o-achievement--normal\": !this.isCancer && !this.isObscured,\r\n        \"o-achievement--cancer\": this.isCancer && !this.isObscured,\r\n        \"o-achievement--hidden\": this.isObscured,\r\n      };\r\n    },\r\n    indicatorIconClass() {\r\n      if (this.isUnlocked) return \"fas fa-check\";\r\n      if (this.isPreRealityAchievement && !this.isDisabled) return \"far fa-clock\";\r\n      return \"fas fa-times\";\r\n    },\r\n    indicatorClassObject() {\r\n      return {\r\n        \"o-achievement__indicator\": true,\r\n        \"o-achievement__indicator--disabled\": this.isDisabled,\r\n        \"o-achievement__indicator--locked\": !this.isUnlocked && !this.isPreRealityAchievement && !this.isDisabled,\r\n        \"o-achievement__indicator--waiting\": !this.isUnlocked && this.isPreRealityAchievement && !this.isDisabled,\r\n      };\r\n    },\r\n    rewardClassObject() {\r\n      return {\r\n        \"o-achievement__reward\": true,\r\n        \"o-achievement__reward--disabled\": this.isDisabled,\r\n        \"o-achievement__reward--locked\": !this.isUnlocked && !this.isPreRealityAchievement && !this.isDisabled,\r\n        \"o-achievement__reward--waiting\": !this.isUnlocked && this.isPreRealityAchievement && !this.isDisabled,\r\n      };\r\n    },\r\n    isPreRealityAchievement() {\r\n      return this.realityUnlocked && this.achievement.row <= 13;\r\n    },\r\n    hasReward() {\r\n      return this.config.reward !== undefined && !this.isObscured;\r\n    },\r\n    // The garble templates themselves can be static, and shouldn't be recreated every render tick\r\n    garbledNameTemplate() {\r\n      return this.makeGarbledTemplate(this.config.name);\r\n    },\r\n    garbledIDTemplate() {\r\n      return this.makeGarbledTemplate(this.displayId);\r\n    },\r\n    garbledDescriptionTemplate() {\r\n      return this.makeGarbledTemplate(this.config.description);\r\n    },\r\n    achievedTime() {\r\n      if (!player.speedrun.isActive) return null;\r\n      if (this.achievementTime === undefined) return \"Not Achieved yet\";\r\n      return this.achievementTime === 0\r\n        ? \"Given at Speedrun start\"\r\n        : `Achieved after ${TimeSpan.fromMilliseconds(this.achievementTime).toStringShort()}`;\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    clearTimeout(this.mouseOverInterval);\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isDisabled = Pelle.disabledAchievements.includes(this.id) && Pelle.isDoomed;\r\n      this.isUnlocked = this.achievement.isUnlocked && !this.isDisabled;\r\n      this.isCancer = Theme.current().name === \"S4\" || player.secretUnlocks.cancerAchievements;\r\n      this.showUnlockState = player.options.showHintText.achievementUnlockStates;\r\n      this.realityUnlocked = PlayerProgress.realityUnlocked();\r\n\r\n      this.processedName = this.processText(this.config.name, this.garbledNameTemplate);\r\n      this.processedId = this.processText(this.displayId, this.garbledIDTemplate);\r\n      this.processedDescription = this.processText(this.config.description, this.garbledDescriptionTemplate);\r\n\r\n      // This uses key-swapping to force the garbled achievements to re-render their text, because otherwise they\r\n      // would remain static. Keys for non-garbled achievements won't change, and all keys remain unique.\r\n      this.garbleTimer++;\r\n      if (this.isObscured) {\r\n        this.garbleKey = 10 * this.id + Math.floor(this.garbleTimer / 3);\r\n      } else {\r\n        this.garbleKey = this.id;\r\n      }\r\n      if (player.speedrun.isActive) this.achievementTime = player.speedrun.achievementTimes[this.id];\r\n    },\r\n    onMouseEnter() {\r\n      clearTimeout(this.mouseOverInterval);\r\n      this.isMouseOver = true;\r\n    },\r\n    onMouseLeave() {\r\n      this.mouseOverInterval = setTimeout(() => this.isMouseOver = false, 300);\r\n    },\r\n    // We don't want to expose the original text for Pelle achievements, so we generate a random string with the same\r\n    // length of the original text in order to make something that fits reasonably within their respective places\r\n    makeGarbledTemplate(input) {\r\n      // Input might be either text or number\r\n      const text = `${input}`;\r\n      let garbled = \"\";\r\n      for (let i = 0; i < text.length; i++) {\r\n        if (text[i] === \" \") garbled += \" \";\r\n        else {\r\n          const n = text[i].charCodeAt();\r\n          // Essentially seeded randomness so that the static parts of the randomized text are deterministic\r\n          garbled += String.fromCharCode(33 + ((n * n + i * i) % 93));\r\n        }\r\n      }\r\n      return garbled;\r\n    },\r\n    // When appropriate, garbles input text for achievements on the last row. Otherwise leaves it unchanged\r\n    processText(unmodified, garbledTemplate) {\r\n      if (!this.isObscured) return unmodified;\r\n\r\n      // The garbling effect often replaces spaces with non-spaces, which affects line length and can cause individual\r\n      // lines to become long enough that they can't word-wrap. To address that, we take the template as a reference\r\n      // and put spaces back into the same spots, ensuring that text can't overflow any worse than the original text\r\n      const raw = wordShift.randomCrossWords(garbledTemplate);\r\n      let modified = \"\";\r\n      for (let i = 0; i < raw.length; i++) {\r\n        if (garbledTemplate[i] === \" \") modified += \" \";\r\n        else modified += raw[i];\r\n      }\r\n      return modified;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    :class=\"classObject\"\r\n    :style=\"styleObject\"\r\n    @mouseenter=\"onMouseEnter\"\r\n    @mouseleave=\"onMouseLeave\"\r\n  >\r\n    <HintText\r\n      :key=\"garbleKey\"\r\n      type=\"achievements\"\r\n      class=\"l-hint-text--achievement\"\r\n    >\r\n      {{ processedId }}\r\n    </HintText>\r\n    <div class=\"o-achievement__tooltip\">\r\n      <template v-if=\"isMouseOver\">\r\n        <div class=\"o-achievement__tooltip__name\">\r\n          {{ processedName }} ({{ processedId }})\r\n        </div>\r\n        <div class=\"o-achievement__tooltip__description\">\r\n          {{ processedDescription }}\r\n        </div>\r\n        <div\r\n          v-if=\"config.reward\"\r\n          class=\"o-achievement__tooltip__reward\"\r\n        >\r\n          <span\r\n            v-if=\"!isObscured\"\r\n            :class=\"{ 'o-pelle-disabled': isDisabled }\"\r\n          >\r\n            Reward: {{ config.reward }}\r\n            <EffectDisplay\r\n              v-if=\"config.formatEffect\"\r\n              br\r\n              :config=\"config\"\r\n            />\r\n          </span>\r\n        </div>\r\n        <div\r\n          v-if=\"achievedTime\"\r\n          class=\"o-achievement-time\"\r\n        >\r\n          {{ achievedTime }}\r\n        </div>\r\n      </template>\r\n    </div>\r\n    <div\r\n      v-if=\"showUnlockState\"\r\n      :class=\"indicatorClassObject\"\r\n    >\r\n      <i :class=\"indicatorIconClass\" />\r\n    </div>\r\n    <div\r\n      v-if=\"hasReward\"\r\n      :class=\"rewardClassObject\"\r\n    >\r\n      <i class=\"fas fa-star\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.o-achievement-time {\r\n  font-weight: bold;\r\n  color: var(--color-accent);\r\n}\r\n\r\n.o-achievement--disabled {\r\n  background-color: var(--color-pelle--base);\r\n  border-color: var(--color-bad);\r\n}\r\n\r\n.o-achievement--locked {\r\n  background-color: #a3a3a3;\r\n  border-color: var(--color-bad);\r\n}\r\n\r\n.t-dark-metro .o-achievement--locked {\r\n  background-color: #9e9e9e;\r\n}\r\n\r\n.t-metro .o-achievement--locked,\r\n.t-inverted-metro .o-achievement--locked,\r\n.t-s8 .o-achievement--locked {\r\n  background-color: #9e9e9e;\r\n  border-color: var(--color-bad);\r\n}\r\n\r\n.t-s2 .o-achievement--locked {\r\n  background-color: rgba(0, 0, 0, 0%);\r\n}\r\n\r\n.t-s5 .o-achievement--locked {\r\n  background-color: #222222;\r\n  border-color: #000000;\r\n}\r\n\r\n.t-s7 .o-achievement--locked {\r\n  background-color: #555555;\r\n  border-color: #111111;\r\n}\r\n\r\n.o-achievement--waiting {\r\n  background-color: #d1d161;\r\n  border-color: #acac39;\r\n}\r\n\r\n.t-dark-metro .o-achievement--waiting {\r\n  background-color: #b9b946;\r\n  border-color: #7d7d36;\r\n}\r\n\r\n.t-metro .o-achievement--waiting,\r\n.t-inverted-metro .o-achievement--waiting,\r\n.t-s8 .o-achievement--waiting {\r\n  background-color: #ffee58;\r\n  border-color: #757575;\r\n}\r\n\r\n.o-achievement--blink {\r\n  animation: a-achievement--blink 2s step-start 0s infinite;\r\n}\r\n\r\n@keyframes a-achievement--blink {\r\n  50% {\r\n    visibility: hidden;\r\n  }\r\n}\r\n\r\n.o-achievement__reward {\r\n  width: 1.5rem;\r\n  height: 1.5rem;\r\n  position: absolute;\r\n  left: 0;\r\n  bottom: 0;\r\n  font-size: 1rem;\r\n  color: black;\r\n  background: #5ac467;\r\n  border-top: var(--var-border-width, 0.2rem) solid #127a20;\r\n  border-right: var(--var-border-width, 0.2rem) solid #127a20;\r\n  border-top-right-radius: var(--var-border-radius, 0.8rem);\r\n  border-bottom-left-radius: var(--var-border-radius, 0.6rem);\r\n}\r\n\r\n.o-achievement__reward--locked {\r\n  background: #a3a3a3;\r\n  border-color: var(--color-bad);\r\n}\r\n\r\n.o-achievement__reward--waiting {\r\n  background: #d1d161;\r\n  border-color: #acac39;\r\n}\r\n\r\n.o-achievement__reward--disabled {\r\n  background: var(--color-pelle--base);\r\n  border-color: var(--color-bad);\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/normal-achievements"},"metadata":{},"sourceType":"module"}