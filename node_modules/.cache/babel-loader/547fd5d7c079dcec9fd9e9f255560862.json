{"ast":null,"code":"import wordShift from \"@/core/word-shift\";\nimport DescriptionDisplay from \"@/components/DescriptionDisplay\";\nimport EffectDisplay from \"@/components/EffectDisplay\";\nimport EternityChallengeBoxWrapper from \"./EternityChallengeBoxWrapper\";\nexport default {\n  name: \"EternityChallengeBox\",\n  components: {\n    EternityChallengeBoxWrapper,\n    DescriptionDisplay,\n    EffectDisplay\n  },\n  props: {\n    challenge: {\n      type: Object,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      isUnlocked: false,\n      isRunning: false,\n      isCompleted: false,\n      canBeUnlocked: false,\n      completions: 0,\n      showGoalSpan: false,\n      lastGoal: \"\"\n    };\n  },\n\n  computed: {\n    config() {\n      return this.challenge.config;\n    },\n\n    goalDisplay() {\n      const config = this.config;\n      let goal = `Goal: ${this.goalAtCompletions(this.completions)} IP`;\n\n      if (config.restriction) {\n        goal += ` ${config.formatRestriction(config.restriction(this.completions))}`;\n      }\n\n      return goal;\n    },\n\n    firstGoal() {\n      return this.goalAtCompletions(0);\n    },\n\n    currentRewardConfig() {\n      const challenge = this.challenge;\n      const config = this.config.reward;\n      return {\n        effect: () => config.effect(challenge.completions),\n        formatEffect: config.formatEffect,\n        cap: config.cap\n      };\n    },\n\n    nextRewardConfig() {\n      const challenge = this.challenge;\n      const config = this.config.reward;\n      return {\n        effect: () => config.effect(challenge.completions + 1),\n        formatEffect: config.formatEffect,\n        cap: config.cap\n      };\n    },\n\n    name() {\n      return `EC${this.challenge.id}`;\n    }\n\n  },\n  methods: {\n    update() {\n      const challenge = this.challenge;\n      this.isUnlocked = challenge.isUnlocked;\n      this.isRunning = challenge.isRunning;\n      this.isCompleted = challenge.isFullyCompleted;\n      this.completions = challenge.completions;\n      this.showGoalSpan = PlayerProgress.realityUnlocked();\n      this.canBeUnlocked = TimeStudy.eternityChallenge(challenge.id).canBeBought;\n      this.lastGoal = Enslaved.isRunning && this.challenge.id === 1 ? wordShift.wordCycle(this.config.scrambleText.map(x => format(x))) : this.goalAtCompletions(this.challenge.maxCompletions - 1);\n    },\n\n    start() {\n      if (this.canBeUnlocked) {\n        TimeStudy.eternityChallenge(this.challenge.id).purchase();\n      } else this.challenge.requestStart();\n    },\n\n    goalAtCompletions(completions) {\n      return format(this.challenge.goalAtCompletions(completions), 2, 1);\n    }\n\n  }\n};","map":{"version":3,"sources":["EternityChallengeBox.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport wordShift from \"@/core/word-shift\";\r\n\r\nimport DescriptionDisplay from \"@/components/DescriptionDisplay\";\r\nimport EffectDisplay from \"@/components/EffectDisplay\";\r\nimport EternityChallengeBoxWrapper from \"./EternityChallengeBoxWrapper\";\r\n\r\nexport default {\r\n  name: \"EternityChallengeBox\",\r\n  components: {\r\n    EternityChallengeBoxWrapper,\r\n    DescriptionDisplay,\r\n    EffectDisplay\r\n  },\r\n  props: {\r\n    challenge: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isUnlocked: false,\r\n      isRunning: false,\r\n      isCompleted: false,\r\n      canBeUnlocked: false,\r\n      completions: 0,\r\n      showGoalSpan: false,\r\n      lastGoal: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    config() {\r\n      return this.challenge.config;\r\n    },\r\n    goalDisplay() {\r\n      const config = this.config;\r\n      let goal = `Goal: ${this.goalAtCompletions(this.completions)} IP`;\r\n      if (config.restriction) {\r\n        goal += ` ${config.formatRestriction(config.restriction(this.completions))}`;\r\n      }\r\n      return goal;\r\n    },\r\n    firstGoal() {\r\n      return this.goalAtCompletions(0);\r\n    },\r\n    currentRewardConfig() {\r\n      const challenge = this.challenge;\r\n      const config = this.config.reward;\r\n      return {\r\n        effect: () => config.effect(challenge.completions),\r\n        formatEffect: config.formatEffect,\r\n        cap: config.cap,\r\n      };\r\n    },\r\n    nextRewardConfig() {\r\n      const challenge = this.challenge;\r\n      const config = this.config.reward;\r\n      return {\r\n        effect: () => config.effect(challenge.completions + 1),\r\n        formatEffect: config.formatEffect,\r\n        cap: config.cap,\r\n      };\r\n    },\r\n    name() {\r\n      return `EC${this.challenge.id}`;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      const challenge = this.challenge;\r\n      this.isUnlocked = challenge.isUnlocked;\r\n      this.isRunning = challenge.isRunning;\r\n      this.isCompleted = challenge.isFullyCompleted;\r\n      this.completions = challenge.completions;\r\n      this.showGoalSpan = PlayerProgress.realityUnlocked();\r\n      this.canBeUnlocked = TimeStudy.eternityChallenge(challenge.id).canBeBought;\r\n\r\n      this.lastGoal = (Enslaved.isRunning && this.challenge.id === 1)\r\n        ? wordShift.wordCycle(this.config.scrambleText.map(x => format(x)))\r\n        : this.goalAtCompletions(this.challenge.maxCompletions - 1);\r\n    },\r\n    start() {\r\n      if (this.canBeUnlocked) {\r\n        TimeStudy.eternityChallenge(this.challenge.id).purchase();\r\n      } else this.challenge.requestStart();\r\n    },\r\n    goalAtCompletions(completions) {\r\n      return format(this.challenge.goalAtCompletions(completions), 2, 1);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <EternityChallengeBoxWrapper\r\n    :name=\"name\"\r\n    :is-unlocked=\"isUnlocked\"\r\n    :is-running=\"isRunning\"\r\n    :is-completed=\"isCompleted\"\r\n    :can-be-unlocked=\"canBeUnlocked\"\r\n    :completion-count=\"completions\"\r\n    @start=\"start\"\r\n  >\r\n    <template #top>\r\n      <DescriptionDisplay :config=\"config\" />\r\n    </template>\r\n    <template #bottom>\r\n      <div :style=\"{ visiblity: completions < 5 ? 'visible' : 'hidden' }\">\r\n        <div>\r\n          Completed {{ quantifyInt(\"time\", completions) }}\r\n        </div>\r\n        {{ goalDisplay }}\r\n      </div>\r\n      <span v-if=\"showGoalSpan\">\r\n        Goal Span: {{ firstGoal }} IP - {{ lastGoal }} IP\r\n      </span>\r\n      <span>\r\n        Reward:\r\n        <DescriptionDisplay\r\n          :config=\"config.reward\"\r\n          :length=\"55\"\r\n          name=\"c-challenge-box__reward-description\"\r\n        />\r\n      </span>\r\n      <span>\r\n        <EffectDisplay\r\n          v-if=\"completions > 0\"\r\n          :config=\"currentRewardConfig\"\r\n        />\r\n        <span v-if=\"completions > 0 && completions < 5\">|</span>\r\n        <EffectDisplay\r\n          v-if=\"completions < 5\"\r\n          :config=\"nextRewardConfig\"\r\n          label=\"Next\"\r\n          :ignore-capped=\"true\"\r\n        />\r\n      </span>\r\n    </template>\r\n  </EternityChallengeBoxWrapper>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/eternity-challenges"},"metadata":{},"sourceType":"module"}