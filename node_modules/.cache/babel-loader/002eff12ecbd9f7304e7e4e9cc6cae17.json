{"ast":null,"code":"import { isDecimal, isFunction, isNumber } from \"@/utility\";\n/* eslint-disable no-empty-function */\n\nexport default {\n  name: \"CostDisplay\",\n  props: {\n    config: {\n      type: Object,\n      required: false,\n      default: undefined\n    },\n    br: {\n      type: Boolean,\n      required: false\n    },\n    name: {\n      type: String,\n      required: true\n    },\n    label: {\n      type: String,\n      default: \"Cost:\",\n      required: false\n    }\n  },\n\n  data() {\n    return {\n      isVisible: false,\n      cost: 0\n    };\n  },\n\n  watch: {\n    config: {\n      immediate: true,\n\n      handler(config) {\n        var _config$formatCost;\n\n        this.updateFunction = () => {};\n\n        const cost = config === null || config === void 0 ? void 0 : config.cost;\n        this.isVisible = cost !== undefined;\n        if (!this.isVisible) return;\n        this.formatCost = (_config$formatCost = config.formatCost) !== null && _config$formatCost !== void 0 ? _config$formatCost : format;\n\n        if (isNumber(cost)) {\n          this.cost = cost;\n          return;\n        }\n\n        if (isDecimal(cost)) {\n          this.cost = Decimal.fromDecimal(cost);\n          return;\n        }\n\n        if (!isFunction(cost)) {\n          throw new Error(`CostDisplay config.cost has unsupported type \"${typeof cost}\"`);\n        }\n\n        const value = cost();\n\n        if (isNumber(value)) {\n          this.cost = value;\n\n          this.updateFunction = () => this.cost = cost();\n\n          return;\n        }\n\n        if (isDecimal(value)) {\n          this.cost = Decimal.fromDecimal(value);\n\n          this.updateFunction = () => this.cost.copyFrom(cost());\n\n          return;\n        }\n\n        throw new Error(`CostDisplay config.cost is a function which returns` + ` unsupported type \"${typeof value}\"`);\n      }\n\n    }\n  },\n\n  beforeCreate() {\n    this.updateFunction = () => {};\n  },\n\n  methods: {\n    update() {\n      this.updateFunction();\n    },\n\n    quantify\n  }\n};","map":{"version":3,"sources":["CostDisplay.vue"],"names":[],"mappings":"AACA,SAAA,SAAA,EAAA,UAAA,EAAA,QAAA,QAAA,WAAA;AAEA;;AACA,eAAA;AACA,EAAA,IAAA,EAAA,aADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA,KAFA;AAGA,MAAA,OAAA,EAAA;AAHA,KADA;AAMA,IAAA,EAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,QAAA,EAAA;AAFA,KANA;AAUA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KAVA;AAcA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA,OAFA;AAGA,MAAA,QAAA,EAAA;AAHA;AAdA,GAFA;;AAsBA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,SAAA,EAAA,KADA;AAEA,MAAA,IAAA,EAAA;AAFA,KAAA;AAIA,GA3BA;;AA4BA,EAAA,KAAA,EAAA;AACA,IAAA,MAAA,EAAA;AACA,MAAA,SAAA,EAAA,IADA;;AAEA,MAAA,OAAA,CAAA,MAAA,EAAA;AAAA;;AACA,aAAA,cAAA,GAAA,MAAA,CAAA,CAAA;;AACA,cAAA,IAAA,GAAA,MAAA,aAAA,MAAA,uBAAA,MAAA,CAAA,IAAA;AACA,aAAA,SAAA,GAAA,IAAA,KAAA,SAAA;AACA,YAAA,CAAA,KAAA,SAAA,EAAA;AACA,aAAA,UAAA,yBAAA,MAAA,CAAA,UAAA,mEAAA,MAAA;;AAEA,YAAA,QAAA,CAAA,IAAA,CAAA,EAAA;AACA,eAAA,IAAA,GAAA,IAAA;AACA;AACA;;AAEA,YAAA,SAAA,CAAA,IAAA,CAAA,EAAA;AACA,eAAA,IAAA,GAAA,OAAA,CAAA,WAAA,CAAA,IAAA,CAAA;AACA;AACA;;AAEA,YAAA,CAAA,UAAA,CAAA,IAAA,CAAA,EAAA;AACA,gBAAA,IAAA,KAAA,CAAA,iDAAA,OAAA,IAAA,GAAA,CAAA;AACA;;AAEA,cAAA,KAAA,GAAA,IAAA,EAAA;;AAEA,YAAA,QAAA,CAAA,KAAA,CAAA,EAAA;AACA,eAAA,IAAA,GAAA,KAAA;;AACA,eAAA,cAAA,GAAA,MAAA,KAAA,IAAA,GAAA,IAAA,EAAA;;AACA;AACA;;AAEA,YAAA,SAAA,CAAA,KAAA,CAAA,EAAA;AACA,eAAA,IAAA,GAAA,OAAA,CAAA,WAAA,CAAA,KAAA,CAAA;;AACA,eAAA,cAAA,GAAA,MAAA,KAAA,IAAA,CAAA,QAAA,CAAA,IAAA,EAAA,CAAA;;AACA;AACA;;AAEA,cAAA,IAAA,KAAA,CAAA,qDAAA,GACA,sBAAA,OAAA,KAAA,GADA,CAAA;AAEA;;AAvCA;AADA,GA5BA;;AAuEA,EAAA,YAAA,GAAA;AACA,SAAA,cAAA,GAAA,MAAA,CAAA,CAAA;AACA,GAzEA;;AA0EA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,cAAA;AACA,KAHA;;AAIA,IAAA;AAJA;AA1EA,CAAA","sourcesContent":["<script>\r\nimport { isDecimal, isFunction, isNumber } from \"@/utility\";\r\n\r\n/* eslint-disable no-empty-function */\r\nexport default {\r\n  name: \"CostDisplay\",\r\n  props: {\r\n    config: {\r\n      type: Object,\r\n      required: false,\r\n      default: undefined\r\n    },\r\n    br: {\r\n      type: Boolean,\r\n      required: false\r\n    },\r\n    name: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    label: {\r\n      type: String,\r\n      default: \"Cost:\",\r\n      required: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isVisible: false,\r\n      cost: 0\r\n    };\r\n  },\r\n  watch: {\r\n    config: {\r\n      immediate: true,\r\n      handler(config) {\r\n        this.updateFunction = () => { };\r\n        const cost = config?.cost;\r\n        this.isVisible = cost !== undefined;\r\n        if (!this.isVisible) return;\r\n        this.formatCost = config.formatCost ?? format;\r\n\r\n        if (isNumber(cost)) {\r\n          this.cost = cost;\r\n          return;\r\n        }\r\n\r\n        if (isDecimal(cost)) {\r\n          this.cost = Decimal.fromDecimal(cost);\r\n          return;\r\n        }\r\n\r\n        if (!isFunction(cost)) {\r\n          throw new Error(`CostDisplay config.cost has unsupported type \"${typeof cost}\"`);\r\n        }\r\n\r\n        const value = cost();\r\n\r\n        if (isNumber(value)) {\r\n          this.cost = value;\r\n          this.updateFunction = () => this.cost = cost();\r\n          return;\r\n        }\r\n\r\n        if (isDecimal(value)) {\r\n          this.cost = Decimal.fromDecimal(value);\r\n          this.updateFunction = () => this.cost.copyFrom(cost());\r\n          return;\r\n        }\r\n\r\n        throw new Error(`CostDisplay config.cost is a function which returns` +\r\n          ` unsupported type \"${typeof value}\"`);\r\n      }\r\n    }\r\n  },\r\n  beforeCreate() {\r\n    this.updateFunction = () => { };\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.updateFunction();\r\n    },\r\n    quantify\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <span v-if=\"isVisible\">\r\n    <br v-if=\"br\">\r\n    {{ label }} {{ quantify(name, cost, 0, 0, formatCost) }}\r\n  </span>\r\n</template>\r\n"],"sourceRoot":"src/components"},"metadata":{},"sourceType":"module"}