{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport ImportFilterSingleType from \"./ImportFilterSingleType\";\nimport ModalWrapperChoice from \"@/components/modals/ModalWrapperChoice\";\nimport PrimaryButton from \"@/components/PrimaryButton\";\nexport default {\n  name: \"ImportFilterModal\",\n  components: {\n    ModalWrapperChoice,\n    PrimaryButton,\n    ImportFilterSingleType\n  },\n\n  data() {\n    return {\n      currentSettings: {},\n      input: \"\"\n    };\n  },\n\n  computed: {\n    inputIsValid() {\n      let decoded;\n\n      try {\n        decoded = GameSaveSerializer.decodeText(this.input, \"glyph filter\");\n        return decoded.length > 0 && decoded.match(/^[,-9\\|]*$/) !== null;\n      } catch (_unused) {\n        return false;\n      }\n    },\n\n    parsedSettings() {\n      if (!this.inputIsValid) return null;\n      const decoded = GameSaveSerializer.decodeText(this.input, \"glyph filter\");\n      const parts = decoded.split(\"|\");\n      const typeInfo = {};\n      let partIndex = 3;\n\n      for (const type of ALCHEMY_BASIC_GLYPH_TYPES) {\n        if (!type) continue;\n        const subparts = parts[partIndex].split(\",\");\n        typeInfo[type] = {\n          rarity: Number(subparts[0]),\n          score: Number(subparts[1]),\n          effectCount: Number(subparts[2]),\n          specifiedMask: Number(subparts[3]),\n          effectScores: subparts[4].split(\"/\").map(s => Number(s))\n        };\n        partIndex++;\n      }\n\n      return {\n        select: Number(parts[0]),\n        simple: Number(parts[1]),\n        trash: Number(parts[2]),\n        types: typeInfo\n      };\n    },\n\n    selectStr() {\n      return this.changedValue(this.parsedSettings.select, this.currentSettings.select, x => AutoGlyphProcessor.filterModeName(x));\n    },\n\n    basicCountStr() {\n      return this.changedValue(this.parsedSettings.simple, this.currentSettings.simple, formatInt);\n    },\n\n    trashStr() {\n      return this.changedValue(this.parsedSettings.trash, this.currentSettings.trash, x => AutoGlyphProcessor.trashModeDesc(x));\n    },\n\n    // Hide effarig if it hasn't been unlocked yet\n    availableTypes() {\n      return ALCHEMY_BASIC_GLYPH_TYPES.filter(t => !GlyphTypes.locked.map(e => e.id).includes(t));\n    },\n\n    settingTooltipText() {\n      return `Mouseover each box for more details. ✔ and ✘ symbols denote an effect\n        selected/unselected for Specified Effect mode.`;\n    }\n\n  },\n\n  mounted() {\n    this.$refs.input.select();\n  },\n\n  methods: {\n    update() {\n      this.currentSettings = JSON.parse(JSON.stringify(player.reality.glyphs.filter));\n    },\n\n    changedValue(oldVal, newVal, applyFn) {\n      if (oldVal === newVal) return \"(No change)\";\n      return `${applyFn(oldVal)} ➜ ${applyFn(newVal)}`;\n    },\n\n    importFilter() {\n      if (this.parsedSettings === null) return;\n      this.emitClose();\n      player.reality.glyphs.filter = this.parsedSettings;\n    }\n\n  }\n};","map":{"version":3,"sources":["ImportFilterModal.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport ImportFilterSingleType from \"./ImportFilterSingleType\";\r\nimport ModalWrapperChoice from \"@/components/modals/ModalWrapperChoice\";\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\n\r\nexport default {\r\n  name: \"ImportFilterModal\",\r\n  components: {\r\n    ModalWrapperChoice,\r\n    PrimaryButton,\r\n    ImportFilterSingleType\r\n  },\r\n  data() {\r\n    return {\r\n      currentSettings: {},\r\n      input: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    inputIsValid() {\r\n      let decoded;\r\n      try {\r\n        decoded = GameSaveSerializer.decodeText(this.input, \"glyph filter\");\r\n        return decoded.length > 0 && decoded.match(/^[0-9,.|/-]*$/u) !== null;\r\n      } catch {\r\n        return false;\r\n      }\r\n    },\r\n    parsedSettings() {\r\n      if (!this.inputIsValid) return null;\r\n\r\n      const decoded = GameSaveSerializer.decodeText(this.input, \"glyph filter\");\r\n      const parts = decoded.split(\"|\");\r\n      const typeInfo = {};\r\n      let partIndex = 3;\r\n      for (const type of ALCHEMY_BASIC_GLYPH_TYPES) {\r\n        if (!type) continue;\r\n        const subparts = parts[partIndex].split(\",\");\r\n        typeInfo[type] = {\r\n          rarity: Number(subparts[0]),\r\n          score: Number(subparts[1]),\r\n          effectCount: Number(subparts[2]),\r\n          specifiedMask: Number(subparts[3]),\r\n          effectScores: subparts[4].split(\"/\").map(s => Number(s)),\r\n        };\r\n        partIndex++;\r\n      }\r\n\r\n      return {\r\n        select: Number(parts[0]),\r\n        simple: Number(parts[1]),\r\n        trash: Number(parts[2]),\r\n        types: typeInfo,\r\n      };\r\n    },\r\n    selectStr() {\r\n      return this.changedValue(this.parsedSettings.select, this.currentSettings.select,\r\n        x => AutoGlyphProcessor.filterModeName(x));\r\n    },\r\n    basicCountStr() {\r\n      return this.changedValue(this.parsedSettings.simple, this.currentSettings.simple, formatInt);\r\n    },\r\n    trashStr() {\r\n      return this.changedValue(this.parsedSettings.trash, this.currentSettings.trash,\r\n        x => AutoGlyphProcessor.trashModeDesc(x));\r\n    },\r\n    // Hide effarig if it hasn't been unlocked yet\r\n    availableTypes() {\r\n      return ALCHEMY_BASIC_GLYPH_TYPES.filter(t => !GlyphTypes.locked.map(e => e.id).includes(t));\r\n    },\r\n    settingTooltipText() {\r\n      return `Mouseover each box for more details. ✔ and ✘ symbols denote an effect\r\n        selected/unselected for Specified Effect mode.`;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$refs.input.select();\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.currentSettings = JSON.parse(JSON.stringify(player.reality.glyphs.filter));\r\n    },\r\n    changedValue(oldVal, newVal, applyFn) {\r\n      if (oldVal === newVal) return \"(No change)\";\r\n      return `${applyFn(oldVal)} ➜ ${applyFn(newVal)}`;\r\n    },\r\n    importFilter() {\r\n      if (this.parsedSettings === null) return;\r\n      this.emitClose();\r\n      player.reality.glyphs.filter = this.parsedSettings;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapperChoice\r\n    :show-cancel=\"!inputIsValid\"\r\n    :show-confirm=\"false\"\r\n  >\r\n    <template #header>\r\n      Import Glyph filter settings\r\n    </template>\r\n    Note: Importing Glyph filter options will overwrite settings\r\n    <br>\r\n    in all filter modes, not just the currently-selected one.\r\n    <input\r\n      ref=\"input\"\r\n      v-model=\"input\"\r\n      type=\"text\"\r\n      class=\"c-modal-input c-modal-import__input\"\r\n      @keyup.enter=\"importSave\"\r\n      @keyup.esc=\"emitClose\"\r\n    >\r\n    <div class=\"c-modal-import__save-info\">\r\n      <div v-if=\"!input\" />\r\n      <div v-else-if=\"inputIsValid\">\r\n        <b>Selection mode:</b> {{ selectStr }}\r\n        <br>\r\n        <b>Effect Count (\"Number of Effects\"):</b> {{ basicCountStr }}\r\n        <br>\r\n        <b>Rejected Glyphs:</b> {{ trashStr }}\r\n        <br>\r\n        <u><b>Type-specific Settings</b></u> <span :ach-tooltip=\"settingTooltipText\">\r\n          <i class=\"fas fa-question-circle\" />\r\n        </span>\r\n        <br>\r\n        <ImportFilterSingleType\r\n          v-for=\"type in availableTypes\"\r\n          :key=\"type\"\r\n          class=\"c-single-type\"\r\n          :type=\"type\"\r\n          :curr-settings=\"currentSettings.types[type]\"\r\n          :new-settings=\"parsedSettings.types[type]\"\r\n        />\r\n      </div>\r\n      <div v-else>\r\n        Not a valid Glyph filter string\r\n      </div>\r\n    </div>\r\n\r\n    <PrimaryButton\r\n      v-if=\"inputIsValid\"\r\n      class=\"o-primary-btn--width-medium c-modal-message__okay-btn c-modal__confirm-btn\"\r\n      @click=\"importFilter\"\r\n    >\r\n      Import\r\n    </PrimaryButton>\r\n  </ModalWrapperChoice>\r\n</template>\r\n\r\n<style scoped>\r\n.c-single-type {\r\n  left: 0;\r\n  text-align: left;\r\n  padding: 0.5rem;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/modals"},"metadata":{},"sourceType":"module"}