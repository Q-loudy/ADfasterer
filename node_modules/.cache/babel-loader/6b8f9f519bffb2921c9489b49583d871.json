{"ast":null,"code":"import PastPrestigeRunsContainer from \"./PastPrestigeRunsContainer\";\nexport default {\n  name: \"PastPrestigeRunsTab\",\n  components: {\n    PastPrestigeRunsContainer\n  },\n\n  data() {\n    return {\n      layers: {\n        reality: {\n          name: \"Reality\",\n          plural: \"Realities\",\n          currency: \"RM\",\n          condition: () => PlayerProgress.realityUnlocked(),\n          getRuns: () => player.records.recentRealities,\n          extra: [\"Glyph Level\", \"Relic Shards\"],\n          showExtra: [() => true, () => TeresaUnlocks.effarig.canBeApplied],\n          formatExtra: [x => formatInt(x), x => format(x, 2)],\n          allowRate: [false, true],\n          rateString: [\"\", \"Relic Shard Rate\"]\n        },\n        eternity: {\n          name: \"Eternity\",\n          plural: \"Eternities\",\n          currency: \"EP\",\n          condition: () => PlayerProgress.eternityUnlocked(),\n          getRuns: () => player.records.recentEternities,\n          extra: [\"Tachyon Particles\"],\n          showExtra: [() => PlayerProgress.dilationUnlocked()],\n          formatExtra: [x => format(x, 2)],\n          allowRate: [false]\n        },\n        infinity: {\n          name: \"Infinity\",\n          plural: \"Infinities\",\n          currency: \"IP\",\n          condition: () => PlayerProgress.infinityUnlocked(),\n          getRuns: () => player.records.recentInfinities\n        }\n      },\n      resourceType: false\n    };\n  },\n\n  computed: {\n    resourceText() {\n      switch (this.resourceType) {\n        case RECENT_PRESTIGE_RESOURCE.ABSOLUTE_GAIN:\n          return \"total resource gain\";\n\n        case RECENT_PRESTIGE_RESOURCE.RATE:\n          return \"resource gain rate\";\n\n        case RECENT_PRESTIGE_RESOURCE.CURRENCY:\n          return \"prestige currency\";\n\n        case RECENT_PRESTIGE_RESOURCE.PRESTIGE_COUNT:\n          return \"prestige count\";\n\n        default:\n          throw new Error(\"Unrecognized Statistics tab resource type\");\n      }\n    }\n\n  },\n  methods: {\n    update() {\n      this.resourceType = player.options.statTabResources;\n    },\n\n    cycleButton() {\n      const stateCount = Object.keys(RECENT_PRESTIGE_RESOURCE).length;\n      player.options.statTabResources = (player.options.statTabResources + 1) % stateCount;\n    }\n\n  }\n};","map":{"version":3,"sources":["PastPrestigeRunsTab.vue"],"names":[],"mappings":"AACA,OAAA,yBAAA,MAAA,6BAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,qBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA;AADA,GAFA;;AAKA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,MAAA,EAAA;AACA,QAAA,OAAA,EAAA;AACA,UAAA,IAAA,EAAA,SADA;AAEA,UAAA,MAAA,EAAA,WAFA;AAGA,UAAA,QAAA,EAAA,IAHA;AAIA,UAAA,SAAA,EAAA,MAAA,cAAA,CAAA,eAAA,EAJA;AAKA,UAAA,OAAA,EAAA,MAAA,MAAA,CAAA,OAAA,CAAA,eALA;AAMA,UAAA,KAAA,EAAA,CAAA,aAAA,EAAA,cAAA,CANA;AAOA,UAAA,SAAA,EAAA,CAAA,MAAA,IAAA,EAAA,MAAA,aAAA,CAAA,OAAA,CAAA,YAAA,CAPA;AAQA,UAAA,WAAA,EAAA,CAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,EAAA,CAAA,IAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CARA;AASA,UAAA,SAAA,EAAA,CAAA,KAAA,EAAA,IAAA,CATA;AAUA,UAAA,UAAA,EAAA,CAAA,EAAA,EAAA,kBAAA;AAVA,SADA;AAaA,QAAA,QAAA,EAAA;AACA,UAAA,IAAA,EAAA,UADA;AAEA,UAAA,MAAA,EAAA,YAFA;AAGA,UAAA,QAAA,EAAA,IAHA;AAIA,UAAA,SAAA,EAAA,MAAA,cAAA,CAAA,gBAAA,EAJA;AAKA,UAAA,OAAA,EAAA,MAAA,MAAA,CAAA,OAAA,CAAA,gBALA;AAMA,UAAA,KAAA,EAAA,CAAA,mBAAA,CANA;AAOA,UAAA,SAAA,EAAA,CAAA,MAAA,cAAA,CAAA,gBAAA,EAAA,CAPA;AAQA,UAAA,WAAA,EAAA,CAAA,CAAA,IAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CARA;AASA,UAAA,SAAA,EAAA,CAAA,KAAA;AATA,SAbA;AAwBA,QAAA,QAAA,EAAA;AACA,UAAA,IAAA,EAAA,UADA;AAEA,UAAA,MAAA,EAAA,YAFA;AAGA,UAAA,QAAA,EAAA,IAHA;AAIA,UAAA,SAAA,EAAA,MAAA,cAAA,CAAA,gBAAA,EAJA;AAKA,UAAA,OAAA,EAAA,MAAA,MAAA,CAAA,OAAA,CAAA;AALA;AAxBA,OADA;AAiCA,MAAA,YAAA,EAAA;AAjCA,KAAA;AAmCA,GAzCA;;AA0CA,EAAA,QAAA,EAAA;AACA,IAAA,YAAA,GAAA;AACA,cAAA,KAAA,YAAA;AACA,aAAA,wBAAA,CAAA,aAAA;AACA,iBAAA,qBAAA;;AACA,aAAA,wBAAA,CAAA,IAAA;AACA,iBAAA,oBAAA;;AACA,aAAA,wBAAA,CAAA,QAAA;AACA,iBAAA,mBAAA;;AACA,aAAA,wBAAA,CAAA,cAAA;AACA,iBAAA,gBAAA;;AACA;AACA,gBAAA,IAAA,KAAA,CAAA,2CAAA,CAAA;AAVA;AAYA;;AAdA,GA1CA;AA0DA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,YAAA,GAAA,MAAA,CAAA,OAAA,CAAA,gBAAA;AACA,KAHA;;AAIA,IAAA,WAAA,GAAA;AACA,YAAA,UAAA,GAAA,MAAA,CAAA,IAAA,CAAA,wBAAA,EAAA,MAAA;AACA,MAAA,MAAA,CAAA,OAAA,CAAA,gBAAA,GAAA,CAAA,MAAA,CAAA,OAAA,CAAA,gBAAA,GAAA,CAAA,IAAA,UAAA;AACA;;AAPA;AA1DA,CAAA","sourcesContent":["<script>\r\nimport PastPrestigeRunsContainer from \"./PastPrestigeRunsContainer\";\r\n\r\nexport default {\r\n  name: \"PastPrestigeRunsTab\",\r\n  components: {\r\n    PastPrestigeRunsContainer\r\n  },\r\n  data() {\r\n    return {\r\n      layers: {\r\n        reality: {\r\n          name: \"Reality\",\r\n          plural: \"Realities\",\r\n          currency: \"RM\",\r\n          condition: () => PlayerProgress.realityUnlocked(),\r\n          getRuns: () => player.records.recentRealities,\r\n          extra: [\"Glyph Level\", \"Relic Shards\"],\r\n          showExtra: [() => true, () => TeresaUnlocks.effarig.canBeApplied],\r\n          formatExtra: [x => formatInt(x), x => format(x, 2)],\r\n          allowRate: [false, true],\r\n          rateString: [\"\", \"Relic Shard Rate\"],\r\n        },\r\n        eternity: {\r\n          name: \"Eternity\",\r\n          plural: \"Eternities\",\r\n          currency: \"EP\",\r\n          condition: () => PlayerProgress.eternityUnlocked(),\r\n          getRuns: () => player.records.recentEternities,\r\n          extra: [\"Tachyon Particles\"],\r\n          showExtra: [() => PlayerProgress.dilationUnlocked()],\r\n          formatExtra: [x => format(x, 2)],\r\n          allowRate: [false],\r\n        },\r\n        infinity: {\r\n          name: \"Infinity\",\r\n          plural: \"Infinities\",\r\n          currency: \"IP\",\r\n          condition: () => PlayerProgress.infinityUnlocked(),\r\n          getRuns: () => player.records.recentInfinities,\r\n        },\r\n      },\r\n      resourceType: false,\r\n    };\r\n  },\r\n  computed: {\r\n    resourceText() {\r\n      switch (this.resourceType) {\r\n        case RECENT_PRESTIGE_RESOURCE.ABSOLUTE_GAIN:\r\n          return \"total resource gain\";\r\n        case RECENT_PRESTIGE_RESOURCE.RATE:\r\n          return \"resource gain rate\";\r\n        case RECENT_PRESTIGE_RESOURCE.CURRENCY:\r\n          return \"prestige currency\";\r\n        case RECENT_PRESTIGE_RESOURCE.PRESTIGE_COUNT:\r\n          return \"prestige count\";\r\n        default:\r\n          throw new Error(\"Unrecognized Statistics tab resource type\");\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.resourceType = player.options.statTabResources;\r\n    },\r\n    cycleButton() {\r\n      const stateCount = Object.keys(RECENT_PRESTIGE_RESOURCE).length;\r\n      player.options.statTabResources = (player.options.statTabResources + 1) % stateCount;\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"c-stats-tab\">\r\n    <div class=\"c-subtab-option-container\">\r\n      <button\r\n        class=\"o-primary-btn o-primary-btn--subtab-option\"\r\n        @click=\"cycleButton()\"\r\n      >\r\n        Showing {{ resourceText }}\r\n      </button>\r\n    </div>\r\n    <PastPrestigeRunsContainer\r\n      v-for=\"layer in layers\"\r\n      :key=\"layer.name\"\r\n      :layer=\"layer\"\r\n    />\r\n  </div>\r\n</template>\r\n"],"sourceRoot":"src/components/tabs/past-prestige-runs"},"metadata":{},"sourceType":"module"}