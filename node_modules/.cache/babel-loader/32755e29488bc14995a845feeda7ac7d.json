{"ast":null,"code":"import \"core-js/modules/es.array.reduce.js\";\nimport { BitUpgradeState } from \"../game-mechanics\";\nimport { GameDatabase } from \"../secret-formula/game-database\";\nimport { DC } from \"../constants\";\nimport { Quotes } from \"./quotes\";\nexport const EFFARIG_STAGES = {\n  INFINITY: 1,\n  ETERNITY: 2,\n  REALITY: 3,\n  COMPLETED: 4\n};\nexport const Effarig = {\n  displayName: \"Effarig\",\n  possessiveName: \"Effarig's\",\n\n  initializeRun() {\n    clearCelestialRuns();\n    player.celestials.effarig.run = true;\n    recalculateAllGlyphs();\n    Tab.reality.glyphs.show(false);\n  },\n\n  get isRunning() {\n    return player.celestials.effarig.run;\n  },\n\n  get currentStage() {\n    if (!EffarigUnlock.infinity.isUnlocked) {\n      return EFFARIG_STAGES.INFINITY;\n    }\n\n    if (!EffarigUnlock.eternity.isUnlocked) {\n      return EFFARIG_STAGES.ETERNITY;\n    }\n\n    if (!EffarigUnlock.reality.isUnlocked) {\n      return EFFARIG_STAGES.REALITY;\n    }\n\n    return EFFARIG_STAGES.COMPLETED;\n  },\n\n  get currentStageName() {\n    switch (this.currentStage) {\n      case EFFARIG_STAGES.INFINITY:\n        return \"Infinity\";\n\n      case EFFARIG_STAGES.ETERNITY:\n        return \"Eternity\";\n\n      case EFFARIG_STAGES.REALITY:\n      default:\n        return \"Reality\";\n    }\n  },\n\n  get eternityCap() {\n    return this.isRunning && this.currentStage === EFFARIG_STAGES.ETERNITY ? DC.E50 : undefined;\n  },\n\n  get glyphLevelCap() {\n    switch (this.currentStage) {\n      case EFFARIG_STAGES.INFINITY:\n        return 100;\n\n      case EFFARIG_STAGES.ETERNITY:\n        return 1500;\n\n      case EFFARIG_STAGES.REALITY:\n      default:\n        return 2000;\n    }\n  },\n\n  get glyphEffectAmount() {\n    const genEffectBitmask = Glyphs.activeWithoutCompanion.filter(g => generatedTypes.includes(g.type)).reduce((prev, curr) => prev | curr.effects, 0);\n    const nongenEffectBitmask = Glyphs.activeWithoutCompanion.filter(g => !generatedTypes.includes(g.type)).reduce((prev, curr) => prev | curr.effects, 0);\n    return countValuesFromBitmask(genEffectBitmask) + countValuesFromBitmask(nongenEffectBitmask);\n  },\n\n  get shardsGained() {\n    if (!TeresaUnlocks.effarig.canBeApplied) return 0;\n    return Math.floor(Math.pow(Currency.eternityPoints.exponent / 7500, this.glyphEffectAmount)) * AlchemyResource.effarig.effectValue;\n  },\n\n  get maxRarityBoost() {\n    return 5 * Math.log10(Math.log10(Currency.relicShards.value + 10));\n  },\n\n  nerfFactor(power) {\n    let c;\n\n    switch (this.currentStage) {\n      case EFFARIG_STAGES.INFINITY:\n        c = 1500;\n        break;\n\n      case EFFARIG_STAGES.ETERNITY:\n        c = 29.29;\n        break;\n\n      case EFFARIG_STAGES.REALITY:\n      default:\n        c = 25;\n        break;\n    }\n\n    return 3 * (1 - c / (c + Math.sqrt(power.pLog10())));\n  },\n\n  get tickDilation() {\n    return 0.7 + 0.1 * this.nerfFactor(Currency.timeShards.value);\n  },\n\n  get multDilation() {\n    return 0.25 + 0.25 * this.nerfFactor(Currency.infinityPower.value);\n  },\n\n  get tickspeed() {\n    const base = 3 + Tickspeed.baseValue.reciprocal().log10();\n    return Decimal.pow10(Math.pow(base, this.tickDilation)).reciprocal();\n  },\n\n  multiplier(mult) {\n    const base = new Decimal(mult).pLog10();\n    return Decimal.pow10(Math.pow(base, this.multDilation));\n  },\n\n  get bonusRG() {\n    // Will return 0 if Effarig Infinity is uncompleted\n    return Math.floor(replicantiCap().pLog10() / LOG10_MAX_VALUE - 1);\n  },\n\n  quotes: Quotes.effarig,\n  symbol: \"Ï˜\"\n};\n\nclass EffarigUnlockState extends BitUpgradeState {\n  get bits() {\n    return player.celestials.effarig.unlockBits;\n  }\n\n  set bits(value) {\n    player.celestials.effarig.unlockBits = value;\n  }\n\n  get cost() {\n    return this.config.cost;\n  }\n\n  get isEffectActive() {\n    return !Pelle.isDisabled(\"effarig\");\n  }\n\n  purchase() {\n    var _this$config$onPurcha, _this$config;\n\n    if (this.isUnlocked || !Currency.relicShards.purchase(this.cost)) return;\n    this.unlock();\n    (_this$config$onPurcha = (_this$config = this.config).onPurchased) === null || _this$config$onPurcha === void 0 ? void 0 : _this$config$onPurcha.call(_this$config);\n  }\n\n}\n\nexport const EffarigUnlock = mapGameDataToObject(GameDatabase.celestials.effarig.unlocks, config => new EffarigUnlockState(config));\nEventHub.logic.on(GAME_EVENT.TAB_CHANGED, () => {\n  if (Tab.celestials.effarig.isOpen) Effarig.quotes.initial.show();\n});\nEventHub.logic.on(GAME_EVENT.BIG_CRUNCH_BEFORE, () => {\n  if (!Effarig.isRunning) return;\n  Effarig.quotes.completeInfinity.show();\n});\nEventHub.logic.on(GAME_EVENT.ETERNITY_RESET_BEFORE, () => {\n  if (!Effarig.isRunning) return;\n  Effarig.quotes.completeEternity.show();\n});","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/celestials/effarig.js"],"names":["BitUpgradeState","GameDatabase","DC","Quotes","EFFARIG_STAGES","INFINITY","ETERNITY","REALITY","COMPLETED","Effarig","displayName","possessiveName","initializeRun","clearCelestialRuns","player","celestials","effarig","run","recalculateAllGlyphs","Tab","reality","glyphs","show","isRunning","currentStage","EffarigUnlock","infinity","isUnlocked","eternity","currentStageName","eternityCap","E50","undefined","glyphLevelCap","glyphEffectAmount","genEffectBitmask","Glyphs","activeWithoutCompanion","filter","g","generatedTypes","includes","type","reduce","prev","curr","effects","nongenEffectBitmask","countValuesFromBitmask","shardsGained","TeresaUnlocks","canBeApplied","Math","floor","pow","Currency","eternityPoints","exponent","AlchemyResource","effectValue","maxRarityBoost","log10","relicShards","value","nerfFactor","power","c","sqrt","pLog10","tickDilation","timeShards","multDilation","infinityPower","tickspeed","base","Tickspeed","baseValue","reciprocal","Decimal","pow10","multiplier","mult","bonusRG","replicantiCap","LOG10_MAX_VALUE","quotes","symbol","EffarigUnlockState","bits","unlockBits","cost","config","isEffectActive","Pelle","isDisabled","purchase","unlock","onPurchased","mapGameDataToObject","unlocks","EventHub","logic","on","GAME_EVENT","TAB_CHANGED","isOpen","initial","BIG_CRUNCH_BEFORE","completeInfinity","ETERNITY_RESET_BEFORE","completeEternity"],"mappings":"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","sourcesContent":["import { BitUpgradeState } from \"../game-mechanics\";\r\nimport { GameDatabase } from \"../secret-formula/game-database\";\r\n\r\nimport { DC } from \"../constants\";\r\n\r\nimport { Quotes } from \"./quotes\";\r\n\r\nexport const EFFARIG_STAGES = {\r\n  INFINITY: 1,\r\n  ETERNITY: 2,\r\n  REALITY: 3,\r\n  COMPLETED: 4\r\n};\r\n\r\nexport const Effarig = {\r\n  displayName: \"Effarig\",\r\n  possessiveName: \"Effarig's\",\r\n  initializeRun() {\r\n    clearCelestialRuns();\r\n    player.celestials.effarig.run = true;\r\n    recalculateAllGlyphs();\r\n    Tab.reality.glyphs.show(false);\r\n  },\r\n  get isRunning() {\r\n    return player.celestials.effarig.run;\r\n  },\r\n  get currentStage() {\r\n    if (!EffarigUnlock.infinity.isUnlocked) {\r\n      return EFFARIG_STAGES.INFINITY;\r\n    }\r\n    if (!EffarigUnlock.eternity.isUnlocked) {\r\n      return EFFARIG_STAGES.ETERNITY;\r\n    }\r\n    if (!EffarigUnlock.reality.isUnlocked) {\r\n      return EFFARIG_STAGES.REALITY;\r\n    }\r\n    return EFFARIG_STAGES.COMPLETED;\r\n  },\r\n  get currentStageName() {\r\n    switch (this.currentStage) {\r\n      case EFFARIG_STAGES.INFINITY:\r\n        return \"Infinity\";\r\n      case EFFARIG_STAGES.ETERNITY:\r\n        return \"Eternity\";\r\n      case EFFARIG_STAGES.REALITY:\r\n      default:\r\n        return \"Reality\";\r\n    }\r\n  },\r\n  get eternityCap() {\r\n    return this.isRunning && this.currentStage === EFFARIG_STAGES.ETERNITY ? DC.E50 : undefined;\r\n  },\r\n  get glyphLevelCap() {\r\n    switch (this.currentStage) {\r\n      case EFFARIG_STAGES.INFINITY:\r\n        return 100;\r\n      case EFFARIG_STAGES.ETERNITY:\r\n        return 1500;\r\n      case EFFARIG_STAGES.REALITY:\r\n      default:\r\n        return 2000;\r\n    }\r\n  },\r\n  get glyphEffectAmount() {\r\n    const genEffectBitmask = Glyphs.activeWithoutCompanion\r\n      .filter(g => generatedTypes.includes(g.type))\r\n      .reduce((prev, curr) => prev | curr.effects, 0);\r\n    const nongenEffectBitmask = Glyphs.activeWithoutCompanion\r\n      .filter(g => !generatedTypes.includes(g.type))\r\n      .reduce((prev, curr) => prev | curr.effects, 0);\r\n    return countValuesFromBitmask(genEffectBitmask) + countValuesFromBitmask(nongenEffectBitmask);\r\n  },\r\n  get shardsGained() {\r\n    if (!TeresaUnlocks.effarig.canBeApplied) return 0;\r\n    return Math.floor(Math.pow(Currency.eternityPoints.exponent / 7500, this.glyphEffectAmount)) *\r\n      AlchemyResource.effarig.effectValue;\r\n  },\r\n  get maxRarityBoost() {\r\n    return 5 * Math.log10(Math.log10(Currency.relicShards.value + 10));\r\n  },\r\n  nerfFactor(power) {\r\n    let c;\r\n    switch (this.currentStage) {\r\n      case EFFARIG_STAGES.INFINITY:\r\n        c = 1500;\r\n        break;\r\n      case EFFARIG_STAGES.ETERNITY:\r\n        c = 29.29;\r\n        break;\r\n      case EFFARIG_STAGES.REALITY:\r\n      default:\r\n        c = 25;\r\n        break;\r\n    }\r\n    return 3 * (1 - c / (c + Math.sqrt(power.pLog10())));\r\n  },\r\n  get tickDilation() {\r\n    return 0.7 + 0.1 * this.nerfFactor(Currency.timeShards.value);\r\n  },\r\n  get multDilation() {\r\n    return 0.25 + 0.25 * this.nerfFactor(Currency.infinityPower.value);\r\n  },\r\n  get tickspeed() {\r\n    const base = 3 + Tickspeed.baseValue.reciprocal().log10();\r\n    return Decimal.pow10(Math.pow(base, this.tickDilation)).reciprocal();\r\n  },\r\n  multiplier(mult) {\r\n    const base = new Decimal(mult).pLog10();\r\n    return Decimal.pow10(Math.pow(base, this.multDilation));\r\n  },\r\n  get bonusRG() {\r\n    // Will return 0 if Effarig Infinity is uncompleted\r\n    return Math.floor(replicantiCap().pLog10() / LOG10_MAX_VALUE - 1);\r\n  },\r\n  quotes: Quotes.effarig,\r\n  symbol: \"Ï˜\"\r\n};\r\n\r\nclass EffarigUnlockState extends BitUpgradeState {\r\n  get bits() { return player.celestials.effarig.unlockBits; }\r\n  set bits(value) { player.celestials.effarig.unlockBits = value; }\r\n\r\n  get cost() {\r\n    return this.config.cost;\r\n  }\r\n\r\n  get isEffectActive() {\r\n    return !Pelle.isDisabled(\"effarig\");\r\n  }\r\n\r\n  purchase() {\r\n    if (this.isUnlocked || !Currency.relicShards.purchase(this.cost)) return;\r\n    this.unlock();\r\n    this.config.onPurchased?.();\r\n  }\r\n}\r\n\r\nexport const EffarigUnlock = mapGameDataToObject(\r\n  GameDatabase.celestials.effarig.unlocks,\r\n  config => new EffarigUnlockState(config)\r\n);\r\n\r\nEventHub.logic.on(GAME_EVENT.TAB_CHANGED, () => {\r\n  if (Tab.celestials.effarig.isOpen) Effarig.quotes.initial.show();\r\n});\r\n\r\nEventHub.logic.on(GAME_EVENT.BIG_CRUNCH_BEFORE, () => {\r\n  if (!Effarig.isRunning) return;\r\n  Effarig.quotes.completeInfinity.show();\r\n});\r\n\r\nEventHub.logic.on(GAME_EVENT.ETERNITY_RESET_BEFORE, () => {\r\n  if (!Effarig.isRunning) return;\r\n  Effarig.quotes.completeEternity.show();\r\n});\r\n"]},"metadata":{},"sourceType":"module"}