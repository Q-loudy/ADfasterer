{"ast":null,"code":"import DescriptionDisplay from \"@/components/DescriptionDisplay\";\nimport EffectDisplay from \"@/components/EffectDisplay\";\nimport HintText from \"@/components/HintText\";\nimport TimeStudyButton from \"./TimeStudyButton\";\nexport default {\n  name: \"NormalTimeStudy\",\n  components: {\n    DescriptionDisplay,\n    EffectDisplay,\n    HintText,\n    TimeStudyButton\n  },\n  props: {\n    setup: {\n      type: Object,\n      required: true\n    }\n  },\n  data: () => ({\n    showCost: true,\n    showSTCost: false\n  }),\n  computed: {\n    study() {\n      return this.setup.study;\n    },\n\n    hintText() {\n      const id = this.study.id;\n      if (!this.setup.path) return id;\n      const pathEntry = NormalTimeStudies.pathList.find(p => p.path === this.setup.path);\n      return `${id} ${pathEntry.name}`;\n    },\n\n    isUseless() {\n      return Pelle.uselessTimeStudies.includes(this.study.id) && Pelle.isDoomed;\n    }\n\n  },\n  methods: {\n    update() {\n      this.showCost = this.study.id !== 192 || !Enslaved.isRunning; // We don't show ST cost if purchased because the first 1-2 of each \"set\" won't actually cost ST. There's no\n      // particularly sensible way to accurately display the actual ST spent other than tracing through buy order\n      // of all current studies for every study, and even then it looks odd in practice because then a few studies\n      // appear more expensive simply due to buy order.\n\n      this.showSTCost = VUnlocks.vAchievementUnlock.isUnlocked && !TimeStudy(this.study.id).isBought && TimeStudy(this.study.id).costsST() && !Pelle.isDoomed;\n    }\n\n  }\n};","map":{"version":3,"sources":["NormalTimeStudy.vue"],"names":[],"mappings":"AACA,OAAA,kBAAA,MAAA,iCAAA;AACA,OAAA,aAAA,MAAA,4BAAA;AACA,OAAA,QAAA,MAAA,uBAAA;AACA,OAAA,eAAA,MAAA,mBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,iBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,kBADA;AAEA,IAAA,aAFA;AAGA,IAAA,QAHA;AAIA,IAAA;AAJA,GAFA;AAQA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GARA;AAcA,EAAA,IAAA,EAAA,OAAA;AACA,IAAA,QAAA,EAAA,IADA;AAEA,IAAA,UAAA,EAAA;AAFA,GAAA,CAdA;AAkBA,EAAA,QAAA,EAAA;AACA,IAAA,KAAA,GAAA;AACA,aAAA,KAAA,KAAA,CAAA,KAAA;AACA,KAHA;;AAIA,IAAA,QAAA,GAAA;AACA,YAAA,EAAA,GAAA,KAAA,KAAA,CAAA,EAAA;AACA,UAAA,CAAA,KAAA,KAAA,CAAA,IAAA,EAAA,OAAA,EAAA;AACA,YAAA,SAAA,GAAA,iBAAA,CAAA,QAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAAA,CAAA,IAAA,KAAA,KAAA,KAAA,CAAA,IAAA,CAAA;AACA,aAAA,GAAA,EAAA,IAAA,SAAA,CAAA,IAAA,EAAA;AACA,KATA;;AAUA,IAAA,SAAA,GAAA;AACA,aAAA,KAAA,CAAA,kBAAA,CAAA,QAAA,CAAA,KAAA,KAAA,CAAA,EAAA,KAAA,KAAA,CAAA,QAAA;AACA;;AAZA,GAlBA;AAgCA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,QAAA,GAAA,KAAA,KAAA,CAAA,EAAA,KAAA,GAAA,IAAA,CAAA,QAAA,CAAA,SAAA,CADA,CAEA;AACA;AACA;AACA;;AACA,WAAA,UAAA,GAAA,QAAA,CAAA,kBAAA,CAAA,UAAA,IAAA,CAAA,SAAA,CAAA,KAAA,KAAA,CAAA,EAAA,CAAA,CAAA,QAAA,IACA,SAAA,CAAA,KAAA,KAAA,CAAA,EAAA,CAAA,CAAA,OAAA,EADA,IACA,CAAA,KAAA,CAAA,QADA;AAEA;;AATA;AAhCA,CAAA","sourcesContent":["<script>\r\nimport DescriptionDisplay from \"@/components/DescriptionDisplay\";\r\nimport EffectDisplay from \"@/components/EffectDisplay\";\r\nimport HintText from \"@/components/HintText\";\r\nimport TimeStudyButton from \"./TimeStudyButton\";\r\n\r\nexport default {\r\n  name: \"NormalTimeStudy\",\r\n  components: {\r\n    DescriptionDisplay,\r\n    EffectDisplay,\r\n    HintText,\r\n    TimeStudyButton\r\n  },\r\n  props: {\r\n    setup: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data: () => ({\r\n    showCost: true,\r\n    showSTCost: false\r\n  }),\r\n  computed: {\r\n    study() {\r\n      return this.setup.study;\r\n    },\r\n    hintText() {\r\n      const id = this.study.id;\r\n      if (!this.setup.path) return id;\r\n      const pathEntry = NormalTimeStudies.pathList.find(p => p.path === this.setup.path);\r\n      return `${id} ${pathEntry.name}`;\r\n    },\r\n    isUseless() {\r\n      return Pelle.uselessTimeStudies.includes(this.study.id) && Pelle.isDoomed;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.showCost = this.study.id !== 192 || !Enslaved.isRunning;\r\n      // We don't show ST cost if purchased because the first 1-2 of each \"set\" won't actually cost ST. There's no\r\n      // particularly sensible way to accurately display the actual ST spent other than tracing through buy order\r\n      // of all current studies for every study, and even then it looks odd in practice because then a few studies\r\n      // appear more expensive simply due to buy order.\r\n      this.showSTCost = VUnlocks.vAchievementUnlock.isUnlocked && !TimeStudy(this.study.id).isBought &&\r\n        TimeStudy(this.study.id).costsST() && !Pelle.isDoomed;\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <TimeStudyButton\r\n    :setup=\"setup\"\r\n    :show-cost=\"showCost\"\r\n    :show-st-cost=\"showSTCost\"\r\n  >\r\n    <HintText\r\n      type=\"studies\"\r\n      class=\"l-hint-text--time-study\"\r\n    >\r\n      {{ hintText }}\r\n    </HintText>\r\n    <span :class=\"{ 'o-pelle-disabled': isUseless }\">\r\n      <DescriptionDisplay\r\n        :config=\"study.config\"\r\n      />\r\n      <EffectDisplay\r\n        br\r\n        :config=\"study.config\"\r\n      />\r\n    </span>\r\n  </TimeStudyButton>\r\n</template>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/time-studies"},"metadata":{},"sourceType":"module"}