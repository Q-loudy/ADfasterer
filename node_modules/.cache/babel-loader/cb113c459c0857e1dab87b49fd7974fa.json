{"ast":null,"code":"import \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport ModalWrapper from \"@/components/modals/ModalWrapper\";\nimport PrimaryButton from \"@/components/PrimaryButton\";\nexport default {\n  name: \"RealityGlyphCreationModal\",\n  components: {\n    ModalWrapper,\n    PrimaryButton\n  },\n\n  data() {\n    return {\n      isDoomed: false,\n      realityGlyphLevel: 0,\n      // This contains an array where each entry is an array looking like [4000, \"realitygalaxies\"]\n      possibleEffects: []\n    };\n  },\n\n  methods: {\n    update() {\n      this.isDoomed = Pelle.isDoomed;\n      this.realityGlyphLevel = AlchemyResource.reality.effectValue;\n      const realityEffectConfigs = GlyphEffects.all.filter(eff => eff.glyphTypes.includes(\"reality\")).sort((a, b) => a.bitmaskIndex - b.bitmaskIndex);\n      const minRealityEffectIndex = realityEffectConfigs.map(cfg => cfg.bitmaskIndex).min();\n      this.possibleEffects = realityEffectConfigs.map(cfg => [realityGlyphEffectLevelThresholds[cfg.bitmaskIndex - minRealityEffectIndex], cfg.id]);\n    },\n\n    createRealityGlyph() {\n      if (GameCache.glyphInventorySpace.value === 0) {\n        Modal.message.show(\"No available inventory space; Sacrifice some Glyphs to free up space.\", {\n          closeEvent: GAME_EVENT.GLYPHS_CHANGED\n        });\n        return;\n      }\n\n      Glyphs.addToInventory(GlyphGenerator.realityGlyph(this.realityGlyphLevel));\n      AlchemyResource.reality.amount = 0;\n      player.reality.glyphs.createdRealityGlyph = true;\n      this.emitClose();\n    },\n\n    formatGlyphEffect(effect) {\n      if (this.realityGlyphLevel < effect[0]) return `(Requires Glyph level ${formatInt(effect[0])})`;\n      const config = GlyphEffects[effect[1]];\n      const value = config.effect(this.realityGlyphLevel, rarityToStrength(100));\n      const effectTemplate = config.singleDesc;\n      return effectTemplate.replace(\"{value}\", config.formatEffect(value));\n    }\n\n  }\n};","map":{"version":3,"sources":["RealityGlyphCreationModal.vue"],"names":[],"mappings":";;;AACA,OAAA,YAAA,MAAA,kCAAA;AACA,OAAA,aAAA,MAAA,4BAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,2BADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,YADA;AAEA,IAAA;AAFA,GAFA;;AAMA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,KADA;AAEA,MAAA,iBAAA,EAAA,CAFA;AAGA;AACA,MAAA,eAAA,EAAA;AAJA,KAAA;AAMA,GAbA;;AAcA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,QAAA,GAAA,KAAA,CAAA,QAAA;AACA,WAAA,iBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,WAAA;AACA,YAAA,oBAAA,GAAA,YAAA,CAAA,GAAA,CACA,MADA,CACA,GAAA,IAAA,GAAA,CAAA,UAAA,CAAA,QAAA,CAAA,SAAA,CADA,EAEA,IAFA,CAEA,CAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAAA,YAAA,GAAA,CAAA,CAAA,YAFA,CAAA;AAGA,YAAA,qBAAA,GAAA,oBAAA,CAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,YAAA,EAAA,GAAA,EAAA;AACA,WAAA,eAAA,GAAA,oBAAA,CACA,GADA,CACA,GAAA,IAAA,CAAA,iCAAA,CAAA,GAAA,CAAA,YAAA,GAAA,qBAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CADA,CAAA;AAEA,KAVA;;AAWA,IAAA,kBAAA,GAAA;AACA,UAAA,SAAA,CAAA,mBAAA,CAAA,KAAA,KAAA,CAAA,EAAA;AACA,QAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA,uEAAA,EACA;AAAA,UAAA,UAAA,EAAA,UAAA,CAAA;AAAA,SADA;AAEA;AACA;;AACA,MAAA,MAAA,CAAA,cAAA,CAAA,cAAA,CAAA,YAAA,CAAA,KAAA,iBAAA,CAAA;AACA,MAAA,eAAA,CAAA,OAAA,CAAA,MAAA,GAAA,CAAA;AACA,MAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,mBAAA,GAAA,IAAA;AACA,WAAA,SAAA;AACA,KArBA;;AAsBA,IAAA,iBAAA,CAAA,MAAA,EAAA;AACA,UAAA,KAAA,iBAAA,GAAA,MAAA,CAAA,CAAA,CAAA,EAAA,OAAA,yBAAA,SAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,GAAA;AACA,YAAA,MAAA,GAAA,YAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA;AACA,YAAA,KAAA,GAAA,MAAA,CAAA,MAAA,CAAA,KAAA,iBAAA,EAAA,gBAAA,CAAA,GAAA,CAAA,CAAA;AACA,YAAA,cAAA,GAAA,MAAA,CAAA,UAAA;AACA,aAAA,cAAA,CAAA,OAAA,CAAA,SAAA,EAAA,MAAA,CAAA,YAAA,CAAA,KAAA,CAAA,CAAA;AACA;;AA5BA;AAdA,CAAA","sourcesContent":["<script>\r\nimport ModalWrapper from \"@/components/modals/ModalWrapper\";\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\n\r\nexport default {\r\n  name: \"RealityGlyphCreationModal\",\r\n  components: {\r\n    ModalWrapper,\r\n    PrimaryButton\r\n  },\r\n  data() {\r\n    return {\r\n      isDoomed: false,\r\n      realityGlyphLevel: 0,\r\n      // This contains an array where each entry is an array looking like [4000, \"realitygalaxies\"]\r\n      possibleEffects: [],\r\n    };\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isDoomed = Pelle.isDoomed;\r\n      this.realityGlyphLevel = AlchemyResource.reality.effectValue;\r\n      const realityEffectConfigs = GlyphEffects.all\r\n        .filter(eff => eff.glyphTypes.includes(\"reality\"))\r\n        .sort((a, b) => a.bitmaskIndex - b.bitmaskIndex);\r\n      const minRealityEffectIndex = realityEffectConfigs.map(cfg => cfg.bitmaskIndex).min();\r\n      this.possibleEffects = realityEffectConfigs\r\n        .map(cfg => [realityGlyphEffectLevelThresholds[cfg.bitmaskIndex - minRealityEffectIndex], cfg.id]);\r\n    },\r\n    createRealityGlyph() {\r\n      if (GameCache.glyphInventorySpace.value === 0) {\r\n        Modal.message.show(\"No available inventory space; Sacrifice some Glyphs to free up space.\",\r\n          { closeEvent: GAME_EVENT.GLYPHS_CHANGED });\r\n        return;\r\n      }\r\n      Glyphs.addToInventory(GlyphGenerator.realityGlyph(this.realityGlyphLevel));\r\n      AlchemyResource.reality.amount = 0;\r\n      player.reality.glyphs.createdRealityGlyph = true;\r\n      this.emitClose();\r\n    },\r\n    formatGlyphEffect(effect) {\r\n      if (this.realityGlyphLevel < effect[0]) return `(Requires Glyph level ${formatInt(effect[0])})`;\r\n      const config = GlyphEffects[effect[1]];\r\n      const value = config.effect(this.realityGlyphLevel, rarityToStrength(100));\r\n      const effectTemplate = config.singleDesc;\r\n      return effectTemplate.replace(\"{value}\", config.formatEffect(value));\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapper>\r\n    <template #header>\r\n      Reality Glyph Creation\r\n    </template>\r\n    <div class=\"c-reality-glyph-creation\">\r\n      <div>\r\n        Create a level {{ formatInt(realityGlyphLevel) }} Reality Glyph.\r\n        Rarity will always be {{ formatPercents(1) }} and\r\n        level scales on your current Reality Resource amount (which is all consumed). All other Alchemy Resources will\r\n        be unaffected. Reality Glyphs have unique effects, some of which are only available with higher level Glyphs.\r\n        Reality Glyphs can also be sacrificed to increase all Memory Chunk gain. Like Effarig Glyphs,\r\n        you cannot equip more than one at the same time.\r\n      </div>\r\n      <div class=\"o-available-effects-container\">\r\n        <div class=\"o-available-effects\">\r\n          Available Effects:\r\n        </div>\r\n        <div\r\n          v-for=\"(effect, index) in possibleEffects\"\r\n          :key=\"index\"\r\n        >\r\n          {{ formatGlyphEffect(effect) }}\r\n        </div>\r\n      </div>\r\n      <PrimaryButton\r\n        v-if=\"isDoomed\"\r\n        :enabled=\"false\"\r\n      >\r\n        You cannot create Reality Glyphs while Doomed\r\n      </PrimaryButton>\r\n      <PrimaryButton\r\n        v-else-if=\"realityGlyphLevel !== 0\"\r\n        @click=\"createRealityGlyph\"\r\n      >\r\n        Create a Reality Glyph!\r\n      </PrimaryButton>\r\n      <PrimaryButton\r\n        v-else\r\n        :enabled=\"false\"\r\n      >\r\n        Reality Glyph level must be higher than {{ formatInt(0) }}\r\n      </PrimaryButton>\r\n    </div>\r\n  </ModalWrapper>\r\n</template>\r\n\r\n<style scoped>\r\n.o-available-effects-container {\r\n  margin: 1.5rem 0 2rem;\r\n}\r\n\r\n.o-available-effects {\r\n  font-weight: bold;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/modals"},"metadata":{},"sourceType":"module"}