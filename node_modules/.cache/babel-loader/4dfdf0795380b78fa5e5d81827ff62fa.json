{"ast":null,"code":"import GenericDimensionRowText from \"@/components/GenericDimensionRowText\";\nimport PrimaryButton from \"@/components/PrimaryButton\";\nimport PrimaryToggleButton from \"@/components/PrimaryToggleButton\";\nexport default {\n  name: \"ClassicTimeDimensionRow\",\n  components: {\n    GenericDimensionRowText,\n    PrimaryButton,\n    PrimaryToggleButton\n  },\n  props: {\n    tier: {\n      type: Number,\n      required: true\n    },\n    areAutobuyersUnlocked: {\n      type: Boolean,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      isUnlocked: false,\n      isCapped: false,\n      multiplier: new Decimal(0),\n      amount: new Decimal(0),\n      bought: 0,\n      rateOfChange: new Decimal(0),\n      cost: new Decimal(0),\n      isAvailableForPurchase: false,\n      isAutobuyerOn: false,\n      requirementReached: false,\n      realityUnlocked: false,\n      showTTCost: false,\n      ttCost: 0,\n      ttGen: new Decimal(),\n      currTT: new Decimal()\n    };\n  },\n\n  computed: {\n    shiftDown() {\n      return ui.view.shiftDown;\n    },\n\n    name() {\n      return `${TimeDimension(this.tier).shortDisplayName} Time Dimension`;\n    },\n\n    buttonContents() {\n      if (this.showTTCost) return this.formattedTTCost;\n      return this.formattedEPCost;\n    },\n\n    tooltipContents() {\n      if (this.showTTCost) return `${this.formattedEPCost}<br>${this.timeEstimate}`;\n      if (this.isCapped) return `Nameless prevents the purchase of more than ${format(1)} Time Dimension`;\n      return `Purchased ${quantifyInt(\"time\", this.bought)}`;\n    },\n\n    showRow() {\n      return this.realityUnlocked || this.isUnlocked || this.requirementReached;\n    },\n\n    formattedTTCost() {\n      return `Unlock: ${format(this.ttCost)} TT`;\n    },\n\n    formattedEPCost() {\n      return this.isCapped ? \"Capped\" : `${this.showCostTitle ? \"Cost: \" : \"\"}${format(this.cost, 2)} EP`;\n    },\n\n    hasLongText() {\n      return this.buttonContents.length > 20;\n    },\n\n    showCostTitle() {\n      return this.cost.exponent < 1e6;\n    },\n\n    timeEstimate() {\n      if (!this.showTTCost || this.ttGen.eq(0)) return \"\";\n      const time = Decimal.sub(this.ttCost, this.currTT).dividedBy(this.ttGen);\n      return time.gt(0) ? `Enough TT in ${TimeSpan.fromSeconds(time.toNumber()).toStringShort()}` : \"\";\n    }\n\n  },\n  watch: {\n    isAutobuyerOn(newValue) {\n      Autobuyer.timeDimension(this.tier).isActive = newValue;\n    }\n\n  },\n  methods: {\n    update() {\n      const tier = this.tier;\n      const dimension = TimeDimension(tier);\n      this.isCapped = Enslaved.isRunning && dimension.bought > 0;\n      this.isUnlocked = dimension.isUnlocked;\n      this.multiplier.copyFrom(dimension.multiplier);\n      this.amount.copyFrom(dimension.amount);\n      this.bought = dimension.bought;\n\n      if (tier < 8) {\n        this.rateOfChange.copyFrom(dimension.rateOfChange);\n      }\n\n      this.cost.copyFrom(dimension.cost);\n      this.isAvailableForPurchase = dimension.isAvailableForPurchase;\n\n      if (!this.isUnlocked) {\n        this.isAvailableForPurchase = dimension.requirementReached;\n      }\n\n      this.requirementReached = dimension.requirementReached;\n      this.isAutobuyerOn = Autobuyer.timeDimension(this.tier).isActive;\n      this.realityUnlocked = PlayerProgress.realityUnlocked();\n      this.showTTCost = !this.isUnlocked && !this.shiftDown;\n      if (this.tier > 4) this.ttCost = TimeStudy.timeDimension(this.tier).cost;\n      this.currTT.copyFrom(Currency.timeTheorems.value);\n      this.ttGen.copyFrom(getTTPerSecond().times(getGameSpeedupFactor()));\n    },\n\n    buyTimeDimension() {\n      if (!this.isUnlocked) {\n        TimeDimension(this.tier).tryUnlock();\n        return;\n      }\n\n      buySingleTimeDimension(this.tier);\n    },\n\n    buyMaxTimeDimension() {\n      buyMaxTimeDimension(this.tier);\n    }\n\n  }\n};","map":{"version":3,"sources":["ClassicTimeDimensionRow.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport GenericDimensionRowText from \"@/components/GenericDimensionRowText\";\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\nimport PrimaryToggleButton from \"@/components/PrimaryToggleButton\";\r\n\r\nexport default {\r\n  name: \"ClassicTimeDimensionRow\",\r\n  components: {\r\n    GenericDimensionRowText,\r\n    PrimaryButton,\r\n    PrimaryToggleButton\r\n  },\r\n  props: {\r\n    tier: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    areAutobuyersUnlocked: {\r\n      type: Boolean,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isUnlocked: false,\r\n      isCapped: false,\r\n      multiplier: new Decimal(0),\r\n      amount: new Decimal(0),\r\n      bought: 0,\r\n      rateOfChange: new Decimal(0),\r\n      cost: new Decimal(0),\r\n      isAvailableForPurchase: false,\r\n      isAutobuyerOn: false,\r\n      requirementReached: false,\r\n      realityUnlocked: false,\r\n      showTTCost: false,\r\n      ttCost: 0,\r\n      ttGen: new Decimal(),\r\n      currTT: new Decimal(),\r\n    };\r\n  },\r\n  computed: {\r\n    shiftDown() {\r\n      return ui.view.shiftDown;\r\n    },\r\n    name() {\r\n      return `${TimeDimension(this.tier).shortDisplayName} Time Dimension`;\r\n    },\r\n    buttonContents() {\r\n      if (this.showTTCost) return this.formattedTTCost;\r\n      return this.formattedEPCost;\r\n    },\r\n    tooltipContents() {\r\n      if (this.showTTCost) return `${this.formattedEPCost}<br>${this.timeEstimate}`;\r\n      if (this.isCapped) return `Nameless prevents the purchase of more than ${format(1)} Time Dimension`;\r\n      return `Purchased ${quantifyInt(\"time\", this.bought)}`;\r\n    },\r\n    showRow() {\r\n      return this.realityUnlocked || this.isUnlocked || this.requirementReached;\r\n    },\r\n    formattedTTCost() {\r\n      return `Unlock: ${format(this.ttCost)} TT`;\r\n    },\r\n    formattedEPCost() {\r\n      return this.isCapped ? \"Capped\" : `${this.showCostTitle ? \"Cost: \" : \"\"}${format(this.cost, 2)} EP`;\r\n    },\r\n    hasLongText() {\r\n      return this.buttonContents.length > 20;\r\n    },\r\n    showCostTitle() {\r\n      return this.cost.exponent < 1e6;\r\n    },\r\n    timeEstimate() {\r\n      if (!this.showTTCost || this.ttGen.eq(0)) return \"\";\r\n      const time = Decimal.sub(this.ttCost, this.currTT).dividedBy(this.ttGen);\r\n      return time.gt(0) ? `Enough TT in ${TimeSpan.fromSeconds(time.toNumber()).toStringShort()}` : \"\";\r\n    }\r\n  },\r\n  watch: {\r\n    isAutobuyerOn(newValue) {\r\n      Autobuyer.timeDimension(this.tier).isActive = newValue;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      const tier = this.tier;\r\n      const dimension = TimeDimension(tier);\r\n      this.isCapped = Enslaved.isRunning && dimension.bought > 0;\r\n      this.isUnlocked = dimension.isUnlocked;\r\n      this.multiplier.copyFrom(dimension.multiplier);\r\n      this.amount.copyFrom(dimension.amount);\r\n      this.bought = dimension.bought;\r\n      if (tier < 8) {\r\n        this.rateOfChange.copyFrom(dimension.rateOfChange);\r\n      }\r\n      this.cost.copyFrom(dimension.cost);\r\n      this.isAvailableForPurchase = dimension.isAvailableForPurchase;\r\n      if (!this.isUnlocked) {\r\n        this.isAvailableForPurchase = dimension.requirementReached;\r\n      }\r\n      this.requirementReached = dimension.requirementReached;\r\n      this.isAutobuyerOn = Autobuyer.timeDimension(this.tier).isActive;\r\n      this.realityUnlocked = PlayerProgress.realityUnlocked();\r\n      this.showTTCost = !this.isUnlocked && !this.shiftDown;\r\n      if (this.tier > 4) this.ttCost = TimeStudy.timeDimension(this.tier).cost;\r\n      this.currTT.copyFrom(Currency.timeTheorems.value);\r\n      this.ttGen.copyFrom(getTTPerSecond().times(getGameSpeedupFactor()));\r\n    },\r\n    buyTimeDimension() {\r\n      if (!this.isUnlocked) {\r\n        TimeDimension(this.tier).tryUnlock();\r\n        return;\r\n      }\r\n      buySingleTimeDimension(this.tier);\r\n    },\r\n    buyMaxTimeDimension() {\r\n      buyMaxTimeDimension(this.tier);\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    v-show=\"showRow\"\r\n    class=\"c-dimension-row l-dimension-single-row\"\r\n    :class=\"{ 'c-dim-row--not-reached': !isUnlocked && !requirementReached }\"\r\n  >\r\n    <GenericDimensionRowText\r\n      :tier=\"tier\"\r\n      :name=\"name\"\r\n      :multiplier-text=\"formatX(multiplier, 2, 1)\"\r\n      :amount-text=\"format(amount, 2)\"\r\n      :rate=\"rateOfChange\"\r\n    />\r\n    <div class=\"l-dim-row-multi-button-container\">\r\n      <PrimaryButton\r\n        :enabled=\"isAvailableForPurchase && !isCapped\"\r\n        class=\"o-primary-btn--buy-td o-primary-btn--buy-dim c-dim-tooltip-container\"\r\n        :class=\"{ 'l-dim-row-small-text': hasLongText }\"\r\n        @click=\"buyTimeDimension\"\r\n      >\r\n        {{ buttonContents }}\r\n        <div class=\"c-dim-purchase-count-tooltip\">\r\n          <span v-html=\"tooltipContents\" />\r\n        </div>\r\n      </PrimaryButton>\r\n      <PrimaryToggleButton\r\n        v-if=\"areAutobuyersUnlocked\"\r\n        v-model=\"isAutobuyerOn\"\r\n        class=\"o-primary-btn--buy-td-auto\"\r\n        label=\"Auto:\"\r\n      />\r\n      <PrimaryButton\r\n        v-else\r\n        :enabled=\"isAvailableForPurchase && !isCapped\"\r\n        class=\"o-primary-btn--buy-td-auto\"\r\n        @click=\"buyMaxTimeDimension\"\r\n      >\r\n        Buy Max\r\n      </PrimaryButton>\r\n    </div>\r\n  </div>\r\n</template>\r\n"],"sourceRoot":"src/components/tabs/time-dimensions"},"metadata":{},"sourceType":"module"}