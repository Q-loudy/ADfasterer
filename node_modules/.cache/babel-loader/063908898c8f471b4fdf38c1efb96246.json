{"ast":null,"code":"// This component was mainly created to solve the z-index problem on PelleRiftBar milestone hovering\n// Because apparently making the z-index of PelleStrike change with its expanded/contracted state is bad.\n// As such it may not be perfectly generalised. Changes should be made to generalise it more.\nexport default {\n  name: \"CustomizeableTooltip\",\n  props: {\n    tooltipContentStyle: {\n      type: Object,\n      required: false,\n      default: () => ({})\n    },\n    tooltipArrowStyle: {\n      type: Object,\n      required: false,\n      default: () => ({})\n    },\n    left: {\n      type: String,\n      required: false,\n      default: \"\"\n    },\n    top: {\n      type: String,\n      required: false,\n      default: \"\"\n    },\n    right: {\n      type: String,\n      required: false,\n      default: \"\"\n    },\n    bottom: {\n      type: String,\n      required: false,\n      default: \"\"\n    },\n    contentClass: {\n      type: [Object, String],\n      required: false,\n      default: \"\"\n    },\n    tooltipClass: {\n      type: [Object, String],\n      required: false,\n      default: \"\"\n    },\n    mode: {\n      type: String,\n      required: false,\n      default: \"top\"\n    },\n    show: {\n      type: Boolean,\n      required: false\n    }\n  },\n\n  data() {\n    return {\n      hovering: false,\n      mainContent: null,\n      isDarkTheme: false\n    };\n  },\n\n  computed: {\n    positionStyle() {\n      return {\n        left: this.left,\n        top: this.top,\n        right: this.right,\n        bottom: this.bottom\n      };\n    },\n\n    tooltipType() {\n      return `c-tooltip--${this.mode}`;\n    },\n\n    contentTransform() {\n      const axis = this.mode === \"top\" || this.mode === \"bottom\" ? \"X\" : \"Y\";\n      return `translate${axis}(${this.showNegativeSign(axis)}50%)`;\n    },\n\n    tooltipTransform() {\n      switch (this.mode) {\n        case \"top\":\n          return `translate(${this.showNegativeSign(\"X\")}50%, -100%)`;\n\n        case \"bottom\":\n          return `translate(${this.showNegativeSign(\"X\")}50%, 100%)`;\n\n        case \"right\":\n          return `translate(100%, ${this.showNegativeSign(\"Y\")}50%)`;\n\n        case \"left\":\n          return `translate(-100%, ${this.showNegativeSign(\"Y\")}50%)`;\n\n        default:\n          return \"\";\n      }\n    },\n\n    showTooltip() {\n      return this.show || this.hovering;\n    },\n\n    // Manual light-dark differentiation instead of just slapping on a .s-base--dark .c-tooltip is needed\n    // to minimise specificity to make the custom class specify more styles\n    tooltipContentLightDarkClass() {\n      return this.isDarkTheme ? \"c-tooltip-content--dark\" : \"\";\n    },\n\n    tooltipArrowLightDarkClass() {\n      return this.isDarkTheme ? \"c-tooltip-arrow--dark\" : \"\";\n    },\n\n    tooltipInternalClass() {\n      return {\n        \"c-tooltip-show\": this.showTooltip,\n        [this.tooltipType]: true\n      };\n    },\n\n    tooltipContentClass() {\n      return [this.tooltipInternalClass, this.tooltipClass, this.tooltipContentLightDarkClass];\n    },\n\n    tooltipArrowClass() {\n      return [this.tooltipInternalClass, this.tooltipArrowLightDarkClass];\n    }\n\n  },\n  methods: {\n    update() {\n      this.isDarkTheme = Theme.current().isDark();\n    },\n\n    showNegativeSign(axis) {\n      if (axis === \"X\") {\n        return this.left ? \"-\" : \"\";\n      }\n\n      return this.top ? \"-\" : \"\";\n    }\n\n  }\n};","map":{"version":3,"sources":["CustomizeableTooltip.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\n// This component was mainly created to solve the z-index problem on PelleRiftBar milestone hovering\r\n// Because apparently making the z-index of PelleStrike change with its expanded/contracted state is bad.\r\n// As such it may not be perfectly generalised. Changes should be made to generalise it more.\r\nexport default {\r\n  name: \"CustomizeableTooltip\",\r\n  props: {\r\n    tooltipContentStyle: {\r\n      type: Object,\r\n      required: false,\r\n      default: () => ({})\r\n    },\r\n    tooltipArrowStyle: {\r\n      type: Object,\r\n      required: false,\r\n      default: () => ({})\r\n    },\r\n    left: {\r\n      type: String,\r\n      required: false,\r\n      default: \"\"\r\n    },\r\n    top: {\r\n      type: String,\r\n      required: false,\r\n      default: \"\"\r\n    },\r\n    right: {\r\n      type: String,\r\n      required: false,\r\n      default: \"\"\r\n    },\r\n    bottom: {\r\n      type: String,\r\n      required: false,\r\n      default: \"\"\r\n    },\r\n    contentClass: {\r\n      type: [Object, String],\r\n      required: false,\r\n      default: \"\"\r\n    },\r\n    tooltipClass: {\r\n      type: [Object, String],\r\n      required: false,\r\n      default: \"\"\r\n    },\r\n    mode: {\r\n      type: String,\r\n      required: false,\r\n      default: \"top\"\r\n    },\r\n    show: {\r\n      type: Boolean,\r\n      required: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      hovering: false,\r\n      mainContent: null,\r\n      isDarkTheme: false\r\n    };\r\n  },\r\n  computed: {\r\n    positionStyle() {\r\n      return {\r\n        left: this.left,\r\n        top: this.top,\r\n        right: this.right,\r\n        bottom: this.bottom\r\n      };\r\n    },\r\n    tooltipType() {\r\n      return `c-tooltip--${this.mode}`;\r\n    },\r\n    contentTransform() {\r\n      const axis = this.mode === \"top\" || this.mode === \"bottom\" ? \"X\" : \"Y\";\r\n      return `translate${axis}(${this.showNegativeSign(axis)}50%)`;\r\n    },\r\n    tooltipTransform() {\r\n      switch (this.mode) {\r\n        case \"top\":\r\n          return `translate(${this.showNegativeSign(\"X\")}50%, -100%)`;\r\n        case \"bottom\":\r\n          return `translate(${this.showNegativeSign(\"X\")}50%, 100%)`;\r\n        case \"right\":\r\n          return `translate(100%, ${this.showNegativeSign(\"Y\")}50%)`;\r\n        case \"left\":\r\n          return `translate(-100%, ${this.showNegativeSign(\"Y\")}50%)`;\r\n        default:\r\n          return \"\";\r\n      }\r\n    },\r\n    showTooltip() {\r\n      return this.show || this.hovering;\r\n    },\r\n    // Manual light-dark differentiation instead of just slapping on a .s-base--dark .c-tooltip is needed\r\n    // to minimise specificity to make the custom class specify more styles\r\n    tooltipContentLightDarkClass() {\r\n      return this.isDarkTheme ? \"c-tooltip-content--dark\" : \"\";\r\n    },\r\n    tooltipArrowLightDarkClass() {\r\n      return this.isDarkTheme ? \"c-tooltip-arrow--dark\" : \"\";\r\n    },\r\n    tooltipInternalClass() {\r\n      return {\r\n        \"c-tooltip-show\": this.showTooltip,\r\n        [this.tooltipType]: true\r\n      };\r\n    },\r\n    tooltipContentClass() {\r\n      return [\r\n        this.tooltipInternalClass,\r\n        this.tooltipClass,\r\n        this.tooltipContentLightDarkClass\r\n      ];\r\n    },\r\n    tooltipArrowClass() {\r\n      return [\r\n        this.tooltipInternalClass,\r\n        this.tooltipArrowLightDarkClass\r\n      ];\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isDarkTheme = Theme.current().isDark();\r\n    },\r\n    showNegativeSign(axis) {\r\n      if (axis === \"X\") {\r\n        return this.left ? \"-\" : \"\";\r\n      }\r\n      return this.top ? \"-\" : \"\";\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-custom-tooltip\">\r\n    <div\r\n      class=\"c-main-content\"\r\n      :class=\"contentClass\"\r\n      :style=\"{ ...positionStyle, transform: contentTransform }\"\r\n      @mouseenter=\"hovering = true\"\r\n      @mouseleave=\"hovering = false\"\r\n    >\r\n      <slot name=\"mainContent\" />\r\n    </div>\r\n    <div\r\n      class=\"c-tooltip-content\"\r\n      :class=\"tooltipContentClass\"\r\n      :style=\"[tooltipContentStyle, positionStyle, { transform: tooltipTransform }]\"\r\n    >\r\n      <slot name=\"tooltipContent\" />\r\n    </div>\r\n    <div\r\n      class=\"c-tooltip-arrow\"\r\n      :class=\"tooltipArrowClass\"\r\n      :style=\"[tooltipArrowStyle, positionStyle, { transform: tooltipTransform }]\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.l-custom-tooltip {\r\n  display: inline-block;\r\n  position: static;\r\n}\r\n\r\n.c-main-content {\r\n  position: absolute;\r\n}\r\n\r\n/* c-tooltip-content styles in styles.css to make way for custom class colour styling */\r\n</style>\r\n"],"sourceRoot":"src/components"},"metadata":{},"sourceType":"module"}