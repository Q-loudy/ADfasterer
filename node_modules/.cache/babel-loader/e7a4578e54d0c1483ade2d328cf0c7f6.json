{"ast":null,"code":"import GlyphComponent from \"@/components/GlyphComponent\";\nimport PrimaryButton from \"@/components/PrimaryButton\";\nexport default {\n  name: \"SingleGlyphCustomzationPanel\",\n  components: {\n    GlyphComponent,\n    PrimaryButton\n  },\n\n  data() {\n    return {\n      glyphID: -1,\n      isVisible: true\n    };\n  },\n\n  computed: {\n    glyph() {\n      if (this.glyphID === -1) return null;\n      const g = Glyphs.findById(this.glyphID);\n      return {\n        type: g.type,\n        level: g.level,\n        strength: g.strength,\n        effects: g.effects,\n        color: g.color,\n        symbol: g.symbol,\n        cosmetic: g.cosmetic\n      };\n    },\n\n    typeCosmetic() {\n      const changes = [];\n      if (GlyphAppearanceHandler.symbolMap[this.glyph.type]) changes.push(\"Symbol\");\n      if (GlyphAppearanceHandler.colorMap[this.glyph.type]) changes.push(\"Color\");\n      if (changes.length === 0) return \"None\";\n      return changes.join(\"/\");\n    },\n\n    specialCosmetic() {\n      if (this.glyph.cosmetic) return this.glyph.cosmetic.capitalize();\n      const changes = [];\n      if (this.glyph.symbol) changes.push(\"Symbol\");\n      if (this.glyph.color) changes.push(\"Color\");\n      if (changes.length === 0) return \"None\";\n      return changes.join(\"/\");\n    }\n\n  },\n\n  created() {\n    // Whenever the inventory changes, this glyph might not exist afterwards\n    EventHub.logic.on(GAME_EVENT.GLYPHS_CHANGED, () => {\n      this.glyphID = -1;\n      this.$recompute(\"glyph\");\n    });\n    EventHub.logic.on(GAME_EVENT.GLYPH_VISUAL_CHANGE, () => {\n      this.$recompute(\"glyph\");\n    });\n  },\n\n  methods: {\n    update() {\n      this.isVisible = player.reality.glyphs.cosmetics.active && (GlyphAppearanceHandler.availableTypes.length > 0 || CosmeticGlyphTypes.list.some(t => t.isCosmetic && t.isUnlocked()));\n    },\n\n    dragover(event) {\n      if (!event.dataTransfer.types.includes(GLYPH_MIME_TYPE)) return;\n      event.preventDefault();\n    },\n\n    drop(event) {\n      if (!event.dataTransfer.types.includes(GLYPH_MIME_TYPE)) return;\n      const id = parseInt(event.dataTransfer.getData(GLYPH_MIME_TYPE), 10);\n      if (isNaN(id)) return;\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\n      this.glyphID = id;\n      this.$recompute(\"glyph\");\n    },\n\n    openModal() {\n      Modal.singleGlyphAppearance.show({\n        glyphId: this.glyphID\n      });\n    }\n\n  }\n};","map":{"version":3,"sources":["SingleGlyphCustomzationPanel.vue"],"names":[],"mappings":"AACA,OAAA,cAAA,MAAA,6BAAA;AACA,OAAA,aAAA,MAAA,4BAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,8BADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,cADA;AAEA,IAAA;AAFA,GAFA;;AAMA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,OAAA,EAAA,CAAA,CADA;AAEA,MAAA,SAAA,EAAA;AAFA,KAAA;AAIA,GAXA;;AAYA,EAAA,QAAA,EAAA;AACA,IAAA,KAAA,GAAA;AACA,UAAA,KAAA,OAAA,KAAA,CAAA,CAAA,EAAA,OAAA,IAAA;AACA,YAAA,CAAA,GAAA,MAAA,CAAA,QAAA,CAAA,KAAA,OAAA,CAAA;AACA,aAAA;AACA,QAAA,IAAA,EAAA,CAAA,CAAA,IADA;AAEA,QAAA,KAAA,EAAA,CAAA,CAAA,KAFA;AAGA,QAAA,QAAA,EAAA,CAAA,CAAA,QAHA;AAIA,QAAA,OAAA,EAAA,CAAA,CAAA,OAJA;AAKA,QAAA,KAAA,EAAA,CAAA,CAAA,KALA;AAMA,QAAA,MAAA,EAAA,CAAA,CAAA,MANA;AAOA,QAAA,QAAA,EAAA,CAAA,CAAA;AAPA,OAAA;AASA,KAbA;;AAcA,IAAA,YAAA,GAAA;AACA,YAAA,OAAA,GAAA,EAAA;AACA,UAAA,sBAAA,CAAA,SAAA,CAAA,KAAA,KAAA,CAAA,IAAA,CAAA,EAAA,OAAA,CAAA,IAAA,CAAA,QAAA;AACA,UAAA,sBAAA,CAAA,QAAA,CAAA,KAAA,KAAA,CAAA,IAAA,CAAA,EAAA,OAAA,CAAA,IAAA,CAAA,OAAA;AACA,UAAA,OAAA,CAAA,MAAA,KAAA,CAAA,EAAA,OAAA,MAAA;AACA,aAAA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA;AACA,KApBA;;AAqBA,IAAA,eAAA,GAAA;AACA,UAAA,KAAA,KAAA,CAAA,QAAA,EAAA,OAAA,KAAA,KAAA,CAAA,QAAA,CAAA,UAAA,EAAA;AACA,YAAA,OAAA,GAAA,EAAA;AACA,UAAA,KAAA,KAAA,CAAA,MAAA,EAAA,OAAA,CAAA,IAAA,CAAA,QAAA;AACA,UAAA,KAAA,KAAA,CAAA,KAAA,EAAA,OAAA,CAAA,IAAA,CAAA,OAAA;AACA,UAAA,OAAA,CAAA,MAAA,KAAA,CAAA,EAAA,OAAA,MAAA;AACA,aAAA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA;AACA;;AA5BA,GAZA;;AA0CA,EAAA,OAAA,GAAA;AACA;AACA,IAAA,QAAA,CAAA,KAAA,CAAA,EAAA,CAAA,UAAA,CAAA,cAAA,EAAA,MAAA;AACA,WAAA,OAAA,GAAA,CAAA,CAAA;AACA,WAAA,UAAA,CAAA,OAAA;AACA,KAHA;AAIA,IAAA,QAAA,CAAA,KAAA,CAAA,EAAA,CAAA,UAAA,CAAA,mBAAA,EAAA,MAAA;AACA,WAAA,UAAA,CAAA,OAAA;AACA,KAFA;AAGA,GAnDA;;AAoDA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,SAAA,GAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,SAAA,CAAA,MAAA,KAAA,sBAAA,CAAA,cAAA,CAAA,MAAA,GAAA,CAAA,IACA,kBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAAA,CAAA,UAAA,IAAA,CAAA,CAAA,UAAA,EAAA,CADA,CAAA;AAEA,KAJA;;AAKA,IAAA,QAAA,CAAA,KAAA,EAAA;AACA,UAAA,CAAA,KAAA,CAAA,YAAA,CAAA,KAAA,CAAA,QAAA,CAAA,eAAA,CAAA,EAAA;AACA,MAAA,KAAA,CAAA,cAAA;AACA,KARA;;AASA,IAAA,IAAA,CAAA,KAAA,EAAA;AACA,UAAA,CAAA,KAAA,CAAA,YAAA,CAAA,KAAA,CAAA,QAAA,CAAA,eAAA,CAAA,EAAA;AACA,YAAA,EAAA,GAAA,QAAA,CAAA,KAAA,CAAA,YAAA,CAAA,OAAA,CAAA,eAAA,CAAA,EAAA,EAAA,CAAA;AACA,UAAA,KAAA,CAAA,EAAA,CAAA,EAAA;AACA,MAAA,QAAA,CAAA,QAAA,CAAA,UAAA,CAAA,mBAAA;AACA,WAAA,OAAA,GAAA,EAAA;AACA,WAAA,UAAA,CAAA,OAAA;AACA,KAhBA;;AAiBA,IAAA,SAAA,GAAA;AACA,MAAA,KAAA,CAAA,qBAAA,CAAA,IAAA,CAAA;AAAA,QAAA,OAAA,EAAA,KAAA;AAAA,OAAA;AACA;;AAnBA;AApDA,CAAA","sourcesContent":["<script>\r\nimport GlyphComponent from \"@/components/GlyphComponent\";\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\n\r\nexport default {\r\n  name: \"SingleGlyphCustomzationPanel\",\r\n  components: {\r\n    GlyphComponent,\r\n    PrimaryButton\r\n  },\r\n  data() {\r\n    return {\r\n      glyphID: -1,\r\n      isVisible: true,\r\n    };\r\n  },\r\n  computed: {\r\n    glyph() {\r\n      if (this.glyphID === -1) return null;\r\n      const g = Glyphs.findById(this.glyphID);\r\n      return {\r\n        type: g.type,\r\n        level: g.level,\r\n        strength: g.strength,\r\n        effects: g.effects,\r\n        color: g.color,\r\n        symbol: g.symbol,\r\n        cosmetic: g.cosmetic,\r\n      };\r\n    },\r\n    typeCosmetic() {\r\n      const changes = [];\r\n      if (GlyphAppearanceHandler.symbolMap[this.glyph.type]) changes.push(\"Symbol\");\r\n      if (GlyphAppearanceHandler.colorMap[this.glyph.type]) changes.push(\"Color\");\r\n      if (changes.length === 0) return \"None\";\r\n      return changes.join(\"/\");\r\n    },\r\n    specialCosmetic() {\r\n      if (this.glyph.cosmetic) return this.glyph.cosmetic.capitalize();\r\n      const changes = [];\r\n      if (this.glyph.symbol) changes.push(\"Symbol\");\r\n      if (this.glyph.color) changes.push(\"Color\");\r\n      if (changes.length === 0) return \"None\";\r\n      return changes.join(\"/\");\r\n    }\r\n  },\r\n  created() {\r\n    // Whenever the inventory changes, this glyph might not exist afterwards\r\n    EventHub.logic.on(GAME_EVENT.GLYPHS_CHANGED, () => {\r\n      this.glyphID = -1;\r\n      this.$recompute(\"glyph\");\r\n    });\r\n    EventHub.logic.on(GAME_EVENT.GLYPH_VISUAL_CHANGE, () => {\r\n      this.$recompute(\"glyph\");\r\n    });\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isVisible = player.reality.glyphs.cosmetics.active && (GlyphAppearanceHandler.availableTypes.length > 0 ||\r\n        CosmeticGlyphTypes.list.some(t => t.isCosmetic && t.isUnlocked()));\r\n    },\r\n    dragover(event) {\r\n      if (!event.dataTransfer.types.includes(GLYPH_MIME_TYPE)) return;\r\n      event.preventDefault();\r\n    },\r\n    drop(event) {\r\n      if (!event.dataTransfer.types.includes(GLYPH_MIME_TYPE)) return;\r\n      const id = parseInt(event.dataTransfer.getData(GLYPH_MIME_TYPE), 10);\r\n      if (isNaN(id)) return;\r\n      EventHub.dispatch(GAME_EVENT.GLYPH_VISUAL_CHANGE);\r\n      this.glyphID = id;\r\n      this.$recompute(\"glyph\");\r\n    },\r\n    openModal() {\r\n      Modal.singleGlyphAppearance.show({ glyphId: this.glyphID });\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    v-if=\"isVisible\"\r\n    class=\"c-single-glyph-cosmetic\"\r\n    @dragover=\"dragover\"\r\n    @drop=\"drop\"\r\n  >\r\n    <div\r\n      v-if=\"glyph\"\r\n      class=\"c-glyph-info\"\r\n    >\r\n      <div class=\"c-glyph-info-section\">\r\n        <GlyphComponent\r\n          :glyph=\"glyph\"\r\n          :flip-tooltip=\"true\"\r\n        />\r\n      </div>\r\n      <div class=\"c-glyph-info-section c-cosmetic-text\">\r\n        <u>Cosmetic Attributes</u>\r\n        Type: {{ glyph.type.capitalize() }}\r\n        <br>\r\n        All: {{ typeCosmetic }}\r\n        <br>\r\n        Single: {{ specialCosmetic }}\r\n      </div>\r\n      <div class=\"c-glyph-info-section\">\r\n        <PrimaryButton\r\n          class=\"o-primary-btn--subtab-option\"\r\n          @click=\"openModal\"\r\n        >\r\n          Customize!\r\n        </PrimaryButton>\r\n        <PrimaryButton\r\n          class=\"o-primary-btn--subtab-option\"\r\n          @click=\"glyphID = -1\"\r\n        >\r\n          Clear Box\r\n        </PrimaryButton>\r\n      </div>\r\n    </div>\r\n    <div v-else>\r\n      Drag a Glyph over this box to change its appearance! This will make a visual copy of it here,\r\n      but leave the actual Glyph itself in your inventory. Removing, gaining, or moving any Glyphs will clear this box.\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-single-glyph-cosmetic {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width: calc(100% - 1rem);\r\n  height: 8rem;\r\n  font-size: 1.2rem;\r\n  border: 0.1rem solid #b8b8b8;\r\n  border-radius: var(--var-border-radius, 0.5rem);\r\n  padding: 0.5rem;\r\n  margin-top: 1rem;\r\n  user-select: none;\r\n}\r\n\r\n.c-glyph-info {\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.c-glyph-info-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n  text-align: left;\r\n  margin: 1rem;\r\n}\r\n\r\n.c-cosmetic-text {\r\n  width: 18rem;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/glyphs"},"metadata":{},"sourceType":"module"}