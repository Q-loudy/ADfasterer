{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\n\nfunction predictableRandom(x) {\n  let start = Math.pow(x % 97, 4.3) * 232344573;\n  const a = 15485863;\n  const b = 521791;\n  start = start * a % b;\n\n  for (let i = 0; i < x * x % 90 + 90; i++) {\n    start = start * a % b;\n  }\n\n  return start / b;\n}\n\nfunction randomSymbol() {\n  return String.fromCharCode(Math.floor(Math.random() * 50) + 192);\n}\n\nexport default {\n  // Word cycling uses two diffrent effects to smoothly ease between words in the randomized set\n  // - The randomization effect eases in and out smoothly, with about 62% in the time in the middle being\n  //   completely unrandomized (randomCrossWords is passed frac <= 0). The randomization parameter goes well above 1\n  //   in order to have a good chance of properly randomizing the entire input in the middle\n  // - Near the \"edges\" (12% on each side) of each word's randomization time, it's blended with the previous or next\n  //   word. This mostly serves to smoothly ease between strings of different lengths, and only occurs between\n  //   strings which already have a high randomization fraction (frac > 1.3)\n  wordCycle(list, noBuffer = false) {\n    const len = list.length;\n    const tick = Math.floor(Date.now() / 250) % (len * 5);\n    const mod5 = Date.now() / 250 % (len * 5) % 5;\n    const largeTick = Math.floor(tick / 5);\n    let v = list[largeTick]; // Blend with adjacent words, in such a way that mod5 being 0 or 5 corresponds with a 0.5 blend parameter\n\n    if (mod5 < 0.6) {\n      v = this.blendWords(list[(largeTick + list.length - 1) % list.length], list[largeTick], (mod5 + 0.6) / 1.2);\n    } else if (mod5 > 4.4) {\n      v = this.blendWords(list[largeTick], list[(largeTick + 1) % list.length], (mod5 - 4.4) / 1.2);\n    }\n\n    v = this.randomCrossWords(v, 0.1 * Math.pow(mod5 - 2.5, 4) - 0.6);\n    if (noBuffer) return v;\n    const maxWordLen = Math.max(...list.map(x => x.length));\n    const bufferSpace = (maxWordLen - v.length) / 2; // Buffer the result with ALT+255 on either side to prevent the ui from twitching.\n    // Spaces do not work due to being automatically collapsed, and css fixing this causes other issues.\n\n    return \" \".repeat(Math.ceil(bufferSpace)) + v + \" \".repeat(Math.floor(bufferSpace));\n  },\n\n  // Note that while frac may appear to specify the proportion of letters randomized, it may end up being slightly less\n  // depending on the specific string length and random output sometimes giving outputs which aren't coprime\n  randomCrossWords(str, frac = 0.7) {\n    if (frac <= 0) return str;\n    const x = str.split(\"\");\n\n    for (let i = 0; i < x.length * frac; i++) {\n      const randomIndex = Math.floor(predictableRandom(Math.floor(Date.now() / 500) % 964372 + 1.618 * i) * x.length);\n      x[randomIndex] = randomSymbol();\n    }\n\n    return x.join(\"\");\n  },\n\n  // This should only be used on words which will end up being completely randomized, because the unscrambled appearance\n  // of the output may look bad. Blends two strings together to produce a string of intermediate length, taking a\n  // specifed fraction (param, 0 to 1) from the first word and the rest (1 - param) from the second\n  blendWords(first, second, param) {\n    if (param <= 0) return first;\n    if (param >= 1) return second;\n    return first.substring(0, first.length * (1 - param)) + second.substring(second.length * (1 - param), second.length);\n  }\n\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/word-shift.js"],"names":["predictableRandom","x","start","Math","pow","a","b","i","randomSymbol","String","fromCharCode","floor","random","wordCycle","list","noBuffer","len","length","tick","Date","now","mod5","largeTick","v","blendWords","randomCrossWords","maxWordLen","max","map","bufferSpace","repeat","ceil","str","frac","split","randomIndex","join","first","second","param","substring"],"mappings":"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","sourcesContent":["function predictableRandom(x) {\r\n  let start = Math.pow(x % 97, 4.3) * 232344573;\r\n  const a = 15485863;\r\n  const b = 521791;\r\n  start = (start * a) % b;\r\n  for (let i = 0; i < (x * x) % 90 + 90; i++) {\r\n    start = (start * a) % b;\r\n  }\r\n  return start / b;\r\n}\r\n\r\nfunction randomSymbol() {\r\n  return String.fromCharCode(Math.floor(Math.random() * 50) + 192);\r\n}\r\n\r\nexport default {\r\n  // Word cycling uses two diffrent effects to smoothly ease between words in the randomized set\r\n  // - The randomization effect eases in and out smoothly, with about 62% in the time in the middle being\r\n  //   completely unrandomized (randomCrossWords is passed frac <= 0). The randomization parameter goes well above 1\r\n  //   in order to have a good chance of properly randomizing the entire input in the middle\r\n  // - Near the \"edges\" (12% on each side) of each word's randomization time, it's blended with the previous or next\r\n  //   word. This mostly serves to smoothly ease between strings of different lengths, and only occurs between\r\n  //   strings which already have a high randomization fraction (frac > 1.3)\r\n  wordCycle(list, noBuffer = false) {\r\n    const len = list.length;\r\n    const tick = Math.floor(Date.now() / 250) % (len * 5);\r\n    const mod5 = ((Date.now() / 250) % (len * 5)) % 5;\r\n    const largeTick = Math.floor(tick / 5);\r\n    let v = list[largeTick];\r\n\r\n    // Blend with adjacent words, in such a way that mod5 being 0 or 5 corresponds with a 0.5 blend parameter\r\n    if (mod5 < 0.6) {\r\n      v = this.blendWords(list[(largeTick + list.length - 1) % list.length], list[largeTick], (mod5 + 0.6) / 1.2);\r\n    } else if (mod5 > 4.4) {\r\n      v = this.blendWords(list[largeTick], list[(largeTick + 1) % list.length], (mod5 - 4.4) / 1.2);\r\n    }\r\n\r\n    v = this.randomCrossWords(v, 0.1 * Math.pow(mod5 - 2.5, 4) - 0.6);\r\n    if (noBuffer) return v;\r\n\r\n    const maxWordLen = Math.max(...list.map(x => x.length));\r\n    const bufferSpace = (maxWordLen - v.length) / 2;\r\n\r\n    // Buffer the result with ALT+255 on either side to prevent the ui from twitching.\r\n    // Spaces do not work due to being automatically collapsed, and css fixing this causes other issues.\r\n    return \" \".repeat(Math.ceil(bufferSpace)) + v + \" \".repeat(Math.floor(bufferSpace));\r\n  },\r\n  // Note that while frac may appear to specify the proportion of letters randomized, it may end up being slightly less\r\n  // depending on the specific string length and random output sometimes giving outputs which aren't coprime\r\n  randomCrossWords(str, frac = 0.7) {\r\n    if (frac <= 0) return str;\r\n    const x = str.split(\"\");\r\n    for (let i = 0; i < x.length * frac; i++) {\r\n      const randomIndex = Math.floor(predictableRandom(Math.floor(Date.now() / 500) % 964372 + 1.618 * i) * x.length);\r\n      x[randomIndex] = randomSymbol();\r\n    }\r\n    return x.join(\"\");\r\n  },\r\n  // This should only be used on words which will end up being completely randomized, because the unscrambled appearance\r\n  // of the output may look bad. Blends two strings together to produce a string of intermediate length, taking a\r\n  // specifed fraction (param, 0 to 1) from the first word and the rest (1 - param) from the second\r\n  blendWords(first, second, param) {\r\n    if (param <= 0) return first;\r\n    if (param >= 1) return second;\r\n    return first.substring(0, first.length * (1 - param)) +\r\n      second.substring(second.length * (1 - param), second.length);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}