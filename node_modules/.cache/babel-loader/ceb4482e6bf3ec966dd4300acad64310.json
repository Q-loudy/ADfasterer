{"ast":null,"code":"import { TimeStudy } from \"./normal-time-study\";\nimport { TimeStudyState } from \"./time-studies\";\nexport class ECTimeStudyState extends TimeStudyState {\n  constructor(config) {\n    super(config, TIME_STUDY_TYPE.ETERNITY_CHALLENGE);\n    this.invalidateRequirement();\n  }\n\n  get isBought() {\n    return player.challenge.eternity.unlocked === this.id;\n  }\n\n  purchase(auto) {\n    if (GameEnd.creditsEverClosed) return false;\n    EternityChallenge(this.id).hasUnlocked = true;\n    const clickTime = Date.now();\n\n    if (this.isBought && player.challenge.eternity.current === 0 && !auto) {\n      // If it is bought and you aren't in a Eternity Challenge, check\n      if (clickTime - ui.lastClickTime < 750) {\n        // If you last clicked on it within 3/4ths of a second, enter them in or ask confirmation if they have that on\n        ui.lastClickTime = 0;\n        EternityChallenge(this.id).requestStart();\n      } else {\n        // Otherwise, record it for the next time they click\n        ui.lastClickTime = clickTime;\n      }\n    } else if (!this.isBought && this.canBeBought) {\n      // If you haven't bought it and can buy it, reset the time of click, and\n      // send you into the EC, deduct your resources, and move you to the EC tab if that isn't disabled\n      ui.lastClickTime = 0;\n      player.challenge.eternity.unlocked = this.id;\n\n      if (!auto) {\n        Tab.challenges.eternity.show();\n      }\n\n      player.challenge.eternity.requirementBits |= 1 << this.id;\n      Currency.timeTheorems.subtract(this.cost);\n      TimeStudyTree.commitToGameState([TimeStudy.eternityChallenge(this.id)]);\n      return true;\n    }\n\n    return false;\n  }\n\n  purchaseUntil() {\n    const studiesToBuy = [undefined, 171, 171, 171, 143, 42, 121, 111, 123, 151, 181, 181, 181]; // If the player shift clicks an EC study that is immediately buyable, we try to\n    // buy it first - in case buying studies up to that point renders it unaffordable.\n\n    this.purchase();\n    TimeStudyTree.commitToGameState(buyStudiesUntil(studiesToBuy[this.id], this.id)); // For EC 11 and 12, we can't choose between light and dark,\n    // but we can buy the 191/193\n\n    if (this.id === 11) {\n      TimeStudy(191).purchase();\n    } else if (this.id === 12) {\n      TimeStudy(193).purchase();\n    }\n\n    this.purchase();\n  }\n\n  get canBeBought() {\n    if (!this.isAffordable) {\n      return false;\n    }\n\n    if (player.challenge.eternity.unlocked !== 0) {\n      return false;\n    }\n\n    if (!this.config.requirement.some(s => TimeStudy(s).isBought)) {\n      return false;\n    }\n\n    return this.allSecondaryRequirementsMet;\n  }\n  /**\r\n   * @returns {EternityChallengeState}\r\n   */\n\n\n  get challenge() {\n    return EternityChallenge(this.id);\n  }\n\n  get requirementTotal() {\n    return this.config.secondary.required(this.challenge.completions);\n  }\n\n  get requirementCurrent() {\n    const current = this.config.secondary.current();\n\n    if (this.cachedCurrentRequirement === undefined) {\n      this.cachedCurrentRequirement = current;\n    } else if (typeof current === \"number\") {\n      this.cachedCurrentRequirement = Math.max(this.cachedCurrentRequirement, current);\n    } else {\n      this.cachedCurrentRequirement = this.cachedCurrentRequirement.clampMin(current);\n    }\n\n    return this.cachedCurrentRequirement;\n  }\n\n  get allSecondaryRequirementsMet() {\n    return Perk.studyECRequirement.isBought || !this.hasForbiddenStudies && this.isEntryGoalMet;\n  }\n\n  get hasForbiddenStudies() {\n    var _this$config$secondar;\n\n    return (_this$config$secondar = this.config.secondary.forbiddenStudies) === null || _this$config$secondar === void 0 ? void 0 : _this$config$secondar.some(s => TimeStudy(s).isBought);\n  }\n\n  get isEntryGoalMet() {\n    if (this.wasRequirementPreviouslyMet) return true;\n    if (this.config.secondary.forbiddenStudies) return true;\n    const current = this.requirementCurrent;\n    const total = this.requirementTotal;\n    return typeof current === \"number\" ? current >= total : current.gte(total);\n  }\n\n  get wasRequirementPreviouslyMet() {\n    if (this.id === 11 || this.id === 12) return false;\n    return (player.challenge.eternity.requirementBits & 1 << this.id) !== 0;\n  }\n\n  invalidateRequirement() {\n    this.cachedCurrentRequirement = undefined;\n  }\n\n}\nECTimeStudyState.studies = mapGameData(GameDatabase.eternity.timeStudies.ec, config => new ECTimeStudyState(config));\n/**\r\n * @param {number} id\r\n * @returns {ECTimeStudyState}\r\n */\n\nTimeStudy.eternityChallenge = function (id) {\n  return ECTimeStudyState.studies[id];\n};\n/**\r\n * @returns {ECTimeStudyState|undefined}\r\n */\n\n\nTimeStudy.eternityChallenge.current = function () {\n  return player.challenge.eternity.unlocked ? TimeStudy.eternityChallenge(player.challenge.eternity.unlocked) : undefined;\n};\n\nECTimeStudyState.invalidateCachedRequirements = function () {\n  ECTimeStudyState.studies.forEach(study => study.invalidateRequirement());\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/time-studies/ec-time-study.js"],"names":["TimeStudy","TimeStudyState","ECTimeStudyState","constructor","config","TIME_STUDY_TYPE","ETERNITY_CHALLENGE","invalidateRequirement","isBought","player","challenge","eternity","unlocked","id","purchase","auto","GameEnd","creditsEverClosed","EternityChallenge","hasUnlocked","clickTime","Date","now","current","ui","lastClickTime","requestStart","canBeBought","Tab","challenges","show","requirementBits","Currency","timeTheorems","subtract","cost","TimeStudyTree","commitToGameState","eternityChallenge","purchaseUntil","studiesToBuy","undefined","buyStudiesUntil","isAffordable","requirement","some","s","allSecondaryRequirementsMet","requirementTotal","secondary","required","completions","requirementCurrent","cachedCurrentRequirement","Math","max","clampMin","Perk","studyECRequirement","hasForbiddenStudies","isEntryGoalMet","forbiddenStudies","wasRequirementPreviouslyMet","total","gte","studies","mapGameData","GameDatabase","timeStudies","ec","invalidateCachedRequirements","forEach","study"],"mappings":"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","sourcesContent":["import { TimeStudy } from \"./normal-time-study\";\r\nimport { TimeStudyState } from \"./time-studies\";\r\n\r\nexport class ECTimeStudyState extends TimeStudyState {\r\n  constructor(config) {\r\n    super(config, TIME_STUDY_TYPE.ETERNITY_CHALLENGE);\r\n    this.invalidateRequirement();\r\n  }\r\n\r\n  get isBought() {\r\n    return player.challenge.eternity.unlocked === this.id;\r\n  }\r\n\r\n  purchase(auto) {\r\n    if (GameEnd.creditsEverClosed) return false;\r\n    EternityChallenge(this.id).hasUnlocked = true;\r\n    const clickTime = Date.now();\r\n\r\n    if (this.isBought && player.challenge.eternity.current === 0 && !auto) {\r\n      // If it is bought and you aren't in a Eternity Challenge, check\r\n      if (clickTime - ui.lastClickTime < 750) {\r\n        // If you last clicked on it within 3/4ths of a second, enter them in or ask confirmation if they have that on\r\n        ui.lastClickTime = 0;\r\n        EternityChallenge(this.id).requestStart();\r\n      } else {\r\n        // Otherwise, record it for the next time they click\r\n        ui.lastClickTime = clickTime;\r\n      }\r\n    } else if (!this.isBought && this.canBeBought) {\r\n      // If you haven't bought it and can buy it, reset the time of click, and\r\n      // send you into the EC, deduct your resources, and move you to the EC tab if that isn't disabled\r\n      ui.lastClickTime = 0;\r\n\r\n      player.challenge.eternity.unlocked = this.id;\r\n      if (!auto) {\r\n        Tab.challenges.eternity.show();\r\n      }\r\n      player.challenge.eternity.requirementBits |= 1 << this.id;\r\n      Currency.timeTheorems.subtract(this.cost);\r\n      TimeStudyTree.commitToGameState([TimeStudy.eternityChallenge(this.id)]);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  purchaseUntil() {\r\n    const studiesToBuy = [\r\n      undefined,\r\n      171, 171, 171,\r\n      143, 42, 121,\r\n      111, 123, 151,\r\n      181, 181, 181\r\n    ];\r\n    // If the player shift clicks an EC study that is immediately buyable, we try to\r\n    // buy it first - in case buying studies up to that point renders it unaffordable.\r\n    this.purchase();\r\n    TimeStudyTree.commitToGameState(buyStudiesUntil(studiesToBuy[this.id], this.id));\r\n    // For EC 11 and 12, we can't choose between light and dark,\r\n    // but we can buy the 191/193\r\n    if (this.id === 11) {\r\n      TimeStudy(191).purchase();\r\n    } else if (this.id === 12) {\r\n      TimeStudy(193).purchase();\r\n    }\r\n    this.purchase();\r\n  }\r\n\r\n  get canBeBought() {\r\n    if (!this.isAffordable) {\r\n      return false;\r\n    }\r\n    if (player.challenge.eternity.unlocked !== 0) {\r\n      return false;\r\n    }\r\n    if (!this.config.requirement.some(s => TimeStudy(s).isBought)) {\r\n      return false;\r\n    }\r\n    return this.allSecondaryRequirementsMet;\r\n  }\r\n\r\n  /**\r\n   * @returns {EternityChallengeState}\r\n   */\r\n  get challenge() {\r\n    return EternityChallenge(this.id);\r\n  }\r\n\r\n  get requirementTotal() {\r\n    return this.config.secondary.required(this.challenge.completions);\r\n  }\r\n\r\n  get requirementCurrent() {\r\n    const current = this.config.secondary.current();\r\n    if (this.cachedCurrentRequirement === undefined) {\r\n      this.cachedCurrentRequirement = current;\r\n    } else if (typeof current === \"number\") {\r\n      this.cachedCurrentRequirement = Math.max(this.cachedCurrentRequirement, current);\r\n    } else {\r\n      this.cachedCurrentRequirement = this.cachedCurrentRequirement.clampMin(current);\r\n    }\r\n    return this.cachedCurrentRequirement;\r\n  }\r\n\r\n  get allSecondaryRequirementsMet() {\r\n    return Perk.studyECRequirement.isBought || !this.hasForbiddenStudies && this.isEntryGoalMet;\r\n  }\r\n\r\n  get hasForbiddenStudies() {\r\n    return this.config.secondary.forbiddenStudies?.some(s => TimeStudy(s).isBought);\r\n  }\r\n\r\n  get isEntryGoalMet() {\r\n    if (this.wasRequirementPreviouslyMet) return true;\r\n    if (this.config.secondary.forbiddenStudies) return true;\r\n    const current = this.requirementCurrent;\r\n    const total = this.requirementTotal;\r\n    return typeof current === \"number\" ? current >= total : current.gte(total);\r\n  }\r\n\r\n  get wasRequirementPreviouslyMet() {\r\n    if (this.id === 11 || this.id === 12) return false;\r\n    return (player.challenge.eternity.requirementBits & (1 << this.id)) !== 0;\r\n  }\r\n\r\n  invalidateRequirement() {\r\n    this.cachedCurrentRequirement = undefined;\r\n  }\r\n}\r\n\r\nECTimeStudyState.studies = mapGameData(\r\n  GameDatabase.eternity.timeStudies.ec,\r\n  config => new ECTimeStudyState(config)\r\n);\r\n\r\n/**\r\n * @param {number} id\r\n * @returns {ECTimeStudyState}\r\n */\r\nTimeStudy.eternityChallenge = function(id) {\r\n  return ECTimeStudyState.studies[id];\r\n};\r\n\r\n/**\r\n * @returns {ECTimeStudyState|undefined}\r\n */\r\nTimeStudy.eternityChallenge.current = function() {\r\n  return player.challenge.eternity.unlocked\r\n    ? TimeStudy.eternityChallenge(player.challenge.eternity.unlocked)\r\n    : undefined;\r\n};\r\n\r\nECTimeStudyState.invalidateCachedRequirements = function() {\r\n  ECTimeStudyState.studies.forEach(study => study.invalidateRequirement());\r\n};\r\n"]},"metadata":{},"sourceType":"module"}