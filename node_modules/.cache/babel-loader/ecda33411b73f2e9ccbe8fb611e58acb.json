{"ast":null,"code":"import { svgRingPath } from \"./svg-ring-path\";\nexport default {\n  name: \"NodeOverlay\",\n  props: {\n    complete: {\n      type: Number,\n      required: true\n    },\n    position: {\n      type: Object,\n      required: true\n    },\n    legend: {\n      type: Object,\n      required: false,\n      default: undefined\n    },\n    ring: {\n      type: Object,\n      required: true\n    },\n    fill: {\n      type: String,\n      required: false,\n      default: undefined\n    },\n    alwaysShowLegend: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    forceLegend: {\n      type: Function,\n      required: false,\n      default: undefined\n    },\n    clickAction: {\n      type: Function,\n      required: false,\n      default: undefined\n    }\n  },\n\n  data() {\n    return {\n      legendLines: [],\n      hoverOverride: false\n    };\n  },\n\n  computed: {\n    LEGEND_FONT_SIZE: () => 16,\n\n    baseTransform() {\n      return this.position.asTranslate();\n    },\n\n    pathData() {\n      return svgRingPath(this.ring);\n    },\n\n    hasLegend() {\n      return Boolean(this.legend) && (!this.legend.hideWhenCompleted || this.complete < 1);\n    },\n\n    legendArrowPoints() {\n      const dir = Vector.unitFromDegrees(this.legend.angle);\n      const pts = [dir.times(this.ring.rMajor + 2)];\n      pts.push(pts[0].plus(dir.times(this.legend.diagonal)));\n      pts.push(pts[1].plus(Vector.horiz(this.legend.horizontal * Math.sign(dir.x))));\n      return pts;\n    },\n\n    legendArrowPointString() {\n      return this.legendArrowPoints.join(\" \");\n    },\n\n    legendTransform() {\n      const pts = this.legendArrowPoints;\n      const xDir = Math.sign(pts[2].x - pts[0].x);\n      return pts[2].plus(Vector.horiz(xDir * 4)).asTranslate();\n    },\n\n    legendTextAnchor() {\n      const angle = (this.legend.angle + 360) % 360;\n      return angle > 90 && angle < 270 ? \"end\" : \"start\";\n    },\n\n    nodeClass() {\n      return {\n        \"o-celestial-nav__force-hover\": this.hoverOverride,\n        \"o-celestial-nav__clickable\": this.clickAction !== undefined\n      };\n    }\n\n  },\n  methods: {\n    update() {\n      this.legendLines = this.getLines();\n      this.hoverOverride = this.alwaysShowLegend || this.forceLegend && this.forceLegend();\n    },\n\n    legendLineY(idx) {\n      const spacing = Math.round(this.LEGEND_FONT_SIZE * 1.25 / 2);\n      const num = this.legendLines.length;\n      return (2 * idx - (num - 1)) * spacing;\n    },\n\n    getLines() {\n      if (!this.legend) return null;\n      const data = typeof this.legend.text === \"function\" ? this.legend.text(this.complete) : this.legend.text;\n      return typeof data === \"string\" ? [data] : data;\n    }\n\n  }\n};","map":{"version":3,"sources":["NodeOverlay.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport { svgRingPath } from \"./svg-ring-path\";\r\n\r\nexport default {\r\n  name: \"NodeOverlay\",\r\n  props: {\r\n    complete: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    position: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    legend: {\r\n      type: Object,\r\n      required: false,\r\n      default: undefined\r\n    },\r\n    ring: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    fill: {\r\n      type: String,\r\n      required: false,\r\n      default: undefined\r\n    },\r\n    alwaysShowLegend: {\r\n      type: Boolean,\r\n      required: false,\r\n      default: false\r\n    },\r\n    forceLegend: {\r\n      type: Function,\r\n      required: false,\r\n      default: undefined\r\n    },\r\n    clickAction: {\r\n      type: Function,\r\n      required: false,\r\n      default: undefined\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      legendLines: [],\r\n      hoverOverride: false,\r\n    };\r\n  },\r\n  computed: {\r\n    LEGEND_FONT_SIZE: () => 16,\r\n    baseTransform() {\r\n      return this.position.asTranslate();\r\n    },\r\n    pathData() {\r\n      return svgRingPath(this.ring);\r\n    },\r\n    hasLegend() {\r\n      return Boolean(this.legend) && (!this.legend.hideWhenCompleted || this.complete < 1);\r\n    },\r\n    legendArrowPoints() {\r\n      const dir = Vector.unitFromDegrees(this.legend.angle);\r\n      const pts = [dir.times(this.ring.rMajor + 2)];\r\n      pts.push(pts[0].plus(dir.times(this.legend.diagonal)));\r\n      pts.push(pts[1].plus(Vector.horiz(this.legend.horizontal * Math.sign(dir.x))));\r\n      return pts;\r\n    },\r\n    legendArrowPointString() {\r\n      return this.legendArrowPoints.join(\" \");\r\n    },\r\n    legendTransform() {\r\n      const pts = this.legendArrowPoints;\r\n      const xDir = Math.sign(pts[2].x - pts[0].x);\r\n      return pts[2].plus(Vector.horiz(xDir * 4)).asTranslate();\r\n    },\r\n    legendTextAnchor() {\r\n      const angle = (this.legend.angle + 360) % 360;\r\n      return angle > 90 && angle < 270 ? \"end\" : \"start\";\r\n    },\r\n    nodeClass() {\r\n      return {\r\n        \"o-celestial-nav__force-hover\": this.hoverOverride,\r\n        \"o-celestial-nav__clickable\": this.clickAction !== undefined\r\n      };\r\n    },\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.legendLines = this.getLines();\r\n      this.hoverOverride = this.alwaysShowLegend || (this.forceLegend && this.forceLegend());\r\n    },\r\n    legendLineY(idx) {\r\n      const spacing = Math.round(this.LEGEND_FONT_SIZE * 1.25 / 2);\r\n      const num = this.legendLines.length;\r\n      return (2 * idx - (num - 1)) * spacing;\r\n    },\r\n    getLines() {\r\n      if (!this.legend) return null;\r\n      const data = typeof (this.legend.text) === \"function\"\r\n        ? this.legend.text(this.complete) : this.legend.text;\r\n      return typeof (data) === \"string\" ? [data] : data;\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <g\r\n    class=\"o-celestial-nav__hoverable\"\r\n    :class=\"nodeClass\"\r\n    :transform=\"baseTransform\"\r\n    v-on=\"clickAction ? { click: clickAction } : {}\"\r\n  >\r\n    <path\r\n      :d=\"pathData\"\r\n      class=\"o-celestial-nav__node-overlay\"\r\n    />\r\n    <g\r\n      v-if=\"hasLegend\"\r\n      class=\"tooltiptext\"\r\n    >\r\n      <polyline\r\n        :points=\"legendArrowPointString\"\r\n        class=\"o-celestial-nav__legend-arrow\"\r\n      />\r\n      <!-- The ring radii are adjusted slightly to offset the stroke outside the node -->\r\n      <path\r\n        :d=\"pathData\"\r\n        class=\"o-celestial-nav__legend-outline\"\r\n      />\r\n      <g :transform=\"legendTransform\">\r\n        <text\r\n          class=\"o-celestial-nav__legend-text\"\r\n          :text-anchor=\"legendTextAnchor\"\r\n          dominant-baseline=\"middle\"\r\n          :font-size=\"LEGEND_FONT_SIZE\"\r\n        >\r\n          <tspan\r\n            v-for=\"(line, idx) in legendLines\"\r\n            :key=\"idx\"\r\n            x=\"0\"\r\n            :y=\"legendLineY(idx)\"\r\n          >\r\n            {{ line }}\r\n          </tspan>\r\n        </text>\r\n      </g>\r\n    </g>\r\n  </g>\r\n</template>\r\n\r\n<style scoped>\r\n.o-celestial-nav__clickable {\r\n  cursor: pointer;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/celestial-navigation"},"metadata":{},"sourceType":"module"}