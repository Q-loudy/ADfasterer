{"ast":null,"code":"export default {\n  name: \"SelectedEffectToggle\",\n  props: {\n    effect: {\n      type: Object,\n      required: true\n    },\n    glyphType: {\n      type: String,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      isActive: false,\n      noExclude: false,\n      effarigSettings: {\n        effarigrm: false,\n        effarigglyph: false\n      }\n    };\n  },\n\n  computed: {\n    color() {\n      return GlyphAppearanceHandler.getBorderColor(this.glyphType);\n    },\n\n    description() {\n      return this.effect.genericDesc;\n    },\n\n    classObject() {\n      return this.isActive ? \"c-auto-sac-type-tab__effect-desc--active\" : \"c-auto-sac-type-tab__effect-desc--inactive\";\n    },\n\n    // This is hardcoded here since there is only one case ever, and that adding generic dynamic support to multiple\n    // pairs/groups of effects is both out of design scope and an unacceptable performance hit to amplified realities\n    exclusionTooltip() {\n      if (this.noExclude) return \"\";\n      const effarigSettings = this.effarigSettings;\n\n      if (effarigSettings.RM && effarigSettings.glyph && (this.effect.id === \"effarigrm\" || this.effect.id === \"effarigglyph\")) {\n        return \"RM multiplier and Glyph instability cannot occur together on the same Glyph!\";\n      }\n\n      if (this.effect.id === \"effarigrm\" && effarigSettings.glyph) {\n        return \"This effect is mutually exclusive with Glyph instability!\";\n      }\n\n      if (this.effect.id === \"effarigglyph\" && effarigSettings.RM) {\n        return \"This effect is mutually exclusive with RM multiplier!\";\n      }\n\n      return \"\";\n    },\n\n    isExcluded() {\n      return this.exclusionTooltip !== \"\";\n    },\n\n    effarigBits() {\n      const effectDB = GameDatabase.reality.glyphEffects;\n      return {\n        RM: effectDB.effarigrm.bitmaskIndex,\n        glyph: effectDB.effarigglyph.bitmaskIndex\n      };\n    }\n\n  },\n  methods: {\n    update() {\n      this.isActive = (AutoGlyphProcessor.types[this.glyphType].specifiedMask & 1 << this.effect.bitmaskIndex) !== 0;\n      const effarigMask = AutoGlyphProcessor.types.effarig.specifiedMask;\n      this.effarigSettings = {\n        RM: (effarigMask & 1 << this.effarigBits.RM) !== 0,\n        glyph: (effarigMask & 1 << this.effarigBits.glyph) !== 0\n      };\n      this.noExclude = Ra.unlocks.glyphEffectCount.canBeApplied;\n    },\n\n    toggleSelection() {\n      AutoGlyphProcessor.types[this.glyphType].specifiedMask ^= 1 << this.effect.bitmaskIndex;\n    },\n\n    setEffectCount(event) {\n      const inputValue = event.target.value;\n\n      if (!isNaN(inputValue)) {\n        this.autoSacrificeSettings.effectCount = Math.clamp(inputValue, 0, 8);\n      }\n    }\n\n  }\n};","map":{"version":3,"sources":["SelectedEffectToggle.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nexport default {\r\n  name: \"SelectedEffectToggle\",\r\n  props: {\r\n    effect: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    glyphType: {\r\n      type: String,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isActive: false,\r\n      noExclude: false,\r\n      effarigSettings: {\r\n        effarigrm: false,\r\n        effarigglyph: false\r\n      }\r\n    };\r\n  },\r\n  computed: {\r\n    color() {\r\n      return GlyphAppearanceHandler.getBorderColor(this.glyphType);\r\n    },\r\n    description() {\r\n      return this.effect.genericDesc;\r\n    },\r\n    classObject() {\r\n      return this.isActive ? \"c-auto-sac-type-tab__effect-desc--active\" : \"c-auto-sac-type-tab__effect-desc--inactive\";\r\n    },\r\n    // This is hardcoded here since there is only one case ever, and that adding generic dynamic support to multiple\r\n    // pairs/groups of effects is both out of design scope and an unacceptable performance hit to amplified realities\r\n    exclusionTooltip() {\r\n      if (this.noExclude) return \"\";\r\n\r\n      const effarigSettings = this.effarigSettings;\r\n      if (effarigSettings.RM && effarigSettings.glyph &&\r\n        (this.effect.id === \"effarigrm\" || this.effect.id === \"effarigglyph\")) {\r\n        return \"RM multiplier and Glyph instability cannot occur together on the same Glyph!\";\r\n      }\r\n      if (this.effect.id === \"effarigrm\" && effarigSettings.glyph) {\r\n        return \"This effect is mutually exclusive with Glyph instability!\";\r\n      }\r\n      if (this.effect.id === \"effarigglyph\" && effarigSettings.RM) {\r\n        return \"This effect is mutually exclusive with RM multiplier!\";\r\n      }\r\n      return \"\";\r\n    },\r\n    isExcluded() {\r\n      return this.exclusionTooltip !== \"\";\r\n    },\r\n    effarigBits() {\r\n      const effectDB = GameDatabase.reality.glyphEffects;\r\n      return {\r\n        RM: effectDB.effarigrm.bitmaskIndex,\r\n        glyph: effectDB.effarigglyph.bitmaskIndex,\r\n      };\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isActive = (AutoGlyphProcessor.types[this.glyphType].specifiedMask & (1 << this.effect.bitmaskIndex)) !== 0;\r\n      const effarigMask = AutoGlyphProcessor.types.effarig.specifiedMask;\r\n      this.effarigSettings = {\r\n        RM: (effarigMask & (1 << this.effarigBits.RM)) !== 0,\r\n        glyph: (effarigMask & (1 << this.effarigBits.glyph)) !== 0\r\n      };\r\n      this.noExclude = Ra.unlocks.glyphEffectCount.canBeApplied;\r\n    },\r\n    toggleSelection() {\r\n      AutoGlyphProcessor.types[this.glyphType].specifiedMask ^= 1 << this.effect.bitmaskIndex;\r\n    },\r\n    setEffectCount(event) {\r\n      const inputValue = event.target.value;\r\n      if (!isNaN(inputValue)) {\r\n        this.autoSacrificeSettings.effectCount = Math.clamp(inputValue, 0, 8);\r\n      }\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    v-tooltip=\"exclusionTooltip\"\r\n    :class=\"classObject\"\r\n    @click=\"toggleSelection()\"\r\n  >\r\n    <span>\r\n      <i\r\n        v-if=\"isExcluded\"\r\n        class=\"fas fa-exclamation l-dock l-dock-left\"\r\n      />\r\n      {{ description }}\r\n      <i\r\n        v-if=\"isExcluded\"\r\n        class=\"fas fa-exclamation l-dock l-dock-right\"\r\n      />\r\n    </span>\r\n    <i\r\n      v-if=\"isActive\"\r\n      class=\"fas fa-check c-selected-effect-toggle-indicator--active\"\r\n      :style=\"{ 'background-color': color }\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-selected-effect-toggle-indicator--active {\r\n  position: absolute;\r\n\r\n  /* -0.1rem = -1px, needed because CSS renders a black border between the check and the border of the selector\r\n  otherwise */\r\n  top: -0.1rem;\r\n  right: -0.1rem;\r\n  font-size: 1rem;\r\n  color: black;\r\n  text-shadow: none;\r\n  border-radius: 0 var(--var-border-radius, 0.4rem);\r\n  padding: 0.2rem;\r\n}\r\n\r\n.l-dock {\r\n  position: absolute;\r\n  top: 50%;\r\n  margin: 0 4rem;\r\n  transform: translateY(-50%);\r\n}\r\n\r\n.l-dock-left {\r\n  left: 0;\r\n}\r\n\r\n.l-dock-right {\r\n  right: 0;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/glyphs/sidebar"},"metadata":{},"sourceType":"module"}