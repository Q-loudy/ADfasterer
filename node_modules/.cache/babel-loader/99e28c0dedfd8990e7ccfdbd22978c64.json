{"ast":null,"code":"export const AutomatorPoints = {\n  get perks() {\n    return Perks.all.filter(p => p.automatorPoints);\n  },\n\n  // This also rejects rebuyables, where automatorPoints is undefined\n  get upgrades() {\n    return RealityUpgrades.all.filter(p => p.automatorPoints);\n  },\n\n  get pointsFromPerks() {\n    return this.perks.filter(p => p.isBought).map(p => p.automatorPoints).sum();\n  },\n\n  get pointsFromUpgrades() {\n    return this.upgrades.filter(p => p.isBought).map(p => p.automatorPoints).sum();\n  },\n\n  get pointsFromOther() {\n    return GameDatabase.reality.automator.otherAutomatorPoints.map(s => s.automatorPoints()).sum();\n  },\n\n  get totalPoints() {\n    return this.pointsFromPerks + this.pointsFromUpgrades + this.pointsFromOther;\n  },\n\n  get pointsForAutomator() {\n    return 100;\n  }\n\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/automator/automator-points.js"],"names":["AutomatorPoints","perks","Perks","all","filter","p","automatorPoints","upgrades","RealityUpgrades","pointsFromPerks","isBought","map","sum","pointsFromUpgrades","pointsFromOther","GameDatabase","reality","automator","otherAutomatorPoints","s","totalPoints","pointsForAutomator"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAG;AAC7B,MAAIC,KAAJ,GAAY;AACV,WAAOC,KAAK,CAACC,GAAN,CAAUC,MAAV,CAAiBC,CAAC,IAAIA,CAAC,CAACC,eAAxB,CAAP;AACD,GAH4B;;AAK7B;AACA,MAAIC,QAAJ,GAAe;AACb,WAAOC,eAAe,CAACL,GAAhB,CAAoBC,MAApB,CAA2BC,CAAC,IAAIA,CAAC,CAACC,eAAlC,CAAP;AACD,GAR4B;;AAU7B,MAAIG,eAAJ,GAAsB;AACpB,WAAO,KAAKR,KAAL,CACJG,MADI,CACGC,CAAC,IAAIA,CAAC,CAACK,QADV,EAEJC,GAFI,CAEAN,CAAC,IAAIA,CAAC,CAACC,eAFP,EAGJM,GAHI,EAAP;AAID,GAf4B;;AAiB7B,MAAIC,kBAAJ,GAAyB;AACvB,WAAO,KAAKN,QAAL,CACJH,MADI,CACGC,CAAC,IAAIA,CAAC,CAACK,QADV,EAEJC,GAFI,CAEAN,CAAC,IAAIA,CAAC,CAACC,eAFP,EAGJM,GAHI,EAAP;AAID,GAtB4B;;AAwB7B,MAAIE,eAAJ,GAAsB;AACpB,WAAOC,YAAY,CAACC,OAAb,CAAqBC,SAArB,CAA+BC,oBAA/B,CAAoDP,GAApD,CAAwDQ,CAAC,IAAIA,CAAC,CAACb,eAAF,EAA7D,EAAkFM,GAAlF,EAAP;AACD,GA1B4B;;AA4B7B,MAAIQ,WAAJ,GAAkB;AAChB,WAAO,KAAKX,eAAL,GAAuB,KAAKI,kBAA5B,GAAiD,KAAKC,eAA7D;AACD,GA9B4B;;AAgC7B,MAAIO,kBAAJ,GAAyB;AACvB,WAAO,GAAP;AACD;;AAlC4B,CAAxB","sourcesContent":["export const AutomatorPoints = {\r\n  get perks() {\r\n    return Perks.all.filter(p => p.automatorPoints);\r\n  },\r\n\r\n  // This also rejects rebuyables, where automatorPoints is undefined\r\n  get upgrades() {\r\n    return RealityUpgrades.all.filter(p => p.automatorPoints);\r\n  },\r\n\r\n  get pointsFromPerks() {\r\n    return this.perks\r\n      .filter(p => p.isBought)\r\n      .map(p => p.automatorPoints)\r\n      .sum();\r\n  },\r\n\r\n  get pointsFromUpgrades() {\r\n    return this.upgrades\r\n      .filter(p => p.isBought)\r\n      .map(p => p.automatorPoints)\r\n      .sum();\r\n  },\r\n\r\n  get pointsFromOther() {\r\n    return GameDatabase.reality.automator.otherAutomatorPoints.map(s => s.automatorPoints()).sum();\r\n  },\r\n\r\n  get totalPoints() {\r\n    return this.pointsFromPerks + this.pointsFromUpgrades + this.pointsFromOther;\r\n  },\r\n\r\n  get pointsForAutomator() {\r\n    return 100;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}