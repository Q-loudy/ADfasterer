{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport { Effect } from \"./effect\";\n/**\r\n * @abstract\r\n */\n\nexport class GameMechanicState extends Effect {\n  constructor(config) {\n    if (!config) {\n      throw new Error(\"Must specify config for GameMechanicState\");\n    }\n\n    super(config.effect, config.cap, config.effectCondition);\n    this._config = config;\n\n    if (config.effects !== undefined) {\n      this.effects = {};\n\n      for (const key in config.effects) {\n        const nested = config.effects[key];\n        let effect;\n\n        if (typeof nested === \"number\" || typeof nested === \"function\" || nested instanceof Decimal) {\n          effect = new Effect(nested);\n        } else {\n          effect = new Effect(nested.effect, nested.cap, nested.effectCondition);\n        }\n\n        Object.defineProperty(effect, \"isEffectActive\", {\n          configurable: false,\n          get: () => this.isEffectActive\n        });\n        this.effects[key] = effect;\n      }\n    }\n  }\n\n  get config() {\n    return this._config;\n  }\n\n  get id() {\n    return this.config.id;\n  }\n\n  registerEvents(events, callback) {\n    if (events === undefined) return;\n\n    for (const event of events instanceof Array ? events : [events]) {\n      EventHub.logic.on(event, callback, this);\n    }\n  }\n\n  static createAccessor(gameData) {\n    const index = mapGameData(gameData, config => new this(config));\n\n    const accessor = id => index[id];\n\n    accessor.index = index;\n    return accessor;\n  }\n\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/game-mechanics/game-mechanic.js"],"names":["Effect","GameMechanicState","constructor","config","Error","effect","cap","effectCondition","_config","effects","undefined","key","nested","Decimal","Object","defineProperty","configurable","get","isEffectActive","id","registerEvents","events","callback","event","Array","EventHub","logic","on","createAccessor","gameData","index","mapGameData","accessor"],"mappings":";AAAA,SAASA,MAAT,QAAuB,UAAvB;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,iBAAN,SAAgCD,MAAhC,CAAuC;AAC5CE,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,QAAI,CAACA,MAAL,EAAa;AACX,YAAM,IAAIC,KAAJ,CAAU,2CAAV,CAAN;AACD;;AACD,UAAMD,MAAM,CAACE,MAAb,EAAqBF,MAAM,CAACG,GAA5B,EAAiCH,MAAM,CAACI,eAAxC;AACA,SAAKC,OAAL,GAAeL,MAAf;;AACA,QAAIA,MAAM,CAACM,OAAP,KAAmBC,SAAvB,EAAkC;AAChC,WAAKD,OAAL,GAAe,EAAf;;AACA,WAAK,MAAME,GAAX,IAAkBR,MAAM,CAACM,OAAzB,EAAkC;AAChC,cAAMG,MAAM,GAAGT,MAAM,CAACM,OAAP,CAAeE,GAAf,CAAf;AACA,YAAIN,MAAJ;;AACA,YAAI,OAAOO,MAAP,KAAkB,QAAlB,IAA8B,OAAOA,MAAP,KAAkB,UAAhD,IAA8DA,MAAM,YAAYC,OAApF,EAA6F;AAC3FR,UAAAA,MAAM,GAAG,IAAIL,MAAJ,CAAWY,MAAX,CAAT;AACD,SAFD,MAEO;AACLP,UAAAA,MAAM,GAAG,IAAIL,MAAJ,CAAWY,MAAM,CAACP,MAAlB,EAA0BO,MAAM,CAACN,GAAjC,EAAsCM,MAAM,CAACL,eAA7C,CAAT;AACD;;AACDO,QAAAA,MAAM,CAACC,cAAP,CAAsBV,MAAtB,EAA8B,gBAA9B,EAAgD;AAC9CW,UAAAA,YAAY,EAAE,KADgC;AAE9CC,UAAAA,GAAG,EAAE,MAAM,KAAKC;AAF8B,SAAhD;AAIA,aAAKT,OAAL,CAAaE,GAAb,IAAoBN,MAApB;AACD;AACF;AACF;;AAES,MAANF,MAAM,GAAG;AACX,WAAO,KAAKK,OAAZ;AACD;;AAEK,MAAFW,EAAE,GAAG;AACP,WAAO,KAAKhB,MAAL,CAAYgB,EAAnB;AACD;;AAEDC,EAAAA,cAAc,CAACC,MAAD,EAASC,QAAT,EAAmB;AAC/B,QAAID,MAAM,KAAKX,SAAf,EAA0B;;AAC1B,SAAK,MAAMa,KAAX,IAAoBF,MAAM,YAAYG,KAAlB,GAA0BH,MAA1B,GAAmC,CAACA,MAAD,CAAvD,EAAiE;AAC/DI,MAAAA,QAAQ,CAACC,KAAT,CAAeC,EAAf,CAAkBJ,KAAlB,EAAyBD,QAAzB,EAAmC,IAAnC;AACD;AACF;;AAEoB,SAAdM,cAAc,CAACC,QAAD,EAAW;AAC9B,UAAMC,KAAK,GAAGC,WAAW,CAACF,QAAD,EAAW1B,MAAM,IAAI,IAAI,IAAJ,CAASA,MAAT,CAArB,CAAzB;;AACA,UAAM6B,QAAQ,GAAGb,EAAE,IAAIW,KAAK,CAACX,EAAD,CAA5B;;AACAa,IAAAA,QAAQ,CAACF,KAAT,GAAiBA,KAAjB;AACA,WAAOE,QAAP;AACD;;AA9C2C","sourcesContent":["import { Effect } from \"./effect\";\r\n\r\n/**\r\n * @abstract\r\n */\r\nexport class GameMechanicState extends Effect {\r\n  constructor(config) {\r\n    if (!config) {\r\n      throw new Error(\"Must specify config for GameMechanicState\");\r\n    }\r\n    super(config.effect, config.cap, config.effectCondition);\r\n    this._config = config;\r\n    if (config.effects !== undefined) {\r\n      this.effects = {};\r\n      for (const key in config.effects) {\r\n        const nested = config.effects[key];\r\n        let effect;\r\n        if (typeof nested === \"number\" || typeof nested === \"function\" || nested instanceof Decimal) {\r\n          effect = new Effect(nested);\r\n        } else {\r\n          effect = new Effect(nested.effect, nested.cap, nested.effectCondition);\r\n        }\r\n        Object.defineProperty(effect, \"isEffectActive\", {\r\n          configurable: false,\r\n          get: () => this.isEffectActive\r\n        });\r\n        this.effects[key] = effect;\r\n      }\r\n    }\r\n  }\r\n\r\n  get config() {\r\n    return this._config;\r\n  }\r\n\r\n  get id() {\r\n    return this.config.id;\r\n  }\r\n\r\n  registerEvents(events, callback) {\r\n    if (events === undefined) return;\r\n    for (const event of events instanceof Array ? events : [events]) {\r\n      EventHub.logic.on(event, callback, this);\r\n    }\r\n  }\r\n\r\n  static createAccessor(gameData) {\r\n    const index = mapGameData(gameData, config => new this(config));\r\n    const accessor = id => index[id];\r\n    accessor.index = index;\r\n    return accessor;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}