{"ast":null,"code":"import { DC } from \"./constants\";\nimport { deepmergeAll } from \"@/utility/deepmerge\";\nimport { GameMechanicState } from \"./game-mechanics\";\nexport function startEternityChallenge() {\n  initializeChallengeCompletions();\n  initializeResourcesAfterEternity();\n  resetInfinityRuns();\n  InfinityDimensions.fullReset();\n  Replicanti.reset();\n  resetChallengeStuff();\n  AntimatterDimensions.reset();\n  player.replicanti.galaxies = 0;\n  Currency.infinityPoints.reset();\n  InfinityDimensions.resetAmount();\n  player.records.bestInfinity.bestIPminEternity = DC.D0;\n  player.records.thisEternity.bestEPmin = DC.D0;\n  resetTimeDimensions();\n  resetTickspeed();\n  player.records.thisInfinity.maxAM = DC.D0;\n  player.records.thisEternity.maxAM = DC.D0;\n  Currency.antimatter.reset();\n  playerInfinityUpgradesOnReset();\n  AchievementTimers.marathon2.reset();\n  ECTimeStudyState.invalidateCachedRequirements();\n}\n\nclass EternityChallengeRewardState extends GameMechanicState {\n  constructor(config, challenge) {\n    const effect = config.effect;\n    const configCopy = deepmergeAll([{}, config]);\n\n    configCopy.effect = () => effect(challenge.completions);\n\n    super(configCopy);\n    this._challenge = challenge;\n  }\n\n  get isEffectActive() {\n    return this._challenge.completions > 0;\n  }\n\n}\n\nexport class EternityChallengeState extends GameMechanicState {\n  constructor(config) {\n    super(config);\n    this._fullId = `eterc${this.id}`;\n    this._reward = new EternityChallengeRewardState(config.reward, this);\n  }\n\n  get fullId() {\n    return this._fullId;\n  }\n\n  get isUnlocked() {\n    return player.challenge.eternity.unlocked === this.id;\n  }\n\n  get isRunning() {\n    return player.challenge.eternity.current === this.id;\n  }\n\n  get isEffectActive() {\n    return this.isRunning;\n  }\n\n  get hasUnlocked() {\n    return (player.reality.unlockedEC & 1 << this.id) !== 0;\n  }\n\n  set hasUnlocked(value) {\n    if (value) player.reality.unlockedEC |= 1 << this.id;\n  }\n\n  get completions() {\n    const completions = player.eternityChalls[this.fullId];\n    return completions === undefined ? 0 : completions;\n  }\n\n  set completions(value) {\n    player.eternityChalls[this.fullId] = Math.min(value, this.maxCompletions);\n  }\n\n  get maxCompletions() {\n    return Enslaved.isRunning && this.id === 1 ? 1000 : 5;\n  }\n\n  get remainingCompletions() {\n    return this.maxCompletions - this.completions;\n  }\n\n  get isFullyCompleted() {\n    return this.completions === this.maxCompletions;\n  }\n\n  get maxValidCompletions() {\n    if (this.id !== 4 && this.id !== 12) return this.maxCompletions;\n    let completions = this.completions;\n\n    while (completions < this.maxCompletions && this.isWithinRestrictionAtCompletions(completions)) {\n      completions++;\n    }\n\n    return completions;\n  }\n\n  get gainedCompletionStatus() {\n    const status = {\n      gainedCompletions: 0,\n      hasMoreCompletions: false,\n      totalCompletions: this.completions\n    };\n    if (this.isFullyCompleted) return status;\n\n    if (!Perk.studyECBulk.isBought) {\n      if (this.canBeCompleted) {\n        ++status.totalCompletions;\n        status.gainedCompletions = 1;\n      }\n\n      return status;\n    }\n\n    let totalCompletions = this.completionsAtIP(player.records.thisEternity.maxIP);\n    const maxValidCompletions = this.maxValidCompletions;\n\n    if (totalCompletions > maxValidCompletions) {\n      totalCompletions = maxValidCompletions;\n      status.failedRestriction = this.config.failedRestriction;\n    }\n\n    status.totalCompletions = totalCompletions;\n    status.gainedCompletions = totalCompletions - this.completions;\n    status.hasMoreCompletions = this.completions + status.gainedCompletions < this.maxCompletions;\n    status.nextGoalAt = this.goalAtCompletions(status.totalCompletions);\n    return status;\n  }\n\n  get initialGoal() {\n    if (Pelle.isDoomed && this.config.pelleGoal) {\n      return this.config.pelleGoal;\n    }\n\n    return this.config.goal;\n  }\n\n  get goalIncrease() {\n    if (Pelle.isDoomed && this.config.pelleGoalIncrease) {\n      return this.config.pelleGoalIncrease;\n    }\n\n    return this.config.goalIncrease;\n  }\n\n  get currentGoal() {\n    return this.goalAtCompletions(this.completions);\n  }\n\n  get isGoalReached() {\n    return player.records.thisEternity.maxIP.gte(this.currentGoal);\n  }\n\n  get canBeCompleted() {\n    return this.isGoalReached && this.isWithinRestriction;\n  }\n\n  goalAtCompletions(completions) {\n    return completions > 0 ? this.initialGoal.times(this.goalIncrease.pow(Math.min(completions, this.maxCompletions - 1))) : this.initialGoal;\n  }\n\n  completionsAtIP(ip) {\n    if (ip.lt(this.initialGoal)) return 0;\n    const completions = 1 + ip.dividedBy(this.initialGoal).log10() / this.goalIncrease.log10();\n    return Math.min(Math.floor(completions), this.maxCompletions);\n  }\n\n  addCompletion(auto = false) {\n    this.completions++;\n\n    if ((this.id === 4 || this.id === 12) && auto) {\n      this.tryFail(true);\n    }\n\n    if (this.id === 6) {\n      GameCache.dimensionMultDecrease.invalidate();\n    }\n\n    if (this.id === 11) {\n      GameCache.tickSpeedMultDecrease.invalidate();\n    }\n  }\n\n  requestStart() {\n    if (!Tab.challenges.eternity.isUnlocked || this.isRunning) return;\n    if (GameEnd.creditsEverClosed) return;\n\n    if (!player.options.confirmations.challenges) {\n      this.start();\n      return;\n    }\n\n    if (this.isUnlocked) Modal.startEternityChallenge.show(this.id);\n  }\n\n  start(auto) {\n    if (EternityChallenge.isRunning) return false;\n    if (!this.isUnlocked) return false;\n    const maxInversion = player.requirementChecks.reality.slowestBH <= 1e-300;\n\n    if (this.id === 12 && ImaginaryUpgrade(24).isLockingMechanics && Ra.isRunning && maxInversion) {\n      if (!auto) ImaginaryUpgrade(24).tryShowWarningModal(\"enter Eternity Challenge 12\");\n      return false;\n    }\n\n    if (this.id === 7 && ImaginaryUpgrade(15).isLockingMechanics && TimeDimension(1).amount.gt(0)) {\n      if (!auto) ImaginaryUpgrade(15).tryShowWarningModal(\"enter Eternity Challenge 7\");\n      return false;\n    } // If dilation is active, the { enteringEC: true } parameter will cause\n    // dilation to not be disabled. We still don't force-eternity, though;\n    // this causes TP to still be gained.\n\n\n    const enteringGamespeed = getGameSpeedupFactor();\n    if (Player.canEternity) eternity(false, auto, {\n      enteringEC: true\n    });\n    player.challenge.eternity.current = this.id;\n\n    if (this.id === 12) {\n      if (enteringGamespeed < 0.001) SecretAchievement(42).unlock();\n      player.requirementChecks.reality.slowestBH = 1;\n    }\n\n    if (Enslaved.isRunning) {\n      if (this.id === 6 && this.completions === 5) EnslavedProgress.ec6.giveProgress();\n      if (!auto && EnslavedProgress.challengeCombo.hasProgress) Tab.challenges.normal.show();\n    }\n\n    startEternityChallenge();\n    return true;\n  }\n  /**\r\n   * @return {EternityChallengeRewardState}\r\n   */\n\n\n  get reward() {\n    return this._reward;\n  }\n\n  get isWithinRestriction() {\n    return this.isWithinRestrictionAtCompletions(this.completions);\n  }\n\n  isWithinRestrictionAtCompletions(completions) {\n    return this.config.restriction === undefined || this.config.checkRestriction(this.config.restriction(completions));\n  }\n\n  exit(isRestarting) {\n    if (Player.isInAntimatterChallenge) {\n      Player.antimatterChallenge.exit();\n    }\n\n    player.challenge.eternity.current = 0;\n    if (!isRestarting) player.respec = true;\n    eternity(true);\n  }\n\n  fail(auto = false) {\n    this.exit(false);\n    let reason;\n\n    if (auto) {\n      if (this.id === 4) {\n        reason = restriction => `Auto Eternity Challenge completion completed ` + `Eternity Challenge ${this.id} and made the next tier ` + `require having less Infinities (${quantifyInt(\"Infinity\", restriction)} ` + `or less) than you had`;\n      } else if (this.id === 12) {\n        reason = restriction => `Auto Eternity Challenge completion completed ` + `Eternity Challenge ${this.id} and made the next tier ` + `require spending less time in it (${quantify(\"in-game second\", restriction, 0, 1)} ` + `or less) than you had spent`;\n      }\n    } else if (this.id === 4) {\n      reason = restriction => `You failed Eternity Challenge ${this.id} due to ` + `having more than ${quantifyInt(\"Infinity\", restriction)}`;\n    } else if (this.id === 12) {\n      reason = restriction => `You failed Eternity Challenge ${this.id} due to ` + `spending more than ${quantify(\"in-game second\", restriction, 0, 1)} in it`;\n    }\n\n    Modal.message.show(`${reason(this.config.restriction(this.completions))}, ` + `which has caused you to exit it.`, {\n      closeEvent: GAME_EVENT.REALITY_RESET_AFTER\n    }, 1);\n    EventHub.dispatch(GAME_EVENT.CHALLENGE_FAILED);\n  }\n\n  tryFail(auto = false) {\n    if (this.isRunning && !this.isWithinRestriction) {\n      this.fail(auto);\n      return true;\n    }\n\n    return false;\n  }\n\n}\n/**\r\n * @param id\r\n * @return {EternityChallengeState}\r\n */\n\nexport const EternityChallenge = EternityChallengeState.createAccessor(GameDatabase.challenges.eternity);\n/**\r\n * @returns {EternityChallengeState}\r\n */\n\nObject.defineProperty(EternityChallenge, \"current\", {\n  get: () => player.challenge.eternity.current > 0 ? EternityChallenge(player.challenge.eternity.current) : undefined\n});\nObject.defineProperty(EternityChallenge, \"isRunning\", {\n  get: () => player.challenge.eternity.current !== 0\n});\nexport const EternityChallenges = {\n  /**\r\n   * @type {EternityChallengeState[]}\r\n   */\n  all: EternityChallenge.index.compact(),\n\n  get completions() {\n    return EternityChallenges.all.map(ec => ec.completions).sum();\n  },\n\n  get maxCompletions() {\n    return EternityChallenges.all.map(ec => ec.maxCompletions).sum();\n  },\n\n  get remainingCompletions() {\n    return EternityChallenges.all.map(ec => ec.remainingCompletions).sum();\n  },\n\n  autoComplete: {\n    tick() {\n      const shouldPreventEC7 = TimeDimension(1).amount.gt(0);\n      const hasUpgradeLock = RealityUpgrade(12).isLockingMechanics || ImaginaryUpgrade(15).isLockingMechanics && shouldPreventEC7 && !Array.range(1, 6).some(ec => !EternityChallenge(ec).isFullyCompleted);\n\n      if (!player.reality.autoEC || Pelle.isDisabled(\"autoec\") || hasUpgradeLock) {\n        player.reality.lastAutoEC = Math.clampMax(player.reality.lastAutoEC, this.interval);\n        return;\n      }\n\n      if (Ra.unlocks.instantECAndRealityUpgradeAutobuyers.canBeApplied) {\n        let _next = this.nextChallenge;\n\n        while (_next !== undefined) {\n          var _next2;\n\n          while (!_next.isFullyCompleted) {\n            _next.addCompletion(true);\n          }\n\n          _next = this.nextChallenge;\n          if (ImaginaryUpgrade(15).isLockingMechanics && ((_next2 = _next) === null || _next2 === void 0 ? void 0 : _next2.id) === 7 && shouldPreventEC7) break;\n        }\n\n        return;\n      }\n\n      const interval = this.interval;\n      let next = this.nextChallenge;\n\n      while (player.reality.lastAutoEC - interval > 0 && next !== undefined) {\n        player.reality.lastAutoEC -= interval;\n        next.addCompletion(true);\n        next = this.nextChallenge;\n      }\n\n      player.reality.lastAutoEC %= interval;\n    },\n\n    get nextChallenge() {\n      return EternityChallenges.all.find(ec => !ec.isFullyCompleted);\n    },\n\n    get interval() {\n      if (!Perk.autocompleteEC1.canBeApplied) return Infinity;\n      let minutes = Effects.min(Number.MAX_VALUE, Perk.autocompleteEC1, Perk.autocompleteEC2, Perk.autocompleteEC3);\n      minutes /= VUnlocks.fastAutoEC.effectOrDefault(1);\n      return TimeSpan.fromMinutes(minutes).totalMilliseconds;\n    }\n\n  }\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/eternity-challenge.js"],"names":["DC","deepmergeAll","GameMechanicState","startEternityChallenge","initializeChallengeCompletions","initializeResourcesAfterEternity","resetInfinityRuns","InfinityDimensions","fullReset","Replicanti","reset","resetChallengeStuff","AntimatterDimensions","player","replicanti","galaxies","Currency","infinityPoints","resetAmount","records","bestInfinity","bestIPminEternity","D0","thisEternity","bestEPmin","resetTimeDimensions","resetTickspeed","thisInfinity","maxAM","antimatter","playerInfinityUpgradesOnReset","AchievementTimers","marathon2","ECTimeStudyState","invalidateCachedRequirements","EternityChallengeRewardState","constructor","config","challenge","effect","configCopy","completions","_challenge","isEffectActive","EternityChallengeState","_fullId","id","_reward","reward","fullId","isUnlocked","eternity","unlocked","isRunning","current","hasUnlocked","reality","unlockedEC","value","eternityChalls","undefined","Math","min","maxCompletions","Enslaved","remainingCompletions","isFullyCompleted","maxValidCompletions","isWithinRestrictionAtCompletions","gainedCompletionStatus","status","gainedCompletions","hasMoreCompletions","totalCompletions","Perk","studyECBulk","isBought","canBeCompleted","completionsAtIP","maxIP","failedRestriction","nextGoalAt","goalAtCompletions","initialGoal","Pelle","isDoomed","pelleGoal","goal","goalIncrease","pelleGoalIncrease","currentGoal","isGoalReached","gte","isWithinRestriction","times","pow","ip","lt","dividedBy","log10","floor","addCompletion","auto","tryFail","GameCache","dimensionMultDecrease","invalidate","tickSpeedMultDecrease","requestStart","Tab","challenges","GameEnd","creditsEverClosed","options","confirmations","start","Modal","show","EternityChallenge","maxInversion","requirementChecks","slowestBH","ImaginaryUpgrade","isLockingMechanics","Ra","tryShowWarningModal","TimeDimension","amount","gt","enteringGamespeed","getGameSpeedupFactor","Player","canEternity","enteringEC","SecretAchievement","unlock","EnslavedProgress","ec6","giveProgress","challengeCombo","hasProgress","normal","restriction","checkRestriction","exit","isRestarting","isInAntimatterChallenge","antimatterChallenge","respec","fail","reason","quantifyInt","quantify","message","closeEvent","GAME_EVENT","REALITY_RESET_AFTER","EventHub","dispatch","CHALLENGE_FAILED","createAccessor","GameDatabase","Object","defineProperty","get","EternityChallenges","all","index","compact","map","ec","sum","autoComplete","tick","shouldPreventEC7","hasUpgradeLock","RealityUpgrade","Array","range","some","autoEC","isDisabled","lastAutoEC","clampMax","interval","unlocks","instantECAndRealityUpgradeAutobuyers","canBeApplied","next","nextChallenge","find","autocompleteEC1","Infinity","minutes","Effects","Number","MAX_VALUE","autocompleteEC2","autocompleteEC3","VUnlocks","fastAutoEC","effectOrDefault","TimeSpan","fromMinutes","totalMilliseconds"],"mappings":"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","sourcesContent":["import { DC } from \"./constants\";\r\nimport { deepmergeAll } from \"@/utility/deepmerge\";\r\nimport { GameMechanicState } from \"./game-mechanics\";\r\n\r\nexport function startEternityChallenge() {\r\n  initializeChallengeCompletions();\r\n  initializeResourcesAfterEternity();\r\n  resetInfinityRuns();\r\n  InfinityDimensions.fullReset();\r\n  Replicanti.reset();\r\n  resetChallengeStuff();\r\n  AntimatterDimensions.reset();\r\n  player.replicanti.galaxies = 0;\r\n  Currency.infinityPoints.reset();\r\n  InfinityDimensions.resetAmount();\r\n  player.records.bestInfinity.bestIPminEternity = DC.D0;\r\n  player.records.thisEternity.bestEPmin = DC.D0;\r\n  resetTimeDimensions();\r\n  resetTickspeed();\r\n  player.records.thisInfinity.maxAM = DC.D0;\r\n  player.records.thisEternity.maxAM = DC.D0;\r\n  Currency.antimatter.reset();\r\n  playerInfinityUpgradesOnReset();\r\n  AchievementTimers.marathon2.reset();\r\n  ECTimeStudyState.invalidateCachedRequirements();\r\n}\r\n\r\nclass EternityChallengeRewardState extends GameMechanicState {\r\n  constructor(config, challenge) {\r\n    const effect = config.effect;\r\n    const configCopy = deepmergeAll([{}, config]);\r\n    configCopy.effect = () => effect(challenge.completions);\r\n    super(configCopy);\r\n    this._challenge = challenge;\r\n  }\r\n\r\n  get isEffectActive() {\r\n    return this._challenge.completions > 0;\r\n  }\r\n}\r\n\r\nexport class EternityChallengeState extends GameMechanicState {\r\n  constructor(config) {\r\n    super(config);\r\n    this._fullId = `eterc${this.id}`;\r\n    this._reward = new EternityChallengeRewardState(config.reward, this);\r\n  }\r\n\r\n  get fullId() {\r\n    return this._fullId;\r\n  }\r\n\r\n  get isUnlocked() {\r\n    return player.challenge.eternity.unlocked === this.id;\r\n  }\r\n\r\n  get isRunning() {\r\n    return player.challenge.eternity.current === this.id;\r\n  }\r\n\r\n  get isEffectActive() {\r\n    return this.isRunning;\r\n  }\r\n\r\n  get hasUnlocked() {\r\n    return (player.reality.unlockedEC & (1 << this.id)) !== 0;\r\n  }\r\n\r\n  set hasUnlocked(value) {\r\n    if (value) player.reality.unlockedEC |= (1 << this.id);\r\n  }\r\n\r\n  get completions() {\r\n    const completions = player.eternityChalls[this.fullId];\r\n    return completions === undefined ? 0 : completions;\r\n  }\r\n\r\n  set completions(value) {\r\n    player.eternityChalls[this.fullId] = Math.min(value, this.maxCompletions);\r\n  }\r\n\r\n  get maxCompletions() {\r\n    return Enslaved.isRunning && this.id === 1 ? 1000 : 5;\r\n  }\r\n\r\n  get remainingCompletions() {\r\n    return this.maxCompletions - this.completions;\r\n  }\r\n\r\n  get isFullyCompleted() {\r\n    return this.completions === this.maxCompletions;\r\n  }\r\n\r\n  get maxValidCompletions() {\r\n    if (this.id !== 4 && this.id !== 12) return this.maxCompletions;\r\n    let completions = this.completions;\r\n    while (completions < this.maxCompletions && this.isWithinRestrictionAtCompletions(completions)) {\r\n      completions++;\r\n    }\r\n    return completions;\r\n  }\r\n\r\n  get gainedCompletionStatus() {\r\n    const status = {\r\n      gainedCompletions: 0,\r\n      hasMoreCompletions: false,\r\n      totalCompletions: this.completions,\r\n    };\r\n    if (this.isFullyCompleted) return status;\r\n    if (!Perk.studyECBulk.isBought) {\r\n      if (this.canBeCompleted) {\r\n        ++status.totalCompletions;\r\n        status.gainedCompletions = 1;\r\n      }\r\n      return status;\r\n    }\r\n\r\n    let totalCompletions = this.completionsAtIP(player.records.thisEternity.maxIP);\r\n    const maxValidCompletions = this.maxValidCompletions;\r\n    if (totalCompletions > maxValidCompletions) {\r\n      totalCompletions = maxValidCompletions;\r\n      status.failedRestriction = this.config.failedRestriction;\r\n    }\r\n    status.totalCompletions = totalCompletions;\r\n    status.gainedCompletions = totalCompletions - this.completions;\r\n    status.hasMoreCompletions = this.completions + status.gainedCompletions < this.maxCompletions;\r\n    status.nextGoalAt = this.goalAtCompletions(status.totalCompletions);\r\n    return status;\r\n  }\r\n\r\n  get initialGoal() {\r\n    if (Pelle.isDoomed && this.config.pelleGoal) {\r\n      return this.config.pelleGoal;\r\n    }\r\n    return this.config.goal;\r\n  }\r\n\r\n  get goalIncrease() {\r\n    if (Pelle.isDoomed && this.config.pelleGoalIncrease) {\r\n      return this.config.pelleGoalIncrease;\r\n    }\r\n    return this.config.goalIncrease;\r\n  }\r\n\r\n  get currentGoal() {\r\n    return this.goalAtCompletions(this.completions);\r\n  }\r\n\r\n  get isGoalReached() {\r\n    return player.records.thisEternity.maxIP.gte(this.currentGoal);\r\n  }\r\n\r\n  get canBeCompleted() {\r\n    return this.isGoalReached && this.isWithinRestriction;\r\n  }\r\n\r\n  goalAtCompletions(completions) {\r\n    return completions > 0\r\n      ? this.initialGoal.times(this.goalIncrease.pow(Math.min(completions, this.maxCompletions - 1)))\r\n      : this.initialGoal;\r\n  }\r\n\r\n  completionsAtIP(ip) {\r\n    if (ip.lt(this.initialGoal)) return 0;\r\n    const completions = 1 + (ip.dividedBy(this.initialGoal)).log10() / this.goalIncrease.log10();\r\n    return Math.min(Math.floor(completions), this.maxCompletions);\r\n  }\r\n\r\n  addCompletion(auto = false) {\r\n    this.completions++;\r\n    if ((this.id === 4 || this.id === 12) && auto) {\r\n      this.tryFail(true);\r\n    }\r\n    if (this.id === 6) {\r\n      GameCache.dimensionMultDecrease.invalidate();\r\n    }\r\n    if (this.id === 11) {\r\n      GameCache.tickSpeedMultDecrease.invalidate();\r\n    }\r\n  }\r\n\r\n  requestStart() {\r\n    if (!Tab.challenges.eternity.isUnlocked || this.isRunning) return;\r\n    if (GameEnd.creditsEverClosed) return;\r\n    if (!player.options.confirmations.challenges) {\r\n      this.start();\r\n      return;\r\n    }\r\n    if (this.isUnlocked) Modal.startEternityChallenge.show(this.id);\r\n  }\r\n\r\n  start(auto) {\r\n    if (EternityChallenge.isRunning) return false;\r\n    if (!this.isUnlocked) return false;\r\n    const maxInversion = player.requirementChecks.reality.slowestBH <= 1e-300;\r\n    if (this.id === 12 && ImaginaryUpgrade(24).isLockingMechanics && Ra.isRunning && maxInversion) {\r\n      if (!auto) ImaginaryUpgrade(24).tryShowWarningModal(\"enter Eternity Challenge 12\");\r\n      return false;\r\n    }\r\n    if (this.id === 7 && ImaginaryUpgrade(15).isLockingMechanics && TimeDimension(1).amount.gt(0)) {\r\n      if (!auto) ImaginaryUpgrade(15).tryShowWarningModal(\"enter Eternity Challenge 7\");\r\n      return false;\r\n    }\r\n\r\n    // If dilation is active, the { enteringEC: true } parameter will cause\r\n    // dilation to not be disabled. We still don't force-eternity, though;\r\n    // this causes TP to still be gained.\r\n    const enteringGamespeed = getGameSpeedupFactor();\r\n    if (Player.canEternity) eternity(false, auto, { enteringEC: true });\r\n    player.challenge.eternity.current = this.id;\r\n    if (this.id === 12) {\r\n      if (enteringGamespeed < 0.001) SecretAchievement(42).unlock();\r\n      player.requirementChecks.reality.slowestBH = 1;\r\n    }\r\n    if (Enslaved.isRunning) {\r\n      if (this.id === 6 && this.completions === 5) EnslavedProgress.ec6.giveProgress();\r\n      if (!auto && EnslavedProgress.challengeCombo.hasProgress) Tab.challenges.normal.show();\r\n    }\r\n    startEternityChallenge();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @return {EternityChallengeRewardState}\r\n   */\r\n  get reward() {\r\n    return this._reward;\r\n  }\r\n\r\n  get isWithinRestriction() {\r\n    return this.isWithinRestrictionAtCompletions(this.completions);\r\n  }\r\n\r\n  isWithinRestrictionAtCompletions(completions) {\r\n    return this.config.restriction === undefined ||\r\n      this.config.checkRestriction(this.config.restriction(completions));\r\n  }\r\n\r\n  exit(isRestarting) {\r\n    if (Player.isInAntimatterChallenge) {\r\n      Player.antimatterChallenge.exit();\r\n    }\r\n    player.challenge.eternity.current = 0;\r\n    if (!isRestarting) player.respec = true;\r\n    eternity(true);\r\n  }\r\n\r\n  fail(auto = false) {\r\n    this.exit(false);\r\n    let reason;\r\n    if (auto) {\r\n      if (this.id === 4) {\r\n        reason = restriction => `Auto Eternity Challenge completion completed ` +\r\n        `Eternity Challenge ${this.id} and made the next tier ` +\r\n        `require having less Infinities (${quantifyInt(\"Infinity\", restriction)} ` +\r\n        `or less) than you had`;\r\n      } else if (this.id === 12) {\r\n        reason = restriction => `Auto Eternity Challenge completion completed ` +\r\n        `Eternity Challenge ${this.id} and made the next tier ` +\r\n        `require spending less time in it (${quantify(\"in-game second\", restriction, 0, 1)} ` +\r\n        `or less) than you had spent`;\r\n      }\r\n    } else if (this.id === 4) {\r\n      reason = restriction => `You failed Eternity Challenge ${this.id} due to ` +\r\n      `having more than ${quantifyInt(\"Infinity\", restriction)}`;\r\n    } else if (this.id === 12) {\r\n      reason = restriction => `You failed Eternity Challenge ${this.id} due to ` +\r\n      `spending more than ${quantify(\"in-game second\", restriction, 0, 1)} in it`;\r\n    }\r\n    Modal.message.show(`${reason(this.config.restriction(this.completions))}, ` +\r\n    `which has caused you to exit it.`,\r\n    { closeEvent: GAME_EVENT.REALITY_RESET_AFTER }, 1);\r\n    EventHub.dispatch(GAME_EVENT.CHALLENGE_FAILED);\r\n  }\r\n\r\n  tryFail(auto = false) {\r\n    if (this.isRunning && !this.isWithinRestriction) {\r\n      this.fail(auto);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * @param id\r\n * @return {EternityChallengeState}\r\n */\r\nexport const EternityChallenge = EternityChallengeState.createAccessor(GameDatabase.challenges.eternity);\r\n\r\n/**\r\n * @returns {EternityChallengeState}\r\n */\r\nObject.defineProperty(EternityChallenge, \"current\", {\r\n  get: () => (player.challenge.eternity.current > 0\r\n    ? EternityChallenge(player.challenge.eternity.current)\r\n    : undefined),\r\n});\r\n\r\nObject.defineProperty(EternityChallenge, \"isRunning\", {\r\n  get: () => player.challenge.eternity.current !== 0,\r\n});\r\n\r\nexport const EternityChallenges = {\r\n  /**\r\n   * @type {EternityChallengeState[]}\r\n   */\r\n  all: EternityChallenge.index.compact(),\r\n\r\n  get completions() {\r\n    return EternityChallenges.all\r\n      .map(ec => ec.completions)\r\n      .sum();\r\n  },\r\n\r\n  get maxCompletions() {\r\n    return EternityChallenges.all\r\n      .map(ec => ec.maxCompletions)\r\n      .sum();\r\n  },\r\n\r\n  get remainingCompletions() {\r\n    return EternityChallenges.all\r\n      .map(ec => ec.remainingCompletions)\r\n      .sum();\r\n  },\r\n\r\n  autoComplete: {\r\n    tick() {\r\n      const shouldPreventEC7 = TimeDimension(1).amount.gt(0);\r\n      const hasUpgradeLock = RealityUpgrade(12).isLockingMechanics ||\r\n        (ImaginaryUpgrade(15).isLockingMechanics && shouldPreventEC7 &&\r\n          !Array.range(1, 6).some(ec => !EternityChallenge(ec).isFullyCompleted));\r\n      if (!player.reality.autoEC || Pelle.isDisabled(\"autoec\") || hasUpgradeLock) {\r\n        player.reality.lastAutoEC = Math.clampMax(player.reality.lastAutoEC, this.interval);\r\n        return;\r\n      }\r\n      if (Ra.unlocks.instantECAndRealityUpgradeAutobuyers.canBeApplied) {\r\n        let next = this.nextChallenge;\r\n        while (next !== undefined) {\r\n          while (!next.isFullyCompleted) {\r\n            next.addCompletion(true);\r\n          }\r\n          next = this.nextChallenge;\r\n          if (ImaginaryUpgrade(15).isLockingMechanics && next?.id === 7 && shouldPreventEC7) break;\r\n        }\r\n        return;\r\n      }\r\n      const interval = this.interval;\r\n      let next = this.nextChallenge;\r\n      while (player.reality.lastAutoEC - interval > 0 && next !== undefined) {\r\n        player.reality.lastAutoEC -= interval;\r\n        next.addCompletion(true);\r\n        next = this.nextChallenge;\r\n      }\r\n      player.reality.lastAutoEC %= interval;\r\n    },\r\n\r\n    get nextChallenge() {\r\n      return EternityChallenges.all.find(ec => !ec.isFullyCompleted);\r\n    },\r\n\r\n    get interval() {\r\n      if (!Perk.autocompleteEC1.canBeApplied) return Infinity;\r\n      let minutes = Effects.min(\r\n        Number.MAX_VALUE,\r\n        Perk.autocompleteEC1,\r\n        Perk.autocompleteEC2,\r\n        Perk.autocompleteEC3\r\n      );\r\n      minutes /= VUnlocks.fastAutoEC.effectOrDefault(1);\r\n      return TimeSpan.fromMinutes(minutes).totalMilliseconds;\r\n    }\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}