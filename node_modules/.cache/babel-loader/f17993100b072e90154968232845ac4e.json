{"ast":null,"code":"import SplitPane from \"vue-splitpane\";\nimport AutomatorDocs from \"./AutomatorDocs\";\nimport AutomatorEditor from \"./AutomatorEditor\";\nimport AutomatorPointsList from \"./AutomatorPointsList\";\nexport default {\n  name: \"AutomatorTab\",\n  components: {\n    SplitPane,\n    AutomatorEditor,\n    AutomatorPointsList,\n    AutomatorDocs\n  },\n\n  data() {\n    return {\n      automatorUnlocked: false,\n      interval: 0,\n      currentChars: 0,\n      totalChars: 0,\n      withinLimit: false\n    };\n  },\n\n  computed: {\n    fullScreen() {\n      return this.$viewModel.tabs.reality.automator.fullScreen;\n    },\n\n    tabClass() {\n      if (!this.fullScreen) return undefined;\n      return \"c-automator-tab--full-screen\";\n    },\n\n    fullScreenIconClass() {\n      return this.fullScreen ? \"fa-compress-arrows-alt\" : \"fa-expand-arrows-alt\";\n    },\n\n    intervalText() {\n      const speedupText = `Each Reality makes it run ${formatPercents(0.006, 1)} faster, up to a maximum of\n        ${formatInt(1000)} per second.`;\n      return this.interval === 1 ? `The Automator is running at max speed (${formatInt(1000)} commands per real-time second).` : `The Automator is running ${quantify(\"command\", 1000 / this.interval, 2, 2)} per real-time second.\n          ${speedupText}`;\n    },\n\n    maxScriptChars() {\n      return AutomatorData.MAX_ALLOWED_SCRIPT_CHARACTERS;\n    },\n\n    maxTotalChars() {\n      return AutomatorData.MAX_ALLOWED_TOTAL_CHARACTERS;\n    }\n\n  },\n  methods: {\n    update() {\n      this.automatorUnlocked = Player.automatorUnlocked;\n      this.interval = AutomatorBackend.currentInterval;\n      this.currentChars = AutomatorData.singleScriptCharacters();\n      this.totalChars = AutomatorData.totalScriptCharacters();\n      this.withinLimit = AutomatorData.isWithinLimit();\n    }\n\n  }\n};","map":{"version":3,"sources":["AutomatorTab.vue"],"names":[],"mappings":"AACA,OAAA,SAAA,MAAA,eAAA;AAEA,OAAA,aAAA,MAAA,iBAAA;AACA,OAAA,eAAA,MAAA,mBAAA;AACA,OAAA,mBAAA,MAAA,uBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,cADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,SADA;AAEA,IAAA,eAFA;AAGA,IAAA,mBAHA;AAIA,IAAA;AAJA,GAFA;;AAQA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,iBAAA,EAAA,KADA;AAEA,MAAA,QAAA,EAAA,CAFA;AAGA,MAAA,YAAA,EAAA,CAHA;AAIA,MAAA,UAAA,EAAA,CAJA;AAKA,MAAA,WAAA,EAAA;AALA,KAAA;AAOA,GAhBA;;AAiBA,EAAA,QAAA,EAAA;AACA,IAAA,UAAA,GAAA;AACA,aAAA,KAAA,UAAA,CAAA,IAAA,CAAA,OAAA,CAAA,SAAA,CAAA,UAAA;AACA,KAHA;;AAIA,IAAA,QAAA,GAAA;AACA,UAAA,CAAA,KAAA,UAAA,EAAA,OAAA,SAAA;AACA,aAAA,8BAAA;AACA,KAPA;;AAQA,IAAA,mBAAA,GAAA;AACA,aAAA,KAAA,UAAA,GAAA,wBAAA,GAAA,sBAAA;AACA,KAVA;;AAWA,IAAA,YAAA,GAAA;AACA,YAAA,WAAA,GAAA,6BAAA,cAAA,CAAA,KAAA,EAAA,CAAA,CAAA;AACA,UAAA,SAAA,CAAA,IAAA,CAAA,cADA;AAEA,aAAA,KAAA,QAAA,KAAA,CAAA,GACA,0CAAA,SAAA,CAAA,IAAA,CAAA,kCADA,GAEA,4BAAA,QAAA,CAAA,SAAA,EAAA,OAAA,KAAA,QAAA,EAAA,CAAA,EAAA,CAAA,CAAA;AACA,YAAA,WAAA,EAHA;AAIA,KAlBA;;AAmBA,IAAA,cAAA,GAAA;AACA,aAAA,aAAA,CAAA,6BAAA;AACA,KArBA;;AAsBA,IAAA,aAAA,GAAA;AACA,aAAA,aAAA,CAAA,4BAAA;AACA;;AAxBA,GAjBA;AA2CA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,iBAAA,GAAA,MAAA,CAAA,iBAAA;AACA,WAAA,QAAA,GAAA,gBAAA,CAAA,eAAA;AACA,WAAA,YAAA,GAAA,aAAA,CAAA,sBAAA,EAAA;AACA,WAAA,UAAA,GAAA,aAAA,CAAA,qBAAA,EAAA;AACA,WAAA,WAAA,GAAA,aAAA,CAAA,aAAA,EAAA;AACA;;AAPA;AA3CA,CAAA","sourcesContent":["<script>\r\nimport SplitPane from \"vue-splitpane\";\r\n\r\nimport AutomatorDocs from \"./AutomatorDocs\";\r\nimport AutomatorEditor from \"./AutomatorEditor\";\r\nimport AutomatorPointsList from \"./AutomatorPointsList\";\r\n\r\nexport default {\r\n  name: \"AutomatorTab\",\r\n  components: {\r\n    SplitPane,\r\n    AutomatorEditor,\r\n    AutomatorPointsList,\r\n    AutomatorDocs\r\n  },\r\n  data() {\r\n    return {\r\n      automatorUnlocked: false,\r\n      interval: 0,\r\n      currentChars: 0,\r\n      totalChars: 0,\r\n      withinLimit: false,\r\n    };\r\n  },\r\n  computed: {\r\n    fullScreen() {\r\n      return this.$viewModel.tabs.reality.automator.fullScreen;\r\n    },\r\n    tabClass() {\r\n      if (!this.fullScreen) return undefined;\r\n      return \"c-automator-tab--full-screen\";\r\n    },\r\n    fullScreenIconClass() {\r\n      return this.fullScreen ? \"fa-compress-arrows-alt\" : \"fa-expand-arrows-alt\";\r\n    },\r\n    intervalText() {\r\n      const speedupText = `Each Reality makes it run ${formatPercents(0.006, 1)} faster, up to a maximum of\r\n        ${formatInt(1000)} per second.`;\r\n      return this.interval === 1\r\n        ? `The Automator is running at max speed (${formatInt(1000)} commands per real-time second).`\r\n        : `The Automator is running ${quantify(\"command\", 1000 / this.interval, 2, 2)} per real-time second.\r\n          ${speedupText}`;\r\n    },\r\n    maxScriptChars() {\r\n      return AutomatorData.MAX_ALLOWED_SCRIPT_CHARACTERS;\r\n    },\r\n    maxTotalChars() {\r\n      return AutomatorData.MAX_ALLOWED_TOTAL_CHARACTERS;\r\n    },\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.automatorUnlocked = Player.automatorUnlocked;\r\n      this.interval = AutomatorBackend.currentInterval;\r\n      this.currentChars = AutomatorData.singleScriptCharacters();\r\n      this.totalChars = AutomatorData.totalScriptCharacters();\r\n      this.withinLimit = AutomatorData.isWithinLimit();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    :class=\"tabClass\"\r\n    class=\"c-automator-tab l-automator-tab\"\r\n  >\r\n    <div v-if=\"automatorUnlocked\">\r\n      <div>\r\n        {{ intervalText }}\r\n      </div>\r\n      <span :class=\"{ 'c-overlimit': currentChars > maxScriptChars }\">\r\n        This script: {{ formatInt(currentChars) }} / {{ formatInt(maxScriptChars) }}\r\n      </span>\r\n      |\r\n      <span :class=\"{ 'c-overlimit': totalChars > maxTotalChars }\">\r\n        Across all scripts: {{ formatInt(totalChars) }} / {{ formatInt(maxTotalChars) }}\r\n      </span>\r\n      <br>\r\n      <span\r\n        v-if=\"!withinLimit\"\r\n        class=\"c-overlimit\"\r\n      >\r\n        (Your changes will not be saved due to being over a character limit!)\r\n      </span>\r\n      <div class=\"c-automator-split-pane\">\r\n        <SplitPane\r\n          :min-percent=\"44\"\r\n          :default-percent=\"50\"\r\n          split=\"vertical\"\r\n        >\r\n          <template #paneL>\r\n            <AutomatorEditor />\r\n          </template>\r\n          <template #paneR>\r\n            <AutomatorDocs />\r\n          </template>\r\n        </SplitPane>\r\n      </div>\r\n    </div>\r\n    <AutomatorPointsList v-else />\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-overlimit {\r\n  font-weight: bold;\r\n  color: var(--color-bad);\r\n}\r\n\r\n.c-automator-tab {\r\n  width: 80%;\r\n  min-width: 100rem;\r\n}\r\n\r\n.l-automator-tab {\r\n  position: relative;\r\n  align-self: center;\r\n  margin-top: 0.5rem;\r\n}\r\n\r\n.c-automator-split-pane {\r\n  width: 100%;\r\n  height: 57rem;\r\n  background-color: #bbbbbb;\r\n}\r\n\r\n.s-base--dark .c-automator-split-pane {\r\n  width: 100%;\r\n  background-color: #474747;\r\n}\r\n\r\n.c-automator-tab--full-screen .c-automator-split-pane {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: fixed;\r\n  inset: 0;\r\n  z-index: 5;\r\n  margin-top: 0;\r\n  padding-bottom: 0;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/automator"},"metadata":{},"sourceType":"module"}