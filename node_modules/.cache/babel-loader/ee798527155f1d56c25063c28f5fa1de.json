{"ast":null,"code":"import { DC } from \"../../constants\";\n\nfunction dimInfinityMult() {\n  return Currency.infinitiesTotal.value.times(0.2).plus(1);\n}\n\nfunction chargedDimInfinityMult() {\n  return 1 + Math.log10(Math.max(1, Currency.infinitiesTotal.value.pLog10())) * Math.sqrt(Ra.pets.teresa.level) / 150;\n}\n\nexport const infinityUpgrades = {\n  totalTimeMult: {\n    id: \"timeMult\",\n    cost: 1,\n    description: \"Antimatter Dimensions gain a multiplier based on time played\",\n    effect: () => Math.pow(Time.totalTimePlayed.totalMinutes / 2, 0.15),\n    formatEffect: value => formatX(value, 2, 2),\n    charged: {\n      description: \"Antimatter Dimensions gain a power effect based on time played and Teresa level\",\n      effect: () => 1 + Math.log10(Math.log10(Time.totalTimePlayed.totalMilliseconds)) * Math.pow(Ra.pets.teresa.level, 0.5) / 150,\n      formatEffect: value => formatPow(value, 4, 4)\n    }\n  },\n  dim18mult: {\n    id: \"18Mult\",\n    cost: 1,\n    checkRequirement: () => InfinityUpgrade.totalTimeMult.isBought,\n    description: \"1st and 8th Antimatter Dimensions gain a multiplier based on Infinities\",\n    effect: () => dimInfinityMult(),\n    formatEffect: value => formatX(value, 1, 1),\n    charged: {\n      description: \"1st and 8th Antimatter Dimensions gain a power effect based on Infinities and Teresa level\",\n      effect: () => chargedDimInfinityMult(),\n      formatEffect: value => formatPow(value, 4, 4)\n    }\n  },\n  dim27mult: {\n    id: \"27Mult\",\n    cost: 1,\n    checkRequirement: () => InfinityUpgrade.buy10Mult.isBought,\n    description: \"2nd and 7th Antimatter Dimensions gain a multiplier based on Infinities\",\n    effect: () => dimInfinityMult(),\n    formatEffect: value => formatX(value, 1, 1),\n    charged: {\n      description: \"2nd and 7th Antimatter Dimensions gain a power effect based on Infinities and Teresa level\",\n      effect: () => chargedDimInfinityMult(),\n      formatEffect: value => formatPow(value, 4, 4)\n    }\n  },\n  dim36mult: {\n    id: \"36Mult\",\n    cost: 1,\n    checkRequirement: () => InfinityUpgrade.dim18mult.isBought,\n    description: \"3rd and 6th Antimatter Dimensions gain a multiplier based on Infinities\",\n    effect: () => dimInfinityMult(),\n    formatEffect: value => formatX(value, 1, 1),\n    charged: {\n      description: \"3rd and 6th Antimatter Dimensions gain a power effect based on Infinities and Teresa level\",\n      effect: () => chargedDimInfinityMult(),\n      formatEffect: value => formatPow(value, 4, 4)\n    }\n  },\n  dim45mult: {\n    id: \"45Mult\",\n    cost: 1,\n    checkRequirement: () => InfinityUpgrade.dim27mult.isBought,\n    description: \"4th and 5th Antimatter Dimensions gain a multiplier based on Infinities\",\n    effect: () => dimInfinityMult(),\n    formatEffect: value => formatX(value, 1, 1),\n    charged: {\n      description: \"4th and 5th Antimatter Dimensions gain a power effect based on Infinities and Teresa level\",\n      effect: () => chargedDimInfinityMult(),\n      formatEffect: value => formatPow(value, 4, 4)\n    }\n  },\n  resetBoost: {\n    id: \"resetBoost\",\n    cost: 1,\n    checkRequirement: () => InfinityUpgrade.dim36mult.isBought,\n    description: () => `Decrease the number of Dimensions needed for Dimension Boosts and Antimatter Galaxies by ${formatInt(9)}`,\n    effect: 9,\n    charged: {\n      description: () => \"Decrease Dimension Boost requirement based on Teresa level\",\n      effect: () => 1 / (1 + Math.sqrt(Ra.pets.teresa.level) / 10),\n      formatEffect: value => `${formatX(value, 4, 4)}`\n    }\n  },\n  buy10Mult: {\n    id: \"dimMult\",\n    cost: 1,\n    description: () => `Increase the multiplier for buying ${formatInt(10)} Antimatter Dimensions`,\n    effect: () => 1.1,\n    formatEffect: () => `${formatX(2, 0, 1)} ➜ ${formatX(2.2, 0, 1)}`,\n    charged: {\n      description: () => `The multiplier for buying ${formatInt(10)} Antimatter Dimensions gains ` + \"a power effect based on Teresa level\",\n      effect: () => 1 + Ra.pets.teresa.level / 200,\n      formatEffect: value => formatPow(value, 3, 3)\n    }\n  },\n  galaxyBoost: {\n    id: \"galaxyBoost\",\n    cost: 2,\n    checkRequirement: () => InfinityUpgrade.dim45mult.isBought,\n    description: \"All Galaxies are twice as strong\",\n    effect: 2,\n    charged: {\n      description: \"All Galaxies are stronger based on Teresa level\",\n      effect: () => 2 + Math.sqrt(Ra.pets.teresa.level) / 100,\n      formatEffect: value => `+${formatPercents(value - 1)}`\n    }\n  },\n  thisInfinityTimeMult: {\n    id: \"timeMult2\",\n    cost: 3,\n    description: \"Antimatter Dimensions gain a multiplier based on time spent in current Infinity\",\n    effect: () => Decimal.max(Math.pow(Time.thisInfinity.totalMinutes / 4, 0.25), 1),\n    formatEffect: value => formatX(value, 2, 2),\n    charged: {\n      description: \"Antimatter Dimensions gain a power effect based on time spent in current Infinity and Teresa level\",\n      effect: () => 1 + Math.log10(Math.log10(Time.thisInfinity.totalMilliseconds + 100)) * Math.sqrt(Ra.pets.teresa.level) / 150,\n      formatEffect: value => formatPow(value, 4, 4)\n    }\n  },\n  unspentIPMult: {\n    id: \"unspentBonus\",\n    cost: 5,\n    checkRequirement: () => InfinityUpgrade.thisInfinityTimeMult.isBought,\n    description: \"Multiplier to 1st Antimatter Dimension based on unspent Infinity Points\",\n    effect: () => Currency.infinityPoints.value.dividedBy(2).pow(1.5).plus(1),\n    formatEffect: value => formatX(value, 2, 2),\n    charged: {\n      description: \"Multiplier to 1st Antimatter Dimension based on unspent Infinity Points, powered by Teresa level\",\n      effect: () => Currency.infinityPoints.value.dividedBy(2).pow(Math.sqrt(Ra.pets.teresa.level) * 1.5).plus(1),\n      formatEffect: value => formatX(value, 2, 2)\n    }\n  },\n  dimboostMult: {\n    id: \"resetMult\",\n    cost: 7,\n    checkRequirement: () => InfinityUpgrade.unspentIPMult.isBought,\n    description: \"Increase Dimension Boost multiplier\",\n    effect: () => 2.5,\n    formatEffect: () => `${formatX(2, 0, 1)} ➜ ${formatX(2.5, 0, 1)}`,\n    charged: {\n      description: \"Dimension Boost multiplier gains a power effect based on Teresa level\",\n      effect: () => 1 + Ra.pets.teresa.level / 200,\n      formatEffect: value => formatPow(value, 3, 3)\n    }\n  },\n  ipGen: {\n    id: \"passiveGen\",\n    cost: 10,\n    checkRequirement: () => InfinityUpgrade.dimboostMult.isBought,\n    description: () => `Passively generate Infinity Points ${formatInt(10)} times slower than your fastest Infinity`,\n    // Cutting corners: this is not actual effect, but it is totalIPMult that is displyed on upgrade\n    effect: () => Teresa.isRunning || V.isRunning || Pelle.isDoomed ? DC.D0 : GameCache.totalIPMult.value,\n    formatEffect: value => {\n      if (Teresa.isRunning || V.isRunning) return \"Disabled in this reality\";\n      if (Pelle.isDoomed) return \"Disabled\";\n      if (player.records.bestInfinity.time >= 999999999999) return \"Too slow to generate\";\n      return `${format(value, 2)} every ${Time.bestInfinity.times(10).toStringShort()}`;\n    },\n    charged: {\n      description: () => `Gain Reality Machines each real-time second proportional to amount gained on Reality,\n        increasing with Teresa level`,\n      effect: () => Math.pow(Ra.pets.teresa.level, 2) * Ra.unlocks.continuousTTBoost.effects.autoPrestige.effectOrDefault(1),\n      formatEffect: value => formatX(value, 2, 1)\n    }\n  },\n  skipReset1: {\n    id: \"skipReset1\",\n    cost: 20,\n    description: () => `Start every reset with ${formatInt(1)} Dimension Boost, automatically unlocking the 5th Antimatter Dimension`\n  },\n  skipReset2: {\n    id: \"skipReset2\",\n    cost: 40,\n    checkRequirement: () => InfinityUpgrade.skipReset1.isBought,\n    description: () => `Start every reset with ${formatInt(2)} Dimension Boosts, automatically unlocking the 6th Antimatter Dimension`\n  },\n  skipReset3: {\n    id: \"skipReset3\",\n    cost: 80,\n    checkRequirement: () => InfinityUpgrade.skipReset2.isBought,\n    description: () => `Start every reset with ${formatInt(3)} Dimension Boosts, automatically unlocking the 7th Antimatter Dimension`\n  },\n  skipResetGalaxy: {\n    id: \"skipResetGalaxy\",\n    cost: 300,\n    checkRequirement: () => InfinityUpgrade.skipReset3.isBought,\n    description: () => `Start every reset with ${formatInt(4)} Dimension Boosts, automatically unlocking the 8th Antimatter Dimension;\n      and an Antimatter Galaxy`\n  },\n  ipOffline: {\n    id: \"ipOffline\",\n    cost: 1000,\n    checkRequirement: () => Achievement(41).isUnlocked,\n    description: () => player.options.offlineProgress ? `Only while offline, gain ${formatPercents(0.5)} of your best IP/min without using Max All` : \"This upgrade would give offline Infinity Point generation, but offline progress is currently disabled\",\n    effect: () => player.options.offlineProgress ? player.records.thisEternity.bestIPMsWithoutMaxAll.times(TimeSpan.fromMinutes(1).totalMilliseconds / 2) : DC.D0,\n    isDisabled: () => !player.options.offlineProgress,\n    formatEffect: value => `${format(value, 2, 2)} IP/min`\n  },\n  ipMult: {\n    id: \"ipMult\",\n    cost: () => InfinityUpgrade.ipMult.cost,\n    checkRequirement: () => Achievement(41).isUnlocked,\n    costCap: DC.E6E6,\n    costIncreaseThreshold: DC.E3E6,\n    description: () => `Multiply Infinity Points from all sources by ${formatX(2)}`,\n    // Normally the multiplier caps at e993k or so with 3300000 purchases, but if the cost is capped then we just give\n    // an extra e7k to make the multiplier look nice\n    effect: () => player.IPMultPurchases >= 3300000 ? DC.E1E6 : DC.D2.pow(player.IPMultPurchases),\n    cap: () => {\n      var _Effarig$eternityCap;\n\n      return (_Effarig$eternityCap = Effarig.eternityCap) !== null && _Effarig$eternityCap !== void 0 ? _Effarig$eternityCap : DC.E1E6;\n    },\n    formatEffect: value => formatX(value, 2, 2)\n  }\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/infinity/infinity-upgrades.js"],"names":["DC","dimInfinityMult","Currency","infinitiesTotal","value","times","plus","chargedDimInfinityMult","Math","log10","max","pLog10","sqrt","Ra","pets","teresa","level","infinityUpgrades","totalTimeMult","id","cost","description","effect","pow","Time","totalTimePlayed","totalMinutes","formatEffect","formatX","charged","totalMilliseconds","formatPow","dim18mult","checkRequirement","InfinityUpgrade","isBought","dim27mult","buy10Mult","dim36mult","dim45mult","resetBoost","formatInt","galaxyBoost","formatPercents","thisInfinityTimeMult","Decimal","thisInfinity","unspentIPMult","infinityPoints","dividedBy","dimboostMult","ipGen","Teresa","isRunning","V","Pelle","isDoomed","D0","GameCache","totalIPMult","player","records","bestInfinity","time","format","toStringShort","unlocks","continuousTTBoost","effects","autoPrestige","effectOrDefault","skipReset1","skipReset2","skipReset3","skipResetGalaxy","ipOffline","Achievement","isUnlocked","options","offlineProgress","thisEternity","bestIPMsWithoutMaxAll","TimeSpan","fromMinutes","isDisabled","ipMult","costCap","E6E6","costIncreaseThreshold","E3E6","IPMultPurchases","E1E6","D2","cap","Effarig","eternityCap"],"mappings":"AAAA,SAASA,EAAT,QAAmB,iBAAnB;;AAEA,SAASC,eAAT,GAA2B;AACzB,SAAOC,QAAQ,CAACC,eAAT,CAAyBC,KAAzB,CAA+BC,KAA/B,CAAqC,GAArC,EAA0CC,IAA1C,CAA+C,CAA/C,CAAP;AACD;;AACD,SAASC,sBAAT,GAAkC;AAChC,SAAO,IAAIC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYR,QAAQ,CAACC,eAAT,CAAyBC,KAAzB,CAA+BO,MAA/B,EAAZ,CAAX,IAAmEH,IAAI,CAACI,IAAL,CAAUC,EAAE,CAACC,IAAH,CAAQC,MAAR,CAAeC,KAAzB,CAAnE,GAAqG,GAAhH;AACD;;AAED,OAAO,MAAMC,gBAAgB,GAAG;AAC9BC,EAAAA,aAAa,EAAE;AACbC,IAAAA,EAAE,EAAE,UADS;AAEbC,IAAAA,IAAI,EAAE,CAFO;AAGbC,IAAAA,WAAW,EAAE,8DAHA;AAIbC,IAAAA,MAAM,EAAE,MAAMd,IAAI,CAACe,GAAL,CAASC,IAAI,CAACC,eAAL,CAAqBC,YAArB,GAAoC,CAA7C,EAAgD,IAAhD,CAJD;AAKbC,IAAAA,YAAY,EAAEvB,KAAK,IAAIwB,OAAO,CAACxB,KAAD,EAAQ,CAAR,EAAW,CAAX,CALjB;AAMbyB,IAAAA,OAAO,EAAE;AACPR,MAAAA,WAAW,EAAE,iFADN;AAEPC,MAAAA,MAAM,EAAE,MAAM,IACZd,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACC,KAAL,CAAWe,IAAI,CAACC,eAAL,CAAqBK,iBAAhC,CAAX,IACAtB,IAAI,CAACe,GAAL,CAASV,EAAE,CAACC,IAAH,CAAQC,MAAR,CAAeC,KAAxB,EAA+B,GAA/B,CADA,GACsC,GAJjC;AAKPW,MAAAA,YAAY,EAAEvB,KAAK,IAAI2B,SAAS,CAAC3B,KAAD,EAAQ,CAAR,EAAW,CAAX;AALzB;AANI,GADe;AAe9B4B,EAAAA,SAAS,EAAE;AACTb,IAAAA,EAAE,EAAE,QADK;AAETC,IAAAA,IAAI,EAAE,CAFG;AAGTa,IAAAA,gBAAgB,EAAE,MAAMC,eAAe,CAAChB,aAAhB,CAA8BiB,QAH7C;AAITd,IAAAA,WAAW,EAAE,yEAJJ;AAKTC,IAAAA,MAAM,EAAE,MAAMrB,eAAe,EALpB;AAMT0B,IAAAA,YAAY,EAAEvB,KAAK,IAAIwB,OAAO,CAACxB,KAAD,EAAQ,CAAR,EAAW,CAAX,CANrB;AAOTyB,IAAAA,OAAO,EAAE;AACPR,MAAAA,WAAW,EAAE,4FADN;AAEPC,MAAAA,MAAM,EAAE,MAAMf,sBAAsB,EAF7B;AAGPoB,MAAAA,YAAY,EAAEvB,KAAK,IAAI2B,SAAS,CAAC3B,KAAD,EAAQ,CAAR,EAAW,CAAX;AAHzB;AAPA,GAfmB;AA4B9BgC,EAAAA,SAAS,EAAE;AACTjB,IAAAA,EAAE,EAAE,QADK;AAETC,IAAAA,IAAI,EAAE,CAFG;AAGTa,IAAAA,gBAAgB,EAAE,MAAMC,eAAe,CAACG,SAAhB,CAA0BF,QAHzC;AAITd,IAAAA,WAAW,EAAE,yEAJJ;AAKTC,IAAAA,MAAM,EAAE,MAAMrB,eAAe,EALpB;AAMT0B,IAAAA,YAAY,EAAEvB,KAAK,IAAIwB,OAAO,CAACxB,KAAD,EAAQ,CAAR,EAAW,CAAX,CANrB;AAOTyB,IAAAA,OAAO,EAAE;AACPR,MAAAA,WAAW,EAAE,4FADN;AAEPC,MAAAA,MAAM,EAAE,MAAMf,sBAAsB,EAF7B;AAGPoB,MAAAA,YAAY,EAAEvB,KAAK,IAAI2B,SAAS,CAAC3B,KAAD,EAAQ,CAAR,EAAW,CAAX;AAHzB;AAPA,GA5BmB;AAyC9BkC,EAAAA,SAAS,EAAE;AACTnB,IAAAA,EAAE,EAAE,QADK;AAETC,IAAAA,IAAI,EAAE,CAFG;AAGTa,IAAAA,gBAAgB,EAAE,MAAMC,eAAe,CAACF,SAAhB,CAA0BG,QAHzC;AAITd,IAAAA,WAAW,EAAE,yEAJJ;AAKTC,IAAAA,MAAM,EAAE,MAAMrB,eAAe,EALpB;AAMT0B,IAAAA,YAAY,EAAEvB,KAAK,IAAIwB,OAAO,CAACxB,KAAD,EAAQ,CAAR,EAAW,CAAX,CANrB;AAOTyB,IAAAA,OAAO,EAAE;AACPR,MAAAA,WAAW,EAAE,4FADN;AAEPC,MAAAA,MAAM,EAAE,MAAMf,sBAAsB,EAF7B;AAGPoB,MAAAA,YAAY,EAAEvB,KAAK,IAAI2B,SAAS,CAAC3B,KAAD,EAAQ,CAAR,EAAW,CAAX;AAHzB;AAPA,GAzCmB;AAsD9BmC,EAAAA,SAAS,EAAE;AACTpB,IAAAA,EAAE,EAAE,QADK;AAETC,IAAAA,IAAI,EAAE,CAFG;AAGTa,IAAAA,gBAAgB,EAAE,MAAMC,eAAe,CAACE,SAAhB,CAA0BD,QAHzC;AAITd,IAAAA,WAAW,EAAE,yEAJJ;AAKTC,IAAAA,MAAM,EAAE,MAAMrB,eAAe,EALpB;AAMT0B,IAAAA,YAAY,EAAEvB,KAAK,IAAIwB,OAAO,CAACxB,KAAD,EAAQ,CAAR,EAAW,CAAX,CANrB;AAOTyB,IAAAA,OAAO,EAAE;AACPR,MAAAA,WAAW,EAAE,4FADN;AAEPC,MAAAA,MAAM,EAAE,MAAMf,sBAAsB,EAF7B;AAGPoB,MAAAA,YAAY,EAAEvB,KAAK,IAAI2B,SAAS,CAAC3B,KAAD,EAAQ,CAAR,EAAW,CAAX;AAHzB;AAPA,GAtDmB;AAmE9BoC,EAAAA,UAAU,EAAE;AACVrB,IAAAA,EAAE,EAAE,YADM;AAEVC,IAAAA,IAAI,EAAE,CAFI;AAGVa,IAAAA,gBAAgB,EAAE,MAAMC,eAAe,CAACI,SAAhB,CAA0BH,QAHxC;AAIVd,IAAAA,WAAW,EAAE,MACV,4FAA2FoB,SAAS,CAAC,CAAD,CAAI,EALjG;AAMVnB,IAAAA,MAAM,EAAE,CANE;AAOVO,IAAAA,OAAO,EAAE;AACPR,MAAAA,WAAW,EAAE,MAAM,4DADZ;AAEPC,MAAAA,MAAM,EAAE,MAAM,KAAK,IAAId,IAAI,CAACI,IAAL,CAAUC,EAAE,CAACC,IAAH,CAAQC,MAAR,CAAeC,KAAzB,IAAkC,EAA3C,CAFP;AAGPW,MAAAA,YAAY,EAAEvB,KAAK,IAAK,GAAEwB,OAAO,CAACxB,KAAD,EAAQ,CAAR,EAAW,CAAX,CAAc;AAHxC;AAPC,GAnEkB;AAgF9BiC,EAAAA,SAAS,EAAE;AACTlB,IAAAA,EAAE,EAAE,SADK;AAETC,IAAAA,IAAI,EAAE,CAFG;AAGTC,IAAAA,WAAW,EAAE,MAAO,sCAAqCoB,SAAS,CAAC,EAAD,CAAK,wBAH9D;AAITnB,IAAAA,MAAM,EAAE,MAAM,GAJL;AAKTK,IAAAA,YAAY,EAAE,MAAO,GAAEC,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAU,MAAKA,OAAO,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,CAAY,EALvD;AAMTC,IAAAA,OAAO,EAAE;AACPR,MAAAA,WAAW,EAAE,MAAO,6BAA4BoB,SAAS,CAAC,EAAD,CAAK,+BAA3C,GACjB,sCAFK;AAGPnB,MAAAA,MAAM,EAAE,MAAM,IAAIT,EAAE,CAACC,IAAH,CAAQC,MAAR,CAAeC,KAAf,GAAuB,GAHlC;AAIPW,MAAAA,YAAY,EAAEvB,KAAK,IAAI2B,SAAS,CAAC3B,KAAD,EAAQ,CAAR,EAAW,CAAX;AAJzB;AANA,GAhFmB;AA6F9BsC,EAAAA,WAAW,EAAE;AACXvB,IAAAA,EAAE,EAAE,aADO;AAEXC,IAAAA,IAAI,EAAE,CAFK;AAGXa,IAAAA,gBAAgB,EAAE,MAAMC,eAAe,CAACK,SAAhB,CAA0BJ,QAHvC;AAIXd,IAAAA,WAAW,EAAE,kCAJF;AAKXC,IAAAA,MAAM,EAAE,CALG;AAMXO,IAAAA,OAAO,EAAE;AACPR,MAAAA,WAAW,EAAE,iDADN;AAEPC,MAAAA,MAAM,EAAE,MAAM,IAAId,IAAI,CAACI,IAAL,CAAUC,EAAE,CAACC,IAAH,CAAQC,MAAR,CAAeC,KAAzB,IAAkC,GAF7C;AAGPW,MAAAA,YAAY,EAAEvB,KAAK,IAAK,IAAGuC,cAAc,CAACvC,KAAK,GAAG,CAAT,CAAY;AAH9C;AANE,GA7FiB;AAyG9BwC,EAAAA,oBAAoB,EAAE;AACpBzB,IAAAA,EAAE,EAAE,WADgB;AAEpBC,IAAAA,IAAI,EAAE,CAFc;AAGpBC,IAAAA,WAAW,EAAE,iFAHO;AAIpBC,IAAAA,MAAM,EAAE,MAAMuB,OAAO,CAACnC,GAAR,CAAYF,IAAI,CAACe,GAAL,CAASC,IAAI,CAACsB,YAAL,CAAkBpB,YAAlB,GAAiC,CAA1C,EAA6C,IAA7C,CAAZ,EAAgE,CAAhE,CAJM;AAKpBC,IAAAA,YAAY,EAAEvB,KAAK,IAAIwB,OAAO,CAACxB,KAAD,EAAQ,CAAR,EAAW,CAAX,CALV;AAMpByB,IAAAA,OAAO,EAAE;AACPR,MAAAA,WAAW,EACT,oGAFK;AAGPC,MAAAA,MAAM,EAAE,MAAM,IACZd,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACC,KAAL,CAAWe,IAAI,CAACsB,YAAL,CAAkBhB,iBAAlB,GAAsC,GAAjD,CAAX,IACAtB,IAAI,CAACI,IAAL,CAAUC,EAAE,CAACC,IAAH,CAAQC,MAAR,CAAeC,KAAzB,CADA,GACkC,GAL7B;AAMPW,MAAAA,YAAY,EAAEvB,KAAK,IAAI2B,SAAS,CAAC3B,KAAD,EAAQ,CAAR,EAAW,CAAX;AANzB;AANW,GAzGQ;AAwH9B2C,EAAAA,aAAa,EAAE;AACb5B,IAAAA,EAAE,EAAE,cADS;AAEbC,IAAAA,IAAI,EAAE,CAFO;AAGba,IAAAA,gBAAgB,EAAE,MAAMC,eAAe,CAACU,oBAAhB,CAAqCT,QAHhD;AAIbd,IAAAA,WAAW,EAAE,yEAJA;AAKbC,IAAAA,MAAM,EAAE,MAAMpB,QAAQ,CAAC8C,cAAT,CAAwB5C,KAAxB,CAA8B6C,SAA9B,CAAwC,CAAxC,EAA2C1B,GAA3C,CAA+C,GAA/C,EAAoDjB,IAApD,CAAyD,CAAzD,CALD;AAMbqB,IAAAA,YAAY,EAAEvB,KAAK,IAAIwB,OAAO,CAACxB,KAAD,EAAQ,CAAR,EAAW,CAAX,CANjB;AAObyB,IAAAA,OAAO,EAAE;AACPR,MAAAA,WAAW,EAAE,kGADN;AAEPC,MAAAA,MAAM,EAAE,MAAMpB,QAAQ,CAAC8C,cAAT,CAAwB5C,KAAxB,CAA8B6C,SAA9B,CAAwC,CAAxC,EAA2C1B,GAA3C,CAA+Cf,IAAI,CAACI,IAAL,CAAUC,EAAE,CAACC,IAAH,CAAQC,MAAR,CAAeC,KAAzB,IAAkC,GAAjF,EAAsFV,IAAtF,CAA2F,CAA3F,CAFP;AAGPqB,MAAAA,YAAY,EAAEvB,KAAK,IAAIwB,OAAO,CAACxB,KAAD,EAAQ,CAAR,EAAW,CAAX;AAHvB;AAPI,GAxHe;AAqI9B8C,EAAAA,YAAY,EAAE;AACZ/B,IAAAA,EAAE,EAAE,WADQ;AAEZC,IAAAA,IAAI,EAAE,CAFM;AAGZa,IAAAA,gBAAgB,EAAE,MAAMC,eAAe,CAACa,aAAhB,CAA8BZ,QAH1C;AAIZd,IAAAA,WAAW,EAAE,qCAJD;AAKZC,IAAAA,MAAM,EAAE,MAAM,GALF;AAMZK,IAAAA,YAAY,EAAE,MAAO,GAAEC,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAU,MAAKA,OAAO,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,CAAY,EANpD;AAOZC,IAAAA,OAAO,EAAE;AACPR,MAAAA,WAAW,EAAE,uEADN;AAEPC,MAAAA,MAAM,EAAE,MAAM,IAAIT,EAAE,CAACC,IAAH,CAAQC,MAAR,CAAeC,KAAf,GAAuB,GAFlC;AAGPW,MAAAA,YAAY,EAAEvB,KAAK,IAAI2B,SAAS,CAAC3B,KAAD,EAAQ,CAAR,EAAW,CAAX;AAHzB;AAPG,GArIgB;AAkJ9B+C,EAAAA,KAAK,EAAE;AACLhC,IAAAA,EAAE,EAAE,YADC;AAELC,IAAAA,IAAI,EAAE,EAFD;AAGLa,IAAAA,gBAAgB,EAAE,MAAMC,eAAe,CAACgB,YAAhB,CAA6Bf,QAHhD;AAILd,IAAAA,WAAW,EAAE,MAAO,sCAAqCoB,SAAS,CAAC,EAAD,CAAK,0CAJlE;AAKL;AACAnB,IAAAA,MAAM,EAAE,MAAO8B,MAAM,CAACC,SAAP,IAAoBC,CAAC,CAACD,SAAtB,IAAmCE,KAAK,CAACC,QAAzC,GAAoDxD,EAAE,CAACyD,EAAvD,GAA4DC,SAAS,CAACC,WAAV,CAAsBvD,KAN5F;AAOLuB,IAAAA,YAAY,EAAEvB,KAAK,IAAI;AACrB,UAAIgD,MAAM,CAACC,SAAP,IAAoBC,CAAC,CAACD,SAA1B,EAAqC,OAAO,0BAAP;AACrC,UAAIE,KAAK,CAACC,QAAV,EAAoB,OAAO,UAAP;AACpB,UAAII,MAAM,CAACC,OAAP,CAAeC,YAAf,CAA4BC,IAA5B,IAAoC,YAAxC,EAAsD,OAAO,sBAAP;AACtD,aAAQ,GAAEC,MAAM,CAAC5D,KAAD,EAAQ,CAAR,CAAW,UAASoB,IAAI,CAACsC,YAAL,CAAkBzD,KAAlB,CAAwB,EAAxB,EAA4B4D,aAA5B,EAA4C,EAAhF;AACD,KAZI;AAaLpC,IAAAA,OAAO,EAAE;AACPR,MAAAA,WAAW,EAAE,MACV;AACT,qCAHa;AAIPC,MAAAA,MAAM,EAAE,MAAMd,IAAI,CAACe,GAAL,CAASV,EAAE,CAACC,IAAH,CAAQC,MAAR,CAAeC,KAAxB,EAA+B,CAA/B,IACZH,EAAE,CAACqD,OAAH,CAAWC,iBAAX,CAA6BC,OAA7B,CAAqCC,YAArC,CAAkDC,eAAlD,CAAkE,CAAlE,CALK;AAMP3C,MAAAA,YAAY,EAAEvB,KAAK,IAAIwB,OAAO,CAACxB,KAAD,EAAQ,CAAR,EAAW,CAAX;AANvB;AAbJ,GAlJuB;AAwK9BmE,EAAAA,UAAU,EAAE;AACVpD,IAAAA,EAAE,EAAE,YADM;AAEVC,IAAAA,IAAI,EAAE,EAFI;AAGVC,IAAAA,WAAW,EAAE,MACV,0BAAyBoB,SAAS,CAAC,CAAD,CAAI;AAJ/B,GAxKkB;AA8K9B+B,EAAAA,UAAU,EAAE;AACVrD,IAAAA,EAAE,EAAE,YADM;AAEVC,IAAAA,IAAI,EAAE,EAFI;AAGVa,IAAAA,gBAAgB,EAAE,MAAMC,eAAe,CAACqC,UAAhB,CAA2BpC,QAHzC;AAIVd,IAAAA,WAAW,EAAE,MACV,0BAAyBoB,SAAS,CAAC,CAAD,CAAI;AAL/B,GA9KkB;AAqL9BgC,EAAAA,UAAU,EAAE;AACVtD,IAAAA,EAAE,EAAE,YADM;AAEVC,IAAAA,IAAI,EAAE,EAFI;AAGVa,IAAAA,gBAAgB,EAAE,MAAMC,eAAe,CAACsC,UAAhB,CAA2BrC,QAHzC;AAIVd,IAAAA,WAAW,EAAE,MACV,0BAAyBoB,SAAS,CAAC,CAAD,CAAI;AAL/B,GArLkB;AA4L9BiC,EAAAA,eAAe,EAAE;AACfvD,IAAAA,EAAE,EAAE,iBADW;AAEfC,IAAAA,IAAI,EAAE,GAFS;AAGfa,IAAAA,gBAAgB,EAAE,MAAMC,eAAe,CAACuC,UAAhB,CAA2BtC,QAHpC;AAIfd,IAAAA,WAAW,EAAE,MACV,0BAAyBoB,SAAS,CAAC,CAAD,CAAI;AAC7C;AANmB,GA5La;AAoM9BkC,EAAAA,SAAS,EAAE;AACTxD,IAAAA,EAAE,EAAE,WADK;AAETC,IAAAA,IAAI,EAAE,IAFG;AAGTa,IAAAA,gBAAgB,EAAE,MAAM2C,WAAW,CAAC,EAAD,CAAX,CAAgBC,UAH/B;AAITxD,IAAAA,WAAW,EAAE,MAAOuC,MAAM,CAACkB,OAAP,CAAeC,eAAf,GACf,4BAA2BpC,cAAc,CAAC,GAAD,CAAM,4CADhC,GAEhB,uGANK;AAOTrB,IAAAA,MAAM,EAAE,MAAOsC,MAAM,CAACkB,OAAP,CAAeC,eAAf,GACXnB,MAAM,CAACC,OAAP,CAAemB,YAAf,CAA4BC,qBAA5B,CAAkD5E,KAAlD,CAAwD6E,QAAQ,CAACC,WAAT,CAAqB,CAArB,EAAwBrD,iBAAxB,GAA4C,CAApG,CADW,GAEX9B,EAAE,CAACyD,EATE;AAUT2B,IAAAA,UAAU,EAAE,MAAM,CAACxB,MAAM,CAACkB,OAAP,CAAeC,eAVzB;AAWTpD,IAAAA,YAAY,EAAEvB,KAAK,IAAK,GAAE4D,MAAM,CAAC5D,KAAD,EAAQ,CAAR,EAAW,CAAX,CAAc;AAXrC,GApMmB;AAiN9BiF,EAAAA,MAAM,EAAE;AACNlE,IAAAA,EAAE,EAAE,QADE;AAENC,IAAAA,IAAI,EAAE,MAAMc,eAAe,CAACmD,MAAhB,CAAuBjE,IAF7B;AAGNa,IAAAA,gBAAgB,EAAE,MAAM2C,WAAW,CAAC,EAAD,CAAX,CAAgBC,UAHlC;AAINS,IAAAA,OAAO,EAAEtF,EAAE,CAACuF,IAJN;AAKNC,IAAAA,qBAAqB,EAAExF,EAAE,CAACyF,IALpB;AAMNpE,IAAAA,WAAW,EAAE,MAAO,gDAA+CO,OAAO,CAAC,CAAD,CAAI,EANxE;AAON;AACA;AACAN,IAAAA,MAAM,EAAE,MAAOsC,MAAM,CAAC8B,eAAP,IAA0B,OAA1B,GAAoC1F,EAAE,CAAC2F,IAAvC,GAA8C3F,EAAE,CAAC4F,EAAH,CAAMrE,GAAN,CAAUqC,MAAM,CAAC8B,eAAjB,CATvD;AAUNG,IAAAA,GAAG,EAAE;AAAA;;AAAA,qCAAMC,OAAO,CAACC,WAAd,uEAA6B/F,EAAE,CAAC2F,IAAhC;AAAA,KAVC;AAWNhE,IAAAA,YAAY,EAAEvB,KAAK,IAAIwB,OAAO,CAACxB,KAAD,EAAQ,CAAR,EAAW,CAAX;AAXxB;AAjNsB,CAAzB","sourcesContent":["import { DC } from \"../../constants\";\r\n\r\nfunction dimInfinityMult() {\r\n  return Currency.infinitiesTotal.value.times(0.2).plus(1);\r\n}\r\nfunction chargedDimInfinityMult() {\r\n  return 1 + Math.log10(Math.max(1, Currency.infinitiesTotal.value.pLog10())) * Math.sqrt(Ra.pets.teresa.level) / 150;\r\n}\r\n\r\nexport const infinityUpgrades = {\r\n  totalTimeMult: {\r\n    id: \"timeMult\",\r\n    cost: 1,\r\n    description: \"Antimatter Dimensions gain a multiplier based on time played\",\r\n    effect: () => Math.pow(Time.totalTimePlayed.totalMinutes / 2, 0.15),\r\n    formatEffect: value => formatX(value, 2, 2),\r\n    charged: {\r\n      description: \"Antimatter Dimensions gain a power effect based on time played and Teresa level\",\r\n      effect: () => 1 +\r\n        Math.log10(Math.log10(Time.totalTimePlayed.totalMilliseconds)) *\r\n        Math.pow(Ra.pets.teresa.level, 0.5) / 150,\r\n      formatEffect: value => formatPow(value, 4, 4)\r\n    }\r\n  },\r\n  dim18mult: {\r\n    id: \"18Mult\",\r\n    cost: 1,\r\n    checkRequirement: () => InfinityUpgrade.totalTimeMult.isBought,\r\n    description: \"1st and 8th Antimatter Dimensions gain a multiplier based on Infinities\",\r\n    effect: () => dimInfinityMult(),\r\n    formatEffect: value => formatX(value, 1, 1),\r\n    charged: {\r\n      description: \"1st and 8th Antimatter Dimensions gain a power effect based on Infinities and Teresa level\",\r\n      effect: () => chargedDimInfinityMult(),\r\n      formatEffect: value => formatPow(value, 4, 4)\r\n    }\r\n  },\r\n  dim27mult: {\r\n    id: \"27Mult\",\r\n    cost: 1,\r\n    checkRequirement: () => InfinityUpgrade.buy10Mult.isBought,\r\n    description: \"2nd and 7th Antimatter Dimensions gain a multiplier based on Infinities\",\r\n    effect: () => dimInfinityMult(),\r\n    formatEffect: value => formatX(value, 1, 1),\r\n    charged: {\r\n      description: \"2nd and 7th Antimatter Dimensions gain a power effect based on Infinities and Teresa level\",\r\n      effect: () => chargedDimInfinityMult(),\r\n      formatEffect: value => formatPow(value, 4, 4)\r\n    }\r\n  },\r\n  dim36mult: {\r\n    id: \"36Mult\",\r\n    cost: 1,\r\n    checkRequirement: () => InfinityUpgrade.dim18mult.isBought,\r\n    description: \"3rd and 6th Antimatter Dimensions gain a multiplier based on Infinities\",\r\n    effect: () => dimInfinityMult(),\r\n    formatEffect: value => formatX(value, 1, 1),\r\n    charged: {\r\n      description: \"3rd and 6th Antimatter Dimensions gain a power effect based on Infinities and Teresa level\",\r\n      effect: () => chargedDimInfinityMult(),\r\n      formatEffect: value => formatPow(value, 4, 4)\r\n    }\r\n  },\r\n  dim45mult: {\r\n    id: \"45Mult\",\r\n    cost: 1,\r\n    checkRequirement: () => InfinityUpgrade.dim27mult.isBought,\r\n    description: \"4th and 5th Antimatter Dimensions gain a multiplier based on Infinities\",\r\n    effect: () => dimInfinityMult(),\r\n    formatEffect: value => formatX(value, 1, 1),\r\n    charged: {\r\n      description: \"4th and 5th Antimatter Dimensions gain a power effect based on Infinities and Teresa level\",\r\n      effect: () => chargedDimInfinityMult(),\r\n      formatEffect: value => formatPow(value, 4, 4)\r\n    }\r\n  },\r\n  resetBoost: {\r\n    id: \"resetBoost\",\r\n    cost: 1,\r\n    checkRequirement: () => InfinityUpgrade.dim36mult.isBought,\r\n    description: () =>\r\n      `Decrease the number of Dimensions needed for Dimension Boosts and Antimatter Galaxies by ${formatInt(9)}`,\r\n    effect: 9,\r\n    charged: {\r\n      description: () => \"Decrease Dimension Boost requirement based on Teresa level\",\r\n      effect: () => 1 / (1 + Math.sqrt(Ra.pets.teresa.level) / 10),\r\n      formatEffect: value => `${formatX(value, 4, 4)}`\r\n    }\r\n  },\r\n  buy10Mult: {\r\n    id: \"dimMult\",\r\n    cost: 1,\r\n    description: () => `Increase the multiplier for buying ${formatInt(10)} Antimatter Dimensions`,\r\n    effect: () => 1.1,\r\n    formatEffect: () => `${formatX(2, 0, 1)} ➜ ${formatX(2.2, 0, 1)}`,\r\n    charged: {\r\n      description: () => `The multiplier for buying ${formatInt(10)} Antimatter Dimensions gains ` +\r\n        \"a power effect based on Teresa level\",\r\n      effect: () => 1 + Ra.pets.teresa.level / 200,\r\n      formatEffect: value => formatPow(value, 3, 3)\r\n    }\r\n  },\r\n  galaxyBoost: {\r\n    id: \"galaxyBoost\",\r\n    cost: 2,\r\n    checkRequirement: () => InfinityUpgrade.dim45mult.isBought,\r\n    description: \"All Galaxies are twice as strong\",\r\n    effect: 2,\r\n    charged: {\r\n      description: \"All Galaxies are stronger based on Teresa level\",\r\n      effect: () => 2 + Math.sqrt(Ra.pets.teresa.level) / 100,\r\n      formatEffect: value => `+${formatPercents(value - 1)}`\r\n    }\r\n  },\r\n  thisInfinityTimeMult: {\r\n    id: \"timeMult2\",\r\n    cost: 3,\r\n    description: \"Antimatter Dimensions gain a multiplier based on time spent in current Infinity\",\r\n    effect: () => Decimal.max(Math.pow(Time.thisInfinity.totalMinutes / 4, 0.25), 1),\r\n    formatEffect: value => formatX(value, 2, 2),\r\n    charged: {\r\n      description:\r\n        \"Antimatter Dimensions gain a power effect based on time spent in current Infinity and Teresa level\",\r\n      effect: () => 1 +\r\n        Math.log10(Math.log10(Time.thisInfinity.totalMilliseconds + 100)) *\r\n        Math.sqrt(Ra.pets.teresa.level) / 150,\r\n      formatEffect: value => formatPow(value, 4, 4)\r\n    }\r\n  },\r\n  unspentIPMult: {\r\n    id: \"unspentBonus\",\r\n    cost: 5,\r\n    checkRequirement: () => InfinityUpgrade.thisInfinityTimeMult.isBought,\r\n    description: \"Multiplier to 1st Antimatter Dimension based on unspent Infinity Points\",\r\n    effect: () => Currency.infinityPoints.value.dividedBy(2).pow(1.5).plus(1),\r\n    formatEffect: value => formatX(value, 2, 2),\r\n    charged: {\r\n      description: \"Multiplier to 1st Antimatter Dimension based on unspent Infinity Points, powered by Teresa level\",\r\n      effect: () => Currency.infinityPoints.value.dividedBy(2).pow(Math.sqrt(Ra.pets.teresa.level) * 1.5).plus(1),\r\n      formatEffect: value => formatX(value, 2, 2)\r\n    }\r\n  },\r\n  dimboostMult: {\r\n    id: \"resetMult\",\r\n    cost: 7,\r\n    checkRequirement: () => InfinityUpgrade.unspentIPMult.isBought,\r\n    description: \"Increase Dimension Boost multiplier\",\r\n    effect: () => 2.5,\r\n    formatEffect: () => `${formatX(2, 0, 1)} ➜ ${formatX(2.5, 0, 1)}`,\r\n    charged: {\r\n      description: \"Dimension Boost multiplier gains a power effect based on Teresa level\",\r\n      effect: () => 1 + Ra.pets.teresa.level / 200,\r\n      formatEffect: value => formatPow(value, 3, 3)\r\n    }\r\n  },\r\n  ipGen: {\r\n    id: \"passiveGen\",\r\n    cost: 10,\r\n    checkRequirement: () => InfinityUpgrade.dimboostMult.isBought,\r\n    description: () => `Passively generate Infinity Points ${formatInt(10)} times slower than your fastest Infinity`,\r\n    // Cutting corners: this is not actual effect, but it is totalIPMult that is displyed on upgrade\r\n    effect: () => (Teresa.isRunning || V.isRunning || Pelle.isDoomed ? DC.D0 : GameCache.totalIPMult.value),\r\n    formatEffect: value => {\r\n      if (Teresa.isRunning || V.isRunning) return \"Disabled in this reality\";\r\n      if (Pelle.isDoomed) return \"Disabled\";\r\n      if (player.records.bestInfinity.time >= 999999999999) return \"Too slow to generate\";\r\n      return `${format(value, 2)} every ${Time.bestInfinity.times(10).toStringShort()}`;\r\n    },\r\n    charged: {\r\n      description: () =>\r\n        `Gain Reality Machines each real-time second proportional to amount gained on Reality,\r\n        increasing with Teresa level`,\r\n      effect: () => Math.pow(Ra.pets.teresa.level, 2) *\r\n        Ra.unlocks.continuousTTBoost.effects.autoPrestige.effectOrDefault(1),\r\n      formatEffect: value => formatX(value, 2, 1)\r\n    }\r\n  },\r\n  skipReset1: {\r\n    id: \"skipReset1\",\r\n    cost: 20,\r\n    description: () =>\r\n      `Start every reset with ${formatInt(1)} Dimension Boost, automatically unlocking the 5th Antimatter Dimension`,\r\n  },\r\n  skipReset2: {\r\n    id: \"skipReset2\",\r\n    cost: 40,\r\n    checkRequirement: () => InfinityUpgrade.skipReset1.isBought,\r\n    description: () =>\r\n      `Start every reset with ${formatInt(2)} Dimension Boosts, automatically unlocking the 6th Antimatter Dimension`,\r\n  },\r\n  skipReset3: {\r\n    id: \"skipReset3\",\r\n    cost: 80,\r\n    checkRequirement: () => InfinityUpgrade.skipReset2.isBought,\r\n    description: () =>\r\n      `Start every reset with ${formatInt(3)} Dimension Boosts, automatically unlocking the 7th Antimatter Dimension`,\r\n  },\r\n  skipResetGalaxy: {\r\n    id: \"skipResetGalaxy\",\r\n    cost: 300,\r\n    checkRequirement: () => InfinityUpgrade.skipReset3.isBought,\r\n    description: () =>\r\n      `Start every reset with ${formatInt(4)} Dimension Boosts, automatically unlocking the 8th Antimatter Dimension;\r\n      and an Antimatter Galaxy`,\r\n  },\r\n  ipOffline: {\r\n    id: \"ipOffline\",\r\n    cost: 1000,\r\n    checkRequirement: () => Achievement(41).isUnlocked,\r\n    description: () => (player.options.offlineProgress\r\n      ? `Only while offline, gain ${formatPercents(0.5)} of your best IP/min without using Max All`\r\n      : \"This upgrade would give offline Infinity Point generation, but offline progress is currently disabled\"),\r\n    effect: () => (player.options.offlineProgress\r\n      ? player.records.thisEternity.bestIPMsWithoutMaxAll.times(TimeSpan.fromMinutes(1).totalMilliseconds / 2)\r\n      : DC.D0),\r\n    isDisabled: () => !player.options.offlineProgress,\r\n    formatEffect: value => `${format(value, 2, 2)} IP/min`,\r\n  },\r\n  ipMult: {\r\n    id: \"ipMult\",\r\n    cost: () => InfinityUpgrade.ipMult.cost,\r\n    checkRequirement: () => Achievement(41).isUnlocked,\r\n    costCap: DC.E6E6,\r\n    costIncreaseThreshold: DC.E3E6,\r\n    description: () => `Multiply Infinity Points from all sources by ${formatX(2)}`,\r\n    // Normally the multiplier caps at e993k or so with 3300000 purchases, but if the cost is capped then we just give\r\n    // an extra e7k to make the multiplier look nice\r\n    effect: () => (player.IPMultPurchases >= 3300000 ? DC.E1E6 : DC.D2.pow(player.IPMultPurchases)),\r\n    cap: () => Effarig.eternityCap ?? DC.E1E6,\r\n    formatEffect: value => formatX(value, 2, 2),\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}