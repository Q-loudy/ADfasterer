{"ast":null,"code":"import \"core-js/modules/es.symbol.description.js\";\nimport { GameMechanicState } from \"../game-mechanics\";\n\nclass GameProgressState extends GameMechanicState {\n  get id() {\n    return this.config.id;\n  }\n\n  get name() {\n    return this.config.name;\n  }\n\n  get suggestedResource() {\n    return typeof this.config.suggestedResource === \"function\" ? this.config.suggestedResource() : this.config.suggestedResource;\n  }\n\n}\n\nexport const GameProgress = GameProgressState.createAccessor(GameDatabase.progressStages);\nGameProgress.all = GameDatabase.progressStages;\n\nclass CatchupResource extends GameMechanicState {\n  get requiredStage() {\n    return this.config.requiredStage;\n  }\n\n  get name() {\n    return this.config.name;\n  }\n\n  get description() {\n    return typeof this.config.description === \"function\" ? this.config.description() : this.config.description;\n  }\n\n}\n\nexport const CatchupResources = mapGameDataToObject(GameDatabase.catchupResources, config => new CatchupResource(config));\nexport const ProgressChecker = {\n  getProgressStage(save) {\n    const db = GameProgress.all;\n\n    for (let stage = db.length - 1; stage >= 0; stage--) {\n      if (db[stage].hasReached(save)) return db[stage];\n    }\n\n    throw Error(\"No valid progress stage found\");\n  },\n\n  // Returns a value corresponding to keys in PROGRESS_STAGE, with a rough interpolation between stages\n  getCompositeProgress(save) {\n    if (!save) return 0;\n    const stage = this.getProgressStage(save);\n    return stage.id + Math.clampMax(stage.subProgressValue(save), 1);\n  },\n\n  // Returns -1 or 1 when one save is very likely to be farther than the other, otherwise returns 0 if they're close\n  compareSaveProgress(first, second) {\n    const progressDifference = this.getCompositeProgress(first) - this.getCompositeProgress(second);\n    if (progressDifference > 0.05) return -1;\n    if (progressDifference < -0.05) return 1;\n    return 0;\n  },\n\n  // Returns -1 or 1 based on which save is older. Returns 0 if one is undefined, will be handled upstream\n  compareSaveTimes(first, second) {\n    var _first$records, _second$records;\n\n    if (!first || !second) return 0;\n    const timeDifference = ((_first$records = first.records) === null || _first$records === void 0 ? void 0 : _first$records.realTimePlayed) - ((_second$records = second.records) === null || _second$records === void 0 ? void 0 : _second$records.realTimePlayed);\n    if (timeDifference >= 0) return -1;\n    return 1;\n  }\n\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/storage/progress-checker.js"],"names":["GameMechanicState","GameProgressState","id","config","name","suggestedResource","GameProgress","createAccessor","GameDatabase","progressStages","all","CatchupResource","requiredStage","description","CatchupResources","mapGameDataToObject","catchupResources","ProgressChecker","getProgressStage","save","db","stage","length","hasReached","Error","getCompositeProgress","Math","clampMax","subProgressValue","compareSaveProgress","first","second","progressDifference","compareSaveTimes","timeDifference","records","realTimePlayed"],"mappings":"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","sourcesContent":["import { GameMechanicState } from \"../game-mechanics\";\r\n\r\nclass GameProgressState extends GameMechanicState {\r\n  get id() {\r\n    return this.config.id;\r\n  }\r\n\r\n  get name() {\r\n    return this.config.name;\r\n  }\r\n\r\n  get suggestedResource() {\r\n    return typeof this.config.suggestedResource === \"function\"\r\n      ? this.config.suggestedResource()\r\n      : this.config.suggestedResource;\r\n  }\r\n}\r\n\r\nexport const GameProgress = GameProgressState.createAccessor(GameDatabase.progressStages);\r\nGameProgress.all = GameDatabase.progressStages;\r\n\r\nclass CatchupResource extends GameMechanicState {\r\n  get requiredStage() {\r\n    return this.config.requiredStage;\r\n  }\r\n\r\n  get name() {\r\n    return this.config.name;\r\n  }\r\n\r\n  get description() {\r\n    return typeof this.config.description === \"function\" ? this.config.description() : this.config.description;\r\n  }\r\n}\r\n\r\nexport const CatchupResources = mapGameDataToObject(\r\n  GameDatabase.catchupResources,\r\n  config => new CatchupResource(config)\r\n);\r\n\r\nexport const ProgressChecker = {\r\n  getProgressStage(save) {\r\n    const db = GameProgress.all;\r\n    for (let stage = db.length - 1; stage >= 0; stage--) {\r\n      if (db[stage].hasReached(save)) return db[stage];\r\n    }\r\n    throw Error(\"No valid progress stage found\");\r\n  },\r\n\r\n  // Returns a value corresponding to keys in PROGRESS_STAGE, with a rough interpolation between stages\r\n  getCompositeProgress(save) {\r\n    if (!save) return 0;\r\n    const stage = this.getProgressStage(save);\r\n    return stage.id + Math.clampMax(stage.subProgressValue(save), 1);\r\n  },\r\n\r\n  // Returns -1 or 1 when one save is very likely to be farther than the other, otherwise returns 0 if they're close\r\n  compareSaveProgress(first, second) {\r\n    const progressDifference = this.getCompositeProgress(first) - this.getCompositeProgress(second);\r\n    if (progressDifference > 0.05) return -1;\r\n    if (progressDifference < -0.05) return 1;\r\n    return 0;\r\n  },\r\n\r\n  // Returns -1 or 1 based on which save is older. Returns 0 if one is undefined, will be handled upstream\r\n  compareSaveTimes(first, second) {\r\n    if (!first || !second) return 0;\r\n    const timeDifference = first.records?.realTimePlayed - second.records?.realTimePlayed;\r\n    if (timeDifference >= 0) return -1;\r\n    return 1;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}