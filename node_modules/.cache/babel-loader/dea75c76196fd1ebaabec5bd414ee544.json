{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport Mousetrap from \"mousetrap\"; // Add all numpad keys to Mousetrap (keycodes 97-105 correspond to numpad 1-9)\n\nconst numpadKeys = {};\n\nfor (let num = 1; num <= 9; num++) numpadKeys[num + 96] = `num${num}`;\n\nMousetrap.addKeycodes(numpadKeys);\n\nfunction getKeys(combination) {\n  return combination.split(\"+\");\n} // Extract \"a\" from \"a\", \"shift+a\", \"shift+alt+a\" and whatever else\n// Returns undefined for mod-only combos, like \"shift+alt\"\n\n\nconst modifierKeys = [\"ctrl\", \"shift\", \"alt\", \"mod\"];\n\nfunction getMainKey(keys) {\n  return keys.find(key => !modifierKeys.includes(key));\n}\n\nclass KeySpin {\n  constructor(key) {\n    this.key = key;\n  }\n\n  setAction(keys, action) {\n    if (keys.includes(\"shift\")) {\n      this.shiftAction = action;\n    } else {\n      this.action = action;\n    }\n  }\n\n  start() {\n    if (this.isRunning) {\n      return;\n    }\n\n    this.isRunning = true;\n    this.executeAction();\n    this.interval = setInterval(() => {\n      clearInterval(this.interval);\n      this.executeAction();\n      this.interval = setInterval(() => this.executeAction(), 40);\n    }, 500);\n  }\n\n  executeAction() {\n    if (ui.view.shiftDown && this.shiftAction !== undefined) {\n      this.shiftAction();\n    } else if (this.action !== undefined) {\n      this.action();\n    }\n  }\n\n  probablyStop() {\n    // Goddamn, Mousetrap\n    // It doesn't call keyup \"1\" for the case where you have \"shift+1\" pressed,\n    // and you release the \"1\" key. Instead, it will call the keyup for \"shift+1\"\n    // To fix this issue, we will stop on \"shift+1\", but only if we know that\n    // shift is pressed, and that's what's in the ui.view.shiftDown\n    if (ui.view.shiftDown) {\n      this.stop();\n    }\n  }\n\n  stop() {\n    this.isRunning = false;\n\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n\n    this.interval = undefined;\n  }\n\n}\n\nexport class GameKeyboard {\n  static stopSpins() {\n    for (const spin of spins) {\n      spin.stop();\n    }\n  }\n\n  static bind(key, callback, type) {\n    Mousetrap.bind(key, () => executeKey(callback), type);\n  }\n\n  static bindRepeatable(key, callback) {\n    this._bindSpin(key, () => executeKey(callback));\n  }\n\n  static bindHotkey(key, callback, type) {\n    Mousetrap.bind(key, () => executeHotkey(callback), type);\n  }\n\n  static bindRepeatableHotkey(key, callback) {\n    this._bindSpin(key, () => executeHotkey(callback));\n  }\n\n  static _bindSpin(combination, action) {\n    const keys = getKeys(combination);\n    const mainKey = getMainKey(keys);\n    let spin = spins.find(s => s.key === mainKey);\n\n    if (spin === undefined) {\n      spin = new KeySpin(mainKey);\n      spins.push(spin);\n      Mousetrap.bind(mainKey, () => spin.start(), \"keydown\");\n      Mousetrap.bind(mainKey, () => spin.stop(), \"keyup\");\n    }\n\n    if (combination !== mainKey) {\n      Mousetrap.bind(combination, () => spin.start(), \"keydown\");\n      Mousetrap.bind(combination, () => spin.probablyStop(), \"keyup\");\n    }\n\n    spin.setAction(keys, action);\n  }\n\n  static disable() {\n    this.stopSpins();\n    Mousetrap.reset();\n  }\n\n}\nconst spins = [];\n\nfunction executeKey(action) {\n  if (ui.$viewModel.modal.progressBar !== undefined || GameEnd.endState >= END_STATE_MARKERS.INTERACTIVITY_DISABLED) {\n    return undefined;\n  }\n\n  return action();\n}\n\nfunction executeHotkey(action) {\n  if (!player.options.hotkeys || document.activeElement.type === \"text\" || document.activeElement.type === \"textarea\") {\n    return undefined;\n  }\n\n  return executeKey(action);\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/keyboard.js"],"names":["Mousetrap","numpadKeys","num","addKeycodes","getKeys","combination","split","modifierKeys","getMainKey","keys","find","key","includes","KeySpin","constructor","setAction","action","shiftAction","start","isRunning","executeAction","interval","setInterval","clearInterval","ui","view","shiftDown","undefined","probablyStop","stop","GameKeyboard","stopSpins","spin","spins","bind","callback","type","executeKey","bindRepeatable","_bindSpin","bindHotkey","executeHotkey","bindRepeatableHotkey","mainKey","s","push","disable","reset","$viewModel","modal","progressBar","GameEnd","endState","END_STATE_MARKERS","INTERACTIVITY_DISABLED","player","options","hotkeys","document","activeElement"],"mappings":"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","sourcesContent":["import Mousetrap from \"mousetrap\";\r\n\r\n// Add all numpad keys to Mousetrap (keycodes 97-105 correspond to numpad 1-9)\r\nconst numpadKeys = {};\r\nfor (let num = 1; num <= 9; num++) numpadKeys[num + 96] = `num${num}`;\r\nMousetrap.addKeycodes(numpadKeys);\r\n\r\nfunction getKeys(combination) {\r\n  return combination.split(\"+\");\r\n}\r\n\r\n// Extract \"a\" from \"a\", \"shift+a\", \"shift+alt+a\" and whatever else\r\n// Returns undefined for mod-only combos, like \"shift+alt\"\r\nconst modifierKeys = [\"ctrl\", \"shift\", \"alt\", \"mod\"];\r\nfunction getMainKey(keys) {\r\n  return keys.find(key => !modifierKeys.includes(key));\r\n}\r\n\r\nclass KeySpin {\r\n  constructor(key) {\r\n    this.key = key;\r\n  }\r\n\r\n  setAction(keys, action) {\r\n    if (keys.includes(\"shift\")) {\r\n      this.shiftAction = action;\r\n    } else {\r\n      this.action = action;\r\n    }\r\n  }\r\n\r\n  start() {\r\n    if (this.isRunning) {\r\n      return;\r\n    }\r\n    this.isRunning = true;\r\n    this.executeAction();\r\n    this.interval = setInterval(() => {\r\n      clearInterval(this.interval);\r\n      this.executeAction();\r\n      this.interval = setInterval(() => this.executeAction(), 40);\r\n    }, 500);\r\n  }\r\n\r\n  executeAction() {\r\n    if (ui.view.shiftDown && this.shiftAction !== undefined) {\r\n      this.shiftAction();\r\n    } else if (this.action !== undefined) {\r\n      this.action();\r\n    }\r\n  }\r\n\r\n  probablyStop() {\r\n    // Goddamn, Mousetrap\r\n    // It doesn't call keyup \"1\" for the case where you have \"shift+1\" pressed,\r\n    // and you release the \"1\" key. Instead, it will call the keyup for \"shift+1\"\r\n    // To fix this issue, we will stop on \"shift+1\", but only if we know that\r\n    // shift is pressed, and that's what's in the ui.view.shiftDown\r\n    if (ui.view.shiftDown) {\r\n      this.stop();\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    this.isRunning = false;\r\n    if (this.interval) {\r\n      clearInterval(this.interval);\r\n    }\r\n    this.interval = undefined;\r\n  }\r\n}\r\n\r\nexport class GameKeyboard {\r\n  static stopSpins() {\r\n    for (const spin of spins) {\r\n      spin.stop();\r\n    }\r\n  }\r\n\r\n  static bind(key, callback, type) {\r\n    Mousetrap.bind(key, () => executeKey(callback), type);\r\n  }\r\n\r\n  static bindRepeatable(key, callback) {\r\n    this._bindSpin(key, () => executeKey(callback));\r\n  }\r\n\r\n  static bindHotkey(key, callback, type) {\r\n    Mousetrap.bind(key, () => executeHotkey(callback), type);\r\n  }\r\n\r\n  static bindRepeatableHotkey(key, callback) {\r\n    this._bindSpin(key, () => executeHotkey(callback));\r\n  }\r\n\r\n  static _bindSpin(combination, action) {\r\n    const keys = getKeys(combination);\r\n    const mainKey = getMainKey(keys);\r\n    let spin = spins.find(s => s.key === mainKey);\r\n    if (spin === undefined) {\r\n      spin = new KeySpin(mainKey);\r\n      spins.push(spin);\r\n      Mousetrap.bind(mainKey, () => spin.start(), \"keydown\");\r\n      Mousetrap.bind(mainKey, () => spin.stop(), \"keyup\");\r\n    }\r\n\r\n    if (combination !== mainKey) {\r\n      Mousetrap.bind(combination, () => spin.start(), \"keydown\");\r\n      Mousetrap.bind(combination, () => spin.probablyStop(), \"keyup\");\r\n    }\r\n\r\n    spin.setAction(keys, action);\r\n  }\r\n\r\n  static disable() {\r\n    this.stopSpins();\r\n    Mousetrap.reset();\r\n  }\r\n}\r\n\r\nconst spins = [];\r\n\r\nfunction executeKey(action) {\r\n  if (ui.$viewModel.modal.progressBar !== undefined || GameEnd.endState >= END_STATE_MARKERS.INTERACTIVITY_DISABLED) {\r\n    return undefined;\r\n  }\r\n  return action();\r\n}\r\n\r\nfunction executeHotkey(action) {\r\n  if (!player.options.hotkeys ||\r\n    document.activeElement.type === \"text\" ||\r\n    document.activeElement.type === \"textarea\") {\r\n    return undefined;\r\n  }\r\n  return executeKey(action);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}