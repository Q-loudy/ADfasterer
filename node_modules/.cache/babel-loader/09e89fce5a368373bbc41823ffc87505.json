{"ast":null,"code":"import { DC } from \"../../constants\";\nimport wordShift from \"../../word-shift\";\nexport const pelleRifts = {\n  vacuum: {\n    id: 1,\n    key: \"vacuum\",\n    name: [\"Vacuum\", \"Hollow\", \"Void\"],\n    drainResource: \"IP\",\n    baseEffect: x => `IP gain ${formatX(x, 2, 2)}`,\n    additionalEffects: () => [PelleRifts.vacuum.milestones[2]],\n    strike: () => PelleStrikes.infinity,\n    percentage: totalFill => Math.log10(totalFill.plus(1).log10() * 10 + 1) ** 2.5 / 100,\n    percentageToFill: percentage => Decimal.pow(10, Decimal.pow(10, (percentage * 100) ** (1 / 2.5)).div(10).minus(0.1)).minus(1),\n    effect: totalFill => {\n      if (player.challenge.eternity.current !== 0) {\n        const chall = EternityChallenge.current;\n        const goal = chall.goalAtCompletions(chall.gainedCompletionStatus.totalCompletions);\n        return totalFill.plus(1).pow(0.1).min(goal.pow(0.15));\n      }\n\n      return totalFill.plus(1).pow(0.33);\n    },\n    currency: () => Currency.infinityPoints,\n    galaxyGeneratorThreshold: 1000,\n    milestones: [{\n      resource: \"vacuum\",\n      requirement: 0.04,\n      description: \"You can equip a single basic Glyph with decreased level and rarity\"\n    }, {\n      resource: \"vacuum\",\n      requirement: 0.06,\n      description: () => `Uncap Replicanti and make its unlock and upgrades ${formatX(1e130)} cheaper`,\n      effect: () => 1e130\n    }, {\n      resource: \"vacuum\",\n      requirement: 0.4,\n      description: () => `${wordShift.wordCycle(PelleRifts.vacuum.name)} also affects EP gain`,\n      effect: () => Decimal.pow(4, PelleRifts.vacuum.totalFill.log10() / 2 / 308 + 3),\n      formatEffect: x => `EP gain ${formatX(x, 2, 2)}`\n    }],\n    galaxyGeneratorText: \"There is not enough space left for more, you must fill in the $value\"\n  },\n  decay: {\n    id: 2,\n    key: \"decay\",\n    name: [\"Decay\", \"Collapse\", \"Disarray\"],\n    drainResource: \"Replicanti\",\n    spendable: true,\n    baseEffect: x => `Replicanti speed ${formatX(x, 2, 2)}`,\n    additionalEffects: () => [PelleRifts.decay.milestones[0], PelleRifts.decay.milestones[2]],\n    strike: () => PelleStrikes.powerGalaxies,\n    // 0 - 1\n    percentage: totalFill => totalFill.plus(1).log10() * 0.05 / 100,\n    // 0 - 1\n    percentageToFill: percentage => Decimal.pow(10, 20 * percentage * 100).minus(1),\n    effect: totalFill => PelleRifts.chaos.milestones[0].canBeApplied ? Decimal.sqrt(2000 + 1) : Decimal.sqrt(totalFill.plus(1).log10() + 1),\n    currency: () => Currency.replicanti,\n    galaxyGeneratorThreshold: 1e7,\n    milestones: [{\n      resource: \"decay\",\n      requirement: 0.2,\n      description: \"First rebuyable Pelle upgrade also affects 1st Infinity Dimension\",\n      effect: () => {\n        const x = player.celestials.pelle.rebuyables.antimatterDimensionMult;\n        return Decimal.pow(1e50, x - 9);\n      },\n      formatEffect: x => `1st Infinity Dimension ${formatX(x, 2, 2)}`\n    }, {\n      resource: \"decay\",\n      requirement: 0.6,\n      description: () => `When Replicanti exceeds ${format(DC.E1300)},\n          all Galaxies are ${formatPercents(0.1)} more effective`,\n      effect: () => Replicanti.amount.gt(DC.E1300) ? 1.1 : 1\n    }, {\n      resource: \"decay\",\n      requirement: 1,\n      description: \"Increase max Replicanti Galaxies based on total Rift milestones\",\n      effect: () => {\n        const x = PelleRifts.totalMilestones();\n        return x ** 2 - 2 * x;\n      },\n      formatEffect: x => `Max RG count +${formatInt(x)}`\n    }],\n    galaxyGeneratorText: \"There's not enough antimatter to form new Galaxies, you need to reverse the $value\"\n  },\n  chaos: {\n    id: 3,\n    key: \"chaos\",\n    name: [\"Chaos\", \"Disorder\", \"Impurity\"],\n    drainResource: [\"Decay\", \"Collapse\", \"Disarray\"],\n    baseEffect: x => `Time Dimensions ${formatX(x, 2, 2)}`,\n    strike: () => PelleStrikes.eternity,\n    percentage: totalFill => totalFill / 10,\n    percentageToFill: percentage => 10 * percentage,\n    effect: totalFill => {\n      const fill = totalFill > 6.5 ? (totalFill - 6.5) / 7 + 6.5 : totalFill;\n      return Decimal.pow(6, Decimal.pow(6, Decimal.pow(6, fill / 10 + 0.1)).minus(6)).div(1e5).plus(Decimal.pow(10, fill / 10 + 0.1));\n    },\n    currency: () => ({\n      get value() {\n        return PelleRifts.decay.percentage;\n      },\n\n      set value(val) {\n        const spent = PelleRifts.decay.percentage - val;\n        player.celestials.pelle.rifts.decay.percentageSpent += spent;\n      }\n\n    }),\n    galaxyGeneratorThreshold: 1e9,\n    milestones: [{\n      resource: \"chaos\",\n      requirement: 0.09,\n      description: () => `${wordShift.wordCycle(PelleRifts.decay.name)} \\\n        effect is always maxed and milestones always active`\n    }, {\n      resource: \"chaos\",\n      requirement: 0.15,\n      description: \"Glyphs gain a new Pelle-specific effect\"\n    }, {\n      resource: \"chaos\",\n      requirement: 1,\n      description: () => `You gain ${formatPercents(0.01)} of your EP gained on Eternity per second`\n    }],\n    galaxyGeneratorText: \"Your Galaxies are too fragmented, you must stabilize the $value\"\n  },\n  recursion: {\n    id: 4,\n    key: \"recursion\",\n    name: [\"Recursion\", \"Dispersion\", \"Destruction\"],\n    drainResource: \"EP\",\n    baseEffect: x => `EP formula: log(x)/${formatInt(308)} âžœ log(x)/${formatFloat(308 - x.toNumber(), 2)}`,\n    additionalEffects: () => [PelleRifts.recursion.milestones[0], PelleRifts.recursion.milestones[1]],\n    strike: () => PelleStrikes.ECs,\n    percentage: totalFill => totalFill.plus(1).log10() ** 0.4 / 4000 ** 0.4,\n    percentageToFill: percentage => Decimal.pow(10, percentage ** 2.5 * 4000).minus(1),\n    effect: totalFill => new Decimal(58 * totalFill.plus(1).log10() ** 0.2 / 4000 ** 0.2),\n    currency: () => Currency.eternityPoints,\n    galaxyGeneratorThreshold: 1e10,\n    milestones: [{\n      resource: \"recursion\",\n      requirement: 0.10,\n      description: \"Dimensional Boosts are more powerful based on EC completions\",\n      effect: () => Math.max(100 * EternityChallenges.completions ** 2, 1) * Math.max(1e4 ** (EternityChallenges.completions - 40), 1),\n      formatEffect: x => `Dimension Boost power ${formatX(x, 2, 2)}`\n    }, {\n      resource: \"recursion\",\n      requirement: 0.15,\n      description: \"Infinity Dimensions are stronger based on EC completions\",\n      effect: () => Decimal.pow(\"1e1500\", ((EternityChallenges.completions - 25) / 20) ** 1.7).max(1),\n      formatEffect: x => `Infinity Dimensions ${formatX(x)}`\n    }, {\n      resource: \"recursion\",\n      requirement: 1,\n      description: \"Permanently unlock the Galaxy Generator\"\n    }],\n    galaxyGeneratorText: \"Creating more Galaxies is unsustainable, you must focus the $value to allow more\"\n  },\n  paradox: {\n    id: 5,\n    key: \"paradox\",\n    name: [\"Paradox\", \"Contradiction\", \"Fallacy\"],\n    drainResource: \"Dilated Time\",\n    baseEffect: x => `All Dimensions ${formatPow(x, 2, 3)}`,\n    additionalEffects: () => [PelleRifts.paradox.milestones[2]],\n    strike: () => PelleStrikes.dilation,\n    percentage: totalFill => totalFill.plus(1).log10() / 100,\n    percentageToFill: percentage => Decimal.pow10(percentage * 100).minus(1),\n    effect: totalFill => new Decimal(1 + totalFill.plus(1).log10() * 0.004),\n    currency: () => Currency.dilatedTime,\n    galaxyGeneratorThreshold: 1e5,\n    milestones: [{\n      resource: \"paradox\",\n      requirement: 0.15,\n      description: \"Time Dimensions 5-8 are much cheaper, unlock more Dilation upgrades\",\n      // FIXME: Not a great solution\n      onStateChange: () => {\n        updateTimeDimensionCosts();\n      }\n    }, {\n      resource: \"paradox\",\n      requirement: 0.25,\n      description: () => `Dilated Time gain becomes Tachyon Particles ${formatPow(1.4, 1, 1)}`,\n      effect: 1.4\n    }, {\n      resource: \"paradox\",\n      requirement: 0.5,\n      description: \"Dilation rebuyable purchase count improves Infinity Power conversion rate\",\n      effect: () => Math.min(1.1075 ** (Object.values(player.dilation.rebuyables).sum() - 60), 712),\n      formatEffect: x => `Infinity Power Conversion ${formatX(x, 2, 2)}`\n    }],\n    galaxyGeneratorText: \"It should be possible to create more, but Pelle has restricted you. Disregard the $value\"\n  }\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/celestials/rifts.js"],"names":["DC","wordShift","pelleRifts","vacuum","id","key","name","drainResource","baseEffect","x","formatX","additionalEffects","PelleRifts","milestones","strike","PelleStrikes","infinity","percentage","totalFill","Math","log10","plus","percentageToFill","Decimal","pow","div","minus","effect","player","challenge","eternity","current","chall","EternityChallenge","goal","goalAtCompletions","gainedCompletionStatus","totalCompletions","min","currency","Currency","infinityPoints","galaxyGeneratorThreshold","resource","requirement","description","wordCycle","formatEffect","galaxyGeneratorText","decay","spendable","powerGalaxies","chaos","canBeApplied","sqrt","replicanti","celestials","pelle","rebuyables","antimatterDimensionMult","format","E1300","formatPercents","Replicanti","amount","gt","totalMilestones","formatInt","fill","value","val","spent","rifts","percentageSpent","recursion","formatFloat","toNumber","ECs","eternityPoints","max","EternityChallenges","completions","paradox","formatPow","dilation","pow10","dilatedTime","onStateChange","updateTimeDimensionCosts","Object","values","sum"],"mappings":"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","sourcesContent":["import { DC } from \"../../constants\";\r\nimport wordShift from \"../../word-shift\";\r\n\r\nexport const pelleRifts = {\r\n  vacuum: {\r\n    id: 1,\r\n    key: \"vacuum\",\r\n    name: [\"Vacuum\", \"Hollow\", \"Void\"],\r\n    drainResource: \"IP\",\r\n    baseEffect: x => `IP gain ${formatX(x, 2, 2)}`,\r\n    additionalEffects: () => [PelleRifts.vacuum.milestones[2]],\r\n    strike: () => PelleStrikes.infinity,\r\n    percentage: totalFill => Math.log10(totalFill.plus(1).log10() * 10 + 1) ** 2.5 / 100,\r\n    percentageToFill: percentage => Decimal.pow(10,\r\n      Decimal.pow(10, (percentage * 100) ** (1 / 2.5)).div(10).minus(0.1)\r\n    ).minus(1),\r\n    effect: totalFill => {\r\n      if (player.challenge.eternity.current !== 0) {\r\n        const chall = EternityChallenge.current;\r\n        const goal = chall.goalAtCompletions(chall.gainedCompletionStatus.totalCompletions);\r\n        return totalFill.plus(1).pow(0.1).min(goal.pow(0.15));\r\n      }\r\n      return totalFill.plus(1).pow(0.33);\r\n    },\r\n    currency: () => Currency.infinityPoints,\r\n    galaxyGeneratorThreshold: 1000,\r\n    milestones: [\r\n      {\r\n        resource: \"vacuum\",\r\n        requirement: 0.04,\r\n        description: \"You can equip a single basic Glyph with decreased level and rarity\"\r\n      },\r\n      {\r\n        resource: \"vacuum\",\r\n        requirement: 0.06,\r\n        description: () => `Uncap Replicanti and make its unlock and upgrades ${formatX(1e130)} cheaper`,\r\n        effect: () => 1e130\r\n      },\r\n      {\r\n        resource: \"vacuum\",\r\n        requirement: 0.4,\r\n        description: () => `${wordShift.wordCycle(PelleRifts.vacuum.name)} also affects EP gain`,\r\n        effect: () => Decimal.pow(4, PelleRifts.vacuum.totalFill.log10() / 2 / 308 + 3),\r\n        formatEffect: x => `EP gain ${formatX(x, 2, 2)}`\r\n      },\r\n    ],\r\n    galaxyGeneratorText: \"There is not enough space left for more, you must fill in the $value\"\r\n  },\r\n  decay: {\r\n    id: 2,\r\n    key: \"decay\",\r\n    name: [\"Decay\", \"Collapse\", \"Disarray\"],\r\n    drainResource: \"Replicanti\",\r\n    spendable: true,\r\n    baseEffect: x => `Replicanti speed ${formatX(x, 2, 2)}`,\r\n    additionalEffects: () => [PelleRifts.decay.milestones[0], PelleRifts.decay.milestones[2]],\r\n    strike: () => PelleStrikes.powerGalaxies,\r\n    // 0 - 1\r\n    percentage: totalFill => totalFill.plus(1).log10() * 0.05 / 100,\r\n    // 0 - 1\r\n    percentageToFill: percentage => Decimal.pow(10, 20 * percentage * 100).minus(1),\r\n    effect: totalFill => (PelleRifts.chaos.milestones[0].canBeApplied\r\n      ? Decimal.sqrt(2000 + 1) : Decimal.sqrt(totalFill.plus(1).log10() + 1)),\r\n    currency: () => Currency.replicanti,\r\n    galaxyGeneratorThreshold: 1e7,\r\n    milestones: [\r\n      {\r\n        resource: \"decay\",\r\n        requirement: 0.2,\r\n        description: \"First rebuyable Pelle upgrade also affects 1st Infinity Dimension\",\r\n        effect: () => {\r\n          const x = player.celestials.pelle.rebuyables.antimatterDimensionMult;\r\n          return Decimal.pow(1e50, x - 9);\r\n        },\r\n        formatEffect: x => `1st Infinity Dimension ${formatX(x, 2, 2)}`\r\n      },\r\n      {\r\n        resource: \"decay\",\r\n        requirement: 0.6,\r\n        description: () => `When Replicanti exceeds ${format(DC.E1300)},\r\n          all Galaxies are ${formatPercents(0.1)} more effective`,\r\n        effect: () => (Replicanti.amount.gt(DC.E1300) ? 1.1 : 1)\r\n      },\r\n      {\r\n        resource: \"decay\",\r\n        requirement: 1,\r\n        description: \"Increase max Replicanti Galaxies based on total Rift milestones\",\r\n        effect: () => {\r\n          const x = PelleRifts.totalMilestones();\r\n          return x ** 2 - 2 * x;\r\n        },\r\n        formatEffect: x => `Max RG count +${formatInt(x)}`\r\n      },\r\n    ],\r\n    galaxyGeneratorText: \"There's not enough antimatter to form new Galaxies, you need to reverse the $value\"\r\n  },\r\n  chaos: {\r\n    id: 3,\r\n    key: \"chaos\",\r\n    name: [\"Chaos\", \"Disorder\", \"Impurity\"],\r\n    drainResource: [\"Decay\", \"Collapse\", \"Disarray\"],\r\n    baseEffect: x => `Time Dimensions ${formatX(x, 2, 2)}`,\r\n    strike: () => PelleStrikes.eternity,\r\n    percentage: totalFill => totalFill / 10,\r\n    percentageToFill: percentage => 10 * percentage,\r\n    effect: totalFill => {\r\n      const fill = totalFill > 6.5\r\n        ? (totalFill - 6.5) / 7 + 6.5\r\n        : totalFill;\r\n      return Decimal.pow(6, Decimal.pow(6, Decimal.pow(6, fill / 10 + 0.1)).minus(6))\r\n        .div(1e5)\r\n        .plus(Decimal.pow(10, fill / 10 + 0.1));\r\n    },\r\n    currency: () => ({\r\n      get value() {\r\n        return PelleRifts.decay.percentage;\r\n      },\r\n      set value(val) {\r\n        const spent = PelleRifts.decay.percentage - val;\r\n        player.celestials.pelle.rifts.decay.percentageSpent += spent;\r\n      }\r\n    }),\r\n    galaxyGeneratorThreshold: 1e9,\r\n    milestones: [\r\n      {\r\n        resource: \"chaos\",\r\n        requirement: 0.09,\r\n        description: () => `${wordShift.wordCycle(PelleRifts.decay.name)} \\\r\n        effect is always maxed and milestones always active`\r\n      },\r\n      {\r\n        resource: \"chaos\",\r\n        requirement: 0.15,\r\n        description: \"Glyphs gain a new Pelle-specific effect\",\r\n      },\r\n      {\r\n        resource: \"chaos\",\r\n        requirement: 1,\r\n        description: () => `You gain ${formatPercents(0.01)} of your EP gained on Eternity per second`,\r\n      },\r\n    ],\r\n    galaxyGeneratorText: \"Your Galaxies are too fragmented, you must stabilize the $value\"\r\n  },\r\n  recursion: {\r\n    id: 4,\r\n    key: \"recursion\",\r\n    name: [\"Recursion\", \"Dispersion\", \"Destruction\"],\r\n    drainResource: \"EP\",\r\n    baseEffect: x => `EP formula: log(x)/${formatInt(308)} âžœ log(x)/${formatFloat(308 - x.toNumber(), 2)}`,\r\n    additionalEffects: () => [PelleRifts.recursion.milestones[0], PelleRifts.recursion.milestones[1]],\r\n    strike: () => PelleStrikes.ECs,\r\n    percentage: totalFill => totalFill.plus(1).log10() ** 0.4 / 4000 ** 0.4,\r\n    percentageToFill: percentage => Decimal.pow(10, percentage ** 2.5 * 4000).minus(1),\r\n    effect: totalFill => new Decimal(58 * totalFill.plus(1).log10() ** 0.2 / 4000 ** 0.2),\r\n    currency: () => Currency.eternityPoints,\r\n    galaxyGeneratorThreshold: 1e10,\r\n    milestones: [\r\n      {\r\n        resource: \"recursion\",\r\n        requirement: 0.10,\r\n        description: \"Dimensional Boosts are more powerful based on EC completions\",\r\n        effect: () => Math.max(100 * EternityChallenges.completions ** 2, 1) *\r\n          Math.max(1e4 ** (EternityChallenges.completions - 40), 1),\r\n        formatEffect: x => `Dimension Boost power ${formatX(x, 2, 2)}`\r\n      },\r\n      {\r\n        resource: \"recursion\",\r\n        requirement: 0.15,\r\n        description: \"Infinity Dimensions are stronger based on EC completions\",\r\n        effect: () => Decimal.pow(\"1e1500\", ((EternityChallenges.completions - 25) / 20) ** 1.7).max(1),\r\n        formatEffect: x => `Infinity Dimensions ${formatX(x)}`\r\n      },\r\n      {\r\n        resource: \"recursion\",\r\n        requirement: 1,\r\n        description: \"Permanently unlock the Galaxy Generator\",\r\n      },\r\n    ],\r\n    galaxyGeneratorText: \"Creating more Galaxies is unsustainable, you must focus the $value to allow more\"\r\n  },\r\n  paradox: {\r\n    id: 5,\r\n    key: \"paradox\",\r\n    name: [\"Paradox\", \"Contradiction\", \"Fallacy\"],\r\n    drainResource: \"Dilated Time\",\r\n    baseEffect: x => `All Dimensions ${formatPow(x, 2, 3)}`,\r\n    additionalEffects: () => [PelleRifts.paradox.milestones[2]],\r\n    strike: () => PelleStrikes.dilation,\r\n    percentage: totalFill => totalFill.plus(1).log10() / 100,\r\n    percentageToFill: percentage => Decimal.pow10(percentage * 100).minus(1),\r\n    effect: totalFill => new Decimal(1 + totalFill.plus(1).log10() * 0.004),\r\n    currency: () => Currency.dilatedTime,\r\n    galaxyGeneratorThreshold: 1e5,\r\n    milestones: [\r\n      {\r\n        resource: \"paradox\",\r\n        requirement: 0.15,\r\n        description: \"Time Dimensions 5-8 are much cheaper, unlock more Dilation upgrades\",\r\n        // FIXME: Not a great solution\r\n        onStateChange: () => {\r\n          updateTimeDimensionCosts();\r\n        }\r\n      },\r\n      {\r\n        resource: \"paradox\",\r\n        requirement: 0.25,\r\n        description: () => `Dilated Time gain becomes Tachyon Particles ${formatPow(1.4, 1, 1)}`,\r\n        effect: 1.4\r\n      },\r\n      {\r\n        resource: \"paradox\",\r\n        requirement: 0.5,\r\n        description: \"Dilation rebuyable purchase count improves Infinity Power conversion rate\",\r\n        effect: () => Math.min(\r\n          1.1075 ** (Object.values(player.dilation.rebuyables).sum() - 60),\r\n          712\r\n        ),\r\n        formatEffect: x => `Infinity Power Conversion ${formatX(x, 2, 2)}`\r\n      },\r\n    ],\r\n    galaxyGeneratorText: \"It should be possible to create more, but Pelle has restricted you. Disregard the $value\"\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}