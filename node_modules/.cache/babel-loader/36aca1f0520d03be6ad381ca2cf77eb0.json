{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport PreviousSpeedrunInfo from \"./PreviousSpeedrunInfo\";\nimport PrimaryButton from \"@/components/PrimaryButton\";\nimport SpeedrunMilestoneCompare from \"./SpeedrunMilestoneCompare\";\nexport default {\n  name: \"PreviousSpeedrunTab\",\n  components: {\n    PrimaryButton,\n    SpeedrunMilestoneCompare,\n    PreviousSpeedrunInfo\n  },\n\n  data() {\n    return {\n      milestoneTimes: [],\n      isSpectating: false,\n      selectedRun: 0,\n      runPage: 0\n    };\n  },\n\n  computed: {\n    milestones: () => GameDatabase.speedrunMilestones,\n\n    previousRuns() {\n      const keys = Object.keys(player.speedrun.previousRuns);\n      const allRuns = [];\n\n      for (const key of keys) {\n        const run = player.speedrun.previousRuns[key];\n        run.id = Number(key);\n        allRuns.push(run);\n      }\n\n      return allRuns;\n    },\n\n    bestPreviousTimes() {\n      const recLength = GameDatabase.speedrunMilestones.length + 1;\n      const bestTimes = Array.repeat(0, recLength);\n      const bestRunIndices = [...bestTimes];\n\n      for (const index of Object.keys(player.speedrun.previousRuns)) {\n        const run = player.speedrun.previousRuns[index].records;\n\n        for (let rec = 0; rec < recLength; rec++) {\n          if (run[rec] !== 0 && (run[rec] < bestTimes[rec] || bestTimes[rec] === 0)) {\n            bestTimes[rec] = run[rec];\n            bestRunIndices[rec] = index;\n          }\n        }\n      }\n\n      const milestoneList = Array.repeat({}, recLength);\n\n      for (let rec = 0; rec < recLength; rec++) {\n        milestoneList[rec] = {\n          time: bestTimes[rec],\n          index: bestRunIndices[rec]\n        };\n      }\n\n      return milestoneList;\n    },\n\n    numRuns() {\n      return Object.keys(this.previousRuns).length;\n    },\n\n    highestIndex() {\n      return Math.max(this.previousRuns.map(k => Number(k.id)).max(), player.records.fullGameCompletions);\n    },\n\n    spectateText() {\n      return this.isSpectating ? \"Numbers here are unaffected by END so that you can see your final records.\" : null;\n    }\n\n  },\n  methods: {\n    update() {\n      this.milestoneTimes = [...player.speedrun.records];\n      this.isSpectating = GameEnd.endState > END_STATE_MARKERS.SPECTATE_GAME;\n    },\n\n    selectRun(index) {\n      this.selectedRun = index;\n    },\n\n    findRun(index) {\n      return this.previousRuns.find(r => (r === null || r === void 0 ? void 0 : r.id) === 10 * this.runPage + index);\n    },\n\n    changePage(dir) {\n      this.runPage = Math.clamp(this.runPage + dir, 0, Math.floor(this.highestIndex / 10));\n    }\n\n  }\n};","map":{"version":3,"sources":["PreviousSpeedrunTab.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport PreviousSpeedrunInfo from \"./PreviousSpeedrunInfo\";\r\nimport PrimaryButton from \"@/components/PrimaryButton\";\r\nimport SpeedrunMilestoneCompare from \"./SpeedrunMilestoneCompare\";\r\n\r\nexport default {\r\n  name: \"PreviousSpeedrunTab\",\r\n  components: {\r\n    PrimaryButton,\r\n    SpeedrunMilestoneCompare,\r\n    PreviousSpeedrunInfo,\r\n  },\r\n  data() {\r\n    return {\r\n      milestoneTimes: [],\r\n      isSpectating: false,\r\n      selectedRun: 0,\r\n      runPage: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    milestones: () => GameDatabase.speedrunMilestones,\r\n    previousRuns() {\r\n      const keys = Object.keys(player.speedrun.previousRuns);\r\n      const allRuns = [];\r\n      for (const key of keys) {\r\n        const run = player.speedrun.previousRuns[key];\r\n        run.id = Number(key);\r\n        allRuns.push(run);\r\n      }\r\n      return allRuns;\r\n    },\r\n    bestPreviousTimes() {\r\n      const recLength = GameDatabase.speedrunMilestones.length + 1;\r\n      const bestTimes = Array.repeat(0, recLength);\r\n      const bestRunIndices = [...bestTimes];\r\n      for (const index of Object.keys(player.speedrun.previousRuns)) {\r\n        const run = player.speedrun.previousRuns[index].records;\r\n        for (let rec = 0; rec < recLength; rec++) {\r\n          if (run[rec] !== 0 && (run[rec] < bestTimes[rec] || bestTimes[rec] === 0)) {\r\n            bestTimes[rec] = run[rec];\r\n            bestRunIndices[rec] = index;\r\n          }\r\n        }\r\n      }\r\n\r\n      const milestoneList = Array.repeat({}, recLength);\r\n      for (let rec = 0; rec < recLength; rec++) {\r\n        milestoneList[rec] = { time: bestTimes[rec], index: bestRunIndices[rec] };\r\n      }\r\n      return milestoneList;\r\n    },\r\n    numRuns() {\r\n      return Object.keys(this.previousRuns).length;\r\n    },\r\n    highestIndex() {\r\n      return Math.max(this.previousRuns.map(k => Number(k.id)).max(), player.records.fullGameCompletions);\r\n    },\r\n    spectateText() {\r\n      return this.isSpectating\r\n        ? \"Numbers here are unaffected by END so that you can see your final records.\"\r\n        : null;\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.milestoneTimes = [...player.speedrun.records];\r\n      this.isSpectating = GameEnd.endState > END_STATE_MARKERS.SPECTATE_GAME;\r\n    },\r\n    selectRun(index) {\r\n      this.selectedRun = index;\r\n    },\r\n    findRun(index) {\r\n      return this.previousRuns.find(r => r?.id === 10 * this.runPage + index);\r\n    },\r\n    changePage(dir) {\r\n      this.runPage = Math.clamp(this.runPage + dir, 0, Math.floor(this.highestIndex / 10));\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"c-previous-runs\">\r\n    <b>You have completed {{ quantify(\"speedrun\", numRuns, 0, 0, x => x) }} prior to this playthrough.</b>\r\n    <b>Statistics of previous runs are below, mouseover icons for more details.</b>\r\n    <b>Click the magnifying glass to compare the milestones on a particular run to this run.</b>\r\n    <b>{{ spectateText }}</b>\r\n    <br>\r\n    <div\r\n      v-if=\"highestIndex > 10\"\r\n      class=\"c-run-page-nav\"\r\n    >\r\n      <PrimaryButton\r\n        class=\"o-primary-btn--subtab-option fas fa-arrow-left\"\r\n        :class=\"{ 'o-primary-btn--disabled' : runPage === 0 }\"\r\n        @click=\"changePage(-1)\"\r\n      />\r\n      Showing runs {{ 10 * runPage + 1 }} to {{ 10 * (runPage + 1) }} ({{ highestIndex }} total runs)\r\n      <PrimaryButton\r\n        class=\"o-primary-btn--subtab-option fas fa-arrow-right\"\r\n        :class=\"{ 'o-primary-btn--disabled' : runPage + 1 > highestIndex / 10 }\"\r\n        @click=\"changePage(1)\"\r\n      />\r\n    </div>\r\n    <div class=\"c-previous-runs\">\r\n      <span\r\n        v-for=\"entry in 10\"\r\n        :key=\"entry\"\r\n      >\r\n        <span\r\n          v-if=\"10 * runPage + entry <= highestIndex\"\r\n          class=\"c-single-run\"\r\n        >\r\n          <PrimaryButton\r\n            v-if=\"findRun(entry)\"\r\n            class=\"o-primary-btn--subtab-option fas fa-magnifying-glass\"\r\n            :class=\"{ 'o-selected-btn' : selectedRun === 10 * runPage + entry }\"\r\n            @click=\"selectRun(10 * runPage + entry)\"\r\n          />\r\n          <PreviousSpeedrunInfo\r\n            :prev-run-info=\"findRun(entry)\"\r\n            :index=\"10 * runPage + entry\"\r\n          />\r\n        </span>\r\n      </span>\r\n    </div>\r\n    <br>\r\n    <div class=\"c-legend\">\r\n      <div class=\"c-legend-cell\">\r\n        <span class=\"o-box l-milestone-none\" /> Not reached this run\r\n      </div>\r\n      <div class=\"c-legend-cell\">\r\n        <span class=\"o-box l-milestone-slow\" /> Slower than comparison\r\n      </div>\r\n      <div class=\"c-legend-cell\">\r\n        <span class=\"o-box l-milestone-fast\" /> Faster than comparison\r\n      </div>\r\n      <div class=\"c-legend-cell\">\r\n        <span class=\"o-box l-milestone-fastest\" /> Faster than best\r\n      </div>\r\n    </div>\r\n    <div class=\"l-speedrun-milestone-tab\">\r\n      <SpeedrunMilestoneCompare\r\n        v-for=\"milestone in milestones\"\r\n        :key=\"milestone.id\"\r\n        :milestone=\"milestone\"\r\n        :curr-time=\"milestoneTimes[milestone.id]\"\r\n        :ref-time=\"selectedRun ? previousRuns.find(run => run.id === selectedRun).records[milestone.id] : null\"\r\n        :best-time=\"bestPreviousTimes[milestone.id].time\"\r\n        :run-indices=\"[selectedRun, bestPreviousTimes[milestone.id].index]\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.c-run-page-nav {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  font-size: 1.3rem;\r\n  width: 60rem;\r\n}\r\n\r\n.c-previous-runs {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  color: var(--color-text);\r\n}\r\n\r\n.c-single-run {\r\n  display: flex;\r\n  flex-direction: row;\r\n  padding: 0.5rem;\r\n  border: 0.1rem solid;\r\n  width: 100rem;\r\n}\r\n\r\n.o-selected-btn {\r\n  background-color: var(--color-good);\r\n}\r\n\r\n.c-legend {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  width: 95rem;\r\n}\r\n\r\n.c-legend-cell {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  width: 30rem;\r\n  font-size: 1.5rem;\r\n}\r\n\r\n.o-box {\r\n  display: grid;\r\n  width: 2rem;\r\n  height: 2rem;\r\n  margin: 0.3rem;\r\n  border: var(--var-border-width, 0.2rem) solid var(--color-text);\r\n  border-radius: var(--var-border-radius, 0.5rem);\r\n}\r\n\r\n.l-milestone-none {\r\n  background-color: var(--color-base);\r\n}\r\n\r\n.l-milestone-slow {\r\n  background-color: var(--color-bad);\r\n}\r\n\r\n.l-milestone-fast {\r\n  background-color: var(--color-good);\r\n}\r\n\r\n.l-milestone-fastest {\r\n  background-color: var(--color-celestials);\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/speedrun-milestones"},"metadata":{},"sourceType":"module"}