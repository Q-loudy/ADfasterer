{"ast":null,"code":"export const glyphSacrifice = {\n  \"power\": {\n    id: \"power\",\n    effect: added => {\n      if (Pelle.isDisabled(\"glyphsac\")) return 0;\n      const sac = player.reality.glyphs.sac.power + (added !== null && added !== void 0 ? added : 0);\n      const capped = Math.clampMax(sac, GlyphSacrificeHandler.maxSacrificeForEffects);\n      const base = Math.log10(capped + 1) / Math.log10(GlyphSacrificeHandler.maxSacrificeForEffects);\n      return Math.floor(750 * Math.pow(base, 1.2));\n    },\n    description: amount => {\n      const sacCap = GlyphSacrificeHandler.maxSacrificeForEffects;\n      const nextDistantGalaxy = Math.pow(10, Math.pow((amount + 1) / 750, 1 / 1.2) * Math.log10(sacCap)) - 1;\n      const nextGalaxyText = amount < 750 ? ` (next at ${format(nextDistantGalaxy, 2, 2)})` : \"\";\n      return `Distant Galaxy scaling starts ${formatInt(amount)} later${nextGalaxyText}`;\n    },\n    cap: () => GlyphSacrificeHandler.maxSacrificeForEffects\n  },\n  \"infinity\": {\n    id: \"infinity\",\n    effect: added => {\n      if (Pelle.isDisabled(\"glyphsac\")) return 1;\n      const sac = player.reality.glyphs.sac.infinity + (added !== null && added !== void 0 ? added : 0);\n      const capped = Math.clampMax(sac, GlyphSacrificeHandler.maxSacrificeForEffects);\n      return 1 + Math.log10(1 + Math.pow(capped, 0.2) / 100);\n    },\n    description: amount => `${formatX(amount, 2, 2)} bigger multiplier when buying 8th Infinity Dimension`,\n    cap: () => GlyphSacrificeHandler.maxSacrificeForEffects\n  },\n  \"time\": {\n    id: \"time\",\n    effect: added => {\n      if (Pelle.isDisabled(\"glyphsac\")) return 1;\n      const sac = player.reality.glyphs.sac.time + (added !== null && added !== void 0 ? added : 0);\n      const capped = Math.clampMax(sac, GlyphSacrificeHandler.maxSacrificeForEffects);\n      return Math.pow(1 + Math.pow(capped, 0.2) / 100, 2);\n    },\n    description: amount => `${formatX(amount, 2, 2)} bigger multiplier when buying 8th Time Dimension`,\n    cap: () => GlyphSacrificeHandler.maxSacrificeForEffects\n  },\n  \"replication\": {\n    id: \"replication\",\n    effect: added => {\n      if (Pelle.isDisabled(\"glyphsac\")) return 0;\n      const sac = player.reality.glyphs.sac.replication + (added !== null && added !== void 0 ? added : 0);\n      const capped = Math.clampMax(sac, GlyphSacrificeHandler.maxSacrificeForEffects);\n      const base = Math.log10(capped + 1) / Math.log10(GlyphSacrificeHandler.maxSacrificeForEffects);\n      return Math.floor(1500 * Math.pow(base, 1.2));\n    },\n    description: amount => {\n      const sacCap = GlyphSacrificeHandler.maxSacrificeForEffects;\n      const nextDistantGalaxy = Math.pow(10, Math.pow((amount + 1) / 1500, 1 / 1.2) * Math.log10(sacCap)) - 1;\n      const nextGalaxyText = amount < 1500 ? ` (next at ${format(nextDistantGalaxy, 2, 2)})` : \"\";\n      return `Replicanti Galaxy scaling starts ${formatInt(amount)} later${nextGalaxyText}`;\n    },\n    cap: () => GlyphSacrificeHandler.maxSacrificeForEffects\n  },\n  \"dilation\": {\n    id: \"dilation\",\n    effect: added => {\n      if (Pelle.isDisabled(\"glyphsac\")) return 1;\n      const sac = player.reality.glyphs.sac.dilation + (added !== null && added !== void 0 ? added : 0);\n      const capped = Math.clampMax(sac, GlyphSacrificeHandler.maxSacrificeForEffects);\n      const exponent = 0.32 * Math.pow(Math.log10(capped + 1) / Math.log10(GlyphSacrificeHandler.maxSacrificeForEffects), 0.1);\n      return Math.pow(Math.clampMin(capped, 1), exponent);\n    },\n    description: amount => `Multiply Tachyon Particle gain by ${formatX(amount, 2, 2)}`,\n    cap: () => GlyphSacrificeHandler.maxSacrificeForEffects\n  },\n  \"effarig\": {\n    id: \"effarig\",\n    effect: added => {\n      if (Pelle.isDisabled(\"glyphsac\")) return 0;\n      const sac = player.reality.glyphs.sac.effarig + (added !== null && added !== void 0 ? added : 0); // This doesn't use the GlyphSacrificeHandler cap because it hits its cap (+100%) earlier\n\n      const capped = Math.clampMax(sac, 1e70);\n      return 2 * Math.log10(capped / 1e20 + 1);\n    },\n    description: amount => `+${formatPercents(amount / 100, 2)} additional Glyph rarity`,\n    cap: () => 1e70\n  },\n  \"reality\": {\n    id: \"reality\",\n    effect: added => {\n      if (Pelle.isDisabled(\"glyphsac\")) return 0;\n      const sac = player.reality.glyphs.sac.reality + (added !== null && added !== void 0 ? added : 0); // This cap is only feasibly reached with the imaginary upgrade, but we still want to cap it at a nice number\n\n      return Math.clampMax(1 + Math.sqrt(sac) / 15, 100);\n    },\n    description: amount => `Multiply Memory Chunk gain by ${formatX(amount, 2, 3)}`,\n    cap: () => GlyphSacrificeHandler.maxSacrificeForEffects\n  }\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/reality/glyph-sacrifices.js"],"names":["glyphSacrifice","id","effect","added","Pelle","isDisabled","sac","player","reality","glyphs","power","capped","Math","clampMax","GlyphSacrificeHandler","maxSacrificeForEffects","base","log10","floor","pow","description","amount","sacCap","nextDistantGalaxy","nextGalaxyText","format","formatInt","cap","infinity","formatX","time","replication","dilation","exponent","clampMin","effarig","formatPercents","sqrt"],"mappings":"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","sourcesContent":["export const glyphSacrifice = {\r\n  \"power\": {\r\n    id: \"power\",\r\n    effect: added => {\r\n      if (Pelle.isDisabled(\"glyphsac\")) return 0;\r\n      const sac = player.reality.glyphs.sac.power + (added ?? 0);\r\n      const capped = Math.clampMax(sac, GlyphSacrificeHandler.maxSacrificeForEffects);\r\n      const base = Math.log10(capped + 1) / Math.log10(GlyphSacrificeHandler.maxSacrificeForEffects);\r\n      return Math.floor(750 * Math.pow(base, 1.2));\r\n    },\r\n    description: amount => {\r\n      const sacCap = GlyphSacrificeHandler.maxSacrificeForEffects;\r\n      const nextDistantGalaxy = Math.pow(10, Math.pow((amount + 1) / 750, 1 / 1.2) * Math.log10(sacCap)) - 1;\r\n      const nextGalaxyText = amount < 750\r\n        ? ` (next at ${format(nextDistantGalaxy, 2, 2)})`\r\n        : \"\";\r\n      return `Distant Galaxy scaling starts ${formatInt(amount)} later${nextGalaxyText}`;\r\n    },\r\n    cap: () => GlyphSacrificeHandler.maxSacrificeForEffects\r\n  },\r\n  \"infinity\": {\r\n    id: \"infinity\",\r\n    effect: added => {\r\n      if (Pelle.isDisabled(\"glyphsac\")) return 1;\r\n      const sac = player.reality.glyphs.sac.infinity + (added ?? 0);\r\n      const capped = Math.clampMax(sac, GlyphSacrificeHandler.maxSacrificeForEffects);\r\n      return 1 + Math.log10(1 + Math.pow(capped, 0.2) / 100);\r\n    },\r\n    description: amount => `${formatX(amount, 2, 2)} bigger multiplier when buying 8th Infinity Dimension`,\r\n    cap: () => GlyphSacrificeHandler.maxSacrificeForEffects\r\n  },\r\n  \"time\": {\r\n    id: \"time\",\r\n    effect: added => {\r\n      if (Pelle.isDisabled(\"glyphsac\")) return 1;\r\n      const sac = player.reality.glyphs.sac.time + (added ?? 0);\r\n      const capped = Math.clampMax(sac, GlyphSacrificeHandler.maxSacrificeForEffects);\r\n      return Math.pow(1 + Math.pow(capped, 0.2) / 100, 2);\r\n    },\r\n    description: amount => `${formatX(amount, 2, 2)} bigger multiplier when buying 8th Time Dimension`,\r\n    cap: () => GlyphSacrificeHandler.maxSacrificeForEffects\r\n  },\r\n  \"replication\": {\r\n    id: \"replication\",\r\n    effect: added => {\r\n      if (Pelle.isDisabled(\"glyphsac\")) return 0;\r\n      const sac = player.reality.glyphs.sac.replication + (added ?? 0);\r\n      const capped = Math.clampMax(sac, GlyphSacrificeHandler.maxSacrificeForEffects);\r\n      const base = Math.log10(capped + 1) / Math.log10(GlyphSacrificeHandler.maxSacrificeForEffects);\r\n      return Math.floor(1500 * Math.pow(base, 1.2));\r\n    },\r\n    description: amount => {\r\n      const sacCap = GlyphSacrificeHandler.maxSacrificeForEffects;\r\n      const nextDistantGalaxy = Math.pow(10, Math.pow((amount + 1) / 1500, 1 / 1.2) * Math.log10(sacCap)) - 1;\r\n      const nextGalaxyText = amount < 1500\r\n        ? ` (next at ${format(nextDistantGalaxy, 2, 2)})`\r\n        : \"\";\r\n      return `Replicanti Galaxy scaling starts ${formatInt(amount)} later${nextGalaxyText}`;\r\n    },\r\n    cap: () => GlyphSacrificeHandler.maxSacrificeForEffects\r\n  },\r\n  \"dilation\": {\r\n    id: \"dilation\",\r\n    effect: added => {\r\n      if (Pelle.isDisabled(\"glyphsac\")) return 1;\r\n      const sac = player.reality.glyphs.sac.dilation + (added ?? 0);\r\n      const capped = Math.clampMax(sac, GlyphSacrificeHandler.maxSacrificeForEffects);\r\n      const exponent = 0.32 * Math.pow(Math.log10(capped + 1) /\r\n        Math.log10(GlyphSacrificeHandler.maxSacrificeForEffects), 0.1);\r\n      return Math.pow(Math.clampMin(capped, 1), exponent);\r\n    },\r\n    description: amount => `Multiply Tachyon Particle gain by ${formatX(amount, 2, 2)}`,\r\n    cap: () => GlyphSacrificeHandler.maxSacrificeForEffects\r\n  },\r\n  \"effarig\": {\r\n    id: \"effarig\",\r\n    effect: added => {\r\n      if (Pelle.isDisabled(\"glyphsac\")) return 0;\r\n      const sac = player.reality.glyphs.sac.effarig + (added ?? 0);\r\n      // This doesn't use the GlyphSacrificeHandler cap because it hits its cap (+100%) earlier\r\n      const capped = Math.clampMax(sac, 1e70);\r\n      return 2 * Math.log10(capped / 1e20 + 1);\r\n    },\r\n    description: amount => `+${formatPercents(amount / 100, 2)} additional Glyph rarity`,\r\n    cap: () => 1e70\r\n  },\r\n  \"reality\": {\r\n    id: \"reality\",\r\n    effect: added => {\r\n      if (Pelle.isDisabled(\"glyphsac\")) return 0;\r\n      const sac = player.reality.glyphs.sac.reality + (added ?? 0);\r\n      // This cap is only feasibly reached with the imaginary upgrade, but we still want to cap it at a nice number\r\n      return Math.clampMax(1 + Math.sqrt(sac) / 15, 100);\r\n    },\r\n    description: amount => `Multiply Memory Chunk gain by ${formatX(amount, 2, 3)}`,\r\n    cap: () => GlyphSacrificeHandler.maxSacrificeForEffects\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}