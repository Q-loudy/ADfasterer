{"ast":null,"code":"import { DC } from \"../../constants\";\n\nconst specialInfinityGlyphDisabledEffectText = () => PelleRifts.chaos.milestones[1].canBeApplied ? \"The Pelle-Specific effect from Infinity Glyphs is also disabled.\" : \"\";\n\nexport const eternityChallenges = [{\n  id: 1,\n  description: \"Time Dimensions are disabled.\",\n  goal: DC.E1800,\n  goalIncrease: DC.E200,\n  reward: {\n    description: \"Time Dimension multiplier based on time spent this Eternity\",\n    effect: completions => Decimal.pow(Math.max(player.records.thisEternity.time / 10, 0.9), 0.3 + completions * 0.05),\n    formatEffect: value => formatX(value, 2, 1)\n  },\n  // These will get notation-formatted and scrambled between for the final goal\n  scrambleText: [\"1e2600\", \"1e201600\"]\n}, {\n  id: 2,\n  description: \"Infinity Dimensions are disabled.\",\n  goal: DC.E975,\n  pelleGoal: DC.E1750,\n  goalIncrease: DC.E175,\n  reward: {\n    description: \"1st Infinity Dimension multiplier based on Infinity Power\",\n    effect: completions => Currency.infinityPower.value.pow(1.5 / (700 - completions * 100)).clampMin(1),\n    cap: DC.E100,\n    formatEffect: value => formatX(value, 2, 1)\n  }\n}, {\n  id: 3,\n  description: \"Antimatter Dimensions 5-8 don't produce anything. Dimensional Sacrifice is disabled.\",\n  goal: DC.E600,\n  pelleGoal: DC.E925,\n  goalIncrease: DC.E75,\n  reward: {\n    description: () => `Increase the multiplier for buying ${formatInt(10)} Antimatter Dimensions`,\n    effect: completions => completions * 0.72,\n    formatEffect: value => `+${format(value, 2, 2)}`\n  }\n}, {\n  id: 4,\n  description: `all Infinity multipliers and generators are disabled. The goal must be reached within a certain\n      number of Infinities or else you will fail the Challenge.`,\n  goal: DC.E2750,\n  goalIncrease: DC.E550,\n  restriction: completions => Math.max(16 - 4 * completions, 0),\n  checkRestriction: restriction => Currency.infinities.lte(restriction),\n  formatRestriction: restriction => restriction === 0 ? \"without any Infinities\" : `in ${quantifyInt(\"Infinity\", restriction)} or less`,\n  failedRestriction: \"(Too many Infinities for more)\",\n  reward: {\n    description: \"Infinity Dimension multiplier based on unspent IP\",\n    effect: completions => Currency.infinityPoints.value.pow(0.003 + completions * 0.002),\n    cap: DC.E200,\n    formatEffect: value => formatX(value, 2, 1)\n  }\n}, {\n  id: 5,\n  description: () => `Antimatter Galaxy cost increase scaling starts immediately (normally at ${formatInt(100)}\n      Galaxies). Dimension Boost costs scaling is massively increased.`,\n  goal: DC.E750,\n  pelleGoal: DC.E1400,\n  goalIncrease: DC.E400,\n  reward: {\n    description: \"Distant Galaxy cost scaling starts later\",\n    effect: completions => completions * 5,\n    formatEffect: value => `${formatInt(value)} AG later`\n  }\n}, {\n  id: 6,\n  // The asterisk, if present, will get replaced with strings generated from the scramble text\n  description: () => {\n    if (Enslaved.isRunning) return \"you *. The cost of upgrading your max Replicanti Galaxies is massively reduced.\";\n    return \"you cannot gain Antimatter Galaxies normally. The cost of upgrading your max Replicanti\" + \" Galaxies is massively reduced.\";\n  },\n  goal: DC.E850,\n  pelleGoal: DC.E1500,\n  goalIncrease: DC.E250,\n  reward: {\n    description: \"Further reduce Antimatter Dimension cost multiplier growth\",\n    effect: completions => completions * 0.2,\n    formatEffect: value => {\n      const total = Math.round(Player.dimensionMultDecrease + Effects.sum(EternityChallenge(6).reward)) - value;\n      return `-${format(value, 2, 1)} (${formatX(total, 2, 1)} total)`;\n    }\n  },\n  scrambleText: [\"cannot gain Antimatter Galaxies normally\", \"c㏰'퐚 gai鸭 Anti꟢at랜erﻪﶓa⁍axie㮾 䂇orma㦂l\"]\n}, {\n  id: 7,\n  description: \"1st Time Dimensions produce 8th Infinity Dimensions and 1st Infinity Dimensions produce \" + \"7th Antimatter Dimensions. Tickspeed also directly applies to Infinity and Time Dimensions.\",\n  goal: DC.E2000,\n  pelleGoal: DC.E2700,\n  goalIncrease: DC.E530,\n  effect: () => TimeDimension(1).productionPerSecond,\n  reward: {\n    description: \"1st Time Dimension produces 8th Infinity Dimensions\",\n    effect: completions => TimeDimension(1).productionPerSecond.pow(completions * 0.2).minus(1).clampMin(0),\n    formatEffect: value => `${format(value, 2, 1)} per second`\n  }\n}, {\n  id: 8,\n  description: () => `you can only upgrade Infinity Dimensions ${formatInt(50)} times and Replicanti\n      upgrades ${formatInt(40)} times. Infinity Dimension and Replicanti upgrade autobuyers are disabled.`,\n  goal: DC.E1300,\n  pelleGoal: DC.E2800,\n  goalIncrease: DC.E900,\n  reward: {\n    description: \"Infinity Power strengthens Replicanti Galaxies\",\n    effect: completions => {\n      const infinityPower = Math.log10(Currency.infinityPower.value.pLog10() + 1);\n      return Math.max(0, Math.pow(infinityPower, 0.03 * completions) - 1);\n    },\n    formatEffect: value => formatPercents(value, 2)\n  }\n}, {\n  id: 9,\n  description: () => `you cannot buy Tickspeed upgrades. Infinity Power instead multiplies\n      Time Dimensions with greatly reduced effect. ${specialInfinityGlyphDisabledEffectText()}`,\n  goal: DC.E1750,\n  pelleGoal: DC.E2900,\n  goalIncrease: DC.E250,\n  reward: {\n    description: \"Infinity Dimension multiplier based on Time Shards\",\n    effect: completions => Currency.timeShards.value.pow(completions * 0.1).clampMin(1),\n    cap: DC.E400,\n    formatEffect: value => formatX(value, 2, 1)\n  }\n}, {\n  id: 10,\n  description: () => {\n    let description = `Time Dimensions and Infinity Dimensions are disabled. You gain an immense boost from\n        Infinities to Antimatter Dimensions (Infinities${formatPow(950)}). ${specialInfinityGlyphDisabledEffectText()}`;\n    EternityChallenge(10).applyEffect(v => description += ` Currently: ${formatX(v, 2, 1)}`);\n    return description;\n  },\n  goal: DC.E3000,\n  pelleGoal: DC.E3200,\n  goalIncrease: DC.E300,\n  effect: () => Decimal.pow(Currency.infinitiesTotal.value, 950).clampMin(1).pow(TimeStudy(31).effectOrDefault(1)),\n  reward: {\n    description: \"Time Dimension multiplier based on Infinities\",\n    effect: completions => {\n      const mult = Currency.infinitiesTotal.value.times(2.783e-6).pow(0.4 + 0.1 * completions).clampMin(1);\n      return mult.powEffectOf(TimeStudy(31));\n    },\n    formatEffect: value => {\n      // Since TS31 is already accounted for in the effect prop, we need to \"undo\" it to display the base value here\n      const mult = formatX(value, 2, 1);\n      return TimeStudy(31).canBeApplied ? `${formatX(value.pow(1 / TimeStudy(31).effectValue), 2, 1)} (After TS31: ${mult})` : mult;\n    }\n  }\n}, {\n  id: 11,\n  description: () => `all Dimension multipliers and powers are disabled except for the multipliers from\n      Infinity Power and Dimension Boosts (to Antimatter Dimensions). ${specialInfinityGlyphDisabledEffectText()}`,\n  goal: DC.E450,\n  pelleGoal: DC.E11200,\n  goalIncrease: DC.E200,\n  pelleGoalIncrease: DC.E1400,\n  reward: {\n    description: \"Further reduce Tickspeed cost multiplier growth\",\n    effect: completions => completions * 0.07,\n    formatEffect: value => {\n      const total = Math.round(Player.tickSpeedMultDecrease + Effects.sum(EternityChallenge(11).reward)) - value;\n      return `-${format(value, 2, 2)} (${formatX(total, 2, 2)} total)`;\n    }\n  }\n}, {\n  id: 12,\n  description: () => PlayerProgress.realityUnlocked() ? `the game runs ×${formatInt(1000)} slower; all other in-game game speed effects are disabled. The goal must be reached\n        within a certain amount of time or you will fail the Challenge. ${specialInfinityGlyphDisabledEffectText()}` : `the game runs ×${formatInt(1000)} slower. The goal must be reached\n        within a certain amount of time or you will fail the Challenge.`,\n  goal: DC.E110000,\n  pelleGoal: DC.E208000,\n  goalIncrease: DC.E12000,\n  restriction: completions => Math.max(10 - 2 * completions, 1) / 10,\n  checkRestriction: restriction => Time.thisEternity.totalSeconds / getGlobalSpeedFactor() < restriction,\n  formatRestriction: restriction => `in ${quantify(\"real in-game second\", restriction, 0, 1)} or less.`,\n  failedRestriction: \"(Too slow for more)\",\n  reward: {\n    description: \"Infinity Dimension cost multipliers are reduced\",\n    effect: completions => 1 - completions * 0.008,\n    formatEffect: value => `x${formatPow(value, 3, 3)}`\n  }\n}];","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/challenges/eternity-challenges.js"],"names":["DC","specialInfinityGlyphDisabledEffectText","PelleRifts","chaos","milestones","canBeApplied","eternityChallenges","id","description","goal","E1800","goalIncrease","E200","reward","effect","completions","Decimal","pow","Math","max","player","records","thisEternity","time","formatEffect","value","formatX","scrambleText","E975","pelleGoal","E1750","E175","Currency","infinityPower","clampMin","cap","E100","E600","E925","E75","formatInt","format","E2750","E550","restriction","checkRestriction","infinities","lte","formatRestriction","quantifyInt","failedRestriction","infinityPoints","E750","E1400","E400","Enslaved","isRunning","E850","E1500","E250","total","round","Player","dimensionMultDecrease","Effects","sum","EternityChallenge","E2000","E2700","E530","TimeDimension","productionPerSecond","minus","E1300","E2800","E900","log10","pLog10","formatPercents","E2900","timeShards","formatPow","applyEffect","v","E3000","E3200","E300","infinitiesTotal","TimeStudy","effectOrDefault","mult","times","powEffectOf","effectValue","E450","E11200","pelleGoalIncrease","tickSpeedMultDecrease","PlayerProgress","realityUnlocked","E110000","E208000","E12000","Time","totalSeconds","getGlobalSpeedFactor","quantify"],"mappings":"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","sourcesContent":["import { DC } from \"../../constants\";\r\n\r\nconst specialInfinityGlyphDisabledEffectText = () => (PelleRifts.chaos.milestones[1].canBeApplied\r\n  ? \"The Pelle-Specific effect from Infinity Glyphs is also disabled.\"\r\n  : \"\");\r\n\r\nexport const eternityChallenges = [\r\n  {\r\n    id: 1,\r\n    description: \"Time Dimensions are disabled.\",\r\n    goal: DC.E1800,\r\n    goalIncrease: DC.E200,\r\n    reward: {\r\n      description: \"Time Dimension multiplier based on time spent this Eternity\",\r\n      effect: completions =>\r\n        Decimal.pow(Math.max(player.records.thisEternity.time / 10, 0.9), 0.3 + (completions * 0.05)),\r\n      formatEffect: value => formatX(value, 2, 1)\r\n    },\r\n    // These will get notation-formatted and scrambled between for the final goal\r\n    scrambleText: [\"1e2600\", \"1e201600\"],\r\n  },\r\n  {\r\n    id: 2,\r\n    description: \"Infinity Dimensions are disabled.\",\r\n    goal: DC.E975,\r\n    pelleGoal: DC.E1750,\r\n    goalIncrease: DC.E175,\r\n    reward: {\r\n      description: \"1st Infinity Dimension multiplier based on Infinity Power\",\r\n      effect: completions => Currency.infinityPower.value.pow(1.5 / (700 - completions * 100)).clampMin(1),\r\n      cap: DC.E100,\r\n      formatEffect: value => formatX(value, 2, 1)\r\n    }\r\n  },\r\n  {\r\n    id: 3,\r\n    description: \"Antimatter Dimensions 5-8 don't produce anything. Dimensional Sacrifice is disabled.\",\r\n    goal: DC.E600,\r\n    pelleGoal: DC.E925,\r\n    goalIncrease: DC.E75,\r\n    reward: {\r\n      description: () => `Increase the multiplier for buying ${formatInt(10)} Antimatter Dimensions`,\r\n      effect: completions => completions * 0.72,\r\n      formatEffect: value => `+${format(value, 2, 2)}`\r\n    }\r\n  },\r\n  {\r\n    id: 4,\r\n    description: `all Infinity multipliers and generators are disabled. The goal must be reached within a certain\r\n      number of Infinities or else you will fail the Challenge.`,\r\n    goal: DC.E2750,\r\n    goalIncrease: DC.E550,\r\n    restriction: completions => Math.max(16 - 4 * completions, 0),\r\n    checkRestriction: restriction => Currency.infinities.lte(restriction),\r\n    formatRestriction: restriction => (restriction === 0\r\n      ? \"without any Infinities\"\r\n      : `in ${quantifyInt(\"Infinity\", restriction)} or less`),\r\n    failedRestriction: \"(Too many Infinities for more)\",\r\n    reward: {\r\n      description: \"Infinity Dimension multiplier based on unspent IP\",\r\n      effect: completions => Currency.infinityPoints.value.pow(0.003 + completions * 0.002),\r\n      cap: DC.E200,\r\n      formatEffect: value => formatX(value, 2, 1)\r\n    }\r\n  },\r\n  {\r\n    id: 5,\r\n    description: () => `Antimatter Galaxy cost increase scaling starts immediately (normally at ${formatInt(100)}\r\n      Galaxies). Dimension Boost costs scaling is massively increased.`,\r\n    goal: DC.E750,\r\n    pelleGoal: DC.E1400,\r\n    goalIncrease: DC.E400,\r\n    reward: {\r\n      description: \"Distant Galaxy cost scaling starts later\",\r\n      effect: completions => completions * 5,\r\n      formatEffect: value => `${formatInt(value)} AG later`\r\n    }\r\n  },\r\n  {\r\n    id: 6,\r\n    // The asterisk, if present, will get replaced with strings generated from the scramble text\r\n    description: () => {\r\n      if (Enslaved.isRunning) return \"you *. The cost of upgrading your max Replicanti Galaxies is massively reduced.\";\r\n      return \"you cannot gain Antimatter Galaxies normally. The cost of upgrading your max Replicanti\" +\r\n              \" Galaxies is massively reduced.\";\r\n    },\r\n    goal: DC.E850,\r\n    pelleGoal: DC.E1500,\r\n    goalIncrease: DC.E250,\r\n    reward: {\r\n      description: \"Further reduce Antimatter Dimension cost multiplier growth\",\r\n      effect: completions => completions * 0.2,\r\n      formatEffect: value => {\r\n        const total = Math.round(Player.dimensionMultDecrease + Effects.sum(EternityChallenge(6).reward)) - value;\r\n        return `-${format(value, 2, 1)} (${formatX(total, 2, 1)} total)`;\r\n      }\r\n    },\r\n    scrambleText: [\"cannot gain Antimatter Galaxies normally\", \"c㏰'퐚 gai鸭 Anti꟢at랜erﻪﶓa⁍axie㮾 䂇orma㦂l\"],\r\n  },\r\n  {\r\n    id: 7,\r\n    description:\r\n      \"1st Time Dimensions produce 8th Infinity Dimensions and 1st Infinity Dimensions produce \" +\r\n      \"7th Antimatter Dimensions. Tickspeed also directly applies to Infinity and Time Dimensions.\",\r\n    goal: DC.E2000,\r\n    pelleGoal: DC.E2700,\r\n    goalIncrease: DC.E530,\r\n    effect: () => TimeDimension(1).productionPerSecond,\r\n    reward: {\r\n      description: \"1st Time Dimension produces 8th Infinity Dimensions\",\r\n      effect: completions => TimeDimension(1).productionPerSecond.pow(completions * 0.2).minus(1).clampMin(0),\r\n      formatEffect: value => `${format(value, 2, 1)} per second`\r\n    }\r\n  },\r\n  {\r\n    id: 8,\r\n    description: () => `you can only upgrade Infinity Dimensions ${formatInt(50)} times and Replicanti\r\n      upgrades ${formatInt(40)} times. Infinity Dimension and Replicanti upgrade autobuyers are disabled.`,\r\n    goal: DC.E1300,\r\n    pelleGoal: DC.E2800,\r\n    goalIncrease: DC.E900,\r\n    reward: {\r\n      description: \"Infinity Power strengthens Replicanti Galaxies\",\r\n      effect: completions => {\r\n        const infinityPower = Math.log10(Currency.infinityPower.value.pLog10() + 1);\r\n        return Math.max(0, Math.pow(infinityPower, 0.03 * completions) - 1);\r\n      },\r\n      formatEffect: value => formatPercents(value, 2)\r\n    }\r\n  },\r\n  {\r\n    id: 9,\r\n    description: () => `you cannot buy Tickspeed upgrades. Infinity Power instead multiplies\r\n      Time Dimensions with greatly reduced effect. ${specialInfinityGlyphDisabledEffectText()}`,\r\n    goal: DC.E1750,\r\n    pelleGoal: DC.E2900,\r\n    goalIncrease: DC.E250,\r\n    reward: {\r\n      description: \"Infinity Dimension multiplier based on Time Shards\",\r\n      effect: completions => Currency.timeShards.value.pow(completions * 0.1).clampMin(1),\r\n      cap: DC.E400,\r\n      formatEffect: value => formatX(value, 2, 1)\r\n    }\r\n  },\r\n  {\r\n    id: 10,\r\n    description: () => {\r\n      let description = `Time Dimensions and Infinity Dimensions are disabled. You gain an immense boost from\r\n        Infinities to Antimatter Dimensions (Infinities${formatPow(950)}). ${specialInfinityGlyphDisabledEffectText()}`;\r\n      EternityChallenge(10).applyEffect(v => description += ` Currently: ${formatX(v, 2, 1)}`);\r\n      return description;\r\n    },\r\n    goal: DC.E3000,\r\n    pelleGoal: DC.E3200,\r\n    goalIncrease: DC.E300,\r\n    effect: () => Decimal.pow(Currency.infinitiesTotal.value, 950).clampMin(1).pow(TimeStudy(31).effectOrDefault(1)),\r\n    reward: {\r\n      description: \"Time Dimension multiplier based on Infinities\",\r\n      effect: completions => {\r\n        const mult = Currency.infinitiesTotal.value.times(2.783e-6).pow(0.4 + 0.1 * completions).clampMin(1);\r\n        return mult.powEffectOf(TimeStudy(31));\r\n      },\r\n      formatEffect: value => {\r\n        // Since TS31 is already accounted for in the effect prop, we need to \"undo\" it to display the base value here\r\n        const mult = formatX(value, 2, 1);\r\n        return TimeStudy(31).canBeApplied\r\n          ? `${formatX(value.pow(1 / TimeStudy(31).effectValue), 2, 1)} (After TS31: ${mult})`\r\n          : mult;\r\n      }\r\n    }\r\n  },\r\n  {\r\n    id: 11,\r\n    description: () => `all Dimension multipliers and powers are disabled except for the multipliers from\r\n      Infinity Power and Dimension Boosts (to Antimatter Dimensions). ${specialInfinityGlyphDisabledEffectText()}`,\r\n    goal: DC.E450,\r\n    pelleGoal: DC.E11200,\r\n    goalIncrease: DC.E200,\r\n    pelleGoalIncrease: DC.E1400,\r\n    reward: {\r\n      description: \"Further reduce Tickspeed cost multiplier growth\",\r\n      effect: completions => completions * 0.07,\r\n      formatEffect: value => {\r\n        const total = Math.round(Player.tickSpeedMultDecrease + Effects.sum(EternityChallenge(11).reward)) - value;\r\n        return `-${format(value, 2, 2)} (${formatX(total, 2, 2)} total)`;\r\n      }\r\n    }\r\n  },\r\n  {\r\n    id: 12,\r\n    description: () => (PlayerProgress.realityUnlocked()\r\n      ? `the game runs ×${formatInt(1000)} slower; all other in-game game speed effects are disabled. The goal must be reached\r\n        within a certain amount of time or you will fail the Challenge. ${specialInfinityGlyphDisabledEffectText()}`\r\n      : `the game runs ×${formatInt(1000)} slower. The goal must be reached\r\n        within a certain amount of time or you will fail the Challenge.`),\r\n    goal: DC.E110000,\r\n    pelleGoal: DC.E208000,\r\n    goalIncrease: DC.E12000,\r\n    restriction: completions => Math.max(10 - 2 * completions, 1) / 10,\r\n    checkRestriction: restriction => Time.thisEternity.totalSeconds / getGlobalSpeedFactor() < restriction,\r\n    formatRestriction: restriction => `in ${quantify(\"real in-game second\", restriction, 0, 1)} or less.`,\r\n    failedRestriction: \"(Too slow for more)\",\r\n    reward: {\r\n      description: \"Infinity Dimension cost multipliers are reduced\",\r\n      effect: completions => 1 - completions * 0.008,\r\n      formatEffect: value => `x${formatPow(value, 3, 3)}`\r\n    }\r\n  }\r\n];\r\n"]},"metadata":{},"sourceType":"module"}