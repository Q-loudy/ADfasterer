{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n// All news IDs follow the format [letter(s)][number] so we always assume that's the case and make sure to access the\n// relevant props within player.news.seen\nexport const NewsHandler = {\n  // In principle 32 should work but something seems to go wrong with negative numbers in the function that counts\n  // the number of bits in a bitmask, so we have to use 31.\n  BITS_PER_MASK: 31,\n\n  addSeenNews(id) {\n    // From very old save versions; we ignore any IDs which belong to tickers which no longer exist.\n    if (!GameDatabase.news.map(e => e.id).includes(id)) return;\n    const groups = id.match(/([a-z]+)([0-9]+)/);\n    const type = groups[1];\n    const number = parseInt(groups[2], 10); // This check is needed for migration purposes because we attempt to add news tickers before the relevant\n    // properties are created in both normal and dev migrations. There's some odd behavior which results in changes\n    // either not persisting outside of this function or being immediately overwritten if the props aren't specifically\n    // added here for some reason (as opposed to being initialized to empty in player.js)\n\n    if (!player.news.seen[type]) player.news.seen[type] = []; // If the bit array isn't large enough (ie. the numerical ID is the largest we've seen so far by a long shot), then\n    // we pad the array with zeroes until we can fit the new ID in before actually adding it.\n\n    while (this.BITS_PER_MASK * player.news.seen[type].length <= number) player.news.seen[type].push(0);\n\n    player.news.seen[type][Math.floor(number / this.BITS_PER_MASK)] |= 1 << number % this.BITS_PER_MASK;\n    player.news.totalSeen++;\n  },\n\n  hasSeenNews(id) {\n    const groups = id.match(/([a-z]+)([0-9]+)/);\n    const type = groups[1];\n    const number = parseInt(groups[2], 10);\n    const bitArray = player.news.seen[type];\n    if (!bitArray || this.BITS_PER_MASK * bitArray.length < number) return false;\n    return (bitArray[Math.floor(number / this.BITS_PER_MASK)] |= 1 << number % this.BITS_PER_MASK) !== 0;\n  },\n\n  get uniqueTickersSeen() {\n    let totalSeen = 0;\n\n    for (const bitmaskArray of Object.values(player.news.seen)) {\n      for (const bitmask of bitmaskArray) {\n        totalSeen += countValuesFromBitmask(bitmask);\n      }\n    }\n\n    return totalSeen;\n  }\n\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/news-ticker.js"],"names":["NewsHandler","BITS_PER_MASK","addSeenNews","id","GameDatabase","news","map","e","includes","groups","match","type","number","parseInt","player","seen","length","push","Math","floor","totalSeen","hasSeenNews","bitArray","uniqueTickersSeen","bitmaskArray","Object","values","bitmask","countValuesFromBitmask"],"mappings":";;AAAA;AACA;AACA,OAAO,MAAMA,WAAW,GAAG;AACzB;AACA;AACAC,EAAAA,aAAa,EAAE,EAHU;;AAKzBC,EAAAA,WAAW,CAACC,EAAD,EAAK;AACd;AACA,QAAI,CAACC,YAAY,CAACC,IAAb,CAAkBC,GAAlB,CAAsBC,CAAC,IAAIA,CAAC,CAACJ,EAA7B,EAAiCK,QAAjC,CAA0CL,EAA1C,CAAL,EAAoD;AAEpD,UAAMM,MAAM,GAAGN,EAAE,CAACO,KAAH,CAAS,kBAAT,CAAf;AACA,UAAMC,IAAI,GAAGF,MAAM,CAAC,CAAD,CAAnB;AACA,UAAMG,MAAM,GAAGC,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAAvB,CANc,CAQd;AACA;AACA;AACA;;AACA,QAAI,CAACK,MAAM,CAACT,IAAP,CAAYU,IAAZ,CAAiBJ,IAAjB,CAAL,EAA6BG,MAAM,CAACT,IAAP,CAAYU,IAAZ,CAAiBJ,IAAjB,IAAyB,EAAzB,CAZf,CAcd;AACA;;AACA,WAAO,KAAKV,aAAL,GAAqBa,MAAM,CAACT,IAAP,CAAYU,IAAZ,CAAiBJ,IAAjB,EAAuBK,MAA5C,IAAsDJ,MAA7D,EAAqEE,MAAM,CAACT,IAAP,CAAYU,IAAZ,CAAiBJ,IAAjB,EAAuBM,IAAvB,CAA4B,CAA5B;;AACrEH,IAAAA,MAAM,CAACT,IAAP,CAAYU,IAAZ,CAAiBJ,IAAjB,EAAuBO,IAAI,CAACC,KAAL,CAAWP,MAAM,GAAG,KAAKX,aAAzB,CAAvB,KAAmE,KAAMW,MAAM,GAAG,KAAKX,aAAvF;AACAa,IAAAA,MAAM,CAACT,IAAP,CAAYe,SAAZ;AACD,GAxBwB;;AA0BzBC,EAAAA,WAAW,CAAClB,EAAD,EAAK;AACd,UAAMM,MAAM,GAAGN,EAAE,CAACO,KAAH,CAAS,kBAAT,CAAf;AACA,UAAMC,IAAI,GAAGF,MAAM,CAAC,CAAD,CAAnB;AACA,UAAMG,MAAM,GAAGC,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAAvB;AACA,UAAMa,QAAQ,GAAGR,MAAM,CAACT,IAAP,CAAYU,IAAZ,CAAiBJ,IAAjB,CAAjB;AAEA,QAAI,CAACW,QAAD,IAAa,KAAKrB,aAAL,GAAqBqB,QAAQ,CAACN,MAA9B,GAAuCJ,MAAxD,EAAgE,OAAO,KAAP;AAChE,WAAO,CAACU,QAAQ,CAACJ,IAAI,CAACC,KAAL,CAAWP,MAAM,GAAG,KAAKX,aAAzB,CAAD,CAAR,IAAqD,KAAMW,MAAM,GAAG,KAAKX,aAA1E,MAA8F,CAArG;AACD,GAlCwB;;AAoCzB,MAAIsB,iBAAJ,GAAwB;AACtB,QAAIH,SAAS,GAAG,CAAhB;;AACA,SAAK,MAAMI,YAAX,IAA2BC,MAAM,CAACC,MAAP,CAAcZ,MAAM,CAACT,IAAP,CAAYU,IAA1B,CAA3B,EAA4D;AAC1D,WAAK,MAAMY,OAAX,IAAsBH,YAAtB,EAAoC;AAClCJ,QAAAA,SAAS,IAAIQ,sBAAsB,CAACD,OAAD,CAAnC;AACD;AACF;;AACD,WAAOP,SAAP;AACD;;AA5CwB,CAApB","sourcesContent":["// All news IDs follow the format [letter(s)][number] so we always assume that's the case and make sure to access the\r\n// relevant props within player.news.seen\r\nexport const NewsHandler = {\r\n  // In principle 32 should work but something seems to go wrong with negative numbers in the function that counts\r\n  // the number of bits in a bitmask, so we have to use 31.\r\n  BITS_PER_MASK: 31,\r\n\r\n  addSeenNews(id) {\r\n    // From very old save versions; we ignore any IDs which belong to tickers which no longer exist.\r\n    if (!GameDatabase.news.map(e => e.id).includes(id)) return;\r\n\r\n    const groups = id.match(/([a-z]+)(\\d+)/u);\r\n    const type = groups[1];\r\n    const number = parseInt(groups[2], 10);\r\n\r\n    // This check is needed for migration purposes because we attempt to add news tickers before the relevant\r\n    // properties are created in both normal and dev migrations. There's some odd behavior which results in changes\r\n    // either not persisting outside of this function or being immediately overwritten if the props aren't specifically\r\n    // added here for some reason (as opposed to being initialized to empty in player.js)\r\n    if (!player.news.seen[type]) player.news.seen[type] = [];\r\n\r\n    // If the bit array isn't large enough (ie. the numerical ID is the largest we've seen so far by a long shot), then\r\n    // we pad the array with zeroes until we can fit the new ID in before actually adding it.\r\n    while (this.BITS_PER_MASK * player.news.seen[type].length <= number) player.news.seen[type].push(0);\r\n    player.news.seen[type][Math.floor(number / this.BITS_PER_MASK)] |= 1 << (number % this.BITS_PER_MASK);\r\n    player.news.totalSeen++;\r\n  },\r\n\r\n  hasSeenNews(id) {\r\n    const groups = id.match(/([a-z]+)(\\d+)/u);\r\n    const type = groups[1];\r\n    const number = parseInt(groups[2], 10);\r\n    const bitArray = player.news.seen[type];\r\n\r\n    if (!bitArray || this.BITS_PER_MASK * bitArray.length < number) return false;\r\n    return (bitArray[Math.floor(number / this.BITS_PER_MASK)] |= 1 << (number % this.BITS_PER_MASK)) !== 0;\r\n  },\r\n\r\n  get uniqueTickersSeen() {\r\n    let totalSeen = 0;\r\n    for (const bitmaskArray of Object.values(player.news.seen)) {\r\n      for (const bitmask of bitmaskArray) {\r\n        totalSeen += countValuesFromBitmask(bitmask);\r\n      }\r\n    }\r\n    return totalSeen;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}