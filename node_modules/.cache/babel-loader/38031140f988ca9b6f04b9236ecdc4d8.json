{"ast":null,"code":"import { DC } from \"../../constants\";\nimport { PlayerProgress } from \"../../player-progress\";\nimport { MultiplierTabIcons } from \"./icons\"; // See index.js for documentation\n// Note most of the isActive entries in here have redundant-looking DT/s != 0 checks because DT is treated as a\n// special case due to not being a prestige currency but still needing to be treated like one in the UI. This\n// is because it requires dilation to be unlocked, which isn't a given, and we want the tab continuously visible\n// after the first ever dilation unlock on the 0th reality\n\nexport const DT = {\n  total: {\n    name: \"Dilated Time gain\",\n    displayOverride: () => `${format(getDilationGainPerSecond().times(getGameSpeedupForDisplay()), 2, 2)}/sec`,\n    multValue: () => getDilationGainPerSecond().times(getGameSpeedupForDisplay()),\n    isActive: () => PlayerProgress.realityUnlocked() || PlayerProgress.dilationUnlocked() && getDilationGainPerSecond().gt(0),\n    dilationEffect: () => Enslaved.isRunning ? 0.85 : 1,\n    isDilated: true,\n    overlay: [\"Î¨\"]\n  },\n  achievement: {\n    name: \"Achievements\",\n    multValue: () => Achievement(132).effectOrDefault(1) * Achievement(137).effectOrDefault(1),\n    isActive: () => (Achievement(132).canBeApplied || Achievement(137).canBeApplied) && getDilationGainPerSecond().neq(0),\n    icon: MultiplierTabIcons.ACHIEVEMENT\n  },\n  dilation: {\n    name: \"Repeatable Dilation Upgrades\",\n    multValue: () => DC.D1.timesEffectsOf(DilationUpgrade.dtGain, DilationUpgrade.dtGainPelle, DilationUpgrade.flatDilationMult),\n    isActive: () => DC.D1.timesEffectsOf(DilationUpgrade.dtGain, DilationUpgrade.dtGainPelle, DilationUpgrade.flatDilationMult).gt(1),\n    icon: MultiplierTabIcons.UPGRADE(\"dilation\")\n  },\n  amplifierDT: {\n    name: \"Reality Upgrade - Temporal Amplifier\",\n    multValue: () => RealityUpgrade(1).effectOrDefault(1),\n    isActive: () => RealityUpgrade(1).canBeApplied && getDilationGainPerSecond().neq(0) && !Pelle.isDoomed,\n    icon: MultiplierTabIcons.UPGRADE(\"reality\")\n  },\n  glyph: {\n    name: \"Glyph Effects\",\n    multValue: () => {\n      const dtMult = getAdjustedGlyphEffect(\"dilationDT\").times(Pelle.specialGlyphEffect.dilation);\n      const repliDT = Replicanti.areUnlocked ? Math.clampMin(Decimal.log10(Replicanti.amount) * getAdjustedGlyphEffect(\"replicationdtgain\"), 1) : DC.D1;\n      return dtMult.times(repliDT);\n    },\n    isActive: () => PlayerProgress.realityUnlocked() && getDilationGainPerSecond().neq(0),\n    icon: MultiplierTabIcons.GENERIC_GLYPH\n  },\n  ra1: {\n    name: \"Ra Upgrade - Multiplier based on TT\",\n    multValue: () => DC.D1.timesEffectsOf(Ra.unlocks.continuousTTBoost.effects.dilatedTime),\n    isActive: () => Ra.unlocks.autoTP.canBeApplied && getDilationGainPerSecond().neq(0),\n    icon: MultiplierTabIcons.GENERIC_RA\n  },\n  ra2: {\n    name: \"Ra Upgrade - Multiplier based on peak game speed\",\n    multValue: () => DC.D1.timesEffectsOf(Ra.unlocks.peakGamespeedDT),\n    isActive: () => Ra.unlocks.autoTP.canBeApplied && getDilationGainPerSecond().neq(0),\n    icon: MultiplierTabIcons.GENERIC_RA\n  },\n  alchemy: {\n    name: \"Glyph Alchemy\",\n    multValue: () => AlchemyResource.dilation.effectOrDefault(1),\n    isActive: () => Ra.unlocks.unlockGlyphAlchemy.canBeApplied && getDilationGainPerSecond().neq(0),\n    icon: MultiplierTabIcons.ALCHEMY\n  },\n  iap: {\n    name: \"Shop Tab Purchases\",\n    multValue: () => new Decimal(ShopPurchase.dilatedTimePurchases.currentMult ** (Pelle.isDoomed ? 0.5 : 1)),\n    isActive: () => ShopPurchaseData.totalSTD > 0 && getDilationGainPerSecond().neq(0),\n    icon: MultiplierTabIcons.IAP\n  },\n  nerfV: {\n    name: \"V's Reality\",\n    powValue: () => 0.5,\n    isActive: () => V.isRunning && getDilationGainPerSecond().neq(0),\n    icon: MultiplierTabIcons.GENERIC_V\n  },\n  nerfPelle: {\n    name: \"Doomed Reality\",\n    multValue: 1e-5,\n    isActive: () => Pelle.isDoomed && getDilationGainPerSecond().neq(0),\n    icon: MultiplierTabIcons.PELLE\n  },\n  gamespeed: {\n    name: \"Current Game speed\",\n    multValue: () => getGameSpeedupForDisplay(),\n    isActive: () => getGameSpeedupForDisplay() > 1 && getDilationGainPerSecond().neq(0),\n    ignoresNerfPowers: true,\n    icon: MultiplierTabIcons.GAMESPEED\n  }\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/multiplier-tab/dilated-time.js"],"names":["DC","PlayerProgress","MultiplierTabIcons","DT","total","name","displayOverride","format","getDilationGainPerSecond","times","getGameSpeedupForDisplay","multValue","isActive","realityUnlocked","dilationUnlocked","gt","dilationEffect","Enslaved","isRunning","isDilated","overlay","achievement","Achievement","effectOrDefault","canBeApplied","neq","icon","ACHIEVEMENT","dilation","D1","timesEffectsOf","DilationUpgrade","dtGain","dtGainPelle","flatDilationMult","UPGRADE","amplifierDT","RealityUpgrade","Pelle","isDoomed","glyph","dtMult","getAdjustedGlyphEffect","specialGlyphEffect","repliDT","Replicanti","areUnlocked","Math","clampMin","Decimal","log10","amount","GENERIC_GLYPH","ra1","Ra","unlocks","continuousTTBoost","effects","dilatedTime","autoTP","GENERIC_RA","ra2","peakGamespeedDT","alchemy","AlchemyResource","unlockGlyphAlchemy","ALCHEMY","iap","ShopPurchase","dilatedTimePurchases","currentMult","ShopPurchaseData","totalSTD","IAP","nerfV","powValue","V","GENERIC_V","nerfPelle","PELLE","gamespeed","ignoresNerfPowers","GAMESPEED"],"mappings":"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","sourcesContent":["import { DC } from \"../../constants\";\r\nimport { PlayerProgress } from \"../../player-progress\";\r\n\r\nimport { MultiplierTabIcons } from \"./icons\";\r\n\r\n// See index.js for documentation\r\n// Note most of the isActive entries in here have redundant-looking DT/s != 0 checks because DT is treated as a\r\n// special case due to not being a prestige currency but still needing to be treated like one in the UI. This\r\n// is because it requires dilation to be unlocked, which isn't a given, and we want the tab continuously visible\r\n// after the first ever dilation unlock on the 0th reality\r\nexport const DT = {\r\n  total: {\r\n    name: \"Dilated Time gain\",\r\n    displayOverride: () => `${format(getDilationGainPerSecond().times(getGameSpeedupForDisplay()), 2, 2)}/sec`,\r\n    multValue: () => getDilationGainPerSecond().times(getGameSpeedupForDisplay()),\r\n    isActive: () => PlayerProgress.realityUnlocked() ||\r\n      (PlayerProgress.dilationUnlocked() && getDilationGainPerSecond().gt(0)),\r\n    dilationEffect: () => (Enslaved.isRunning ? 0.85 : 1),\r\n    isDilated: true,\r\n    overlay: [\"Î¨\"],\r\n  },\r\n  achievement: {\r\n    name: \"Achievements\",\r\n    multValue: () => Achievement(132).effectOrDefault(1) * Achievement(137).effectOrDefault(1),\r\n    isActive: () => (Achievement(132).canBeApplied || Achievement(137).canBeApplied) &&\r\n      getDilationGainPerSecond().neq(0),\r\n    icon: MultiplierTabIcons.ACHIEVEMENT,\r\n  },\r\n  dilation: {\r\n    name: \"Repeatable Dilation Upgrades\",\r\n    multValue: () => DC.D1.timesEffectsOf(\r\n      DilationUpgrade.dtGain,\r\n      DilationUpgrade.dtGainPelle,\r\n      DilationUpgrade.flatDilationMult\r\n    ),\r\n    isActive: () => DC.D1.timesEffectsOf(\r\n      DilationUpgrade.dtGain,\r\n      DilationUpgrade.dtGainPelle,\r\n      DilationUpgrade.flatDilationMult\r\n    ).gt(1),\r\n    icon: MultiplierTabIcons.UPGRADE(\"dilation\"),\r\n  },\r\n  amplifierDT: {\r\n    name: \"Reality Upgrade - Temporal Amplifier\",\r\n    multValue: () => RealityUpgrade(1).effectOrDefault(1),\r\n    isActive: () => RealityUpgrade(1).canBeApplied && getDilationGainPerSecond().neq(0) && !Pelle.isDoomed,\r\n    icon: MultiplierTabIcons.UPGRADE(\"reality\"),\r\n  },\r\n  glyph: {\r\n    name: \"Glyph Effects\",\r\n    multValue: () => {\r\n      const dtMult = getAdjustedGlyphEffect(\"dilationDT\").times(Pelle.specialGlyphEffect.dilation);\r\n      const repliDT = Replicanti.areUnlocked\r\n        ? Math.clampMin(Decimal.log10(Replicanti.amount) * getAdjustedGlyphEffect(\"replicationdtgain\"), 1)\r\n        : DC.D1;\r\n      return dtMult.times(repliDT);\r\n    },\r\n    isActive: () => PlayerProgress.realityUnlocked() && getDilationGainPerSecond().neq(0),\r\n    icon: MultiplierTabIcons.GENERIC_GLYPH\r\n  },\r\n  ra1: {\r\n    name: \"Ra Upgrade - Multiplier based on TT\",\r\n    multValue: () => DC.D1.timesEffectsOf(Ra.unlocks.continuousTTBoost.effects.dilatedTime),\r\n    isActive: () => Ra.unlocks.autoTP.canBeApplied && getDilationGainPerSecond().neq(0),\r\n    icon: MultiplierTabIcons.GENERIC_RA,\r\n  },\r\n  ra2: {\r\n    name: \"Ra Upgrade - Multiplier based on peak game speed\",\r\n    multValue: () => DC.D1.timesEffectsOf(Ra.unlocks.peakGamespeedDT),\r\n    isActive: () => Ra.unlocks.autoTP.canBeApplied && getDilationGainPerSecond().neq(0),\r\n    icon: MultiplierTabIcons.GENERIC_RA,\r\n  },\r\n  alchemy: {\r\n    name: \"Glyph Alchemy\",\r\n    multValue: () => AlchemyResource.dilation.effectOrDefault(1),\r\n    isActive: () => Ra.unlocks.unlockGlyphAlchemy.canBeApplied && getDilationGainPerSecond().neq(0),\r\n    icon: MultiplierTabIcons.ALCHEMY,\r\n  },\r\n  iap: {\r\n    name: \"Shop Tab Purchases\",\r\n    multValue: () => new Decimal(ShopPurchase.dilatedTimePurchases.currentMult ** (Pelle.isDoomed ? 0.5 : 1)),\r\n    isActive: () => ShopPurchaseData.totalSTD > 0 && getDilationGainPerSecond().neq(0),\r\n    icon: MultiplierTabIcons.IAP,\r\n  },\r\n\r\n  nerfV: {\r\n    name: \"V's Reality\",\r\n    powValue: () => 0.5,\r\n    isActive: () => V.isRunning && getDilationGainPerSecond().neq(0),\r\n    icon: MultiplierTabIcons.GENERIC_V,\r\n  },\r\n  nerfPelle: {\r\n    name: \"Doomed Reality\",\r\n    multValue: 1e-5,\r\n    isActive: () => Pelle.isDoomed && getDilationGainPerSecond().neq(0),\r\n    icon: MultiplierTabIcons.PELLE,\r\n  },\r\n  gamespeed: {\r\n    name: \"Current Game speed\",\r\n    multValue: () => getGameSpeedupForDisplay(),\r\n    isActive: () => getGameSpeedupForDisplay() > 1 && getDilationGainPerSecond().neq(0),\r\n    ignoresNerfPowers: true,\r\n    icon: MultiplierTabIcons.GAMESPEED,\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}