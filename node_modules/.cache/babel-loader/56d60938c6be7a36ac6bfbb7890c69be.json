{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nimport { GameMechanicState, SetPurchasableMechanicState } from \"./game-mechanics\";\nimport { DC } from \"./constants\";\nimport FullScreenAnimationHandler from \"./full-screen-animation-handler\";\n\nfunction giveEternityRewards(auto) {\n  player.records.bestEternity.time = Math.min(player.records.thisEternity.time / getGlobalSpeedFactor(), player.records.bestEternity.time);\n  Currency.eternityPoints.add(gainedEternityPoints());\n  const newEternities = gainedEternities().times(Currency.eternities.value.pow(2 / 3).floor().clamp(5, 1000));\n\n  if (Currency.eternities.eq(0) && newEternities.lte(10)) {\n    Tab.dimensions.time.show();\n  }\n\n  Currency.eternities.add(newEternities);\n\n  if (EternityChallenge.isRunning) {\n    const challenge = EternityChallenge.current;\n    challenge.addCompletion(false);\n\n    if (Perk.studyECBulk.isBought) {\n      let completionCount = 0;\n\n      while (!challenge.isFullyCompleted && challenge.canBeCompleted) {\n        challenge.addCompletion(false);\n        completionCount++;\n      }\n\n      AutomatorData.lastECCompletionCount = completionCount;\n      if (Enslaved.isRunning && completionCount > 5) EnslavedProgress.ec1.giveProgress();\n    }\n\n    player.challenge.eternity.requirementBits &= ~(1 << challenge.id);\n    respecTimeStudies(auto);\n  }\n\n  addEternityTime(player.records.thisEternity.time, player.records.thisEternity.realTime, gainedEternityPoints(), newEternities);\n  player.records.thisReality.bestEternitiesPerMs = player.records.thisReality.bestEternitiesPerMs.clampMin(newEternities.div(Math.clampMin(33, player.records.thisEternity.realTime)));\n  player.records.bestEternity.bestEPminReality = player.records.bestEternity.bestEPminReality.max(player.records.thisEternity.bestEPmin);\n  Currency.infinitiesBanked.value = Currency.infinitiesBanked.value.plusEffectsOf(Achievement(131).effects.bankedInfinitiesGain, TimeStudy(191));\n\n  if (Effarig.isRunning && !EffarigUnlock.eternity.isUnlocked) {\n    EffarigUnlock.eternity.unlock();\n    beginProcessReality(getRealityProps(true));\n  }\n}\n\nexport function eternityAnimation() {\n  FullScreenAnimationHandler.display(\"a-eternify\", 3);\n}\nexport function eternityResetRequest() {\n  if (!Player.canEternity) return;\n  if (GameEnd.creditsEverClosed) return;\n  askEternityConfirmation();\n}\nexport function eternity(force, auto, specialConditions = {}) {\n  if (specialConditions.switchingDilation && !Player.canEternity) {\n    // eslint-disable-next-line no-param-reassign\n    force = true;\n  } // We define this variable so we can use it in checking whether to give\n  // the secret achievement for respec without studies.\n  // Annoyingly, we need to check for studies right here; giveEternityRewards removes studies if we're in an EC,\n  // so doing the check later doesn't give us the initial state of having studies or not.\n\n\n  const noStudies = player.timestudy.studies.length === 0;\n\n  if (!force) {\n    if (!Player.canEternity) return false;\n\n    if (RealityUpgrade(10).isLockingMechanics) {\n      RealityUpgrade(10).tryShowWarningModal();\n      return false;\n    }\n\n    if (RealityUpgrade(12).isLockingMechanics && EternityChallenge(1).isRunning) {\n      RealityUpgrade(12).tryShowWarningModal();\n      return false;\n    }\n\n    EventHub.dispatch(GAME_EVENT.ETERNITY_RESET_BEFORE);\n    giveEternityRewards(auto);\n    player.requirementChecks.reality.noEternities = false;\n  }\n\n  if (player.dilation.active) rewardTP(); // This needs to be after the dilation check for the \"can gain TP\" check in rewardTP to be correct.\n\n  if (force) {\n    player.challenge.eternity.current = 0;\n  }\n\n  initializeChallengeCompletions();\n  initializeResourcesAfterEternity();\n\n  if (!EternityMilestone.keepAutobuyers.isReached && !(Pelle.isDoomed && PelleUpgrade.keepAutobuyers.canBeApplied)) {\n    // Fix infinity because it can only break after big crunch autobuyer interval is maxed\n    player.break = false;\n  }\n\n  player.challenge.eternity.current = 0;\n\n  if (!specialConditions.enteringEC && !Pelle.isDoomed) {\n    player.dilation.active = false;\n  }\n\n  resetInfinityRuns();\n  InfinityDimensions.fullReset();\n  Replicanti.reset();\n  resetChallengeStuff();\n  AntimatterDimensions.reset();\n\n  if (!specialConditions.enteringEC && player.respec) {\n    if (noStudies) {\n      SecretAchievement(34).unlock();\n    }\n\n    respecTimeStudies(auto);\n    player.respec = false;\n  }\n\n  Currency.infinityPoints.reset();\n  InfinityDimensions.resetAmount();\n  player.records.thisInfinity.bestIPmin = DC.D0;\n  player.records.bestInfinity.bestIPminEternity = DC.D0;\n  player.records.thisEternity.bestEPmin = DC.D0;\n  player.records.thisEternity.bestInfinitiesPerMs = DC.D0;\n  player.records.thisEternity.bestIPMsWithoutMaxAll = DC.D0;\n  resetTimeDimensions();\n  resetTickspeed();\n  playerInfinityUpgradesOnReset();\n  AchievementTimers.marathon2.reset();\n  applyEU1();\n  player.records.thisInfinity.maxAM = DC.D0;\n  player.records.thisEternity.maxAM = DC.D0;\n  Currency.antimatter.reset();\n  ECTimeStudyState.invalidateCachedRequirements();\n  PelleStrikes.eternity.trigger();\n  EventHub.dispatch(GAME_EVENT.ETERNITY_RESET_AFTER);\n  return true;\n} // eslint-disable-next-line no-empty-function\n\nexport function animateAndEternity(callback) {\n  if (!Player.canEternity) return false;\n  const hasAnimation = !FullScreenAnimationHandler.isDisplaying && !RealityUpgrade(10).isLockingMechanics && !(RealityUpgrade(12).isLockingMechanics && EternityChallenge(1).isRunning) && (player.dilation.active && player.options.animations.dilation || !player.dilation.active && player.options.animations.eternity);\n\n  if (hasAnimation) {\n    if (player.dilation.active) {\n      animateAndUndilate(callback);\n    } else {\n      eternityAnimation();\n      setTimeout(() => {\n        eternity();\n        if (callback) callback();\n      }, 2250);\n    }\n  } else {\n    eternity();\n    if (callback) callback();\n  }\n\n  return hasAnimation;\n}\nexport function initializeChallengeCompletions(isReality) {\n  NormalChallenges.clearCompletions();\n  if (!PelleUpgrade.keepInfinityChallenges.canBeApplied) InfinityChallenges.clearCompletions();\n\n  if (!isReality && EternityMilestone.keepAutobuyers.isReached || Pelle.isDoomed) {\n    NormalChallenges.completeAll();\n  }\n\n  if (Achievement(133).isUnlocked && !Pelle.isDoomed) InfinityChallenges.completeAll();\n  player.challenge.normal.current = 0;\n  player.challenge.infinity.current = 0;\n}\nexport function initializeResourcesAfterEternity() {\n  player.sacrificed = DC.D0;\n  Currency.infinities.reset();\n  player.records.bestInfinity.time = 999999999999;\n  player.records.bestInfinity.realTime = 999999999999;\n  player.records.thisInfinity.time = 0;\n  player.records.thisInfinity.lastBuyTime = 0;\n  player.records.thisInfinity.realTime = 0;\n  player.dimensionBoosts = EternityMilestone.keepInfinityUpgrades.isReached ? 4 : 0;\n  player.galaxies = EternityMilestone.keepInfinityUpgrades.isReached ? 1 : 0;\n  player.partInfinityPoint = 0;\n  player.partInfinitied = 0;\n  player.IPMultPurchases = 0;\n  Currency.infinityPower.reset();\n  Currency.timeShards.reset();\n  player.records.thisEternity.time = 0;\n  player.records.thisEternity.realTime = 0;\n  player.totalTickGained = 0;\n  player.eterc8ids = 50;\n  player.eterc8repl = 40;\n  Player.resetRequirements(\"eternity\");\n}\nexport function applyEU1() {\n  if (player.eternityUpgrades.size < 3 && Perk.autounlockEU1.canBeApplied) {\n    for (const id of [1, 2, 3]) player.eternityUpgrades.add(id);\n  }\n} // We want this to be checked before any EP-related autobuyers trigger, but we need to call this from the autobuyer\n// code since those run asynchronously from gameLoop\n\nexport function applyEU2() {\n  if (player.eternityUpgrades.size < 6 && Perk.autounlockEU2.canBeApplied) {\n    const secondRow = EternityUpgrade.all.filter(u => u.id > 3);\n\n    for (const upgrade of secondRow) {\n      if (player.eternityPoints.gte(upgrade.cost / 1e10)) player.eternityUpgrades.add(upgrade.id);\n    }\n  }\n}\n\nfunction askEternityConfirmation() {\n  if (player.dilation.active && player.options.confirmations.dilation) {\n    Modal.exitDilation.show();\n  } else if (player.options.confirmations.eternity) {\n    Modal.eternity.show();\n  } else {\n    animateAndEternity();\n  }\n}\n\nexport function gainedEternities() {\n  return Pelle.isDisabled(\"eternityMults\") ? new Decimal(1) : new Decimal(getAdjustedGlyphEffect(\"timeetermult\")).timesEffectsOf(RealityUpgrade(3), Achievement(113)).pow(AlchemyResource.eternity.effectValue);\n}\nexport class EternityMilestoneState {\n  constructor(config) {\n    this.config = config;\n  }\n\n  get isReached() {\n    if (Pelle.isDoomed && this.config.givenByPelle) {\n      return this.config.givenByPelle();\n    }\n\n    return Currency.eternities.gte(this.config.eternities);\n  }\n\n}\nexport const EternityMilestone = mapGameDataToObject(GameDatabase.eternity.milestones, config => config.isBaseResource ? new EternityMilestoneState(config) : new EternityMilestoneState(config));\n\nclass EternityUpgradeState extends SetPurchasableMechanicState {\n  get currency() {\n    return Currency.eternityPoints;\n  }\n\n  get set() {\n    return player.eternityUpgrades;\n  }\n\n}\n\nclass EPMultiplierState extends GameMechanicState {\n  constructor() {\n    super({});\n    this.cachedCost = new Lazy(() => this.costAfterCount(player.epmultUpgrades));\n    this.cachedEffectValue = new Lazy(() => DC.D5.pow(player.epmultUpgrades));\n  }\n\n  get isAffordable() {\n    return !Pelle.isDoomed && Currency.eternityPoints.gte(this.cost);\n  }\n\n  get cost() {\n    return this.cachedCost.value;\n  }\n\n  get boughtAmount() {\n    return player.epmultUpgrades;\n  }\n\n  set boughtAmount(value) {\n    // Reality resets will make this bump amount negative, causing it to visually appear as 0 even when it isn't.\n    // A dev migration fixes bad autobuyer states and this change ensures it doesn't happen again\n    const diff = Math.clampMin(value - player.epmultUpgrades, 0);\n    player.epmultUpgrades = value;\n    this.cachedCost.invalidate();\n    this.cachedEffectValue.invalidate();\n    Autobuyer.eternity.bumpAmount(DC.D5.pow(diff));\n  }\n\n  get isCustomEffect() {\n    return true;\n  }\n\n  get effectValue() {\n    return this.cachedEffectValue.value;\n  }\n\n  purchase() {\n    if (!this.isAffordable) return false;\n    Currency.eternityPoints.subtract(this.cost);\n    ++this.boughtAmount;\n    return true;\n  }\n\n  buyMax(auto) {\n    if (!this.isAffordable) return false;\n\n    if (RealityUpgrade(15).isLockingMechanics) {\n      if (!auto) RealityUpgrade(15).tryShowWarningModal();\n      return false;\n    }\n\n    const bulk = bulkBuyBinarySearch(Currency.eternityPoints.value, {\n      costFunction: this.costAfterCount,\n      cumulative: true,\n      firstCost: this.cost\n    }, this.boughtAmount);\n    if (!bulk) return false;\n    Currency.eternityPoints.subtract(bulk.purchasePrice);\n    this.boughtAmount += bulk.quantity;\n    return true;\n  }\n\n  reset() {\n    this.boughtAmount = 0;\n  }\n\n  get costIncreaseThresholds() {\n    return [DC.E100, Decimal.NUMBER_MAX_VALUE, DC.E1300, DC.E4000];\n  }\n\n  costAfterCount(count) {\n    const costThresholds = EternityUpgrade.epMult.costIncreaseThresholds;\n    const multPerUpgrade = [50, 100, 500, 1000];\n\n    for (let i = 0; i < costThresholds.length; i++) {\n      const cost = Decimal.pow(multPerUpgrade[i], count).times(500);\n      if (cost.lt(costThresholds[i])) return cost;\n    }\n\n    return DC.E3.pow(count + Math.pow(Math.clampMin(count - 1334, 0), 1.2)).times(500);\n  }\n\n}\n\nexport const EternityUpgrade = mapGameDataToObject(GameDatabase.eternity.upgrades, config => new EternityUpgradeState(config));\nEternityUpgrade.epMult = new EPMultiplierState();","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/eternity.js"],"names":["GameMechanicState","SetPurchasableMechanicState","DC","FullScreenAnimationHandler","giveEternityRewards","auto","player","records","bestEternity","time","Math","min","thisEternity","getGlobalSpeedFactor","Currency","eternityPoints","add","gainedEternityPoints","newEternities","gainedEternities","times","eternities","value","pow","floor","clamp","eq","lte","Tab","dimensions","show","EternityChallenge","isRunning","challenge","current","addCompletion","Perk","studyECBulk","isBought","completionCount","isFullyCompleted","canBeCompleted","AutomatorData","lastECCompletionCount","Enslaved","EnslavedProgress","ec1","giveProgress","eternity","requirementBits","id","respecTimeStudies","addEternityTime","realTime","thisReality","bestEternitiesPerMs","clampMin","div","bestEPminReality","max","bestEPmin","infinitiesBanked","plusEffectsOf","Achievement","effects","bankedInfinitiesGain","TimeStudy","Effarig","EffarigUnlock","isUnlocked","unlock","beginProcessReality","getRealityProps","eternityAnimation","display","eternityResetRequest","Player","canEternity","GameEnd","creditsEverClosed","askEternityConfirmation","force","specialConditions","switchingDilation","noStudies","timestudy","studies","length","RealityUpgrade","isLockingMechanics","tryShowWarningModal","EventHub","dispatch","GAME_EVENT","ETERNITY_RESET_BEFORE","requirementChecks","reality","noEternities","dilation","active","rewardTP","initializeChallengeCompletions","initializeResourcesAfterEternity","EternityMilestone","keepAutobuyers","isReached","Pelle","isDoomed","PelleUpgrade","canBeApplied","break","enteringEC","resetInfinityRuns","InfinityDimensions","fullReset","Replicanti","reset","resetChallengeStuff","AntimatterDimensions","respec","SecretAchievement","infinityPoints","resetAmount","thisInfinity","bestIPmin","D0","bestInfinity","bestIPminEternity","bestInfinitiesPerMs","bestIPMsWithoutMaxAll","resetTimeDimensions","resetTickspeed","playerInfinityUpgradesOnReset","AchievementTimers","marathon2","applyEU1","maxAM","antimatter","ECTimeStudyState","invalidateCachedRequirements","PelleStrikes","trigger","ETERNITY_RESET_AFTER","animateAndEternity","callback","hasAnimation","isDisplaying","options","animations","animateAndUndilate","setTimeout","isReality","NormalChallenges","clearCompletions","keepInfinityChallenges","InfinityChallenges","completeAll","normal","infinity","sacrificed","infinities","lastBuyTime","dimensionBoosts","keepInfinityUpgrades","galaxies","partInfinityPoint","partInfinitied","IPMultPurchases","infinityPower","timeShards","totalTickGained","eterc8ids","eterc8repl","resetRequirements","eternityUpgrades","size","autounlockEU1","applyEU2","autounlockEU2","secondRow","EternityUpgrade","all","filter","u","upgrade","gte","cost","confirmations","Modal","exitDilation","isDisabled","Decimal","getAdjustedGlyphEffect","timesEffectsOf","AlchemyResource","effectValue","EternityMilestoneState","constructor","config","givenByPelle","mapGameDataToObject","GameDatabase","milestones","isBaseResource","EternityUpgradeState","currency","set","EPMultiplierState","cachedCost","Lazy","costAfterCount","epmultUpgrades","cachedEffectValue","D5","isAffordable","boughtAmount","diff","invalidate","Autobuyer","bumpAmount","isCustomEffect","purchase","subtract","buyMax","bulk","bulkBuyBinarySearch","costFunction","cumulative","firstCost","purchasePrice","quantity","costIncreaseThresholds","E100","NUMBER_MAX_VALUE","E1300","E4000","count","costThresholds","epMult","multPerUpgrade","i","lt","E3","upgrades"],"mappings":"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","sourcesContent":["import { GameMechanicState, SetPurchasableMechanicState } from \"./game-mechanics\";\r\nimport { DC } from \"./constants\";\r\nimport FullScreenAnimationHandler from \"./full-screen-animation-handler\";\r\n\r\nfunction giveEternityRewards(auto) {\r\n  player.records.bestEternity.time = Math.min(player.records.thisEternity.time / getGlobalSpeedFactor(), player.records.bestEternity.time);\r\n  Currency.eternityPoints.add(gainedEternityPoints());\r\n\r\n  const newEternities = gainedEternities().times(Currency.eternities.value.pow(2/3).floor().clamp(5,1000));\r\n\r\n  if (Currency.eternities.eq(0) && newEternities.lte(10)) {\r\n    Tab.dimensions.time.show();\r\n  }\r\n\r\n  Currency.eternities.add(newEternities);\r\n\r\n  if (EternityChallenge.isRunning) {\r\n    const challenge = EternityChallenge.current;\r\n    challenge.addCompletion(false);\r\n    if (Perk.studyECBulk.isBought) {\r\n      let completionCount = 0;\r\n      while (!challenge.isFullyCompleted && challenge.canBeCompleted) {\r\n        challenge.addCompletion(false);\r\n        completionCount++;\r\n      }\r\n      AutomatorData.lastECCompletionCount = completionCount;\r\n      if (Enslaved.isRunning && completionCount > 5) EnslavedProgress.ec1.giveProgress();\r\n    }\r\n    player.challenge.eternity.requirementBits &= ~(1 << challenge.id);\r\n    respecTimeStudies(auto);\r\n  }\r\n\r\n  addEternityTime(\r\n    player.records.thisEternity.time,\r\n    player.records.thisEternity.realTime,\r\n    gainedEternityPoints(),\r\n    newEternities\r\n  );\r\n\r\n  player.records.thisReality.bestEternitiesPerMs = player.records.thisReality.bestEternitiesPerMs.clampMin(\r\n    newEternities.div(Math.clampMin(33, player.records.thisEternity.realTime))\r\n  );\r\n  player.records.bestEternity.bestEPminReality =\r\n    player.records.bestEternity.bestEPminReality.max(player.records.thisEternity.bestEPmin);\r\n\r\n  Currency.infinitiesBanked.value = Currency.infinitiesBanked.value.plusEffectsOf(\r\n    Achievement(131).effects.bankedInfinitiesGain,\r\n    TimeStudy(191)\r\n  );\r\n\r\n  if (Effarig.isRunning && !EffarigUnlock.eternity.isUnlocked) {\r\n    EffarigUnlock.eternity.unlock();\r\n    beginProcessReality(getRealityProps(true));\r\n  }\r\n}\r\n\r\nexport function eternityAnimation() {\r\n  FullScreenAnimationHandler.display(\"a-eternify\", 3);\r\n}\r\n\r\nexport function eternityResetRequest() {\r\n  if (!Player.canEternity) return;\r\n  if (GameEnd.creditsEverClosed) return;\r\n  askEternityConfirmation();\r\n}\r\n\r\nexport function eternity(force, auto, specialConditions = {}) {\r\n  if (specialConditions.switchingDilation && !Player.canEternity) {\r\n    // eslint-disable-next-line no-param-reassign\r\n    force = true;\r\n  }\r\n  // We define this variable so we can use it in checking whether to give\r\n  // the secret achievement for respec without studies.\r\n  // Annoyingly, we need to check for studies right here; giveEternityRewards removes studies if we're in an EC,\r\n  // so doing the check later doesn't give us the initial state of having studies or not.\r\n  const noStudies = player.timestudy.studies.length === 0;\r\n  if (!force) {\r\n    if (!Player.canEternity) return false;\r\n    if (RealityUpgrade(10).isLockingMechanics) {\r\n      RealityUpgrade(10).tryShowWarningModal();\r\n      return false;\r\n    }\r\n    if (RealityUpgrade(12).isLockingMechanics && EternityChallenge(1).isRunning) {\r\n      RealityUpgrade(12).tryShowWarningModal();\r\n      return false;\r\n    }\r\n    EventHub.dispatch(GAME_EVENT.ETERNITY_RESET_BEFORE);\r\n    giveEternityRewards(auto);\r\n    player.requirementChecks.reality.noEternities = false;\r\n  }\r\n\r\n  if (player.dilation.active) rewardTP();\r\n\r\n  // This needs to be after the dilation check for the \"can gain TP\" check in rewardTP to be correct.\r\n  if (force) {\r\n    player.challenge.eternity.current = 0;\r\n  }\r\n\r\n  initializeChallengeCompletions();\r\n  initializeResourcesAfterEternity();\r\n\r\n  if (!EternityMilestone.keepAutobuyers.isReached && !(Pelle.isDoomed && PelleUpgrade.keepAutobuyers.canBeApplied)) {\r\n    // Fix infinity because it can only break after big crunch autobuyer interval is maxed\r\n    player.break = false;\r\n  }\r\n\r\n  player.challenge.eternity.current = 0;\r\n  if (!specialConditions.enteringEC && !Pelle.isDoomed) {\r\n    player.dilation.active = false;\r\n  }\r\n  resetInfinityRuns();\r\n  InfinityDimensions.fullReset();\r\n  Replicanti.reset();\r\n  resetChallengeStuff();\r\n  AntimatterDimensions.reset();\r\n\r\n  if (!specialConditions.enteringEC && player.respec) {\r\n    if (noStudies) {\r\n      SecretAchievement(34).unlock();\r\n    }\r\n    respecTimeStudies(auto);\r\n    player.respec = false;\r\n  }\r\n\r\n  Currency.infinityPoints.reset();\r\n  InfinityDimensions.resetAmount();\r\n  player.records.thisInfinity.bestIPmin = DC.D0;\r\n  player.records.bestInfinity.bestIPminEternity = DC.D0;\r\n  player.records.thisEternity.bestEPmin = DC.D0;\r\n  player.records.thisEternity.bestInfinitiesPerMs = DC.D0;\r\n  player.records.thisEternity.bestIPMsWithoutMaxAll = DC.D0;\r\n  resetTimeDimensions();\r\n  resetTickspeed();\r\n  playerInfinityUpgradesOnReset();\r\n  AchievementTimers.marathon2.reset();\r\n  applyEU1();\r\n  player.records.thisInfinity.maxAM = DC.D0;\r\n  player.records.thisEternity.maxAM = DC.D0;\r\n  Currency.antimatter.reset();\r\n  ECTimeStudyState.invalidateCachedRequirements();\r\n\r\n  PelleStrikes.eternity.trigger();\r\n\r\n  EventHub.dispatch(GAME_EVENT.ETERNITY_RESET_AFTER);\r\n  return true;\r\n}\r\n\r\n// eslint-disable-next-line no-empty-function\r\nexport function animateAndEternity(callback) {\r\n  if (!Player.canEternity) return false;\r\n  const hasAnimation = !FullScreenAnimationHandler.isDisplaying &&\r\n    !RealityUpgrade(10).isLockingMechanics &&\r\n    !(RealityUpgrade(12).isLockingMechanics && EternityChallenge(1).isRunning) &&\r\n    ((player.dilation.active && player.options.animations.dilation) ||\r\n    (!player.dilation.active && player.options.animations.eternity));\r\n\r\n  if (hasAnimation) {\r\n    if (player.dilation.active) {\r\n      animateAndUndilate(callback);\r\n    } else {\r\n      eternityAnimation();\r\n      setTimeout(() => {\r\n        eternity();\r\n        if (callback) callback();\r\n      }, 2250);\r\n    }\r\n  } else {\r\n    eternity();\r\n    if (callback) callback();\r\n  }\r\n  return hasAnimation;\r\n}\r\n\r\nexport function initializeChallengeCompletions(isReality) {\r\n  NormalChallenges.clearCompletions();\r\n  if (!PelleUpgrade.keepInfinityChallenges.canBeApplied) InfinityChallenges.clearCompletions();\r\n  if (!isReality && EternityMilestone.keepAutobuyers.isReached || Pelle.isDoomed) {\r\n    NormalChallenges.completeAll();\r\n  }\r\n  if (Achievement(133).isUnlocked && !Pelle.isDoomed) InfinityChallenges.completeAll();\r\n  player.challenge.normal.current = 0;\r\n  player.challenge.infinity.current = 0;\r\n}\r\n\r\nexport function initializeResourcesAfterEternity() {\r\n  player.sacrificed = DC.D0;\r\n  Currency.infinities.reset();\r\n  player.records.bestInfinity.time = 999999999999;\r\n  player.records.bestInfinity.realTime = 999999999999;\r\n  player.records.thisInfinity.time = 0;\r\n  player.records.thisInfinity.lastBuyTime = 0;\r\n  player.records.thisInfinity.realTime = 0;\r\n  player.dimensionBoosts = (EternityMilestone.keepInfinityUpgrades.isReached) ? 4 : 0;\r\n  player.galaxies = (EternityMilestone.keepInfinityUpgrades.isReached) ? 1 : 0;\r\n  player.partInfinityPoint = 0;\r\n  player.partInfinitied = 0;\r\n  player.IPMultPurchases = 0;\r\n  Currency.infinityPower.reset();\r\n  Currency.timeShards.reset();\r\n  player.records.thisEternity.time = 0;\r\n  player.records.thisEternity.realTime = 0;\r\n  player.totalTickGained = 0;\r\n  player.eterc8ids = 50;\r\n  player.eterc8repl = 40;\r\n  Player.resetRequirements(\"eternity\");\r\n}\r\n\r\nexport function applyEU1() {\r\n  if (player.eternityUpgrades.size < 3 && Perk.autounlockEU1.canBeApplied) {\r\n    for (const id of [1, 2, 3]) player.eternityUpgrades.add(id);\r\n  }\r\n}\r\n\r\n// We want this to be checked before any EP-related autobuyers trigger, but we need to call this from the autobuyer\r\n// code since those run asynchronously from gameLoop\r\nexport function applyEU2() {\r\n  if (player.eternityUpgrades.size < 6 && Perk.autounlockEU2.canBeApplied) {\r\n    const secondRow = EternityUpgrade.all.filter(u => u.id > 3);\r\n    for (const upgrade of secondRow) {\r\n      if (player.eternityPoints.gte(upgrade.cost / 1e10)) player.eternityUpgrades.add(upgrade.id);\r\n    }\r\n  }\r\n}\r\n\r\nfunction askEternityConfirmation() {\r\n  if (player.dilation.active && player.options.confirmations.dilation) {\r\n    Modal.exitDilation.show();\r\n  } else if (player.options.confirmations.eternity) {\r\n    Modal.eternity.show();\r\n  } else {\r\n    animateAndEternity();\r\n  }\r\n}\r\n\r\nexport function gainedEternities() {\r\n  return Pelle.isDisabled(\"eternityMults\")\r\n    ? new Decimal(1)\r\n    : new Decimal(getAdjustedGlyphEffect(\"timeetermult\"))\r\n      .timesEffectsOf(RealityUpgrade(3), Achievement(113))\r\n      .pow(AlchemyResource.eternity.effectValue);\r\n}\r\n\r\nexport class EternityMilestoneState {\r\n  constructor(config) {\r\n    this.config = config;\r\n  }\r\n\r\n  get isReached() {\r\n    if (Pelle.isDoomed && this.config.givenByPelle) {\r\n      return this.config.givenByPelle();\r\n    }\r\n    return Currency.eternities.gte(this.config.eternities);\r\n  }\r\n}\r\nexport const EternityMilestone = mapGameDataToObject(\r\n  GameDatabase.eternity.milestones,\r\n  config => (config.isBaseResource\r\n    ? new EternityMilestoneState(config)\r\n    : new EternityMilestoneState(config))\r\n);\r\n\r\nclass EternityUpgradeState extends SetPurchasableMechanicState {\r\n  get currency() {\r\n    return Currency.eternityPoints;\r\n  }\r\n\r\n  get set() {\r\n    return player.eternityUpgrades;\r\n  }\r\n}\r\n\r\nclass EPMultiplierState extends GameMechanicState {\r\n  constructor() {\r\n    super({});\r\n    this.cachedCost = new Lazy(() => this.costAfterCount(player.epmultUpgrades));\r\n    this.cachedEffectValue = new Lazy(() => DC.D5.pow(player.epmultUpgrades));\r\n  }\r\n\r\n  get isAffordable() {\r\n    return !Pelle.isDoomed && Currency.eternityPoints.gte(this.cost);\r\n  }\r\n\r\n  get cost() {\r\n    return this.cachedCost.value;\r\n  }\r\n\r\n  get boughtAmount() {\r\n    return player.epmultUpgrades;\r\n  }\r\n\r\n  set boughtAmount(value) {\r\n    // Reality resets will make this bump amount negative, causing it to visually appear as 0 even when it isn't.\r\n    // A dev migration fixes bad autobuyer states and this change ensures it doesn't happen again\r\n    const diff = Math.clampMin(value - player.epmultUpgrades, 0);\r\n    player.epmultUpgrades = value;\r\n    this.cachedCost.invalidate();\r\n    this.cachedEffectValue.invalidate();\r\n    Autobuyer.eternity.bumpAmount(DC.D5.pow(diff));\r\n  }\r\n\r\n  get isCustomEffect() {\r\n    return true;\r\n  }\r\n\r\n  get effectValue() {\r\n    return this.cachedEffectValue.value;\r\n  }\r\n\r\n  purchase() {\r\n    if (!this.isAffordable) return false;\r\n    Currency.eternityPoints.subtract(this.cost);\r\n    ++this.boughtAmount;\r\n    return true;\r\n  }\r\n\r\n  buyMax(auto) {\r\n    if (!this.isAffordable) return false;\r\n    if (RealityUpgrade(15).isLockingMechanics) {\r\n      if (!auto) RealityUpgrade(15).tryShowWarningModal();\r\n      return false;\r\n    }\r\n    const bulk = bulkBuyBinarySearch(Currency.eternityPoints.value, {\r\n      costFunction: this.costAfterCount,\r\n      cumulative: true,\r\n      firstCost: this.cost,\r\n    }, this.boughtAmount);\r\n    if (!bulk) return false;\r\n    Currency.eternityPoints.subtract(bulk.purchasePrice);\r\n    this.boughtAmount += bulk.quantity;\r\n    return true;\r\n  }\r\n\r\n  reset() {\r\n    this.boughtAmount = 0;\r\n  }\r\n\r\n  get costIncreaseThresholds() {\r\n    return [DC.E100, Decimal.NUMBER_MAX_VALUE, DC.E1300, DC.E4000];\r\n  }\r\n\r\n  costAfterCount(count) {\r\n    const costThresholds = EternityUpgrade.epMult.costIncreaseThresholds;\r\n    const multPerUpgrade = [50, 100, 500, 1000];\r\n    for (let i = 0; i < costThresholds.length; i++) {\r\n      const cost = Decimal.pow(multPerUpgrade[i], count).times(500);\r\n      if (cost.lt(costThresholds[i])) return cost;\r\n    }\r\n    return DC.E3.pow(count + Math.pow(Math.clampMin(count - 1334, 0), 1.2)).times(500);\r\n  }\r\n}\r\n\r\nexport const EternityUpgrade = mapGameDataToObject(\r\n  GameDatabase.eternity.upgrades,\r\n  config => new EternityUpgradeState(config)\r\n);\r\n\r\nEternityUpgrade.epMult = new EPMultiplierState();\r\n"]},"metadata":{},"sourceType":"module"}