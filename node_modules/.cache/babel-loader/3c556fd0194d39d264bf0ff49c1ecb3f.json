{"ast":null,"code":"import \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n\nclass AlchemyOrbitLayout {\n  constructor(tier, radius, angleOffset = 0) {\n    this._resources = AlchemyResources.all.filter(y => y.config.tier === tier).sort((x, y) => x.config.uiOrder - y.config.uiOrder);\n    this._radius = radius;\n    this._angleOffset = angleOffset;\n  }\n\n  get radius() {\n    return this._radius;\n  }\n\n  get nodes() {\n    const nodes = [];\n    const step = Math.PI_2 / this._resources.length;\n    let angle = this._angleOffset;\n\n    for (const resource of this._resources) {\n      nodes.push({\n        resource,\n        x: this._radius * Math.sin(angle),\n        y: this._radius * Math.cos(angle)\n      });\n      angle += step;\n    }\n\n    return nodes;\n  }\n\n}\n\nexport class AlchemyCircleLayout {\n  constructor() {\n    this.orbits = [new AlchemyOrbitLayout(1, 4, -Math.PI / 3), new AlchemyOrbitLayout(2, 3), new AlchemyOrbitLayout(3, 2, Math.PI / 3), new AlchemyOrbitLayout(4, 1, -Math.PI / 6), new AlchemyOrbitLayout(5, 0)];\n    const nodes = [];\n\n    for (const orbitNodes of this.orbits.map(o => o.nodes)) {\n      nodes.push(...orbitNodes);\n    }\n\n    const size = Math.max(nodes.map(p => Math.abs(p.x)).max(), nodes.map(p => Math.abs(p.y)).max()) * 2;\n\n    for (const node of nodes) {\n      node.x = (node.x / size + 0.5) * 100;\n      node.y = (node.y / size + 0.5) * 100;\n    }\n\n    const reactionArrows = [];\n\n    for (const reaction of AlchemyReactions.all.compact()) {\n      const productNode = nodes.find(n => n.resource === reaction.product);\n      const reagentNodes = reaction.reagents.map(r => nodes.find(n => n.resource === r.resource));\n\n      for (const reagentNode of reagentNodes) {\n        reactionArrows.push({\n          reaction,\n          reagent: reagentNode,\n          product: productNode\n        });\n      }\n    }\n\n    this.reactionArrows = reactionArrows;\n    this.nodes = nodes;\n    this.size = size;\n  }\n\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/components/tabs/alchemy/alchemy-circle-layout.js"],"names":["AlchemyOrbitLayout","constructor","tier","radius","angleOffset","_resources","AlchemyResources","all","filter","y","config","sort","x","uiOrder","_radius","_angleOffset","nodes","step","Math","PI_2","length","angle","resource","push","sin","cos","AlchemyCircleLayout","orbits","PI","orbitNodes","map","o","size","max","p","abs","node","reactionArrows","reaction","AlchemyReactions","compact","productNode","find","n","product","reagentNodes","reagents","r","reagentNode","reagent"],"mappings":"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","sourcesContent":["class AlchemyOrbitLayout {\r\n  constructor(tier, radius, angleOffset = 0) {\r\n    this._resources = AlchemyResources.all\r\n      .filter(y => y.config.tier === tier)\r\n      .sort((x, y) => x.config.uiOrder - y.config.uiOrder);\r\n    this._radius = radius;\r\n    this._angleOffset = angleOffset;\r\n  }\r\n\r\n  get radius() {\r\n    return this._radius;\r\n  }\r\n\r\n  get nodes() {\r\n    const nodes = [];\r\n    const step = Math.PI_2 / this._resources.length;\r\n    let angle = this._angleOffset;\r\n    for (const resource of this._resources) {\r\n      nodes.push({\r\n        resource,\r\n        x: this._radius * Math.sin(angle),\r\n        y: this._radius * Math.cos(angle)\r\n      });\r\n      angle += step;\r\n    }\r\n    return nodes;\r\n  }\r\n}\r\n\r\nexport class AlchemyCircleLayout {\r\n  constructor() {\r\n    this.orbits = [\r\n      new AlchemyOrbitLayout(1, 4, -Math.PI / 3),\r\n      new AlchemyOrbitLayout(2, 3),\r\n      new AlchemyOrbitLayout(3, 2, Math.PI / 3),\r\n      new AlchemyOrbitLayout(4, 1, -Math.PI / 6),\r\n      new AlchemyOrbitLayout(5, 0)\r\n    ];\r\n    const nodes = [];\r\n    for (const orbitNodes of this.orbits.map(o => o.nodes)) {\r\n      nodes.push(...orbitNodes);\r\n    }\r\n    const size = Math.max(\r\n      nodes.map(p => Math.abs(p.x)).max(),\r\n      nodes.map(p => Math.abs(p.y)).max()\r\n    ) * 2;\r\n    for (const node of nodes) {\r\n      node.x = (node.x / size + 0.5) * 100;\r\n      node.y = (node.y / size + 0.5) * 100;\r\n    }\r\n    const reactionArrows = [];\r\n    for (const reaction of AlchemyReactions.all.compact()) {\r\n      const productNode = nodes\r\n        .find(n => n.resource === reaction.product);\r\n      const reagentNodes = reaction.reagents\r\n        .map(r => nodes.find(n => n.resource === r.resource));\r\n      for (const reagentNode of reagentNodes) {\r\n        reactionArrows.push({\r\n          reaction,\r\n          reagent: reagentNode,\r\n          product: productNode,\r\n        });\r\n      }\r\n    }\r\n    this.reactionArrows = reactionArrows;\r\n    this.nodes = nodes;\r\n    this.size = size;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}