{"ast":null,"code":"import * as ADNotations from \"@antimatter-dimensions/notations\";\nexport const Notation = function () {\n  const N = ADNotations;\n\n  const notation = type => {\n    const n = new type();\n\n    n.setAsCurrent = () => {\n      player.options.notation = n.name;\n      ui.notationName = n.name;\n    };\n\n    return n;\n  };\n\n  const painful = n => {\n    n.isPainful = true;\n    return n;\n  };\n\n  return {\n    scientific: notation(N.ScientificNotation),\n    engineering: notation(N.EngineeringNotation),\n    letters: notation(N.LettersNotation),\n    standard: painful(notation(N.StandardNotation)),\n    emoji: painful(notation(N.EmojiNotation)),\n    mixedScientific: notation(N.MixedScientificNotation),\n    mixedEngineering: notation(N.MixedEngineeringNotation),\n    logarithm: notation(N.LogarithmNotation),\n    brackets: painful(notation(N.BracketsNotation)),\n    infinity: notation(N.InfinityNotation),\n    roman: painful(notation(N.RomanNotation)),\n    dots: painful(notation(N.DotsNotation)),\n    zalgo: painful(notation(N.ZalgoNotation)),\n    hex: painful(notation(N.HexNotation)),\n    imperial: painful(notation(N.ImperialNotation)),\n    clock: painful(notation(N.ClockNotation)),\n    prime: painful(notation(N.PrimeNotation)),\n    bar: painful(notation(N.BarNotation)),\n    shi: painful(notation(N.ShiNotation)),\n    blind: painful(notation(N.BlindNotation)),\n    blobs: painful(notation(N.BlobsNotation)),\n    all: painful(notation(N.AllNotation))\n  };\n}();\n\nNotation.emoji.setAsCurrent = (silent = false) => {\n  player.options.notation = Notation.emoji.name;\n  ui.notationName = Notation.emoji.name;\n  if (!silent) GameUI.notify.success(\"ðŸ˜‚ðŸ˜‚ðŸ˜‚\");\n};\n\nexport const Notations = {\n  // Defined as a list here for exact order in options tab.\n  all: [Notation.scientific, Notation.engineering, Notation.letters, Notation.standard, Notation.emoji, Notation.mixedScientific, Notation.mixedEngineering, Notation.logarithm, Notation.brackets, Notation.infinity, Notation.roman, Notation.dots, Notation.zalgo, Notation.hex, Notation.imperial, Notation.clock, Notation.prime, Notation.bar, Notation.shi, Notation.blind, Notation.blobs, Notation.all],\n  find: name => {\n    const notation = Notations.all.find(n => n.name === name);\n    return notation === undefined ? Notation.mixedScientific : notation;\n  },\n\n  get current() {\n    return GameUI.initialized ? ui.notation : Notation.mixedScientific;\n  }\n\n};\n\nADNotations.Settings.isInfinite = decimal => ui.formatPreBreak && decimal.gte(Decimal.NUMBER_MAX_VALUE);\n\nEventHub.logic.on(GAME_EVENT.GAME_TICK_AFTER, () => {\n  ui.formatPreBreak = !PlayerProgress.hasBroken() || NormalChallenge.isRunning && !Enslaved.isRunning;\n});","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/notations.js"],"names":["ADNotations","Notation","N","notation","type","n","setAsCurrent","player","options","name","ui","notationName","painful","isPainful","scientific","ScientificNotation","engineering","EngineeringNotation","letters","LettersNotation","standard","StandardNotation","emoji","EmojiNotation","mixedScientific","MixedScientificNotation","mixedEngineering","MixedEngineeringNotation","logarithm","LogarithmNotation","brackets","BracketsNotation","infinity","InfinityNotation","roman","RomanNotation","dots","DotsNotation","zalgo","ZalgoNotation","hex","HexNotation","imperial","ImperialNotation","clock","ClockNotation","prime","PrimeNotation","bar","BarNotation","shi","ShiNotation","blind","BlindNotation","blobs","BlobsNotation","all","AllNotation","silent","GameUI","notify","success","Notations","find","undefined","current","initialized","Settings","isInfinite","decimal","formatPreBreak","gte","Decimal","NUMBER_MAX_VALUE","EventHub","logic","on","GAME_EVENT","GAME_TICK_AFTER","PlayerProgress","hasBroken","NormalChallenge","isRunning","Enslaved"],"mappings":"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","sourcesContent":["import * as ADNotations from \"@antimatter-dimensions/notations\";\r\n\r\nexport const Notation = (function() {\r\n  const N = ADNotations;\r\n  const notation = type => {\r\n    const n = new type();\r\n    n.setAsCurrent = () => {\r\n      player.options.notation = n.name;\r\n      ui.notationName = n.name;\r\n    };\r\n    return n;\r\n  };\r\n  const painful = n => {\r\n    n.isPainful = true;\r\n    return n;\r\n  };\r\n  return {\r\n    scientific: notation(N.ScientificNotation),\r\n    engineering: notation(N.EngineeringNotation),\r\n    letters: notation(N.LettersNotation),\r\n    standard: painful(notation(N.StandardNotation)),\r\n    emoji: painful(notation(N.EmojiNotation)),\r\n    mixedScientific: notation(N.MixedScientificNotation),\r\n    mixedEngineering: notation(N.MixedEngineeringNotation),\r\n    logarithm: notation(N.LogarithmNotation),\r\n    brackets: painful(notation(N.BracketsNotation)),\r\n    infinity: notation(N.InfinityNotation),\r\n    roman: painful(notation(N.RomanNotation)),\r\n    dots: painful(notation(N.DotsNotation)),\r\n    zalgo: painful(notation(N.ZalgoNotation)),\r\n    hex: painful(notation(N.HexNotation)),\r\n    imperial: painful(notation(N.ImperialNotation)),\r\n    clock: painful(notation(N.ClockNotation)),\r\n    prime: painful(notation(N.PrimeNotation)),\r\n    bar: painful(notation(N.BarNotation)),\r\n    shi: painful(notation(N.ShiNotation)),\r\n    blind: painful(notation(N.BlindNotation)),\r\n    blobs: painful(notation(N.BlobsNotation)),\r\n    all: painful(notation(N.AllNotation))\r\n  };\r\n}());\r\n\r\nNotation.emoji.setAsCurrent = (silent = false) => {\r\n  player.options.notation = Notation.emoji.name;\r\n  ui.notationName = Notation.emoji.name;\r\n  if (!silent) GameUI.notify.success(\"ðŸ˜‚ðŸ˜‚ðŸ˜‚\");\r\n};\r\n\r\nexport const Notations = {\r\n  // Defined as a list here for exact order in options tab.\r\n  all: [\r\n    Notation.scientific,\r\n    Notation.engineering,\r\n    Notation.letters,\r\n    Notation.standard,\r\n    Notation.emoji,\r\n    Notation.mixedScientific,\r\n    Notation.mixedEngineering,\r\n    Notation.logarithm,\r\n    Notation.brackets,\r\n    Notation.infinity,\r\n    Notation.roman,\r\n    Notation.dots,\r\n    Notation.zalgo,\r\n    Notation.hex,\r\n    Notation.imperial,\r\n    Notation.clock,\r\n    Notation.prime,\r\n    Notation.bar,\r\n    Notation.shi,\r\n    Notation.blind,\r\n    Notation.blobs,\r\n    Notation.all,\r\n  ],\r\n  find: name => {\r\n    const notation = Notations.all.find(n => n.name === name);\r\n    return notation === undefined ? Notation.mixedScientific : notation;\r\n  },\r\n  get current() {\r\n    return GameUI.initialized ? ui.notation : Notation.mixedScientific;\r\n  }\r\n};\r\n\r\nADNotations.Settings.isInfinite = decimal => ui.formatPreBreak && decimal.gte(Decimal.NUMBER_MAX_VALUE);\r\n\r\nEventHub.logic.on(GAME_EVENT.GAME_TICK_AFTER, () => {\r\n  ui.formatPreBreak = !PlayerProgress.hasBroken() || (NormalChallenge.isRunning && !Enslaved.isRunning);\r\n});\r\n"]},"metadata":{},"sourceType":"module"}