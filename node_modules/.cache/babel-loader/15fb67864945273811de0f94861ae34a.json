{"ast":null,"code":"import { DC } from \"./constants\";\nimport FullScreenAnimationHandler from \"./full-screen-animation-handler\";\nexport function bigCrunchAnimation() {\n  FullScreenAnimationHandler.display(\"a-implode\", 2);\n}\n\nfunction handleChallengeCompletion() {\n  const challenge = Player.antimatterChallenge;\n\n  if (!challenge && !NormalChallenge(1).isCompleted) {\n    NormalChallenge(1).complete();\n  }\n\n  if (!challenge) return; // Clear the IC notification after the first completion (only) so that it can show it again for the next one\n\n  const inIC = InfinityChallenge.isRunning;\n  if (inIC && !InfinityChallenge.current.isCompleted) TabNotification.ICUnlock.clearTrigger();\n  challenge.complete();\n  challenge.updateChallengeTime();\n\n  if (!player.options.retryChallenge) {\n    player.challenge.normal.current = 0;\n    player.challenge.infinity.current = 0;\n  }\n}\n\nexport function manualBigCrunchResetRequest() {\n  if (!Player.canCrunch) return;\n  if (GameEnd.creditsEverClosed) return; // We show the modal under two conditions - on the first ever infinity (to explain the mechanic) and\n  // post-break (to show total IP and infinities gained)\n\n  if (player.options.confirmations.bigCrunch && (!PlayerProgress.infinityUnlocked() || player.break)) {\n    Modal.bigCrunch.show();\n  } else {\n    bigCrunchResetRequest();\n  }\n}\nexport function bigCrunchResetRequest(disableAnimation = false) {\n  if (!Player.canCrunch) return;\n\n  if (!disableAnimation && player.options.animations.bigCrunch && !FullScreenAnimationHandler.isDisplaying) {\n    bigCrunchAnimation();\n    setTimeout(bigCrunchReset, 1000);\n  } else {\n    bigCrunchReset();\n  }\n}\nexport function bigCrunchReset(forced = false, enteringAntimatterChallenge = Player.isInAntimatterChallenge && player.options.retryChallenge) {\n  if (!forced && !Player.canCrunch) return;\n\n  if (Player.canCrunch) {\n    EventHub.dispatch(GAME_EVENT.BIG_CRUNCH_BEFORE);\n    bigCrunchGiveRewards();\n    if (Pelle.isDoomed) PelleStrikes.infinity.trigger();\n  }\n\n  bigCrunchResetValues(enteringAntimatterChallenge);\n  EventHub.dispatch(GAME_EVENT.BIG_CRUNCH_AFTER);\n}\n\nfunction bigCrunchGiveRewards() {\n  bigCrunchUpdateStatistics();\n  const infinityPoints = gainedInfinityPoints();\n  Currency.infinityPoints.add(infinityPoints);\n  Currency.infinities.add(gainedInfinities().round());\n  bigCrunchTabChange(!PlayerProgress.infinityUnlocked());\n  bigCrunchCheckUnlocks();\n}\n\nfunction bigCrunchUpdateStatistics() {\n  player.records.bestInfinity.bestIPminEternity = player.records.bestInfinity.bestIPminEternity.clampMin(player.records.thisInfinity.bestIPmin);\n  player.records.thisInfinity.bestIPmin = DC.D0;\n  player.records.thisEternity.bestInfinitiesPerMs = player.records.thisEternity.bestInfinitiesPerMs.clampMin(gainedInfinities().round().dividedBy(Math.clampMin(33, player.records.thisInfinity.realTime)));\n  const infinityPoints = gainedInfinityPoints();\n  addInfinityTime(player.records.thisInfinity.time, player.records.thisInfinity.realTime, infinityPoints, gainedInfinities().round());\n  player.records.bestInfinity.time = Math.min(player.records.bestInfinity.time, player.records.thisInfinity.time / getGlobalSpeedFactor());\n  player.records.bestInfinity.realTime = Math.min(player.records.bestInfinity.realTime, player.records.thisInfinity.realTime);\n  player.requirementChecks.reality.noInfinities = false;\n\n  if (!player.requirementChecks.infinity.maxAll) {\n    const bestIpPerMsWithoutMaxAll = infinityPoints.dividedBy(Math.clampMin(33, player.records.thisInfinity.realTime));\n    player.records.thisEternity.bestIPMsWithoutMaxAll = Decimal.max(bestIpPerMsWithoutMaxAll, player.records.thisEternity.bestIPMsWithoutMaxAll);\n  }\n}\n\nfunction bigCrunchTabChange(firstInfinity) {\n  const earlyGame = player.records.bestInfinity.time > 60000 && !player.break;\n  const inAntimatterChallenge = Player.isInAntimatterChallenge;\n  handleChallengeCompletion();\n\n  if (firstInfinity) {\n    Tab.infinity.upgrades.show();\n  } else if (earlyGame || inAntimatterChallenge && !player.options.retryChallenge) {\n    Tab.dimensions.antimatter.show();\n  }\n}\n\nexport function bigCrunchResetValues(enteringAntimatterChallenge) {\n  const currentReplicanti = Replicanti.amount;\n  const currentReplicantiGalaxies = player.replicanti.galaxies; // For unknown reasons, everything but keeping of RGs (including resetting of RGs)\n  // is done in the function called below. For now, we're just trying to keep\n  // code structure similar to what it was before to avoid new bugs.\n\n  secondSoftReset(enteringAntimatterChallenge);\n  let remainingGalaxies = 0;\n\n  if (Achievement(95).isUnlocked && !Pelle.isDoomed) {\n    Replicanti.amount = currentReplicanti;\n    remainingGalaxies += Math.min(currentReplicantiGalaxies, 1);\n  }\n\n  if (TimeStudy(33).isBought && !Pelle.isDoomed) {\n    remainingGalaxies += Math.floor(currentReplicantiGalaxies / 2);\n  }\n\n  if (PelleUpgrade.replicantiGalaxyNoReset.canBeApplied) {\n    remainingGalaxies = currentReplicantiGalaxies;\n  } // I don't think this Math.clampMax is technically needed, but if we add another source\n  // of keeping Replicanti Galaxies then it might be.\n\n\n  player.replicanti.galaxies = Math.clampMax(remainingGalaxies, currentReplicantiGalaxies);\n}\n\nfunction bigCrunchCheckUnlocks() {\n  if (EternityChallenge(4).tryFail()) return;\n\n  if (Effarig.isRunning && !EffarigUnlock.infinity.isUnlocked) {\n    EffarigUnlock.infinity.unlock();\n    beginProcessReality(getRealityProps(true));\n  }\n}\n\nexport function secondSoftReset(enteringAntimatterChallenge) {\n  player.dimensionBoosts = 0;\n  player.galaxies = 0;\n  player.records.thisInfinity.maxAM = DC.D0;\n  Currency.antimatter.reset();\n  softReset(0, true, true, enteringAntimatterChallenge);\n  InfinityDimensions.resetAmount();\n  if (player.replicanti.unl) Replicanti.amount = DC.D1;\n  player.replicanti.galaxies = 0;\n  player.records.thisInfinity.time = 0;\n  player.records.thisInfinity.lastBuyTime = 0;\n  player.records.thisInfinity.realTime = 0;\n  Player.resetRequirements(\"infinity\");\n  AchievementTimers.marathon2.reset();\n}\nexport function preProductionGenerateIP(diff) {\n  if (InfinityUpgrade.ipGen.isBought) {\n    const genPeriod = Time.bestInfinity.totalMilliseconds * 10;\n    let genCount;\n\n    if (diff >= 1e300 * genPeriod) {\n      genCount = Decimal.div(diff, genPeriod);\n    } else {\n      // Partial progress (fractions from 0 to 1) are stored in player.partInfinityPoint\n      player.partInfinityPoint += diff / genPeriod;\n      genCount = Math.floor(player.partInfinityPoint);\n      player.partInfinityPoint -= genCount;\n    }\n\n    let gainedPerGen = player.records.bestInfinity.time >= 999999999999 ? DC.D0 : InfinityUpgrade.ipGen.effectValue;\n    if (Laitela.isRunning) gainedPerGen = dilatedValueOf(gainedPerGen);\n    const gainedThisTick = new Decimal(genCount).times(gainedPerGen);\n    Currency.infinityPoints.add(gainedThisTick);\n  }\n\n  Currency.infinityPoints.add(BreakInfinityUpgrade.ipGen.effectOrDefault(DC.D0).times(diff / 60000));\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/big-crunch.js"],"names":["DC","FullScreenAnimationHandler","bigCrunchAnimation","display","handleChallengeCompletion","challenge","Player","antimatterChallenge","NormalChallenge","isCompleted","complete","inIC","InfinityChallenge","isRunning","current","TabNotification","ICUnlock","clearTrigger","updateChallengeTime","player","options","retryChallenge","normal","infinity","manualBigCrunchResetRequest","canCrunch","GameEnd","creditsEverClosed","confirmations","bigCrunch","PlayerProgress","infinityUnlocked","break","Modal","show","bigCrunchResetRequest","disableAnimation","animations","isDisplaying","setTimeout","bigCrunchReset","forced","enteringAntimatterChallenge","isInAntimatterChallenge","EventHub","dispatch","GAME_EVENT","BIG_CRUNCH_BEFORE","bigCrunchGiveRewards","Pelle","isDoomed","PelleStrikes","trigger","bigCrunchResetValues","BIG_CRUNCH_AFTER","bigCrunchUpdateStatistics","infinityPoints","gainedInfinityPoints","Currency","add","infinities","gainedInfinities","round","bigCrunchTabChange","bigCrunchCheckUnlocks","records","bestInfinity","bestIPminEternity","clampMin","thisInfinity","bestIPmin","D0","thisEternity","bestInfinitiesPerMs","dividedBy","Math","realTime","addInfinityTime","time","min","getGlobalSpeedFactor","requirementChecks","reality","noInfinities","maxAll","bestIpPerMsWithoutMaxAll","bestIPMsWithoutMaxAll","Decimal","max","firstInfinity","earlyGame","inAntimatterChallenge","Tab","upgrades","dimensions","antimatter","currentReplicanti","Replicanti","amount","currentReplicantiGalaxies","replicanti","galaxies","secondSoftReset","remainingGalaxies","Achievement","isUnlocked","TimeStudy","isBought","floor","PelleUpgrade","replicantiGalaxyNoReset","canBeApplied","clampMax","EternityChallenge","tryFail","Effarig","EffarigUnlock","unlock","beginProcessReality","getRealityProps","dimensionBoosts","maxAM","reset","softReset","InfinityDimensions","resetAmount","unl","D1","lastBuyTime","resetRequirements","AchievementTimers","marathon2","preProductionGenerateIP","diff","InfinityUpgrade","ipGen","genPeriod","Time","totalMilliseconds","genCount","div","partInfinityPoint","gainedPerGen","effectValue","Laitela","dilatedValueOf","gainedThisTick","times","BreakInfinityUpgrade","effectOrDefault"],"mappings":"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","sourcesContent":["import { DC } from \"./constants\";\r\nimport FullScreenAnimationHandler from \"./full-screen-animation-handler\";\r\n\r\nexport function bigCrunchAnimation() {\r\n  FullScreenAnimationHandler.display(\"a-implode\", 2);\r\n}\r\n\r\nfunction handleChallengeCompletion() {\r\n  const challenge = Player.antimatterChallenge;\r\n  if (!challenge && !NormalChallenge(1).isCompleted) {\r\n    NormalChallenge(1).complete();\r\n  }\r\n  if (!challenge) return;\r\n\r\n  // Clear the IC notification after the first completion (only) so that it can show it again for the next one\r\n  const inIC = InfinityChallenge.isRunning;\r\n  if (inIC && !InfinityChallenge.current.isCompleted) TabNotification.ICUnlock.clearTrigger();\r\n\r\n  challenge.complete();\r\n  challenge.updateChallengeTime();\r\n  if (!player.options.retryChallenge) {\r\n    player.challenge.normal.current = 0;\r\n    player.challenge.infinity.current = 0;\r\n  }\r\n}\r\n\r\nexport function manualBigCrunchResetRequest() {\r\n  if (!Player.canCrunch) return;\r\n  if (GameEnd.creditsEverClosed) return;\r\n  // We show the modal under two conditions - on the first ever infinity (to explain the mechanic) and\r\n  // post-break (to show total IP and infinities gained)\r\n  if (player.options.confirmations.bigCrunch && (!PlayerProgress.infinityUnlocked() || player.break)) {\r\n    Modal.bigCrunch.show();\r\n  } else {\r\n    bigCrunchResetRequest();\r\n  }\r\n}\r\n\r\nexport function bigCrunchResetRequest(disableAnimation = false) {\r\n  if (!Player.canCrunch) return;\r\n  if (!disableAnimation && player.options.animations.bigCrunch && !FullScreenAnimationHandler.isDisplaying) {\r\n    bigCrunchAnimation();\r\n    setTimeout(bigCrunchReset, 1000);\r\n  } else {\r\n    bigCrunchReset();\r\n  }\r\n}\r\n\r\nexport function bigCrunchReset(\r\n  forced = false,\r\n  enteringAntimatterChallenge = Player.isInAntimatterChallenge && player.options.retryChallenge\r\n) {\r\n  if (!forced && !Player.canCrunch) return;\r\n\r\n  if (Player.canCrunch) {\r\n    EventHub.dispatch(GAME_EVENT.BIG_CRUNCH_BEFORE);\r\n    bigCrunchGiveRewards();\r\n    if (Pelle.isDoomed) PelleStrikes.infinity.trigger();\r\n  }\r\n\r\n  bigCrunchResetValues(enteringAntimatterChallenge);\r\n  EventHub.dispatch(GAME_EVENT.BIG_CRUNCH_AFTER);\r\n}\r\n\r\nfunction bigCrunchGiveRewards() {\r\n  bigCrunchUpdateStatistics();\r\n\r\n  const infinityPoints = gainedInfinityPoints();\r\n  Currency.infinityPoints.add(infinityPoints);\r\n  Currency.infinities.add(gainedInfinities().round());\r\n\r\n  bigCrunchTabChange(!PlayerProgress.infinityUnlocked());\r\n  bigCrunchCheckUnlocks();\r\n}\r\n\r\nfunction bigCrunchUpdateStatistics() {\r\n  player.records.bestInfinity.bestIPminEternity =\r\n    player.records.bestInfinity.bestIPminEternity.clampMin(player.records.thisInfinity.bestIPmin);\r\n  player.records.thisInfinity.bestIPmin = DC.D0;\r\n\r\n  player.records.thisEternity.bestInfinitiesPerMs = player.records.thisEternity.bestInfinitiesPerMs.clampMin(\r\n    gainedInfinities().round().dividedBy(Math.clampMin(33, player.records.thisInfinity.realTime))\r\n  );\r\n\r\n  const infinityPoints = gainedInfinityPoints();\r\n\r\n  addInfinityTime(\r\n    player.records.thisInfinity.time,\r\n    player.records.thisInfinity.realTime,\r\n    infinityPoints,\r\n    gainedInfinities().round()\r\n  );\r\n\r\n  player.records.bestInfinity.time =\r\n    Math.min(player.records.bestInfinity.time, player.records.thisInfinity.time / getGlobalSpeedFactor());\r\n  player.records.bestInfinity.realTime =\r\n    Math.min(player.records.bestInfinity.realTime, player.records.thisInfinity.realTime);\r\n\r\n  player.requirementChecks.reality.noInfinities = false;\r\n\r\n  if (!player.requirementChecks.infinity.maxAll) {\r\n    const bestIpPerMsWithoutMaxAll = infinityPoints.dividedBy(Math.clampMin(33, player.records.thisInfinity.realTime));\r\n    player.records.thisEternity.bestIPMsWithoutMaxAll =\r\n      Decimal.max(bestIpPerMsWithoutMaxAll, player.records.thisEternity.bestIPMsWithoutMaxAll);\r\n  }\r\n}\r\n\r\nfunction bigCrunchTabChange(firstInfinity) {\r\n  const earlyGame = player.records.bestInfinity.time > 60000 && !player.break;\r\n  const inAntimatterChallenge = Player.isInAntimatterChallenge;\r\n  handleChallengeCompletion();\r\n\r\n  if (firstInfinity) {\r\n    Tab.infinity.upgrades.show();\r\n  } else if (earlyGame || (inAntimatterChallenge && !player.options.retryChallenge)) {\r\n    Tab.dimensions.antimatter.show();\r\n  }\r\n}\r\n\r\nexport function bigCrunchResetValues(enteringAntimatterChallenge) {\r\n  const currentReplicanti = Replicanti.amount;\r\n  const currentReplicantiGalaxies = player.replicanti.galaxies;\r\n  // For unknown reasons, everything but keeping of RGs (including resetting of RGs)\r\n  // is done in the function called below. For now, we're just trying to keep\r\n  // code structure similar to what it was before to avoid new bugs.\r\n  secondSoftReset(enteringAntimatterChallenge);\r\n\r\n  let remainingGalaxies = 0;\r\n  if (Achievement(95).isUnlocked && !Pelle.isDoomed) {\r\n    Replicanti.amount = currentReplicanti;\r\n    remainingGalaxies += Math.min(currentReplicantiGalaxies, 1);\r\n  }\r\n  if (TimeStudy(33).isBought && !Pelle.isDoomed) {\r\n    remainingGalaxies += Math.floor(currentReplicantiGalaxies / 2);\r\n  }\r\n\r\n  if (PelleUpgrade.replicantiGalaxyNoReset.canBeApplied) {\r\n    remainingGalaxies = currentReplicantiGalaxies;\r\n  }\r\n  // I don't think this Math.clampMax is technically needed, but if we add another source\r\n  // of keeping Replicanti Galaxies then it might be.\r\n  player.replicanti.galaxies = Math.clampMax(remainingGalaxies, currentReplicantiGalaxies);\r\n}\r\n\r\nfunction bigCrunchCheckUnlocks() {\r\n  if (EternityChallenge(4).tryFail()) return;\r\n\r\n  if (Effarig.isRunning && !EffarigUnlock.infinity.isUnlocked) {\r\n    EffarigUnlock.infinity.unlock();\r\n    beginProcessReality(getRealityProps(true));\r\n  }\r\n}\r\n\r\nexport function secondSoftReset(enteringAntimatterChallenge) {\r\n  player.dimensionBoosts = 0;\r\n  player.galaxies = 0;\r\n  player.records.thisInfinity.maxAM = DC.D0;\r\n  Currency.antimatter.reset();\r\n  softReset(0, true, true, enteringAntimatterChallenge);\r\n  InfinityDimensions.resetAmount();\r\n  if (player.replicanti.unl) Replicanti.amount = DC.D1;\r\n  player.replicanti.galaxies = 0;\r\n  player.records.thisInfinity.time = 0;\r\n  player.records.thisInfinity.lastBuyTime = 0;\r\n  player.records.thisInfinity.realTime = 0;\r\n  Player.resetRequirements(\"infinity\");\r\n  AchievementTimers.marathon2.reset();\r\n}\r\n\r\nexport function preProductionGenerateIP(diff) {\r\n  if (InfinityUpgrade.ipGen.isBought) {\r\n    const genPeriod = Time.bestInfinity.totalMilliseconds * 10;\r\n    let genCount;\r\n    if (diff >= 1e300 * genPeriod) {\r\n      genCount = Decimal.div(diff, genPeriod);\r\n    } else {\r\n      // Partial progress (fractions from 0 to 1) are stored in player.partInfinityPoint\r\n      player.partInfinityPoint += diff / genPeriod;\r\n      genCount = Math.floor(player.partInfinityPoint);\r\n      player.partInfinityPoint -= genCount;\r\n    }\r\n    let gainedPerGen = player.records.bestInfinity.time >= 999999999999 ? DC.D0 : InfinityUpgrade.ipGen.effectValue;\r\n    if (Laitela.isRunning) gainedPerGen = dilatedValueOf(gainedPerGen);\r\n    const gainedThisTick = new Decimal(genCount).times(gainedPerGen);\r\n    Currency.infinityPoints.add(gainedThisTick);\r\n  }\r\n  Currency.infinityPoints.add(BreakInfinityUpgrade.ipGen.effectOrDefault(DC.D0).times(diff / 60000));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}