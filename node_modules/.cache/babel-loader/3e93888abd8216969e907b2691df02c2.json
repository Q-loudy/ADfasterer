{"ast":null,"code":"import \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport { DC } from \"../../constants\";\n\nconst rebuyable = props => {\n  props.cost = () => getHybridCostScaling(player.reality.rebuyables[props.id], 1e30, props.initialCost, props.costMult, props.costMult / 10, DC.E309, 1e3, props.initialCost * props.costMult);\n\n  const {\n    effect\n  } = props;\n\n  props.effect = () => Math.pow(effect + ImaginaryUpgrade(props.id).effectOrDefault(0), player.reality.rebuyables[props.id] * getAdjustedGlyphEffect(\"realityrow1pow\"));\n\n  props.description = () => props.textTemplate.replace(\"{value}\", ImaginaryUpgrade(props.id).effectValue === 0 ? formatInt(effect) : format(effect + ImaginaryUpgrade(props.id).effectValue, 2, 2));\n\n  props.formatEffect = value => formatX(value, 2, 0);\n\n  props.formatCost = value => format(value, 2, 0);\n\n  return props;\n};\n\nexport const realityUpgrades = [rebuyable({\n  name: \"Temporal Amplifier\",\n  id: 1,\n  initialCost: 1,\n  costMult: 30,\n  textTemplate: \"You gain Dilated Time {value} times faster\",\n  effect: 3\n}), rebuyable({\n  name: \"Replicative Amplifier\",\n  id: 2,\n  initialCost: 1,\n  costMult: 30,\n  textTemplate: \"You gain Replicanti {value} times faster\",\n  effect: 3\n}), rebuyable({\n  name: \"Eternal Amplifier\",\n  id: 3,\n  initialCost: 2,\n  costMult: 30,\n  textTemplate: \"You gain {value} times more Eternities\",\n  effect: 3\n}), rebuyable({\n  name: \"Superluminal Amplifier\",\n  id: 4,\n  initialCost: 2,\n  costMult: 30,\n  textTemplate: \"You gain {value} times more Tachyon Particles\",\n  effect: 3\n}), rebuyable({\n  name: \"Boundless Amplifier\",\n  id: 5,\n  initialCost: 3,\n  costMult: 50,\n  textTemplate: \"You gain {value} times more Infinities\",\n  effect: 5\n}), {\n  name: \"Cosmically Duplicate\",\n  id: 6,\n  cost: 15,\n  requirement: \"Complete your first manual Eternity without using Replicanti Galaxies\",\n  // Note that while noRG resets on eternity, the reality-level check will be false after the first eternity.\n  // The noRG variable is eternity-level as it's also used for an achievement check\n  hasFailed: () => !(player.requirementChecks.eternity.noRG && player.requirementChecks.reality.noEternities),\n  checkRequirement: () => player.requirementChecks.eternity.noRG && player.requirementChecks.reality.noEternities,\n  checkEvent: GAME_EVENT.ETERNITY_RESET_BEFORE,\n  canLock: true,\n  lockEvent: \"gain a Replicanti Galaxy\",\n  description: \"Replicanti speed is multiplied based on Replicanti Galaxies\",\n  effect: () => 1 + Replicanti.galaxies.total / 50,\n  formatEffect: value => formatX(value, 2, 2)\n}, {\n  name: \"Innumerably Construct\",\n  id: 7,\n  cost: 15,\n  requirement: \"Complete your first Infinity with at most 1 Antimatter Galaxy\",\n  hasFailed: () => !(player.galaxies <= 1 && player.requirementChecks.reality.noInfinities),\n  checkRequirement: () => player.galaxies <= 1 && player.requirementChecks.reality.noInfinities,\n  checkEvent: GAME_EVENT.BIG_CRUNCH_BEFORE,\n  canLock: true,\n  lockEvent: \"gain another Antimatter Galaxy\",\n  description: \"Infinity gain is boosted from Antimatter Galaxy count\",\n  effect: () => 1 + player.galaxies / 30,\n  formatEffect: value => formatX(value, 2, 2)\n}, {\n  name: \"Paradoxically Attain\",\n  id: 8,\n  cost: 15,\n  requirement: \"Manually Eternity without any automatic Achievements\",\n  hasFailed: () => player.reality.gainedAutoAchievements,\n  checkRequirement: () => !player.reality.gainedAutoAchievements,\n  checkEvent: GAME_EVENT.ETERNITY_RESET_BEFORE,\n  canLock: true,\n  // We don't have lockEvent because the modal can never show up for this upgrade\n  description: \"Tachyon Particle gain is boosted based on Achievement multiplier\",\n  effect: () => Math.sqrt(Achievements.power),\n  formatEffect: value => formatX(value, 2, 2)\n}, {\n  name: \"Linguistically Expand\",\n  id: 9,\n  cost: 15,\n  requirement: () => `Eternity for ${format(\"1e4000\")} Eternity Points using\n      only a single Glyph which must be level ${formatInt(3)}+.`,\n  hasFailed: () => {\n    const invalidEquippedGlyphs = Glyphs.activeWithoutCompanion.length > 1 || Glyphs.activeWithoutCompanion.length === 1 && Glyphs.activeWithoutCompanion[0].level < 3;\n    const hasValidGlyphInInventory = Glyphs.inventory.countWhere(g => g && g.level >= 3) > 0;\n    return invalidEquippedGlyphs || Glyphs.activeWithoutCompanion.length === 0 && !hasValidGlyphInInventory;\n  },\n  checkRequirement: () => Currency.eternityPoints.exponent >= 4000 && Glyphs.activeWithoutCompanion.length === 1 && Glyphs.activeWithoutCompanion[0].level >= 3,\n  checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER,\n  canLock: true,\n  // There are two locking events - equipping a glyph with too low a level, and equipping a second glyph\n  description: \"Gain another Glyph slot\",\n  effect: () => 1\n}, {\n  name: \"Existentially Prolong\",\n  id: 10,\n  cost: 15,\n  requirement: () => `Complete your first manual Eternity with at least ${formatPostBreak(DC.E400)} Infinity Points`,\n  hasFailed: () => !player.requirementChecks.reality.noEternities,\n  checkRequirement: () => Currency.infinityPoints.exponent >= 400 && player.requirementChecks.reality.noEternities,\n  checkEvent: GAME_EVENT.ETERNITY_RESET_BEFORE,\n  canLock: true,\n  lockEvent: \"Eternity\",\n  bypassLock: () => Currency.infinityPoints.exponent >= 400,\n  description: () => `Start every Reality with ${formatInt(100)} Eternities (also applies to current Reality)`,\n  automatorPoints: 15,\n  shortDescription: () => `Start with ${formatInt(100)} Eternities`,\n  effect: () => 100\n}, {\n  name: \"The Boundless Flow\",\n  id: 11,\n  cost: 50,\n  requirement: () => `${format(Currency.infinitiesBanked.value, 2)}/${format(DC.E12)} Banked Infinities`,\n  checkRequirement: () => Currency.infinitiesBanked.exponent >= 12,\n  checkEvent: [GAME_EVENT.ETERNITY_RESET_AFTER, GAME_EVENT.REALITY_FIRST_UNLOCKED],\n  description: \"Every second, gain 10% of the Infinities you would normally gain by Infinitying\",\n  automatorPoints: 5,\n  shortDescription: () => `Continuous Infinity generation`,\n  effect: () => gainedInfinities().times(0.1),\n  formatEffect: value => `${format(value)} per second`\n}, {\n  name: \"The Knowing Existence\",\n  id: 12,\n  cost: 50,\n  requirement: () => `Eternity for ${format(DC.E70)} Eternity Points without completing Eternity Challenge 1`,\n  hasFailed: () => EternityChallenge(1).completions !== 0,\n  checkRequirement: () => Currency.eternityPoints.exponent >= 70 && EternityChallenge(1).completions === 0,\n  checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER,\n  canLock: true,\n  lockEvent: \"complete Eternity Challenge 1\",\n  description: \"Eternity Point multiplier based on Reality and Time Theorem count\",\n  effect: () => Currency.timeTheorems.value.minus(DC.E3).clampMin(2).pow(Math.log2(Math.min(Currency.realities.value, 1e4))).clampMin(1),\n  formatEffect: value => formatX(value, 2, 2)\n}, {\n  name: \"The Telemechanical Process\",\n  id: 13,\n  cost: 50,\n  requirement: () => `Eternity for ${format(DC.E4000)} Eternity Points without Time Dim. 5-8`,\n  hasFailed: () => !Array.range(5, 4).every(i => TimeDimension(i).amount.equals(0)),\n  checkRequirement: () => Currency.eternityPoints.exponent >= 4000 && Array.range(5, 4).every(i => TimeDimension(i).amount.equals(0)),\n  checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER,\n  canLock: true,\n  lockEvent: \"purchase a Time Dimension above the 4th TD\",\n  description: () => `Improve Eternity Autobuyer and unlock autobuyers for Time Dimensions and ${formatX(5)} EP`,\n  automatorPoints: 10,\n  shortDescription: () => `TD and ${formatX(5)} EP Autobuyers, improved Eternity Autobuyer`\n}, {\n  name: \"The Eternal Flow\",\n  id: 14,\n  cost: 50,\n  requirement: () => `${format(Currency.eternities.value, 2)}/${format(1e7)} Eternities`,\n  checkRequirement: () => Currency.eternities.gte(1e7),\n  checkEvent: [GAME_EVENT.ETERNITY_RESET_AFTER, GAME_EVENT.REALITY_FIRST_UNLOCKED],\n  description: \"Gain Eternities per second equal to your Reality count\",\n  automatorPoints: 5,\n  shortDescription: () => `Continuous Eternity generation`,\n  effect: () => Currency.realities.value * Ra.unlocks.continuousTTBoost.effects.eternity.effectOrDefault(1),\n  formatEffect: value => `${format(value)} per second`\n}, {\n  name: \"The Paradoxical Forever\",\n  id: 15,\n  cost: 50,\n  requirement: () => `Have ${format(DC.E10)} Eternity Points without purchasing\n      the ${formatX(5)} Eternity Point upgrade`,\n  hasFailed: () => player.epmultUpgrades !== 0,\n  checkRequirement: () => Currency.eternityPoints.exponent >= 10 && player.epmultUpgrades === 0,\n  checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER,\n  canLock: true,\n  lockEvent: () => `purchase a ${formatX(5)} EP upgrade`,\n  description: () => `Boost Tachyon Particle gain based on ${formatX(5)} Eternity Point multiplier`,\n  effect: () => Math.max(Math.sqrt(Decimal.log10(EternityUpgrade.epMult.effectValue)) / 9, 1),\n  formatEffect: value => formatX(value, 2, 2)\n}, {\n  name: \"Disparity of Rarity\",\n  id: 16,\n  cost: 1500,\n  requirement: () => `Reality with ${formatInt(4)} Glyphs equipped of uncommon or better rarity\n      (${formatInt(Glyphs.activeWithoutCompanion.countWhere(g => g && g.strength >= 1.5))} equipped)`,\n  hasFailed: () => {\n    const availableGlyphs = Glyphs.inventory.countWhere(g => g && g.strength >= 1.5);\n    const equipped = Glyphs.activeWithoutCompanion.countWhere(g => g.strength >= 1.5);\n    const availableSlots = Glyphs.activeSlotCount - Glyphs.activeList.length;\n    return equipped + Math.min(availableGlyphs, availableSlots) < 4;\n  },\n  checkRequirement: () => Glyphs.activeWithoutCompanion.countWhere(g => g.strength >= 1.5) === 4,\n  checkEvent: GAME_EVENT.REALITY_RESET_BEFORE,\n  description: \"Improve the Glyph rarity formula\",\n  effect: 1.3,\n  formatCost: value => format(value, 1, 0)\n}, {\n  name: \"Duplicity of Potency\",\n  id: 17,\n  cost: 1500,\n  requirement: () => `Reality with ${formatInt(4)} Glyphs equipped, each having at least ${formatInt(2)} effects\n      (${formatInt(Glyphs.activeWithoutCompanion.countWhere(g => g && countValuesFromBitmask(g.effects) >= 2))}\n      equipped)`,\n  hasFailed: () => {\n    const availableGlyphs = Glyphs.inventory.countWhere(g => g && countValuesFromBitmask(g.effects) >= 2);\n    const equipped = Glyphs.activeWithoutCompanion.countWhere(g => countValuesFromBitmask(g.effects) >= 2);\n    const availableSlots = Glyphs.activeSlotCount - Glyphs.activeList.length;\n    return equipped + Math.min(availableGlyphs, availableSlots) < 4;\n  },\n  checkRequirement: () => Glyphs.activeWithoutCompanion.countWhere(g => countValuesFromBitmask(g.effects) >= 2) === 4,\n  checkEvent: GAME_EVENT.REALITY_RESET_BEFORE,\n  description: () => `${formatPercents(0.5)} chance to get an additional effect on Glyphs`,\n  effect: 0.5,\n  formatCost: value => format(value, 1, 0)\n}, {\n  name: \"Measure of Forever\",\n  id: 18,\n  cost: 1500,\n  requirement: () => `Reality with ${formatInt(4)} Glyphs equipped, each at level ${formatInt(10)} or higher\n      (${formatInt(Glyphs.activeWithoutCompanion.countWhere(g => g && g.level >= 10))} equipped)`,\n  hasFailed: () => {\n    const availableGlyphs = Glyphs.inventory.countWhere(g => g && g.level >= 10);\n    const equipped = Glyphs.activeWithoutCompanion.countWhere(g => g.level >= 10);\n    const availableSlots = Glyphs.activeSlotCount - Glyphs.activeList.length;\n    return equipped + Math.min(availableGlyphs, availableSlots) < 4;\n  },\n  checkRequirement: () => Glyphs.activeWithoutCompanion.countWhere(g => g.level >= 10) === 4,\n  checkEvent: GAME_EVENT.REALITY_RESET_BEFORE,\n  description: \"Eternity count boosts Glyph level\",\n  effect: () => Math.max(Math.sqrt(Currency.eternities.value.plus(1).log10()) * 0.45, 1),\n  formatCost: value => format(value, 1, 0)\n}, {\n  name: \"Scour to Empower\",\n  id: 19,\n  cost: 1500,\n  requirement: () => `Have a total of ${formatInt(30)} or more Glyphs at once\n      (You have ${formatInt(Glyphs.allGlyphs.countWhere(g => g.type !== \"companion\"))})`,\n  hasFailed: () => Glyphs.allGlyphs.countWhere(g => g.type !== \"companion\") < 30,\n  checkRequirement: () => Glyphs.allGlyphs.countWhere(g => g.type !== \"companion\") >= 30,\n  checkEvent: GAME_EVENT.REALITY_RESET_BEFORE,\n  description: \"You can sacrifice Glyphs for permanent bonuses (Shift + click)\",\n  formatCost: value => format(value, 1, 0)\n}, {\n  name: \"Parity of Singularity\",\n  id: 20,\n  cost: 1500,\n  requirement: () => `${formatInt(100)} days total play time after unlocking the Black Hole\n      (Currently: ${Time.timeSinceBlackHole.toStringShort(false)})`,\n  hasFailed: () => !BlackHole(1).isUnlocked && Currency.realityMachines.lt(100),\n  checkRequirement: () => Time.timeSinceBlackHole.totalDays >= 100 && BlackHole(1).isUnlocked,\n  checkEvent: GAME_EVENT.GAME_TICK_AFTER,\n  description: \"Unlock another Black Hole\",\n  automatorPoints: 10,\n  shortDescription: () => `Second Black Hole`,\n  formatCost: value => format(value, 1, 0)\n}, {\n  name: \"Cosmic Conglomerate\",\n  id: 21,\n  cost: 100000,\n  requirement: () => `${formatInt(Replicanti.galaxies.total + player.galaxies + player.dilation.totalTachyonGalaxies)}/${formatInt(2800)} total Galaxies from all types`,\n  checkRequirement: () => Replicanti.galaxies.total + player.galaxies + player.dilation.totalTachyonGalaxies >= 2800,\n  checkEvent: GAME_EVENT.GAME_TICK_AFTER,\n  description: () => `Remote Antimatter Galaxy scaling is moved to ${formatInt(1e5)} galaxies`,\n  effect: 1e5\n}, {\n  name: \"Temporal Transcendence\",\n  id: 22,\n  cost: 100000,\n  requirement: () => `${format(Currency.timeShards.value, 1)}/${format(DC.E28000)} Time Shards`,\n  checkRequirement: () => Currency.timeShards.exponent >= 28000,\n  checkEvent: GAME_EVENT.GAME_TICK_AFTER,\n  description: \"Time Dimension multiplier based on days spent in this Reality\",\n  effect: () => Decimal.pow10(Math.pow(1 + 2 * Math.log10(Time.thisReality.totalDays + 1), 1.6)),\n  formatEffect: value => formatX(value, 2, 2)\n}, {\n  name: \"Replicative Rapidity\",\n  id: 23,\n  cost: 100000,\n  requirement: () => `Reality in under ${formatInt(15)} minutes of real game time\n      (Fastest: ${Time.bestReality.toStringShort()})`,\n  hasFailed: () => Time.thisReality.totalMinutes / getGlobalSpeedFactor() >= 15,\n  checkRequirement: () => Time.thisReality.totalMinutes / getGlobalSpeedFactor() < 15,\n  checkEvent: GAME_EVENT.REALITY_RESET_BEFORE,\n  description: \"Replicanti speed is boosted based on your fastest real game time Reality\",\n  effect: () => 15 / Math.clamp(Time.bestReality.totalMinutes, 1 / 12, 15),\n  cap: 180,\n  formatEffect: value => formatX(value, 2, 2)\n}, {\n  name: \"Synthetic Symbolism\",\n  id: 24,\n  cost: 100000,\n  requirement: () => `Reality for ${formatInt(5000)} Reality Machines (before amplification) without equipped Glyphs`,\n  hasFailed: () => Glyphs.activeWithoutCompanion.length > 0,\n  checkRequirement: () => MachineHandler.gainedRealityMachines.gte(5000) && Glyphs.activeWithoutCompanion.length === 0,\n  canLock: true,\n  lockEvent: \"equip a non-Companion Glyph\",\n  checkEvent: GAME_EVENT.REALITY_RESET_BEFORE,\n  description: \"Gain another Glyph slot\",\n  effect: () => 1\n}, {\n  name: \"Effortless Existence\",\n  id: 25,\n  cost: 100000,\n  requirement: () => `Reach ${format(DC.E11111)} EP (Best: ${format(player.records.bestReality.bestEP, 2)} EP)`,\n  checkRequirement: () => player.records.bestReality.bestEP.exponent >= 11111,\n  checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER,\n  description: \"Unlock the Reality autobuyer and Automator command\",\n  automatorPoints: 100,\n  shortDescription: () => `Reality Autobuyer`\n}];","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/secret-formula/reality/reality-upgrades.js"],"names":["DC","rebuyable","props","cost","getHybridCostScaling","player","reality","rebuyables","id","initialCost","costMult","E309","effect","Math","pow","ImaginaryUpgrade","effectOrDefault","getAdjustedGlyphEffect","description","textTemplate","replace","effectValue","formatInt","format","formatEffect","value","formatX","formatCost","realityUpgrades","name","requirement","hasFailed","requirementChecks","eternity","noRG","noEternities","checkRequirement","checkEvent","GAME_EVENT","ETERNITY_RESET_BEFORE","canLock","lockEvent","Replicanti","galaxies","total","noInfinities","BIG_CRUNCH_BEFORE","gainedAutoAchievements","sqrt","Achievements","power","invalidEquippedGlyphs","Glyphs","activeWithoutCompanion","length","level","hasValidGlyphInInventory","inventory","countWhere","g","Currency","eternityPoints","exponent","ETERNITY_RESET_AFTER","formatPostBreak","E400","infinityPoints","bypassLock","automatorPoints","shortDescription","infinitiesBanked","E12","REALITY_FIRST_UNLOCKED","gainedInfinities","times","E70","EternityChallenge","completions","timeTheorems","minus","E3","clampMin","log2","min","realities","E4000","Array","range","every","i","TimeDimension","amount","equals","eternities","gte","Ra","unlocks","continuousTTBoost","effects","E10","epmultUpgrades","max","Decimal","log10","EternityUpgrade","epMult","strength","availableGlyphs","equipped","availableSlots","activeSlotCount","activeList","REALITY_RESET_BEFORE","countValuesFromBitmask","formatPercents","plus","allGlyphs","type","Time","timeSinceBlackHole","toStringShort","BlackHole","isUnlocked","realityMachines","lt","totalDays","GAME_TICK_AFTER","dilation","totalTachyonGalaxies","timeShards","E28000","pow10","thisReality","bestReality","totalMinutes","getGlobalSpeedFactor","clamp","cap","MachineHandler","gainedRealityMachines","E11111","records","bestEP"],"mappings":"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","sourcesContent":["import { DC } from \"../../constants\";\r\n\r\nconst rebuyable = props => {\r\n  props.cost = () => getHybridCostScaling(\r\n    player.reality.rebuyables[props.id],\r\n    1e30,\r\n    props.initialCost,\r\n    props.costMult,\r\n    props.costMult / 10,\r\n    DC.E309,\r\n    1e3,\r\n    props.initialCost * props.costMult\r\n  );\r\n  const { effect } = props;\r\n  props.effect = () => Math.pow(\r\n    effect + ImaginaryUpgrade(props.id).effectOrDefault(0),\r\n    player.reality.rebuyables[props.id] * getAdjustedGlyphEffect(\"realityrow1pow\"));\r\n  props.description = () => props.textTemplate.replace(\"{value}\",\r\n    ImaginaryUpgrade(props.id).effectValue === 0\r\n      ? formatInt(effect)\r\n      : format(effect + ImaginaryUpgrade(props.id).effectValue, 2, 2));\r\n  props.formatEffect = value => formatX(value, 2, 0);\r\n  props.formatCost = value => format(value, 2, 0);\r\n  return props;\r\n};\r\n\r\n\r\nexport const realityUpgrades = [\r\n  rebuyable({\r\n    name: \"Temporal Amplifier\",\r\n    id: 1,\r\n    initialCost: 1,\r\n    costMult: 30,\r\n    textTemplate: \"You gain Dilated Time {value} times faster\",\r\n    effect: 3\r\n  }),\r\n  rebuyable({\r\n    name: \"Replicative Amplifier\",\r\n    id: 2,\r\n    initialCost: 1,\r\n    costMult: 30,\r\n    textTemplate: \"You gain Replicanti {value} times faster\",\r\n    effect: 3\r\n  }),\r\n  rebuyable({\r\n    name: \"Eternal Amplifier\",\r\n    id: 3,\r\n    initialCost: 2,\r\n    costMult: 30,\r\n    textTemplate: \"You gain {value} times more Eternities\",\r\n    effect: 3\r\n  }),\r\n  rebuyable({\r\n    name: \"Superluminal Amplifier\",\r\n    id: 4,\r\n    initialCost: 2,\r\n    costMult: 30,\r\n    textTemplate: \"You gain {value} times more Tachyon Particles\",\r\n    effect: 3\r\n  }),\r\n  rebuyable({\r\n    name: \"Boundless Amplifier\",\r\n    id: 5,\r\n    initialCost: 3,\r\n    costMult: 50,\r\n    textTemplate: \"You gain {value} times more Infinities\",\r\n    effect: 5\r\n  }),\r\n  {\r\n    name: \"Cosmically Duplicate\",\r\n    id: 6,\r\n    cost: 15,\r\n    requirement: \"Complete your first manual Eternity without using Replicanti Galaxies\",\r\n    // Note that while noRG resets on eternity, the reality-level check will be false after the first eternity.\r\n    // The noRG variable is eternity-level as it's also used for an achievement check\r\n    hasFailed: () => !(player.requirementChecks.eternity.noRG && player.requirementChecks.reality.noEternities),\r\n    checkRequirement: () => player.requirementChecks.eternity.noRG && player.requirementChecks.reality.noEternities,\r\n    checkEvent: GAME_EVENT.ETERNITY_RESET_BEFORE,\r\n    canLock: true,\r\n    lockEvent: \"gain a Replicanti Galaxy\",\r\n    description: \"Replicanti speed is multiplied based on Replicanti Galaxies\",\r\n    effect: () => 1 + Replicanti.galaxies.total / 50,\r\n    formatEffect: value => formatX(value, 2, 2)\r\n  },\r\n  {\r\n    name: \"Innumerably Construct\",\r\n    id: 7,\r\n    cost: 15,\r\n    requirement: \"Complete your first Infinity with at most 1 Antimatter Galaxy\",\r\n    hasFailed: () => !(player.galaxies <= 1 && player.requirementChecks.reality.noInfinities),\r\n    checkRequirement: () => player.galaxies <= 1 && player.requirementChecks.reality.noInfinities,\r\n    checkEvent: GAME_EVENT.BIG_CRUNCH_BEFORE,\r\n    canLock: true,\r\n    lockEvent: \"gain another Antimatter Galaxy\",\r\n    description: \"Infinity gain is boosted from Antimatter Galaxy count\",\r\n    effect: () => 1 + player.galaxies / 30,\r\n    formatEffect: value => formatX(value, 2, 2)\r\n  },\r\n  {\r\n    name: \"Paradoxically Attain\",\r\n    id: 8,\r\n    cost: 15,\r\n    requirement: \"Manually Eternity without any automatic Achievements\",\r\n    hasFailed: () => player.reality.gainedAutoAchievements,\r\n    checkRequirement: () => !player.reality.gainedAutoAchievements,\r\n    checkEvent: GAME_EVENT.ETERNITY_RESET_BEFORE,\r\n    canLock: true,\r\n    // We don't have lockEvent because the modal can never show up for this upgrade\r\n    description: \"Tachyon Particle gain is boosted based on Achievement multiplier\",\r\n    effect: () => Math.sqrt(Achievements.power),\r\n    formatEffect: value => formatX(value, 2, 2)\r\n  },\r\n  {\r\n    name: \"Linguistically Expand\",\r\n    id: 9,\r\n    cost: 15,\r\n    requirement: () => `Eternity for ${format(\"1e4000\")} Eternity Points using\r\n      only a single Glyph which must be level ${formatInt(3)}+.`,\r\n    hasFailed: () => {\r\n      const invalidEquippedGlyphs = Glyphs.activeWithoutCompanion.length > 1 ||\r\n        (Glyphs.activeWithoutCompanion.length === 1 && Glyphs.activeWithoutCompanion[0].level < 3);\r\n      const hasValidGlyphInInventory = Glyphs.inventory.countWhere(g => g && g.level >= 3) > 0;\r\n      return invalidEquippedGlyphs || (Glyphs.activeWithoutCompanion.length === 0 && !hasValidGlyphInInventory);\r\n    },\r\n    checkRequirement: () => Currency.eternityPoints.exponent >= 4000 &&\r\n      Glyphs.activeWithoutCompanion.length === 1 && Glyphs.activeWithoutCompanion[0].level >= 3,\r\n    checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER,\r\n    canLock: true,\r\n    // There are two locking events - equipping a glyph with too low a level, and equipping a second glyph\r\n    description: \"Gain another Glyph slot\",\r\n    effect: () => 1\r\n  },\r\n  {\r\n    name: \"Existentially Prolong\",\r\n    id: 10,\r\n    cost: 15,\r\n    requirement: () => `Complete your first manual Eternity with at least ${formatPostBreak(DC.E400)} Infinity Points`,\r\n    hasFailed: () => !player.requirementChecks.reality.noEternities,\r\n    checkRequirement: () => Currency.infinityPoints.exponent >= 400 &&\r\n      player.requirementChecks.reality.noEternities,\r\n    checkEvent: GAME_EVENT.ETERNITY_RESET_BEFORE,\r\n    canLock: true,\r\n    lockEvent: \"Eternity\",\r\n    bypassLock: () => Currency.infinityPoints.exponent >= 400,\r\n    description: () => `Start every Reality with ${formatInt(100)} Eternities (also applies to current Reality)`,\r\n    automatorPoints: 15,\r\n    shortDescription: () => `Start with ${formatInt(100)} Eternities`,\r\n    effect: () => 100\r\n  },\r\n  {\r\n    name: \"The Boundless Flow\",\r\n    id: 11,\r\n    cost: 50,\r\n    requirement: () => `${format(Currency.infinitiesBanked.value, 2)}/${format(DC.E12)} Banked Infinities`,\r\n    checkRequirement: () => Currency.infinitiesBanked.exponent >= 12,\r\n    checkEvent: [GAME_EVENT.ETERNITY_RESET_AFTER, GAME_EVENT.REALITY_FIRST_UNLOCKED],\r\n    description: \"Every second, gain 10% of the Infinities you would normally gain by Infinitying\",\r\n    automatorPoints: 5,\r\n    shortDescription: () => `Continuous Infinity generation`,\r\n    effect: () => gainedInfinities().times(0.1),\r\n    formatEffect: value => `${format(value)} per second`\r\n  },\r\n  {\r\n    name: \"The Knowing Existence\",\r\n    id: 12,\r\n    cost: 50,\r\n    requirement: () => `Eternity for ${format(DC.E70)} Eternity Points without completing Eternity Challenge 1`,\r\n    hasFailed: () => EternityChallenge(1).completions !== 0,\r\n    checkRequirement: () => Currency.eternityPoints.exponent >= 70 && EternityChallenge(1).completions === 0,\r\n    checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER,\r\n    canLock: true,\r\n    lockEvent: \"complete Eternity Challenge 1\",\r\n    description: \"Eternity Point multiplier based on Reality and Time Theorem count\",\r\n    effect: () => Currency.timeTheorems.value\r\n      .minus(DC.E3).clampMin(2)\r\n      .pow(Math.log2(Math.min(Currency.realities.value, 1e4))).clampMin(1),\r\n    formatEffect: value => formatX(value, 2, 2)\r\n  },\r\n  {\r\n    name: \"The Telemechanical Process\",\r\n    id: 13,\r\n    cost: 50,\r\n    requirement: () => `Eternity for ${format(DC.E4000)} Eternity Points without Time Dim. 5-8`,\r\n    hasFailed: () => !Array.range(5, 4).every(i => TimeDimension(i).amount.equals(0)),\r\n    checkRequirement: () => Currency.eternityPoints.exponent >= 4000 &&\r\n      Array.range(5, 4).every(i => TimeDimension(i).amount.equals(0)),\r\n    checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER,\r\n    canLock: true,\r\n    lockEvent: \"purchase a Time Dimension above the 4th TD\",\r\n    description: () => `Improve Eternity Autobuyer and unlock autobuyers for Time Dimensions and ${formatX(5)} EP`,\r\n    automatorPoints: 10,\r\n    shortDescription: () => `TD and ${formatX(5)} EP Autobuyers, improved Eternity Autobuyer`,\r\n  },\r\n  {\r\n    name: \"The Eternal Flow\",\r\n    id: 14,\r\n    cost: 50,\r\n    requirement: () => `${format(Currency.eternities.value, 2)}/${format(1e7)} Eternities`,\r\n    checkRequirement: () => Currency.eternities.gte(1e7),\r\n    checkEvent: [GAME_EVENT.ETERNITY_RESET_AFTER, GAME_EVENT.REALITY_FIRST_UNLOCKED],\r\n    description: \"Gain Eternities per second equal to your Reality count\",\r\n    automatorPoints: 5,\r\n    shortDescription: () => `Continuous Eternity generation`,\r\n    effect: () => Currency.realities.value * Ra.unlocks.continuousTTBoost.effects.eternity.effectOrDefault(1),\r\n    formatEffect: value => `${format(value)} per second`\r\n  },\r\n  {\r\n    name: \"The Paradoxical Forever\",\r\n    id: 15,\r\n    cost: 50,\r\n    requirement: () => `Have ${format(DC.E10)} Eternity Points without purchasing\r\n      the ${formatX(5)} Eternity Point upgrade`,\r\n    hasFailed: () => player.epmultUpgrades !== 0,\r\n    checkRequirement: () => Currency.eternityPoints.exponent >= 10 && player.epmultUpgrades === 0,\r\n    checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER,\r\n    canLock: true,\r\n    lockEvent: () => `purchase a ${formatX(5)} EP upgrade`,\r\n    description: () => `Boost Tachyon Particle gain based on ${formatX(5)} Eternity Point multiplier`,\r\n    effect: () => Math.max(Math.sqrt(Decimal.log10(EternityUpgrade.epMult.effectValue)) / 9, 1),\r\n    formatEffect: value => formatX(value, 2, 2)\r\n  },\r\n  {\r\n    name: \"Disparity of Rarity\",\r\n    id: 16,\r\n    cost: 1500,\r\n    requirement: () => `Reality with ${formatInt(4)} Glyphs equipped of uncommon or better rarity\r\n      (${formatInt(Glyphs.activeWithoutCompanion.countWhere(g => g && g.strength >= 1.5))} equipped)`,\r\n    hasFailed: () => {\r\n      const availableGlyphs = Glyphs.inventory.countWhere(g => g && g.strength >= 1.5);\r\n      const equipped = Glyphs.activeWithoutCompanion.countWhere(g => g.strength >= 1.5);\r\n      const availableSlots = Glyphs.activeSlotCount - Glyphs.activeList.length;\r\n      return equipped + Math.min(availableGlyphs, availableSlots) < 4;\r\n    },\r\n    checkRequirement: () => Glyphs.activeWithoutCompanion.countWhere(g => g.strength >= 1.5) === 4,\r\n    checkEvent: GAME_EVENT.REALITY_RESET_BEFORE,\r\n    description: \"Improve the Glyph rarity formula\",\r\n    effect: 1.3,\r\n    formatCost: value => format(value, 1, 0)\r\n  },\r\n  {\r\n    name: \"Duplicity of Potency\",\r\n    id: 17,\r\n    cost: 1500,\r\n    requirement: () => `Reality with ${formatInt(4)} Glyphs equipped, each having at least ${formatInt(2)} effects\r\n      (${formatInt(Glyphs.activeWithoutCompanion.countWhere(g => g && countValuesFromBitmask(g.effects) >= 2))}\r\n      equipped)`,\r\n    hasFailed: () => {\r\n      const availableGlyphs = Glyphs.inventory.countWhere(g => g && countValuesFromBitmask(g.effects) >= 2);\r\n      const equipped = Glyphs.activeWithoutCompanion.countWhere(g => countValuesFromBitmask(g.effects) >= 2);\r\n      const availableSlots = Glyphs.activeSlotCount - Glyphs.activeList.length;\r\n      return equipped + Math.min(availableGlyphs, availableSlots) < 4;\r\n    },\r\n    checkRequirement: () => Glyphs.activeWithoutCompanion.countWhere(g => countValuesFromBitmask(g.effects) >= 2) === 4,\r\n    checkEvent: GAME_EVENT.REALITY_RESET_BEFORE,\r\n    description: () => `${formatPercents(0.5)} chance to get an additional effect on Glyphs`,\r\n    effect: 0.5,\r\n    formatCost: value => format(value, 1, 0)\r\n  },\r\n  {\r\n    name: \"Measure of Forever\",\r\n    id: 18,\r\n    cost: 1500,\r\n    requirement: () => `Reality with ${formatInt(4)} Glyphs equipped, each at level ${formatInt(10)} or higher\r\n      (${formatInt(Glyphs.activeWithoutCompanion.countWhere(g => g && g.level >= 10))} equipped)`,\r\n    hasFailed: () => {\r\n      const availableGlyphs = Glyphs.inventory.countWhere(g => g && g.level >= 10);\r\n      const equipped = Glyphs.activeWithoutCompanion.countWhere(g => g.level >= 10);\r\n      const availableSlots = Glyphs.activeSlotCount - Glyphs.activeList.length;\r\n      return equipped + Math.min(availableGlyphs, availableSlots) < 4;\r\n    },\r\n    checkRequirement: () => Glyphs.activeWithoutCompanion.countWhere(g => g.level >= 10) === 4,\r\n    checkEvent: GAME_EVENT.REALITY_RESET_BEFORE,\r\n    description: \"Eternity count boosts Glyph level\",\r\n    effect: () => Math.max(Math.sqrt(Currency.eternities.value.plus(1).log10()) * 0.45, 1),\r\n    formatCost: value => format(value, 1, 0)\r\n  },\r\n  {\r\n    name: \"Scour to Empower\",\r\n    id: 19,\r\n    cost: 1500,\r\n    requirement: () => `Have a total of ${formatInt(30)} or more Glyphs at once\r\n      (You have ${formatInt(Glyphs.allGlyphs.countWhere(g => g.type !== \"companion\"))})`,\r\n    hasFailed: () => Glyphs.allGlyphs.countWhere(g => g.type !== \"companion\") < 30,\r\n    checkRequirement: () => Glyphs.allGlyphs.countWhere(g => g.type !== \"companion\") >= 30,\r\n    checkEvent: GAME_EVENT.REALITY_RESET_BEFORE,\r\n    description: \"You can sacrifice Glyphs for permanent bonuses (Shift + click)\",\r\n    formatCost: value => format(value, 1, 0)\r\n  },\r\n  {\r\n    name: \"Parity of Singularity\",\r\n    id: 20,\r\n    cost: 1500,\r\n    requirement: () => `${formatInt(100)} days total play time after unlocking the Black Hole\r\n      (Currently: ${Time.timeSinceBlackHole.toStringShort(false)})`,\r\n    hasFailed: () => !BlackHole(1).isUnlocked && Currency.realityMachines.lt(100),\r\n    checkRequirement: () => Time.timeSinceBlackHole.totalDays >= 100 && BlackHole(1).isUnlocked,\r\n    checkEvent: GAME_EVENT.GAME_TICK_AFTER,\r\n    description: \"Unlock another Black Hole\",\r\n    automatorPoints: 10,\r\n    shortDescription: () => `Second Black Hole`,\r\n    formatCost: value => format(value, 1, 0)\r\n  },\r\n  {\r\n    name: \"Cosmic Conglomerate\",\r\n    id: 21,\r\n    cost: 100000,\r\n    requirement: () => `${formatInt(Replicanti.galaxies.total + player.galaxies +\r\n      player.dilation.totalTachyonGalaxies)}/${formatInt(2800)} total Galaxies from all types`,\r\n    checkRequirement: () =>\r\n      Replicanti.galaxies.total + player.galaxies + player.dilation.totalTachyonGalaxies >= 2800,\r\n    checkEvent: GAME_EVENT.GAME_TICK_AFTER,\r\n    description: () => `Remote Antimatter Galaxy scaling is moved to ${formatInt(1e5)} galaxies`,\r\n    effect: 1e5\r\n  },\r\n  {\r\n    name: \"Temporal Transcendence\",\r\n    id: 22,\r\n    cost: 100000,\r\n    requirement: () => `${format(Currency.timeShards.value, 1)}/${format(DC.E28000)} Time Shards`,\r\n    checkRequirement: () => Currency.timeShards.exponent >= 28000,\r\n    checkEvent: GAME_EVENT.GAME_TICK_AFTER,\r\n    description: \"Time Dimension multiplier based on days spent in this Reality\",\r\n    effect: () => Decimal.pow10(Math.pow(1 + 2 * Math.log10(Time.thisReality.totalDays + 1), 1.6)),\r\n    formatEffect: value => formatX(value, 2, 2)\r\n  },\r\n  {\r\n    name: \"Replicative Rapidity\",\r\n    id: 23,\r\n    cost: 100000,\r\n    requirement: () => `Reality in under ${formatInt(15)} minutes of real game time\r\n      (Fastest: ${Time.bestReality.toStringShort()})`,\r\n    hasFailed: () => Time.thisReality.totalMinutes / getGlobalSpeedFactor() >= 15,\r\n    checkRequirement: () => Time.thisReality.totalMinutes / getGlobalSpeedFactor() < 15,\r\n    checkEvent: GAME_EVENT.REALITY_RESET_BEFORE,\r\n    description: \"Replicanti speed is boosted based on your fastest real game time Reality\",\r\n    effect: () => 15 / Math.clamp(Time.bestReality.totalMinutes, 1 / 12, 15),\r\n    cap: 180,\r\n    formatEffect: value => formatX(value, 2, 2)\r\n  },\r\n  {\r\n    name: \"Synthetic Symbolism\",\r\n    id: 24,\r\n    cost: 100000,\r\n    requirement: () => `Reality for ${formatInt(5000)} Reality Machines (before amplification) without equipped Glyphs`,\r\n    hasFailed: () => Glyphs.activeWithoutCompanion.length > 0,\r\n    checkRequirement: () => MachineHandler.gainedRealityMachines.gte(5000) &&\r\n      Glyphs.activeWithoutCompanion.length === 0,\r\n    canLock: true,\r\n    lockEvent: \"equip a non-Companion Glyph\",\r\n    checkEvent: GAME_EVENT.REALITY_RESET_BEFORE,\r\n    description: \"Gain another Glyph slot\",\r\n    effect: () => 1\r\n  },\r\n  {\r\n    name: \"Effortless Existence\",\r\n    id: 25,\r\n    cost: 100000,\r\n    requirement: () => `Reach ${format(DC.E11111)} EP (Best: ${format(player.records.bestReality.bestEP, 2)} EP)`,\r\n    checkRequirement: () => player.records.bestReality.bestEP.exponent >= 11111,\r\n    checkEvent: GAME_EVENT.ETERNITY_RESET_AFTER,\r\n    description: \"Unlock the Reality autobuyer and Automator command\",\r\n    automatorPoints: 100,\r\n    shortDescription: () => `Reality Autobuyer`,\r\n  },\r\n];\r\n"]},"metadata":{},"sourceType":"module"}