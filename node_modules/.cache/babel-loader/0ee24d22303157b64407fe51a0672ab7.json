{"ast":null,"code":"import CostDisplay from \"@/components/CostDisplay\";\nimport CustomizeableTooltip from \"@/components/CustomizeableTooltip\";\nimport DescriptionDisplay from \"@/components/DescriptionDisplay\";\nexport default {\n  name: \"PelleUpgrade\",\n  components: {\n    DescriptionDisplay,\n    CostDisplay,\n    CustomizeableTooltip\n  },\n  props: {\n    upgrade: {\n      type: Object,\n      required: true\n    },\n    faded: {\n      type: Boolean,\n      required: false\n    },\n    galaxyGenerator: {\n      type: Boolean,\n      required: false\n    },\n    showImprovedEstimate: {\n      type: Boolean,\n      required: false\n    }\n  },\n\n  data() {\n    return {\n      canBuy: false,\n      isBought: false,\n      purchases: 0,\n      currentTimeEstimate: new Decimal(0),\n      projectedTimeEstimate: new Decimal(0),\n      isCapped: false,\n      hovering: false,\n      hasRemnants: false,\n      galaxyCap: 0,\n      notAffordable: false\n    };\n  },\n\n  computed: {\n    config() {\n      return this.upgrade.config;\n    },\n\n    effectText() {\n      if (!this.config.formatEffect) return false;\n      const prefix = this.isCapped ? \"Capped:\" : \"Currently:\";\n\n      const formattedEffect = x => this.config.formatEffect(this.config.effect(x));\n\n      const value = formattedEffect(this.purchases);\n      const next = !this.isCapped && this.hovering ? formattedEffect(this.purchases + 1) : undefined;\n      return {\n        prefix,\n        value,\n        next\n      };\n    },\n\n    timeEstimate() {\n      if (!this.hasTimeEstimate || !this.hasRemnants) return null;\n      if (this.notAffordable) return \"Never affordable due to Generated Galaxy cap\";\n      return this.currentTimeEstimate;\n    },\n\n    hasTimeEstimate() {\n      return !(this.canBuy || this.isBought || this.isCapped || this.galaxyGenerator && this.config.currencyLabel !== \"Galaxy\");\n    },\n\n    shouldEstimateImprovement() {\n      return this.showImprovedEstimate && this.hasTimeEstimate;\n    },\n\n    estimateImprovement() {\n      if (!this.shouldEstimateImprovement) return \"\";\n      if (!Pelle.canArmageddon) return `${this.currentTimeEstimate}`; // If the improved value is still \"> 1 year\" then we only show it once\n\n      if (this.projectedTimeEstimate.startsWith(\">\")) return this.projectedTimeEstimate;\n      return `${this.currentTimeEstimate} ➜ ${this.projectedTimeEstimate}`;\n    }\n\n  },\n  methods: {\n    update() {\n      this.canBuy = this.upgrade.canBeBought && !this.faded;\n      this.isBought = this.upgrade.isBought;\n      this.isCapped = this.upgrade.isCapped;\n      this.purchases = player.celestials.pelle.rebuyables[this.upgrade.config.id];\n      this.currentTimeEstimate = TimeSpan.fromSeconds(this.secondsUntilCost(this.galaxyGenerator ? GalaxyGenerator.gainPerSecond : Pelle.realityShardGainPerSecond).toNumber()).toTimeEstimate();\n      this.projectedTimeEstimate = TimeSpan.fromSeconds(this.secondsUntilCost(Pelle.nextRealityShardGain).toNumber()).toTimeEstimate();\n      this.hasRemnants = Pelle.cel.remnants > 0;\n      this.galaxyCap = GalaxyGenerator.generationCap;\n      const genDB = GameDatabase.celestials.pelle.galaxyGeneratorUpgrades;\n      this.notAffordable = (this.config === genDB.additive || this.config === genDB.multiplicative) && Decimal.gt(this.upgrade.cost, this.galaxyCap - GalaxyGenerator.generatedGalaxies + player.galaxies);\n    },\n\n    secondsUntilCost(rate) {\n      const value = this.galaxyGenerator ? player.galaxies + GalaxyGenerator.galaxies : Currency.realityShards.value;\n      return Decimal.sub(this.upgrade.cost, value).div(rate);\n    }\n\n  }\n};","map":{"version":3,"sources":["PelleUpgrade.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport CostDisplay from \"@/components/CostDisplay\";\r\nimport CustomizeableTooltip from \"@/components/CustomizeableTooltip\";\r\nimport DescriptionDisplay from \"@/components/DescriptionDisplay\";\r\n\r\nexport default {\r\n  name: \"PelleUpgrade\",\r\n  components: {\r\n    DescriptionDisplay,\r\n    CostDisplay,\r\n    CustomizeableTooltip\r\n  },\r\n  props: {\r\n    upgrade: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    faded: {\r\n      type: Boolean,\r\n      required: false\r\n    },\r\n    galaxyGenerator: {\r\n      type: Boolean,\r\n      required: false,\r\n    },\r\n    showImprovedEstimate: {\r\n      type: Boolean,\r\n      required: false,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      canBuy: false,\r\n      isBought: false,\r\n      purchases: 0,\r\n      currentTimeEstimate: new Decimal(0),\r\n      projectedTimeEstimate: new Decimal(0),\r\n      isCapped: false,\r\n      hovering: false,\r\n      hasRemnants: false,\r\n      galaxyCap: 0,\r\n      notAffordable: false\r\n    };\r\n  },\r\n  computed: {\r\n    config() {\r\n      return this.upgrade.config;\r\n    },\r\n    effectText() {\r\n      if (!this.config.formatEffect) return false;\r\n      const prefix = this.isCapped ? \"Capped:\" : \"Currently:\";\r\n      const formattedEffect = x => this.config.formatEffect(this.config.effect(x));\r\n      const value = formattedEffect(this.purchases);\r\n      const next = (!this.isCapped && this.hovering)\r\n        ? formattedEffect(this.purchases + 1)\r\n        : undefined;\r\n      return { prefix, value, next };\r\n    },\r\n    timeEstimate() {\r\n      if (!this.hasTimeEstimate || !this.hasRemnants) return null;\r\n      if (this.notAffordable) return \"Never affordable due to Generated Galaxy cap\";\r\n      return this.currentTimeEstimate;\r\n    },\r\n    hasTimeEstimate() {\r\n      return !(this.canBuy ||\r\n        this.isBought ||\r\n        this.isCapped ||\r\n        (this.galaxyGenerator && this.config.currencyLabel !== \"Galaxy\")\r\n      );\r\n    },\r\n    shouldEstimateImprovement() {\r\n      return this.showImprovedEstimate && this.hasTimeEstimate;\r\n    },\r\n    estimateImprovement() {\r\n      if (!this.shouldEstimateImprovement) return \"\";\r\n      if (!Pelle.canArmageddon) return `${this.currentTimeEstimate}`;\r\n      // If the improved value is still \"> 1 year\" then we only show it once\r\n      if (this.projectedTimeEstimate.startsWith(\">\")) return this.projectedTimeEstimate;\r\n      return `${this.currentTimeEstimate} ➜ ${this.projectedTimeEstimate}`;\r\n    },\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.canBuy = this.upgrade.canBeBought && !this.faded;\r\n      this.isBought = this.upgrade.isBought;\r\n      this.isCapped = this.upgrade.isCapped;\r\n      this.purchases = player.celestials.pelle.rebuyables[this.upgrade.config.id];\r\n      this.currentTimeEstimate = TimeSpan\r\n        .fromSeconds(this.secondsUntilCost(this.galaxyGenerator ? GalaxyGenerator.gainPerSecond\r\n          : Pelle.realityShardGainPerSecond).toNumber())\r\n        .toTimeEstimate();\r\n      this.projectedTimeEstimate = TimeSpan\r\n        .fromSeconds(this.secondsUntilCost(Pelle.nextRealityShardGain).toNumber())\r\n        .toTimeEstimate();\r\n      this.hasRemnants = Pelle.cel.remnants > 0;\r\n      this.galaxyCap = GalaxyGenerator.generationCap;\r\n      const genDB = GameDatabase.celestials.pelle.galaxyGeneratorUpgrades;\r\n      this.notAffordable = (this.config === genDB.additive || this.config === genDB.multiplicative) &&\r\n        (Decimal.gt(this.upgrade.cost, this.galaxyCap - GalaxyGenerator.generatedGalaxies + player.galaxies));\r\n    },\r\n    secondsUntilCost(rate) {\r\n      const value = this.galaxyGenerator ? player.galaxies + GalaxyGenerator.galaxies : Currency.realityShards.value;\r\n      return Decimal.sub(this.upgrade.cost, value).div(rate);\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <button\r\n    class=\"c-pelle-upgrade\"\r\n    :class=\"{\r\n      'c-pelle-upgrade--unavailable': !canBuy && !(isBought || isCapped),\r\n      'c-pelle-upgrade--bought': isBought || isCapped,\r\n      'c-pelle-upgrade--faded': faded,\r\n      'c-pelle-upgrade--galaxyGenerator': galaxyGenerator\r\n    }\"\r\n    @click=\"!faded && upgrade.purchase()\"\r\n    @mouseover=\"hovering = true\"\r\n    @mouseleave=\"hovering = false\"\r\n  >\r\n    <CustomizeableTooltip\r\n      :show=\"shouldEstimateImprovement\"\r\n      left=\"50%\"\r\n      top=\"0\"\r\n    >\r\n      <template #tooltipContent>\r\n        {{ estimateImprovement }}\r\n      </template>\r\n    </CustomizeableTooltip>\r\n    <CustomizeableTooltip\r\n      v-if=\"timeEstimate\"\r\n      left=\"50%\"\r\n      top=\"0\"\r\n      content-class=\"l-fill-container\"\r\n    >\r\n      <template #tooltipContent>\r\n        {{ timeEstimate }}\r\n      </template>\r\n    </CustomizeableTooltip>\r\n    <DescriptionDisplay :config=\"config\" />\r\n    <div class=\"l-pelle-upgrade-gap\" />\r\n    <div v-if=\"effectText\">\r\n      {{ effectText.prefix }} {{ effectText.value }}\r\n      <template v-if=\"effectText.next\">\r\n        ➜ <span\r\n          :class=\"{\r\n            'c-improved-effect': canBuy,\r\n            'c-improved-effect--unavailable': !canBuy,\r\n          }\"\r\n        >\r\n          {{ effectText.next }}\r\n        </span>\r\n      </template>\r\n      <div class=\"l-pelle-upgrade-gap\" />\r\n    </div>\r\n    <CostDisplay\r\n      v-if=\"!isCapped\"\r\n      :config=\"config\"\r\n      :name=\"galaxyGenerator ? config.currencyLabel : 'Reality Shard'\"\r\n    />\r\n  </button>\r\n</template>\r\n\r\n<style scoped>\r\n.c-pelle-upgrade {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 18rem;\r\n  height: 9rem;\r\n  position: relative;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-family: Typewriter;\r\n  font-size: 0.95rem;\r\n  font-weight: bold;\r\n  color: var(--color-text);\r\n  background: var(--color-text-inverted);\r\n  border: 0.1rem solid var(--color-pelle--secondary);\r\n  border-radius: var(--var-border-radius, 0.5rem);\r\n  box-shadow: inset 0 0 1rem 0.1rem var(--color-pelle--secondary);\r\n  margin: 0.6rem 0.55rem;\r\n  padding: 1rem;\r\n  cursor: pointer;\r\n}\r\n\r\n.c-pelle-upgrade:hover {\r\n  box-shadow: inset 0 0 2rem 0.1rem var(--color-pelle--secondary);\r\n  transition-duration: 0.3s;\r\n}\r\n\r\n/* stylelint-disable-next-line selector-class-pattern */\r\n.c-pelle-upgrade--galaxyGenerator {\r\n  font-weight: bold;\r\n  color: black;\r\n  background: linear-gradient(var(--color-pelle--secondary), var(--color-pelle--base));\r\n  box-shadow: none;\r\n}\r\n\r\n.c-pelle-upgrade--unavailable {\r\n  color: black;\r\n  background: #5f5f5f;\r\n  box-shadow: none;\r\n  cursor: default;\r\n}\r\n\r\n.c-pelle-upgrade--faded {\r\n  opacity: 0.3;\r\n  box-shadow: none;\r\n  cursor: default;\r\n}\r\n\r\n.c-pelle-upgrade--bought {\r\n  color: black;\r\n  background: var(--color-pelle--secondary);\r\n  cursor: default;\r\n}\r\n\r\n/* stylelint-disable-next-line selector-class-pattern */\r\n.c-pelle-upgrade--galaxyGenerator:hover,\r\n.c-pelle-upgrade--unavailable:hover,\r\n.c-pelle-upgrade--faded:hover,\r\n.c-pelle-upgrade--bought:hover {\r\n  box-shadow: 0.1rem 0.1rem 0.5rem var(--color-pelle--secondary);\r\n  transition-duration: 0.3s;\r\n}\r\n\r\n.l-pelle-upgrade-gap {\r\n  flex-shrink: 0;\r\n  height: 0.5rem;\r\n}\r\n\r\n.c-improved-effect {\r\n  font-weight: bold;\r\n  color: #00bb00;\r\n}\r\n\r\n.c-improved-effect--unavailable {\r\n  font-weight: bold;\r\n  color: var(--color-infinity);\r\n}\r\n\r\n.s-base--metro .c-pelle-upgrade--unavailable {\r\n  background-color: #9e9e9e;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/celestial-pelle"},"metadata":{},"sourceType":"module"}