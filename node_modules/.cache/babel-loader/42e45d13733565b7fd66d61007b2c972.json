{"ast":null,"code":"import { UpgradeableAutobuyerState } from \"./autobuyer\";\nexport class BigCrunchAutobuyerState extends UpgradeableAutobuyerState {\n  get data() {\n    return player.auto.bigCrunch;\n  }\n\n  get name() {\n    return `Infinity`;\n  }\n\n  get isUnlocked() {\n    return Pelle.isDoomed ? PelleStrikes.infinity.hasStrike : this.canBeUpgraded;\n  }\n\n  get canBeUpgraded() {\n    return NormalChallenge(12).isCompleted;\n  }\n\n  get baseInterval() {\n    return Player.defaultStart.auto.bigCrunch.interval;\n  }\n\n  get mode() {\n    return this.data.mode;\n  }\n\n  set mode(value) {\n    this.data.mode = value;\n  }\n\n  get hasAdditionalModes() {\n    return EternityMilestone.bigCrunchModes.isReached;\n  }\n\n  get increaseWithMult() {\n    return this.data.increaseWithMult;\n  }\n\n  set increaseWithMult(value) {\n    this.data.increaseWithMult = value;\n  }\n\n  get amount() {\n    return this.data.amount;\n  } // This is unused mechanically, but should be zero to suppress the \"Current bulk:\" text\n\n\n  get bulk() {\n    return 0;\n  }\n\n  set amount(value) {\n    this.data.amount = value;\n  }\n\n  get time() {\n    return this.data.time;\n  }\n\n  set time(value) {\n    this.data.time = value;\n  }\n\n  get xHighest() {\n    return this.data.xHighest;\n  }\n\n  set xHighest(value) {\n    this.data.xHighest = value;\n  }\n\n  autoInfinitiesAvailable(considerMilestoneReached) {\n    return (considerMilestoneReached || EternityMilestone.autoInfinities.isReached) && !EternityChallenge(4).isRunning && !EternityChallenge(12).isRunning && !Player.isInAntimatterChallenge && player.auto.autobuyersOn && this.data.isActive && !Autobuyer.eternity.isActive && this.mode === AUTO_CRUNCH_MODE.TIME && this.time <= 5 && !Autobuyer.eternity.autoEternitiesAvailable();\n  }\n\n  upgradeInterval(free) {\n    super.upgradeInterval(free);\n    TabNotification.breakInfinity.tryTrigger();\n  }\n\n  bumpAmount(mult) {\n    if (this.isUnlocked && this.increaseWithMult) {\n      this.amount = this.amount.times(mult);\n    }\n  }\n\n  get canTick() {\n    return Player.canCrunch && super.canTick;\n  }\n\n  get resetTickOn() {\n    return PRESTIGE_EVENT.ETERNITY;\n  }\n\n  get highestPrevPrestige() {\n    return player.records.thisEternity.maxIP;\n  }\n\n  get timeToNextTick() {\n    return Math.clampMin(this.time - Time.thisInfinityRealTime.totalSeconds, 0);\n  }\n\n  get willInfinity() {\n    if (!player.break || Player.isInAntimatterChallenge) return true;\n\n    switch (this.mode) {\n      case AUTO_CRUNCH_MODE.AMOUNT:\n        return gainedInfinityPoints().gte(this.amount);\n\n      case AUTO_CRUNCH_MODE.TIME:\n        return Time.thisInfinityRealTime.totalSeconds > this.time;\n\n      case AUTO_CRUNCH_MODE.X_HIGHEST:\n      default:\n        return gainedInfinityPoints().gte(this.highestPrevPrestige.times(this.xHighest));\n    }\n  }\n\n  tick() {\n    super.tick();\n    if (this.willInfinity) bigCrunchResetRequest(true);\n  }\n\n  reset() {\n    super.reset();\n    if (EternityMilestone.bigCrunchModes.isReached) return;\n    this.mode = AUTO_CRUNCH_MODE.AMOUNT;\n  }\n\n}","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/core/autobuyers/big-crunch-autobuyer.js"],"names":["UpgradeableAutobuyerState","BigCrunchAutobuyerState","data","player","auto","bigCrunch","name","isUnlocked","Pelle","isDoomed","PelleStrikes","infinity","hasStrike","canBeUpgraded","NormalChallenge","isCompleted","baseInterval","Player","defaultStart","interval","mode","value","hasAdditionalModes","EternityMilestone","bigCrunchModes","isReached","increaseWithMult","amount","bulk","time","xHighest","autoInfinitiesAvailable","considerMilestoneReached","autoInfinities","EternityChallenge","isRunning","isInAntimatterChallenge","autobuyersOn","isActive","Autobuyer","eternity","AUTO_CRUNCH_MODE","TIME","autoEternitiesAvailable","upgradeInterval","free","TabNotification","breakInfinity","tryTrigger","bumpAmount","mult","times","canTick","canCrunch","resetTickOn","PRESTIGE_EVENT","ETERNITY","highestPrevPrestige","records","thisEternity","maxIP","timeToNextTick","Math","clampMin","Time","thisInfinityRealTime","totalSeconds","willInfinity","break","AMOUNT","gainedInfinityPoints","gte","X_HIGHEST","tick","bigCrunchResetRequest","reset"],"mappings":"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","sourcesContent":["import { UpgradeableAutobuyerState } from \"./autobuyer\";\r\n\r\nexport class BigCrunchAutobuyerState extends UpgradeableAutobuyerState {\r\n  get data() {\r\n    return player.auto.bigCrunch;\r\n  }\r\n\r\n  get name() {\r\n    return `Infinity`;\r\n  }\r\n\r\n  get isUnlocked() {\r\n    return Pelle.isDoomed\r\n      ? PelleStrikes.infinity.hasStrike\r\n      : this.canBeUpgraded;\r\n  }\r\n\r\n  get canBeUpgraded() {\r\n    return NormalChallenge(12).isCompleted;\r\n  }\r\n\r\n  get baseInterval() {\r\n    return Player.defaultStart.auto.bigCrunch.interval;\r\n  }\r\n\r\n  get mode() {\r\n    return this.data.mode;\r\n  }\r\n\r\n  set mode(value) {\r\n    this.data.mode = value;\r\n  }\r\n\r\n  get hasAdditionalModes() {\r\n    return EternityMilestone.bigCrunchModes.isReached;\r\n  }\r\n\r\n  get increaseWithMult() {\r\n    return this.data.increaseWithMult;\r\n  }\r\n\r\n  set increaseWithMult(value) {\r\n    this.data.increaseWithMult = value;\r\n  }\r\n\r\n  get amount() {\r\n    return this.data.amount;\r\n  }\r\n\r\n  // This is unused mechanically, but should be zero to suppress the \"Current bulk:\" text\r\n  get bulk() {\r\n    return 0;\r\n  }\r\n\r\n  set amount(value) {\r\n    this.data.amount = value;\r\n  }\r\n\r\n  get time() {\r\n    return this.data.time;\r\n  }\r\n\r\n  set time(value) {\r\n    this.data.time = value;\r\n  }\r\n\r\n  get xHighest() {\r\n    return this.data.xHighest;\r\n  }\r\n\r\n  set xHighest(value) {\r\n    this.data.xHighest = value;\r\n  }\r\n\r\n  autoInfinitiesAvailable(considerMilestoneReached) {\r\n    return (considerMilestoneReached || EternityMilestone.autoInfinities.isReached) &&\r\n      !EternityChallenge(4).isRunning && !EternityChallenge(12).isRunning && !Player.isInAntimatterChallenge &&\r\n      player.auto.autobuyersOn && this.data.isActive &&\r\n      !Autobuyer.eternity.isActive && this.mode === AUTO_CRUNCH_MODE.TIME && this.time <= 5 &&\r\n      !Autobuyer.eternity.autoEternitiesAvailable();\r\n  }\r\n\r\n  upgradeInterval(free) {\r\n    super.upgradeInterval(free);\r\n    TabNotification.breakInfinity.tryTrigger();\r\n  }\r\n\r\n  bumpAmount(mult) {\r\n    if (this.isUnlocked && this.increaseWithMult) {\r\n      this.amount = this.amount.times(mult);\r\n    }\r\n  }\r\n\r\n  get canTick() {\r\n    return Player.canCrunch && super.canTick;\r\n  }\r\n\r\n  get resetTickOn() {\r\n    return PRESTIGE_EVENT.ETERNITY;\r\n  }\r\n\r\n  get highestPrevPrestige() {\r\n    return player.records.thisEternity.maxIP;\r\n  }\r\n\r\n  get timeToNextTick() {\r\n    return Math.clampMin(this.time - Time.thisInfinityRealTime.totalSeconds, 0);\r\n  }\r\n\r\n  get willInfinity() {\r\n    if (!player.break || Player.isInAntimatterChallenge) return true;\r\n\r\n    switch (this.mode) {\r\n      case AUTO_CRUNCH_MODE.AMOUNT:\r\n        return gainedInfinityPoints().gte(this.amount);\r\n      case AUTO_CRUNCH_MODE.TIME:\r\n        return Time.thisInfinityRealTime.totalSeconds > this.time;\r\n      case AUTO_CRUNCH_MODE.X_HIGHEST:\r\n      default:\r\n        return gainedInfinityPoints().gte(this.highestPrevPrestige.times(this.xHighest));\r\n    }\r\n  }\r\n\r\n  tick() {\r\n    super.tick();\r\n    if (this.willInfinity) bigCrunchResetRequest(true);\r\n  }\r\n\r\n  reset() {\r\n    super.reset();\r\n    if (EternityMilestone.bigCrunchModes.isReached) return;\r\n    this.mode = AUTO_CRUNCH_MODE.AMOUNT;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}