{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";\nexport default {\n  name: \"RealityReminder\",\n\n  data() {\n    return {\n      canReality: false,\n      isVisible: false,\n      isExpanded: false,\n      ecCount: 0,\n      missingAchievements: 0,\n      unpurchasedDilationUpgrades: 0,\n      currLog10EP: 0,\n      cheapestLog10TD: 0,\n      multEPLog10Cost: 0,\n      purchasableTS: 0,\n      hasDilated: 0,\n      availableCharges: 0\n    };\n  },\n\n  computed: {\n    suggestions() {\n      const arr = [];\n\n      if (this.purchasableTS > 0) {\n        arr.push(`Purchase more Time Studies (${formatInt(this.purchasableTS)} available)`);\n      }\n\n      if (this.missingAchievements > 0) {\n        arr.push(`Complete the rest of your Achievements (${formatInt(this.missingAchievements)} left)`);\n      }\n\n      if (this.unpurchasedDilationUpgrades > 0) {\n        arr.push(`Purchase the remaining Dilation Upgrades (${formatInt(this.unpurchasedDilationUpgrades)} left)`);\n      }\n\n      if (this.currLog10EP > 1.3 * this.cheapestLog10TD) {\n        arr.push(`Purchase more TDs (cheapest: ${format(Decimal.pow10(this.cheapestLog10TD))} EP)`);\n      }\n\n      if (this.currLog10EP > 1.3 * this.multEPLog10Cost) {\n        arr.push(`Purchase more ${formatX(5)} EP (cost: ${format(Decimal.pow10(this.multEPLog10Cost))} EP)`);\n      }\n\n      if (this.ecCount < 60) {\n        arr.push(`Finish the rest of your ECs (Done: ${formatInt(this.ecCount)}/${formatInt(60)})`);\n      }\n\n      if (!this.hasDilated) {\n        arr.push(\"Perform a Dilated Eternity\");\n      }\n\n      if (this.availableCharges > 0) {\n        arr.push(`Charge more Infinity Upgrades (${formatInt(this.availableCharges)} available)`);\n      }\n\n      return arr;\n    },\n\n    canBeExpanded() {\n      return this.canReality && this.suggestions.length !== 0;\n    },\n\n    styleObject() {\n      const color = !this.canReality || this.canBeExpanded ? \"var(--color-bad)\" : \"var(--color-good)\"; // Has both is and canBe in order to force the height back to its minimum size when all suggestions are done\n\n      const height = this.canBeExpanded && this.isExpanded ? `${6.5 + 1.5 * this.suggestions.length}rem` : \"5rem\";\n      return {\n        color,\n        height\n      };\n    },\n\n    clickText() {\n      return `(click to ${this.isExpanded ? \"collapse\" : \"expand\"})`;\n    },\n\n    realityReminderClass() {\n      return {\n        \"c-reality-reminder\": true,\n        \"c-reality-reminder-pointer\": this.canBeExpanded\n      };\n    },\n\n    dropDownIconClass() {\n      return this.isExpanded ? \"far fa-minus-square\" : \"far fa-plus-square\";\n    }\n\n  },\n\n  created() {\n    // Collapsing it after every reality resets the height to its fixed minimum value, stopping screen jitter\n    this.on$(GAME_EVENT.REALITY_RESET_AFTER, () => this.isExpanded = false);\n  },\n\n  methods: {\n    update() {\n      this.canReality = TimeStudy.reality.isBought;\n      this.isVisible = !isInCelestialReality();\n      this.ecCount = EternityChallenges.completions;\n      this.missingAchievements = Achievements.preReality.countWhere(a => !a.isUnlocked); // Repeatable dilation upgrades don't have isBought, but do have boughtAmount\n\n      this.unpurchasedDilationUpgrades = DilationUpgrade.all.countWhere(u => (u.isBought === undefined ? u.boughtAmount === 0 : !u.isBought) && !u.config.pelleOnly);\n      this.currLog10EP = player.eternityPoints.log10();\n      this.cheapestLog10TD = Math.min(...TimeDimensions.all.map(x => x.cost.log10()));\n      this.multEPLog10Cost = EternityUpgrade.epMult.cost.log10();\n      this.purchasableTS = NormalTimeStudyState.studies.countWhere(s => s && s.canBeBought && !s.isBought);\n      this.hasDilated = Perk.startTP.canBeApplied ? player.dilation.lastEP.gt(0) : player.dilation.tachyonParticles.gt(0);\n      this.availableCharges = Ra.chargesLeft;\n    },\n\n    clicked() {\n      if (!this.canBeExpanded) return;\n      this.isExpanded = !this.isExpanded;\n    }\n\n  }\n};","map":{"version":3,"sources":["RealityReminder.vue"],"names":[],"mappings":";AACA,eAAA;AACA,EAAA,IAAA,EAAA,iBADA;;AAEA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,UAAA,EAAA,KADA;AAEA,MAAA,SAAA,EAAA,KAFA;AAGA,MAAA,UAAA,EAAA,KAHA;AAIA,MAAA,OAAA,EAAA,CAJA;AAKA,MAAA,mBAAA,EAAA,CALA;AAMA,MAAA,2BAAA,EAAA,CANA;AAOA,MAAA,WAAA,EAAA,CAPA;AAQA,MAAA,eAAA,EAAA,CARA;AASA,MAAA,eAAA,EAAA,CATA;AAUA,MAAA,aAAA,EAAA,CAVA;AAWA,MAAA,UAAA,EAAA,CAXA;AAYA,MAAA,gBAAA,EAAA;AAZA,KAAA;AAcA,GAjBA;;AAkBA,EAAA,QAAA,EAAA;AACA,IAAA,WAAA,GAAA;AACA,YAAA,GAAA,GAAA,EAAA;;AACA,UAAA,KAAA,aAAA,GAAA,CAAA,EAAA;AACA,QAAA,GAAA,CAAA,IAAA,CAAA,+BAAA,SAAA,CAAA,KAAA,aAAA,CAAA,aAAA;AACA;;AACA,UAAA,KAAA,mBAAA,GAAA,CAAA,EAAA;AACA,QAAA,GAAA,CAAA,IAAA,CAAA,2CAAA,SAAA,CAAA,KAAA,mBAAA,CAAA,QAAA;AACA;;AACA,UAAA,KAAA,2BAAA,GAAA,CAAA,EAAA;AACA,QAAA,GAAA,CAAA,IAAA,CAAA,6CAAA,SAAA,CAAA,KAAA,2BAAA,CAAA,QAAA;AACA;;AACA,UAAA,KAAA,WAAA,GAAA,MAAA,KAAA,eAAA,EAAA;AACA,QAAA,GAAA,CAAA,IAAA,CAAA,gCAAA,MAAA,CAAA,OAAA,CAAA,KAAA,CAAA,KAAA,eAAA,CAAA,CAAA,MAAA;AACA;;AACA,UAAA,KAAA,WAAA,GAAA,MAAA,KAAA,eAAA,EAAA;AACA,QAAA,GAAA,CAAA,IAAA,CAAA,iBAAA,OAAA,CAAA,CAAA,CAAA,cAAA,MAAA,CAAA,OAAA,CAAA,KAAA,CAAA,KAAA,eAAA,CAAA,CAAA,MAAA;AACA;;AACA,UAAA,KAAA,OAAA,GAAA,EAAA,EAAA;AACA,QAAA,GAAA,CAAA,IAAA,CAAA,sCAAA,SAAA,CAAA,KAAA,OAAA,CAAA,IAAA,SAAA,CAAA,EAAA,CAAA,GAAA;AACA;;AACA,UAAA,CAAA,KAAA,UAAA,EAAA;AACA,QAAA,GAAA,CAAA,IAAA,CAAA,4BAAA;AACA;;AACA,UAAA,KAAA,gBAAA,GAAA,CAAA,EAAA;AACA,QAAA,GAAA,CAAA,IAAA,CAAA,kCAAA,SAAA,CAAA,KAAA,gBAAA,CAAA,aAAA;AACA;;AACA,aAAA,GAAA;AACA,KA5BA;;AA6BA,IAAA,aAAA,GAAA;AACA,aAAA,KAAA,UAAA,IAAA,KAAA,WAAA,CAAA,MAAA,KAAA,CAAA;AACA,KA/BA;;AAgCA,IAAA,WAAA,GAAA;AACA,YAAA,KAAA,GAAA,CAAA,KAAA,UAAA,IAAA,KAAA,aAAA,GAAA,kBAAA,GAAA,mBAAA,CADA,CAEA;;AACA,YAAA,MAAA,GAAA,KAAA,aAAA,IAAA,KAAA,UAAA,GAAA,GAAA,MAAA,MAAA,KAAA,WAAA,CAAA,MAAA,KAAA,GAAA,MAAA;AACA,aAAA;AACA,QAAA,KADA;AAEA,QAAA;AAFA,OAAA;AAIA,KAxCA;;AAyCA,IAAA,SAAA,GAAA;AACA,aAAA,aAAA,KAAA,UAAA,GAAA,UAAA,GAAA,QAAA,GAAA;AACA,KA3CA;;AA4CA,IAAA,oBAAA,GAAA;AACA,aAAA;AACA,8BAAA,IADA;AAEA,sCAAA,KAAA;AAFA,OAAA;AAIA,KAjDA;;AAkDA,IAAA,iBAAA,GAAA;AACA,aAAA,KAAA,UAAA,GAAA,qBAAA,GAAA,oBAAA;AACA;;AApDA,GAlBA;;AAwEA,EAAA,OAAA,GAAA;AACA;AACA,SAAA,GAAA,CAAA,UAAA,CAAA,mBAAA,EAAA,MAAA,KAAA,UAAA,GAAA,KAAA;AACA,GA3EA;;AA4EA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,UAAA,GAAA,SAAA,CAAA,OAAA,CAAA,QAAA;AACA,WAAA,SAAA,GAAA,CAAA,oBAAA,EAAA;AACA,WAAA,OAAA,GAAA,kBAAA,CAAA,WAAA;AACA,WAAA,mBAAA,GAAA,YAAA,CAAA,UAAA,CAAA,UAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,UAAA,CAAA,CAJA,CAKA;;AACA,WAAA,2BAAA,GAAA,eAAA,CAAA,GAAA,CACA,UADA,CACA,CAAA,IAAA,CAAA,CAAA,CAAA,QAAA,KAAA,SAAA,GAAA,CAAA,CAAA,YAAA,KAAA,CAAA,GAAA,CAAA,CAAA,CAAA,QAAA,KAAA,CAAA,CAAA,CAAA,MAAA,CAAA,SADA,CAAA;AAEA,WAAA,WAAA,GAAA,MAAA,CAAA,cAAA,CAAA,KAAA,EAAA;AACA,WAAA,eAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,cAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAAA,KAAA,EAAA,CAAA,CAAA;AACA,WAAA,eAAA,GAAA,eAAA,CAAA,MAAA,CAAA,IAAA,CAAA,KAAA,EAAA;AACA,WAAA,aAAA,GAAA,oBAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,WAAA,IAAA,CAAA,CAAA,CAAA,QAAA,CAAA;AACA,WAAA,UAAA,GAAA,IAAA,CAAA,OAAA,CAAA,YAAA,GAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GACA,MAAA,CAAA,QAAA,CAAA,gBAAA,CAAA,EAAA,CAAA,CAAA,CADA;AAEA,WAAA,gBAAA,GAAA,EAAA,CAAA,WAAA;AACA,KAhBA;;AAiBA,IAAA,OAAA,GAAA;AACA,UAAA,CAAA,KAAA,aAAA,EAAA;AACA,WAAA,UAAA,GAAA,CAAA,KAAA,UAAA;AACA;;AApBA;AA5EA,CAAA","sourcesContent":["<script>\r\nexport default {\r\n  name: \"RealityReminder\",\r\n  data() {\r\n    return {\r\n      canReality: false,\r\n      isVisible: false,\r\n      isExpanded: false,\r\n      ecCount: 0,\r\n      missingAchievements: 0,\r\n      unpurchasedDilationUpgrades: 0,\r\n      currLog10EP: 0,\r\n      cheapestLog10TD: 0,\r\n      multEPLog10Cost: 0,\r\n      purchasableTS: 0,\r\n      hasDilated: 0,\r\n      availableCharges: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    suggestions() {\r\n      const arr = [];\r\n      if (this.purchasableTS > 0) {\r\n        arr.push(`Purchase more Time Studies (${formatInt(this.purchasableTS)} available)`);\r\n      }\r\n      if (this.missingAchievements > 0) {\r\n        arr.push(`Complete the rest of your Achievements (${formatInt(this.missingAchievements)} left)`);\r\n      }\r\n      if (this.unpurchasedDilationUpgrades > 0) {\r\n        arr.push(`Purchase the remaining Dilation Upgrades (${formatInt(this.unpurchasedDilationUpgrades)} left)`);\r\n      }\r\n      if (this.currLog10EP > 1.3 * this.cheapestLog10TD) {\r\n        arr.push(`Purchase more TDs (cheapest: ${format(Decimal.pow10(this.cheapestLog10TD))} EP)`);\r\n      }\r\n      if (this.currLog10EP > 1.3 * this.multEPLog10Cost) {\r\n        arr.push(`Purchase more ${formatX(5)} EP (cost: ${format(Decimal.pow10(this.multEPLog10Cost))} EP)`);\r\n      }\r\n      if (this.ecCount < 60) {\r\n        arr.push(`Finish the rest of your ECs (Done: ${formatInt(this.ecCount)}/${formatInt(60)})`);\r\n      }\r\n      if (!this.hasDilated) {\r\n        arr.push(\"Perform a Dilated Eternity\");\r\n      }\r\n      if (this.availableCharges > 0) {\r\n        arr.push(`Charge more Infinity Upgrades (${formatInt(this.availableCharges)} available)`);\r\n      }\r\n      return arr;\r\n    },\r\n    canBeExpanded() {\r\n      return this.canReality && this.suggestions.length !== 0;\r\n    },\r\n    styleObject() {\r\n      const color = (!this.canReality || this.canBeExpanded) ? \"var(--color-bad)\" : \"var(--color-good)\";\r\n      // Has both is and canBe in order to force the height back to its minimum size when all suggestions are done\r\n      const height = (this.canBeExpanded && this.isExpanded) ? `${6.5 + 1.5 * this.suggestions.length}rem` : \"5rem\";\r\n      return {\r\n        color,\r\n        height,\r\n      };\r\n    },\r\n    clickText() {\r\n      return `(click to ${this.isExpanded ? \"collapse\" : \"expand\"})`;\r\n    },\r\n    realityReminderClass() {\r\n      return {\r\n        \"c-reality-reminder\": true,\r\n        \"c-reality-reminder-pointer\": this.canBeExpanded,\r\n      };\r\n    },\r\n    dropDownIconClass() {\r\n      return this.isExpanded ? \"far fa-minus-square\" : \"far fa-plus-square\";\r\n    }\r\n  },\r\n  created() {\r\n    // Collapsing it after every reality resets the height to its fixed minimum value, stopping screen jitter\r\n    this.on$(GAME_EVENT.REALITY_RESET_AFTER, () => this.isExpanded = false);\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.canReality = TimeStudy.reality.isBought;\r\n      this.isVisible = !isInCelestialReality();\r\n      this.ecCount = EternityChallenges.completions;\r\n      this.missingAchievements = Achievements.preReality.countWhere(a => !a.isUnlocked);\r\n      // Repeatable dilation upgrades don't have isBought, but do have boughtAmount\r\n      this.unpurchasedDilationUpgrades = DilationUpgrade.all\r\n        .countWhere(u => (u.isBought === undefined ? u.boughtAmount === 0 : !u.isBought) && !u.config.pelleOnly);\r\n      this.currLog10EP = player.eternityPoints.log10();\r\n      this.cheapestLog10TD = Math.min(...TimeDimensions.all.map(x => x.cost.log10()));\r\n      this.multEPLog10Cost = EternityUpgrade.epMult.cost.log10();\r\n      this.purchasableTS = NormalTimeStudyState.studies.countWhere(s => s && s.canBeBought && !s.isBought);\r\n      this.hasDilated = Perk.startTP.canBeApplied ? player.dilation.lastEP.gt(0)\r\n        : player.dilation.tachyonParticles.gt(0);\r\n      this.availableCharges = Ra.chargesLeft;\r\n    },\r\n    clicked() {\r\n      if (!this.canBeExpanded) return;\r\n      this.isExpanded = !this.isExpanded;\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    v-if=\"isVisible\"\r\n    :class=\"realityReminderClass\"\r\n    :style=\"styleObject\"\r\n    @click=\"clicked\"\r\n  >\r\n    <span v-if=\"!canReality\">\r\n      You still need to unlock Reality in the Time Study Tree.\r\n    </span>\r\n    <span v-else-if=\"suggestions.length === 0\">\r\n      Ready to Reality! You have unlocked every available upgrade within this Reality.\r\n    </span>\r\n    <span v-else>\r\n      <i :class=\"dropDownIconClass\" />\r\n      You have {{ quantifyInt(\"thing\", suggestions.length) }}\r\n      you may want to do before Reality. {{ clickText }}\r\n      <div\r\n        v-if=\"isExpanded\"\r\n        class=\"l-suggestions\"\r\n      >\r\n        <br>\r\n        <div\r\n          v-for=\"suggestion in suggestions\"\r\n          :key=\"suggestion\"\r\n        >\r\n          {{ suggestion }}\r\n        </div>\r\n      </div>\r\n    </span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.l-suggestions {\r\n  font-size: 1rem;\r\n}\r\n\r\n.c-reality-reminder-pointer {\r\n  cursor: pointer;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/glyphs"},"metadata":{},"sourceType":"module"}