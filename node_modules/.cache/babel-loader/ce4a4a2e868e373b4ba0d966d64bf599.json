{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport SliderComponent from \"@/components/SliderComponent\";\nimport ToggleButton from \"@/components/ToggleButton\";\nexport default {\n  name: \"GlyphLevelsAndWeights\",\n  components: {\n    ToggleButton,\n    SliderComponent\n  },\n\n  data() {\n    return {\n      perkShopVisible: false,\n      penaltyVisible: false,\n      rowVisible: false,\n      achievementVisible: false,\n      showAutoAdjustWeights: false,\n      isAutoAdjustWeightsOn: false,\n      factors: getGlyphLevelInputs(),\n      shardsGained: 0,\n      weights: Object.assign({}, player.celestials.effarig.glyphWeights),\n      rows: 3\n    };\n  },\n\n  computed: {\n    gridStyle() {\n      // Column specifications: {factor_name, math_operator, factor_value, weight_adjustment, padding}\n      const columns = this.adjustVisible ? \"30% 3% 17% 48% 2%\" : \"80% 5% 15%\";\n      return {\n        width: \"100%\",\n        \"-ms-grid-columns\": columns,\n        \"grid-template-columns\": columns,\n        \"grid-auto-rows\": \"1fr\"\n      };\n    },\n\n    adjustOutlineStyle() {\n      const rows = 5 + (this.showAutoAdjustWeights ? 1 : 0);\n      return `grid-row: 1 / ${rows + 1}; -ms-grid-row: 1; -ms-grid-row-span: ${rows};`;\n    },\n\n    formatPerkShop() {\n      return formatPercents(this.factors.perkShop - 1, 1);\n    },\n\n    sliderProps() {\n      return {\n        min: 0,\n        max: 100,\n        interval: 1,\n        disabled: this.isAutoAdjustWeightsOn,\n        \"dot-width\": \"2.2rem\",\n        \"dot-height\": \"1.6rem\",\n        width: \"13.5rem\",\n        tooltip: false,\n        \"value-in-dot\": true,\n        \"plus-minus-buttons\": true,\n        \"dot-class\": \"c-glyph-levels-and-weights__slider-handle\",\n        \"bg-class\": \"c-glyph-levels-and-weights__slider-bg\",\n        \"process-class\": \"c-glyph-levels-and-weights__slider-process\"\n      };\n    },\n\n    totalWeights() {\n      return this.weights.ep + this.weights.repl + this.weights.dt + this.weights.eternities;\n    },\n\n    // The order that elements gets pushed in this method determines the display order\n    visibleRows() {\n      const rows = [\"ep\", \"replicanti\", \"dt\"];\n      if (this.eternityVisible) rows.push(\"eternities\");\n      if (this.perkShopVisible) rows.push(\"perk shop\");\n      if (this.shardVisible) rows.push(\"shards\");\n      if (this.singularityVisible) rows.push(\"singularities\");\n      if (this.penaltyVisible) rows.push(\"instability\");\n      if (this.rowVisible) rows.push(\"upgrade rows\");\n      if (this.achievementVisible) rows.push(\"achievements\");\n      rows.push(\"level\");\n      rows.push(\"info\");\n      rows.push(\"info2\");\n      return rows;\n    },\n\n    adjustVisible() {\n      return EffarigUnlock.adjuster.isUnlocked;\n    },\n\n    eternityVisible() {\n      return RealityUpgrade(18).isBought;\n    },\n\n    shardVisible() {\n      return Ra.unlocks.relicShardGlyphLevelBoost.canBeApplied && this.shardsGained !== 0;\n    },\n\n    singularityVisible() {\n      return SingularityMilestone.glyphLevelFromSingularities.canBeApplied;\n    }\n\n  },\n  watch: {\n    isAutoAdjustWeightsOn(newValue) {\n      player.celestials.effarig.autoAdjustGlyphWeights = newValue;\n    }\n\n  },\n\n  created() {\n    this.glyphWeightFields = Object.keys(player.celestials.effarig.glyphWeights); // Private data to deal with weight allocation\n\n    this.resetSavedWeights(); // Used to debounce this row disappearing\n\n    this.lastInstability = 0;\n    if (Glyphs.factorsOpen) this.$parent.$emit(\"openrequest\");\n  },\n\n  mounted() {\n    // Effarig unlock sets a flag to open this dropdown\n    if (this.$viewModel.tabs.reality.openGlyphWeights) {\n      this.$viewModel.tabs.reality.openGlyphWeights = false;\n      this.$parent.$emit(\"openrequest\");\n    }\n  },\n\n  destroyed() {\n    // Matches substring since there are states for opening in progress, all of which have \"open\" as a substring\n    Glyphs.factorsOpen = this.$parent.state.name.match(\"OPEN\") !== null;\n  },\n\n  methods: {\n    update() {\n      if (this.glyphWeightFields === undefined || this.$parent.state.name === \"CLOSED\") {\n        return;\n      }\n\n      const glyphFactors = getGlyphLevelInputs();\n      this.perkShopVisible = glyphFactors.perkShop !== 1;\n      this.rowVisible = glyphFactors.rowFactor > 0;\n      this.achievementVisible = glyphFactors.achievementFactor > 0;\n\n      if (glyphFactors.scalePenalty !== 1) {\n        this.penaltyVisible = true;\n        this.lastInstability = Date.now();\n      } else if (this.penaltyVisible) {\n        if (Date.now() - this.lastInstability > 2000) this.penaltyVisible = false;\n      }\n\n      this.rows = this.visibleRows.length;\n\n      if (this.adjustVisible && this.rows < 6) {\n        // Keep UI from getting crammed\n        this.rows = 6;\n      }\n\n      this.factors = glyphFactors;\n      this.shardsGained = Effarig.shardsGained;\n      let same = true;\n      this.glyphWeightFields.forEach(e => {\n        if (this.weights[e] !== player.celestials.effarig.glyphWeights[e]) same = false;\n        this.weights[e] = player.celestials.effarig.glyphWeights[e];\n      });\n\n      if (!same) {\n        // In this case, some other code reset the weights, probably (hopefully)\n        // the achievement reward that automatically adjusts weights.\n        this.resetSavedWeights();\n      }\n\n      this.showAutoAdjustWeights = Achievement(165).isUnlocked;\n      this.isAutoAdjustWeightsOn = player.celestials.effarig.autoAdjustGlyphWeights;\n    },\n\n    rowStyle(factor) {\n      const row = this.visibleRows.findIndex(r => r === factor) + 1; // A bit of a hack, if we can't find the resource then factor is actually a number for the padding div\n\n      if (row === 0) return this.makeRowStyle(factor);\n      return this.makeRowStyle(row);\n    },\n\n    formatFactor(x) {\n      // Not applied to + perks since it's always whole; for factors < 1, the slice makes the\n      // factor be fixed point.\n      return Notations.current.isPainful || x > 1000 ? format(x, 2, 2) : x.toPrecision(5).slice(0, 6);\n    },\n\n    formatLevel(x) {\n      return x > 1000 ? formatInt(Math.floor(x)) : format(x, 2, 4);\n    },\n\n    makeRowStyle(r) {\n      return {\n        \"grid-row\": r,\n        \"-ms-grid-row\": r\n      };\n    },\n\n    resetWeightsButtonClass() {\n      return {\n        \"c-glyph-levels-and-weights__reset-btn\": true,\n        \"c-glyph-levels-and-weights__reset-btn-clickable\": !this.isAutoAdjustWeightsOn\n      };\n    },\n\n    resetWeights() {\n      this.glyphWeightFields.forEach(e => player.celestials.effarig.glyphWeights[e] = 25);\n      this.resetSavedWeights();\n    },\n\n    adjustSlider(which, value) {\n      if (this.weights[which] === value) return;\n\n      if (which !== this.lastAdjusted) {\n        this.resetSavedWeights(); // If we make the saved weight for the current adjustment be 0, there's less math to do later\n\n        this.savedWeights[which] = 0;\n        this.lastAdjusted = which;\n      }\n\n      const oldSum = this.weights.ep + this.weights.repl + this.weights.dt + this.weights.eternities;\n      const oldValue = this.weights[which];\n      const restSum = oldSum - oldValue;\n\n      if (restSum + value > 100) {\n        // We attempt to reduce other weights proportionally. But, we want to keep everything as\n        // integer values. So, a single increment will change just one other weight. In order for\n        // the sum to be 100:   100 == value + restSum * k   --->  k == (100-value)/restSum\n        // Except we use the saved values instead of the current ones:\n        const savedRestSum = this.savedWeights.ep + this.savedWeights.repl + this.savedWeights.dt + this.savedWeights.eternities;\n        const reduceRatio = (100 - value) / savedRestSum;\n        const newWeights = [];\n        this.glyphWeightFields.forEach(x => {\n          if (x !== which) {\n            newWeights.push(this.savedWeights[x] * reduceRatio);\n          }\n        });\n        roundPreservingSum(newWeights);\n        this.glyphWeightFields.forEach(x => {\n          if (x !== which) {\n            player.celestials.effarig.glyphWeights[x] = newWeights.shift();\n          }\n        });\n      }\n\n      player.celestials.effarig.glyphWeights[which] = value;\n    },\n\n    resetSavedWeights() {\n      this.savedWeights = Object.assign({}, player.celestials.effarig.glyphWeights);\n      this.lastAdjusted = null;\n    },\n\n    factorString(source) {\n      const name = this.adjustVisible ? source.name.substring(0, 4) : source.name;\n      return `${format(source.coeff, 2, 4)}Ã—${name}^${format(source.exp, 2, 3)}`;\n    }\n\n  }\n}; // This function takes an array of data (3 elements), which add up to an integer, but\n// may not be whole numbers themselves, and tries to round them so that the sum is the same\n// and so that the difference from the original is small. It does this by finding the one\n// that's closest to an integer, rounding it, and then distributing that error to the others.\n\nfunction roundPreservingSum(data) {\n  for (let idx = 0; idx < data.length; ++idx) {\n    // Find the thing that's not an integer but is closest to an integer:\n    let closest = -1;\n    let closestDistance = 1000;\n    let nonIntegers = 0;\n\n    for (let s = 0; s < data.length; ++s) {\n      const dist = Math.abs(data[s] - Math.round(data[s]));\n\n      if (dist !== 0) {\n        ++nonIntegers;\n\n        if (dist < closestDistance) {\n          closest = s;\n          closestDistance = dist;\n        }\n      }\n    } // Everything is an integer\n\n\n    if (closest === -1) break;\n    let err = data[closest] - Math.round(data[closest]);\n    data[closest] = Math.round(data[closest]);\n\n    if (nonIntegers === 1) {\n      // Shouldn't happen, but a divide by 0 would be bad\n      break;\n    }\n\n    err /= nonIntegers - 1;\n\n    for (let s = 0; s < data.length; ++s) {\n      if (data[s] !== Math.round(data[s])) {\n        // Closest is covered by this\n        data[s] += err;\n      }\n    }\n  }\n}","map":{"version":3,"sources":["GlyphLevelsAndWeights.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport SliderComponent from \"@/components/SliderComponent\";\r\nimport ToggleButton from \"@/components/ToggleButton\";\r\n\r\nexport default {\r\n  name: \"GlyphLevelsAndWeights\",\r\n  components: {\r\n    ToggleButton,\r\n    SliderComponent\r\n  },\r\n  data() {\r\n    return {\r\n      perkShopVisible: false,\r\n      penaltyVisible: false,\r\n      rowVisible: false,\r\n      achievementVisible: false,\r\n      showAutoAdjustWeights: false,\r\n      isAutoAdjustWeightsOn: false,\r\n      factors: getGlyphLevelInputs(),\r\n      shardsGained: 0,\r\n      weights: Object.assign({}, player.celestials.effarig.glyphWeights),\r\n      rows: 3,\r\n    };\r\n  },\r\n  computed: {\r\n    gridStyle() {\r\n      // Column specifications: {factor_name, math_operator, factor_value, weight_adjustment, padding}\r\n      const columns = this.adjustVisible ? \"30% 3% 17% 48% 2%\" : \"80% 5% 15%\";\r\n      return {\r\n        width: \"100%\",\r\n        \"-ms-grid-columns\": columns,\r\n        \"grid-template-columns\": columns,\r\n        \"grid-auto-rows\": \"1fr\",\r\n      };\r\n    },\r\n    adjustOutlineStyle() {\r\n      const rows = 5 + (this.showAutoAdjustWeights ? 1 : 0);\r\n      return `grid-row: 1 / ${rows + 1}; -ms-grid-row: 1; -ms-grid-row-span: ${rows};`;\r\n    },\r\n    formatPerkShop() {\r\n      return formatPercents(this.factors.perkShop - 1, 1);\r\n    },\r\n    sliderProps() {\r\n      return {\r\n        min: 0,\r\n        max: 100,\r\n        interval: 1,\r\n        disabled: this.isAutoAdjustWeightsOn,\r\n        \"dot-width\": \"2.2rem\",\r\n        \"dot-height\": \"1.6rem\",\r\n        width: \"13.5rem\",\r\n        tooltip: false,\r\n        \"value-in-dot\": true,\r\n        \"plus-minus-buttons\": true,\r\n        \"dot-class\": \"c-glyph-levels-and-weights__slider-handle\",\r\n        \"bg-class\": \"c-glyph-levels-and-weights__slider-bg\",\r\n        \"process-class\": \"c-glyph-levels-and-weights__slider-process\"\r\n      };\r\n    },\r\n    totalWeights() {\r\n      return this.weights.ep + this.weights.repl + this.weights.dt + this.weights.eternities;\r\n    },\r\n    // The order that elements gets pushed in this method determines the display order\r\n    visibleRows() {\r\n      const rows = [\"ep\", \"replicanti\", \"dt\"];\r\n      if (this.eternityVisible) rows.push(\"eternities\");\r\n      if (this.perkShopVisible) rows.push(\"perk shop\");\r\n      if (this.shardVisible) rows.push(\"shards\");\r\n      if (this.singularityVisible) rows.push(\"singularities\");\r\n      if (this.penaltyVisible) rows.push(\"instability\");\r\n      if (this.rowVisible) rows.push(\"upgrade rows\");\r\n      if (this.achievementVisible) rows.push(\"achievements\");\r\n      rows.push(\"level\");\r\n      rows.push(\"info\");\r\n      rows.push(\"info2\");\r\n      return rows;\r\n    },\r\n    adjustVisible() {\r\n      return EffarigUnlock.adjuster.isUnlocked;\r\n    },\r\n    eternityVisible() {\r\n      return RealityUpgrade(18).isBought;\r\n    },\r\n    shardVisible() {\r\n      return Ra.unlocks.relicShardGlyphLevelBoost.canBeApplied && this.shardsGained !== 0;\r\n    },\r\n    singularityVisible() {\r\n      return SingularityMilestone.glyphLevelFromSingularities.canBeApplied;\r\n    }\r\n  },\r\n  watch: {\r\n    isAutoAdjustWeightsOn(newValue) {\r\n      player.celestials.effarig.autoAdjustGlyphWeights = newValue;\r\n    }\r\n  },\r\n  created() {\r\n    this.glyphWeightFields = Object.keys(player.celestials.effarig.glyphWeights);\r\n    // Private data to deal with weight allocation\r\n    this.resetSavedWeights();\r\n    // Used to debounce this row disappearing\r\n    this.lastInstability = 0;\r\n    if (Glyphs.factorsOpen) this.$parent.$emit(\"openrequest\");\r\n  },\r\n  mounted() {\r\n    // Effarig unlock sets a flag to open this dropdown\r\n    if (this.$viewModel.tabs.reality.openGlyphWeights) {\r\n      this.$viewModel.tabs.reality.openGlyphWeights = false;\r\n      this.$parent.$emit(\"openrequest\");\r\n    }\r\n  },\r\n  destroyed() {\r\n    // Matches substring since there are states for opening in progress, all of which have \"open\" as a substring\r\n    Glyphs.factorsOpen = this.$parent.state.name.match(\"OPEN\") !== null;\r\n  },\r\n  methods: {\r\n    update() {\r\n      if (this.glyphWeightFields === undefined || this.$parent.state.name === \"CLOSED\") {\r\n        return;\r\n      }\r\n      const glyphFactors = getGlyphLevelInputs();\r\n      this.perkShopVisible = glyphFactors.perkShop !== 1;\r\n      this.rowVisible = glyphFactors.rowFactor > 0;\r\n      this.achievementVisible = glyphFactors.achievementFactor > 0;\r\n      if (glyphFactors.scalePenalty !== 1) {\r\n        this.penaltyVisible = true;\r\n        this.lastInstability = Date.now();\r\n      } else if (this.penaltyVisible) {\r\n        if (Date.now() - this.lastInstability > 2000) this.penaltyVisible = false;\r\n      }\r\n      this.rows = this.visibleRows.length;\r\n      if (this.adjustVisible && this.rows < 6) {\r\n        // Keep UI from getting crammed\r\n        this.rows = 6;\r\n      }\r\n      this.factors = glyphFactors;\r\n      this.shardsGained = Effarig.shardsGained;\r\n      let same = true;\r\n      this.glyphWeightFields.forEach(e => {\r\n        if (this.weights[e] !== player.celestials.effarig.glyphWeights[e]) same = false;\r\n        this.weights[e] = player.celestials.effarig.glyphWeights[e];\r\n      });\r\n      if (!same) {\r\n        // In this case, some other code reset the weights, probably (hopefully)\r\n        // the achievement reward that automatically adjusts weights.\r\n        this.resetSavedWeights();\r\n      }\r\n      this.showAutoAdjustWeights = Achievement(165).isUnlocked;\r\n      this.isAutoAdjustWeightsOn = player.celestials.effarig.autoAdjustGlyphWeights;\r\n    },\r\n    rowStyle(factor) {\r\n      const row = this.visibleRows.findIndex(r => r === factor) + 1;\r\n      // A bit of a hack, if we can't find the resource then factor is actually a number for the padding div\r\n      if (row === 0) return this.makeRowStyle(factor);\r\n      return this.makeRowStyle(row);\r\n    },\r\n    formatFactor(x) {\r\n      // Not applied to + perks since it's always whole; for factors < 1, the slice makes the\r\n      // factor be fixed point.\r\n      return Notations.current.isPainful || x > 1000\r\n        ? format(x, 2, 2)\r\n        : x.toPrecision(5).slice(0, 6);\r\n    },\r\n    formatLevel(x) {\r\n      return x > 1000\r\n        ? formatInt(Math.floor(x))\r\n        : format(x, 2, 4);\r\n    },\r\n    makeRowStyle(r) {\r\n      return {\r\n        \"grid-row\": r,\r\n        \"-ms-grid-row\": r,\r\n      };\r\n    },\r\n    resetWeightsButtonClass() {\r\n      return {\r\n        \"c-glyph-levels-and-weights__reset-btn\": true,\r\n        \"c-glyph-levels-and-weights__reset-btn-clickable\": !this.isAutoAdjustWeightsOn\r\n      };\r\n    },\r\n    resetWeights() {\r\n      this.glyphWeightFields.forEach(e => player.celestials.effarig.glyphWeights[e] = 25);\r\n      this.resetSavedWeights();\r\n    },\r\n    adjustSlider(which, value) {\r\n      if (this.weights[which] === value) return;\r\n      if (which !== this.lastAdjusted) {\r\n        this.resetSavedWeights();\r\n        // If we make the saved weight for the current adjustment be 0, there's less math to do later\r\n        this.savedWeights[which] = 0;\r\n        this.lastAdjusted = which;\r\n      }\r\n      const oldSum = this.weights.ep + this.weights.repl + this.weights.dt + this.weights.eternities;\r\n      const oldValue = this.weights[which];\r\n      const restSum = oldSum - oldValue;\r\n      if (restSum + value > 100) {\r\n        // We attempt to reduce other weights proportionally. But, we want to keep everything as\r\n        // integer values. So, a single increment will change just one other weight. In order for\r\n        // the sum to be 100:   100 == value + restSum * k   --->  k == (100-value)/restSum\r\n        // Except we use the saved values instead of the current ones:\r\n        const savedRestSum =\r\n          this.savedWeights.ep +\r\n          this.savedWeights.repl +\r\n          this.savedWeights.dt +\r\n          this.savedWeights.eternities;\r\n        const reduceRatio = (100 - value) / savedRestSum;\r\n        const newWeights = [];\r\n        this.glyphWeightFields.forEach(x => {\r\n          if (x !== which) {\r\n            newWeights.push(this.savedWeights[x] * reduceRatio);\r\n          }\r\n        });\r\n        roundPreservingSum(newWeights);\r\n        this.glyphWeightFields.forEach(x => {\r\n          if (x !== which) {\r\n            player.celestials.effarig.glyphWeights[x] = newWeights.shift();\r\n          }\r\n        });\r\n      }\r\n      player.celestials.effarig.glyphWeights[which] = value;\r\n    },\r\n    resetSavedWeights() {\r\n      this.savedWeights = Object.assign({}, player.celestials.effarig.glyphWeights);\r\n      this.lastAdjusted = null;\r\n    },\r\n    factorString(source) {\r\n      const name = this.adjustVisible ? source.name.substring(0, 4) : source.name;\r\n      return `${format(source.coeff, 2, 4)}Ã—${name}^${format(source.exp, 2, 3)}`;\r\n    }\r\n  }\r\n};\r\n\r\n// This function takes an array of data (3 elements), which add up to an integer, but\r\n// may not be whole numbers themselves, and tries to round them so that the sum is the same\r\n// and so that the difference from the original is small. It does this by finding the one\r\n// that's closest to an integer, rounding it, and then distributing that error to the others.\r\nfunction roundPreservingSum(data) {\r\n  for (let idx = 0; idx < data.length; ++idx) {\r\n    // Find the thing that's not an integer but is closest to an integer:\r\n    let closest = -1;\r\n    let closestDistance = 1000;\r\n    let nonIntegers = 0;\r\n    for (let s = 0; s < data.length; ++s) {\r\n      const dist = Math.abs(data[s] - Math.round(data[s]));\r\n      if (dist !== 0) {\r\n        ++nonIntegers;\r\n        if (dist < closestDistance) {\r\n          closest = s;\r\n          closestDistance = dist;\r\n        }\r\n      }\r\n    }\r\n    // Everything is an integer\r\n    if (closest === -1) break;\r\n    let err = data[closest] - Math.round(data[closest]);\r\n    data[closest] = Math.round(data[closest]);\r\n    if (nonIntegers === 1) {\r\n      // Shouldn't happen, but a divide by 0 would be bad\r\n      break;\r\n    }\r\n    err /= (nonIntegers - 1);\r\n    for (let s = 0; s < data.length; ++s) {\r\n      if (data[s] !== Math.round(data[s])) {\r\n        // Closest is covered by this\r\n        data[s] += err;\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    ref=\"grid\"\r\n    :style=\"gridStyle\"\r\n    class=\"l-glyph-levels-and-weights c-glyph-levels-and-weights\"\r\n  >\r\n    <!-- Put down a placeholder div to keep the adjuster from getting cramped -->\r\n    <div\r\n      v-if=\"adjustVisible\"\r\n      :style=\"makeRowStyle(6)\"\r\n    />\r\n    <div\r\n      :style=\"rowStyle('ep')\"\r\n      class=\"l-glyph-levels-and-weights__factor\"\r\n    >\r\n      {{ factorString(factors.ep) }}\r\n    </div>\r\n    <div\r\n      :style=\"rowStyle('ep')\"\r\n      class=\"l-glyph-levels-and-weights__factor-val\"\r\n    >\r\n      {{ formatFactor(factors.ep.value) }}\r\n    </div>\r\n    <div\r\n      :style=\"rowStyle('replicanti')\"\r\n      class=\"l-glyph-levels-and-weights__factor\"\r\n    >\r\n      {{ factorString(factors.repl) }}\r\n    </div>\r\n    <div\r\n      :style=\"rowStyle('replicanti')\"\r\n      class=\"l-glyph-levels-and-weights__operator\"\r\n    >\r\n      Ã—\r\n    </div>\r\n    <div\r\n      :style=\"rowStyle('replicanti')\"\r\n      class=\"l-glyph-levels-and-weights__factor-val\"\r\n    >\r\n      {{ formatFactor(factors.repl.value) }}\r\n    </div>\r\n    <div\r\n      :style=\"rowStyle('dt')\"\r\n      class=\"l-glyph-levels-and-weights__factor\"\r\n    >\r\n      {{ factorString(factors.dt) }}\r\n    </div>\r\n    <div\r\n      :style=\"rowStyle('dt')\"\r\n      class=\"l-glyph-levels-and-weights__operator\"\r\n    >\r\n      Ã—\r\n    </div>\r\n    <div\r\n      :style=\"rowStyle('dt')\"\r\n      class=\"l-glyph-levels-and-weights__factor-val\"\r\n    >\r\n      {{ formatFactor(factors.dt.value) }}\r\n    </div>\r\n    <template v-if=\"eternityVisible\">\r\n      <div\r\n        :style=\"rowStyle('eternities')\"\r\n        class=\"l-glyph-levels-and-weights__factor\"\r\n      >\r\n        {{ factorString(factors.eter) }}\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('eternities')\"\r\n        class=\"l-glyph-levels-and-weights__operator\"\r\n      >\r\n        Ã—\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('eternities')\"\r\n        class=\"l-glyph-levels-and-weights__factor-val\"\r\n      >\r\n        {{ formatFactor(factors.eter.value) }}\r\n      </div>\r\n    </template>\r\n    <template v-if=\"perkShopVisible\">\r\n      <div\r\n        :style=\"rowStyle('perk shop')\"\r\n        class=\"l-glyph-levels-and-weights__factor\"\r\n      >\r\n        Teresa's Perk shop\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('perk shop')\"\r\n        class=\"l-glyph-levels-and-weights__operator\"\r\n      >\r\n        +\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('perk shop')\"\r\n        class=\"l-glyph-levels-and-weights__factor-val\"\r\n      >\r\n        {{ formatPerkShop }}\r\n      </div>\r\n    </template>\r\n    <template v-if=\"shardVisible\">\r\n      <div\r\n        :style=\"rowStyle('shards')\"\r\n        class=\"l-glyph-levels-and-weights__factor\"\r\n      >\r\n        {{ formatInt(100) }}Ã—Shards{{ formatPow(2) }}\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('shards')\"\r\n        class=\"l-glyph-levels-and-weights__operator\"\r\n      >\r\n        +\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('shards')\"\r\n        class=\"l-glyph-levels-and-weights__factor-val\"\r\n      >\r\n        {{ formatFactor(factors.shardFactor) }}\r\n      </div>\r\n    </template>\r\n    <template v-if=\"singularityVisible\">\r\n      <div\r\n        :style=\"rowStyle('singularities')\"\r\n        class=\"l-glyph-levels-and-weights__factor\"\r\n      >\r\n        Singularities\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('singularities')\"\r\n        class=\"l-glyph-levels-and-weights__operator\"\r\n      >\r\n        Ã—\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('singularities')\"\r\n        class=\"l-glyph-levels-and-weights__factor-val\"\r\n      >\r\n        {{ formatFactor(factors.singularityEffect) }}\r\n      </div>\r\n    </template>\r\n    <template v-if=\"penaltyVisible\">\r\n      <div\r\n        :style=\"rowStyle('instability')\"\r\n        class=\"l-glyph-levels-and-weights__factor\"\r\n      >\r\n        Instability\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('instability')\"\r\n        class=\"l-glyph-levels-and-weights__operator\"\r\n      >\r\n        /\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('instability')\"\r\n        class=\"l-glyph-levels-and-weights__factor-val\"\r\n      >\r\n        {{ formatFactor(factors.scalePenalty) }}\r\n      </div>\r\n    </template>\r\n    <template v-if=\"rowVisible\">\r\n      <div\r\n        :style=\"rowStyle('upgrade rows')\"\r\n        class=\"l-glyph-levels-and-weights__factor\"\r\n      >\r\n        Upgrade Rows\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('upgrade rows')\"\r\n        class=\"l-glyph-levels-and-weights__operator\"\r\n      >\r\n        +\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('upgrade rows')\"\r\n        class=\"l-glyph-levels-and-weights__factor-val\"\r\n      >\r\n        {{ formatInt(factors.rowFactor) }}\r\n      </div>\r\n    </template>\r\n    <template v-if=\"achievementVisible\">\r\n      <div\r\n        :style=\"rowStyle('achievements')\"\r\n        class=\"l-glyph-levels-and-weights__factor\"\r\n      >\r\n        Achievements\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('achievements')\"\r\n        class=\"l-glyph-levels-and-weights__operator\"\r\n      >\r\n        +\r\n      </div>\r\n      <div\r\n        :style=\"rowStyle('achievements')\"\r\n        class=\"l-glyph-levels-and-weights__factor-val\"\r\n      >\r\n        {{ formatInt(factors.achievementFactor) }}\r\n      </div>\r\n    </template>\r\n    <div\r\n      :style=\"rowStyle('level')\"\r\n      class=\"l-glyph-levels-and-weights__factor\"\r\n    >\r\n      Final Level\r\n    </div>\r\n    <div\r\n      :style=\"rowStyle('level')\"\r\n      class=\"l-glyph-levels-and-weights__factor-val\"\r\n    >\r\n      {{ formatLevel(factors.actualLevel) }}\r\n    </div>\r\n    <div\r\n      :style=\"rowStyle('info')\"\r\n      class=\"l-glyph-levels-and-weights__factor l-glyph-level-and-weights-note\"\r\n    >\r\n      Note: All resources here are log10 of their actual values.\r\n    </div>\r\n    <div\r\n      :style=\"rowStyle('info2')\"\r\n      class=\"l-glyph-levels-and-weights__factor l-glyph-level-and-weights-note\"\r\n    >\r\n      EP, Replicanti, and DT use their highest values this Reality.\r\n    </div>\r\n    <template v-if=\"adjustVisible\">\r\n      <div\r\n        :style=\"adjustOutlineStyle\"\r\n        class=\"l-glyph-levels-and-weights__adjust-outline\"\r\n      />\r\n      <div class=\"l-glyph-levels-and-weights__adjust-label\">\r\n        Adjust weights\r\n        <div class=\"l-glyph-levels-and-weights__reset-btn-outer\">\r\n          <div\r\n            :class=\"resetWeightsButtonClass()\"\r\n            @click=\"resetWeights\"\r\n          >\r\n            Reset\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"l-glyph-levels-and-weights__adjust-auto\">\r\n        <ToggleButton\r\n          v-if=\"showAutoAdjustWeights\"\r\n          v-model=\"isAutoAdjustWeightsOn\"\r\n          class=\"c-glyph-levels-and-weights__auto-btn\"\r\n          label=\"Auto adjustment:\"\r\n        />\r\n      </div>\r\n      <div\r\n        class=\"l-glyph-levels-and-weights__slider\"\r\n        :style=\"rowStyle('ep')\"\r\n      >\r\n        <SliderComponent\r\n          v-bind=\"sliderProps\"\r\n          :value=\"weights.ep\"\r\n          :width=\"'100%'\"\r\n          @input=\"adjustSlider('ep', $event)\"\r\n        />\r\n      </div>\r\n      <div\r\n        class=\"l-glyph-levels-and-weights__slider\"\r\n        :style=\"rowStyle('replicanti')\"\r\n      >\r\n        <SliderComponent\r\n          v-bind=\"sliderProps\"\r\n          :value=\"weights.repl\"\r\n          :width=\"'100%'\"\r\n          @input=\"adjustSlider('repl', $event)\"\r\n        />\r\n      </div>\r\n      <div\r\n        class=\"l-glyph-levels-and-weights__slider\"\r\n        :style=\"rowStyle('dt')\"\r\n      >\r\n        <SliderComponent\r\n          v-bind=\"sliderProps\"\r\n          :value=\"weights.dt\"\r\n          :width=\"'100%'\"\r\n          @input=\"adjustSlider('dt', $event)\"\r\n        />\r\n      </div>\r\n      <div\r\n        class=\"l-glyph-levels-and-weights__slider\"\r\n        :style=\"rowStyle('eternities')\"\r\n      >\r\n        <SliderComponent\r\n          v-bind=\"sliderProps\"\r\n          :value=\"weights.eternities\"\r\n          :width=\"'100%'\"\r\n          @input=\"adjustSlider('eternities', $event)\"\r\n        />\r\n      </div>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.l-glyph-level-and-weights-note {\r\n  grid-column: 1 / 5;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/glyphs"},"metadata":{},"sourceType":"module"}