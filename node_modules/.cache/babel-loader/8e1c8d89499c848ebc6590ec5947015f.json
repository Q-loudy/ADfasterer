{"ast":null,"code":"export default {\n  name: \"AutomatorPointsList\",\n\n  data() {\n    return {\n      totalPoints: 0\n    };\n  },\n\n  computed: {\n    pointsForAutomator: () => AutomatorPoints.pointsForAutomator,\n    fromPerks: () => AutomatorPoints.pointsFromPerks,\n    fromUpgrades: () => AutomatorPoints.pointsFromUpgrades,\n    perkSources: () => AutomatorPoints.perks,\n    upgradeSources: () => AutomatorPoints.upgrades,\n    otherSources: () => GameDatabase.reality.automator.otherAutomatorPoints,\n    automatorInterval: () => AutomatorBackend.currentInterval\n  },\n  methods: {\n    update() {\n      this.totalPoints = AutomatorPoints.totalPoints;\n    },\n\n    textColor(hasBought) {\n      return {\n        color: hasBought ? \"var(--color-good)\" : \"var(--color-bad)\"\n      };\n    }\n\n  }\n};","map":{"version":3,"sources":["AutomatorPointsList.vue"],"names":[],"mappings":"AACA,eAAA;AACA,EAAA,IAAA,EAAA,qBADA;;AAEA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,WAAA,EAAA;AADA,KAAA;AAGA,GANA;;AAOA,EAAA,QAAA,EAAA;AACA,IAAA,kBAAA,EAAA,MAAA,eAAA,CAAA,kBADA;AAEA,IAAA,SAAA,EAAA,MAAA,eAAA,CAAA,eAFA;AAGA,IAAA,YAAA,EAAA,MAAA,eAAA,CAAA,kBAHA;AAIA,IAAA,WAAA,EAAA,MAAA,eAAA,CAAA,KAJA;AAKA,IAAA,cAAA,EAAA,MAAA,eAAA,CAAA,QALA;AAMA,IAAA,YAAA,EAAA,MAAA,YAAA,CAAA,OAAA,CAAA,SAAA,CAAA,oBANA;AAOA,IAAA,iBAAA,EAAA,MAAA,gBAAA,CAAA;AAPA,GAPA;AAgBA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,WAAA,WAAA,GAAA,eAAA,CAAA,WAAA;AACA,KAHA;;AAIA,IAAA,SAAA,CAAA,SAAA,EAAA;AACA,aAAA;AACA,QAAA,KAAA,EAAA,SAAA,GAAA,mBAAA,GAAA;AADA,OAAA;AAGA;;AARA;AAhBA,CAAA","sourcesContent":["<script>\r\nexport default {\r\n  name: \"AutomatorPointsList\",\r\n  data() {\r\n    return {\r\n      totalPoints: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    pointsForAutomator: () => AutomatorPoints.pointsForAutomator,\r\n    fromPerks: () => AutomatorPoints.pointsFromPerks,\r\n    fromUpgrades: () => AutomatorPoints.pointsFromUpgrades,\r\n    perkSources: () => AutomatorPoints.perks,\r\n    upgradeSources: () => AutomatorPoints.upgrades,\r\n    otherSources: () => GameDatabase.reality.automator.otherAutomatorPoints,\r\n    automatorInterval: () => AutomatorBackend.currentInterval,\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.totalPoints = AutomatorPoints.totalPoints;\r\n    },\r\n    textColor(hasBought) {\r\n      return {\r\n        color: hasBought ? \"var(--color-good)\" : \"var(--color-bad)\"\r\n      };\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <div class=\"l-header\">\r\n      You have {{ formatInt(totalPoints) }} / {{ formatInt(pointsForAutomator) }}\r\n      Automator Points towards unlocking the Automator.\r\n      <br>\r\n      You gain Automator Points from the following sources:\r\n    </div>\r\n    <div class=\"l-automator-points-list-container\">\r\n      <div class=\"l-automator-points-list-side-col c-automator-points-list-col\">\r\n        <span class=\"c-automator-points-list-symbol fas fa-project-diagram\" />\r\n        <span class=\"c-automator-points-list-ap--large\">{{ formatInt(fromPerks) }} AP</span>\r\n        <span class=\"l-large-text\">\r\n          Perks\r\n        </span>\r\n        <div\r\n          v-for=\"perk in perkSources\"\r\n          :key=\"perk.id\"\r\n          class=\"c-automator-points-list-single-entry\"\r\n          :style=\"textColor(perk.isBought)\"\r\n        >\r\n          <span class=\"c-automator-points-list-perk-label\">{{ perk.label }}</span>\r\n          - {{ perk.shortDescription }}\r\n          <span class=\"c-automator-points-list-ap\">{{ formatInt(perk.automatorPoints) }} AP</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"l-automator-points-list-center-col\">\r\n        <div\r\n          v-for=\"source in otherSources\"\r\n          :key=\"source.name\"\r\n          class=\"c-automator-points-list-cell\"\r\n        >\r\n          <span class=\"c-automator-points-list-ap--large\">{{ formatInt(source.automatorPoints()) }} AP</span>\r\n          <span class=\"l-large-text\">\r\n            {{ source.name }}\r\n          </span>\r\n          <br>\r\n          <br>\r\n          <span :style=\"textColor(source.automatorPoints() > 0)\">\r\n            {{ source.shortDescription() }}\r\n          </span>\r\n          <span\r\n            class=\"c-automator-points-list-symbol\"\r\n            v-html=\"source.symbol\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div class=\"l-automator-points-list-side-col c-automator-points-list-col\">\r\n        <span class=\"c-automator-points-list-symbol fas fa-arrow-up\" />\r\n        <span class=\"c-automator-points-list-ap--large\">{{ formatInt(fromUpgrades) }} AP</span>\r\n        <span class=\"l-large-text\">\r\n          Reality Upgrades\r\n        </span>\r\n        <div\r\n          v-for=\"upgrade in upgradeSources\"\r\n          :key=\"upgrade.id\"\r\n          class=\"c-automator-points-list-single-entry l-upgrade-list\"\r\n          :style=\"textColor(upgrade.isBought)\"\r\n        >\r\n          <b>{{ upgrade.name }}</b>\r\n          <span class=\"c-automator-points-list-ap\">{{ formatInt(upgrade.automatorPoints) }} AP</span>\r\n          <br>\r\n          {{ upgrade.shortDescription }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <br>\r\n    <div>\r\n      The Automator allows (amongst other things) buying full Time Study Trees, entering Eternity Challenges,\r\n      or starting Dilation.\r\n      <br>\r\n      It can also force prestige events on certain conditions independently from your Autobuyers or modify\r\n      some of your Autobuyer settings.\r\n      <br>\r\n      The speed of the Automator gradually increases as you get more Realities. If unlocked right now,\r\n      it would run {{ format(1000 / automatorInterval, 2, 2) }} commands per real-time second.\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.l-automator-points-list-container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  margin-top: 1rem;\r\n  -webkit-user-select: none;\r\n  user-select: none;\r\n}\r\n\r\n.c-automator-points-list-col {\r\n  position: relative;\r\n  text-align: left;\r\n  border: var(--var-border-width, 0.15rem) solid var(--color-text);\r\n  border-radius: var(--var-border-radius, 0.5rem);\r\n  padding: 1rem;\r\n}\r\n\r\n.l-automator-points-list-side-col {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 35%;\r\n  justify-content: space-between;\r\n}\r\n\r\n.l-automator-points-list-center-col {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 25%;\r\n  justify-content: space-between;\r\n}\r\n\r\n.c-automator-points-list-cell {\r\n  overflow: hidden;\r\n  width: 100%;\r\n  height: 48%;\r\n  position: relative;\r\n  text-align: left;\r\n  border: var(--var-border-width, 0.15rem) solid var(--color-text);\r\n  border-radius: var(--var-border-radius, 0.5rem);\r\n  padding: 1rem;\r\n}\r\n\r\n.c-automator-points-list-symbol {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 15rem;\r\n  opacity: 0.2;\r\n  text-shadow: 0 0 2rem;\r\n  pointer-events: none;\r\n}\r\n\r\n.c-automator-points-list-perk-label {\r\n  display: inline-block;\r\n  width: 3rem;\r\n  max-width: 3rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.c-automator-points-list-single-entry {\r\n  position: relative;\r\n}\r\n\r\n.c-automator-points-list-ap {\r\n  position: absolute;\r\n  right: 0;\r\n  opacity: 0.8;\r\n}\r\n\r\n.c-automator-points-list-ap--large {\r\n  position: absolute;\r\n  right: 1rem;\r\n  font-size: 1.8rem;\r\n  opacity: 0.6;\r\n}\r\n\r\n.l-header {\r\n  font-size: 2rem;\r\n}\r\n\r\n.l-large-text {\r\n  font-size: 1.8rem;\r\n}\r\n\r\n.l-upgrade-list {\r\n  font-size: 1.3rem;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/automator"},"metadata":{},"sourceType":"module"}