{"ast":null,"code":"import { BlackHoleAnimation } from \"./black-hole-animation\";\nimport BlackHoleChargingSliders from \"./BlackHoleChargingSliders\";\nimport BlackHoleStateRow from \"./BlackHoleStateRow\";\nimport BlackHoleUnlockButton from \"./BlackHoleUnlockButton\";\nimport BlackHoleUpgradeRow from \"./BlackHoleUpgradeRow\";\nexport default {\n  name: \"BlackHoleTab\",\n  components: {\n    BlackHoleUpgradeRow,\n    BlackHoleStateRow,\n    BlackHoleChargingSliders,\n    BlackHoleUnlockButton\n  },\n\n  data() {\n    return {\n      isDoomed: false,\n      isUnlocked: false,\n      isPaused: false,\n      isEnslaved: false,\n      pauseMode: 0,\n      detailedBH2: \"\",\n      isPermanent: false,\n      hasBH2: false,\n      blackHoleUptime: [],\n      stateChange: \"\"\n    };\n  },\n\n  computed: {\n    blackHoles: () => BlackHoles.list,\n\n    pauseModeString() {\n      switch (this.pauseMode) {\n        case BLACK_HOLE_PAUSE_MODE.NO_PAUSE:\n          return \"Do not pause\";\n\n        case BLACK_HOLE_PAUSE_MODE.PAUSE_BEFORE_BH1:\n          return this.hasBH2 ? \"Before BH1\" : \"Before activation\";\n\n        case BLACK_HOLE_PAUSE_MODE.PAUSE_BEFORE_BH2:\n          return \"Before BH2\";\n\n        default:\n          throw new Error(\"Unrecognized BH offline pausing mode\");\n      }\n    }\n\n  },\n\n  mounted() {\n    this.startAnimation();\n  },\n\n  destroyed() {\n    if (this.animation) this.animation.unmount();\n  },\n\n  methods: {\n    update() {\n      this.isDoomed = Pelle.isDoomed;\n      this.isUnlocked = BlackHoles.areUnlocked;\n      this.isPaused = BlackHoles.arePaused; // If stop running enslaved, re-mount the black hole animation as it reappears\n\n      if (this.isEnslaved && !Enslaved.isRunning) {\n        if (this.animation) this.animation.unmount();\n        this.startAnimation();\n      }\n\n      this.isEnslaved = Enslaved.isRunning;\n      this.isPermanent = BlackHoles.arePermanent;\n      this.pauseMode = player.blackHoleAutoPauseMode;\n      this.hasBH2 = BlackHole(2).isUnlocked;\n      this.blackHoleUptime = [BlackHole(1).duration / BlackHole(1).cycleLength, BlackHole(2).duration / BlackHole(2).cycleLength];\n      this.detailedBH2 = this.bh2Status();\n      if (player.blackHoleNegative < 1) this.stateChange = this.isPaused ? \"Uninvert\" : \"Invert\";else this.stateChange = this.isPaused ? \"Unpause\" : \"Pause\";\n    },\n\n    bh2Status() {\n      const bh1Remaining = BlackHole(1).timeWithPreviousActiveToNextStateChange;\n      const bh2Remaining = BlackHole(2).timeWithPreviousActiveToNextStateChange; // Both BH active\n\n      if (BlackHole(1).isActive && BlackHole(2).isActive) {\n        const _bh2Duration = Math.min(bh1Remaining, bh2Remaining);\n\n        return `Black Hole 2 is active for the next ${TimeSpan.fromSeconds(_bh2Duration).toStringShort()}!`;\n      } // BH1 active, BH2 will trigger before BH1 runs out\n\n\n      if (BlackHole(1).isActive && bh2Remaining < bh1Remaining) {\n        const _bh2Duration2 = Math.min(bh1Remaining - bh2Remaining, BlackHole(2).duration);\n\n        return `Black Hole 2 will activate before Black Hole 1 deactivates,\n          for ${TimeSpan.fromSeconds(_bh2Duration2).toStringShort()}`;\n      } // BH2 won't start yet next cycle\n\n\n      if (BlackHole(1).isActive || bh2Remaining > BlackHole(1).duration) {\n        const cycleCount = BlackHole(1).isActive ? Math.floor((bh2Remaining - bh1Remaining) / BlackHole(1).duration) + 1 : Math.floor(bh2Remaining / BlackHole(1).duration);\n        return `Black Hole 2 will activate after ${quantifyInt(\"more active cycle\", cycleCount)} of Black Hole 1.`;\n      } // BH1 inactive, BH2 ready to go when BH1 activates\n\n\n      if (BlackHole(2).isCharged) {\n        const _bh2Duration3 = Math.min(BlackHole(1).duration, bh2Remaining);\n\n        return `Black Hole 2 will activate with Black Hole 1,\n          for ${TimeSpan.fromSeconds(_bh2Duration3).toStringShort()}.`;\n      } // BH1 inactive, BH2 starts at some point after BH1 activates\n\n\n      const bh2Duration = Math.min(BlackHole(1).duration - bh2Remaining, BlackHole(2).duration);\n      return `Black Hole 2 will activate ${TimeSpan.fromSeconds(bh2Remaining).toStringShort()} after\n        Black Hole 1, for ${TimeSpan.fromSeconds(bh2Duration).toStringShort()}.`;\n    },\n\n    togglePause() {\n      BlackHoles.togglePause();\n\n      if (BlackHoles.arePaused) {\n        player.celestials.enslaved.isAutoReleasing = false;\n      }\n\n      this.update();\n    },\n\n    changePauseMode() {\n      let steps;\n\n      switch (this.pauseMode) {\n        case BLACK_HOLE_PAUSE_MODE.NO_PAUSE:\n          // Note: We don't need to check for permanent BH2 because the button disappears at that point\n          steps = BlackHole(1).isPermanent ? 2 : 1;\n          break;\n\n        case BLACK_HOLE_PAUSE_MODE.PAUSE_BEFORE_BH1:\n          steps = this.hasBH2 ? 1 : 2;\n          break;\n\n        case BLACK_HOLE_PAUSE_MODE.PAUSE_BEFORE_BH2:\n          steps = 1;\n          break;\n\n        default:\n          throw new Error(\"Unrecognized BH offline pausing mode\");\n      }\n\n      player.blackHoleAutoPauseMode = (this.pauseMode + steps) % Object.values(BLACK_HOLE_PAUSE_MODE).length;\n    },\n\n    startAnimation() {\n      setTimeout(() => {\n        if (this.$refs.canvas) {\n          this.animation = new BlackHoleAnimation(this.$refs.canvas.getContext(\"2d\"));\n        }\n      }, 1);\n    },\n\n    gridStyle() {\n      return this.isPermanent ? \"l-black-hole-upgrade-permanent\" : \"l-black-hole-upgrade-grid\";\n    }\n\n  }\n};","map":{"version":3,"sources":["BlackHoleTab.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport { BlackHoleAnimation } from \"./black-hole-animation\";\r\nimport BlackHoleChargingSliders from \"./BlackHoleChargingSliders\";\r\nimport BlackHoleStateRow from \"./BlackHoleStateRow\";\r\nimport BlackHoleUnlockButton from \"./BlackHoleUnlockButton\";\r\nimport BlackHoleUpgradeRow from \"./BlackHoleUpgradeRow\";\r\n\r\nexport default {\r\n  name: \"BlackHoleTab\",\r\n  components: {\r\n    BlackHoleUpgradeRow,\r\n    BlackHoleStateRow,\r\n    BlackHoleChargingSliders,\r\n    BlackHoleUnlockButton\r\n  },\r\n  data() {\r\n    return {\r\n      isDoomed: false,\r\n      isUnlocked: false,\r\n      isPaused: false,\r\n      isEnslaved: false,\r\n      pauseMode: 0,\r\n      detailedBH2: \"\",\r\n      isPermanent: false,\r\n      hasBH2: false,\r\n      blackHoleUptime: [],\r\n      stateChange: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    blackHoles: () => BlackHoles.list,\r\n    pauseModeString() {\r\n      switch (this.pauseMode) {\r\n        case BLACK_HOLE_PAUSE_MODE.NO_PAUSE:\r\n          return \"Do not pause\";\r\n        case BLACK_HOLE_PAUSE_MODE.PAUSE_BEFORE_BH1:\r\n          return this.hasBH2 ? \"Before BH1\" : \"Before activation\";\r\n        case BLACK_HOLE_PAUSE_MODE.PAUSE_BEFORE_BH2:\r\n          return \"Before BH2\";\r\n        default:\r\n          throw new Error(\"Unrecognized BH offline pausing mode\");\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.startAnimation();\r\n  },\r\n  destroyed() {\r\n    if (this.animation) this.animation.unmount();\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.isDoomed = Pelle.isDoomed;\r\n      this.isUnlocked = BlackHoles.areUnlocked;\r\n      this.isPaused = BlackHoles.arePaused;\r\n      // If stop running enslaved, re-mount the black hole animation as it reappears\r\n      if (this.isEnslaved && !Enslaved.isRunning) {\r\n        if (this.animation) this.animation.unmount();\r\n        this.startAnimation();\r\n      }\r\n      this.isEnslaved = Enslaved.isRunning;\r\n      this.isPermanent = BlackHoles.arePermanent;\r\n      this.pauseMode = player.blackHoleAutoPauseMode;\r\n      this.hasBH2 = BlackHole(2).isUnlocked;\r\n      this.blackHoleUptime = [BlackHole(1).duration / BlackHole(1).cycleLength,\r\n        BlackHole(2).duration / BlackHole(2).cycleLength];\r\n      this.detailedBH2 = this.bh2Status();\r\n\r\n      if (player.blackHoleNegative < 1) this.stateChange = this.isPaused ? \"Uninvert\" : \"Invert\";\r\n      else this.stateChange = this.isPaused ? \"Unpause\" : \"Pause\";\r\n    },\r\n    bh2Status() {\r\n      const bh1Remaining = BlackHole(1).timeWithPreviousActiveToNextStateChange;\r\n      const bh2Remaining = BlackHole(2).timeWithPreviousActiveToNextStateChange;\r\n\r\n      // Both BH active\r\n      if (BlackHole(1).isActive && BlackHole(2).isActive) {\r\n        const bh2Duration = Math.min(bh1Remaining, bh2Remaining);\r\n        return `Black Hole 2 is active for the next ${TimeSpan.fromSeconds(bh2Duration).toStringShort()}!`;\r\n      }\r\n\r\n      // BH1 active, BH2 will trigger before BH1 runs out\r\n      if (BlackHole(1).isActive && (bh2Remaining < bh1Remaining)) {\r\n        const bh2Duration = Math.min(bh1Remaining - bh2Remaining, BlackHole(2).duration);\r\n        return `Black Hole 2 will activate before Black Hole 1 deactivates,\r\n          for ${TimeSpan.fromSeconds(bh2Duration).toStringShort()}`;\r\n      }\r\n\r\n      // BH2 won't start yet next cycle\r\n      if (BlackHole(1).isActive || (bh2Remaining > BlackHole(1).duration)) {\r\n        const cycleCount = BlackHole(1).isActive\r\n          ? Math.floor((bh2Remaining - bh1Remaining) / BlackHole(1).duration) + 1\r\n          : Math.floor(bh2Remaining / BlackHole(1).duration);\r\n        return `Black Hole 2 will activate after ${quantifyInt(\"more active cycle\", cycleCount)} of Black Hole 1.`;\r\n      }\r\n\r\n      // BH1 inactive, BH2 ready to go when BH1 activates\r\n      if (BlackHole(2).isCharged) {\r\n        const bh2Duration = Math.min(BlackHole(1).duration, bh2Remaining);\r\n        return `Black Hole 2 will activate with Black Hole 1,\r\n          for ${TimeSpan.fromSeconds(bh2Duration).toStringShort()}.`;\r\n      }\r\n\r\n      // BH1 inactive, BH2 starts at some point after BH1 activates\r\n      const bh2Duration = Math.min(BlackHole(1).duration - bh2Remaining, BlackHole(2).duration);\r\n      return `Black Hole 2 will activate ${TimeSpan.fromSeconds(bh2Remaining).toStringShort()} after\r\n        Black Hole 1, for ${TimeSpan.fromSeconds(bh2Duration).toStringShort()}.`;\r\n    },\r\n    togglePause() {\r\n      BlackHoles.togglePause();\r\n      if (BlackHoles.arePaused) {\r\n        player.celestials.enslaved.isAutoReleasing = false;\r\n      }\r\n      this.update();\r\n    },\r\n    changePauseMode() {\r\n      let steps;\r\n      switch (this.pauseMode) {\r\n        case BLACK_HOLE_PAUSE_MODE.NO_PAUSE:\r\n          // Note: We don't need to check for permanent BH2 because the button disappears at that point\r\n          steps = BlackHole(1).isPermanent ? 2 : 1;\r\n          break;\r\n        case BLACK_HOLE_PAUSE_MODE.PAUSE_BEFORE_BH1:\r\n          steps = this.hasBH2 ? 1 : 2;\r\n          break;\r\n        case BLACK_HOLE_PAUSE_MODE.PAUSE_BEFORE_BH2:\r\n          steps = 1;\r\n          break;\r\n        default:\r\n          throw new Error(\"Unrecognized BH offline pausing mode\");\r\n      }\r\n      player.blackHoleAutoPauseMode = (this.pauseMode + steps) % Object.values(BLACK_HOLE_PAUSE_MODE).length;\r\n    },\r\n    startAnimation() {\r\n      setTimeout(() => {\r\n        if (this.$refs.canvas) {\r\n          this.animation = new BlackHoleAnimation(this.$refs.canvas.getContext(\"2d\"));\r\n        }\r\n      }, 1);\r\n    },\r\n    gridStyle() {\r\n      return this.isPermanent ? \"l-black-hole-upgrade-permanent\" : \"l-black-hole-upgrade-grid\";\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"l-black-hole-tab\">\r\n    <div\r\n      v-if=\"isEnslaved || isDoomed\"\r\n      class=\"c-black-hole-disabled-description\"\r\n    >\r\n      <i v-if=\"isEnslaved\">\r\n        You must... seek... other methods...\r\n        <br>\r\n      </i>\r\n      The physics of this Reality do not allow the existence of Black Holes.\r\n    </div>\r\n    <div\r\n      v-else-if=\"!isUnlocked\"\r\n      class=\"l-pre-unlock-text\"\r\n    >\r\n      <BlackHoleUnlockButton @blackholeunlock=\"startAnimation\" />\r\n      The Black Hole makes the entire game run significantly faster for a short period of time.\r\n      <br>\r\n      Starts at {{ formatX(180) }} faster for {{ formatInt(10) }} seconds, once per hour.\r\n      <br>\r\n      <br>\r\n      Unlocking the Black Hole also gives {{ formatInt(10) }} Automator Points.\r\n    </div>\r\n    <template v-else>\r\n      <div class=\"c-subtab-option-container\">\r\n        <button\r\n          class=\"o-primary-btn o-primary-btn--subtab-option\"\r\n          @click=\"togglePause\"\r\n        >\r\n          {{ stateChange }} Black Hole\r\n        </button>\r\n        <button\r\n          v-if=\"!isPermanent\"\r\n          class=\"o-primary-btn o-primary-btn--subtab-option l-auto-pause-button\"\r\n          @click=\"changePauseMode\"\r\n        >\r\n          Auto-pause: {{ pauseModeString }}\r\n        </button>\r\n      </div>\r\n      <canvas\r\n        ref=\"canvas\"\r\n        class=\"c-black-hole-canvas\"\r\n        width=\"400\"\r\n        height=\"400\"\r\n      />\r\n      <div class=\"l-black-hole-upgrade-grid\">\r\n        <BlackHoleStateRow\r\n          v-for=\"(blackHole, i) in blackHoles\"\r\n          :key=\"'state' + i\"\r\n          :black-hole=\"blackHole\"\r\n        />\r\n        <span v-if=\"hasBH2 && !isPermanent\">\r\n          <b>{{ detailedBH2 }}</b>\r\n          <br>\r\n          The timer for Black Hole 2 only advances while Black Hole 1 is active.\r\n          <br>\r\n          Upgrades affect the internal timer; the header shows real time until next activation.\r\n        </span>\r\n        <br>\r\n        <div v-if=\"!isPermanent\">\r\n          Black holes become permanently active when they are active for more than {{ formatPercents(0.9999, 2) }}\r\n          of the time.\r\n          <br>\r\n          Active time percent: {{ formatPercents(blackHoleUptime[0], 3) }}\r\n          <span v-if=\"hasBH2\">and {{ formatPercents(blackHoleUptime[1], 3) }}</span>\r\n        </div>\r\n        <BlackHoleChargingSliders class=\"l-enslaved-shop-container\" />\r\n      </div>\r\n      <div :class=\"gridStyle()\">\r\n        <BlackHoleUpgradeRow\r\n          v-for=\"(blackHole, i) in blackHoles\"\r\n          :key=\"'upgrades' + i\"\r\n          :black-hole=\"blackHole\"\r\n        />\r\n      </div>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.l-auto-pause-button {\r\n  width: 30rem;\r\n}\r\n\r\n.l-pre-unlock-text {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.c-black-hole-disabled-description {\r\n  font-size: 2.5rem;\r\n  line-height: 1.5;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/tabs/black-hole"},"metadata":{},"sourceType":"module"}