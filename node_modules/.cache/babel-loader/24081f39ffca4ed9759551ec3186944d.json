{"ast":null,"code":"import ModalWrapperChoice from \"@/components/modals/ModalWrapperChoice\";\nexport default {\n  name: \"AntimatterGalaxyModal\",\n  components: {\n    ModalWrapperChoice\n  },\n  props: {\n    bulk: {\n      type: Boolean,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      newGalaxies: 0,\n      keepAntimatter: false,\n      perkANRBought: false,\n      keepDimBoost: false\n    };\n  },\n\n  computed: {\n    topLabel() {\n      if (this.bulk) return `You are about to purchase ${quantifyInt(\"Antimatter Galaxy\", this.newGalaxies)}`;\n      return `You are about to purchase an Antimatter Galaxy`;\n    },\n\n    message() {\n      const resetResouces = [];\n      if (Pelle.isDoomed) resetResouces.push(\"Antimatter\", \"Antimatter Dimensions\", \"Tickspeed\");\n      if (!this.perkANRBought) resetResouces.push(\"Antimatter Dimensions\", \"Tickspeed\");\n      if (!this.keepDimBoost) resetResouces.push(\"Dimension Boosts\");\n      if (!this.keepAntimatter && !this.perkANRBought) resetResouces.push(\"Antimatter\");\n      const resetList = makeEnumeration(resetResouces);\n      let tickspeedFixed = \"\";\n\n      if (InfinityChallenge(3).isRunning) {\n        tickspeedFixed = `Infinity Challenge ${InfinityChallenge(3).id}`;\n      } else if (Ra.isRunning) {\n        tickspeedFixed = `${Ra.displayName}'s Reality`;\n      }\n\n      const tickspeedInfo = tickspeedFixed === \"\" ? \"you will receive a small boost to Tickspeed Upgrades.\" : `you will not receive a boost to Tickspeed Upgrades, because you are in ${tickspeedFixed}.`;\n      const message = resetList === \"\" ? `This will reset nothing, and ${tickspeedInfo}` : `This will reset your ${resetList}. However, ${tickspeedInfo}`;\n      if (this.bulk) return `Are you sure you want to purchase\n      ${quantifyInt(\"Antimatter Galaxy\", this.newGalaxies)}? ${message}`;\n      return `Are you sure you want to purchase an Antimatter Galaxy? ${message}`;\n    }\n\n  },\n\n  created() {\n    this.on$(GAME_EVENT.DIMBOOST_AFTER, () => BreakInfinityUpgrade.autobuyMaxDimboosts.isBought ? undefined : this.emitClose());\n  },\n\n  methods: {\n    update() {\n      if (this.bulk) {\n        const req = Galaxy.requirement;\n        const dim = AntimatterDimension(req.tier);\n        const bulk = bulkBuyBinarySearch(dim.totalAmount, {\n          costFunction: x => Galaxy.requirementAt(x).amount,\n          cumulative: false\n        }, player.galaxies);\n\n        if (bulk) {\n          this.newGalaxies = Galaxy.buyableGalaxies(Math.round(dim.totalAmount.toNumber())) - player.galaxies;\n        }\n      }\n\n      this.keepAntimatter = Achievement(111).isUnlocked;\n      this.perkANRBought = Perk.antimatterNoReset.canBeApplied;\n      this.keepDimBoost = Achievement(143).isUnlocked && !Pelle.isDoomed || PelleUpgrade.galaxyNoResetDimboost.canBeApplied;\n    },\n\n    handleYesClick() {\n      requestGalaxyReset(this.bulk);\n      EventHub.ui.offAll(this);\n    }\n\n  }\n};","map":{"version":3,"sources":["AntimatterGalaxyModal.vue"],"names":[],"mappings":"AACA,OAAA,kBAAA,MAAA,wCAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,uBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA;AADA,GAFA;AAKA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GALA;;AAWA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,WAAA,EAAA,CADA;AAEA,MAAA,cAAA,EAAA,KAFA;AAGA,MAAA,aAAA,EAAA,KAHA;AAIA,MAAA,YAAA,EAAA;AAJA,KAAA;AAMA,GAlBA;;AAmBA,EAAA,QAAA,EAAA;AACA,IAAA,QAAA,GAAA;AACA,UAAA,KAAA,IAAA,EAAA,OAAA,6BAAA,WAAA,CAAA,mBAAA,EAAA,KAAA,WAAA,CAAA,EAAA;AACA,aAAA,gDAAA;AACA,KAJA;;AAKA,IAAA,OAAA,GAAA;AACA,YAAA,aAAA,GAAA,EAAA;AACA,UAAA,KAAA,CAAA,QAAA,EAAA,aAAA,CAAA,IAAA,CAAA,YAAA,EAAA,uBAAA,EAAA,WAAA;AACA,UAAA,CAAA,KAAA,aAAA,EAAA,aAAA,CAAA,IAAA,CAAA,uBAAA,EAAA,WAAA;AACA,UAAA,CAAA,KAAA,YAAA,EAAA,aAAA,CAAA,IAAA,CAAA,kBAAA;AACA,UAAA,CAAA,KAAA,cAAA,IAAA,CAAA,KAAA,aAAA,EAAA,aAAA,CAAA,IAAA,CAAA,YAAA;AACA,YAAA,SAAA,GAAA,eAAA,CAAA,aAAA,CAAA;AACA,UAAA,cAAA,GAAA,EAAA;;AACA,UAAA,iBAAA,CAAA,CAAA,CAAA,CAAA,SAAA,EAAA;AACA,QAAA,cAAA,GAAA,sBAAA,iBAAA,CAAA,CAAA,CAAA,CAAA,EAAA,EAAA;AACA,OAFA,MAEA,IAAA,EAAA,CAAA,SAAA,EAAA;AACA,QAAA,cAAA,GAAA,GAAA,EAAA,CAAA,WAAA,YAAA;AACA;;AACA,YAAA,aAAA,GAAA,cAAA,KAAA,EAAA,GACA,uDADA,GAEA,0EAAA,cAAA,GAFA;AAGA,YAAA,OAAA,GAAA,SAAA,KAAA,EAAA,GACA,gCAAA,aAAA,EADA,GAEA,wBAAA,SAAA,cAAA,aAAA,EAFA;AAIA,UAAA,KAAA,IAAA,EAAA,OAAA;AACA,QAAA,WAAA,CAAA,mBAAA,EAAA,KAAA,WAAA,CAAA,KAAA,OAAA,EADA;AAEA,aAAA,2DAAA,OAAA,EAAA;AACA;;AA5BA,GAnBA;;AAiDA,EAAA,OAAA,GAAA;AACA,SAAA,GAAA,CAAA,UAAA,CAAA,cAAA,EAAA,MACA,oBAAA,CAAA,mBAAA,CAAA,QAAA,GAAA,SAAA,GAAA,KAAA,SAAA,EADA;AAEA,GApDA;;AAqDA,EAAA,OAAA,EAAA;AACA,IAAA,MAAA,GAAA;AACA,UAAA,KAAA,IAAA,EAAA;AACA,cAAA,GAAA,GAAA,MAAA,CAAA,WAAA;AACA,cAAA,GAAA,GAAA,mBAAA,CAAA,GAAA,CAAA,IAAA,CAAA;AACA,cAAA,IAAA,GAAA,mBAAA,CAAA,GAAA,CAAA,WAAA,EAAA;AACA,UAAA,YAAA,EAAA,CAAA,IAAA,MAAA,CAAA,aAAA,CAAA,CAAA,EAAA,MADA;AAEA,UAAA,UAAA,EAAA;AAFA,SAAA,EAGA,MAAA,CAAA,QAHA,CAAA;;AAIA,YAAA,IAAA,EAAA;AACA,eAAA,WAAA,GAAA,MAAA,CAAA,eAAA,CAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA,WAAA,CAAA,QAAA,EAAA,CAAA,IAAA,MAAA,CAAA,QAAA;AACA;AACA;;AACA,WAAA,cAAA,GAAA,WAAA,CAAA,GAAA,CAAA,CAAA,UAAA;AACA,WAAA,aAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,YAAA;AACA,WAAA,YAAA,GAAA,WAAA,CAAA,GAAA,CAAA,CAAA,UAAA,IAAA,CAAA,KAAA,CAAA,QAAA,IACA,YAAA,CAAA,qBAAA,CAAA,YADA;AAEA,KAjBA;;AAkBA,IAAA,cAAA,GAAA;AACA,MAAA,kBAAA,CAAA,KAAA,IAAA,CAAA;AACA,MAAA,QAAA,CAAA,EAAA,CAAA,MAAA,CAAA,IAAA;AACA;;AArBA;AArDA,CAAA","sourcesContent":["<script>\r\nimport ModalWrapperChoice from \"@/components/modals/ModalWrapperChoice\";\r\n\r\nexport default {\r\n  name: \"AntimatterGalaxyModal\",\r\n  components: {\r\n    ModalWrapperChoice\r\n  },\r\n  props: {\r\n    bulk: {\r\n      type: Boolean,\r\n      required: true,\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      newGalaxies: 0,\r\n      keepAntimatter: false,\r\n      perkANRBought: false,\r\n      keepDimBoost: false\r\n    };\r\n  },\r\n  computed: {\r\n    topLabel() {\r\n      if (this.bulk) return `You are about to purchase ${quantifyInt(\"Antimatter Galaxy\", this.newGalaxies)}`;\r\n      return `You are about to purchase an Antimatter Galaxy`;\r\n    },\r\n    message() {\r\n      const resetResouces = [];\r\n      if (Pelle.isDoomed) resetResouces.push(\"Antimatter\", \"Antimatter Dimensions\", \"Tickspeed\");\r\n      if (!this.perkANRBought) resetResouces.push(\"Antimatter Dimensions\", \"Tickspeed\");\r\n      if (!this.keepDimBoost) resetResouces.push(\"Dimension Boosts\");\r\n      if (!this.keepAntimatter && !this.perkANRBought) resetResouces.push(\"Antimatter\");\r\n      const resetList = makeEnumeration(resetResouces);\r\n      let tickspeedFixed = \"\";\r\n      if (InfinityChallenge(3).isRunning) {\r\n        tickspeedFixed = `Infinity Challenge ${InfinityChallenge(3).id}`;\r\n      } else if (Ra.isRunning) {\r\n        tickspeedFixed = `${Ra.displayName}'s Reality`;\r\n      }\r\n      const tickspeedInfo = (tickspeedFixed === \"\")\r\n        ? \"you will receive a small boost to Tickspeed Upgrades.\"\r\n        : `you will not receive a boost to Tickspeed Upgrades, because you are in ${tickspeedFixed}.`;\r\n      const message = (resetList === \"\")\r\n        ? `This will reset nothing, and ${tickspeedInfo}`\r\n        : `This will reset your ${resetList}. However, ${tickspeedInfo}`;\r\n\r\n      if (this.bulk) return `Are you sure you want to purchase\r\n      ${quantifyInt(\"Antimatter Galaxy\", this.newGalaxies)}? ${message}`;\r\n      return `Are you sure you want to purchase an Antimatter Galaxy? ${message}`;\r\n    }\r\n  },\r\n  created() {\r\n    this.on$(GAME_EVENT.DIMBOOST_AFTER, () =>\r\n      (BreakInfinityUpgrade.autobuyMaxDimboosts.isBought ? undefined : this.emitClose()));\r\n  },\r\n  methods: {\r\n    update() {\r\n      if (this.bulk) {\r\n        const req = Galaxy.requirement;\r\n        const dim = AntimatterDimension(req.tier);\r\n        const bulk = bulkBuyBinarySearch(dim.totalAmount, {\r\n          costFunction: x => Galaxy.requirementAt(x).amount,\r\n          cumulative: false,\r\n        }, player.galaxies);\r\n        if (bulk) {\r\n          this.newGalaxies = Galaxy.buyableGalaxies(Math.round(dim.totalAmount.toNumber())) - player.galaxies;\r\n        }\r\n      }\r\n      this.keepAntimatter = Achievement(111).isUnlocked;\r\n      this.perkANRBought = Perk.antimatterNoReset.canBeApplied;\r\n      this.keepDimBoost = (Achievement(143).isUnlocked && !Pelle.isDoomed) ||\r\n        PelleUpgrade.galaxyNoResetDimboost.canBeApplied;\r\n    },\r\n    handleYesClick() {\r\n      requestGalaxyReset(this.bulk);\r\n      EventHub.ui.offAll(this);\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapperChoice\r\n    option=\"antimatterGalaxy\"\r\n    @confirm=\"handleYesClick\"\r\n  >\r\n    <template #header>\r\n      {{ topLabel }}\r\n    </template>\r\n\r\n    <div class=\"c-modal-message__text\">\r\n      {{ message }}\r\n    </div>\r\n  </ModalWrapperChoice>\r\n</template>\r\n"],"sourceRoot":"src/components/modals/prestige"},"metadata":{},"sourceType":"module"}