{"ast":null,"code":"import { DC } from \"@/core/constants\";\nexport const MatterScale = {\n  proton: new Decimal(\"2.82e-45\"),\n\n  estimate(matter) {\n    if (!matter) return [\"There is no antimatter yet.\"];\n\n    if (matter.gt(DC.E100000)) {\n      return [`If you wrote ${formatInt(3)} numbers a second, it would take you`, TimeSpan.fromSeconds(matter.log10() / 3).toString(), \"to write down your antimatter amount.\"];\n    }\n\n    const planck = new Decimal(\"4.22419e-105\");\n    const planckedMatter = matter.times(planck);\n\n    if (planckedMatter.gt(this.proton)) {\n      const _scale = this.macroScale(planckedMatter);\n\n      const amount = format(planckedMatter.dividedBy(_scale.amount), 2, 1);\n      return [`If every antimatter were a planck volume, you would have\n        enough to ${_scale.verb} ${amount} ${_scale.name}`];\n    }\n\n    const scale = this.microScale(matter);\n    return [`If every antimatter were ${format(this.proton.div(scale.amount).div(matter), 2, 1)} ${scale.name},\n      you would have enough to make a proton.`];\n  },\n\n  microScale(matter) {\n    const micro = this.microObjects;\n\n    for (let i = 0; i < micro.length; i++) {\n      const scale = micro[i];\n\n      if (matter.times(scale.amount).lt(this.proton)) {\n        return scale;\n      }\n    }\n\n    throw \"Cannot determine smallest antimatter scale\";\n  },\n\n  macroScale(matter) {\n    const macro = this.macroObjects;\n    const last = macro.last();\n    if (matter.gte(last.amount)) return last;\n    let low = 0;\n    let high = macro.length;\n\n    while (low !== high) {\n      const mid = Math.floor((low + high) / 2);\n\n      if (macro[mid].amount.lte(matter)) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n\n    return macro[high - 1];\n  },\n\n  microObjects: [{\n    amount: new Decimal(\"1e-54\"),\n    name: \"attometers cubed\"\n  }, {\n    amount: new Decimal(\"1e-63\"),\n    name: \"zeptometers cubed\"\n  }, {\n    amount: new Decimal(\"1e-72\"),\n    name: \"yoctometers cubed\"\n  }, {\n    amount: new Decimal(\"4.22419e-105\"),\n    name: \"planck volumes\"\n  }],\n  macroObjects: [{\n    amount: new Decimal(\"2.82e-45\"),\n    name: \"protons\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"1e-42\"),\n    name: \"nuclei\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"7.23e-30\"),\n    name: \"Hydrogen atoms\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"5e-21\"),\n    name: \"viruses\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"9e-17\"),\n    name: \"red blood cells\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"6.2e-11\"),\n    name: \"grains of sand\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"5e-8\"),\n    name: \"grains of rice\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"3.555e-6\"),\n    name: \"teaspoons\",\n    verb: \"fill\"\n  }, {\n    amount: new Decimal(\"7.5e-4\"),\n    name: \"wine bottles\",\n    verb: \"fill\"\n  }, {\n    amount: DC.D1,\n    name: \"fridge-freezers\",\n    verb: \"fill\"\n  }, {\n    amount: new Decimal(\"2.5e3\"),\n    name: \"Olympic-sized swimming pools\",\n    verb: \"fill\"\n  }, {\n    amount: new Decimal(\"2.6006e6\"),\n    name: \"Great Pyramids of Giza\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"3.3e8\"),\n    name: \"Great Walls of China\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"5e12\"),\n    name: \"large asteroids\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"4.5e17\"),\n    name: \"dwarf planets\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"1.08e21\"),\n    name: \"Earths\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"1.53e24\"),\n    name: \"Jupiters\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"1.41e27\"),\n    name: \"Suns\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"5e32\"),\n    name: \"red giants\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"8e36\"),\n    name: \"hypergiant stars\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"1.7e45\"),\n    name: \"nebulas\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"1.7e48\"),\n    name: \"Oort clouds\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"3.3e55\"),\n    name: \"Local Bubbles\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"3.3e61\"),\n    name: \"galaxies\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"5e68\"),\n    name: \"Local Groups\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"1e73\"),\n    name: \"Sculptor Voids\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"3.4e80\"),\n    name: \"observable universes\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"1e113\"),\n    name: \"Dimensions\",\n    verb: \"make\"\n  }, {\n    amount: DC.C2P1024,\n    name: \"Infinity Dimensions\",\n    verb: \"make\"\n  }, {\n    amount: new Decimal(\"1e65000\"),\n    name: \"Time Dimensions\",\n    verb: \"make\"\n  }]\n};","map":{"version":3,"sources":["C:/Games/ADFasterer/ADfasterer/src/components/tabs/statistics/matter-scale.js"],"names":["DC","MatterScale","proton","Decimal","estimate","matter","gt","E100000","formatInt","TimeSpan","fromSeconds","log10","toString","planck","planckedMatter","times","scale","macroScale","amount","format","dividedBy","verb","name","microScale","div","micro","microObjects","i","length","lt","macro","macroObjects","last","gte","low","high","mid","Math","floor","lte","D1","C2P1024"],"mappings":"AAAA,SAASA,EAAT,QAAmB,kBAAnB;AAEA,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,MAAM,EAAE,IAAIC,OAAJ,CAAY,UAAZ,CADiB;;AAGzBC,EAAAA,QAAQ,CAACC,MAAD,EAAS;AACf,QAAI,CAACA,MAAL,EAAa,OAAO,CAAC,6BAAD,CAAP;;AACb,QAAIA,MAAM,CAACC,EAAP,CAAUN,EAAE,CAACO,OAAb,CAAJ,EAA2B;AACzB,aAAO,CACJ,gBAAeC,SAAS,CAAC,CAAD,CAAI,sCADxB,EAELC,QAAQ,CAACC,WAAT,CAAqBL,MAAM,CAACM,KAAP,KAAiB,CAAtC,EAAyCC,QAAzC,EAFK,EAGL,uCAHK,CAAP;AAKD;;AACD,UAAMC,MAAM,GAAG,IAAIV,OAAJ,CAAY,cAAZ,CAAf;AACA,UAAMW,cAAc,GAAGT,MAAM,CAACU,KAAP,CAAaF,MAAb,CAAvB;;AACA,QAAIC,cAAc,CAACR,EAAf,CAAkB,KAAKJ,MAAvB,CAAJ,EAAoC;AAClC,YAAMc,MAAK,GAAG,KAAKC,UAAL,CAAgBH,cAAhB,CAAd;;AACA,YAAMI,MAAM,GAAGC,MAAM,CAACL,cAAc,CAACM,SAAf,CAAyBJ,MAAK,CAACE,MAA/B,CAAD,EAAyC,CAAzC,EAA4C,CAA5C,CAArB;AACA,aAAO,CAAE;AACf,oBAAoBF,MAAK,CAACK,IAAK,IAAGH,MAAO,IAAGF,MAAK,CAACM,IAAK,EAD1C,CAAP;AAED;;AACD,UAAMN,KAAK,GAAG,KAAKO,UAAL,CAAgBlB,MAAhB,CAAd;AACA,WAAO,CAAE,4BAA2Bc,MAAM,CAAC,KAAKjB,MAAL,CAAYsB,GAAZ,CAAgBR,KAAK,CAACE,MAAtB,EAA8BM,GAA9B,CAAkCnB,MAAlC,CAAD,EAA4C,CAA5C,EAA+C,CAA/C,CAAkD,IAAGW,KAAK,CAACM,IAAK;AAC9G,8CADW,CAAP;AAED,GAvBwB;;AAyBzBC,EAAAA,UAAU,CAAClB,MAAD,EAAS;AACjB,UAAMoB,KAAK,GAAG,KAAKC,YAAnB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,YAAMX,KAAK,GAAGS,KAAK,CAACE,CAAD,CAAnB;;AACA,UAAItB,MAAM,CAACU,KAAP,CAAaC,KAAK,CAACE,MAAnB,EAA2BW,EAA3B,CAA8B,KAAK3B,MAAnC,CAAJ,EAAgD;AAC9C,eAAOc,KAAP;AACD;AACF;;AACD,UAAM,4CAAN;AACD,GAlCwB;;AAoCzBC,EAAAA,UAAU,CAACZ,MAAD,EAAS;AACjB,UAAMyB,KAAK,GAAG,KAAKC,YAAnB;AACA,UAAMC,IAAI,GAAGF,KAAK,CAACE,IAAN,EAAb;AACA,QAAI3B,MAAM,CAAC4B,GAAP,CAAWD,IAAI,CAACd,MAAhB,CAAJ,EAA6B,OAAOc,IAAP;AAC7B,QAAIE,GAAG,GAAG,CAAV;AACA,QAAIC,IAAI,GAAGL,KAAK,CAACF,MAAjB;;AACA,WAAOM,GAAG,KAAKC,IAAf,EAAqB;AACnB,YAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,GAAG,GAAGC,IAAP,IAAe,CAA1B,CAAZ;;AACA,UAAIL,KAAK,CAACM,GAAD,CAAL,CAAWlB,MAAX,CAAkBqB,GAAlB,CAAsBlC,MAAtB,CAAJ,EAAmC;AACjC6B,QAAAA,GAAG,GAAGE,GAAG,GAAG,CAAZ;AACD,OAFD,MAEO;AACLD,QAAAA,IAAI,GAAGC,GAAP;AACD;AACF;;AACD,WAAON,KAAK,CAACK,IAAI,GAAG,CAAR,CAAZ;AACD,GAnDwB;;AAqDzBT,EAAAA,YAAY,EAAE,CACZ;AAAER,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,OAAZ,CAAV;AAAgCmB,IAAAA,IAAI,EAAE;AAAtC,GADY,EAEZ;AAAEJ,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,OAAZ,CAAV;AAAgCmB,IAAAA,IAAI,EAAE;AAAtC,GAFY,EAGZ;AAAEJ,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,OAAZ,CAAV;AAAgCmB,IAAAA,IAAI,EAAE;AAAtC,GAHY,EAIZ;AAAEJ,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,cAAZ,CAAV;AAAuCmB,IAAAA,IAAI,EAAE;AAA7C,GAJY,CArDW;AA4DzBS,EAAAA,YAAY,EAAE,CACZ;AAAEb,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,UAAZ,CAAV;AAAmCmB,IAAAA,IAAI,EAAE,SAAzC;AAAoDD,IAAAA,IAAI,EAAE;AAA1D,GADY,EAEZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,OAAZ,CAAV;AAAgCmB,IAAAA,IAAI,EAAE,QAAtC;AAAgDD,IAAAA,IAAI,EAAE;AAAtD,GAFY,EAGZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,UAAZ,CAAV;AAAmCmB,IAAAA,IAAI,EAAE,gBAAzC;AAA2DD,IAAAA,IAAI,EAAE;AAAjE,GAHY,EAIZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,OAAZ,CAAV;AAAgCmB,IAAAA,IAAI,EAAE,SAAtC;AAAiDD,IAAAA,IAAI,EAAE;AAAvD,GAJY,EAKZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,OAAZ,CAAV;AAAgCmB,IAAAA,IAAI,EAAE,iBAAtC;AAAyDD,IAAAA,IAAI,EAAE;AAA/D,GALY,EAMZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,SAAZ,CAAV;AAAkCmB,IAAAA,IAAI,EAAE,gBAAxC;AAA0DD,IAAAA,IAAI,EAAE;AAAhE,GANY,EAOZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,MAAZ,CAAV;AAA+BmB,IAAAA,IAAI,EAAE,gBAArC;AAAuDD,IAAAA,IAAI,EAAE;AAA7D,GAPY,EAQZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,UAAZ,CAAV;AAAmCmB,IAAAA,IAAI,EAAE,WAAzC;AAAsDD,IAAAA,IAAI,EAAE;AAA5D,GARY,EASZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,QAAZ,CAAV;AAAiCmB,IAAAA,IAAI,EAAE,cAAvC;AAAuDD,IAAAA,IAAI,EAAE;AAA7D,GATY,EAUZ;AAAEH,IAAAA,MAAM,EAAElB,EAAE,CAACwC,EAAb;AAAiBlB,IAAAA,IAAI,EAAE,iBAAvB;AAA0CD,IAAAA,IAAI,EAAE;AAAhD,GAVY,EAWZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,OAAZ,CAAV;AAAgCmB,IAAAA,IAAI,EAAE,8BAAtC;AAAsED,IAAAA,IAAI,EAAE;AAA5E,GAXY,EAYZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,UAAZ,CAAV;AAAmCmB,IAAAA,IAAI,EAAE,wBAAzC;AAAmED,IAAAA,IAAI,EAAE;AAAzE,GAZY,EAaZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,OAAZ,CAAV;AAAgCmB,IAAAA,IAAI,EAAE,sBAAtC;AAA8DD,IAAAA,IAAI,EAAE;AAApE,GAbY,EAcZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,MAAZ,CAAV;AAA+BmB,IAAAA,IAAI,EAAE,iBAArC;AAAwDD,IAAAA,IAAI,EAAE;AAA9D,GAdY,EAeZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,QAAZ,CAAV;AAAiCmB,IAAAA,IAAI,EAAE,eAAvC;AAAwDD,IAAAA,IAAI,EAAE;AAA9D,GAfY,EAgBZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,SAAZ,CAAV;AAAkCmB,IAAAA,IAAI,EAAE,QAAxC;AAAkDD,IAAAA,IAAI,EAAE;AAAxD,GAhBY,EAiBZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,SAAZ,CAAV;AAAkCmB,IAAAA,IAAI,EAAE,UAAxC;AAAoDD,IAAAA,IAAI,EAAE;AAA1D,GAjBY,EAkBZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,SAAZ,CAAV;AAAkCmB,IAAAA,IAAI,EAAE,MAAxC;AAAgDD,IAAAA,IAAI,EAAE;AAAtD,GAlBY,EAmBZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,MAAZ,CAAV;AAA+BmB,IAAAA,IAAI,EAAE,YAArC;AAAmDD,IAAAA,IAAI,EAAE;AAAzD,GAnBY,EAoBZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,MAAZ,CAAV;AAA+BmB,IAAAA,IAAI,EAAE,kBAArC;AAAyDD,IAAAA,IAAI,EAAE;AAA/D,GApBY,EAqBZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,QAAZ,CAAV;AAAiCmB,IAAAA,IAAI,EAAE,SAAvC;AAAkDD,IAAAA,IAAI,EAAE;AAAxD,GArBY,EAsBZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,QAAZ,CAAV;AAAiCmB,IAAAA,IAAI,EAAE,aAAvC;AAAsDD,IAAAA,IAAI,EAAE;AAA5D,GAtBY,EAuBZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,QAAZ,CAAV;AAAiCmB,IAAAA,IAAI,EAAE,eAAvC;AAAwDD,IAAAA,IAAI,EAAE;AAA9D,GAvBY,EAwBZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,QAAZ,CAAV;AAAiCmB,IAAAA,IAAI,EAAE,UAAvC;AAAmDD,IAAAA,IAAI,EAAE;AAAzD,GAxBY,EAyBZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,MAAZ,CAAV;AAA+BmB,IAAAA,IAAI,EAAE,cAArC;AAAqDD,IAAAA,IAAI,EAAE;AAA3D,GAzBY,EA0BZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,MAAZ,CAAV;AAA+BmB,IAAAA,IAAI,EAAE,gBAArC;AAAuDD,IAAAA,IAAI,EAAE;AAA7D,GA1BY,EA2BZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,QAAZ,CAAV;AAAiCmB,IAAAA,IAAI,EAAE,sBAAvC;AAA+DD,IAAAA,IAAI,EAAE;AAArE,GA3BY,EA4BZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,OAAZ,CAAV;AAAgCmB,IAAAA,IAAI,EAAE,YAAtC;AAAoDD,IAAAA,IAAI,EAAE;AAA1D,GA5BY,EA6BZ;AAAEH,IAAAA,MAAM,EAAElB,EAAE,CAACyC,OAAb;AAAsBnB,IAAAA,IAAI,EAAE,qBAA5B;AAAmDD,IAAAA,IAAI,EAAE;AAAzD,GA7BY,EA8BZ;AAAEH,IAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAY,SAAZ,CAAV;AAAkCmB,IAAAA,IAAI,EAAE,iBAAxC;AAA2DD,IAAAA,IAAI,EAAE;AAAjE,GA9BY;AA5DW,CAApB","sourcesContent":["import { DC } from \"@/core/constants\";\r\n\r\nexport const MatterScale = {\r\n  proton: new Decimal(\"2.82e-45\"),\r\n\r\n  estimate(matter) {\r\n    if (!matter) return [\"There is no antimatter yet.\"];\r\n    if (matter.gt(DC.E100000)) {\r\n      return [\r\n        `If you wrote ${formatInt(3)} numbers a second, it would take you`,\r\n        TimeSpan.fromSeconds(matter.log10() / 3).toString(),\r\n        \"to write down your antimatter amount.\"\r\n      ];\r\n    }\r\n    const planck = new Decimal(\"4.22419e-105\");\r\n    const planckedMatter = matter.times(planck);\r\n    if (planckedMatter.gt(this.proton)) {\r\n      const scale = this.macroScale(planckedMatter);\r\n      const amount = format(planckedMatter.dividedBy(scale.amount), 2, 1);\r\n      return [`If every antimatter were a planck volume, you would have\r\n        enough to ${scale.verb} ${amount} ${scale.name}`];\r\n    }\r\n    const scale = this.microScale(matter);\r\n    return [`If every antimatter were ${format(this.proton.div(scale.amount).div(matter), 2, 1)} ${scale.name},\r\n      you would have enough to make a proton.`];\r\n  },\r\n\r\n  microScale(matter) {\r\n    const micro = this.microObjects;\r\n    for (let i = 0; i < micro.length; i++) {\r\n      const scale = micro[i];\r\n      if (matter.times(scale.amount).lt(this.proton)) {\r\n        return scale;\r\n      }\r\n    }\r\n    throw \"Cannot determine smallest antimatter scale\";\r\n  },\r\n\r\n  macroScale(matter) {\r\n    const macro = this.macroObjects;\r\n    const last = macro.last();\r\n    if (matter.gte(last.amount)) return last;\r\n    let low = 0;\r\n    let high = macro.length;\r\n    while (low !== high) {\r\n      const mid = Math.floor((low + high) / 2);\r\n      if (macro[mid].amount.lte(matter)) {\r\n        low = mid + 1;\r\n      } else {\r\n        high = mid;\r\n      }\r\n    }\r\n    return macro[high - 1];\r\n  },\r\n\r\n  microObjects: [\r\n    { amount: new Decimal(\"1e-54\"), name: \"attometers cubed\" },\r\n    { amount: new Decimal(\"1e-63\"), name: \"zeptometers cubed\" },\r\n    { amount: new Decimal(\"1e-72\"), name: \"yoctometers cubed\" },\r\n    { amount: new Decimal(\"4.22419e-105\"), name: \"planck volumes\" }\r\n  ],\r\n\r\n  macroObjects: [\r\n    { amount: new Decimal(\"2.82e-45\"), name: \"protons\", verb: \"make\" },\r\n    { amount: new Decimal(\"1e-42\"), name: \"nuclei\", verb: \"make\" },\r\n    { amount: new Decimal(\"7.23e-30\"), name: \"Hydrogen atoms\", verb: \"make\" },\r\n    { amount: new Decimal(\"5e-21\"), name: \"viruses\", verb: \"make\" },\r\n    { amount: new Decimal(\"9e-17\"), name: \"red blood cells\", verb: \"make\" },\r\n    { amount: new Decimal(\"6.2e-11\"), name: \"grains of sand\", verb: \"make\" },\r\n    { amount: new Decimal(\"5e-8\"), name: \"grains of rice\", verb: \"make\" },\r\n    { amount: new Decimal(\"3.555e-6\"), name: \"teaspoons\", verb: \"fill\" },\r\n    { amount: new Decimal(\"7.5e-4\"), name: \"wine bottles\", verb: \"fill\" },\r\n    { amount: DC.D1, name: \"fridge-freezers\", verb: \"fill\" },\r\n    { amount: new Decimal(\"2.5e3\"), name: \"Olympic-sized swimming pools\", verb: \"fill\" },\r\n    { amount: new Decimal(\"2.6006e6\"), name: \"Great Pyramids of Giza\", verb: \"make\" },\r\n    { amount: new Decimal(\"3.3e8\"), name: \"Great Walls of China\", verb: \"make\" },\r\n    { amount: new Decimal(\"5e12\"), name: \"large asteroids\", verb: \"make\" },\r\n    { amount: new Decimal(\"4.5e17\"), name: \"dwarf planets\", verb: \"make\" },\r\n    { amount: new Decimal(\"1.08e21\"), name: \"Earths\", verb: \"make\" },\r\n    { amount: new Decimal(\"1.53e24\"), name: \"Jupiters\", verb: \"make\" },\r\n    { amount: new Decimal(\"1.41e27\"), name: \"Suns\", verb: \"make\" },\r\n    { amount: new Decimal(\"5e32\"), name: \"red giants\", verb: \"make\" },\r\n    { amount: new Decimal(\"8e36\"), name: \"hypergiant stars\", verb: \"make\" },\r\n    { amount: new Decimal(\"1.7e45\"), name: \"nebulas\", verb: \"make\" },\r\n    { amount: new Decimal(\"1.7e48\"), name: \"Oort clouds\", verb: \"make\" },\r\n    { amount: new Decimal(\"3.3e55\"), name: \"Local Bubbles\", verb: \"make\" },\r\n    { amount: new Decimal(\"3.3e61\"), name: \"galaxies\", verb: \"make\" },\r\n    { amount: new Decimal(\"5e68\"), name: \"Local Groups\", verb: \"make\" },\r\n    { amount: new Decimal(\"1e73\"), name: \"Sculptor Voids\", verb: \"make\" },\r\n    { amount: new Decimal(\"3.4e80\"), name: \"observable universes\", verb: \"make\" },\r\n    { amount: new Decimal(\"1e113\"), name: \"Dimensions\", verb: \"make\" },\r\n    { amount: DC.C2P1024, name: \"Infinity Dimensions\", verb: \"make\" },\r\n    { amount: new Decimal(\"1e65000\"), name: \"Time Dimensions\", verb: \"make\" }\r\n  ]\r\n};\r\n"]},"metadata":{},"sourceType":"module"}