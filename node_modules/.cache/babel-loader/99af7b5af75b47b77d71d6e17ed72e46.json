{"ast":null,"code":"import ModalOptionsToggleButton from \"@/components/ModalOptionsToggleButton\";\nimport ModalWrapperOptions from \"@/components/modals/options/ModalWrapperOptions\";\nimport SliderComponent from \"@/components/SliderComponent\";\nexport default {\n  name: \"AnimationOptionsModal\",\n  components: {\n    ModalOptionsToggleButton,\n    ModalWrapperOptions,\n    SliderComponent\n  },\n\n  data() {\n    return {\n      infinityUnlocked: false,\n      eternityUnlocked: false,\n      dilationUnlocked: false,\n      tachyonsUnlocked: false,\n      realityUnlocked: false,\n      animatedThemeUnlocked: false,\n      bigCrunch: false,\n      eternity: false,\n      dilation: false,\n      tachyonParticles: false,\n      reality: false,\n      background: false,\n      blobSnowflakes: 16,\n      isS11Active: false\n    };\n  },\n\n  computed: {\n    sliderProps() {\n      return {\n        min: 1,\n        max: 500,\n        interval: 1,\n        width: \"100%\",\n        tooltip: false\n      };\n    },\n\n    fullCompletion() {\n      return player.records.fullGameCompletions > 0;\n    }\n\n  },\n  watch: {\n    bigCrunch(newValue) {\n      player.options.animations.bigCrunch = newValue;\n    },\n\n    eternity(newValue) {\n      player.options.animations.eternity = newValue;\n    },\n\n    dilation(newValue) {\n      player.options.animations.dilation = newValue;\n    },\n\n    tachyonParticles(newValue) {\n      player.options.animations.tachyonParticles = newValue;\n    },\n\n    reality(newValue) {\n      player.options.animations.reality = newValue;\n    },\n\n    background(newValue) {\n      player.options.animations.background = newValue;\n    },\n\n    blobSnowflakes(newValue) {\n      player.options.animations.blobSnowflakes = parseInt(newValue, 10);\n    }\n\n  },\n  methods: {\n    update() {\n      const progress = PlayerProgress.current;\n      this.infinityUnlocked = this.fullCompletion || progress.isInfinityUnlocked;\n      this.eternityUnlocked = this.fullCompletion || progress.isEternityUnlocked;\n      this.realityUnlocked = this.fullCompletion || progress.isRealityUnlocked; // 136 is given upon dilating\n\n      this.dilationUnlocked = this.realityUnlocked || Achievement(136).canBeApplied;\n      this.tachyonsUnlocked = this.realityUnlocked || Currency.tachyonParticles.gt(0);\n      this.animatedThemeUnlocked = Theme.animatedThemeUnlocked;\n      this.isS11Active = Theme.currentName() === \"S11\";\n      const options = player.options.animations;\n      this.bigCrunch = options.bigCrunch;\n      this.eternity = options.eternity;\n      this.dilation = options.dilation;\n      this.tachyonParticles = options.tachyonParticles;\n      this.reality = options.reality;\n      this.background = options.background;\n      this.blobSnowflakes = options.blobSnowflakes;\n    },\n\n    adjustSliderValue(value) {\n      this.blobSnowflakes = value;\n      player.options.blobSnowflakes = this.blobSnowflakes;\n    }\n\n  }\n};","map":{"version":3,"sources":["AnimationOptionsModal.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport ModalOptionsToggleButton from \"@/components/ModalOptionsToggleButton\";\r\nimport ModalWrapperOptions from \"@/components/modals/options/ModalWrapperOptions\";\r\nimport SliderComponent from \"@/components/SliderComponent\";\r\n\r\nexport default {\r\n  name: \"AnimationOptionsModal\",\r\n  components: {\r\n    ModalOptionsToggleButton,\r\n    ModalWrapperOptions,\r\n    SliderComponent\r\n  },\r\n  data() {\r\n    return {\r\n      infinityUnlocked: false,\r\n      eternityUnlocked: false,\r\n      dilationUnlocked: false,\r\n      tachyonsUnlocked: false,\r\n      realityUnlocked: false,\r\n      animatedThemeUnlocked: false,\r\n      bigCrunch: false,\r\n      eternity: false,\r\n      dilation: false,\r\n      tachyonParticles: false,\r\n      reality: false,\r\n      background: false,\r\n      blobSnowflakes: 16,\r\n      isS11Active: false\r\n    };\r\n  },\r\n  computed: {\r\n    sliderProps() {\r\n      return {\r\n        min: 1,\r\n        max: 500,\r\n        interval: 1,\r\n        width: \"100%\",\r\n        tooltip: false\r\n      };\r\n    },\r\n    fullCompletion() {\r\n      return player.records.fullGameCompletions > 0;\r\n    }\r\n  },\r\n  watch: {\r\n    bigCrunch(newValue) {\r\n      player.options.animations.bigCrunch = newValue;\r\n    },\r\n    eternity(newValue) {\r\n      player.options.animations.eternity = newValue;\r\n    },\r\n    dilation(newValue) {\r\n      player.options.animations.dilation = newValue;\r\n    },\r\n    tachyonParticles(newValue) {\r\n      player.options.animations.tachyonParticles = newValue;\r\n    },\r\n    reality(newValue) {\r\n      player.options.animations.reality = newValue;\r\n    },\r\n    background(newValue) {\r\n      player.options.animations.background = newValue;\r\n    },\r\n    blobSnowflakes(newValue) {\r\n      player.options.animations.blobSnowflakes = parseInt(newValue, 10);\r\n    }\r\n  },\r\n  methods: {\r\n    update() {\r\n      const progress = PlayerProgress.current;\r\n      this.infinityUnlocked = this.fullCompletion || progress.isInfinityUnlocked;\r\n      this.eternityUnlocked = this.fullCompletion || progress.isEternityUnlocked;\r\n      this.realityUnlocked = this.fullCompletion || progress.isRealityUnlocked;\r\n      // 136 is given upon dilating\r\n      this.dilationUnlocked = this.realityUnlocked || Achievement(136).canBeApplied;\r\n      this.tachyonsUnlocked = this.realityUnlocked || Currency.tachyonParticles.gt(0);\r\n      this.animatedThemeUnlocked = Theme.animatedThemeUnlocked;\r\n      this.isS11Active = Theme.currentName() === \"S11\";\r\n\r\n      const options = player.options.animations;\r\n      this.bigCrunch = options.bigCrunch;\r\n      this.eternity = options.eternity;\r\n      this.dilation = options.dilation;\r\n      this.tachyonParticles = options.tachyonParticles;\r\n      this.reality = options.reality;\r\n      this.background = options.background;\r\n      this.blobSnowflakes = options.blobSnowflakes;\r\n    },\r\n    adjustSliderValue(value) {\r\n      this.blobSnowflakes = value;\r\n      player.options.blobSnowflakes = this.blobSnowflakes;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ModalWrapperOptions class=\"c-modal-options__large\">\r\n    <template #header>\r\n      Animation Options\r\n    </template>\r\n    <div class=\"c-modal-options__button-container\">\r\n      <ModalOptionsToggleButton\r\n        v-if=\"infinityUnlocked\"\r\n        v-model=\"bigCrunch\"\r\n        text=\"Big Crunch:\"\r\n      />\r\n      <ModalOptionsToggleButton\r\n        v-if=\"eternityUnlocked\"\r\n        v-model=\"eternity\"\r\n        text=\"Eternity:\"\r\n      />\r\n      <ModalOptionsToggleButton\r\n        v-if=\"dilationUnlocked\"\r\n        v-model=\"dilation\"\r\n        text=\"Dilation:\"\r\n      />\r\n      <ModalOptionsToggleButton\r\n        v-if=\"tachyonsUnlocked\"\r\n        v-model=\"tachyonParticles\"\r\n        text=\"Tachyon particles:\"\r\n      />\r\n      <ModalOptionsToggleButton\r\n        v-if=\"realityUnlocked\"\r\n        v-model=\"reality\"\r\n        text=\"Reality:\"\r\n      />\r\n      <div v-if=\"!isS11Active\">\r\n        <ModalOptionsToggleButton\r\n          v-if=\"animatedThemeUnlocked\"\r\n          v-model=\"background\"\r\n          onclick=\"Themes.find(Theme.currentName()).set();\"\r\n          text=\"Background:\"\r\n        />\r\n      </div>\r\n      <div v-else>\r\n        <ModalOptionsToggleButton\r\n          v-if=\"animatedThemeUnlocked\"\r\n          v-model=\"background\"\r\n          onclick=\"Themes.find(Theme.currentName()).set();\"\r\n          text=\"Blobsnow:\"\r\n        />\r\n      </div>\r\n      <div\r\n        v-if=\"isS11Active\"\r\n        class=\"c-blobflake-slider o-primary-btn o-primary-btn--modal-option o-primary-btn--slider\"\r\n      >\r\n        <b>{{ quantifyInt(\"Blobflake\", parseInt(blobSnowflakes)) }}</b>\r\n        <SliderComponent\r\n          class=\"o-primary-btn--slider__slider\"\r\n          v-bind=\"sliderProps\"\r\n          :value=\"blobSnowflakes\"\r\n          @input=\"adjustSliderValue($event)\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </ModalWrapperOptions>\r\n</template>\r\n\r\n<style scoped>\r\n.c-blobflake-slider {\r\n  padding: 1.2rem;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/modals/options"},"metadata":{},"sourceType":"module"}