{"ast":null,"code":"import \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport wordShift from \"@/core/word-shift\";\nimport { isFunction, isString } from \"@/utility\";\n/* eslint-disable no-empty-function */\n\nexport default {\n  name: \"DescriptionDisplay\",\n  props: {\n    config: {\n      type: Object,\n      required: false,\n      default: undefined\n    },\n    name: {\n      type: String,\n      required: false,\n      default: undefined\n    },\n    length: {\n      type: Number,\n      required: false,\n      default: undefined\n    },\n    title: {\n      type: String,\n      required: false,\n      default: \"\"\n    }\n  },\n\n  data() {\n    return {\n      isVisible: false,\n      description: \"\"\n    };\n  },\n\n  computed: {\n    classObject() {\n      const name = this.name;\n\n      if (name === undefined) {\n        return undefined;\n      }\n\n      const classes = {};\n      classes[name] = true;\n\n      if (this.description.length >= this.length) {\n        classes[`${name}--small-text`] = true;\n      }\n\n      return classes;\n    }\n\n  },\n  watch: {\n    config: {\n      immediate: true,\n\n      handler(config) {\n        this.updateFunction = () => {};\n\n        const description = config === null || config === void 0 ? void 0 : config.description; // Descriptions in config entries are occasionally used both as standalone statements and mid-sentence,\n        // so we explicitly capitalize them here because this only shows up in standalone places\n\n        const capitalize = str => str.charAt(0).toUpperCase() + str.slice(1);\n\n        this.isVisible = description !== undefined;\n        if (!this.isVisible) return;\n\n        if (isString(description)) {\n          this.description = capitalize(description);\n          return;\n        }\n\n        if (!isFunction(description)) {\n          throw new Error(`DescriptionDisplay config.description has ` + ` unsupported type \"${typeof description}\"`);\n        }\n\n        const value = description();\n\n        if (isString(value)) {\n          // This is a special case for scrambling EC6 description text\n          if (this.config.scrambleText) {\n            this.description = capitalize(value).replace(\"*\", wordShift.wordCycle(this.config.scrambleText, true));\n\n            this.updateFunction = () => this.description = capitalize(description()).replace(\"*\", wordShift.wordCycle(this.config.scrambleText, true));\n\n            return;\n          }\n\n          this.description = capitalize(value);\n\n          this.updateFunction = () => this.description = capitalize(description());\n\n          return;\n        }\n\n        throw new Error(`DescriptionDisplay config.description is a function ` + `which returns unsupported type \"${typeof value}\"`);\n      }\n\n    }\n  },\n\n  beforeCreate() {\n    this.updateFunction = () => {};\n  },\n\n  methods: {\n    update() {\n      this.updateFunction();\n    }\n\n  }\n};","map":{"version":3,"sources":["DescriptionDisplay.vue"],"names":[],"mappings":"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","sourcesContent":["<script>\r\nimport wordShift from \"@/core/word-shift\";\r\n\r\nimport { isFunction, isString } from \"@/utility\";\r\n\r\n/* eslint-disable no-empty-function */\r\nexport default {\r\n  name: \"DescriptionDisplay\",\r\n  props: {\r\n    config: {\r\n      type: Object,\r\n      required: false,\r\n      default: undefined\r\n    },\r\n    name: {\r\n      type: String,\r\n      required: false,\r\n      default: undefined\r\n    },\r\n    length: {\r\n      type: Number,\r\n      required: false,\r\n      default: undefined\r\n    },\r\n    title: {\r\n      type: String,\r\n      required: false,\r\n      default: \"\"\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isVisible: false,\r\n      description: \"\"\r\n    };\r\n  },\r\n  computed: {\r\n    classObject() {\r\n      const name = this.name;\r\n      if (name === undefined) {\r\n        return undefined;\r\n      }\r\n      const classes = {};\r\n      classes[name] = true;\r\n      if (this.description.length >= this.length) {\r\n        classes[`${name}--small-text`] = true;\r\n      }\r\n      return classes;\r\n    }\r\n  },\r\n  watch: {\r\n    config: {\r\n      immediate: true,\r\n      handler(config) {\r\n        this.updateFunction = () => { };\r\n        const description = config?.description;\r\n        // Descriptions in config entries are occasionally used both as standalone statements and mid-sentence,\r\n        // so we explicitly capitalize them here because this only shows up in standalone places\r\n        const capitalize = str => str.charAt(0).toUpperCase() + str.slice(1);\r\n        this.isVisible = description !== undefined;\r\n        if (!this.isVisible) return;\r\n\r\n        if (isString(description)) {\r\n          this.description = capitalize(description);\r\n          return;\r\n        }\r\n\r\n        if (!isFunction(description)) {\r\n          throw new Error(`DescriptionDisplay config.description has ` +\r\n            ` unsupported type \"${typeof description}\"`);\r\n        }\r\n\r\n        const value = description();\r\n\r\n        if (isString(value)) {\r\n          // This is a special case for scrambling EC6 description text\r\n          if (this.config.scrambleText) {\r\n            this.description = capitalize(value).replace(\"*\", wordShift.wordCycle(this.config.scrambleText, true));\r\n            this.updateFunction = () =>\r\n              this.description = capitalize(description())\r\n                .replace(\"*\", wordShift.wordCycle(this.config.scrambleText, true));\r\n            return;\r\n          }\r\n          this.description = capitalize(value);\r\n          this.updateFunction = () => this.description = capitalize(description());\r\n          return;\r\n\r\n\r\n        }\r\n\r\n        throw new Error(`DescriptionDisplay config.description is a function ` +\r\n          `which returns unsupported type \"${typeof value}\"`);\r\n      }\r\n    }\r\n  },\r\n  beforeCreate() {\r\n    this.updateFunction = () => { };\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.updateFunction();\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <span\r\n    v-if=\"isVisible\"\r\n    :class=\"classObject\"\r\n  >\r\n    {{ title }} {{ description }}\r\n  </span>\r\n</template>\r\n"],"sourceRoot":"src/components"},"metadata":{},"sourceType":"module"}